"use strict";
(globalThis.webpackChunk_github_ui_github_ui =
    globalThis.webpackChunk_github_ui_github_ui || []).push([
    ["issues-react", "packages_global-sso-banner_GlobalSsoBanner_tsx"],
    {
        16070: (e, l, a) => {
            a.d(l, { Y0: () => V, $I: () => M, kR: () => D });
            var n = a(74848),
                s = a(96540),
                i = a(97949),
                t = a(38621),
                r = a(88934),
                o = a(31315),
                u = a(69599),
                d = a(51587),
                c = a(11083),
                m = a(30459),
                g = a(79634);
            let p = {
                bannerOuterWrapper:
                    "GlobalSSOBanner-module__bannerOuterWrapper--fyxDF",
                bannerInnerWrapper:
                    "GlobalSSOBanner-module__bannerInnerWrapper--butqf",
                banner: "GlobalSSOBanner-module__banner--kzCnx",
                dismissedOrgList:
                    "GlobalSSOBanner-module__dismissedOrgList--Jkrx7",
                durationSelector:
                    "GlobalSSOBanner-module__durationSelector--DOJjX",
            };
            function y({ children: e, hidden: l }) {
                let [a, i] = s.useState("visible"),
                    t = s.useRef(null),
                    r = s.useRef(void 0);
                return (s.useEffect(() => {
                    if (l && "visible" === a) {
                        i("collapsing");
                        let e = t.current;
                        if (e) {
                            let l = e.getBoundingClientRect().height;
                            ((r.current = l), (e.style.height = `${l}px`));
                        }
                    } else if ("collapsing" === a) {
                        let e = setTimeout(() => {
                            i("hidden");
                        }, 300);
                        return () => {
                            clearTimeout(e);
                        };
                    }
                }, [l, a]),
                "hidden" === a)
                    ? null
                    : (0, n.jsx)("div", {
                          ref: t,
                          style: {
                              height:
                                  "visible" === a ? (r.current ?? "auto") : 0,
                          },
                          className: p.bannerOuterWrapper,
                          children: (0, n.jsx)("div", {
                              className: p.bannerInnerWrapper,
                              style: {
                                  transform:
                                      "visible" === a
                                          ? void 0
                                          : `translateY(-${r.current ?? 0}px)`,
                              },
                              children: e,
                          }),
                      });
            }
            try {
                (300).displayName || ((300).displayName = "ANIMATION_DURATION");
            } catch {}
            try {
                y.displayName || (y.displayName = "SlideDismiss");
            } catch {}
            var k = a(21728),
                h = a(57352),
                b = a(15220);
            function f(e) {
                let l,
                    a,
                    s,
                    i = (0, k.c)(7),
                    { ssoOrgs: t } = e;
                if (1 === t.length) {
                    let e,
                        l = t[0],
                        a = l?.name;
                    return (
                        i[0] !== a
                            ? ((e = (0, n.jsxs)("p", {
                                  children: [
                                      "You are dismissing single sign-on prompts for the ",
                                      a,
                                      " organization on this device.",
                                  ],
                              })),
                              (i[0] = a),
                              (i[1] = e))
                            : (e = i[1]),
                        e
                    );
                }
                return (
                    i[2] === Symbol.for("react.memo_cache_sentinel")
                        ? ((l = (0, n.jsx)("p", {
                              children:
                                  "You are dismissing single sign-on prompts for the following organizations on this device:",
                          })),
                          (i[2] = l))
                        : (l = i[2]),
                    i[3] !== t
                        ? ((a = t.map(C)), (i[3] = t), (i[4] = a))
                        : (a = i[4]),
                    i[5] !== a
                        ? ((s = (0, n.jsxs)(n.Fragment, {
                              children: [
                                  l,
                                  (0, n.jsx)("ul", {
                                      className: p.dismissedOrgList,
                                      children: a,
                                  }),
                              ],
                          })),
                          (i[5] = a),
                          (i[6] = s))
                        : (s = i[6]),
                    s
                );
            }
            function C(e) {
                return (0, n.jsx)("li", { children: e.name }, e.id);
            }
            try {
                f.displayName || (f.displayName = "DismissalSummary");
            } catch {}
            var F = a(27042),
                S = a(5524),
                L = a(46251);
            let K = 30,
                v = [
                    { id: "one-day", text: "One day", days: 1 },
                    { id: "one-week", text: "One week", days: 7 },
                    { id: "one-month", text: "One month", days: K },
                    { id: "one-year", text: "One year", days: 365 },
                ],
                I = () => v.findIndex((e) => e.days === K);
            function _(e) {
                let l,
                    a,
                    s,
                    i,
                    r,
                    o = (0, k.c)(11),
                    { selectedDurationIndex: u, onDurationChange: d } = e,
                    c = v[u];
                o[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((l = (0, n.jsx)("span", {
                          id: "dismissal-duration-label",
                          children: "Remind me again in",
                      })),
                      (o[0] = l))
                    : (l = o[0]);
                let m = c?.text || "Pick duration";
                return (
                    o[1] !== m
                        ? ((a = (0, n.jsx)(F.W.Button, {
                              trailingAction: t.TriangleDownIcon,
                              "aria-labelledby": "dismissal-duration-label",
                              children: m,
                          })),
                          (o[1] = m),
                          (o[2] = a))
                        : (a = o[2]),
                    o[3] !== d || o[4] !== u
                        ? ((s = v.map((e, l) =>
                              (0, n.jsx)(
                                  S.l.Item,
                                  {
                                      role: "menuitemradio",
                                      selected: l === u,
                                      "aria-checked": l === u,
                                      onSelect: () => d(l),
                                      children: e.text,
                                  },
                                  e.id
                              )
                          )),
                          (o[3] = d),
                          (o[4] = u),
                          (o[5] = s))
                        : (s = o[5]),
                    o[6] !== s
                        ? ((i = (0, n.jsx)(F.W.Overlay, {
                              children: (0, n.jsx)(S.l, {
                                  selectionVariant: "single",
                                  role: "menu",
                                  "aria-labelledby": "dismissal-duration-label",
                                  children: s,
                              }),
                          })),
                          (o[6] = s),
                          (o[7] = i))
                        : (i = o[7]),
                    o[8] !== a || o[9] !== i
                        ? ((r = (0, n.jsxs)(L.B, {
                              align: "center",
                              direction: "horizontal",
                              className: p.durationSelector,
                              children: [
                                  l,
                                  (0, n.jsxs)(F.W, { children: [a, i] }),
                              ],
                          })),
                          (o[8] = a),
                          (o[9] = i),
                          (o[10] = r))
                        : (r = o[10]),
                    r
                );
            }
            try {
                _.displayName || (_.displayName = "DurationMenu");
            } catch {}
            function x(e) {
                let l,
                    a,
                    i,
                    t,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g = (0, k.c)(23),
                    { isOpen: p, onClose: y, onConfirm: C, ssoOrgs: F } = e,
                    [S, L] = s.useState(I);
                (g[0] !== p
                    ? ((l = () => {
                          p && L(I());
                      }),
                      (a = [p]),
                      (g[0] = p),
                      (g[1] = l),
                      (g[2] = a))
                    : ((l = g[1]), (a = g[2])),
                    s.useEffect(l, a),
                    g[3] !== C || g[4] !== S
                        ? ((i = () => {
                              let e = v[S];
                              C(e?.days ?? K);
                          }),
                          (g[3] = C),
                          (g[4] = S),
                          (g[5] = i))
                        : (i = g[5]));
                let x = i;
                return p
                    ? (g[6] !== y
                          ? ((t = {
                                buttonType: "default",
                                content: "Cancel",
                                onClick: y,
                            }),
                            (g[6] = y),
                            (g[7] = t))
                          : (t = g[7]),
                      g[8] !== x
                          ? ((r = {
                                buttonType: "primary",
                                content: "Confirm",
                                onClick: x,
                            }),
                            (g[8] = x),
                            (g[9] = r))
                          : (r = g[9]),
                      g[10] !== t || g[11] !== r
                          ? ((o = [t, r]),
                            (g[10] = t),
                            (g[11] = r),
                            (g[12] = o))
                          : (o = g[12]),
                      g[13] !== F
                          ? ((u = (0, n.jsx)(f, { ssoOrgs: F })),
                            (g[13] = F),
                            (g[14] = u))
                          : (u = g[14]),
                      g[15] !== S
                          ? ((d = (0, n.jsx)(_, {
                                selectedDurationIndex: S,
                                onDurationChange: L,
                            })),
                            (g[15] = S),
                            (g[16] = d))
                          : (d = g[16]),
                      g[17] === Symbol.for("react.memo_cache_sentinel")
                          ? ((c = (0, n.jsxs)("p", {
                                children: [
                                    "To sign into any of your SSO organizations, visit the",
                                    " ",
                                    (0, n.jsx)(h.A, {
                                        href: "/settings/organizations",
                                        inline: !0,
                                        children: "SSO settings page.",
                                    }),
                                ],
                            })),
                            (g[17] = c))
                          : (c = g[17]),
                      g[18] !== y || g[19] !== o || g[20] !== u || g[21] !== d
                          ? ((m = (0, n.jsxs)(b.l, {
                                title: "Dismiss SSO Banner",
                                width: "medium",
                                height: "auto",
                                onClose: y,
                                footerButtons: o,
                                children: [u, d, c],
                            })),
                            (g[18] = y),
                            (g[19] = o),
                            (g[20] = u),
                            (g[21] = d),
                            (g[22] = m))
                          : (m = g[22]),
                      m)
                    : null;
            }
            try {
                x.displayName || (x.displayName = "ConfirmationDialog");
            } catch {}
            var w = a(21373),
                N = a(77430),
                j = a(79988);
            function R(e, l) {
                let a = `/orgs/${encodeURIComponent(e)}/sso`,
                    n = l.pathname + l.search + l.hash;
                return `${a}?return_to=${encodeURIComponent(n)}`;
            }
            function P(e) {
                let l,
                    a,
                    s,
                    i,
                    t,
                    r = (0, k.c)(20),
                    { ssoOrgs: o, redirectLocation: u } = e,
                    { sendClickAnalyticsEvent: d } = (0, m.S)();
                if (0 === o.length) return null;
                r[0] !== d
                    ? ((l = () => {
                          d({
                              category: j.c$,
                              action: "click_single_sso_button",
                              label: "sso_authentication",
                          });
                      }),
                      (r[0] = d),
                      (r[1] = l))
                    : (l = r[1]);
                let c = l;
                r[2] !== d
                    ? ((a = (e) => {
                          d({
                              category: j.c$,
                              action: "click_sso_dropdown_item",
                              label: `org:${e}`,
                          });
                      }),
                      (r[2] = d),
                      (r[3] = a))
                    : (a = r[3]);
                let g = a;
                if (1 === o.length) {
                    let e,
                        l,
                        a = o[0];
                    return void 0 === a
                        ? null
                        : (r[4] !== a.login || r[5] !== u
                              ? ((e = R(a.login, u)),
                                (r[4] = a.login),
                                (r[5] = u),
                                (r[6] = e))
                              : (e = r[6]),
                          r[7] !== c || r[8] !== e
                              ? ((l = (0, n.jsx)(w.Q, {
                                    as: "a",
                                    href: e,
                                    onClick: c,
                                    children: "Single sign-on",
                                })),
                                (r[7] = c),
                                (r[8] = e),
                                (r[9] = l))
                              : (l = r[9]),
                          l);
                }
                if (
                    (r[10] === Symbol.for("react.memo_cache_sentinel")
                        ? ((s = (0, n.jsx)(F.W.Button, {
                              size: "small",
                              children: "Single sign-on",
                          })),
                          (r[10] = s))
                        : (s = r[10]),
                    r[11] !== g || r[12] !== u || r[13] !== o)
                ) {
                    let e;
                    (r[15] !== g || r[16] !== u
                        ? ((e = (e) =>
                              (0, n.jsxs)(
                                  S.l.LinkItem,
                                  {
                                      href: R(e.login, u),
                                      onClick: () => g(e.name),
                                      children: [
                                          e.avatar_url &&
                                              (0, n.jsx)(S.l.LeadingVisual, {
                                                  children: (0, n.jsx)(N.r, {
                                                      size: 24,
                                                      src: e.avatar_url,
                                                  }),
                                              }),
                                          e.name,
                                      ],
                                  },
                                  e.login
                              )),
                          (r[15] = g),
                          (r[16] = u),
                          (r[17] = e))
                        : (e = r[17]),
                        (i = o.map(e)),
                        (r[11] = g),
                        (r[12] = u),
                        (r[13] = o),
                        (r[14] = i));
                } else i = r[14];
                return (
                    r[18] !== i
                        ? ((t = (0, n.jsxs)(F.W, {
                              children: [
                                  s,
                                  (0, n.jsx)(F.W.Overlay, {
                                      children: (0, n.jsx)(S.l, {
                                          children: i,
                                      }),
                                  }),
                              ],
                          })),
                          (r[18] = i),
                          (r[19] = t))
                        : (t = r[19]),
                    t
                );
            }
            try {
                P.displayName || (P.displayName = "SSOActionMenu");
            } catch {}
            function T() {
                let e = (0, o.Ri)(j.z4);
                if (e?.value)
                    try {
                        let l = JSON.parse(e.value);
                        return Array.isArray(l) ? l : [];
                    } catch (e) {
                        (0, o.Yj)(j.z4);
                    }
                return [];
            }
            function A(e) {
                return (
                    "object" == typeof e &&
                    null !== e &&
                    "id" in e &&
                    "name" in e &&
                    "login" in e
                );
            }
            function M({ ssoOrgs: e }) {
                let l = (0, r.zy)(),
                    [a, d] = s.useState("visible"),
                    [g, k] = s.useState(!1),
                    h = s.useRef(!1),
                    { sendClickAnalyticsEvent: b } = (0, m.S)(),
                    f = (0, u.G7)("global_sso_banner_dismiss_dialog");
                if (
                    (s.useEffect(() => {
                        !h.current &&
                            e.length > 0 &&
                            ((0, u.G7)("record_sso_banner_metrics") &&
                                (0, c.i)({
                                    incrementKey: "GLOBAL_SSO_BANNER_DISPLAYED",
                                    requestUrl: window.location.href,
                                }),
                            (h.current = !0));
                    }, [e]),
                    0 === e.length)
                )
                    return null;
                let C = (l = K) => {
                    d("hidden");
                    let a = e.map((e) => e.id);
                    ((0, u.G7)("global_sso_banner_dismiss_dialog") &&
                        (a = [...new Set([...T(), ...a])].sort()),
                        (0, o.Yj)(j.z4));
                    let n = l ?? K,
                        s = new Date(Date.now() + 24 * n * 36e5).toUTCString();
                    (0, o.TV)(j.z4, JSON.stringify(a), s);
                };
                return (0, n.jsxs)(n.Fragment, {
                    children: [
                        (0, n.jsx)(y, {
                            hidden: "visible" !== a,
                            children: (0, n.jsx)(i.l, {
                                title: "Single-sign on",
                                className: p.banner,
                                hideTitle: !0,
                                icon: (0, n.jsx)(t.ShieldLockIcon, {}),
                                description: (() => {
                                    if (0 === e.length)
                                        return "Single sign-on to see results";
                                    let l = e.slice(0, j.n5),
                                        a = e.length - j.n5,
                                        s =
                                            1 === e.length
                                                ? "organization"
                                                : "organizations";
                                    return (0, n.jsxs)(n.Fragment, {
                                        children: [
                                            "Single sign-on to see results in the ",
                                            (() => {
                                                let e = l.map((e) =>
                                                    (0, n.jsx)(
                                                        "strong",
                                                        { children: e.name },
                                                        e.login
                                                    )
                                                );
                                                if (1 === e.length) return e[0];
                                                {
                                                    if (2 === e.length)
                                                        return (0, n.jsxs)(
                                                            n.Fragment,
                                                            {
                                                                children: [
                                                                    e[0],
                                                                    " and ",
                                                                    e[1],
                                                                ],
                                                            }
                                                        );
                                                    let l = e.length - 1,
                                                        s = (0, n.jsxs)(
                                                            n.Fragment,
                                                            {
                                                                children: [
                                                                    e[0],
                                                                    ", ",
                                                                    e[1],
                                                                    ", and ",
                                                                    e[l],
                                                                ],
                                                            }
                                                        );
                                                    return a > 0
                                                        ? (0, n.jsxs)(
                                                              n.Fragment,
                                                              {
                                                                  children: [
                                                                      s,
                                                                      ", and ",
                                                                      a,
                                                                      " more",
                                                                  ],
                                                              }
                                                          )
                                                        : s;
                                                }
                                            })(),
                                            " ",
                                            s,
                                        ],
                                    });
                                })(),
                                onDismiss: () => {
                                    (b({
                                        category: j.c$,
                                        action: "click_dismiss_button",
                                        label: "banner_dismissed",
                                    }),
                                        f ? k(!0) : C());
                                },
                                primaryAction: (0, n.jsx)(P, {
                                    ssoOrgs: e,
                                    redirectLocation: l,
                                }),
                                "data-testid": "global-sso-banner",
                            }),
                        }),
                        (0, n.jsx)(x, {
                            isOpen: f && g,
                            onClose: () => k(!1),
                            onConfirm: (e) => {
                                (C(e), k(!1));
                            },
                            ssoOrgs: e,
                        }),
                    ],
                });
            }
            function V() {
                let { ssoOrgs: e, suppressBanner: l } = (function () {
                    let { ssoOrgs: e, baseAvatarUrl: l } = (0, d.N)(),
                        { current_sso_orgs_match_dismissed_cookie: a } =
                            (0, g.X)() ?? {},
                        n = s.useMemo(
                            () =>
                                e
                                    .filter(A)
                                    .map((e) => ({
                                        ...e,
                                        avatar_url: `${l}/u/${e.id}`,
                                    })),
                            [e, l]
                        );
                    return {
                        suppressBanner:
                            !0 === a ||
                            (function (e) {
                                let l = T();
                                return (
                                    e.length === l.length &&
                                    e.every((e) => l.includes(e.id))
                                );
                            })(n),
                        ssoOrgs: n,
                        baseAvatarUrl: l,
                    };
                })();
                return 0 === e.length || !(0, u.G7)("global_sso_banner") || l
                    ? null
                    : (0, n.jsx)(M, { ssoOrgs: e });
            }
            let D = j.z4;
            try {
                M.displayName || (M.displayName = "GlobalSsoBanner");
            } catch {}
            try {
                V.displayName || (V.displayName = "ContextualGlobalSsoBanner");
            } catch {}
        },
        25111: (e, l, a) => {
            a.d(l, { X: () => k });
            var n,
                s = a(74848),
                i = a(50467);
            let t = new Map(),
                r = class Resource {
                    load() {
                        return (
                            null == this._promise &&
                                ((this._promise = this._loader()),
                                (async () => {
                                    try {
                                        this._result = await this._promise;
                                    } catch (e) {
                                        throw ((this._error = e), e);
                                    }
                                })()),
                            this._promise
                        );
                    }
                    getModuleId() {
                        return this._moduleId;
                    }
                    get() {
                        return this._result;
                    }
                    getModuleIfRequired() {
                        return this.get();
                    }
                    read() {
                        if (null != this._result) return this._result;
                        if (null != this._error) throw this._error;
                        throw this._promise;
                    }
                    constructor(e, l, a = null) {
                        ((0, i._)(this, "_moduleId", void 0),
                            (0, i._)(this, "_loader", void 0),
                            (0, i._)(this, "_error", void 0),
                            (0, i._)(this, "_promise", void 0),
                            (0, i._)(this, "_result", void 0),
                            (this._moduleId = e),
                            (this._loader = l),
                            (this._error = null),
                            (this._promise = null),
                            (this._result = a));
                    }
                };
            function o(e, l, a = null) {
                let n = t.get(e);
                return (null == n && ((n = new r(e, l, a)), t.set(e, n)), n);
            }
            try {
                o.displayName || (o.displayName = "JSResource");
            } catch {}
            var u = a(27744),
                d = a(80443),
                c = a(30721),
                m = a(96540),
                g = a(69487),
                p = a(18312);
            let y = (e) => e;
            function k(
                {
                    path: e,
                    resourceName: l,
                    componentLoader: a,
                    Component: n,
                    queryConfigs: i,
                    transformVariables: t = y,
                    title: r,
                    relayEnvironment: h,
                    fallback: b,
                    maxAge: f,
                    errorCallbacks: C,
                    transitionType: F = u.E.FETCH_THEN_TRANSITION,
                },
                S = {}
            ) {
                let L = l || n?.displayName;
                if (void 0 === L) throw Error("invalid internal resourceName");
                let K = {
                    root: o(L, a, n),
                    getPreloadProps: (e) => ({
                        queries: (function (e, l, a, n) {
                            let s = {};
                            for (let [
                                i,
                                { concreteRequest: t, variableMappers: r },
                            ] of Object.entries(e)) {
                                let e = (function (e, l, a, n) {
                                    let s = l(e?.(a, n) ?? {}, a, n);
                                    for (let e in s)
                                        if (void 0 === s[e]) return;
                                    return s;
                                })(r, a, l, n);
                                e &&
                                    (s[i] = {
                                        variables: Object.fromEntries(
                                            Object.entries(e).sort(
                                                ([e], [l]) =>
                                                    e < l ? -1 : +(e > l)
                                            )
                                        ),
                                        parameters: {
                                            ...t,
                                            params: {
                                                ...t.params,
                                                metadata: {
                                                    ...t.params.metadata,
                                                    isRelayRouteRequest: !0,
                                                },
                                            },
                                        },
                                    });
                            }
                            return s;
                        })(i, e, t, h),
                    }),
                };
                function v({
                    pathParams: e,
                    searchParams: l,
                    embeddedData: a,
                }) {
                    let n = new Map();
                    if (a?.payload?.preloadedQueries)
                        for (let {
                            queryId: e,
                            variables: l,
                            result: s,
                            timestamp: i,
                        } of a.payload.preloadedQueries) {
                            let a = n.get(e);
                            a || (a = new Map());
                            let t = JSON.stringify(l);
                            ((s.timestamp = i), a.set(t, s), n.set(e, a));
                        }
                    let s = new Map();
                    if (a?.payload?.preloadedSubscriptions)
                        for (let [e, l] of Object.entries(
                            a.payload.preloadedSubscriptions
                        )) {
                            let a = new Map();
                            for (let [e, n] of Object.entries(l)) a.set(e, n);
                            s.set(e, a);
                        }
                    a?.payload?.preloaded_records &&
                        h
                            .getStore()
                            .publish(
                                new g.RecordSource(
                                    a?.payload?.preloaded_records
                                )
                            );
                    let { baseUrl: i, getPreloadedSubscriptions: t } =
                            h.options,
                        o = t ? t() : void 0,
                        u = new c.VB(
                            n,
                            a?.enabled_features,
                            (function (e, l) {
                                if (!l || 0 === l.size) return e;
                                let a = new Map(e);
                                for (let [e, n] of l) a.has(e) || a.set(e, n);
                                return a;
                            })(s, o),
                            i,
                            f,
                            C
                        );
                    (h.__setNet(u),
                        (h.options = {
                            baseUrl: i,
                            getPreloadedSubscriptions: () =>
                                u.getPreloadedSubscriptions(),
                        }));
                    let d = (0, p.loadEntryPoint)(
                        { getEnvironment: () => h },
                        K,
                        { pathParams: e, searchParams: l }
                    );
                    return {
                        type: "loaded",
                        data: { entryPointReference: d },
                        title: r,
                        isValid: () =>
                            !Object.values(d.queries).some((e) => e.isDisposed),
                    };
                }
                return {
                    path: e,
                    Component: () => {
                        let e = (0, d.N)(),
                            l = e?.data?.entryPointReference;
                        return l
                            ? (0, s.jsx)(p.RelayEnvironmentProvider, {
                                  environment: h,
                                  children: (0, s.jsx)(m.Suspense, {
                                      fallback: b,
                                      children: (0, s.jsx)(
                                          p.EntryPointContainer,
                                          { entryPointReference: l, props: S }
                                      ),
                                  }),
                              })
                            : null;
                    },
                    coreLoader: async function e_({
                        pathParams: e,
                        location: l,
                    }) {
                        let a = v({
                            pathParams: e,
                            searchParams: new URLSearchParams(l.search),
                        });
                        return (
                            F === u.E.FETCH_THEN_TRANSITION &&
                                (await Promise.allSettled(
                                    Object.values(
                                        a.data.entryPointReference.queries
                                    ).map((e) => e.source?.toPromise())
                                )),
                            a
                        );
                    },
                    loadFromEmbeddedData: function ({
                        pathParams: e,
                        embeddedData: l,
                        location: a,
                    }) {
                        let { data: n, isValid: s } = v({
                            pathParams: e,
                            embeddedData: l,
                            searchParams: new URLSearchParams(a.search),
                        });
                        return { data: n, title: r, isValid: s };
                    },
                    transitionType: F,
                };
            }
            try {
                (n = Wrapper).displayName || (n.displayName = "Wrapper");
            } catch {}
        },
        30158: (e, l, a) => {
            a.d(l, {
                A: () => AssigneeFilterProviderWithCopilotSupport,
                OD: () => AuthorFilterProviderWithCopilotSupport,
                Te: () => ReviewRequestedFilterProviderWithCopilotSupport,
                Tq: () => InvolvesFilterProviderWithCopilotSupport,
                Tr: () => ReviewedByFilterProviderWithCopilotSupport,
            });
            var n = a(50467),
                s = a(92415),
                i = a(48738),
                t = a(38621);
            let r = class CopilotUserFilterProvider extends i.Qh {
                async getSuggestions(e, l, a, n) {
                    return (
                        this.copilotQueryParamKey &&
                            e.addQueryParam(this.copilotQueryParamKey, "1"),
                        super.getSuggestions(e, l, a, n)
                    );
                }
                validateFilterValue(e, l, a) {
                    let n = new URLSearchParams(l);
                    return (
                        this.copilotQueryParamKey &&
                            n.append(this.copilotQueryParamKey, "1"),
                        super.validateFilterValue(e, n, a)
                    );
                }
                processSuggestion(e, l) {
                    let { login: a, avatarUrl: n, isCopilot: r } = e;
                    if (r)
                        return {
                            type: s.ak.Value,
                            value: i.RY,
                            ariaLabel: `${i.RY}, Your AI pair programmer`,
                            displayName: a,
                            description: "Your AI pair programmer",
                            inlineDescription: !0,
                            priority: 1,
                            icon: t.CopilotIcon,
                            avatarUrl: n ? { url: n, type: s.uW.User } : void 0,
                            iconColor:
                                "var(--fgColor-done, var(--color-done-fg))",
                        };
                    return super.processSuggestion(e, l);
                }
                constructor(e, l, a) {
                    (super(e, l, a),
                        (0, n._)(this, "copilotQueryParamKey", void 0));
                }
            };
            let AssigneeFilterProviderWithCopilotSupport = class AssigneeFilterProviderWithCopilotSupport extends r {
                constructor(e, l) {
                    (super(s.yV.assignee, e, l),
                        (this.copilotQueryParamKey = e?.showAtCopilot
                            ? "show_assignee_copilot"
                            : void 0));
                }
            };
            let AuthorFilterProviderWithCopilotSupport = class AuthorFilterProviderWithCopilotSupport extends r {
                constructor(e, l) {
                    (super(s.yV.author, e, l),
                        (this.copilotQueryParamKey = e?.showAtCopilot
                            ? "show_author_copilot"
                            : void 0));
                }
            };
            let ReviewedByFilterProviderWithCopilotSupport = class ReviewedByFilterProviderWithCopilotSupport extends r {
                constructor(e, l) {
                    (super(s.yV.reviewedBy, e, l),
                        (this.copilotQueryParamKey = e?.showAtCopilot
                            ? "show_pull_request_reviewer_copilot"
                            : void 0));
                }
            };
            let ReviewRequestedFilterProviderWithCopilotSupport = class ReviewRequestedFilterProviderWithCopilotSupport extends r {
                constructor(e, l) {
                    (super(s.yV.reviewRequested, e, l),
                        (this.copilotQueryParamKey = e?.showAtCopilot
                            ? "show_pull_request_reviewer_copilot"
                            : void 0));
                }
            };
            let InvolvesFilterProviderWithCopilotSupport = class InvolvesFilterProviderWithCopilotSupport extends r {
                constructor(e, l) {
                    (super(s.yV.involves, e, l),
                        (this.copilotQueryParamKey = e?.showAtCopilot
                            ? "show_involves_copilot"
                            : void 0));
                }
            };
        },
        31315: (e, l, a) => {
            function n(e) {
                return s(e)[0];
            }
            function s(e) {
                let l = [];
                for (let a of (function () {
                    try {
                        return document.cookie.split(";");
                    } catch {
                        return [];
                    }
                })()) {
                    let [n, s] = a.trim().split("=");
                    e === n && void 0 !== s && l.push({ key: n, value: s });
                }
                return l;
            }
            function i(e, l, a = null, n = !1, s = "lax") {
                let t = document.domain;
                if (null == t) throw Error("Unable to get document domain");
                t.endsWith(".github.com") && (t = "github.com");
                let r = "https:" === location.protocol ? "; secure" : "",
                    o = a ? `; expires=${a}` : "";
                !1 === n && (t = `.${t}`);
                try {
                    document.cookie = `${e}=${l}; path=/; domain=${t}${o}${r}; samesite=${s}`;
                } catch {}
            }
            function t(e, l = !1) {
                let a = document.domain;
                if (null == a) throw Error("Unable to get document domain");
                a.endsWith(".github.com") && (a = "github.com");
                let n = new Date(Date.now() - 1).toUTCString(),
                    s = "https:" === location.protocol ? "; secure" : "",
                    i = `; expires=${n}`;
                !1 === l && (a = `.${a}`);
                try {
                    document.cookie = `${e}=''; path=/; domain=${a}${i}${s}`;
                } catch {}
            }
            a.d(l, { OR: () => s, Ri: () => n, TV: () => i, Yj: () => t });
        },
        33544: (e, l, a) => {
            a.d(l, { x: () => y });
            var n = a(74848),
                s = a(38621),
                i = a(57352),
                t = a(27042),
                r = a(5524),
                o = a(87448),
                u = a(88934),
                d = a(96540),
                c = a(11083),
                m = a(62227),
                g = a(34164),
                p = a(69599);
            function y({
                className: e,
                portalContainerName: l,
                protectedOrgs: a,
                maxVisibleOrgNames: t = 3,
                redirectURI: r,
                useFullWidthStyle: y,
                forceWrap: b,
                sx: f,
            }) {
                let C = (0, u.zy)(),
                    F = (0, d.useRef)(!1);
                if (
                    ((0, d.useEffect)(() => {
                        (0, p.G7)("record_sso_banner_metrics") &&
                            !F.current &&
                            a &&
                            a.length > 0 &&
                            ((0, c.i)({
                                incrementKey: (0, p.G7)("global_sso_banner")
                                    ? "LEGACY_SSO_BANNER_DISPLAYED_WITH_GLOBAL_BANNER_ENABLED"
                                    : "LEGACY_SSO_BANNER_DISPLAYED",
                                requestUrl: window.location.href,
                            }),
                            (F.current = !0));
                    }, [a]),
                    !a || 0 === a.length)
                )
                    return null;
                let S = Math.max(0, a.length - t),
                    L =
                        1 === a.length || S > 0
                            ? (0, n.jsx)("b", {
                                  children: a.slice(0, t).join(", "),
                              })
                            : (0, n.jsxs)("span", {
                                  children: [
                                      (0, n.jsx)("b", {
                                          children: a
                                              .slice(0, a.length - 1)
                                              .join(", "),
                                      }),
                                      a.length > 2 && ",",
                                      " and ",
                                      (0, n.jsx)("b", {
                                          children: a[a.length - 1],
                                      }),
                                  ],
                              });
                return (0, n.jsx)(o.az, {
                    sx: f,
                    className: e,
                    "data-testid": "sso-banner",
                    children: (0, n.jsx)("div", {
                        className: m.A.Box,
                        children: (0, n.jsx)("section", {
                            "aria-label": "Single sign-on information",
                            children: (0, n.jsx)(o.Hx, {
                                sx: {
                                    borderRadius: 2 * !y,
                                    borderWidth: y ? "1px 0" : 1,
                                },
                                className: m.A.Flash,
                                children:
                                    1 === a.length
                                        ? (0, n.jsxs)("div", {
                                              children: [
                                                  (0, n.jsx)(s.ShieldLockIcon, {
                                                      className:
                                                          m.A.ShieldLockIcon,
                                                  }),
                                                  (0, n.jsx)(i.A, {
                                                      inline: !0,
                                                      href: `/orgs/${a[0]}/sso?return_to=${h({ location: C, redirectURI: r })}`,
                                                      children:
                                                          "Single sign-on",
                                                  }),
                                                  " ",
                                                  "to see results in the ",
                                                  (0, n.jsx)("b", {
                                                      children: a[0],
                                                  }),
                                                  " organization.",
                                              ],
                                          })
                                        : (0, n.jsxs)("div", {
                                              className: m.A.Box_1,
                                              children: [
                                                  (0, n.jsx)(s.ShieldLockIcon, {
                                                      className: m.A.Octicon,
                                                  }),
                                                  (0, n.jsxs)("div", {
                                                      className: (0, g.$)(
                                                          m.A.Box_2,
                                                          b && m.A.ForceWrap
                                                      ),
                                                      children: [
                                                          (0, n.jsxs)("p", {
                                                              className:
                                                                  m.A
                                                                      .ProtectedOrgs_FullList,
                                                              children: [
                                                                  "Single sign-on to see results in ",
                                                                  0 === S &&
                                                                      "the ",
                                                                  t > 0 &&
                                                                      (0,
                                                                      n.jsxs)(
                                                                          n.Fragment,
                                                                          {
                                                                              children:
                                                                                  [
                                                                                      L,
                                                                                      " ",
                                                                                  ],
                                                                          }
                                                                      ),
                                                                  S > 0 &&
                                                                      (0,
                                                                      n.jsxs)(
                                                                          n.Fragment,
                                                                          {
                                                                              children:
                                                                                  [
                                                                                      t >
                                                                                          0 &&
                                                                                          "and ",
                                                                                      S,
                                                                                      " other",
                                                                                      " ",
                                                                                  ],
                                                                          }
                                                                      ),
                                                                  a.length >
                                                                      1 &&
                                                                  1 !== S
                                                                      ? "organizations"
                                                                      : "organization",
                                                                  ".",
                                                              ],
                                                          }),
                                                          (0, n.jsx)("p", {
                                                              className:
                                                                  m.A
                                                                      .ProtectedOrgs_Shortened,
                                                              children:
                                                                  "Single sign-on to see results in your organizations",
                                                          }),
                                                          (0, n.jsx)("div", {
                                                              style: {
                                                                  flexShrink: 0,
                                                              },
                                                              children: (0,
                                                              n.jsx)(k, {
                                                                  portalContainerName:
                                                                      l,
                                                                  protectedOrgs:
                                                                      a,
                                                                  redirectURI:
                                                                      r,
                                                              }),
                                                          }),
                                                      ],
                                                  }),
                                              ],
                                          }),
                            }),
                        }),
                    }),
                });
            }
            function k({
                portalContainerName: e,
                protectedOrgs: l,
                redirectURI: a,
            }) {
                let s = (0, u.zy)();
                return (0, n.jsxs)(t.W, {
                    children: [
                        (0, n.jsx)(t.W.Button, {
                            size: "small",
                            children: "Select an organization",
                        }),
                        (0, n.jsx)(t.W.Overlay, {
                            portalContainerName: e,
                            children: (0, n.jsx)(r.l, {
                                children: l.map((e) =>
                                    (0, n.jsx)(
                                        r.l.Item,
                                        {
                                            onSelect: () => {
                                                window.location.href = `/orgs/${encodeURIComponent(e)}/sso?return_to=${h({ location: s, redirectURI: a })}`;
                                            },
                                            children: e,
                                        },
                                        `org-${e}`
                                    )
                                ),
                            }),
                        }),
                    ],
                });
            }
            function h({ location: e, redirectURI: l }) {
                return encodeURIComponent(
                    l ? l(e) : e.pathname + e.search + e.hash
                );
            }
            try {
                y.displayName || (y.displayName = "SingleSignOnBanner");
            } catch {}
            try {
                k.displayName || (k.displayName = "SingleSignOnButton");
            } catch {}
        },
        39111: (e, l, a) => {
            a.d(l, { X: () => s });
            var n = a(54571);
            function s(e) {
                let l = e.join(","),
                    [a] = (0, n.I)(
                        () => {
                            let e = /Windows/.test(navigator.userAgent)
                                ? "windows"
                                : /Macintosh/.test(navigator.userAgent)
                                  ? "mac"
                                  : null;
                            return !!e && l.includes(e);
                        },
                        !1,
                        [l]
                    );
                return a;
            }
        },
        42299: (e, l, a) => {
            a.d(l, { r: () => o });
            var n = a(74848),
                s = a(29731),
                i = a(26607),
                t = a(34164);
            let r = {
                    container: "TrailingBadge-module__container--_Ekj8",
                    label: "TrailingBadge-module__label--WmleN",
                    title: "TrailingBadge-module__title--qj5_O",
                },
                o = ({
                    title: e,
                    containerStyle: l,
                    containerClassName: a,
                    children: o,
                    ...u
                }) =>
                    (0, n.jsx)("div", {
                        ...(0, s.G)("list-view-item-trailing-badge"),
                        className: (0, t.$)(r.container, a),
                        style: l,
                        "data-listview-component": "trailing-badge",
                        children:
                            o ||
                            (0, n.jsx)(i.A, {
                                className: r.label,
                                ...u,
                                children: (0, n.jsx)("span", {
                                    className: r.title,
                                    children: e,
                                }),
                            }),
                    });
            try {
                o.displayName || (o.displayName = "ListItemTrailingBadge");
            } catch {}
        },
        48779: (e, l, a) => {
            a.d(l, { Jd: () => t, MG: () => i, zG: () => r });
            let n = 0,
                s = new Set();
            function i(e) {
                (e(n), s.add(e));
            }
            function t() {
                return n;
            }
            function r(e) {
                for (let l of ((n = e),
                e
                    ? document.body.style.setProperty(
                          "--base-sticky-header-height",
                          `${e}px`
                      )
                    : document.body.style.removeProperty(
                          "--base-sticky-header-height"
                      ),
                s))
                    l(e);
            }
        },
        51587: (e, l, a) => {
            a.d(l, { N: () => i });
            var n = a(79634),
                s = a(96540);
            let i = () => {
                let e = (0, n.X)();
                return (0, s.useMemo)(
                    () => ({
                        ssoOrgs: e?.sso_organizations ?? [],
                        baseAvatarUrl:
                            e?.base_avatar_url ??
                            "https://avatars.githubusercontent.com",
                    }),
                    [e?.sso_organizations, e?.base_avatar_url]
                );
            };
        },
        54589: (e, l, a) => {
            a.d(l, { X: () => r });
            var n = a(74848),
                s = a(26607),
                i = a(10242),
                t = a(84174);
            let r = ({
                children: e = "Preview",
                feedbackUrl: l,
                className: a,
            }) =>
                (0, n.jsx)(t.V, {
                    className: a,
                    label: (0, n.jsx)(s.A, { variant: "success", children: e }),
                    link: l ? (0, n.jsx)(i.A, { feedbackUrl: l }) : void 0,
                });
            try {
                r.displayName || (r.displayName = "BetaLabel");
            } catch {}
        },
        62227: (e, l, a) => {
            a.d(l, { A: () => n });
            let n = {
                Box: "SingleSignOnBanner-module__Box--jDDJV",
                Flash: "SingleSignOnBanner-module__Flash--OYpTa",
                Box_1: "SingleSignOnBanner-module__Box_1--f7GQK",
                Octicon: "SingleSignOnBanner-module__Octicon--Mg3jx",
                Box_2: "SingleSignOnBanner-module__Box_2--Se3Ze",
                ForceWrap: "SingleSignOnBanner-module__ForceWrap--Vz1Sn",
                Paragraph: "SingleSignOnBanner-module__Paragraph--jaDvQ",
                ProtectedOrgs_FullList:
                    "SingleSignOnBanner-module__ProtectedOrgs_FullList--siZfg",
                ProtectedOrgs_Shortened:
                    "SingleSignOnBanner-module__ProtectedOrgs_Shortened--G8LoG",
                ShieldLockIcon:
                    "SingleSignOnBanner-module__ShieldLockIcon--k2b_L",
            };
        },
        63350: (e, l, a) => {
            a.d(l, { X: () => I });
            var n,
                s = a(74848),
                i = a(4559),
                t = a(29731),
                r = a(34164),
                o = a(96540);
            let u = {
                normal: "density-gap-module__normal--HBwlC",
                none: "density-gap-module__none--DjJ9h",
                condensed: "density-gap-module__condensed--Dc3l4",
                spacious: "density-gap-module__spacious--lp7L7",
            };
            var d = a(56825),
                c = a(91230);
            let m = { container: "ActionBar-module__container--fcK9p" },
                g = ({
                    actions: e,
                    style: l,
                    className: a,
                    children: n,
                    density: i,
                    actionsLabel: o,
                    densityToggle: d,
                    overflowMenuProps: g,
                    overflowMenuToggleProps: p,
                }) => {
                    let y = (0, s.jsxs)(s.Fragment, { children: [n, d] });
                    return e && e.length > 0
                        ? (0, s.jsx)(c.E7, {
                              label: o?.trim(),
                              actions: e,
                              density: i,
                              overflowMenuProps: g,
                              overflowMenuToggleProps: p,
                              ...(0, t.G)("list-view-actions"),
                              style: l,
                              className: a,
                              children: y,
                          })
                        : (0, s.jsx)("div", {
                              ...(0, t.G)("list-view-actions"),
                              style: l,
                              className: (0, r.$)(m.container, i && u[i], a),
                              children: y,
                          });
                };
            try {
                g.displayName || (g.displayName = "ListViewActionBar");
            } catch {}
            var p = a(75986);
            let y = {
                    container: "Metadata-module__container--ydeM8",
                    heading: "Metadata-module__heading--vvkcl",
                },
                k = { container: "SectionFilters-module__container--gpzjI" },
                h = ({ links: e }) =>
                    e.length < 1
                        ? null
                        : (0, s.jsx)("div", {
                              ...(0, t.G)("list-view-section-filters"),
                              children: (0, s.jsx)("ul", {
                                  className: (0, r.$)(
                                      "list-style-none",
                                      k.container
                                  ),
                                  children: e.map((e, l) =>
                                      (0, s.jsx)(
                                          "li",
                                          {
                                              ...(0, t.G)(
                                                  `list-view-section-filter-${l}`
                                              ),
                                              children: e,
                                          },
                                          `section-filter-${l}`
                                      )
                                  ),
                              }),
                          });
            try {
                h.displayName || (h.displayName = "ListViewSectionFilters");
            } catch {}
            var b = a(86877),
                f = a(46720),
                C = a(53687);
            let F = {
                container: "SelectAllCheckbox-module__container--MgNnp",
                formControlContainer:
                    "SelectAllCheckbox-module__formControlContainer--dgXVq",
                count: "SelectAllCheckbox-module__count--OFClN",
            };
            var S = a(24347),
                L = a(61015);
            let K = ({ onToggle: e, style: l, className: a }) => {
                let { title: n } = (0, L.t)(),
                    {
                        isSelectable: u,
                        selectedCount: d,
                        totalCount: c,
                        countOnPage: m,
                        isSelectAllChecked: g,
                        anyItemsSelected: p,
                        singularUnits: y,
                        pluralUnits: k,
                    } = (0, S.v)(),
                    { multiPageSelectionAllowed: h } = (0, C.P)(),
                    K = (0, o.useId)(),
                    v = (0, o.useRef)(null),
                    I = (0, o.useRef)(null),
                    _ = (0, o.useMemo)(
                        () =>
                            h && "number" == typeof c
                                ? d < Math.max(c, m)
                                : d < m,
                        [m, h, d, c]
                    ),
                    x = p && _,
                    w = 1 === d ? y : k,
                    N = "number" == typeof c ? `of ${c} selected` : "selected",
                    j = `${d} ${w} ${N}`,
                    R = (0, o.useCallback)(() => {
                        e && (x ? e(!1) : e(!g));
                    }, [x, g, e]);
                if (
                    ((0, o.useEffect)(() => {
                        I.current && (0, i.C)(I.current);
                    }, [I, j]),
                    !u)
                )
                    return null;
                let P = `${K}-list-view-select-all`;
                return (0, s.jsxs)("div", {
                    style: l,
                    className: (0, r.$)(F.container, a),
                    ...(0, t.G)("list-view-select-all-container"),
                    id: `${K}-list-view-select-all-container`,
                    children: [
                        (0, s.jsx)("div", {
                            className: F.formControlContainer,
                            children: (0, s.jsxs)(b.A, {
                                id: P,
                                children: [
                                    (0, s.jsx)(f.A, {
                                        onChange: R,
                                        value: "default",
                                        checked: g,
                                        indeterminate: x,
                                        onKeyDown: (e) => {
                                            ("Enter" === e.key ||
                                                " " === e.key) &&
                                                (e.preventDefault(), R());
                                        },
                                        tabIndex: 0,
                                        ref: v,
                                        ...(0, t.G)("select-all-checkbox"),
                                    }),
                                    (0, s.jsxs)(b.A.Label, {
                                        visuallyHidden: !0,
                                        ...(0, t.G)("select-all-label"),
                                        children: ["Select all ", k, ": ", n],
                                    }),
                                ],
                            }),
                        }),
                        (0, s.jsxs)("p", {
                            className: (0, r.$)(
                                F.count,
                                p ? void 0 : "sr-only"
                            ),
                            ...(0, t.G)("select-all-selected-count"),
                            children: [
                                (0, s.jsxs)("span", {
                                    "aria-hidden": "true",
                                    className: p ? void 0 : "sr-only",
                                    ...(0, t.G)(
                                        "select-all-selected-count-without-units"
                                    ),
                                    children: [d, " ", N, " "],
                                }),
                                (0, s.jsx)("span", {
                                    className: "sr-only",
                                    ref: I,
                                    ...(0, t.G)("sr-content"),
                                    children: j,
                                }),
                            ],
                        }),
                    ],
                });
            };
            try {
                K.displayName || (K.displayName = "ListViewSelectAllCheckbox");
            } catch {}
            let v = ({ sectionFilters: e }) =>
                    e
                        ? Array.isArray(e)
                            ? (0, s.jsx)(h, { links: e })
                            : (0, o.isValidElement)(e)
                              ? (0, s.jsx)(s.Fragment, { children: e })
                              : null
                        : null,
                I = ({
                    title: e,
                    assistiveAnnouncement: l,
                    sectionFilters: a,
                    children: n,
                    style: c,
                    className: m,
                    actionsStyle: k,
                    actionsClassName: h,
                    onToggleSelectAll: b,
                    overflowMenuProps: f,
                    overflowMenuToggleProps: C,
                    ...F
                }) => {
                    let { idPrefix: I } = (0, p.If)(),
                        { anyItemsSelected: x } = (0, S.v)(),
                        { setHasMetadataTitle: w } = (0, L.t)(),
                        N = (0, d.m)("list-view-metadata"),
                        j = (0, o.useRef)(null);
                    return (
                        (0, o.useEffect)(() => {
                            w(!!e);
                        }),
                        (0, o.useEffect)(() => {
                            j.current && (0, i.C)(j.current);
                        }, [l]),
                        (0, s.jsxs)("div", {
                            id: `${I}-list-view-metadata`,
                            className: (0, r.$)(
                                y.container,
                                m,
                                x && u.spacious
                            ),
                            style: c,
                            ...(0, t.G)("list-view-metadata"),
                            children: [
                                (0, s.jsx)(K, {
                                    onToggle: (e) => {
                                        b && b(e);
                                    },
                                }),
                                (0, s.jsx)(v, { sectionFilters: a }),
                                !!e &&
                                    (0, s.jsx)(N, {
                                        className: (0, r.$)(
                                            y.heading,
                                            x && "sr-only"
                                        ),
                                        ...(0, t.G)("list-view-header-title"),
                                        children: e,
                                    }),
                                (0, s.jsx)(g, {
                                    style: k,
                                    className: h,
                                    overflowMenuProps: f,
                                    overflowMenuToggleProps: C,
                                    ...F,
                                    children: n,
                                }),
                                l &&
                                    (0, s.jsx)(_, {
                                        idPrefix: I,
                                        announceRef: j,
                                        assistiveAnnouncement: l,
                                    }),
                            ],
                        })
                    );
                },
                _ = ({
                    idPrefix: e,
                    announceRef: l,
                    assistiveAnnouncement: a,
                }) =>
                    (0, s.jsx)("div", {
                        id: `${e}-list-view-announcements`,
                        role: "status",
                        "aria-live": "polite",
                        "aria-atomic": "true",
                        className: "sr-only",
                        ref: l,
                        ...(0, t.G)("list-view-announcement-container"),
                        children: a,
                    });
            try {
                v.displayName || (v.displayName = "ListFilters");
            } catch {}
            try {
                I.displayName || (I.displayName = "ListViewMetadata");
            } catch {}
            try {
                (n = TitleTag).displayName || (n.displayName = "TitleTag");
            } catch {}
            try {
                _.displayName || (_.displayName = "ListViewAnnouncements");
            } catch {}
        },
        79988: (e, l, a) => {
            a.d(l, { c$: () => n, n5: () => s, z4: () => i });
            let n = "global_sso_banner",
                s = 3,
                i = "dismissed_sso_orgs";
        },
        81366: (e, l, a) => {
            a.d(l, { z: () => d });
            var n = a(74848),
                s = a(29731),
                i = a(34164),
                t = a(96540),
                r = a(35220),
                o = a(77177);
            let u = {
                default: "DescriptionItem-module__default--rAYpS",
                compact: "DescriptionItem-module__compact--AMnnu",
            };
            function d({ children: e, className: l, ...a }) {
                let { variant: d } = (0, r.e)(),
                    { setDescription: c } = (0, o.L)(),
                    m = (0, t.useRef)(null);
                return (
                    (0, t.useEffect)(() => {
                        if (m.current) {
                            let e = Array.from(
                                m.current?.querySelectorAll("[aria-label]")
                            ).reduce(
                                (e, l) =>
                                    e + l.getAttribute("aria-label")?.trim(),
                                ""
                            );
                            (!e &&
                                m.current.textContent &&
                                (e = m.current.textContent.trim()),
                                c(e));
                        }
                    }, [c]),
                    (0, n.jsx)("div", {
                        ref: m,
                        ...(0, s.G)("list-view-item-descriptionitem"),
                        ...a,
                        className: (0, i.$)(
                            u.default,
                            "compact" === d && u.compact,
                            l
                        ),
                        children: e,
                    })
                );
            }
            try {
                d.displayName || (d.displayName = "ListItemDescriptionItem");
            } catch {}
        },
        87890: (e, l, a) => {
            var n,
                s,
                i,
                t,
                r,
                o = a(6403),
                u = a(81469),
                d = a(43491);
            let c = (function () {
                var e = {
                        defaultValue: 10,
                        kind: "LocalArgument",
                        name: "assigneePageSize",
                    },
                    l = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "includeReactions",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "nodes",
                    },
                    n = [
                        {
                            kind: "Variable",
                            name: "ids",
                            variableName: "nodes",
                        },
                    ],
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    t = {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueOrPullRequestUnreadIndicator",
                    },
                    r = [
                        {
                            kind: "Variable",
                            name: "assigneePageSize",
                            variableName: "assigneePageSize",
                        },
                        {
                            kind: "Variable",
                            name: "includeReactions",
                            variableName: "includeReactions",
                        },
                    ],
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCommentsCount",
                        storageKey: null,
                    },
                    u = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                    ],
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    c = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isReadByViewer",
                            storageKey: null,
                        },
                    ],
                    m = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: c,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: c,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    },
                    g = {
                        condition: "includeReactions",
                        kind: "Condition",
                        passingValue: !0,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "ReactionGroup",
                                kind: "LinkedField",
                                name: "reactionGroups",
                                plural: !0,
                                selections: [i],
                                storageKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        condition: "includeReactions",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "ReactionGroup",
                                                kind: "LinkedField",
                                                name: "reactionGroups",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "content",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "ReactorConnection",
                                                        kind: "LinkedField",
                                                        name: "reactors",
                                                        plural: !1,
                                                        selections: u,
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                ],
                                type: "Reactable",
                                abstractKey: "__isReactable",
                            },
                        ],
                    },
                    p = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "assigneePageSize",
                        },
                    ],
                    y = [s],
                    k = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: p,
                                concreteType: "AssigneeConnection",
                                kind: "LinkedField",
                                name: "assignedActors",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "AssigneeEdge",
                                        kind: "LinkedField",
                                        name: "edges",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "node",
                                                plural: !1,
                                                selections: [
                                                    i,
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: y,
                                                        type: "User",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: y,
                                                        type: "Bot",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "login",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: [
                                                                    {
                                                                        kind: "Literal",
                                                                        name: "size",
                                                                        value: 64,
                                                                    },
                                                                ],
                                                                kind: "ScalarField",
                                                                name: "avatarUrl",
                                                                storageKey:
                                                                    "avatarUrl(size:64)",
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "isCopilot",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "Bot",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                        ],
                                                        type: "Actor",
                                                        abstractKey:
                                                            "__isActor",
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: y,
                                                        type: "Node",
                                                        abstractKey: "__isNode",
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "cursor",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "PageInfo",
                                        kind: "LinkedField",
                                        name: "pageInfo",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "endCursor",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "hasNextPage",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: p,
                                filters: null,
                                handle: "connection",
                                key: "IssueAssignees_assignedActors",
                                kind: "LinkedHandle",
                                name: "assignedActors",
                            },
                            {
                                kind: "TypeDiscriminator",
                                abstractKey: "__isNode",
                            },
                        ],
                        type: "Assignable",
                        abstractKey: "__isAssignable",
                    },
                    h = {
                        alias: null,
                        args: null,
                        concreteType: "StatusCheckRollup",
                        kind: "LinkedField",
                        name: "statusCheckRollup",
                        plural: !1,
                        selections: [
                            d,
                            {
                                alias: null,
                                args: null,
                                concreteType:
                                    "StatusCheckRollupContextConnection",
                                kind: "LinkedField",
                                name: "contexts",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "checkRunCount",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "CheckRunStateCount",
                                        kind: "LinkedField",
                                        name: "checkRunCountsByState",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "count",
                                                storageKey: null,
                                            },
                                            d,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            s,
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueRowSecondaryQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    s,
                                    i,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            t,
                                            {
                                                args: r,
                                                kind: "FragmentSpread",
                                                name: "IssueItemMetadata",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueItemSubIssuesSummary",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueItemBlockedBy",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            t,
                                            {
                                                args: r,
                                                kind: "FragmentSpread",
                                                name: "PullRequestItemMetadata",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "PullRequestRowSecondary",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "PullRequestItemHeadCommit",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "CheckRunStatusFromPullRequest",
                                            },
                                        ],
                                        type: "PullRequest",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [a, e, l],
                        kind: "Operation",
                        name: "IssueRowSecondaryQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    s,
                                    i,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            o,
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 0,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "includeClosedPrs",
                                                        value: !0,
                                                    },
                                                ],
                                                concreteType:
                                                    "PullRequestConnection",
                                                kind: "LinkedField",
                                                name: "closedByPullRequestsReferences",
                                                plural: !1,
                                                selections: u,
                                                storageKey:
                                                    "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "SubIssuesSummary",
                                                kind: "LinkedField",
                                                name: "subIssuesSummary",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "completed",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "percentCompleted",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "total",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            d,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "IssueDependenciesSummary",
                                                kind: "LinkedField",
                                                name: "issueDependenciesSummary",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "blockedBy",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            m,
                                            g,
                                            k,
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            o,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "PullRequestCommit",
                                                kind: "LinkedField",
                                                name: "headCommit",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Commit",
                                                        kind: "LinkedField",
                                                        name: "commit",
                                                        plural: !1,
                                                        selections: [s, h],
                                                        storageKey: null,
                                                    },
                                                    s,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isInMergeQueue",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "reviewDecision",
                                                storageKey: null,
                                            },
                                            h,
                                            m,
                                            g,
                                            k,
                                        ],
                                        type: "PullRequest",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "94d38dded736cdabaf92c2e06e57dc3e",
                        metadata: {},
                        name: "IssueRowSecondaryQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            c.hash = "2ff6561ad9e4d321e65e008ea0b3442a";
            var m = a(40548),
                g = a(30721),
                p = a(25111),
                y = a(74848),
                k = a(69599),
                h = a(76158),
                b = a(96540);
            let f = (0, b.createContext)(null);
            function C({ children: e }) {
                let [l, a] = (0, b.useState)(!1),
                    n = (0, b.useCallback)(() => {
                        a(!1);
                    }, []),
                    s = (0, b.useCallback)(() => {
                        a(!0);
                    }, []),
                    i = (0, b.useMemo)(
                        () => ({
                            isNavigationOpen: l,
                            openNavigation: s,
                            closeNavigation: n,
                        }),
                        [l, s, n]
                    );
                return (0, y.jsx)(f.Provider, { value: i, children: e });
            }
            let F = () => {
                let e = (0, b.useContext)(f);
                if (!e)
                    throw Error(
                        "useNavigationContext must be used within a NavigationContextProvider."
                    );
                return e;
            };
            try {
                f.displayName || (f.displayName = "NavigationContext");
            } catch {}
            try {
                C.displayName || (C.displayName = "NavigationContextProvider");
            } catch {}
            let S = {
                    repository: "repository",
                    assignedToMe: "assigned",
                    pullsAssignedToMe: "pullsAssignedToMe",
                    mentioned: "mentioned",
                    created: "created",
                    recent: "recent",
                    new: "new",
                    empty: "empty",
                },
                L = {
                    open: "state:open",
                    closed: "state:closed",
                    defaultRepoLevelOpen: "is:issue state:open",
                    defaultRepoLevelClosed: "is:issue state:closed",
                    assignedToMe:
                        "is:issue state:open archived:false assignee:@me sort:updated-desc",
                    pullsAssignedToMe:
                        "state:open archived:false assignee:@me is:pr sort:updated-desc",
                    mentioned:
                        "is:issue state:open archived:false mentions:@me sort:updated-desc",
                    createdByMe:
                        "is:issue state:open archived:false author:@me sort:updated-desc",
                    recentActivity:
                        "is:issue involves:@me updated:>@today-1w sort:updated-desc",
                };
            var K = a(73189),
                v = a(79634),
                I = a(88934),
                _ = a(43258),
                x = a(46747),
                w = a(58615);
            let N = [
                    "GRAY",
                    "BLUE",
                    "GREEN",
                    "ORANGE",
                    "RED",
                    "PINK",
                    "PURPLE",
                ],
                j = {
                    GRAY: "Gray",
                    BLUE: "Blue",
                    GREEN: "Green",
                    ORANGE: "Orange",
                    RED: "Red",
                    PINK: "Pink",
                    PURPLE: "Purple",
                },
                R = {
                    GRAY: "var(--bgColor-neutral-muted, var(--color-neutral-subtle))",
                    BLUE: "var(--bgColor-accent-muted, var(--color-accent-subtle))",
                    GREEN: "var(--bgColor-success-muted, var(--color-success-subtle))",
                    ORANGE: "var(--bgColor-severe-muted, var(--color-severe-subtle))",
                    RED: "var(--bgColor-danger-muted, var(--color-danger-subtle))",
                    PINK: "var(--bgColor-sponsors-muted, var(--color-sponsors-subtle))",
                    PURPLE: "var(--bgColor-done-muted, var(--color-done-subtle))",
                },
                P = {
                    GRAY: "var(--fgColor-muted, var(--color-neutral-emphasis))",
                    BLUE: "var(--fgColor-accent, var(--color-accent-fg))",
                    GREEN: "var(--fgColor-success, var(--color-success-fg))",
                    ORANGE: "var(--fgColor-severe, var(--color-severe-fg))",
                    RED: "var(--fgColor-danger, var(--color-danger-fg))",
                    PINK: "var(--fgColor-sponsors, var(--color-sponsors-fg))",
                    PURPLE: "var(--fgColor-done, var(--color-done-fg))",
                };
            var T = a(38621),
                A = a(71315);
            let M = Object.values({
                    closed: "closed",
                    draft: "draft",
                    issue: "issue",
                    locked: "locked",
                    merged: "merged",
                    unmerged: "unmerged",
                    open: "open",
                    pr: "pr",
                    unlocked: "unlocked",
                    blocked: "blocked",
                    blocking: "blocking",
                }),
                V = [
                    ...Object.values({ public: "public", private: "private" }),
                    ...M,
                ],
                D = Object.values({
                    open: "open",
                    closed: "closed",
                    draft: "draft",
                    merged: "merged",
                }),
                E = {
                    repositoriesPreloadCount: 5,
                    issuesPageSizeDefault: 25,
                    issuesPageSizeMax: 100,
                    issuesPageSize: () => {
                        let e = new URLSearchParams(A.fV.search).get(
                            "pageSize"
                        );
                        return Math.min(
                            e ? parseInt(e) : 25,
                            E.issuesPageSizeMax
                        );
                    },
                    pullRequestsMaxPageSize: 50,
                    labelPageSize: 20,
                    assigneePageSize: 20,
                    viewsPageSize: 25,
                    viewLoadingSize: 6,
                    teamsMaxPreloadCount: 100,
                    teamsPageSize: 25,
                    searchUrlParameterName: "q",
                    maxBulkUpdateIssues: 1e3,
                    maxIssuesListItems: (e, l, a) =>
                        a ? (e && !l ? 5e4 : e && l ? 1e4 : 1e3) : 1e3,
                    localStorageKeyBulkUpdateIssues: "repo.bulkUpdateIssues",
                    storageKeyPrefix: (e) =>
                        e.scoped_repository?.id || "hyperlist",
                    defaultViewIcon: "BOOKMARK",
                    defaultViewColor: "GRAY",
                    defaultQueryForNewView: "",
                    issueIcons: {
                        OPEN: {
                            color: "var(--fgColor-open)",
                            icon: T.IssueOpenedIcon,
                            description: "Open issue",
                        },
                        CLOSED: {
                            color: "var(--fgColor-done)",
                            icon: T.IssueClosedIcon,
                            description: "Closed issue (completed)",
                        },
                        NOT_PLANNED: {
                            color: "var(--fgColor-muted)",
                            icon: T.SkipIcon,
                            description: "Closed issue (not planned)",
                        },
                    },
                    serviceOwners: {
                        notification: "github/notifications",
                        pullRequests: "github/pull_requests",
                        hyperlist: "github/hyperlist_web",
                    },
                    pullRequestIcons: {
                        MERGED: {
                            color: "var(--fgColor-done)",
                            icon: T.GitMergeIcon,
                        },
                        IN_MERGE_QUEUE: {
                            color: "var(--fgColor-attention)",
                            icon: T.GitMergeQueueIcon,
                        },
                        OPEN: {
                            color: "var(--fgColor-open)",
                            icon: T.GitPullRequestIcon,
                        },
                        CLOSED: {
                            color: "var(--fgColor-closed)",
                            icon: T.GitPullRequestClosedIcon,
                        },
                        DRAFT: {
                            color: "var(--fgColor-draft)",
                            icon: T.GitPullRequestDraftIcon,
                        },
                    },
                };
            function q(e) {
                return B[e] ? B[e] : $[e] ? $[e] : $[E.defaultViewIcon];
            }
            function O(e) {
                return $[e] ? $[e] : $[E.defaultViewIcon];
            }
            let B = {
                    PEOPLE: T.PeopleIcon,
                    SMILEY: T.SmileyIcon,
                    MENTION: T.MentionIcon,
                    CLOCK: T.ClockIcon,
                    GIT_PULL_REQUEST: T.GitPullRequestIcon,
                },
                $ = {
                    ZAP: T.ZapIcon,
                    ISSUE_OPENED: T.IssueOpenedIcon,
                    PERSON: T.PersonIcon,
                    GIT_PULL_REQUEST: T.GitPullRequestIcon,
                    COMMENT_DISCUSSION: T.CommentDiscussionIcon,
                    ORGANIZATION: T.OrganizationIcon,
                    PEOPLE: T.PeopleIcon,
                    BRIEFCASE: T.BriefcaseIcon,
                    FILE_DIFF: T.FileDiffIcon,
                    CODE_REVIEW: T.CodeReviewIcon,
                    CODESCAN: T.CodescanIcon,
                    TERMINAL: T.TerminalIcon,
                    TOOLS: T.ToolsIcon,
                    BEAKER: T.BeakerIcon,
                    ALERT: T.AlertIcon,
                    EYE: T.EyeIcon,
                    TELESCOPE: T.TelescopeIcon,
                    BOOKMARK: T.BookmarkIcon,
                    CALENDAR: T.CalendarIcon,
                    METER: T.MeterIcon,
                    MOON: T.MoonIcon,
                    SUN: T.SunIcon,
                    FLAME: T.FlameIcon,
                    BUG: T.BugIcon,
                    NORTH_STAR: T.NorthStarIcon,
                    ROCKET: T.RocketIcon,
                    SQUIRREL: T.SquirrelIcon,
                    HUBOT: T.HubotIcon,
                    DEPENDABOT: T.DependabotIcon,
                    SMILEY: T.SmileyIcon,
                    MENTION: T.MentionIcon,
                    CLOCK: T.ClockIcon,
                },
                Q = (e) => Math.abs(e).toLocaleString(),
                U = {
                    numberOfResults: (e) =>
                        `${Q(e)} ${1 === e ? "result" : "results"}`,
                    documentTitleForView: (e) =>
                        e ? `${e} \xb7 Issues` : "Issues",
                    documentTitleForRepository: (e, l) =>
                        `Issues \xb7 ${e}/${l}`,
                    beta: "Beta",
                    preview: "Preview",
                    allViews: "All views",
                    defaultViews: "Default views",
                    loadingQueryResults: ".. loading results",
                    issueEditingSearchInputAriaLabel: "Query",
                    issueSearchInputAriaLabel: "Search Issues",
                    issueSearchInputPlaceholder: "Search Issues",
                    viewSidebarPaneAriaLabel: "Navigation sidebar",
                    issueCreatePaneTitle: "Create new issue",
                    appHeader: "Issues",
                    searchResults: "Search results",
                    singularUnits: (e) =>
                        e.has("Issue") && e.has("PullRequest")
                            ? "issue or pull request"
                            : e.has("Issue")
                              ? "issue"
                              : e.has("PullRequest")
                                ? "pull request"
                                : void 0,
                    pluralUnits: (e) =>
                        e.has("Issue") && e.has("PullRequest")
                            ? "issues and pull requests"
                            : e.has("Issue")
                              ? "issues"
                              : e.has("PullRequest")
                                ? "pull requests"
                                : void 0,
                    updatingIssues: "Updating issues",
                    viewsTitle: "Views",
                    views: {
                        createLink: "Create view",
                        defaultName: "Untitled view",
                        edit: "Edit view",
                        editButtonAriaLabel: "Saved views menu",
                        saveChangesToView: "Save changes to view",
                        createError: "Could not create a new view",
                        updateError: "Could not update the view",
                        iconAndColorAnchorAriaLabel: "Change icon and color",
                        deleteTitle: "Delete view",
                        deleteContent: (e) =>
                            `Are you sure you want to delete view ${e}?`,
                        deleteConfirmationButton: "Delete",
                        deleteError: "Could not delete view",
                        duplicate: "Duplicate",
                        delete: "Delete",
                        duplicateError: "Could not duplicate view",
                        editViewTitleAriaLabel: (e) => `Edit ${e} title`,
                        editViewDescriptionAriaLabel: (e) =>
                            `Edit ${e} description`,
                        editViewAriaLabel: (e) => `Edit ${e}`,
                        maxViewsReached:
                            "You have reached the maximum number of saved views",
                        maxViewsTooltip: "Maximum number of views reached",
                        maxViewsDescription:
                            "Please remove an existing view before creating a new one.",
                        teams: "Teams",
                        icon: "Icon",
                        color: "Color",
                        noTeamsSelectedHeading: "No teams selected.",
                        noTeamsSelectedDescription:
                            "Choose teams that show up in your sidebar.",
                        manageTeamsDescription:
                            "Choose teams that show up in your sidebar.",
                        loadingSelectedTeams: "Loading selected teams",
                        selectedTeams: "Currently selected",
                        unsavedChangesTitle: "You have unsaved changes",
                        unsavedChangesContent:
                            "Are you sure you want to discard them?",
                    },
                    filters: {
                        author: "Author",
                        authorLabel: "Filter by author",
                        labels: "Labels",
                        labelsLabel: "Filter by label",
                        projects: "Projects",
                        projectsLabel: "Filter by project",
                        milestones: "Milestones",
                        milestonesLabel: "Filter by milestone",
                        assignees: "Assignees",
                        assigneesLabel: "Filter by assignees",
                        issueType: "Types",
                        issueTypeLabel: "Filter by issue type",
                    },
                    bulkActions: "Bulk actions",
                    announcePage: (e, l, a) =>
                        `Page ${e} of ${l} loaded with ${a} items`,
                    sidePanelTooltip: "View issue",
                    viewProfile: (e) => `View ${e}'s profile`,
                },
                z = Object.values(S),
                H = {
                    color: E.defaultViewColor,
                    description: "",
                    scopingRepository: null,
                },
                W = {
                    id: S.assignedToMe,
                    name: "Assigned to me",
                    query: L.assignedToMe,
                    icon: "PEOPLE",
                    hidden: !1,
                    ...H,
                },
                G = {
                    id: S.repository,
                    name: "Issues",
                    query: "is:issue state:open",
                    icon: "PEOPLE",
                    hidden: !0,
                    ...H,
                },
                Z = {
                    id: S.pullsAssignedToMe,
                    name: "Assigned to me",
                    query: L.pullsAssignedToMe,
                    icon: "PEOPLE",
                    hidden: !0,
                    ...H,
                },
                X = {
                    id: S.mentioned,
                    name: "Mentioned",
                    query: L.mentioned,
                    icon: "MENTION",
                    hidden: !1,
                    ...H,
                },
                J = {
                    id: S.created,
                    name: "Created by me",
                    query: L.createdByMe,
                    icon: "SMILEY",
                    ...H,
                },
                Y = {
                    id: S.recent,
                    name: "Recent activity",
                    query: L.recentActivity,
                    icon: "CLOCK",
                    ...H,
                },
                ee = {
                    id: S.empty,
                    name: "Issues",
                    query: "is:issue state:open",
                    icon: "ISSUE_OPENED",
                    hidden: !0,
                    ...H,
                },
                el = {
                    id: S.new,
                    name: "New",
                    query: "is:issue state:open",
                    icon: "ISSUE_OPENED",
                    hidden: !0,
                    ...H,
                },
                ea = ["created_by", "assigned", "mentioned"],
                en = {
                    defaultQuery: "is:issue state:open",
                    query: (e) =>
                        e.author
                            ? e.createdByApp
                                ? `author:app/${e.author}`
                                : `author:${e.author}`
                            : e.assignee
                              ? `assignee:${e.assignee}`
                              : e.mentioned
                                ? `mentions:${e.mentioned}`
                                : e.label
                                  ? `label:${e.label}`
                                  : void 0,
                },
                es = [W, J, X, Y, G];
            function ei() {
                return (0, b.useMemo)(() => {
                    let e = [...es];
                    (e.push(ee), e.push(Z));
                    let l = e.map((e, l) => ({
                        id: e.id,
                        name: e.name,
                        query: e.query,
                        position: l + 1,
                        url: e.url,
                    }));
                    return { knownViews: e, knownViewRoutes: l };
                }, []);
            }
            let et = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "query",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "icon",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "scopingRepository",
                        plural: !1,
                        selections: [
                            n,
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "login",
                                        storageKey: null,
                                    },
                                    a,
                                ],
                                storageKey: null,
                            },
                            a,
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "createUserViewMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType:
                                    "CreateDashboardSearchShortcutPayload",
                                kind: "LinkedField",
                                name: "createDashboardSearchShortcut",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "UserDashboard",
                                        kind: "LinkedField",
                                        name: "dashboard",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "SavedViewsShortcutsFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "SearchShortcut",
                                        kind: "LinkedField",
                                        name: "shortcut",
                                        plural: !1,
                                        selections: [
                                            a,
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ListCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueDetailCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ViewOptionsButtonCurrentViewFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "createUserViewMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType:
                                    "CreateDashboardSearchShortcutPayload",
                                kind: "LinkedField",
                                name: "createDashboardSearchShortcut",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "UserDashboard",
                                        kind: "LinkedField",
                                        name: "dashboard",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 25,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "searchTypes",
                                                        value: ["ISSUES"],
                                                    },
                                                ],
                                                concreteType:
                                                    "SearchShortcutConnection",
                                                kind: "LinkedField",
                                                name: "shortcuts",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "totalCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchShortcut",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            a,
                                                            n,
                                                            s,
                                                            i,
                                                            t,
                                                            r,
                                                            o,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    'shortcuts(first:25,searchTypes:["ISSUES"])',
                                            },
                                            a,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "SearchShortcut",
                                        kind: "LinkedField",
                                        name: "shortcut",
                                        plural: !1,
                                        selections: [
                                            a,
                                            {
                                                kind: "InlineFragment",
                                                selections: [n, s, o, r, i, t],
                                                type: "Shortcutable",
                                                abstractKey: "__isShortcutable",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "c06c5627e09922bd28c6d34ff91d0530",
                        metadata: {},
                        name: "createUserViewMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            et.hash = "978a652c70807df3e50daa5d8647aa7a";
            var er = a(18312);
            let eo = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "updateUserViewMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType:
                                    "UpdateDashboardSearchShortcutPayload",
                                kind: "LinkedField",
                                name: "updateDashboardSearchShortcut",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "SearchShortcut",
                                        kind: "LinkedField",
                                        name: "shortcut",
                                        plural: !1,
                                        selections: [
                                            a,
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "SavedViewRow",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ListCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueDetailCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ViewOptionsButtonCurrentViewFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "updateUserViewMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType:
                                    "UpdateDashboardSearchShortcutPayload",
                                kind: "LinkedField",
                                name: "updateDashboardSearchShortcut",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "SearchShortcut",
                                        kind: "LinkedField",
                                        name: "shortcut",
                                        plural: !1,
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "icon",
                                                storageKey: null,
                                            },
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "color",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "query",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "scopingRepository",
                                                plural: !1,
                                                selections: [
                                                    n,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "__typename",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "login",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            a,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    a,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                kind: "TypeDiscriminator",
                                                abstractKey: "__isShortcutable",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "379dbe4cf68c3485e48df2f699f5ae75",
                        metadata: {},
                        name: "updateUserViewMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            eo.hash = "282efc7d24d57d889c4696570696b677";
            var eu = a(23224);
            let ed = /\/(?<owner>.*)\/(?<repo>.*)\/issues\/(?<number>\d+)/,
                ec = /issues(\/\d+|\/new(\/choose)*|\/)*/g,
                em = (e) => eg(e) || ep(e),
                eg = (e) => "/issues/new" === e,
                ep = (e) => e.indexOf("/issues/new") > 0,
                ey = (e) => /^\/[^/]+\/[^/]+\/labels\/[^/?#]+/.test(e),
                ek = (e) => ea.some((l) => e.indexOf(`/issues/${l}`) > 0),
                eh = (e) => e.includes("/issues/created_by/app/"),
                eb = (e, l, a) =>
                    !!e.startsWith(window.location.origin) &&
                    e.indexOf(`/${l}/${a}/issues`) > -1,
                ef = (e) => e.includes(L.open),
                eC = (e) => e.includes(L.closed),
                eF = (e) => e.includes(`-${L.open}`),
                eS = (e) => e.includes(`-${L.closed}`),
                eL = (e) => {
                    let l;
                    if (
                        !(e = e.trim()) ||
                        ((l = e),
                        [
                            L.defaultRepoLevelOpen,
                            L.defaultRepoLevelClosed,
                        ].includes(
                            l
                                .split(" ")
                                .filter((e) => e && " " !== e)
                                .sort((e) => ("is:issue" === e ? -1 : 1))
                                .join(" ")
                        ))
                    )
                        return "";
                    let a = ef((e = eK(e))),
                        n = eC(e),
                        s = eF(e),
                        i = eS(e);
                    return s && !i
                        ? e.replaceAll(`-${L.open}`, `-${L.closed}`)
                        : !n || a || i
                          ? a || i
                              ? e.trim()
                              : (e = e.trim()).length > 0
                                ? `${e.trim()} ${L.open}`
                                : L.open
                          : e.replaceAll(L.closed, L.open);
                },
                eK = (e) =>
                    e.replace(/(^|\s)is:(open|closed)(\s|$)/g, "$1state:$2$3"),
                ev = (e, l) =>
                    null === e.match(/(\?|&)page=-?\d+/)
                        ? -1 === e.indexOf("?")
                            ? `${e}?page=${l}`
                            : `${e}&page=${l}`
                        : e.replace(/(\?|&)page=-?\d+/, `$1page=${l}`),
                eI = (e, l) => {
                    let a = NaN,
                        n = e.get("pageSize");
                    n &&
                        (a = Math.min(
                            (a =
                                (a = parseInt(n)) &&
                                Number.isInteger(a) &&
                                a >= 0
                                    ? a
                                    : NaN),
                            E.issuesPageSizeMax
                        )) &&
                        (l.first = a);
                    let s = e.get("page"),
                        i = s ? parseInt(s) : void 0;
                    i && Number.isInteger(i) && i > 1
                        ? (l.skip = (i - 1) * (a || E.issuesPageSizeDefault))
                        : (l.skip = 0);
                },
                e_ = (e) =>
                    RegExp(
                        `\\b${e}:("([^"]*)"|[^,\\s\\)]+)(\\s*,\\s*("(?:\\"|.)*?"|[^,\\s]+))*`,
                        "gim"
                    ),
                ex = (e, l) => {
                    let a,
                        n = e_(l),
                        s = [];
                    for (; null !== (a = n.exec(e)); ) s.push(a[0]);
                    let i = [];
                    if (s && s.length) {
                        for (a of s) {
                            let e = a.slice(`${l}:`.length).split(",");
                            if (e) for (let l of e) i.push(l.trim());
                        }
                        return i;
                    }
                    return [];
                };
            function ew(e) {
                let l = !1,
                    a = "",
                    n = "";
                for (let s of e)
                    ('"' === s && "\\" !== n && (l = !l),
                        (" " !== s || l || " " !== n) && (a += s),
                        (n = s));
                return a.trim();
            }
            let eN = (e, l, a) => {
                    let n = ex(e, a);
                    e.includes(`no:${a}`) && (e = e.replace(`no:${a}`, ""));
                    let s = l.filter((e) => !n.includes(e)),
                        i = n.filter((e) => !l.includes(e)),
                        t = e.slice();
                    for (let e of i) {
                        let l = (0, eu.A)(e);
                        t = t.replace(RegExp(`-?${a}:${l}`, "g"), "");
                    }
                    for (let e of s) {
                        if (e === `no:${a}`) {
                            t = `${t} ${e} `;
                            continue;
                        }
                        let l =
                            e.indexOf(" ") > -1 && !e.match(/".+"/)
                                ? `"${e}"`
                                : e;
                        t = `${t} ${a}:${l}`;
                    }
                    return ew(t);
                },
                ej = (e, l, a, n) => {
                    let s = e_(a),
                        i = e.replace(s, "").replace(`no:${a}`, "").trim();
                    if (!l.length) return ew(i);
                    let t = l.map((e) => (e.includes(" ") ? `"${e}"` : e)),
                        r = n ? `no:${a}` : `${a}:${t.join(",")}`;
                    return ew(`${i} ${r}`);
                },
                eR = (e, l, a) => {
                    let n = e.match(RegExp(`${l}:([^\\s]+)`));
                    if (n) {
                        let [l, s] = n;
                        if (!a.includes(s || ""))
                            return e.replace(l, "").replace(/\s+/g, " ").trim();
                    }
                    return e;
                },
                eP = (0, b.createContext)({
                    viewPosition: void 0,
                    setViewPosition: K.l,
                    isCustomView: (e) => "" === e,
                    isEditing: !1,
                    setIsEditing: K.l,
                    isQueryLoading: !1,
                    setIsQueryLoading: K.l,
                    saveViewsConnectionId: void 0,
                    setSaveViewsConnectionId: K.l,
                    activeSearchQuery: "",
                    setActiveSearchQuery: K.l,
                    canEditView: !1,
                    setCanEditView: K.l,
                    isNewView: !1,
                    setIsNewView: K.l,
                    executeQuery: void 0,
                    setExecuteQuery: K.l,
                    dirtyViewId: void 0,
                    setDirtyViewId: K.l,
                    currentViewId: S.empty,
                    setCurrentViewId: K.l,
                    currentPage: void 0,
                    setCurrentPage: K.l,
                    savedViewsCount: 0,
                    setSavedViewsCount: K.l,
                }),
                eT = (0, b.createContext)({
                    commitUserViewCreate: K.l,
                    commitUserViewEdit: K.l,
                    commitUserViewDuplicate: K.l,
                    dirtySearchQuery: "",
                    debouncedDirtySearchQuery: null,
                    setDirtySearchQuery: K.l,
                    dirtyTitle: "",
                    setDirtyTitle: K.l,
                    dirtyDescription: "",
                    setDirtyDescription: K.l,
                    dirtyViewIcon: null,
                    setDirtyViewIcon: K.l,
                    dirtyViewColor: null,
                    setDirtyViewColor: K.l,
                    bulkJobId: null,
                    setBulkJobId: K.l,
                    clearSavedViewEditState: K.l,
                    shouldFocusSearchOnNav: !1,
                    setShouldFocusSearchOnNav: K.l,
                });
            function eA({ children: e }) {
                let {
                        initial_view_content: { can_edit_view: l },
                    } = (0, v.X)(),
                    { addToast: a } = (0, _.Y6)(),
                    { search: n } = (0, I.zy)(),
                    s = new URLSearchParams(n).get("q"),
                    i = s && "" !== s ? s : L.defaultRepoLevelOpen,
                    [t, r] = (0, b.useState)(l),
                    [o, u] = (0, b.useState)(null),
                    [d, c] = (0, b.useState)(i),
                    [m, g] = (0, b.useState)(void 0),
                    [p, k] = (0, b.useState)(void 0),
                    [h, f] = (0, b.useState)(null),
                    [C, F] = (0, b.useState)(null),
                    [K, N] = (0, b.useState)(null),
                    [j, R] = (0, b.useState)(null),
                    [T, A] = (0, b.useState)(void 0),
                    M = (() => {
                        let { scoped_repository: e } = (0, v.X)(),
                            { pathname: l } = (0, I.zy)();
                        if (l.match(ed))
                            return e ? S.repository : S.assignedToMe;
                        let a = l.split("/").pop() || "";
                        return e && l.match(ec)
                            ? S.repository
                            : "issues" !== a && a
                              ? a
                              : S.empty;
                    })(),
                    [V, D] = (0, b.useState)(M),
                    [q, O] = (0, b.useState)(!1),
                    [B, Q] = (0, b.useState)(!1),
                    [z, H] = (0, b.useState)(!1),
                    { knownViews: W } = ei(),
                    [G, Z] = (0, b.useState)(),
                    [X, J] = (0, b.useState)(),
                    [Y, ee] = (0, b.useState)(!1),
                    [el, ea] = (0, b.useState)(0),
                    [en, es] = (0, b.useState)(null),
                    eu = (0, x.d)(es, 500);
                (0, b.useEffect)(() => {
                    eu(o);
                }, [eu, o]);
                let [em, eg] = (0, w.M)(
                        E.localStorageKeyBulkUpdateIssues,
                        null
                    ),
                    ep = (0, b.useCallback)(
                        (e) => !!e && -1 === W.findIndex((l) => l.id === e),
                        [W]
                    ),
                    ey = (0, b.useCallback)(() => {
                        (u(null),
                            f(null),
                            F(null),
                            N(null),
                            R(null),
                            A(void 0),
                            ee(!1));
                    }, []),
                    ek = (0, b.useCallback)(
                        ({
                            viewId: e,
                            viewName: l,
                            viewIcon: n,
                            viewColor: s,
                            viewDescription: i,
                            viewQuery: t,
                            onSuccess: r,
                            onError: o,
                            relayEnvironment: u,
                        }) => {
                            ep(e) &&
                                (function ({
                                    environment: e,
                                    input: l,
                                    onCompleted: a,
                                    onError: n,
                                }) {
                                    ((l.scopingRepository = null),
                                        (0, er.commitMutation)(e, {
                                            mutation: eo,
                                            optimisticResponse: {
                                                updateDashboardSearchShortcut: {
                                                    shortcut: {
                                                        __isShortcutable:
                                                            "SearchShortcut",
                                                        id: l.shortcutId,
                                                        name: l.name,
                                                        icon: l.icon,
                                                        color: l.color,
                                                        description:
                                                            l.description,
                                                        query: l.query,
                                                        scopingRepository: null,
                                                    },
                                                },
                                            },
                                            variables: { input: l },
                                            onCompleted: (e) => a && a(e),
                                            onError: (e) => n && n(e),
                                        }));
                                })({
                                    environment: u,
                                    input: {
                                        shortcutId: e,
                                        query: t,
                                        name: l,
                                        description: i,
                                        icon: n,
                                        color: s,
                                    },
                                    onError: () => {
                                        (a({
                                            type: "error",
                                            message: U.views.updateError,
                                        }),
                                            o?.());
                                    },
                                    onCompleted: (e) => {
                                        r?.(e);
                                    },
                                });
                        },
                        [ep, a]
                    ),
                    eh = (0, b.useCallback)(
                        ({
                            input: e,
                            onSuccess: l,
                            onError: n,
                            relayEnvironment: s,
                        }) => (
                            (e.name = e.name || U.views.defaultName),
                            (e.query =
                                null === e.query || void 0 === e.query
                                    ? o
                                    : e.query),
                            (function ({
                                environment: e,
                                input: l,
                                onError: a,
                                onCompleted: n,
                            }) {
                                return (0, er.commitMutation)(e, {
                                    mutation: et,
                                    variables: { input: l },
                                    onError: (e) => a && a(e),
                                    onCompleted: (e) => {
                                        n?.(e);
                                    },
                                });
                            })({
                                environment: s,
                                input: e,
                                onError: () => {
                                    (a({
                                        type: "error",
                                        message: U.views.createError,
                                    }),
                                        n?.());
                                },
                                onCompleted: (e) => {
                                    l?.(e);
                                },
                            })
                        ),
                        [o, a]
                    ),
                    eb = (0, b.useCallback)(
                        ({ onSuccess: e, onError: l, relayEnvironment: a }) =>
                            eh({
                                input: {
                                    query: E.defaultQueryForNewView,
                                    name: U.views.defaultName,
                                    searchType: "ISSUES",
                                    icon: E.defaultViewIcon,
                                    color: E.defaultViewColor,
                                },
                                onSuccess: e,
                                onError: l,
                                relayEnvironment: a,
                            }),
                        [eh]
                    ),
                    ef = (0, b.useCallback)(
                        ({
                            onSuccess: e,
                            onError: l,
                            viewName: a,
                            viewIcon: n,
                            viewColor: s,
                            viewDescription: i,
                            viewQuery: t,
                            relayEnvironment: r,
                        }) =>
                            eh({
                                input: {
                                    query: t,
                                    name: `${a} copy`,
                                    description: i,
                                    color: P[s] ? s : E.defaultViewColor,
                                    icon: $[n] ? n : E.defaultViewIcon,
                                    searchType: "ISSUES",
                                },
                                onSuccess: e,
                                onError: l,
                                relayEnvironment: r,
                            }),
                        [eh]
                    ),
                    eC = (0, b.useMemo)(
                        () => ({
                            isEditing: q,
                            setIsEditing: O,
                            isQueryLoading: B,
                            setIsQueryLoading: Q,
                            viewPosition: m,
                            setViewPosition: g,
                            isCustomView: ep,
                            saveViewsConnectionId: p,
                            setSaveViewsConnectionId: k,
                            activeSearchQuery: d,
                            setActiveSearchQuery: c,
                            canEditView: t,
                            setCanEditView: r,
                            isNewView: z,
                            setIsNewView: H,
                            executeQuery: X,
                            setExecuteQuery: J,
                            dirtyViewId: T,
                            setDirtyViewId: A,
                            currentViewId: V,
                            setCurrentViewId: D,
                            currentPage: G,
                            setCurrentPage: Z,
                            savedViewsCount: el,
                            setSavedViewsCount: ea,
                        }),
                        [q, B, m, ep, p, d, t, z, X, T, V, G, el]
                    ),
                    eF = (0, b.useMemo)(
                        () => ({
                            commitUserViewCreate: eb,
                            commitUserViewDuplicate: ef,
                            commitUserViewEdit: ek,
                            dirtySearchQuery: o,
                            setDirtySearchQuery: u,
                            debouncedDirtySearchQuery: en,
                            dirtyDescription: C,
                            setDirtyDescription: F,
                            dirtyViewIcon: K,
                            setDirtyViewIcon: N,
                            dirtyTitle: h,
                            setDirtyTitle: f,
                            dirtyViewColor: j,
                            setDirtyViewColor: R,
                            dirtyViewId: T,
                            setDirtyViewId: A,
                            bulkJobId: em,
                            setBulkJobId: eg,
                            clearSavedViewEditState: ey,
                            shouldFocusSearchOnNav: Y,
                            setShouldFocusSearchOnNav: ee,
                        }),
                        [eb, ef, ek, o, en, C, K, h, j, T, em, eg, ey, Y]
                    );
                return (0, y.jsx)(eP.Provider, {
                    value: eC,
                    children: (0, y.jsx)(eT.Provider, {
                        value: eF,
                        children: e,
                    }),
                });
            }
            function eM() {
                return (0, b.useContext)(eP);
            }
            function eV() {
                return (0, b.useContext)(eT);
            }
            try {
                eP.displayName || (eP.displayName = "QueryContext");
            } catch {}
            try {
                eT.displayName || (eT.displayName = "QueryEditContext");
            } catch {}
            try {
                eA.displayName || (eA.displayName = "QueryContextProvider");
            } catch {}
            function eD({ children: e }) {
                return (0, y.jsx)(C, {
                    children: (0, y.jsx)(eA, {
                        children: (0, y.jsxs)(h.e, {
                            children: [
                                (0, k.G7)("primer_react_unified_portal_root")
                                    ? null
                                    : (0, y.jsx)("div", {
                                          role: "region",
                                          id: "__primerPortalRoot__",
                                          style: {
                                              zIndex: 15,
                                              position: "absolute",
                                              width: "100%",
                                          },
                                      }),
                                (0, y.jsx)(b.Suspense, {
                                    fallback: (0, y.jsx)("span", {
                                        children: "Loading...",
                                    }),
                                    children: e,
                                }),
                            ],
                        }),
                    }),
                });
            }
            try {
                eD.displayName || (eD.displayName = "App");
            } catch {}
            let eE = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [],
                        kind: "Fragment",
                        metadata: null,
                        name: "SavedViewsQuery",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "viewer",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "UserDashboard",
                                        kind: "LinkedField",
                                        name: "dashboard",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "SavedViewsShortcutsFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [],
                        kind: "Operation",
                        name: "SavedViewsQuery",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "viewer",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "UserDashboard",
                                        kind: "LinkedField",
                                        name: "dashboard",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 25,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "searchTypes",
                                                        value: ["ISSUES"],
                                                    },
                                                ],
                                                concreteType:
                                                    "SearchShortcutConnection",
                                                kind: "LinkedField",
                                                name: "shortcuts",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "totalCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchShortcut",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            e,
                                                            l,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "query",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "icon",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "color",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "description",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "scopingRepository",
                                                                plural: !1,
                                                                selections: [
                                                                    l,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "owner",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "__typename",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "login",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                e,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    e,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    'shortcuts(first:25,searchTypes:["ISSUES"])',
                                            },
                                            e,
                                        ],
                                        storageKey: null,
                                    },
                                    e,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "c2a19fab639227d7a392d54afba625c3",
                        metadata: {},
                        name: "SavedViewsQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eE.hash = "932ef79751b6703da678e9566282bebd";
            let eq = (function () {
                var e = [
                        {
                            defaultValue: "assigned",
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [{ kind: "Variable", name: "id", variableName: "id" }],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ClientSideRelayDataGeneratorViewQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ListCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueDetailCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ViewOptionsButtonCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "DashboardSearchCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueDashboardCustomViewPageCurrentViewFragment",
                                            },
                                        ],
                                        type: "Shortcutable",
                                        abstractKey: "__isShortcutable",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ClientSideRelayDataGeneratorViewQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    a,
                                    n,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            s,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "query",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "scopingRepository",
                                                plural: !1,
                                                selections: [
                                                    s,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [
                                                            a,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "login",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            n,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    n,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "icon",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "color",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Shortcutable",
                                        abstractKey: "__isShortcutable",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "7f3619bf561a2557f3f66ac4573a1484",
                        metadata: {},
                        name: "ClientSideRelayDataGeneratorViewQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eq.hash = "e6f9adaa490e46c90c0c67c9a654141d";
            let eO = (function () {
                var e = {
                        defaultValue: 25,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: 20,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    a = {
                        defaultValue:
                            "state:open archived:false assignee:@me sort:updated-desc",
                        kind: "LocalArgument",
                        name: "query",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    s = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    i = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    t = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    r = [
                        s,
                        i,
                        t,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [o, p, u],
                        storageKey: null,
                    },
                    k = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                    h = {
                        kind: "InlineFragment",
                        selections: [u],
                        type: "Node",
                        abstractKey: "__isNode",
                    },
                    b = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "labelPageSize",
                        },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "endCursor",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: b,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            u,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            g,
                                            m,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            o,
                                        ],
                                        storageKey: null,
                                    },
                                    f,
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [C, F],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: b,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    x = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            p,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            o,
                            k,
                            u,
                        ],
                        storageKey: null,
                    },
                    w = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                c,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                                u,
                            ],
                            storageKey: null,
                        },
                    ],
                    N = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: w,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: w,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    },
                    j = {
                        kind: "InlineFragment",
                        selections: [
                            S,
                            L,
                            K,
                            v,
                            I,
                            _,
                            x,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                            N,
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    R = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    P = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueDashboardCustomViewPageQuery",
                        selections: [
                            {
                                args: [
                                    {
                                        kind: "Literal",
                                        name: "fetchRepository",
                                        value: !0,
                                    },
                                    s,
                                    {
                                        kind: "Variable",
                                        name: "labelPageSize",
                                        variableName: "labelPageSize",
                                    },
                                    i,
                                    t,
                                ],
                                kind: "FragmentSpread",
                                name: "IssueDashboardCustomViewPageSearchListFragment",
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [a, e, l, n],
                        kind: "Operation",
                        name: "IssueDashboardCustomViewPageQuery",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: r,
                                        concreteType:
                                            "SearchResultItemConnection",
                                        kind: "LinkedField",
                                        name: "search",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueCount",
                                                storageKey: null,
                                            },
                                            {
                                                if: null,
                                                kind: "Stream",
                                                label: "ListItemsPaginated_results$stream$Query_search",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchResultItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    o,
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                d,
                                                                                c,
                                                                                {
                                                                                    alias: "titleHtml",
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "IssueType",
                                                                                    kind: "LinkedField",
                                                                                    name: "issueType",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            u,
                                                                                            m,
                                                                                            g,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            m,
                                                                                            y,
                                                                                            u,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "databaseId",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isPrivate",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isArchived",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: [
                                                                                        {
                                                                                            kind: "Literal",
                                                                                            name: "first",
                                                                                            value: 10,
                                                                                        },
                                                                                    ],
                                                                                    concreteType:
                                                                                        "AssigneeConnection",
                                                                                    kind: "LinkedField",
                                                                                    name: "assignedActors",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "AssigneeEdge",
                                                                                                kind: "LinkedField",
                                                                                                name: "edges",
                                                                                                plural: !0,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                null,
                                                                                                            kind: "LinkedField",
                                                                                                            name: "node",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    o,
                                                                                                                    {
                                                                                                                        kind: "InlineFragment",
                                                                                                                        selections:
                                                                                                                            [
                                                                                                                                u,
                                                                                                                                p,
                                                                                                                                m,
                                                                                                                                {
                                                                                                                                    alias: null,
                                                                                                                                    args: null,
                                                                                                                                    kind: "ScalarField",
                                                                                                                                    name: "profileResourcePath",
                                                                                                                                    storageKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    alias: null,
                                                                                                                                    args: [
                                                                                                                                        {
                                                                                                                                            kind: "Literal",
                                                                                                                                            name: "size",
                                                                                                                                            value: 64,
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    kind: "ScalarField",
                                                                                                                                    name: "avatarUrl",
                                                                                                                                    storageKey:
                                                                                                                                        "avatarUrl(size:64)",
                                                                                                                                },
                                                                                                                                k,
                                                                                                                            ],
                                                                                                                        type: "Actor",
                                                                                                                        abstractKey:
                                                                                                                            "__isActor",
                                                                                                                    },
                                                                                                                    h,
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        "assignedActors(first:10)",
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            j,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        S,
                                                                                                        L,
                                                                                                        K,
                                                                                                        v,
                                                                                                        I,
                                                                                                        _,
                                                                                                        x,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "reviewDecision",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        R,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "isInMergeQueue",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        P,
                                                                                                        N,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "Issue",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                d,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            m,
                                                                                            y,
                                                                                            u,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                c,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            j,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        S,
                                                                                                        L,
                                                                                                        K,
                                                                                                        v,
                                                                                                        I,
                                                                                                        _,
                                                                                                        x,
                                                                                                        R,
                                                                                                        P,
                                                                                                        N,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "PullRequest",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    h,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            f,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                            {
                                                if: null,
                                                kind: "Defer",
                                                label: "ListItemsPaginated_results$defer$Query_search$pageInfo",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "startCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            C,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasPreviousPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            F,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: r,
                                        filters: ["query", "type", "skip"],
                                        handle: "connection",
                                        key: "Query_search",
                                        kind: "LinkedHandle",
                                        name: "search",
                                    },
                                    h,
                                ],
                                type: "Searchable",
                                abstractKey: "__isSearchable",
                            },
                        ],
                    },
                    params: {
                        id: "1278634ff67aaf7d4e5b5de1c9ba2ba6",
                        metadata: {},
                        name: "IssueDashboardCustomViewPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eO.hash = "18c3535d4511710ecc3e0c92c3536268";
            let eB = (function () {
                var e = {
                        defaultValue: 25,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: 20,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    a = {
                        defaultValue:
                            "state:open archived:false assignee:@me sort:updated-desc",
                        kind: "LocalArgument",
                        name: "query",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    s = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    i = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    t = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    r = [
                        s,
                        i,
                        t,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [o, p, u],
                        storageKey: null,
                    },
                    k = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                    h = {
                        kind: "InlineFragment",
                        selections: [u],
                        type: "Node",
                        abstractKey: "__isNode",
                    },
                    b = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "labelPageSize",
                        },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "endCursor",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: b,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            u,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            g,
                                            m,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            o,
                                        ],
                                        storageKey: null,
                                    },
                                    f,
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [C, F],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: b,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    x = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            p,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            o,
                            k,
                            u,
                        ],
                        storageKey: null,
                    },
                    w = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                c,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                                u,
                            ],
                            storageKey: null,
                        },
                    ],
                    N = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: w,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: w,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    },
                    j = {
                        kind: "InlineFragment",
                        selections: [
                            S,
                            L,
                            K,
                            v,
                            I,
                            _,
                            x,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                            N,
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    R = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    P = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueDashboardKnownViewPageQuery",
                        selections: [
                            {
                                args: [
                                    {
                                        kind: "Literal",
                                        name: "fetchRepository",
                                        value: !0,
                                    },
                                    s,
                                    {
                                        kind: "Variable",
                                        name: "labelPageSize",
                                        variableName: "labelPageSize",
                                    },
                                    i,
                                    t,
                                ],
                                kind: "FragmentSpread",
                                name: "ListQuery",
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [a, e, l, n],
                        kind: "Operation",
                        name: "IssueDashboardKnownViewPageQuery",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: r,
                                        concreteType:
                                            "SearchResultItemConnection",
                                        kind: "LinkedField",
                                        name: "search",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueCount",
                                                storageKey: null,
                                            },
                                            {
                                                if: null,
                                                kind: "Stream",
                                                label: "ListItemsPaginated_results$stream$Query_search",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchResultItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    o,
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                d,
                                                                                c,
                                                                                {
                                                                                    alias: "titleHtml",
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "IssueType",
                                                                                    kind: "LinkedField",
                                                                                    name: "issueType",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            u,
                                                                                            m,
                                                                                            g,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            m,
                                                                                            y,
                                                                                            u,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "databaseId",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isPrivate",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isArchived",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: [
                                                                                        {
                                                                                            kind: "Literal",
                                                                                            name: "first",
                                                                                            value: 10,
                                                                                        },
                                                                                    ],
                                                                                    concreteType:
                                                                                        "AssigneeConnection",
                                                                                    kind: "LinkedField",
                                                                                    name: "assignedActors",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "AssigneeEdge",
                                                                                                kind: "LinkedField",
                                                                                                name: "edges",
                                                                                                plural: !0,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                null,
                                                                                                            kind: "LinkedField",
                                                                                                            name: "node",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    o,
                                                                                                                    {
                                                                                                                        kind: "InlineFragment",
                                                                                                                        selections:
                                                                                                                            [
                                                                                                                                u,
                                                                                                                                p,
                                                                                                                                m,
                                                                                                                                {
                                                                                                                                    alias: null,
                                                                                                                                    args: null,
                                                                                                                                    kind: "ScalarField",
                                                                                                                                    name: "profileResourcePath",
                                                                                                                                    storageKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    alias: null,
                                                                                                                                    args: [
                                                                                                                                        {
                                                                                                                                            kind: "Literal",
                                                                                                                                            name: "size",
                                                                                                                                            value: 64,
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    kind: "ScalarField",
                                                                                                                                    name: "avatarUrl",
                                                                                                                                    storageKey:
                                                                                                                                        "avatarUrl(size:64)",
                                                                                                                                },
                                                                                                                                k,
                                                                                                                            ],
                                                                                                                        type: "Actor",
                                                                                                                        abstractKey:
                                                                                                                            "__isActor",
                                                                                                                    },
                                                                                                                    h,
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        "assignedActors(first:10)",
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            j,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        S,
                                                                                                        L,
                                                                                                        K,
                                                                                                        v,
                                                                                                        I,
                                                                                                        _,
                                                                                                        x,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "reviewDecision",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        R,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "isInMergeQueue",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        P,
                                                                                                        N,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "Issue",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                d,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            m,
                                                                                            y,
                                                                                            u,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                c,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            j,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        S,
                                                                                                        L,
                                                                                                        K,
                                                                                                        v,
                                                                                                        I,
                                                                                                        _,
                                                                                                        x,
                                                                                                        R,
                                                                                                        P,
                                                                                                        N,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "PullRequest",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    h,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            f,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                            {
                                                if: null,
                                                kind: "Defer",
                                                label: "ListItemsPaginated_results$defer$Query_search$pageInfo",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "startCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            C,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasPreviousPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            F,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: r,
                                        filters: ["query", "type", "skip"],
                                        handle: "connection",
                                        key: "Query_search",
                                        kind: "LinkedHandle",
                                        name: "search",
                                    },
                                    h,
                                ],
                                type: "Searchable",
                                abstractKey: "__isSearchable",
                            },
                        ],
                    },
                    params: {
                        id: "d958a6aeec2ec573780b8075d3ae752f",
                        metadata: {},
                        name: "IssueDashboardKnownViewPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eB.hash = "d2885256150d2e97f35fa8cf05ee801d";
            let e$ = (function () {
                var e = {
                        defaultValue: 25,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: 20,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    a = {
                        defaultValue:
                            "state:open archived:false assignee:@me sort:updated-desc",
                        kind: "LocalArgument",
                        name: "query",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    s = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    i = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    t = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    r = [
                        s,
                        i,
                        t,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [o, p, u],
                        storageKey: null,
                    },
                    k = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                    h = {
                        kind: "InlineFragment",
                        selections: [u],
                        type: "Node",
                        abstractKey: "__isNode",
                    },
                    b = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "labelPageSize",
                        },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "endCursor",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: b,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            u,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            g,
                                            m,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            o,
                                        ],
                                        storageKey: null,
                                    },
                                    f,
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [C, F],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: b,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    x = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            p,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            o,
                            k,
                            u,
                        ],
                        storageKey: null,
                    },
                    w = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                c,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                                u,
                            ],
                            storageKey: null,
                        },
                    ],
                    N = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: w,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: w,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    },
                    j = {
                        kind: "InlineFragment",
                        selections: [
                            S,
                            L,
                            K,
                            v,
                            I,
                            _,
                            x,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                            N,
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    R = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    P = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueDashboardPageQuery",
                        selections: [
                            {
                                args: [
                                    {
                                        kind: "Literal",
                                        name: "fetchRepository",
                                        value: !0,
                                    },
                                    s,
                                    {
                                        kind: "Variable",
                                        name: "labelPageSize",
                                        variableName: "labelPageSize",
                                    },
                                    i,
                                    t,
                                ],
                                kind: "FragmentSpread",
                                name: "ListQuery",
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [a, e, l, n],
                        kind: "Operation",
                        name: "IssueDashboardPageQuery",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: r,
                                        concreteType:
                                            "SearchResultItemConnection",
                                        kind: "LinkedField",
                                        name: "search",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueCount",
                                                storageKey: null,
                                            },
                                            {
                                                if: null,
                                                kind: "Stream",
                                                label: "ListItemsPaginated_results$stream$Query_search",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchResultItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    o,
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                d,
                                                                                c,
                                                                                {
                                                                                    alias: "titleHtml",
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "IssueType",
                                                                                    kind: "LinkedField",
                                                                                    name: "issueType",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            u,
                                                                                            m,
                                                                                            g,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            m,
                                                                                            y,
                                                                                            u,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "databaseId",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isPrivate",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isArchived",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: [
                                                                                        {
                                                                                            kind: "Literal",
                                                                                            name: "first",
                                                                                            value: 10,
                                                                                        },
                                                                                    ],
                                                                                    concreteType:
                                                                                        "AssigneeConnection",
                                                                                    kind: "LinkedField",
                                                                                    name: "assignedActors",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "AssigneeEdge",
                                                                                                kind: "LinkedField",
                                                                                                name: "edges",
                                                                                                plural: !0,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                null,
                                                                                                            kind: "LinkedField",
                                                                                                            name: "node",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    o,
                                                                                                                    {
                                                                                                                        kind: "InlineFragment",
                                                                                                                        selections:
                                                                                                                            [
                                                                                                                                u,
                                                                                                                                p,
                                                                                                                                m,
                                                                                                                                {
                                                                                                                                    alias: null,
                                                                                                                                    args: null,
                                                                                                                                    kind: "ScalarField",
                                                                                                                                    name: "profileResourcePath",
                                                                                                                                    storageKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    alias: null,
                                                                                                                                    args: [
                                                                                                                                        {
                                                                                                                                            kind: "Literal",
                                                                                                                                            name: "size",
                                                                                                                                            value: 64,
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    kind: "ScalarField",
                                                                                                                                    name: "avatarUrl",
                                                                                                                                    storageKey:
                                                                                                                                        "avatarUrl(size:64)",
                                                                                                                                },
                                                                                                                                k,
                                                                                                                            ],
                                                                                                                        type: "Actor",
                                                                                                                        abstractKey:
                                                                                                                            "__isActor",
                                                                                                                    },
                                                                                                                    h,
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        "assignedActors(first:10)",
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            j,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        S,
                                                                                                        L,
                                                                                                        K,
                                                                                                        v,
                                                                                                        I,
                                                                                                        _,
                                                                                                        x,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "reviewDecision",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        R,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "isInMergeQueue",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        P,
                                                                                                        N,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "Issue",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                d,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            m,
                                                                                            y,
                                                                                            u,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                c,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            j,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        S,
                                                                                                        L,
                                                                                                        K,
                                                                                                        v,
                                                                                                        I,
                                                                                                        _,
                                                                                                        x,
                                                                                                        R,
                                                                                                        P,
                                                                                                        N,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "PullRequest",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    h,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            f,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                            {
                                                if: null,
                                                kind: "Defer",
                                                label: "ListItemsPaginated_results$defer$Query_search$pageInfo",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "startCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            C,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasPreviousPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            F,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: r,
                                        filters: ["query", "type", "skip"],
                                        handle: "connection",
                                        key: "Query_search",
                                        kind: "LinkedHandle",
                                        name: "search",
                                    },
                                    h,
                                ],
                                type: "Searchable",
                                abstractKey: "__isSearchable",
                            },
                        ],
                    },
                    params: {
                        id: "827aca70409c6311a432c6568bb93791",
                        metadata: {},
                        name: "IssueDashboardPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            e$.hash = "74ccd4931dd56a81cc098302b098ba21";
            let eQ = (function () {
                var e = {
                        defaultValue: 25,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: 20,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    s = {
                        defaultValue:
                            "state:open archived:false assignee:@me sort:updated-desc",
                        kind: "LocalArgument",
                        name: "query",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    t = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    r = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    o = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    u = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    k = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPinIssues",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isArchived",
                        storageKey: null,
                    },
                    I = [
                        r,
                        o,
                        u,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    x = {
                        kind: "InlineFragment",
                        selections: [c],
                        type: "Node",
                        abstractKey: "__isNode",
                    },
                    w = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "labelPageSize",
                        },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    N = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    j = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "endCursor",
                        storageKey: null,
                    },
                    R = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    P = {
                        alias: null,
                        args: w,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            c,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            _,
                                            g,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            d,
                                        ],
                                        storageKey: null,
                                    },
                                    N,
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [j, R],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    T = {
                        alias: null,
                        args: w,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    A = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    M = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    V = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    D = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            m,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            d,
                            k,
                            c,
                        ],
                        storageKey: null,
                    },
                    E = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [h, f, c],
                            storageKey: null,
                        },
                    ],
                    q = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: E,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: E,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    },
                    O = {
                        kind: "InlineFragment",
                        selections: [P, T, C, A, M, V, D, S, F, q],
                        type: "Issue",
                        abstractKey: null,
                    },
                    B = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    $ = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a, n, s, i],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueIndexPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: t,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "PinnedIssues",
                                    },
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "ListRepositoryFragment",
                                    },
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "FirstTimeContributionBanner",
                                    },
                                    {
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "fetchRepository",
                                                value: !1,
                                            },
                                            r,
                                            {
                                                kind: "Variable",
                                                name: "labelPageSize",
                                                variableName: "labelPageSize",
                                            },
                                            o,
                                            u,
                                        ],
                                        kind: "FragmentSpread",
                                        name: "ListQuery",
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "safeViewer",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineDataFragmentSpread",
                                        name: "AssigneePickerSharedAssignee",
                                        selections: [
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    d,
                                                    c,
                                                    m,
                                                    g,
                                                    p,
                                                    y,
                                                    k,
                                                ],
                                                type: "Actor",
                                                abstractKey: "__isActor",
                                            },
                                        ],
                                        args: null,
                                        argumentDefinitions: [],
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [s, e, l, i, a, n],
                        kind: "Operation",
                        name: "IssueIndexPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: t,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    c,
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "first",
                                                value: 3,
                                            },
                                        ],
                                        concreteType: "PinnedIssueConnection",
                                        kind: "LinkedField",
                                        name: "pinnedIssues",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "PinnedIssue",
                                                kind: "LinkedField",
                                                name: "nodes",
                                                plural: !0,
                                                selections: [
                                                    c,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Issue",
                                                        kind: "LinkedField",
                                                        name: "issue",
                                                        plural: !1,
                                                        selections: [
                                                            c,
                                                            h,
                                                            b,
                                                            f,
                                                            C,
                                                            F,
                                                            S,
                                                            L,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "author",
                                                                plural: !1,
                                                                selections: [
                                                                    d,
                                                                    m,
                                                                    f,
                                                                    c,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "totalCommentsCount",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "repository",
                                                                plural: !1,
                                                                selections: [
                                                                    K,
                                                                    c,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "totalCount",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: "pinnedIssues(first:3)",
                                    },
                                    K,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isDisabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isLocked",
                                        storageKey: null,
                                    },
                                    v,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInOrganization",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isOwnerEnterpriseManaged",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanSeeIssueFields",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "isPullRequests",
                                                value: !1,
                                            },
                                        ],
                                        kind: "ScalarField",
                                        name: "showFirstTimeContributorBanner",
                                        storageKey:
                                            "showFirstTimeContributorBanner(isPullRequests:false)",
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "CommunityProfile",
                                        kind: "LinkedField",
                                        name: "communityProfile",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "goodFirstIssueIssuesCount",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    f,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: I,
                                                concreteType:
                                                    "SearchResultItemConnection",
                                                kind: "LinkedField",
                                                name: "search",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "issueCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        if: null,
                                                        kind: "Stream",
                                                        label: "ListItemsPaginated_results$stream$Query_search",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "SearchResultItemEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                d,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            c,
                                                                                            L,
                                                                                            h,
                                                                                            {
                                                                                                alias: "titleHtml",
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "titleHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "IssueType",
                                                                                                kind: "LinkedField",
                                                                                                name: "issueType",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        c,
                                                                                                        g,
                                                                                                        _,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: [
                                                                                                    {
                                                                                                        kind: "Literal",
                                                                                                        name: "first",
                                                                                                        value: 10,
                                                                                                    },
                                                                                                ],
                                                                                                concreteType:
                                                                                                    "AssigneeConnection",
                                                                                                kind: "LinkedField",
                                                                                                name: "assignedActors",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                "AssigneeEdge",
                                                                                                            kind: "LinkedField",
                                                                                                            name: "edges",
                                                                                                            plural: !0,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        concreteType:
                                                                                                                            null,
                                                                                                                        kind: "LinkedField",
                                                                                                                        name: "node",
                                                                                                                        plural: !1,
                                                                                                                        selections:
                                                                                                                            [
                                                                                                                                d,
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        [
                                                                                                                                            c,
                                                                                                                                            m,
                                                                                                                                            g,
                                                                                                                                            p,
                                                                                                                                            y,
                                                                                                                                            k,
                                                                                                                                        ],
                                                                                                                                    type: "Actor",
                                                                                                                                    abstractKey:
                                                                                                                                        "__isActor",
                                                                                                                                },
                                                                                                                                x,
                                                                                                                            ],
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    "assignedActors(first:10)",
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "Repository",
                                                                                                kind: "LinkedField",
                                                                                                name: "repository",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "databaseId",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "isPrivate",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        v,
                                                                                                        c,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        O,
                                                                                                        {
                                                                                                            kind: "InlineFragment",
                                                                                                            selections:
                                                                                                                [
                                                                                                                    P,
                                                                                                                    T,
                                                                                                                    C,
                                                                                                                    A,
                                                                                                                    M,
                                                                                                                    V,
                                                                                                                    D,
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        kind: "ScalarField",
                                                                                                                        name: "reviewDecision",
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                    B,
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        kind: "ScalarField",
                                                                                                                        name: "isInMergeQueue",
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                    $,
                                                                                                                    q,
                                                                                                                ],
                                                                                                            type: "PullRequest",
                                                                                                            abstractKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                type: "IssueOrPullRequest",
                                                                                                abstractKey:
                                                                                                    "__isIssueOrPullRequest",
                                                                                            },
                                                                                        ],
                                                                                    type: "Issue",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            c,
                                                                                            L,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "Repository",
                                                                                                kind: "LinkedField",
                                                                                                name: "repository",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        g,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                null,
                                                                                                            kind: "LinkedField",
                                                                                                            name: "owner",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    d,
                                                                                                                    m,
                                                                                                                    c,
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        c,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            h,
                                                                                            b,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        O,
                                                                                                        {
                                                                                                            kind: "InlineFragment",
                                                                                                            selections:
                                                                                                                [
                                                                                                                    P,
                                                                                                                    T,
                                                                                                                    C,
                                                                                                                    A,
                                                                                                                    M,
                                                                                                                    V,
                                                                                                                    D,
                                                                                                                    B,
                                                                                                                    $,
                                                                                                                    q,
                                                                                                                ],
                                                                                                            type: "PullRequest",
                                                                                                            abstractKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                type: "IssueOrPullRequest",
                                                                                                abstractKey:
                                                                                                    "__isIssueOrPullRequest",
                                                                                            },
                                                                                        ],
                                                                                    type: "PullRequest",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                x,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    N,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                    },
                                                    {
                                                        if: null,
                                                        kind: "Defer",
                                                        label: "ListItemsPaginated_results$defer$Query_search$pageInfo",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "PageInfo",
                                                                kind: "LinkedField",
                                                                name: "pageInfo",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "startCursor",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    j,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "hasPreviousPage",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    R,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: I,
                                                filters: [
                                                    "query",
                                                    "type",
                                                    "skip",
                                                ],
                                                handle: "connection",
                                                key: "Query_search",
                                                kind: "LinkedHandle",
                                                name: "search",
                                            },
                                            {
                                                kind: "TypeDiscriminator",
                                                abstractKey: "__isNode",
                                            },
                                        ],
                                        type: "Searchable",
                                        abstractKey: "__isSearchable",
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "safeViewer",
                                plural: !1,
                                selections: [
                                    c,
                                    {
                                        kind: "InlineFragment",
                                        selections: [d, m, g, p, y, k],
                                        type: "Actor",
                                        abstractKey: "__isActor",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "6a93075c9b7fb218eb5e5e3887f11889",
                        metadata: {},
                        name: "IssueIndexPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eQ.hash = "b571c28ced06adc9740e2ddeb309b72e";
            let eU = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    a = {
                        defaultValue: "ASC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    n = {
                        defaultValue: "NAME",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    t = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    r = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    o = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    u = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    d = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    m = [
                        o,
                        {
                            fields: [
                                {
                                    kind: "Variable",
                                    name: "direction",
                                    variableName: "orderDirection",
                                },
                                {
                                    kind: "Variable",
                                    name: "field",
                                    variableName: "orderField",
                                },
                            ],
                            kind: "ObjectValue",
                            name: "orderBy",
                        },
                        u,
                        d,
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a, n, s, i, t],
                        kind: "Fragment",
                        metadata: null,
                        name: "RepositoryLabelIndexPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: r,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            o,
                                            {
                                                kind: "Variable",
                                                name: "orderDirection",
                                                variableName: "orderDirection",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "orderField",
                                                variableName: "orderField",
                                            },
                                            u,
                                            d,
                                        ],
                                        kind: "FragmentSpread",
                                        name: "RepositoryLabelIndexPageContentInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, s, e, n, a, t, i],
                        kind: "Operation",
                        name: "RepositoryLabelIndexPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: r,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    c,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: m,
                                        concreteType: "LabelConnection",
                                        kind: "LinkedField",
                                        name: "labels",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "LabelEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Label",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [
                                                            c,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "name",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "nameHTML",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "color",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "description",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "__typename",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "cursor",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "totalCount",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "PageInfo",
                                                kind: "LinkedField",
                                                name: "pageInfo",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "endCursor",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "hasNextPage",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: m,
                                        filters: ["query", "orderBy", "skip"],
                                        handle: "connection",
                                        key: "LabelList_labels",
                                        kind: "LinkedHandle",
                                        name: "labels",
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isWritable",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "a18878441a869b0aa0cc371c1b84cdca",
                        metadata: {},
                        name: "RepositoryLabelIndexPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eU.hash = "edd5cb2905962ab9ba31b6731ba75bec";
            let ez = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    l = {
                        defaultValue: "DESC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    a = {
                        defaultValue: "CREATED_AT",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "state",
                    },
                    i = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    t = [
                        { kind: "Literal", name: "first", value: 50 },
                        {
                            fields: [
                                {
                                    kind: "Variable",
                                    name: "direction",
                                    variableName: "orderDirection",
                                },
                                {
                                    kind: "Variable",
                                    name: "field",
                                    variableName: "orderField",
                                },
                            ],
                            kind: "ObjectValue",
                            name: "orderBy",
                        },
                        {
                            items: [
                                {
                                    kind: "Variable",
                                    name: "states.0",
                                    variableName: "state",
                                },
                            ],
                            kind: "ListValue",
                            name: "states",
                        },
                    ],
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    o = { kind: "Literal", name: "first", value: 0 },
                    u = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a, n, s],
                        kind: "Fragment",
                        metadata: null,
                        name: "RepositoryMilestoneIndexPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "orderDirection",
                                                variableName: "orderDirection",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "orderField",
                                                variableName: "orderField",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "state",
                                                variableName: "state",
                                            },
                                        ],
                                        kind: "FragmentSpread",
                                        name: "RepositoryMilestoneIndexPageContentInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, n, s, a, l],
                        kind: "Operation",
                        name: "RepositoryMilestoneIndexPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: t,
                                        concreteType: "MilestoneConnection",
                                        kind: "LinkedField",
                                        name: "milestones",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "MilestoneEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "Milestone",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [
                                                            r,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "description",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "title",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "url",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "state",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "repository",
                                                                plural: !1,
                                                                selections: [r],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "progressPercentage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "openIssueCount",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "closedIssueCount",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "closed",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "dueOn",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "__typename",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "cursor",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "PageInfo",
                                                kind: "LinkedField",
                                                name: "pageInfo",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "endCursor",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "hasNextPage",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: t,
                                        filters: ["states", "orderBy"],
                                        handle: "connection",
                                        key: "MilestoneList_milestones",
                                        kind: "LinkedHandle",
                                        name: "milestones",
                                    },
                                    {
                                        alias: "open",
                                        args: [
                                            o,
                                            {
                                                kind: "Literal",
                                                name: "states",
                                                value: "OPEN",
                                            },
                                        ],
                                        concreteType: "MilestoneConnection",
                                        kind: "LinkedField",
                                        name: "milestones",
                                        plural: !1,
                                        selections: u,
                                        storageKey:
                                            'milestones(first:0,states:"OPEN")',
                                    },
                                    {
                                        alias: "closed",
                                        args: [
                                            o,
                                            {
                                                kind: "Literal",
                                                name: "states",
                                                value: "CLOSED",
                                            },
                                        ],
                                        concreteType: "MilestoneConnection",
                                        kind: "LinkedField",
                                        name: "milestones",
                                        plural: !1,
                                        selections: u,
                                        storageKey:
                                            'milestones(first:0,states:"CLOSED")',
                                    },
                                    r,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "b30a6800da644ea67eaa34c3be0d8e62",
                        metadata: {},
                        name: "RepositoryMilestoneIndexPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            ez.hash = "4c594d6cda7c822ae3a150e0d07f1cbf";
            let eH = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    i = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    t = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    r = {
                        kind: "Variable",
                        name: "number",
                        variableName: "number",
                    },
                    o = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [k, h, d],
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    C = [
                        { kind: "Literal", name: "aggregations", value: !0 },
                        t,
                        o,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    S = [
                        { kind: "Literal", name: "first", value: 10 },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        concreteType: "PageInfo",
                        kind: "LinkedField",
                        name: "pageInfo",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "endCursor",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "hasNextPage",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: S,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            d,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            F,
                                            f,
                                            y,
                                            k,
                                        ],
                                        storageKey: null,
                                    },
                                    L,
                                ],
                                storageKey: null,
                            },
                            K,
                        ],
                        storageKey:
                            'labels(first:10,orderBy:{"direction":"ASC","field":"NAME"})',
                    },
                    I = {
                        alias: null,
                        args: S,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    x = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    w = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            h,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            k,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                            d,
                        ],
                        storageKey: null,
                    },
                    N = {
                        kind: "InlineFragment",
                        selections: [
                            v,
                            I,
                            _,
                            p,
                            c,
                            x,
                            w,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    j = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    R = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a, n, s],
                        kind: "Fragment",
                        metadata: null,
                        name: "RepositoryMilestonePageQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: [t, r, o],
                                        kind: "FragmentSpread",
                                        name: "RepositoryMilestonePageContentInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, n, a, e, s],
                        kind: "Operation",
                        name: "RepositoryMilestonePageQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    u,
                                    {
                                        alias: null,
                                        args: [r],
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            d,
                                            c,
                                            m,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [u, d],
                                                storageKey: null,
                                            },
                                            g,
                                            p,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "openIssueCount",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "closedIssueCount",
                                                storageKey: null,
                                            },
                                            y,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "descriptionHTML",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "progressPercentage",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "dueOn",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                    b,
                                    f,
                                    {
                                        alias: null,
                                        args: C,
                                        concreteType:
                                            "SearchResultItemConnection",
                                        kind: "LinkedField",
                                        name: "search",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueCount",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "SearchResultItemEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [
                                                            k,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    d,
                                                                    g,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "state",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    m,
                                                                    {
                                                                        alias: "titleHtml",
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "titleHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "IssueType",
                                                                        kind: "LinkedField",
                                                                        name: "issueType",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                d,
                                                                                f,
                                                                                F,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                N,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            v,
                                                                                            I,
                                                                                            _,
                                                                                            p,
                                                                                            c,
                                                                                            x,
                                                                                            w,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "reviewDecision",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            j,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isInMergeQueue",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            R,
                                                                                        ],
                                                                                    type: "PullRequest",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "IssueOrPullRequest",
                                                                        abstractKey:
                                                                            "__isIssueOrPullRequest",
                                                                    },
                                                                ],
                                                                type: "Issue",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    d,
                                                                    g,
                                                                    c,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                f,
                                                                                b,
                                                                                d,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    m,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "titleHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                N,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            v,
                                                                                            I,
                                                                                            _,
                                                                                            p,
                                                                                            x,
                                                                                            w,
                                                                                            j,
                                                                                            R,
                                                                                        ],
                                                                                    type: "PullRequest",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "IssueOrPullRequest",
                                                                        abstractKey:
                                                                            "__isIssueOrPullRequest",
                                                                    },
                                                                ],
                                                                type: "PullRequest",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [d],
                                                                type: "Node",
                                                                abstractKey:
                                                                    "__isNode",
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    L,
                                                ],
                                                storageKey: null,
                                            },
                                            K,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: C,
                                        filters: [
                                            "query",
                                            "type",
                                            "aggregations",
                                        ],
                                        handle: "connection",
                                        key: "MilestoneIssuesList_search",
                                        kind: "LinkedHandle",
                                        name: "search",
                                    },
                                    d,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isArchived",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isDisabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isLocked",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInOrganization",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "89cc468d7122d931bbade6e34486ea5c",
                        metadata: {},
                        name: "RepositoryMilestonePageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eH.hash = "07927d93bdf92cdd0e2ca99757fa9a70";
            let eW = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    l = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ClientSideRelayDataGeneratorQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ListCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueDetailCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ViewOptionsButtonCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "DashboardSearchCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueDashboardCustomViewPageCurrentViewFragment",
                                            },
                                        ],
                                        type: "Shortcutable",
                                        abstractKey: "__isShortcutable",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ClientSideRelayDataGeneratorQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    a,
                                    n,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            s,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "query",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "scopingRepository",
                                                plural: !1,
                                                selections: [
                                                    s,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [
                                                            a,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "login",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            n,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    n,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "icon",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "color",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Shortcutable",
                                        abstractKey: "__isShortcutable",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "d174fccd26c72c8f6cfa7e08b08f1e0f",
                        metadata: {},
                        name: "ClientSideRelayDataGeneratorQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eW.hash = "6e8de1e443c2c18d9ec8c0ab909308fe";
            var eG = a(69487);
            let eZ = (function () {
                var e = {
                        defaultValue: "",
                        kind: "LocalArgument",
                        name: "assigneeLogins",
                    },
                    l = {
                        defaultValue: 0,
                        kind: "LocalArgument",
                        name: "discussionNumber",
                    },
                    a = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "includeDiscussion",
                    },
                    n = {
                        defaultValue: "",
                        kind: "LocalArgument",
                        name: "labelNames",
                    },
                    s = {
                        defaultValue: "",
                        kind: "LocalArgument",
                        name: "milestoneTitle",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    t = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    r = {
                        defaultValue: [],
                        kind: "LocalArgument",
                        name: "projectNumbers",
                    },
                    o = {
                        defaultValue: "",
                        kind: "LocalArgument",
                        name: "templateFilter",
                    },
                    u = {
                        defaultValue: "",
                        kind: "LocalArgument",
                        name: "type",
                    },
                    d = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withAssignees",
                    },
                    c = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withLabels",
                    },
                    m = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withMilestone",
                    },
                    g = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withProjects",
                    },
                    p = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withTemplate",
                    },
                    y = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withTriagePermission",
                    },
                    k = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withType",
                    },
                    h = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    K = { kind: "Literal", name: "first", value: 20 },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    x = [
                        b,
                        v,
                        I,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        _,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanUpdate",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "hasReachedItemsLimit",
                            storageKey: null,
                        },
                        F,
                    ],
                    w = [
                        {
                            kind: "Variable",
                            name: "filename",
                            variableName: "templateFilter",
                        },
                    ],
                    N = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "filename",
                        storageKey: null,
                    },
                    j = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    R = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    P = [
                        b,
                        j,
                        C,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameHTML",
                            storageKey: null,
                        },
                        R,
                        _,
                    ],
                    T = {
                        alias: null,
                        args: [
                            K,
                            {
                                kind: "Literal",
                                name: "orderBy",
                                value: { direction: "ASC", field: "NAME" },
                            },
                        ],
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: P,
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey:
                            'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                    },
                    A = { kind: "Literal", name: "first", value: 10 },
                    M = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    V = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                    D = {
                        alias: null,
                        args: [A],
                        concreteType: "UserConnection",
                        kind: "LinkedField",
                        name: "assignees",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "UserEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "User",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            b,
                                            {
                                                kind: "InlineFragment",
                                                selections: [F, S, C, M, L, V],
                                                type: "Actor",
                                                abstractKey: "__isActor",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: "assignees(first:10)",
                    },
                    E = [
                        b,
                        C,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "dataType",
                            storageKey: null,
                        },
                    ],
                    q = [
                        b,
                        C,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isEnabled",
                            storageKey: null,
                        },
                        R,
                        j,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "pinnedFields",
                            plural: !0,
                            selections: [
                                F,
                                {
                                    kind: "InlineFragment",
                                    selections: E,
                                    type: "IssueFieldText",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: E,
                                    type: "IssueFieldSingleSelect",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: E,
                                    type: "IssueFieldDate",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: E,
                                    type: "IssueFieldNumber",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: [b],
                                    type: "Node",
                                    abstractKey: "__isNode",
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    O = {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "type",
                        plural: !1,
                        selections: q,
                        storageKey: null,
                    },
                    B = {
                        kind: "ClientExtension",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__id",
                                storageKey: null,
                            },
                        ],
                    },
                    $ = {
                        alias: "itemId",
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    Q = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "label",
                        storageKey: null,
                    },
                    U = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "descriptionHTML",
                        storageKey: null,
                    },
                    z = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "placeholder",
                        storageKey: null,
                    },
                    H = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "value",
                        storageKey: null,
                    },
                    W = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "required",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [
                            e,
                            l,
                            a,
                            n,
                            s,
                            i,
                            t,
                            r,
                            o,
                            u,
                            d,
                            c,
                            m,
                            g,
                            p,
                            y,
                            k,
                        ],
                        kind: "Fragment",
                        metadata: null,
                        name: "InternalIssueNewPageUrlArgumentsMetadataQuery",
                        selections: [
                            {
                                alias: null,
                                args: h,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "assigneeLogins",
                                                variableName: "assigneeLogins",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "discussionNumber",
                                                variableName:
                                                    "discussionNumber",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "includeDiscussion",
                                                variableName:
                                                    "includeDiscussion",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "labelNames",
                                                variableName: "labelNames",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "milestoneTitle",
                                                variableName: "milestoneTitle",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "projectNumbers",
                                                variableName: "projectNumbers",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "templateFilter",
                                                variableName: "templateFilter",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "type",
                                                variableName: "type",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withAssignees",
                                                variableName: "withAssignees",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withLabels",
                                                variableName: "withLabels",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withMilestone",
                                                variableName: "withMilestone",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withProjects",
                                                variableName: "withProjects",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withTemplate",
                                                variableName: "withTemplate",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withTriagePermission",
                                                variableName:
                                                    "withTriagePermission",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withType",
                                                variableName: "withType",
                                            },
                                        ],
                                        kind: "FragmentSpread",
                                        name: "InternalIssueNewPageUrlArgumentsMetadata",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [
                            t,
                            i,
                            d,
                            e,
                            c,
                            n,
                            m,
                            s,
                            u,
                            k,
                            g,
                            r,
                            y,
                            l,
                            a,
                            o,
                            p,
                        ],
                        kind: "Operation",
                        name: "InternalIssueNewPageUrlArgumentsMetadataQuery",
                        selections: [
                            {
                                alias: null,
                                args: h,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    b,
                                    f,
                                    C,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "owner",
                                        plural: !1,
                                        selections: [
                                            F,
                                            f,
                                            S,
                                            L,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueTypesEnabled",
                                                storageKey: null,
                                            },
                                            b,
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        condition:
                                                            "withProjects",
                                                        kind: "Condition",
                                                        passingValue: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: [
                                                                    K,
                                                                    {
                                                                        kind: "Variable",
                                                                        name: "numbers",
                                                                        variableName:
                                                                            "projectNumbers",
                                                                    },
                                                                ],
                                                                concreteType:
                                                                    "ProjectV2Connection",
                                                                kind: "LinkedField",
                                                                name: "projectsV2ByNumber",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "ProjectV2",
                                                                        kind: "LinkedField",
                                                                        name: "nodes",
                                                                        plural: !0,
                                                                        selections:
                                                                            x,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                    },
                                                ],
                                                type: "ProjectV2Owner",
                                                abstractKey:
                                                    "__isProjectV2Owner",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isLocked",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isPrivate",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "visibility",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isArchived",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInOrganization",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasIssuesEnabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasAnyTemplates",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "slashCommandsEnabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isBlankIssuesEnabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "action",
                                                value: "create an issue",
                                            },
                                        ],
                                        kind: "ScalarField",
                                        name: "viewerInteractionLimitReasonHTML",
                                        storageKey:
                                            'viewerInteractionLimitReasonHTML(action:"create an issue")',
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType:
                                            "IssueCreationPermissions",
                                        kind: "LinkedField",
                                        name: "viewerIssueCreationPermissions",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "labelable",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "milestoneable",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "assignable",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "triageable",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "typeable",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "canSetIssueFields",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "securityPolicyUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "contributingFileUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "codeOfConductFileUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "supportFileUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "shortDescriptionHTML",
                                        storageKey: null,
                                    },
                                    {
                                        condition: "withTemplate",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: w,
                                                concreteType: "IssueTemplate",
                                                kind: "LinkedField",
                                                name: "issueTemplate",
                                                plural: !1,
                                                selections: [
                                                    F,
                                                    C,
                                                    N,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "body",
                                                        storageKey: null,
                                                    },
                                                    v,
                                                    T,
                                                    D,
                                                    O,
                                                    B,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: w,
                                                concreteType: "IssueForm",
                                                kind: "LinkedField",
                                                name: "issueForm",
                                                plural: !1,
                                                selections: [
                                                    F,
                                                    C,
                                                    N,
                                                    v,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "elements",
                                                        plural: !0,
                                                        selections: [
                                                            F,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    $,
                                                                    Q,
                                                                    U,
                                                                    z,
                                                                    H,
                                                                    W,
                                                                    B,
                                                                ],
                                                                type: "IssueFormElementInput",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    $,
                                                                    Q,
                                                                    U,
                                                                    z,
                                                                    H,
                                                                    W,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "render",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    B,
                                                                ],
                                                                type: "IssueFormElementTextarea",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "contentHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "IssueFormElementMarkdown",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    $,
                                                                    Q,
                                                                    U,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "options",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    W,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "multiple",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: "defaultOptionIndex",
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "default",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    B,
                                                                ],
                                                                type: "IssueFormElementDropdown",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    $,
                                                                    Q,
                                                                    U,
                                                                    {
                                                                        alias: "checkboxOptions",
                                                                        args: null,
                                                                        concreteType:
                                                                            "IssueFormElementCheckboxOption",
                                                                        kind: "LinkedField",
                                                                        name: "options",
                                                                        plural: !0,
                                                                        selections:
                                                                            [
                                                                                Q,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "labelHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                W,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    B,
                                                                ],
                                                                type: "IssueFormElementCheckboxes",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    T,
                                                    D,
                                                    {
                                                        alias: null,
                                                        args: [K],
                                                        concreteType:
                                                            "ProjectV2Connection",
                                                        kind: "LinkedField",
                                                        name: "projects",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "ProjectV2Edge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "ProjectV2",
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            x,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey:
                                                            "projects(first:20)",
                                                    },
                                                    O,
                                                    B,
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                    {
                                        condition: "withAssignees",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "capabilities",
                                                        value: [
                                                            "CAN_BE_ASSIGNED",
                                                        ],
                                                    },
                                                    A,
                                                    {
                                                        kind: "Variable",
                                                        name: "loginNames",
                                                        variableName:
                                                            "assigneeLogins",
                                                    },
                                                ],
                                                concreteType: "ActorConnection",
                                                kind: "LinkedField",
                                                name: "suggestedActors",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            F,
                                                            {
                                                                kind: "TypeDiscriminator",
                                                                abstractKey:
                                                                    "__isActor",
                                                            },
                                                            b,
                                                            S,
                                                            C,
                                                            M,
                                                            L,
                                                            V,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                    {
                                        condition: "withLabels",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    K,
                                                    {
                                                        kind: "Variable",
                                                        name: "names",
                                                        variableName:
                                                            "labelNames",
                                                    },
                                                ],
                                                concreteType: "LabelConnection",
                                                kind: "LinkedField",
                                                name: "labels",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Label",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: P,
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                    {
                                        condition: "includeDiscussion",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Variable",
                                                        name: "number",
                                                        variableName:
                                                            "discussionNumber",
                                                    },
                                                ],
                                                concreteType: "Discussion",
                                                kind: "LinkedField",
                                                name: "discussion",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "formattedBody",
                                                        storageKey: null,
                                                    },
                                                    v,
                                                    T,
                                                    b,
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                    {
                                        condition: "withMilestone",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Variable",
                                                        name: "title",
                                                        variableName:
                                                            "milestoneTitle",
                                                    },
                                                ],
                                                concreteType: "Milestone",
                                                kind: "LinkedField",
                                                name: "milestoneByTitle",
                                                plural: !1,
                                                selections: [
                                                    b,
                                                    v,
                                                    I,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "dueOn",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "progressPercentage",
                                                        storageKey: null,
                                                    },
                                                    _,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "closedAt",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                    {
                                        condition: "withType",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Variable",
                                                        name: "name",
                                                        variableName: "type",
                                                    },
                                                ],
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: q,
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "1c1045a820233b0c7e6b9b135c45f09a",
                        metadata: {},
                        name: "InternalIssueNewPageUrlArgumentsMetadataQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eZ.hash = "0e2b0b1f573d6b277c23946014ca42d6";
            let eX = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "name",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "owner",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "filename",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "about",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueRepoNewChoosePageQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "IssueRepoNewChoosePageContentInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "IssueRepoNewChoosePageQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasIssuesEnabled",
                                        storageKey: null,
                                    },
                                    a,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueForm",
                                        kind: "LinkedField",
                                        name: "issueForms",
                                        plural: !0,
                                        selections: [
                                            n,
                                            s,
                                            i,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueTemplate",
                                        kind: "LinkedField",
                                        name: "issueTemplates",
                                        plural: !0,
                                        selections: [n, s, i, t],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isBlankIssuesEnabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isSecurityPolicyEnabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "securityPolicyUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "RepositoryContactLink",
                                        kind: "LinkedField",
                                        name: "contactLinks",
                                        plural: !0,
                                        selections: [
                                            i,
                                            t,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "url",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasAnyTemplates",
                                        storageKey: null,
                                    },
                                    i,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "owner",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "login",
                                                storageKey: null,
                                            },
                                            a,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "55090b23b3e86feda13b50a8ad6418f2",
                        metadata: {},
                        name: "IssueRepoNewChoosePageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eX.hash = "9eaefb1a635f0e0876360de04a93ab88";
            let eJ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueRepoNewChoosePageContentInternal",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "TemplateListPane",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "login",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            eJ.hash = "023af4405071cc40d83803475a49a94f";
            var eY = a(38102),
                e1 = a(77430),
                e2 = a(50167),
                e0 = a(90651),
                e3 = a(49246),
                e4 = a(47685),
                e5 = a(25407),
                e7 = a(96459),
                e6 = a(43755),
                e9 = a(57352),
                e8 = a(81960),
                le = a(87448);
            let ll = (e, l) => {
                let [a, n, s] = (0, er.useQueryLoader)(l, e);
                return { queryRef: a, loadQuery: n, disposeQuery: s };
            };
            var la = a(57224),
                ln = a(53627);
            let ls = { issue: "issue" },
                li = () => {
                    let {
                            owner: e,
                            repo: l,
                            number: a,
                            viewId: n,
                        } = (0, I.g)(),
                        [s, i] = (0, b.useState)(null),
                        t = (0, b.useCallback)((e) => {
                            let l = new URL(
                                window.location.href,
                                window.location.origin
                            );
                            (e
                                ? l.searchParams.set(
                                      ls.issue,
                                      `${e.owner}|${e.repo}|${e.number}`
                                  )
                                : l.searchParams.delete(ls.issue),
                                i(e),
                                (0, ln.kd)(l.toString()));
                        }, []);
                    (0, b.useEffect)(() => {
                        let e = new URL(
                            window.location.href,
                            window.location.origin
                        ).searchParams.get(ls.issue);
                        if (!e) return;
                        let [l, a, n] = e.split("|");
                        if (!(l && a && n)) return;
                        let s = isNaN(parseInt(n)) ? void 0 : parseInt(n);
                        s && i({ number: s, owner: l, repo: a, type: "Issue" });
                    }, []);
                    let r = s ? `/${s.owner}/${s.repo}/issues/${s.number}` : "",
                        o = (0, b.useMemo)(() => {
                            let n = a ? parseInt(a, 10) : void 0;
                            return (
                                n && n < 1 && (n = void 0),
                                e && l && n
                                    ? { owner: e, repo: l, number: n }
                                    : void 0
                            );
                        }, [a, e, l]),
                        u = (0, b.useCallback)(() => {
                            t(null);
                        }, [t]),
                        d = (0, b.useCallback)(
                            (e, l) =>
                                !!o &&
                                l.owner === o.owner &&
                                l.repo === o.repo &&
                                l.number === o.number &&
                                (e.preventDefault(), u(), !0),
                            [o, u]
                        );
                    return (
                        (0, b.useEffect)(() => {
                            function e() {
                                let e = new URL(
                                    window.location.href,
                                    window.location.origin
                                ).searchParams.get(ls.issue);
                                if (!e) return void i(null);
                                let [l, a, n] = e.split("|");
                                if (!(l && a && n)) return;
                                let s = isNaN(parseInt(n))
                                    ? void 0
                                    : parseInt(n);
                                s &&
                                    (l !== o?.owner ||
                                        a !== o?.repo ||
                                        s !== o?.number) &&
                                    i({
                                        number: s,
                                        owner: l,
                                        repo: a,
                                        type: "Issue",
                                    });
                            }
                            return (
                                window.addEventListener("popstate", e),
                                () => window.removeEventListener("popstate", e)
                            );
                        }, [o]),
                        {
                            itemIdentifier: o,
                            viewId: n,
                            sidePanelItemIdentifier: s,
                            setSidePanelItemIdentifier: t,
                            sidePanelItemURL: r,
                            onCloseSidePanel: u,
                            onParentIssueActivate: d,
                        }
                    );
                };
            function lt({ children: e, category: l }) {
                let { activeSearchQuery: a } = eM(),
                    { viewId: n } = li(),
                    s = (0, b.useMemo)(
                        () => ({ viewQuery: a, viewId: n || "" }),
                        [a, n]
                    );
                return (0, y.jsx)(la.y, {
                    appName: "issues-react",
                    category: l,
                    metadata: s,
                    children: e,
                });
            }
            try {
                lt.displayName || (lt.displayName = "AnalyticsWrapper");
            } catch {}
            let lr = {
                    createPane: "IssueCreatePane-module__createPane--F6n4N",
                    createPaneContainer:
                        "IssueCreatePane-module__createPaneContainer--foiCd",
                    header: "IssueCreatePane-module__header--LU6ZP",
                    avatarLink: "IssueCreatePane-module__avatarLink--eAjwa",
                    avatar: "IssueCreatePane-module__avatar--Rcsrp",
                },
                lo = ({ queries: { pageQuery: e } }) => {
                    let { queryRef: l } = ll(e, eX);
                    return l
                        ? (0, y.jsx)(lt, {
                              category: "Repository Issue Create",
                              children: (0, y.jsx)(lu, { pageQueryRef: l }),
                          })
                        : null;
                };
            function lu({ pageQueryRef: e }) {
                let l = (0, er.usePreloadedQuery)(eX, e);
                return l.repository
                    ? (0, y.jsx)(ld, { repository: l.repository })
                    : ((0, eY.N7)(
                          Error(
                              `Could not find repository when loading TemplateList for ${A.fV?.href.toString()}`
                          )
                      ),
                      (0, y.jsx)("div", { children: "Repository not found" }));
            }
            function ld({ repository: e }) {
                let { currentUser: l } = (0, e6.J)(),
                    a = (0, e7.Z)(),
                    n = (0, er.useFragment)(eJ, e),
                    s = (0, e0.S)({
                        defaultDisplayMode: e2.q.TemplatePicker,
                        insidePortal: !1,
                        canBypassTemplateSelection: !0,
                        navigate: a,
                        issueCreateArguments: {
                            repository: { owner: n.owner.login, name: n.name },
                        },
                    });
                if (!l)
                    return (0, y.jsx)("div", {
                        children: "Current user not found",
                    });
                let { avatarUrl: i, login: t } = l;
                return (0, y.jsx)(e3.S, {
                    optionConfig: s,
                    preselectedData: void 0,
                    children: (0, y.jsxs)("div", {
                        className: lr.createPane,
                        children: [
                            (0, y.jsxs)(e9.A, {
                                href: `/${t}`,
                                className: lr.avatarLink,
                                children: [
                                    (0, y.jsx)("span", {
                                        className: "sr-only",
                                        children: U.viewProfile(t),
                                    }),
                                    (0, y.jsx)(e1.r, {
                                        src: i,
                                        size: 32,
                                        alt: "",
                                        "data-hovercard-url": (0, e5.dCN)({
                                            owner: t,
                                        }),
                                        className: lr.avatar,
                                    }),
                                ],
                            }),
                            (0, y.jsxs)("div", {
                                className: lr.createPaneContainer,
                                "data-testid": "issue-create-pane-container",
                                "data-hpc": !0,
                                children: [
                                    (0, y.jsx)(e8.A, {
                                        as: "h1",
                                        className: lr.header,
                                        children: U.issueCreatePaneTitle,
                                    }),
                                    (0, y.jsx)(le.az, {
                                        sx: {
                                            display: "flex",
                                            flexDirection: "column",
                                            alignItems: "stretch",
                                            gap: 2,
                                        },
                                        tabIndex: -1,
                                        "data-hpc": !0,
                                        children: (0, y.jsx)(e4.e, {
                                            repository: n,
                                        }),
                                    }),
                                ],
                            }),
                        ],
                    }),
                });
            }
            try {
                lu.displayName ||
                    (lu.displayName = "IssueRepoNewChoosePageContent");
            } catch {}
            try {
                ld.displayName ||
                    (ld.displayName = "IssueRepoNewChoosePageContentInternal");
            } catch {}
            let lc = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    n = { kind: "Literal", name: "first", value: 20 },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    r = [
                        {
                            kind: "InlineDataFragmentSpread",
                            name: "LabelPickerLabel",
                            selections: [
                                l,
                                s,
                                a,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameHTML",
                                    storageKey: null,
                                },
                                i,
                                t,
                            ],
                            args: null,
                            argumentDefinitions: [],
                        },
                    ],
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    d = [
                        l,
                        a,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "dataType",
                            storageKey: null,
                        },
                    ];
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: "",
                            kind: "LocalArgument",
                            name: "assigneeLogins",
                        },
                        {
                            defaultValue: 0,
                            kind: "LocalArgument",
                            name: "discussionNumber",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "includeDiscussion",
                        },
                        {
                            defaultValue: "",
                            kind: "LocalArgument",
                            name: "labelNames",
                        },
                        {
                            defaultValue: "",
                            kind: "LocalArgument",
                            name: "milestoneTitle",
                        },
                        {
                            defaultValue: [],
                            kind: "LocalArgument",
                            name: "projectNumbers",
                        },
                        {
                            defaultValue: "",
                            kind: "LocalArgument",
                            name: "templateFilter",
                        },
                        {
                            defaultValue: "",
                            kind: "LocalArgument",
                            name: "type",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withAssignees",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withLabels",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withMilestone",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withProjects",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withTemplate",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withTriagePermission",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withType",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "InternalIssueNewPageUrlArgumentsMetadata",
                    selections: [
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "templateFilter",
                                    variableName: "templateFilter",
                                },
                                {
                                    kind: "Variable",
                                    name: "withTemplate",
                                    variableName: "withTemplate",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "IssueCreatePage",
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "IssueCreationPermissions",
                            kind: "LinkedField",
                            name: "viewerIssueCreationPermissions",
                            plural: !1,
                            selections: [
                                {
                                    condition: "withAssignees",
                                    kind: "Condition",
                                    passingValue: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "assignable",
                                            storageKey: null,
                                        },
                                    ],
                                },
                                {
                                    condition: "withLabels",
                                    kind: "Condition",
                                    passingValue: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "labelable",
                                            storageKey: null,
                                        },
                                    ],
                                },
                                {
                                    condition: "withMilestone",
                                    kind: "Condition",
                                    passingValue: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "milestoneable",
                                            storageKey: null,
                                        },
                                    ],
                                },
                                {
                                    condition: "withTriagePermission",
                                    kind: "Condition",
                                    passingValue: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "triageable",
                                            storageKey: null,
                                        },
                                    ],
                                },
                                {
                                    condition: "withType",
                                    kind: "Condition",
                                    passingValue: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "typeable",
                                            storageKey: null,
                                        },
                                    ],
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            condition: "withAssignees",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Literal",
                                            name: "capabilities",
                                            value: ["CAN_BE_ASSIGNED"],
                                        },
                                        {
                                            kind: "Literal",
                                            name: "first",
                                            value: 10,
                                        },
                                        {
                                            kind: "Variable",
                                            name: "loginNames",
                                            variableName: "assigneeLogins",
                                        },
                                    ],
                                    concreteType: "ActorConnection",
                                    kind: "LinkedField",
                                    name: "suggestedActors",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "nodes",
                                            plural: !0,
                                            selections: [
                                                {
                                                    kind: "InlineDataFragmentSpread",
                                                    name: "AssigneePickerSharedAssignee",
                                                    selections: [
                                                        e,
                                                        l,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "login",
                                                            storageKey: null,
                                                        },
                                                        a,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "profileResourcePath",
                                                            storageKey: null,
                                                        },
                                                        {
                                                            alias: null,
                                                            args: [
                                                                {
                                                                    kind: "Literal",
                                                                    name: "size",
                                                                    value: 64,
                                                                },
                                                            ],
                                                            kind: "ScalarField",
                                                            name: "avatarUrl",
                                                            storageKey:
                                                                "avatarUrl(size:64)",
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "isCopilot",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "Bot",
                                                            abstractKey: null,
                                                        },
                                                    ],
                                                    args: null,
                                                    argumentDefinitions: [],
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            condition: "withLabels",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: [
                                        n,
                                        {
                                            kind: "Variable",
                                            name: "names",
                                            variableName: "labelNames",
                                        },
                                    ],
                                    concreteType: "LabelConnection",
                                    kind: "LinkedField",
                                    name: "labels",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Label",
                                            kind: "LinkedField",
                                            name: "nodes",
                                            plural: !0,
                                            selections: r,
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            condition: "includeDiscussion",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Variable",
                                            name: "number",
                                            variableName: "discussionNumber",
                                        },
                                    ],
                                    concreteType: "Discussion",
                                    kind: "LinkedField",
                                    name: "discussion",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "formattedBody",
                                            storageKey: null,
                                        },
                                        o,
                                        {
                                            alias: null,
                                            args: [
                                                n,
                                                {
                                                    kind: "Literal",
                                                    name: "orderBy",
                                                    value: {
                                                        direction: "ASC",
                                                        field: "NAME",
                                                    },
                                                },
                                            ],
                                            concreteType: "LabelConnection",
                                            kind: "LinkedField",
                                            name: "labels",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "LabelEdge",
                                                    kind: "LinkedField",
                                                    name: "edges",
                                                    plural: !0,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "Label",
                                                            kind: "LinkedField",
                                                            name: "node",
                                                            plural: !1,
                                                            selections: r,
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey:
                                                'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            condition: "withMilestone",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Variable",
                                            name: "title",
                                            variableName: "milestoneTitle",
                                        },
                                    ],
                                    concreteType: "Milestone",
                                    kind: "LinkedField",
                                    name: "milestoneByTitle",
                                    plural: !1,
                                    selections: [
                                        l,
                                        o,
                                        u,
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "dueOn",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "progressPercentage",
                                            storageKey: null,
                                        },
                                        t,
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "closedAt",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            condition: "withType",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Variable",
                                            name: "name",
                                            variableName: "type",
                                        },
                                    ],
                                    concreteType: "IssueType",
                                    kind: "LinkedField",
                                    name: "issueType",
                                    plural: !1,
                                    selections: [
                                        {
                                            kind: "InlineDataFragmentSpread",
                                            name: "IssueTypePickerIssueTypeShared",
                                            selections: [
                                                l,
                                                a,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "isEnabled",
                                                    storageKey: null,
                                                },
                                                i,
                                                s,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: null,
                                                    kind: "LinkedField",
                                                    name: "pinnedFields",
                                                    plural: !0,
                                                    selections: [
                                                        e,
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: d,
                                                            type: "IssueFieldText",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: d,
                                                            type: "IssueFieldSingleSelect",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: d,
                                                            type: "IssueFieldDate",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: d,
                                                            type: "IssueFieldNumber",
                                                            abstractKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                            ],
                                            args: null,
                                            argumentDefinitions: [],
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "owner",
                            plural: !1,
                            selections: [
                                {
                                    kind: "InlineFragment",
                                    selections: [
                                        {
                                            condition: "withProjects",
                                            kind: "Condition",
                                            passingValue: !0,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: [
                                                        n,
                                                        {
                                                            kind: "Variable",
                                                            name: "numbers",
                                                            variableName:
                                                                "projectNumbers",
                                                        },
                                                    ],
                                                    concreteType:
                                                        "ProjectV2Connection",
                                                    kind: "LinkedField",
                                                    name: "projectsV2ByNumber",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "ProjectV2",
                                                            kind: "LinkedField",
                                                            name: "nodes",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    kind: "InlineDataFragmentSpread",
                                                                    name: "ProjectPickerRelay",
                                                                    selections:
                                                                        [
                                                                            l,
                                                                            o,
                                                                            u,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "number",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            t,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "viewerCanUpdate",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "hasReachedItemsLimit",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            e,
                                                                        ],
                                                                    args: null,
                                                                    argumentDefinitions:
                                                                        [],
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                            ],
                                        },
                                    ],
                                    type: "ProjectV2Owner",
                                    abstractKey: "__isProjectV2Owner",
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            lc.hash = "e5427e030e674193805d7d5a6b2b23b6";
            let lm = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasAnyTemplates",
                        storageKey: null,
                    },
                    t = [
                        {
                            kind: "Variable",
                            name: "filename",
                            variableName: "filename",
                        },
                    ],
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "filename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    d = { kind: "Literal", name: "first", value: 20 },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: [
                            d,
                            {
                                kind: "Literal",
                                name: "orderBy",
                                value: { direction: "ASC", field: "NAME" },
                            },
                        ],
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            {
                                                kind: "InlineDataFragmentSpread",
                                                name: "LabelPickerLabel",
                                                selections: [
                                                    e,
                                                    c,
                                                    a,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "nameHTML",
                                                        storageKey: null,
                                                    },
                                                    m,
                                                    g,
                                                ],
                                                args: null,
                                                argumentDefinitions: [],
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey:
                            'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                    },
                    y = {
                        alias: null,
                        args: [{ kind: "Literal", name: "first", value: 10 }],
                        concreteType: "UserConnection",
                        kind: "LinkedField",
                        name: "assignees",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "UserEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "User",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            {
                                                kind: "InlineDataFragmentSpread",
                                                name: "AssigneePickerSharedAssignee",
                                                selections: [
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            r,
                                                            e,
                                                            n,
                                                            a,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "profileResourcePath",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            s,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "isCopilot",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "Bot",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                        ],
                                                        type: "Actor",
                                                        abstractKey:
                                                            "__isActor",
                                                    },
                                                ],
                                                args: null,
                                                argumentDefinitions: [],
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: "assignees(first:10)",
                    },
                    k = [
                        e,
                        a,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "dataType",
                            storageKey: null,
                        },
                    ],
                    h = {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "type",
                        plural: !1,
                        selections: [
                            {
                                kind: "InlineDataFragmentSpread",
                                name: "IssueTypePickerIssueTypeShared",
                                selections: [
                                    e,
                                    a,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isEnabled",
                                        storageKey: null,
                                    },
                                    m,
                                    c,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "pinnedFields",
                                        plural: !0,
                                        selections: [
                                            r,
                                            {
                                                kind: "InlineFragment",
                                                selections: k,
                                                type: "IssueFieldText",
                                                abstractKey: null,
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: k,
                                                type: "IssueFieldSingleSelect",
                                                abstractKey: null,
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: k,
                                                type: "IssueFieldDate",
                                                abstractKey: null,
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: k,
                                                type: "IssueFieldNumber",
                                                abstractKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                args: null,
                                argumentDefinitions: [],
                            },
                        ],
                        storageKey: null,
                    },
                    b = {
                        kind: "ClientExtension",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__id",
                                storageKey: null,
                            },
                        ],
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: "",
                            kind: "LocalArgument",
                            name: "templateFilter",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withTemplate",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueCreatePage",
                    selections: [
                        {
                            kind: "InlineDataFragmentSpread",
                            name: "RepositoryPickerRepository",
                            selections: [
                                e,
                                l,
                                a,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        l,
                                        n,
                                        s,
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "issueTypesEnabled",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isLocked",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isPrivate",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "visibility",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isArchived",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isInOrganization",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "hasIssuesEnabled",
                                    storageKey: null,
                                },
                                i,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "slashCommandsEnabled",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "viewerCanPush",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isBlankIssuesEnabled",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Literal",
                                            name: "action",
                                            value: "create an issue",
                                        },
                                    ],
                                    kind: "ScalarField",
                                    name: "viewerInteractionLimitReasonHTML",
                                    storageKey:
                                        'viewerInteractionLimitReasonHTML(action:"create an issue")',
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "IssueCreationPermissions",
                                    kind: "LinkedField",
                                    name: "viewerIssueCreationPermissions",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "labelable",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "milestoneable",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "assignable",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "triageable",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "typeable",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "canSetIssueFields",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "securityPolicyUrl",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "contributingFileUrl",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "codeOfConductFileUrl",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "supportFileUrl",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "shortDescriptionHTML",
                                    storageKey: null,
                                },
                            ],
                            args: null,
                            argumentDefinitions: [],
                        },
                        a,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "owner",
                            plural: !1,
                            selections: [n],
                            storageKey: null,
                        },
                        i,
                        {
                            condition: "withTemplate",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    kind: "InlineDataFragmentSpread",
                                    name: "useHandleTemplateChange",
                                    selections: [
                                        {
                                            alias: null,
                                            args: t,
                                            concreteType: "IssueTemplate",
                                            kind: "LinkedField",
                                            name: "issueTemplate",
                                            plural: !1,
                                            selections: [
                                                {
                                                    kind: "InlineDataFragmentSpread",
                                                    name: "useHandleTemplateChangeIssueTemplate",
                                                    selections: [
                                                        r,
                                                        a,
                                                        o,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "body",
                                                            storageKey: null,
                                                        },
                                                        u,
                                                        p,
                                                        y,
                                                        h,
                                                        b,
                                                    ],
                                                    args: null,
                                                    argumentDefinitions: [],
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: t,
                                            concreteType: "IssueForm",
                                            kind: "LinkedField",
                                            name: "issueForm",
                                            plural: !1,
                                            selections: [
                                                {
                                                    kind: "InlineDataFragmentSpread",
                                                    name: "useHandleTemplateChangeIssueForm",
                                                    selections: [
                                                        r,
                                                        a,
                                                        o,
                                                        u,
                                                        {
                                                            kind: "InlineDataFragmentSpread",
                                                            name: "IssueFormElements_templateElements",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "elements",
                                                                    plural: !0,
                                                                    selections:
                                                                        [
                                                                            r,
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            args: null,
                                                                                            kind: "FragmentSpread",
                                                                                            name: "TextInputElement_input",
                                                                                        },
                                                                                    ],
                                                                                type: "IssueFormElementInput",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            args: null,
                                                                                            kind: "FragmentSpread",
                                                                                            name: "TextAreaElement_input",
                                                                                        },
                                                                                    ],
                                                                                type: "IssueFormElementTextarea",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            args: null,
                                                                                            kind: "FragmentSpread",
                                                                                            name: "MarkdownElement_input",
                                                                                        },
                                                                                    ],
                                                                                type: "IssueFormElementMarkdown",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            args: null,
                                                                                            kind: "FragmentSpread",
                                                                                            name: "DropdownElement_input",
                                                                                        },
                                                                                    ],
                                                                                type: "IssueFormElementDropdown",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            args: null,
                                                                                            kind: "FragmentSpread",
                                                                                            name: "CheckboxesElement_input",
                                                                                        },
                                                                                    ],
                                                                                type: "IssueFormElementCheckboxes",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            args: null,
                                                            argumentDefinitions:
                                                                [],
                                                        },
                                                        p,
                                                        y,
                                                        {
                                                            alias: null,
                                                            args: [d],
                                                            concreteType:
                                                                "ProjectV2Connection",
                                                            kind: "LinkedField",
                                                            name: "projects",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "ProjectV2Edge",
                                                                    kind: "LinkedField",
                                                                    name: "edges",
                                                                    plural: !0,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    "ProjectV2",
                                                                                kind: "LinkedField",
                                                                                name: "node",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            kind: "InlineDataFragmentSpread",
                                                                                            name: "ProjectPickerRelay",
                                                                                            selections:
                                                                                                [
                                                                                                    e,
                                                                                                    u,
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "closed",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "number",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    g,
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "viewerCanUpdate",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "hasReachedItemsLimit",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    r,
                                                                                                ],
                                                                                            args: null,
                                                                                            argumentDefinitions:
                                                                                                [],
                                                                                        },
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey:
                                                                "projects(first:20)",
                                                        },
                                                        h,
                                                        b,
                                                    ],
                                                    args: null,
                                                    argumentDefinitions: [],
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    args: [
                                        {
                                            kind: "Variable",
                                            name: "filename",
                                            variableName: "templateFilter",
                                        },
                                    ],
                                    argumentDefinitions: [
                                        {
                                            defaultValue: "",
                                            kind: "LocalArgument",
                                            name: "filename",
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            lm.hash = "22ff6992a96ef2cde9444260d48f9173";
            var lg = a(16654),
                lp = a(98338),
                ly = a(96480),
                lk = a(17831);
            let lh = (0, b.createContext)(null);
            try {
                lh.displayName ||
                    (lh.displayName = "IssueCreateInitialValuesContext");
            } catch {}
            try {
                (n = function ({
                    title: e,
                    body: l,
                    repository: a,
                    owner: n,
                    template: s,
                    labels: i,
                    assignees: t,
                    projects: r,
                    milestone: o,
                    issueType: u,
                    children: d,
                }) {
                    let c = (0, b.useMemo)(
                        () => ({
                            title: e,
                            body: l,
                            repository: a,
                            owner: n,
                            template: s,
                            labels: i,
                            assignees: t,
                            projects: r,
                            milestone: o,
                            issueType: u,
                        }),
                        [e, l, a, n, s, i, t, r, o, u]
                    );
                    return (0, y.jsx)(lh.Provider, { value: c, children: d });
                }).displayName ||
                    (n.displayName = "IssueCreateInitialValuesContextProvider");
            } catch {}
            var lb = a(58335),
                lf = a(99726),
                lC = a(3872);
            let lF = {
                createPane: "IssueCreatePage-module__createPane--Q_PoE",
                createPaneContainer:
                    "IssueCreatePage-module__createPaneContainer--WGwnt",
                avatarLink: "IssueCreatePage-module__avatarLink--kwivO",
                avatar: "IssueCreatePage-module__avatar--aBlRQ",
                chooseTemplateLink:
                    "IssueCreatePage-module__chooseTemplateLink--AvO0e",
                IssueCreatePageHeading:
                    "IssueCreatePage-module__IssueCreatePageHeading--hPdXa",
                IssueCreatePageContainer:
                    "IssueCreatePage-module__IssueCreatePageContainer--flXup",
            };
            var lS = a(94007);
            let lL = ({
                templateName: e,
                nameWithOwner: l,
                issueFormRef: a,
            }) => {
                let n = (0, e7.Z)(),
                    { usedStorageKeyPrefix: s } = (0, lk.u)(),
                    { onSafeClose: i } = (0, lC.Z)({
                        storageKeyPrefix: s,
                        issueFormRef: a,
                        onCancel: () => {
                            n((0, lS.TV)(l));
                        },
                    });
                return (0, y.jsxs)("div", {
                    style: {
                        display: "flex",
                        flexDirection: "row",
                        alignItems: "center",
                        gap: 2,
                        marginBottom: 2,
                    },
                    children: [
                        (0, y.jsx)("span", {
                            className: "fgColor-muted",
                            children: e || lp.k.blankIssueName,
                        }),
                        " \xb7",
                        (0, y.jsx)(e9.A, {
                            inline: !1,
                            onClick: i,
                            className: lF.chooseTemplateLink,
                            children: lp.k.issueCreateChooseDiffTemplate,
                        }),
                    ],
                });
            };
            try {
                lL.displayName || (lL.displayName = "DifferentTemplateLink");
            } catch {}
            var lK = a(94252),
                lv = a(93997),
                lI = a(35669);
            let l_ = ({
                    initialMetadataValues: e,
                    currentRepository: l,
                    storageKeyPrefix: a,
                    emojiSkinTonePreference: n,
                    singleKeyShortcutsEnabled: s,
                    copilotShowFunctionality: i,
                }) => {
                    let t = (0, er.useFragment)(lm, l),
                        [r] = (0, I.ok)(),
                        o = !!r.get("template"),
                        u = (0, lg.Jo)(t),
                        { currentUser: d } = (0, e6.J)(),
                        c = (() => {
                            let e = (0, b.useContext)(lh);
                            return e || {};
                        })(),
                        m = {
                            storageKeyPrefix: a,
                            singleKeyShortcutsEnabled: s,
                            emojiSkinTonePreference: n,
                            copilotShowFunctionality: i,
                            issueCreateArguments: {
                                ...(0, lI.mZ)(r, e, c),
                                repository: {
                                    owner: t.owner.login,
                                    name: t.name,
                                },
                            },
                            insidePortal: !1,
                        },
                        g = (0, e0.S)(m),
                        p = o ? (0, lv.EV)(t) : void 0,
                        k = (0, b.useRef)(null),
                        h = (0, b.useMemo)(
                            () =>
                                !!u.viewerInteractionLimitReasonHTML &&
                                u.viewerInteractionLimitReasonHTML.length > 0,
                            [u.viewerInteractionLimitReasonHTML]
                        );
                    if (!d)
                        return (
                            reportError(
                                Error(
                                    `Could not find the current user when loading IssueCreatePage for ${A.fV?.href.toString()}`
                                )
                            ),
                            (0, y.jsx)("div", {
                                children: "Current user not found",
                            })
                        );
                    let { avatarUrl: f, login: C } = d;
                    return (0, y.jsx)(e3.S, {
                        optionConfig: g,
                        preselectedData: { repository: u, template: p },
                        children: (0, y.jsxs)("div", {
                            className: lF.createPane,
                            children: [
                                (0, y.jsxs)(e9.A, {
                                    href: `/${C}`,
                                    className: lF.avatarLink,
                                    children: [
                                        (0, y.jsx)("span", {
                                            className: "sr-only",
                                            children: lp.k.viewProfile(C),
                                        }),
                                        (0, y.jsx)(e1.r, {
                                            src: f,
                                            size: 32,
                                            alt: "",
                                            "data-hovercard-url": (0, e5.dCN)({
                                                owner: C,
                                            }),
                                            className: lF.avatar,
                                        }),
                                    ],
                                }),
                                (0, y.jsxs)("div", {
                                    className: lF.createPaneContainer,
                                    "data-testid":
                                        "issue-create-pane-container",
                                    children: [
                                        (0, y.jsxs)("div", {
                                            style: {
                                                display: "flex",
                                                flexDirection: "column",
                                                alignItems: "flexStart",
                                                marginBottom: p ? 4 : 12,
                                                position: "relative",
                                                top: p ? "-10px" : 0,
                                            },
                                            children: [
                                                (0, y.jsx)(e8.A, {
                                                    as: "h2",
                                                    id: "issue-create-pane-title",
                                                    className:
                                                        lF.IssueCreatePageHeading,
                                                    children:
                                                        lp.k
                                                            .issueCreateDialogTitleTemplatePane,
                                                }),
                                                t.hasAnyTemplates &&
                                                    !h &&
                                                    (0, y.jsx)(lL, {
                                                        nameWithOwner:
                                                            u.nameWithOwner,
                                                        templateName: p?.name,
                                                        issueFormRef: k,
                                                    }),
                                            ],
                                        }),
                                        (0, y.jsx)("div", {
                                            tabIndex: -1,
                                            className:
                                                lF.IssueCreatePageContainer,
                                            children: (0, y.jsx)(lx, {
                                                template: p,
                                                repository: u,
                                                optionConfig: g,
                                                issueFormRef: k,
                                                showUserRestrictedView: h,
                                            }),
                                        }),
                                    ],
                                }),
                            ],
                        }),
                    });
                },
                lx = ({
                    template: e,
                    issueFormRef: l,
                    repository: a,
                    optionConfig: n,
                    showUserRestrictedView: s,
                }) => {
                    let i = (0, I.Zp)(),
                        t = n.navigate || i,
                        { setDisplayMode: r, setCreateMoreCreatedPath: o } = (0,
                        ly.a)(),
                        {
                            title: u,
                            setTitle: d,
                            body: c,
                            setBody: m,
                            clearSessionData: g,
                            usedStorageKeyPrefix: p,
                        } = (0, lk.u)(),
                        k = (0, lv.wT)({
                            optionConfig: n,
                            repository: a,
                            navigate: t,
                            setDisplayMode: r,
                        }),
                        h = (0, lK.K)({
                            issueFormRef: l,
                            handleTemplateChange: k,
                            navigate: t,
                            template: e,
                        }),
                        { onSafeClose: f } = (0, lC.Z)({
                            storageKeyPrefix: p || "",
                            issueFormRef: l,
                            onCancel: () => {
                                (0, ln.OE)();
                            },
                        });
                    return (
                        (0, b.useEffect)(() => {
                            o({
                                owner: a.owner.login,
                                repo: a.name,
                                number: void 0,
                            });
                        }, [a, o]),
                        (0, y.jsx)(lf.e, {
                            issueFormRef: l,
                            onCreateSuccess: h,
                            onCreateError: K.l,
                            onCancel: f,
                            selectedTemplate: e,
                            repository: a,
                            title: u,
                            setTitle: d,
                            body: c,
                            setBody: m,
                            clearOnCreate: g,
                            focusTitleInput: !0,
                            footer: (0, y.jsx)(lb.l, { onClose: f }),
                            showUserRestrictedView: s,
                        })
                    );
                };
            try {
                l_.displayName || (l_.displayName = "IssueCreatePage");
            } catch {}
            try {
                lx.displayName || (lx.displayName = "IssueCreatePageInternal");
            } catch {}
            var lw = a(53855),
                lN = a(36202),
                lj = a(65990),
                lR = a(84172);
            let lP = ({ urlParameterQueryData: e }) => {
                    let l = (0, er.usePreloadedQuery)(eZ, e)?.repository;
                    return l
                        ? (0, y.jsx)(lT, { repository: l })
                        : (0, y.jsx)("div", {
                              children: "Repository not found",
                          });
                },
                lT = ({ repository: e }) => {
                    let l = (0, v.X)(),
                        a = (0, er.useFragment)(lc, e),
                        n = a?.suggestedActors?.nodes,
                        s =
                            n && a.viewerIssueCreationPermissions?.assignable
                                ? n.flatMap((e) => (e ? [(0, lw.uX)(e)] : []))
                                : void 0,
                        i = a?.labels?.nodes,
                        t =
                            i && a.viewerIssueCreationPermissions?.labelable
                                ? i.flatMap((e) => (e ? [(0, lj.P5)(e)] : []))
                                : void 0,
                        r = a?.owner?.projectsV2ByNumber?.nodes,
                        o =
                            r && a.viewerIssueCreationPermissions?.triageable
                                ? r.flatMap((e) => (e ? [(0, lR.Kx)(e)] : []))
                                : void 0,
                        u =
                            a?.milestoneByTitle &&
                            a.viewerIssueCreationPermissions?.milestoneable
                                ? a?.milestoneByTitle
                                : void 0,
                        d =
                            a?.issueType &&
                            a.viewerIssueCreationPermissions?.triageable &&
                            a.viewerIssueCreationPermissions?.typeable
                                ? (0, lN.iO)(a?.issueType)
                                : void 0,
                        c = a?.discussion
                            ? {
                                  title: a.discussion.title,
                                  formattedBody: a.discussion.formattedBody,
                                  labels: a.discussion.labels?.edges?.flatMap(
                                      (e) =>
                                          e?.node ? [(0, lj.P5)(e?.node)] : []
                                  ),
                              }
                            : void 0,
                        m = {
                            ...(void 0 !== s && { assignees: s }),
                            ...(void 0 !== t && { labels: t }),
                            ...(void 0 !== u && { milestone: u }),
                            ...(void 0 !== o && { projects: o }),
                            ...(void 0 !== d && { type: d }),
                            ...(void 0 !== c && { discussion: c }),
                        },
                        g = E.storageKeyPrefix(l),
                        p = l?.current_user_settings?.preferred_emoji_skin_tone,
                        k =
                            l?.current_user_settings?.use_single_key_shortcut ||
                            !1,
                        h =
                            l?.current_user_settings
                                ?.copilot_show_functionality || !1;
                    return (0, y.jsx)(l_, {
                        initialMetadataValues: m,
                        storageKeyPrefix: g,
                        emojiSkinTonePreference: p,
                        singleKeyShortcutsEnabled: k,
                        copilotShowFunctionality: h,
                        currentRepository: a,
                    });
                };
            try {
                lP.displayName ||
                    (lP.displayName = "InternalIssueNewPageWithUrlParams");
            } catch {}
            try {
                lT.displayName ||
                    (lT.displayName =
                        "InternalIssueNewPageWithUrlParamsInternal");
            } catch {}
            let lA = ({ queries: { pageQuery: e } }) => {
                    let { queryRef: l } = ll(e, eZ);
                    return l
                        ? (0, y.jsx)(lt, {
                              category: "Repository Issue Create",
                              children: (0, y.jsx)(lP, {
                                  urlParameterQueryData: l,
                              }),
                          })
                        : null;
                },
                lM = {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "fetchRepository",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "labelPageSize",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "query",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "skip",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueDashboardCustomViewPageSearchListFragment",
                    selections: [
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "fetchRepository",
                                    variableName: "fetchRepository",
                                },
                                {
                                    kind: "Variable",
                                    name: "first",
                                    variableName: "first",
                                },
                                {
                                    kind: "Variable",
                                    name: "labelPageSize",
                                    variableName: "labelPageSize",
                                },
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "query",
                                },
                                {
                                    kind: "Variable",
                                    name: "skip",
                                    variableName: "skip",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "DashboardSearchFragment",
                        },
                    ],
                    type: "Searchable",
                    abstractKey: "__isSearchable",
                };
            lM.hash = "8ffa7642e54448af5beab6dd8d9e3bcf";
            let lV = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueDashboardCustomViewPageCurrentViewFragment",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "HeaderCurrentViewFragment",
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            lV.hash = "a93246eb19a6ce78ccda6b3c1177859f";
            var lD = a(16070),
                lE = a(42789),
                lq = a(96747),
                lO = a(96628);
            let lB = {
                ThreePanesLayout:
                    "ThreePanesLayout-module__ThreePanesLayout--Tq4hI",
                ThreePanesLayoutLeftPane:
                    "ThreePanesLayout-module__ThreePanesLayoutLeftPane--c0ekV",
                ThreePanesLayoutNested:
                    "ThreePanesLayout-module__ThreePanesLayoutNested--Xrv6V",
                ThreePanesLayoutMiddlePane:
                    "ThreePanesLayout-module__ThreePanesLayoutMiddlePane--kwi51",
                ThreePanesLayoutMiddleOnlyPane:
                    "ThreePanesLayout-module__ThreePanesLayoutMiddleOnlyPane--uNVJC",
            };
            function l$({
                leftPane: e,
                middlePane: l,
                contentAs: a,
                rightPane: n,
                rightPanePadding: s = !0,
                rightPaneAs: i,
                resizeable: t = !0,
                leftPaneWidth: r = "large",
            }) {
                return (0, y.jsxs)(lO.M, {
                    containerWidth: "full",
                    columnGap: "none",
                    className: lB.ThreePanesLayout,
                    children: [
                        e &&
                            (0, y.jsx)(lO.M.Pane, {
                                width: r,
                                position: "start",
                                divider: "line",
                                padding: "none",
                                resizable: t,
                                widthStorageKey: "hyperlist.pane-sidewidth",
                                "aria-label": e.ariaLabel,
                                className: lB.ThreePanesLayoutLeftPane,
                                children: e.element,
                            }),
                        (0, y.jsx)(lO.M.Content, {
                            as: a,
                            children: n
                                ? (0, y.jsxs)(lO.M, {
                                      containerWidth: "full",
                                      columnGap: "none",
                                      className: lB.ThreePanesLayoutNested,
                                      children: [
                                          l &&
                                              (0, y.jsx)(lO.M.Pane, {
                                                  width: "large",
                                                  divider: "line",
                                                  resizable: t,
                                                  widthStorageKey:
                                                      "hyperlist.pane-details-width",
                                                  padding: "condensed",
                                                  position: "start",
                                                  "aria-label": n.ariaLabel,
                                                  className:
                                                      lB.ThreePanesLayoutMiddlePane,
                                                  children: l,
                                              }),
                                          n &&
                                              (0, y.jsx)(lO.M.Content, {
                                                  as: i,
                                                  padding: s
                                                      ? "normal"
                                                      : "none",
                                                  children: n.element,
                                              }),
                                      ],
                                  })
                                : l
                                  ? (0, y.jsx)("div", {
                                        className:
                                            lB.ThreePanesLayoutMiddleOnlyPane,
                                        children: l,
                                    })
                                  : null,
                        }),
                    ],
                });
            }
            try {
                l$.displayName || (l$.displayName = "ThreePanesLayout");
            } catch {}
            var lQ = a(26108);
            let lU = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchRepository",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "DashboardSearchFragment",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "fetchRepository",
                                variableName: "fetchRepository",
                            },
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "labelPageSize",
                                variableName: "labelPageSize",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "SearchList",
                    },
                ],
                type: "Searchable",
                abstractKey: "__isSearchable",
            };
            lU.hash = "c798fd569d54187c387a94dbb72d8826";
            let lz = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "DashboardSearchCurrentViewFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "query",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "DashboardSearchBarActionsFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "DashboardEditViewActionsFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchBarCurrentViewFragment",
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            lz.hash = "a8438ebbf35da2ba8c7c5360a65efc1f";
            var lH = a(33544),
                lW = a(51587);
            let lG = {
                    NewViewExperienceContainer:
                        "NewViewExperience-module__NewViewExperienceContainer--NJFI9",
                    textContent: "NewViewExperience-module__textContent--yTiXO",
                    Heading: "NewViewExperience-module__Heading--vmCCx",
                    descriptionText:
                        "NewViewExperience-module__descriptionText--AlKtQ",
                },
                lZ = {
                    NewViewGraphicContainer:
                        "NewViewGraphic-module__NewViewGraphicContainer--hX_4x",
                },
                lX = () =>
                    (0, y.jsxs)("svg", {
                        role: "presentation",
                        width: "100%",
                        height: "100%",
                        viewBox: "0 0 364 160",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [
                            (0, y.jsxs)("g", {
                                clipPath: "url(#clip0)",
                                children: [
                                    (0, y.jsx)("path", {
                                        d: "M363.754 134.158H228.676V135.078H363.754V134.158Z",
                                        fill: "#E1E4E8",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M0 135.999L12.1543 105.061L13.2592 114.499L22.1908 98.5694L24.2625 104.647L28.4521 93.9655L33.1481 108.836L40.5143 86.4152L46.039 104.969L53.7275 93.9655C53.7275 93.9655 45.4405 97.0041 45.4405 96.1754C45.4405 95.3467 56.6279 80.6142 56.6279 80.6142C56.6279 80.6142 46.3152 84.4815 46.3152 83.6528C46.3152 82.8702 55.0626 74.7673 58.0551 69.657C61.0477 64.5466 66.3882 46.9137 66.3882 46.9137C66.3882 46.9137 74.9515 68.6441 79.5093 70.9921C80.9826 67.4931 85.6785 57.5948 85.6785 57.5948L76.3787 61.6922C76.3787 61.6922 90.3745 32.1812 92.124 25.5516C93.8274 18.876 93.4131 21.1779 96.4977 26.9788C98.6155 31.905 101.148 48.0647 108.928 57.2725C116.294 64.1783 103.634 59.2522 103.634 59.2522L115.051 81.1207L125.088 61.6922L131.027 76.793L139.912 57.2725L129.876 64.3164C129.876 64.3164 138.808 51.1493 140.741 40.7905C142.629 30.3857 145.023 13.8577 145.023 13.8577L157.637 37.9361C157.637 37.9361 169.7 4.51182 170.16 0C171.587 15.9755 190.693 54.0498 190.693 54.0498C190.693 54.0498 198.106 38.2584 198.796 32.4114C201.098 38.2123 231.162 134.756 231.162 134.756C231.162 134.756 146.358 140.281 113.302 140.373C80.2459 140.465 19.0601 138.255 11.0033 137.564C6.03111 137.15 0 135.999 0 135.999Z",
                                        fill: "#E3E9EC",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M229.182 159.847C254.609 159.847 275.221 156.529 275.221 152.435C275.221 148.341 254.609 145.023 229.182 145.023C203.755 145.023 183.143 148.341 183.143 152.435C183.143 156.529 203.755 159.847 229.182 159.847Z",
                                        fill: "#CACFD6",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M265.967 117.399C265.783 116.617 302.292 74.6291 305.423 71.7747C308.553 68.9203 336.591 35.8643 338.617 34.7134C339.86 31.951 335.762 29.603 333.921 30.8921C332.217 34.253 302.66 69.1505 299.99 72.0049C297.32 74.8593 275.912 98.0169 266.566 105.429C264.54 111.046 262.652 112.013 261.225 113.624C260.995 114.499 261.271 115.696 262.975 116.801C264.678 117.906 265.967 117.399 265.967 117.399Z",
                                        fill: "#F9C513",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M328.856 42.6321C326.186 45.2563 316.15 57.0883 313.525 60.1729C307.909 66.8486 284.659 93.1829 278.72 99.8125C275.958 102.943 265.415 113.716 262.652 116.571C262.744 116.663 262.883 116.755 263.021 116.801C264.724 117.952 266.013 117.399 266.013 117.399C265.829 116.617 302.338 74.6292 305.469 71.7747C308.599 68.9203 336.637 35.8643 338.663 34.7134C338.985 33.9767 338.939 33.148 338.525 32.4575C335.578 36.0945 332.171 39.3633 328.856 42.6321Z",
                                        fill: "#FFDF5D",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M261.962 112.841C261.685 113.072 261.455 113.348 261.225 113.624C260.995 114.499 261.271 115.696 262.975 116.801C264.678 117.906 265.967 117.399 265.967 117.399C266.059 117.123 266.243 116.893 266.427 116.663C265.415 114.913 263.849 113.578 261.962 112.841Z",
                                        fill: "#DBAB09",
                                    }),
                                    (0, y.jsx)("path", {
                                        fillRule: "evenodd",
                                        clipRule: "evenodd",
                                        d: "M269.903 37.559C269.43 36.814 268.614 35.6822 267.348 34.3911C265.277 32.2733 261.547 29.2347 255.516 26.9328C248.61 24.3086 240.784 24.5848 234.062 27.6694L233.832 27.7615L233.602 27.6694C226.756 25.2197 222.846 26.7814 221.211 27.8082C223.453 28.5857 227.608 31.0674 229.182 36.5549L228.077 36.8772C226.512 31.3525 221.954 29.1427 220.296 28.7283L222.506 36.8312L222.368 37.0614C222.341 37.0889 220.765 39.2906 219.503 42.4153C219.552 42.3787 219.601 42.3435 219.652 42.3098C220.481 41.7573 221.493 41.6192 222.552 41.9875C224.899 42.7699 226.602 45.3462 228.397 48.0613L228.399 48.0647C230.149 50.7349 231.944 53.4512 234.2 54.0497C235.772 54.4539 238.921 54.0696 242.578 53.6232L242.856 53.5894L242.936 53.5795C250.058 52.7064 258.893 51.6234 263.067 55.2468C266.151 57.871 269.098 62.5209 265.507 69.6109C264.705 71.2148 262.681 74.5298 261.654 76.2104C261.502 76.4595 261.372 76.6726 261.271 76.839C261.732 77.3915 262.422 78.5425 262.1 79.9697C262.006 80.406 261.829 80.8235 261.567 81.2223C262.73 80.6407 263.85 80.0017 264.916 79.3099C265 79.1554 265.158 79.0618 265.329 79.0377C265.421 78.9757 265.513 78.9134 265.605 78.8506L265.553 78.7727C265.591 78.7499 265.692 78.7196 265.846 78.6839C266.01 78.5691 266.172 78.453 266.334 78.3356C265.613 78.107 264.984 77.9548 264.494 77.8979L264.632 76.747C265.353 76.8335 266.327 77.0966 267.44 77.4907C269.254 76.0382 270.845 74.4143 272.136 72.6495C276.008 67.3764 276.032 59.4905 275.736 55.4982C275.414 56.2611 275.103 56.8299 274.853 57.1344L273.932 56.3977C274.761 55.3388 276.878 49.63 276.28 44.5197C275.958 41.9415 275.037 40.0079 273.425 38.7188C267.775 37.5973 261.154 42.861 260.266 43.5675L260.265 43.5677C260.206 43.6152 260.172 43.642 260.166 43.6449L259.43 42.7702C259.689 42.5478 264.573 38.4167 269.903 37.559ZM266.582 79.6766C267.125 79.5771 268.003 79.4611 269.018 79.3544C270.113 79.8256 271.274 80.384 272.41 80.9914C271.544 81.3602 270.574 81.7564 269.537 82.1667C268.508 81.1776 267.475 80.3106 266.582 79.6766ZM268.367 82.6241C267.324 81.6531 266.299 80.8343 265.467 80.3067C261.369 82.9482 256.514 84.8399 251.502 85.737C254.204 85.7906 257.621 85.6746 261.554 85.1457L261.547 85.126C263.852 84.3243 266.218 83.4558 268.367 82.6241ZM268.522 83.7884C268.769 83.6912 269.017 83.5927 269.266 83.4934C269.291 83.5181 269.315 83.5428 269.34 83.5676C269.066 83.6433 268.793 83.717 268.522 83.7884ZM270.409 83.0369C271.716 82.5098 272.777 82.0599 273.639 81.6742C273.845 81.7929 274.048 81.9128 274.249 82.0337C273.029 82.4538 271.799 82.8511 270.578 83.2126C270.522 83.1538 270.466 83.0952 270.409 83.0369ZM274.922 81.0782C275.172 81.2293 275.419 81.3821 275.661 81.5362C278.483 80.5198 281.217 79.406 283.637 78.3576C282.88 78.4568 282.245 78.4964 281.712 78.4964C279.779 78.4964 279.134 77.944 278.95 77.5757C278.812 77.2994 278.858 76.9311 279.088 76.5628C280.074 74.8608 285.765 70.8058 290.143 70.587C291.77 68.1135 295.931 63.2178 307.725 61.8303L307.863 62.9813C296.399 64.3164 292.532 68.7822 290.598 72.0049C290.184 72.6955 290.184 73.1099 290.276 73.202C290.506 73.4782 291.519 73.4322 292.44 73.0178L293.176 72.6495L293.268 73.4782C293.775 79.6474 300.266 79.3251 300.542 79.2791C306.758 79.2791 311.039 75.1816 313.019 72.7416C315.321 69.9332 317.715 62.7511 314.676 59.4823C311.878 56.4091 306.658 58.0429 300.655 59.9218L300.588 59.9427C300.036 60.1268 299.438 60.3108 298.84 60.4949L298.839 60.4952C292.586 62.4359 275.909 71.2444 273.673 72.4267C273.479 72.7374 273.274 73.0422 273.057 73.3401C271.831 75.0082 270.349 76.5551 268.671 77.9565C268.845 78.0263 269.02 78.0984 269.198 78.1728C272.269 77.8153 276.294 77.5759 277.201 78.3123C277.523 78.5425 277.615 78.9568 277.477 79.2791C277.386 79.5516 277.216 79.9636 274.922 81.0782ZM273.758 80.4016C274.913 79.88 275.768 79.443 276.188 79.141C275.361 78.9502 273.363 79.0034 271.353 79.1479C272.157 79.5373 272.967 79.959 273.758 80.4016ZM275.492 82.8166C274.149 83.2905 272.789 83.7402 271.436 84.1489C272.847 85.751 274.057 87.4648 274.622 88.9473C274.715 89.2235 274.576 89.5918 274.3 89.6839C274.254 89.7299 274.162 89.7299 274.116 89.7299C273.886 89.7299 273.656 89.5918 273.564 89.3616C272.994 87.8859 271.701 86.1205 270.228 84.5032C268.476 85.0007 266.747 85.4202 265.092 85.7246C260.212 86.6453 255.977 86.9216 252.616 86.9216C248.885 86.9216 246.284 86.5718 245.184 86.3864L248.099 90.7787C250.138 90.2687 252.055 89.8298 253.721 89.5918C257.174 89.0854 260.581 90.0522 263.067 92.2621C265.737 94.6561 267.164 98.2011 267.072 102.299C266.842 110.401 262.008 113.486 259.66 114.867C259.625 115.702 259.511 116.616 259.08 117.351C259.167 117.533 259.302 117.818 259.479 118.191C260.873 121.138 264.842 129.522 267.811 135.032C270.802 131.224 278.358 131.742 280.101 132.178C280.124 132.178 280.147 132.166 280.17 132.155C280.193 132.143 280.216 132.132 280.239 132.132C281.068 131.81 282.863 131.119 284.106 133.099C285.488 135.309 281.989 140.879 280.654 142.629C276.556 148.061 267.026 151.514 261.732 151.929C261.593 151.975 261.455 151.975 261.271 151.975C256.391 151.975 253.537 146.036 253.445 145.759L253.399 145.667L249.07 130.991C249.054 130.959 249.039 130.926 249.025 130.889L249.039 130.885L243.646 112.601C243.234 112.639 242.821 112.671 242.409 112.697C240.348 118.643 237.537 124.319 234.062 129.554C229.137 136.845 222.513 141.163 220.354 142.453C222.697 145.035 223.111 148.681 222.902 150.466C223.809 150.214 224.302 150.226 224.624 150.501C224.946 150.778 225.085 151.1 225.085 151.514C225.038 152.159 224.532 153.218 220.987 155.243C219.192 156.348 216.153 156.809 212.93 156.809C208.833 156.809 204.505 156.026 201.927 154.737C198.106 152.803 195.62 149.949 194.469 146.312C193.18 142.076 194.146 137.887 195.113 136.045C195.896 134.618 201.374 131.441 209.017 127.114C211.227 125.871 213.345 124.674 214.68 123.845C218.814 121.31 225.558 113.423 227.579 111.014C225.38 110.327 223.575 109.492 222.368 108.606C218.662 105.858 217.35 103.31 218.326 99.807C213.153 102.526 196.521 111.195 190.187 113.992C186.964 115.374 170.713 121.865 163.761 121.865C162.84 121.865 162.057 121.727 161.551 121.497C160.86 121.175 160.63 120.714 160.538 120.346C160.308 119.517 159.755 117.307 173.843 108.468C181.301 103.772 190.463 98.7996 196.218 95.9452C205.993 91.0978 226.121 85.1 231.335 83.5939C225.974 81.337 221.395 77.4318 218.317 72.4653C216.489 69.6507 215.735 66.3136 216.17 63.0303C214.586 60.6611 210.614 59.1592 208.326 59.022C208.004 59.022 207.774 58.7457 207.774 58.4235C207.774 58.1012 208.05 57.871 208.372 57.871C210.537 58.0344 214.332 59.2847 216.447 61.5578C216.51 61.3013 216.58 61.0457 216.658 60.7912L216.654 60.7862C216.195 60.0773 212.714 54.7045 208.142 52.8067C207.866 52.6686 207.728 52.3463 207.82 52.0701C207.958 51.7938 208.28 51.6557 208.557 51.7478C212.57 53.4025 215.668 57.3725 216.986 59.2521C217.048 58.4751 217.009 57.5419 216.957 56.3191C216.95 56.1513 216.943 55.9782 216.936 55.7992C216.844 54.1879 216.751 52.2082 216.751 49.5379L216.752 49.4459L216.751 49.4459L216.752 49.4293C216.795 43.3934 220.394 37.7909 221.217 36.601L219.146 28.9125C219.099 28.7744 219.099 28.5902 219.146 28.4521C219.187 28.2039 219.34 27.9928 219.537 27.8189L219.422 27.7154L219.434 27.7026C219.748 27.3822 223.962 23.0774 233.74 26.4724C240.692 23.3417 248.749 23.1116 255.885 25.8279C266.149 29.7065 270.113 35.5854 271.151 37.4218C272.035 37.3715 272.922 37.4248 273.794 37.6138L273.932 37.6599L274.024 37.7519C275.912 39.2252 277.063 41.4351 277.385 44.3816C277.76 47.3367 277.292 50.4689 276.615 52.9186L276.63 53.0264V53.0264C276.74 53.8138 277.129 56.5938 276.97 60.1269C276.862 63.1323 276.326 67.0775 274.669 70.5962C279.54 68.0379 292.877 61.1432 298.517 59.3903C298.816 59.2983 299.103 59.2063 299.39 59.1144L299.391 59.114L299.393 59.1137C299.68 59.0217 299.967 58.9297 300.266 58.8378L300.359 58.8088C306.493 56.8859 312.253 55.0805 315.551 58.6536C319.142 62.567 316.38 70.4857 313.94 73.4321C311.822 76.0103 307.264 80.384 300.588 80.384C300.588 80.4761 300.496 80.4761 300.312 80.4761C299.071 80.4761 293.969 80.1975 292.482 75.4964C290.411 76.5493 283.988 79.7045 276.847 82.3286C277.324 82.6647 277.773 83.0035 278.183 83.3411C278.241 83.3599 278.298 83.3869 278.352 83.4226C278.95 83.929 279.457 84.4355 279.917 85.034C280.101 85.2642 280.055 85.6325 279.825 85.8627C279.733 86.0008 279.595 86.0468 279.457 86.0468C279.272 86.0468 279.134 85.9548 278.996 85.8166C278.948 85.7525 278.899 85.6896 278.85 85.6277C278.131 84.7377 276.924 83.7641 275.492 82.8166ZM250.509 131.772L254.503 145.299C254.559 145.421 254.763 145.824 255.098 146.359C255.537 145.816 255.834 143.051 254.227 137.518C253.103 133.689 251.55 132.326 250.509 131.772ZM255.756 147.321C255.786 147.294 255.814 147.264 255.839 147.233C257.036 146.128 256.805 142.26 255.332 137.196C253.7 131.664 251.04 130.687 250.124 130.351L250.085 130.337L248.618 125.371C248.809 125.453 249.008 125.502 249.209 125.502C249.347 125.502 249.439 125.502 249.485 125.548C249.761 125.456 249.946 125.272 250.084 124.996C250.774 123.661 250.82 118.919 249.9 116.11C249.35 114.463 248.593 113.068 247.898 112.187L253.951 111.598C254.227 111.737 254.411 111.967 254.503 112.289C254.503 112.381 254.457 112.657 254.411 112.842C254.135 114.177 253.721 116.387 254.596 117.676C254.964 118.182 255.424 118.458 256.069 118.55C256.345 118.596 256.575 118.596 256.805 118.596C257.377 118.596 257.85 118.474 258.207 118.264C259.65 121.343 265.799 134.369 268.822 139.13L269.788 138.485C269.388 137.851 268.928 137.061 268.428 136.161C270.821 132.238 279.005 132.964 279.963 133.329L280.147 133.421L280.331 133.329C280.377 133.306 280.435 133.283 280.492 133.26L280.493 133.26C280.55 133.237 280.608 133.214 280.654 133.191C281.712 132.776 282.449 132.592 283.14 133.697C283.876 134.894 281.943 138.992 279.733 141.938C275.912 147.048 266.612 150.409 261.639 150.778C259.04 150.98 256.984 148.971 255.756 147.321ZM292.149 74.371C291.551 74.6771 290.416 75.246 288.896 75.9687L288.895 75.9643C284.797 77.1613 280.792 77.6677 280.055 77.1153C280.645 76.0623 285.396 72.4279 289.408 71.8164C288.861 72.9457 289.117 73.6132 289.447 73.9846C289.989 74.6169 291.107 74.6732 292.149 74.371ZM255.562 83.5607L255.573 83.5939C252.167 84.6162 248.591 85.1721 245.065 85.1721C243.916 85.1721 242.767 85.1262 241.664 84.9886C240.933 83.695 239.631 82.38 237.561 82.2256C236.469 82.1443 235.104 82.5233 233.615 83.2272C227.703 81.2273 222.659 77.2024 219.376 71.9129C217.212 68.6441 216.705 64.6387 217.902 60.9096C218.358 59.6333 218.273 58.1765 218.137 55.869L218.133 55.7992C218.041 54.1879 217.948 52.2542 217.948 49.584C217.948 49.3508 217.954 49.118 217.966 48.8858C218.17 47.2159 218.815 44.2313 220.296 43.2306C220.849 42.8623 221.447 42.8162 222.184 43.0464C224.11 43.6288 225.732 46.0856 227.302 48.4656L227.433 48.6632L227.577 48.8822C229.417 51.6668 231.277 54.4817 233.924 55.1547C235.671 55.6027 238.901 55.2223 242.68 54.7773L242.994 54.7403L243.135 54.7234C250.017 53.8974 258.535 52.875 262.33 56.1215C266.381 59.5744 267.118 63.9481 264.494 69.1045C263.435 71.2223 260.12 76.5628 260.074 76.6088L259.844 77.0232L260.166 77.3455C260.166 77.3455 261.271 78.4504 260.995 79.7395C260.765 80.7524 259.66 82.2256 255.562 83.5607ZM243.747 86.3032C243.228 86.2859 242.716 86.2563 242.204 86.2105C242.266 86.3987 242.314 86.5761 242.349 86.7374L241.244 86.9676C241.243 86.9639 241.241 86.9579 241.239 86.9497L241.232 86.9229C241.117 86.5045 240.311 83.5513 237.515 83.3766C235.953 83.2564 232.986 84.6165 229.871 86.9132L229.873 86.9216L229.856 86.9242C229.049 87.5201 228.232 88.1788 227.427 88.8909L227.433 88.9013L227.392 88.9224C225.37 90.7161 223.426 92.8462 221.908 95.1625C220.996 96.5725 220.307 97.8068 219.845 98.9152L219.882 98.9838C219.875 98.9881 219.846 99.0036 219.798 99.0298C218.322 102.668 219.341 104.95 223.059 107.685C226.42 110.171 235.351 112.289 243.868 111.414L254.089 110.401L254.227 110.447C254.964 110.724 255.47 111.368 255.608 112.105V112.197C255.608 112.381 255.562 112.611 255.47 113.026C255.454 113.114 255.436 113.209 255.417 113.311L255.417 113.312C255.214 114.383 254.882 116.14 255.47 116.939C255.608 117.169 255.839 117.307 256.161 117.353C256.897 117.445 257.45 117.353 257.772 117.077C258.371 116.525 258.463 115.374 258.463 114.499V114.177L258.785 113.992C260.995 112.703 265.645 109.987 265.829 102.253C265.921 98.5234 264.632 95.3007 262.238 93.1368C259.982 91.1111 256.99 90.2824 253.813 90.7428C251.864 91.0269 249.558 91.5974 247.115 92.2017L247.113 92.2021C246.786 92.2831 246.456 92.3647 246.124 92.4462C240.323 93.9195 233.786 95.5769 229.458 94.6101L229.734 93.5051C231.181 93.8339 232.927 93.8399 234.834 93.6445C235.182 90.7865 237.96 87.3394 238.421 86.7673C238.453 86.7282 238.474 86.7025 238.482 86.6914L239.357 87.428C239.314 87.4703 236.513 90.8151 236.022 93.5006C238.204 93.1983 240.55 92.6788 242.87 92.1083L242.112 88.3183L243.24 88.0926L243.988 91.8293C244.629 91.6673 245.266 91.5035 245.894 91.3413C246.237 91.2528 246.578 91.1649 246.917 91.0783L243.747 86.3032ZM226.727 87.9902C226.956 87.7874 227.186 87.5873 227.418 87.3905C225.686 87.7758 223.983 88.2745 222.322 88.9013C219.284 90.0062 217.074 91.0651 215.969 91.7096C217.212 91.5255 219.606 90.8809 222.644 89.776C223.507 89.474 225.664 88.5252 226.727 87.9902ZM229.4 85.8173C226.872 86.2359 224.349 86.9093 221.954 87.7963C219.836 88.5329 217.902 89.3616 216.475 90.0983C214.542 91.1111 213.943 91.7096 214.173 92.3542C214.265 92.7225 214.634 92.9066 215.278 92.9066C215.785 92.9066 216.429 92.8146 217.35 92.5844C218.869 92.2161 220.895 91.6175 223.013 90.8349C223.331 90.7137 223.803 90.5229 224.332 90.3016C223.001 91.698 221.828 93.1427 220.941 94.518C220.07 95.8568 219.392 97.0699 218.909 98.1864C218.575 98.3596 218.053 98.6314 217.38 98.9825L217.354 98.9961C211.763 101.911 195.851 110.208 189.681 112.934C182.038 116.294 165.372 122.049 162.057 120.438C161.774 120.317 161.704 120.16 161.66 120.061C161.654 120.047 161.648 120.035 161.643 120.024C161.551 119.655 161.735 117.399 174.442 109.435C181.9 104.739 191.016 99.8125 196.725 96.9581C205.788 92.464 223.899 86.995 230.464 85.0615C230.11 85.3024 229.755 85.5548 229.4 85.8173ZM246.506 112.322L246.629 112.31L246.631 112.335C246.583 112.335 246.54 112.33 246.506 112.322ZM244.813 112.487L246.457 112.327C246.769 112.568 247.94 113.827 248.795 116.433C249.761 119.287 249.531 123.523 249.117 124.351C248.898 124.264 248.43 123.885 248.028 123.374L244.813 112.487ZM241.15 112.756C236.674 112.899 232.313 112.321 228.777 111.363L228.772 111.369C227.24 113.204 219.859 122.042 215.278 124.858C213.897 125.686 211.779 126.883 209.569 128.126C204.459 131.027 196.771 135.401 196.08 136.598C195.205 138.255 194.284 142.076 195.528 145.944C196.54 149.258 198.842 151.837 202.387 153.678C203.63 154.323 205.334 154.829 207.221 155.151C209.938 155.52 215.002 153.494 218.685 152.021L218.685 152.021L218.685 152.021C219.913 151.535 220.888 151.152 221.669 150.87C221.956 149.977 221.923 145.373 218.961 142.721C214.956 139.13 205.288 140.327 204.505 140.649C204.505 140.649 204.551 140.603 204.643 140.557L203.815 139.728C204.492 139.05 214.797 137.796 219.487 141.626C221.188 140.626 228.127 136.253 233.049 128.909C236.394 123.848 239.108 118.45 241.15 112.756ZM222.23 151.929L222.223 151.907C221.298 152.237 220.179 152.685 219.192 153.079L219.192 153.079L219.192 153.08C217.028 154 214.542 155.013 212.194 155.658C215.462 155.75 218.639 155.335 220.481 154.231C223.703 152.389 223.98 151.56 223.98 151.422C223.704 151.422 223.127 151.59 222.412 151.84C222.358 151.876 222.298 151.906 222.23 151.929ZM272.321 52.9908L271.17 52.8067C271.768 48.9855 271.952 42.2638 270.985 41.2049C270.571 40.7445 267.855 41.7113 265.277 43.2306L264.678 42.2638C269.788 39.2252 271.354 39.9618 271.814 40.4222C273.564 42.2177 272.551 51.3795 272.321 52.9908ZM230.241 76.2405C231.116 76.747 232.128 77.0692 232.911 77.0692C233.51 77.0692 234.016 76.8851 234.292 76.5168C234.891 75.4579 233.648 73.9846 232.082 73.1099C231.3 72.6495 230.517 72.3733 229.827 72.2812C228.676 72.097 228.215 72.6035 228.031 72.8797C227.847 73.1559 227.709 73.8005 228.399 74.7212C228.814 75.2737 229.458 75.7801 230.241 76.2405ZM230.793 75.2737C229.458 74.491 228.952 73.6163 228.998 73.4322C229.182 73.294 230.149 73.294 231.484 74.1227C232.865 74.9054 233.326 75.7341 233.279 75.9183C233.141 76.0564 232.175 76.0564 230.793 75.2737ZM168.226 115.788C168.411 116.11 168.779 116.294 169.377 116.294C170.022 116.294 170.943 116.064 172.14 115.65C174.027 114.959 176.329 113.854 178.723 112.473C181.117 111.092 183.235 109.665 184.754 108.376C186.596 106.81 187.24 105.798 186.826 105.061C186.412 104.324 185.215 104.37 182.913 105.199C181.025 105.89 178.723 106.995 176.329 108.376C173.935 109.757 171.817 111.184 170.298 112.473C168.457 114.039 167.812 115.051 168.226 115.788ZM178.125 111.46C173.245 114.269 170.114 115.19 169.285 115.143C169.608 114.407 172.002 112.105 176.882 109.297C181.762 106.488 184.893 105.567 185.721 105.613C185.399 106.396 183.005 108.652 178.125 111.46ZM193.133 102.068C192.535 102.068 192.213 101.884 192.075 101.562C191.752 100.871 192.397 100.135 194.331 98.8457C195.804 97.8788 197.876 96.7739 200.085 95.715C202.341 94.6561 204.505 93.8274 206.163 93.321C208.372 92.6764 209.339 92.6764 209.661 93.367C209.984 94.0576 209.339 94.7942 207.406 96.0833C205.932 97.0501 203.861 98.1551 201.651 99.214C199.395 100.273 197.231 101.102 195.574 101.608C194.469 101.93 193.686 102.068 193.133 102.068ZM208.28 94.0576C207.175 94.1957 204.505 94.9784 200.592 96.8199C196.632 98.6615 194.331 100.181 193.502 100.917C194.607 100.779 197.277 99.9966 201.19 98.1551C205.104 96.3135 207.452 94.7942 208.28 94.0576Z",
                                        fill: "#0366D6",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M319.188 146.864C319.188 146.864 321.352 124.766 320.523 121.635C320.017 123.431 311.131 137.795 311.131 137.795V123.799C311.131 123.799 309.152 130.244 308.507 132.224C307.863 129.231 303.213 120.346 303.903 121.359C304.594 122.372 304.732 131.718 303.903 131.718C303.259 131.533 300.773 122.97 298.287 120.162C299.253 121.129 299.944 128.403 300.773 132.04C300.45 130.705 293.775 126.101 290.552 125.456C290.874 127.574 295.662 131.533 296.629 134.342C297.596 137.15 295.985 140.281 295.985 140.281L302.062 144.839L319.188 146.864Z",
                                        fill: "#88929C",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M307.771 146.634C307.632 146.174 311.177 134.664 311.177 134.664C311.177 134.664 321.72 128.173 323.608 127.068C325.496 125.963 328.12 126.147 328.12 126.147L333.875 123.983C333.875 123.983 349.712 128.173 350.172 128.311C350.633 128.449 353.441 133.605 354.684 135.309C355.927 137.012 356.526 138.117 356.71 140.879L356.848 143.688L348.469 152.665H338.847C338.847 152.665 332.033 155.289 330.468 154.829C328.902 154.369 323.332 152.988 321.306 151.238C319.28 149.489 307.771 146.634 307.771 146.634Z",
                                        fill: "#B1B7BB",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M328.212 128.173C328.166 127.85 327.429 119.885 334.98 111.23L335.67 111.829C331.849 116.156 330.284 120.346 329.639 123.108C328.948 126.101 329.133 128.034 329.133 128.08L328.212 128.173Z",
                                        fill: "#959DA5",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M335.808 112.473C334.98 112.473 334.289 111.783 334.289 110.954C334.289 110.125 334.98 109.435 335.808 109.435C336.637 109.435 337.328 110.125 337.328 110.954C337.328 111.783 336.637 112.473 335.808 112.473ZM335.808 110.355C335.486 110.355 335.21 110.632 335.21 110.954C335.21 111.276 335.486 111.552 335.808 111.552C336.131 111.552 336.407 111.276 336.407 110.954C336.407 110.632 336.131 110.355 335.808 110.355Z",
                                        fill: "#959DA5",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M340.044 115.097C339.261 115.097 338.617 114.453 338.617 113.67C338.617 112.888 339.261 112.243 340.044 112.243C340.827 112.243 341.471 112.888 341.471 113.67C341.471 114.453 340.827 115.097 340.044 115.097ZM340.044 113.164C339.768 113.164 339.537 113.394 339.537 113.67C339.537 113.946 339.768 114.177 340.044 114.177C340.32 114.177 340.55 113.946 340.55 113.67C340.55 113.394 340.32 113.164 340.044 113.164Z",
                                        fill: "#959DA5",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M333.829 117.584C332.539 117.584 331.527 117.031 331.481 116.985L331.941 116.202C332.033 116.248 333.829 117.261 335.44 116.202C336.683 115.42 337.88 114.499 338.985 113.578L339.583 114.269C338.432 115.236 337.189 116.156 335.946 116.985C335.256 117.445 334.519 117.584 333.829 117.584Z",
                                        fill: "#959DA5",
                                    }),
                                    (0, y.jsx)("g", {
                                        opacity: "0.5",
                                        children: (0, y.jsx)("path", {
                                            opacity: "0.5",
                                            d: "M321.168 120.162C320.8 119.011 320.661 117.768 320.846 116.525C320.984 115.972 321.352 115.328 321.905 115.328C322.181 115.374 322.411 115.466 322.641 115.65C323.102 116.064 323.562 116.479 323.93 116.985C326.923 120.53 329.133 124.674 330.56 129.093C330.376 126.883 331.573 124.766 333.23 123.292C334.887 121.819 337.005 121.036 339.169 120.484C339.952 120.254 340.919 120.162 341.517 120.714C341.885 121.129 342.024 121.727 341.839 122.28C341.655 122.786 341.333 123.246 340.919 123.615C339.952 124.443 338.847 125.134 337.742 125.686C335.348 127.022 333.092 128.587 330.974 130.336C330.79 130.521 330.56 130.659 330.33 130.705C330.192 130.705 330.007 130.705 329.869 130.659C325.265 129.6 322.319 124.305 321.168 120.162Z",
                                            fill: "#959DA5",
                                        }),
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M325.403 142.629C327.797 140.373 330.468 138.347 333.276 136.598C335.256 137.012 337.097 136.69 338.617 136.92C341.839 134.065 345.615 130.751 348.929 128.034C345.154 127.022 333.829 124.029 333.829 124.029L328.074 126.193C328.074 126.193 325.449 126.055 323.562 127.114C322.089 127.988 315.045 132.316 312.282 134.019C314.078 136.644 322.641 140.557 325.403 142.629Z",
                                        fill: "#CACFD3",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M312.42 134.111L312.282 133.927C314.907 132.316 322.043 127.896 323.562 127.021C325.357 126.009 327.797 126.055 328.12 126.101L333.875 123.937H333.921C334.013 123.983 345.246 126.929 349.021 127.942L348.975 128.172C345.338 127.206 334.657 124.351 333.921 124.167L328.212 126.331H328.166C328.12 126.331 325.542 126.193 323.746 127.252C322.181 128.08 315.045 132.5 312.42 134.111Z",
                                        fill: "#E1E4E8",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M56.4898 157.776C78.6618 157.776 96.6358 156.003 96.6358 153.816C96.6358 151.63 78.6618 149.857 56.4898 149.857C34.3178 149.857 16.3438 151.63 16.3438 153.816C16.3438 156.003 34.3178 157.776 56.4898 157.776Z",
                                        fill: "#CACFD6",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M78.3123 141.156C78.3123 141.156 79.095 147.141 80.6603 148.752C82.2256 150.363 88.625 154.829 88.9473 154C85.8167 150.087 82.5019 140.419 82.5019 140.419L78.3123 141.156Z",
                                        fill: "#FF7000",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M57.7789 141.57C57.6868 141.616 57.6408 141.662 57.5948 141.708C57.5027 141.8 57.5948 141.984 57.6408 142.076C58.3774 143.319 58.9299 144.7 59.3442 146.082C59.6205 147.094 60.1729 148.476 61.0937 148.015C62.7051 147.141 61.37 145.023 61.0937 143.227C61.2779 144.332 64.8689 143.043 66.0199 141.386C67.4931 139.268 63.9481 138.946 62.659 139.268C61.0016 139.682 59.3442 140.833 57.7789 141.57Z",
                                        fill: "#FF7000",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M71.4525 128.633C69.2887 128.403 67.0788 128.449 65.0991 129.323C63.2115 130.152 61.6922 131.671 60.3111 133.191C59.8967 133.697 59.4363 134.112 58.8839 134.48C58.3314 134.756 57.7329 134.894 57.1344 134.894C54.2339 134.986 51.5176 133.375 49.584 131.257C47.6503 129.139 46.2692 126.561 44.7959 124.075C42.4479 120.116 39.5935 116.156 35.5421 113.992C29.9253 110.954 22.5591 111.875 17.4027 115.742C12.2464 119.563 9.25384 125.917 8.79345 132.27C8.70137 133.697 8.9776 135.493 10.3588 135.815L12.4766 131.717C13.5355 129.692 14.6404 127.62 16.4359 126.193C18.2314 124.766 20.9017 124.259 22.7893 125.548C24.2625 126.561 24.861 128.449 25.0452 130.244C25.2294 132.04 25.0912 133.835 25.5056 135.585C26.5185 139.82 30.662 142.767 34.8975 143.596C37.9822 144.194 41.2049 143.918 44.1514 142.767C49.0315 140.833 53.2671 136.598 58.4695 136.92C59.1601 138.761 60.9556 140.005 62.8432 140.557C64.7308 141.109 66.7565 140.971 68.6901 140.879L66.112 143.964C67.4471 146.68 69.2887 149.12 71.4525 151.192C72.5114 148.522 71.6366 145.805 69.9792 143.457C70.3936 142.629 71.0842 141.938 71.9129 141.57C73.8465 142.583 78.9108 142.306 81.0746 142.03C80.9826 143.596 81.3048 147.187 82.3177 148.706C83.3305 150.225 86.5533 153.494 88.3948 154.461C89.5458 155.105 93.0908 155.934 93.6433 154.875C89.2696 153.034 84.9419 148.568 84.988 143.826C84.988 141.524 87.0137 140.005 86.8755 138.071C86.7835 136.367 84.0211 134.388 82.8241 133.421C79.6014 130.797 75.642 129.139 71.4525 128.633Z",
                                        fill: "#FF9C57",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M47.236 136.46C45.5326 136.46 43.737 136.828 42.494 135.447C42.0796 134.894 41.7113 134.296 41.3891 133.697C40.3762 132.132 39.1331 131.948 37.3376 132.086C35.1738 132.224 34.3911 131.395 33.5164 129.416C31.0303 123.891 24.769 119.563 18.7379 122.786C14.134 125.272 11.3256 130.705 10.0365 135.585C10.0365 135.631 9.99048 135.677 9.99048 135.723C10.0826 135.769 10.1746 135.815 10.3128 135.861L12.4766 131.764C13.5355 129.738 14.6404 127.666 16.4359 126.239C18.2315 124.812 20.9017 124.305 22.7893 125.594C24.2626 126.607 24.8611 128.495 25.0452 130.29C25.2294 132.086 25.0913 133.881 25.5056 135.631C26.5185 139.866 30.662 142.813 34.8976 143.642C37.9822 144.24 41.2049 143.964 44.1514 142.813C47.6043 141.432 50.781 138.9 54.1879 137.657C52.0701 136.736 49.7681 136.46 47.236 136.46Z",
                                        fill: "#FF7000",
                                    }),
                                    (0, y.jsx)("g", {
                                        opacity: "0.6",
                                        children: (0, y.jsx)("path", {
                                            opacity: "0.6",
                                            d: "M70.4857 134.618C70.5777 134.618 74.6292 137.334 74.5831 138.623C74.5371 139.912 70.9 141.846 70.9 141.846C70.9 141.846 72.6955 139.59 72.2812 138.209C71.8668 136.828 70.4857 134.618 70.4857 134.618Z",
                                            fill: "#FFD1AC",
                                        }),
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M85.6785 135.815C85.2642 137.196 84.4815 138.485 84.1592 139.959C83.6989 141.754 84.0672 143.688 85.1721 145.161C85.08 144.747 85.08 144.286 85.08 143.872C85.08 141.57 87.1057 140.051 86.9676 138.117C86.8755 137.334 86.3691 136.552 85.6785 135.815Z",
                                        fill: "#FB8532",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M88.4409 133.007C89.4998 132.592 90.3745 133.697 89.6379 136.229L90.973 136.275C90.7428 135.585 90.6507 134.848 90.7428 134.112C90.7889 133.467 91.3413 133.007 91.9859 133.053H92.0319C92.7685 133.099 92.9987 133.697 93.0448 134.434C93.0448 135.124 92.9067 135.815 92.5844 136.46C94.1957 137.611 95.0705 139.59 94.8403 141.57C94.7022 142.26 94.5641 142.951 94.518 143.642C94.472 144.378 94.8403 145.023 95.4388 145.391C95.8071 145.529 96.2215 145.575 96.5898 145.667C96.9581 145.759 97.3724 146.082 97.3264 146.496C97.2803 146.818 96.9581 147.002 96.6818 147.187C94.4259 148.292 91.8017 148.292 89.5918 147.187C87.6582 146.22 86.0929 144.378 85.8166 142.26C85.6325 140.833 86.0468 139.452 86.9676 138.347C87.2899 137.979 88.3028 137.472 88.4409 137.012C87.8424 136.275 87.0137 133.559 88.4409 133.007Z",
                                        fill: "#FF9C57",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M96.6358 146.818C96.9663 146.818 97.2343 146.55 97.2343 146.22C97.2343 145.889 96.9663 145.621 96.6358 145.621C96.3052 145.621 96.0373 145.889 96.0373 146.22C96.0373 146.55 96.3052 146.818 96.6358 146.818Z",
                                        fill: "#2F363D",
                                    }),
                                    (0, y.jsx)("g", {
                                        opacity: "0.6",
                                        children: (0, y.jsx)("path", {
                                            opacity: "0.6",
                                            d: "M38.8569 121.451C41.297 124.213 43.1846 127.39 45.4865 130.244C47.7885 133.099 50.9652 135.17 54.5562 136.045C54.8324 135.999 55.0626 135.953 55.3389 135.907C52.8067 135.677 50.4587 134.204 48.7093 132.316C46.7296 130.198 45.3945 127.62 43.9212 125.134C41.5732 121.175 38.7188 117.215 34.6674 115.051C31.859 113.578 28.6823 112.98 25.5056 113.348C30.662 114.315 35.4961 117.63 38.8569 121.451Z",
                                            fill: "#FFD1AC",
                                        }),
                                    }),
                                    (0, y.jsx)("g", {
                                        opacity: "0.6",
                                        children: (0, y.jsx)("path", {
                                            opacity: "0.6",
                                            d: "M78.9108 132.915C81.1667 134.204 82.9162 136.045 84.4815 138.071C84.5736 137.518 84.7578 136.966 84.9419 136.46C83.7909 135.124 82.4098 133.927 80.9365 132.961C77.5296 130.751 73.6163 130.106 69.703 129.416L71.0381 130.06C73.6624 131.027 76.4707 131.487 78.9108 132.915Z",
                                            fill: "#FFD1AC",
                                        }),
                                    }),
                                    (0, y.jsx)("g", {
                                        opacity: "0.6",
                                        children: (0, y.jsx)("path", {
                                            opacity: "0.6",
                                            d: "M88.0265 134.71C89.3616 134.618 88.625 136.966 89.3617 137.242C89.9602 137.472 90.6968 137.012 91.3874 137.288C92.124 137.657 92.6765 138.209 93.0448 138.946C93.5512 139.959 93.5512 140.879 93.4591 141.984C93.4131 143.411 93.5052 144.885 95.1626 145.299C94.6561 144.885 94.3799 144.286 94.4259 143.642C94.472 142.951 94.6101 142.26 94.7482 141.57C94.9784 139.59 94.1037 137.611 92.4923 136.46C92.8146 135.815 92.9527 135.124 92.9527 134.434C92.9066 133.697 92.6765 133.099 91.9398 133.053C91.2953 132.961 90.7428 133.421 90.6507 134.066V134.112C90.5587 134.848 90.6507 135.585 90.8809 136.275L89.5458 136.229C90.2824 133.651 89.4077 132.546 88.3488 133.007C87.6582 133.283 87.5201 134.019 87.5661 134.848C87.7503 134.802 87.8884 134.756 88.0265 134.71Z",
                                            fill: "#FFD1AC",
                                        }),
                                    }),
                                ],
                            }),
                            (0, y.jsx)("defs", {
                                children: (0, y.jsx)("clipPath", {
                                    id: "clip0",
                                    children: (0, y.jsx)("rect", {
                                        width: "363.8",
                                        height: "159.847",
                                        fill: "white",
                                    }),
                                }),
                            }),
                        ],
                    }),
                lJ = () =>
                    (0, y.jsxs)("svg", {
                        role: "presentation",
                        width: "100%",
                        height: "100%",
                        viewBox: "0 0 364 160",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [
                            (0, y.jsx)("mask", {
                                id: "mask0",
                                "mask-type": "alpha",
                                maskUnits: "userSpaceOnUse",
                                x: "250",
                                y: "76",
                                width: "59",
                                height: "50",
                                children: (0, y.jsx)("rect", {
                                    x: "250.419",
                                    y: "76.665",
                                    width: "57.6723",
                                    height: "48.5798",
                                    fill: "#C4C4C4",
                                }),
                            }),
                            (0, y.jsxs)("g", {
                                mask: "url(#mask0)",
                                children: [
                                    (0, y.jsx)("path", {
                                        d: "M266.147 117.512C265.963 116.729 302.496 74.7009 305.629 71.8438C308.762 68.9866 336.819 35.899 338.846 34.747C340.09 31.982 335.989 29.6317 334.147 30.9221C332.442 34.2862 302.865 69.2171 300.193 72.0742C297.521 74.9313 276.099 98.1111 266.746 105.53C264.719 111.153 262.83 112.121 261.402 113.733C261.171 114.609 261.448 115.807 263.153 116.913C264.857 118.019 266.147 117.512 266.147 117.512Z",
                                        fill: "#6E7681",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M329.078 42.6726C326.407 45.2993 316.364 57.1426 313.737 60.2302C308.117 66.9123 284.851 93.2718 278.908 99.9077C276.145 103.041 265.594 113.825 262.83 116.682C262.922 116.774 263.061 116.866 263.199 116.912C264.903 118.065 266.193 117.511 266.193 117.511C266.009 116.728 302.542 74.7003 305.676 71.8431C308.808 68.986 336.865 35.8983 338.892 34.7463C339.214 34.0089 339.168 33.1794 338.754 32.4883C335.805 36.1288 332.396 39.4007 329.078 42.6726Z",
                                        fill: "#484F58",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M262.139 112.948C261.862 113.179 261.632 113.456 261.402 113.732C261.171 114.608 261.448 115.806 263.153 116.912C264.857 118.018 266.147 117.511 266.147 117.511C266.239 117.234 266.423 117.004 266.607 116.774C265.594 115.022 264.027 113.686 262.139 112.948Z",
                                        fill: "#30363D",
                                    }),
                                ],
                            }),
                            (0, y.jsx)("path", {
                                d: "M364 134.286H228.831V135.207H364V134.286Z",
                                fill: "#161B22",
                            }),
                            (0, y.jsx)("path", {
                                d: "M0 136.129L12.1625 105.161L13.2682 114.609L22.2058 98.6637L24.2789 104.747L28.4713 94.0554L33.1705 108.94L40.5417 86.4978L46.0701 105.069L53.7638 94.0554C53.7638 94.0554 45.4712 97.0969 45.4712 96.2674C45.4712 95.4379 56.6662 80.6913 56.6662 80.6913C56.6662 80.6913 46.3465 84.5623 46.3465 83.7328C46.3465 82.9495 55.0998 74.8388 58.0944 69.7236C61.089 64.6083 66.4331 46.9586 66.4331 46.9586C66.4331 46.9586 75.0022 68.7098 79.5631 71.06C81.0374 67.5577 85.7364 57.6499 85.7364 57.6499L76.4304 61.7512C76.4304 61.7512 90.4356 32.212 92.1863 25.576C93.8909 18.8941 93.4763 21.1982 96.563 27.0046C98.6822 31.9355 101.216 48.1107 109.002 57.3273C116.373 64.2397 103.704 59.3089 103.704 59.3089L115.129 81.1983L125.173 61.7512L131.116 76.8664L140.007 57.3273L129.964 64.3779C129.964 64.3779 138.902 51.1982 140.836 40.8295C142.725 30.4148 145.121 13.871 145.121 13.871L157.744 37.9724C157.744 37.9724 169.815 4.51614 170.275 0C171.703 15.9908 190.822 54.1015 190.822 54.1015C190.822 54.1015 198.24 38.295 198.93 32.4424C201.234 38.2488 231.318 134.885 231.318 134.885C231.318 134.885 146.457 140.415 113.379 140.507C80.3002 140.599 19.073 138.387 11.0107 137.696C6.03519 137.281 0 136.129 0 136.129Z",
                                fill: "#161B22",
                            }),
                            (0, y.jsx)("path", {
                                d: "M194.471 140.634L196.004 135.829L204.485 130.719L216.339 123.87L222.061 118.147L228.601 110.889L223.492 108.845L218.689 103.939L219.098 99.1349L188.647 114.569L172.399 119.782L163.407 121.622L160.853 119.621L166.166 114.467L176.895 107.414L191.304 98.9304L208.675 91.2644L225.535 86.1538L233.199 83.9051L224.309 79.3055L218.383 72.2528L216.748 64.1779L217.769 59.2717L217.463 51.0946L218.996 42.8153L222.163 37.2958L220.222 28.9143L220.835 27.2789L227.17 25.8479L234.119 27.1767L237.798 25.3368L249.753 24.5186L260.687 28.1991L267.942 34.1272L270.701 37.9088L273.971 38.2155L276.73 41.8951L277.139 47.3123L276.321 52.9339L276.934 57.3291L276.423 65.1995L273.46 71.7412L280.204 69.1858L290.321 63.8707L299.824 59.4756L311.371 57.1249L316.378 60.0888L317.297 62.9513L315.356 71.1279L309.123 77.5674L302.685 80.0205L297.882 79.8161L294.101 77.6696L293.182 74.911L287.766 77.6696L275.81 82.3712L263.753 85.5405L255.169 86.7671L244.848 86.1535L247.914 91.3664L254.454 90.0375L260.687 90.9581L265.081 95.046L266.716 103.939L263.957 111.605L259.563 114.058L258.746 118.248L268.044 136.238L271.11 133.683L278.672 132.456L282.861 132.354L283.985 135.625L280.613 142.473L275.095 146.868L267.84 150.343L260.176 151.57L257.213 149.832L254.147 145.642L244.235 112.525L241.987 112.627L239.841 118.965L234.834 128.368L228.601 136.034L220.631 141.962L220.12 142.984L222.163 146.664L222.572 150.753L224.411 151.264L224.207 152.49L220.324 155.25L215.215 156.681L205.609 155.659L198.865 152.184L194.88 145.949L194.471 140.634Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                d: "M229.337 160C254.781 160 275.407 156.679 275.407 152.581C275.407 148.483 254.781 145.162 229.337 145.162C203.893 145.162 183.267 148.483 183.267 152.581C183.267 156.679 203.893 160 229.337 160Z",
                                fill: "#161B22",
                                fillOpacity: "0.5",
                            }),
                            (0, y.jsx)("path", {
                                d: "M297.468 79.8266C296.557 79.5229 295.065 78.435 294.432 77.9289L293.673 76.7905C297.973 70.465 305.356 61.2544 307.333 62.2428C308.85 63.0018 311.127 64.0852 314.921 61.8633C315.791 62.5389 317.04 63.7903 316.818 65.784C316.059 72.6155 311.506 75.2722 308.091 77.9289C304.677 80.5856 298.606 80.2061 297.468 79.8266Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                d: "M203.748 107.271L219.072 99.8261L224.757 91.1499L229.28 86.8487L234.025 84.4756L223.868 86.8487L202.589 93.9684L186.891 101.904L169.448 112.509L162.033 118.813L161.366 120.889L164.48 121.928L171.129 120.41L186.891 115.155L203.748 107.271Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                d: "M217.528 156.364H210.332L204.907 155.478L199.924 153.041L195.717 147.504L194.721 140.195L196.381 136.097L203.91 131.445L214.761 125.244L219.743 121.146L226.497 113.836L237.901 123.361L232.143 132.331L227.161 137.315L219.743 142.852L221.957 146.95L222.621 151.38H223.397L225.168 151.934L221.957 154.813L217.528 156.364Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                d: "M251.881 137.302L250.528 133.669L266.127 132.742L268.263 136.875L251.881 137.302Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                d: "M263.171 145.446L254.094 146.491L258.512 151.232L262.368 151.875L271.847 149.223L263.171 145.446Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                d: "M269.711 134.167L273.767 132.742H277.305H282.656L283.95 134.167V136.713L267.985 136.195L269.711 134.167Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                fillRule: "evenodd",
                                clipRule: "evenodd",
                                d: "M270.086 37.5955C269.612 36.8498 268.796 35.7169 267.529 34.4246C265.456 32.3048 261.724 29.2632 255.689 26.9591C248.778 24.3324 240.947 24.6089 234.22 27.6964L233.99 27.7886L233.76 27.6964C226.909 25.2444 222.997 26.8076 221.361 27.8354C223.604 28.6136 227.762 31.0977 229.337 36.5904L228.231 36.9131C226.665 31.3831 222.104 29.1712 220.445 28.7564L222.657 36.867L222.518 37.0974C222.491 37.125 220.914 39.3288 219.652 42.4565C219.701 42.4198 219.75 42.3846 219.801 42.3509C220.63 41.7978 221.643 41.6596 222.703 42.0282C225.051 42.8114 226.755 45.3902 228.552 48.1079L228.554 48.1113C230.305 50.784 232.101 53.5029 234.358 54.102C235.932 54.5066 239.083 54.1219 242.742 53.6751L243.02 53.6412L243.1 53.6313C250.227 52.7574 259.068 51.6734 263.245 55.3002C266.331 57.9269 269.28 62.5813 265.687 69.6781C264.884 71.2835 262.859 74.6017 261.831 76.2839C261.679 76.5332 261.549 76.7465 261.448 76.9131C261.909 77.4661 262.6 78.6182 262.277 80.0468C262.183 80.4835 262.006 80.9014 261.744 81.3006C262.908 80.7184 264.029 80.0788 265.095 79.3863C265.179 79.2317 265.337 79.138 265.509 79.1139C265.601 79.0518 265.693 78.9895 265.785 78.9266L265.733 78.8486C265.771 78.8258 265.872 78.7955 266.026 78.7597C266.19 78.6448 266.352 78.5286 266.514 78.4111C265.793 78.1823 265.163 78.03 264.673 77.973L264.811 76.821C265.533 76.9076 266.507 77.1709 267.621 77.5654C269.436 76.1115 271.028 74.4861 272.32 72.7196C276.195 67.4414 276.219 59.548 275.923 55.5519C275.6 56.3155 275.289 56.8848 275.039 57.1896L274.117 56.4522C274.947 55.3923 277.065 49.6781 276.467 44.5629C276.145 41.9822 275.223 40.0468 273.61 38.7564C267.956 37.6338 261.331 42.9026 260.442 43.6098L260.441 43.61C260.382 43.6575 260.348 43.6843 260.342 43.6872L259.606 42.8117C259.865 42.5891 264.752 38.454 270.086 37.5955ZM266.762 79.7534C267.306 79.6538 268.184 79.5377 269.2 79.4309C270.296 79.9025 271.458 80.4615 272.594 81.0695C271.728 81.4386 270.757 81.8352 269.719 82.2459C268.69 81.2558 267.656 80.388 266.762 79.7534ZM268.549 82.7037C267.505 81.7318 266.479 80.9122 265.647 80.3841C261.546 83.0281 256.688 84.9216 251.672 85.8196C254.376 85.8732 257.795 85.7571 261.731 85.2277L261.724 85.208C264.031 84.4055 266.398 83.5362 268.549 82.7037ZM268.704 83.8691C268.951 83.7718 269.199 83.6732 269.448 83.5738C269.473 83.5986 269.497 83.6233 269.522 83.6481C269.248 83.7239 268.975 83.7977 268.704 83.8691ZM270.592 83.1169C271.9 82.5893 272.962 82.139 273.824 81.7529C274.03 81.8717 274.233 81.9917 274.435 82.1127C273.214 82.5333 271.983 82.9309 270.761 83.2928C270.705 83.2339 270.649 83.1753 270.592 83.1169ZM275.108 81.1563C275.358 81.3076 275.605 81.4605 275.848 81.6148C278.671 80.5974 281.407 79.4825 283.829 78.4331C283.071 78.5324 282.436 78.5721 281.903 78.5721C279.968 78.5721 279.323 78.0191 279.139 77.6505C279.001 77.3739 279.047 77.0053 279.277 76.6366C280.264 74.933 285.958 70.8741 290.339 70.6551C291.967 68.1792 296.131 63.2789 307.933 61.89L308.071 63.0421C296.6 64.3785 292.73 68.8486 290.795 72.0744C290.38 72.7656 290.38 73.1804 290.472 73.2726C290.703 73.5491 291.716 73.503 292.638 73.0882L293.374 72.7196L293.466 73.5491C293.974 79.7242 300.469 79.4016 300.745 79.3555C306.966 79.3555 311.249 75.2541 313.231 72.8118C315.534 70.0007 317.93 62.8117 314.889 59.5398C312.089 56.4636 306.865 58.099 300.858 59.9797L300.791 60.0006C300.239 60.1849 299.641 60.3691 299.042 60.5533L299.041 60.5536C292.784 62.4962 276.096 71.3131 273.858 72.4966C273.664 72.8076 273.459 73.1127 273.242 73.4108C272.015 75.0805 270.532 76.6289 268.853 78.0316C269.027 78.1015 269.202 78.1737 269.38 78.2482C272.453 77.8903 276.481 77.6507 277.389 78.3878C277.711 78.6182 277.803 79.0329 277.665 79.3555C277.574 79.6283 277.404 80.0407 275.108 81.1563ZM273.943 80.4791C275.099 79.957 275.955 79.5196 276.375 79.2173C275.547 79.0263 273.548 79.0796 271.537 79.2242C272.341 79.614 273.152 80.0361 273.943 80.4791ZM275.678 82.8964C274.335 83.3707 272.974 83.8209 271.62 84.23C273.032 85.8336 274.242 87.5491 274.808 89.033C274.901 89.3094 274.762 89.6781 274.486 89.7703C274.44 89.8163 274.348 89.8163 274.301 89.8163C274.071 89.8163 273.841 89.6781 273.749 89.4477C273.179 87.9706 271.885 86.2035 270.411 84.5846C268.658 85.0826 266.928 85.5025 265.271 85.8072C260.388 86.7288 256.15 87.0053 252.787 87.0053C249.053 87.0053 246.451 86.6552 245.35 86.4696L248.267 90.8661C250.307 90.3556 252.226 89.9163 253.893 89.6781C257.348 89.1712 260.757 90.1389 263.245 92.3509C265.917 94.7472 267.345 98.2956 267.253 102.397C267.023 110.507 262.185 113.595 259.836 114.977C259.801 115.813 259.687 116.728 259.255 117.464C259.342 117.646 259.477 117.931 259.655 118.305C261.05 121.254 265.021 129.646 267.992 135.162C270.985 131.35 278.546 131.869 280.291 132.305C280.314 132.305 280.337 132.293 280.36 132.282C280.383 132.27 280.406 132.259 280.429 132.259C281.258 131.937 283.054 131.245 284.298 133.227C285.681 135.439 282.18 141.014 280.844 142.766C276.743 148.203 267.207 151.66 261.909 152.075C261.77 152.121 261.632 152.121 261.448 152.121C256.564 152.121 253.709 146.176 253.617 145.899L253.57 145.807L249.239 131.117C249.223 131.085 249.208 131.052 249.194 131.015L249.208 131.011L243.811 112.709C243.399 112.747 242.985 112.779 242.573 112.805C240.511 118.757 237.698 124.439 234.22 129.679C229.292 136.976 222.664 141.299 220.503 142.59C222.848 145.174 223.262 148.824 223.053 150.611C223.96 150.358 224.454 150.37 224.776 150.646C225.098 150.923 225.237 151.245 225.237 151.66C225.19 152.305 224.684 153.365 221.137 155.392C219.34 156.498 216.299 156.96 213.074 156.96C208.974 156.96 204.643 156.176 202.064 154.886C198.24 152.95 195.752 150.093 194.601 146.453C193.311 142.212 194.277 138.019 195.245 136.176C196.029 134.747 201.51 131.567 209.158 127.236C211.37 125.992 213.489 124.794 214.825 123.964C218.962 121.427 225.711 113.532 227.733 111.121C225.533 110.433 223.726 109.597 222.518 108.71C218.81 105.96 217.497 103.409 218.474 99.9031C213.297 102.625 196.654 111.302 190.316 114.102C187.091 115.485 170.829 121.982 163.872 121.982C162.95 121.982 162.167 121.844 161.66 121.614C160.969 121.291 160.739 120.83 160.647 120.462C160.417 119.632 159.863 117.42 173.961 108.572C181.424 103.872 190.592 98.8947 196.351 96.0376C206.132 91.1855 226.274 85.182 231.492 83.6744C226.127 81.4154 221.545 77.5065 218.465 72.5352C216.636 69.7179 215.881 66.3776 216.316 63.0912C214.731 60.7197 210.757 59.2164 208.467 59.079C208.145 59.079 207.915 58.8025 207.915 58.48C207.915 58.1574 208.191 57.9269 208.513 57.9269C210.679 58.0905 214.477 59.342 216.593 61.6173C216.657 61.3605 216.727 61.1047 216.805 60.8499L216.801 60.8449C216.341 60.1354 212.858 54.7574 208.283 52.8578C208.007 52.7196 207.869 52.397 207.961 52.1205C208.099 51.8439 208.421 51.7057 208.698 51.7979C212.714 53.4542 215.814 57.428 217.133 59.3094C217.195 58.5316 217.156 57.5975 217.104 56.3736C217.097 56.2056 217.09 56.0323 217.083 55.8532C216.991 54.2403 216.898 52.2587 216.898 49.5859L216.899 49.4938H216.898L216.899 49.4772C216.942 43.4355 220.543 37.8276 221.367 36.6366L219.294 28.9407C219.247 28.8025 219.247 28.6181 219.294 28.4799C219.335 28.2315 219.488 28.0202 219.686 27.8461L219.57 27.7425L219.583 27.7297C219.897 27.409 224.114 23.1001 233.898 26.4983C240.855 23.3646 248.917 23.1343 256.058 25.8532C266.329 29.7355 270.296 35.62 271.334 37.4582C272.219 37.4078 273.107 37.4612 273.979 37.6504L274.117 37.6965L274.209 37.7886C276.099 39.2633 277.25 41.4753 277.573 44.4246C277.948 47.3826 277.48 50.5178 276.802 52.9698L276.817 53.0777C276.927 53.8659 277.317 56.6485 277.157 60.185C277.049 63.1933 276.513 67.1422 274.855 70.6643C279.729 68.1036 293.075 61.2023 298.719 59.4477C299.018 59.3556 299.305 59.2635 299.593 59.1715L299.594 59.1711L299.596 59.1708C299.883 59.0787 300.17 58.9867 300.469 58.8947L300.562 58.8656C306.7 56.9409 312.464 55.1338 315.764 58.7103C319.358 62.6274 316.594 70.5537 314.152 73.5029C312.033 76.0836 307.472 80.4615 300.791 80.4615C300.791 80.5537 300.699 80.5537 300.515 80.5537C299.273 80.5537 294.168 80.2748 292.68 75.5692C290.607 76.6231 284.18 79.7813 277.034 82.4079C277.512 82.7444 277.961 83.0835 278.371 83.4214C278.429 83.4402 278.486 83.4672 278.54 83.503C279.139 84.0099 279.646 84.5168 280.106 85.1159C280.291 85.3463 280.245 85.715 280.014 85.9454C279.922 86.0836 279.784 86.1297 279.646 86.1297C279.461 86.1297 279.323 86.0376 279.185 85.8993C279.137 85.8351 279.088 85.7721 279.039 85.7102C278.319 84.8193 277.111 83.8448 275.678 82.8964ZM250.679 131.899L254.675 145.439C254.731 145.561 254.935 145.964 255.271 146.5C255.71 145.956 256.007 143.188 254.399 137.65C253.274 133.817 251.72 132.453 250.679 131.899ZM255.929 147.463C255.959 147.435 255.987 147.405 256.012 147.374C257.21 146.268 256.979 142.397 255.505 137.328C253.872 131.791 251.21 130.813 250.293 130.476L250.254 130.462L248.786 125.492C248.977 125.574 249.176 125.623 249.378 125.623C249.516 125.623 249.608 125.623 249.654 125.669C249.93 125.577 250.115 125.392 250.253 125.116C250.944 123.78 250.99 119.033 250.069 116.222C249.519 114.573 248.761 113.177 248.066 112.295L254.123 111.705C254.399 111.844 254.583 112.075 254.675 112.397C254.675 112.489 254.629 112.765 254.583 112.951C254.307 114.287 253.893 116.499 254.768 117.789C255.137 118.296 255.597 118.572 256.242 118.664C256.518 118.71 256.749 118.71 256.979 118.71C257.551 118.71 258.024 118.588 258.382 118.378C259.826 121.46 265.979 134.498 269.004 139.264L269.971 138.618C269.57 137.983 269.11 137.193 268.61 136.292C271.004 132.365 279.194 133.092 280.152 133.457L280.337 133.549L280.521 133.457C280.567 133.434 280.625 133.411 280.682 133.388H280.683C280.74 133.365 280.798 133.342 280.844 133.319C281.903 132.904 282.64 132.719 283.332 133.825C284.068 135.024 282.134 139.126 279.922 142.074C276.099 147.189 266.792 150.553 261.816 150.923C259.215 151.125 257.158 149.114 255.929 147.463ZM292.347 74.4427C291.748 74.7491 290.612 75.3186 289.091 76.0419L289.09 76.0375C284.99 77.2357 280.982 77.7426 280.244 77.1896C280.835 76.1356 285.589 72.4978 289.604 71.8857C289.056 73.0161 289.313 73.6842 289.643 74.0559C290.185 74.6889 291.304 74.7452 292.347 74.4427ZM255.735 83.6412L255.746 83.6744C252.338 84.6977 248.759 85.2541 245.231 85.2541C244.081 85.2541 242.931 85.2082 241.828 85.0705C241.096 83.7756 239.793 82.4594 237.722 82.3048C236.629 82.2235 235.263 82.6028 233.773 83.3074C227.857 81.3056 222.81 77.2768 219.524 71.9823C217.359 68.7103 216.852 64.7011 218.049 60.9684C218.506 59.6909 218.421 58.2327 218.285 55.923L218.281 55.8532C218.189 54.2403 218.095 52.3048 218.095 49.632C218.095 49.3986 218.102 49.1656 218.114 48.9331C218.318 47.2616 218.963 44.2742 220.445 43.2725C220.998 42.9039 221.597 42.8577 222.334 43.0882C224.262 43.6711 225.885 46.1303 227.456 48.5125L227.587 48.7103L227.731 48.9295C229.572 51.7168 231.434 54.5344 234.082 55.208C235.83 55.6565 239.063 55.2757 242.844 54.8303L243.158 54.7932L243.3 54.7763C250.186 53.9495 258.71 52.9262 262.507 56.1758C266.561 59.632 267.299 64.0099 264.673 69.1712C263.613 71.291 260.296 76.6366 260.25 76.6827L260.02 77.0975L260.342 77.4201C260.342 77.4201 261.448 78.526 261.172 79.8164C260.941 80.8302 259.836 82.3048 255.735 83.6412ZM243.912 86.3863C243.393 86.369 242.88 86.3394 242.368 86.2935C242.43 86.4819 242.478 86.6595 242.513 86.8209L241.407 87.0514C241.406 87.0477 241.404 87.0417 241.402 87.0335L241.395 87.0066C241.28 86.5878 240.474 83.6318 237.676 83.4569C236.113 83.3366 233.144 84.698 230.027 86.9969L230.029 87.0053L230.012 87.0079C229.204 87.6044 228.386 88.2637 227.581 88.9765L227.587 88.9869L227.546 89.008C225.523 90.8035 223.577 92.9356 222.058 95.2541C221.146 96.6655 220.456 97.9009 219.994 99.0104L220.031 99.0791C220.024 99.0834 219.995 99.0989 219.947 99.1251C218.47 102.767 219.489 105.051 223.21 107.789C226.573 110.277 235.51 112.397 244.033 111.521L254.261 110.507L254.399 110.553C255.137 110.83 255.643 111.475 255.781 112.213V112.305C255.781 112.489 255.735 112.719 255.643 113.135C255.627 113.223 255.609 113.318 255.59 113.42V113.421C255.387 114.493 255.054 116.252 255.643 117.051C255.781 117.282 256.012 117.42 256.334 117.466C257.071 117.558 257.624 117.466 257.946 117.19C258.546 116.637 258.638 115.485 258.638 114.609V114.287L258.96 114.102C261.172 112.811 265.825 110.093 266.009 102.351C266.101 98.6182 264.811 95.3924 262.415 93.2265C260.158 91.1988 257.164 90.3693 253.985 90.8302C252.034 91.1146 249.727 91.6856 247.282 92.2905L247.28 92.2909C246.953 92.372 246.623 92.4536 246.291 92.5352C240.486 94.0099 233.944 95.6689 229.613 94.7012L229.889 93.5951C231.337 93.9242 233.085 93.9302 234.993 93.7347C235.341 90.8739 238.121 87.4235 238.582 86.8509C238.614 86.8117 238.635 86.786 238.643 86.7749L239.519 87.5122C239.476 87.5546 236.673 90.9026 236.182 93.5906C238.365 93.288 240.713 92.768 243.034 92.197L242.276 88.4034L243.405 88.1774L244.153 91.9177C244.795 91.7556 245.432 91.5916 246.06 91.4293C246.404 91.3407 246.745 91.2527 247.084 91.166L243.912 86.3863ZM226.88 88.0749C227.11 87.872 227.34 87.6717 227.572 87.4747C225.839 87.8603 224.135 88.3595 222.472 88.9869C219.432 90.0929 217.221 91.1528 216.115 91.7979C217.359 91.6136 219.755 90.9684 222.795 89.8625C223.658 89.5602 225.817 88.6105 226.88 88.0749ZM229.555 85.9C227.026 86.319 224.501 86.993 222.104 87.8809C219.985 88.6182 218.049 89.4477 216.622 90.1851C214.687 91.1988 214.088 91.7979 214.318 92.4431C214.41 92.8118 214.779 92.9961 215.424 92.9961C215.931 92.9961 216.575 92.904 217.497 92.6735C219.017 92.3049 221.044 91.7057 223.164 90.9224C223.482 90.8011 223.954 90.6101 224.484 90.3886C223.152 91.7863 221.978 93.2324 221.091 94.609C220.219 95.9491 219.54 97.1633 219.057 98.2809C218.723 98.4543 218.201 98.7263 217.527 99.0778L217.501 99.0914C211.906 102.009 195.984 110.314 189.809 113.043C182.161 116.406 165.484 122.166 162.167 120.554C161.884 120.433 161.813 120.276 161.769 120.176C161.763 120.162 161.757 120.15 161.752 120.139C161.66 119.77 161.844 117.512 174.56 109.54C182.023 104.84 191.145 99.9086 196.858 97.0514C205.927 92.553 224.051 87.0788 230.62 85.1434C230.266 85.3846 229.91 85.6372 229.555 85.9ZM246.673 112.43L246.796 112.418L246.798 112.443C246.75 112.443 246.707 112.438 246.673 112.43ZM244.979 112.595L246.624 112.435C246.936 112.676 248.108 113.936 248.963 116.545C249.93 119.402 249.7 123.642 249.286 124.471C249.066 124.383 248.598 124.004 248.196 123.493L244.979 112.595ZM241.313 112.864C236.834 113.008 232.47 112.429 228.932 111.47L228.927 111.476C227.394 113.313 220.008 122.159 215.424 124.978C214.042 125.807 211.922 127.005 209.711 128.249C204.597 131.153 196.904 135.531 196.213 136.729C195.337 138.388 194.415 142.212 195.66 146.084C196.673 149.401 198.977 151.983 202.524 153.826C203.768 154.471 205.473 154.978 207.361 155.3C210.08 155.669 215.148 153.641 218.833 152.167C220.062 151.681 221.037 151.297 221.819 151.015C222.106 150.121 222.073 145.513 219.109 142.858C215.101 139.264 205.427 140.462 204.643 140.784C204.643 140.784 204.689 140.738 204.782 140.692L203.953 139.862C204.63 139.184 214.942 137.928 219.636 141.762C221.338 140.761 228.281 136.384 233.207 129.033C236.554 123.967 239.27 118.564 241.313 112.864ZM222.38 152.075L222.373 152.053C221.448 152.383 220.328 152.832 219.34 153.226V153.227C217.175 154.148 214.687 155.162 212.338 155.807C215.608 155.9 218.787 155.484 220.63 154.379C223.854 152.535 224.132 151.706 224.132 151.567C223.855 151.567 223.278 151.736 222.563 151.986C222.508 152.022 222.448 152.052 222.38 152.075ZM272.505 53.0421L271.354 52.8578C271.952 49.0329 272.136 42.3048 271.168 41.2449C270.754 40.7841 268.036 41.7518 265.457 43.2725L264.857 42.3048C269.971 39.2633 271.538 40.0006 271.998 40.4614C273.749 42.2587 272.735 51.4292 272.505 53.0421ZM230.397 76.314C231.272 76.821 232.285 77.1435 233.069 77.1435C233.668 77.1435 234.174 76.9592 234.451 76.5906C235.05 75.5307 233.806 74.056 232.239 73.1804C231.457 72.7196 230.673 72.4431 229.983 72.3509C228.831 72.1665 228.369 72.6735 228.185 72.95C228.001 73.2265 227.863 73.8717 228.554 74.7933C228.969 75.3463 229.613 75.8532 230.397 76.314ZM230.949 75.3463C229.613 74.5628 229.107 73.6873 229.153 73.503C229.337 73.3647 230.305 73.3647 231.641 74.1942C233.023 74.9776 233.484 75.8071 233.437 75.9915C233.299 76.1297 232.332 76.1297 230.949 75.3463ZM168.34 115.899C168.525 116.222 168.893 116.406 169.492 116.406C170.137 116.406 171.059 116.176 172.257 115.761C174.145 115.07 176.448 113.963 178.844 112.581C181.24 111.199 183.359 109.77 184.879 108.48C186.722 106.913 187.367 105.9 186.952 105.162C186.538 104.424 185.34 104.47 183.037 105.3C181.148 105.992 178.844 107.098 176.448 108.48C174.053 109.863 171.933 111.291 170.413 112.581C168.571 114.149 167.926 115.162 168.34 115.899ZM178.246 111.567C173.362 114.379 170.229 115.301 169.4 115.254C169.723 114.517 172.118 112.213 177.002 109.402C181.885 106.59 185.018 105.669 185.847 105.715C185.524 106.498 183.129 108.757 178.246 111.567ZM193.264 102.166C192.665 102.166 192.343 101.982 192.205 101.66C191.882 100.968 192.527 100.231 194.463 98.9408C195.937 97.973 198.01 96.8671 200.22 95.8071C202.478 94.7472 204.643 93.9177 206.303 93.4109C208.513 92.7656 209.481 92.7656 209.803 93.4569C210.126 94.1482 209.481 94.8855 207.546 96.1758C206.071 97.1435 203.999 98.2496 201.787 99.3095C199.53 100.369 197.364 101.199 195.706 101.706C194.601 102.028 193.817 102.166 193.264 102.166ZM208.421 94.1482C207.315 94.2864 204.643 95.0698 200.728 96.9131C196.765 98.7565 194.463 100.277 193.633 101.014C194.739 100.876 197.411 100.093 201.326 98.2496C205.243 96.4062 207.592 94.8855 208.421 94.1482Z",
                                fill: "#1F6FEB",
                            }),
                            (0, y.jsx)("path", {
                                d: "M319.404 147.004C319.404 147.004 321.569 124.885 320.74 121.751C320.233 123.548 311.341 137.926 311.341 137.926V123.917C311.341 123.917 309.361 130.368 308.716 132.35C308.071 129.354 303.418 120.461 304.109 121.475C304.8 122.488 304.938 131.843 304.109 131.843C303.464 131.658 300.976 123.087 298.489 120.276C299.455 121.244 300.147 128.525 300.976 132.166C300.653 130.829 293.974 126.221 290.749 125.575C291.071 127.695 295.862 131.658 296.83 134.47C297.797 137.281 296.185 140.415 296.185 140.415L302.266 144.977L319.404 147.004Z",
                                fill: "#161B22",
                            }),
                            (0, y.jsx)("mask", {
                                id: "mask1",
                                "mask-type": "alpha",
                                maskUnits: "userSpaceOnUse",
                                x: "296",
                                y: "25",
                                width: "59",
                                height: "49",
                                children: (0, y.jsx)("path", {
                                    fillRule: "evenodd",
                                    clipRule: "evenodd",
                                    d: "M354.381 25.0488H296.709V72.8309C301.537 67.0583 308.191 60.8881 308.191 62.6719C308.191 64.5762 311.601 65.439 314.773 61.7546C315.643 62.4302 317.04 63.7908 316.818 65.7844C316.424 69.3284 315.01 71.7488 313.262 73.6286H354.381V25.0488Z",
                                    fill: "#C4C4C4",
                                }),
                            }),
                            (0, y.jsxs)("g", {
                                mask: "url(#mask1)",
                                children: [
                                    (0, y.jsx)("path", {
                                        d: "M266.147 117.512C265.963 116.729 302.496 74.7009 305.629 71.8438C308.762 68.9866 336.819 35.899 338.846 34.747C340.09 31.982 335.989 29.6317 334.147 30.9221C332.442 34.2862 302.865 69.2171 300.193 72.0742C297.521 74.9313 276.099 98.1111 266.746 105.53C264.719 111.153 262.83 112.121 261.402 113.733C261.171 114.609 261.448 115.807 263.153 116.913C264.857 118.019 266.147 117.512 266.147 117.512Z",
                                        fill: "#6E7681",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M329.078 42.6726C326.407 45.2993 316.364 57.1426 313.737 60.2302C308.117 66.9123 284.851 93.2718 278.908 99.9077C276.145 103.041 265.594 113.825 262.83 116.682C262.922 116.774 263.061 116.866 263.199 116.912C264.903 118.065 266.193 117.511 266.193 117.511C266.009 116.728 302.542 74.7003 305.676 71.8431C308.808 68.986 336.865 35.8983 338.892 34.7463C339.214 34.0089 339.168 33.1794 338.754 32.4883C335.805 36.1288 332.396 39.4007 329.078 42.6726Z",
                                        fill: "#484F58",
                                    }),
                                ],
                            }),
                            (0, y.jsx)("g", {
                                opacity: "0.5",
                                children: (0, y.jsx)("path", {
                                    d: "M321.385 120.277C321.017 119.125 320.878 117.881 321.063 116.637C321.201 116.083 321.569 115.438 322.123 115.438C322.399 115.485 322.629 115.577 322.859 115.761C323.321 116.175 323.781 116.591 324.149 117.097C327.144 120.645 329.356 124.793 330.784 129.217C330.6 127.005 331.797 124.886 333.455 123.41C335.114 121.936 337.233 121.152 339.398 120.599C340.182 120.369 341.15 120.277 341.748 120.83C342.116 121.245 342.255 121.844 342.07 122.397C341.886 122.904 341.564 123.364 341.15 123.733C340.182 124.562 339.076 125.254 337.971 125.806C335.575 127.144 333.317 128.71 331.198 130.461C331.014 130.646 330.784 130.784 330.553 130.83C330.415 130.83 330.23 130.83 330.092 130.784C325.485 129.724 322.537 124.424 321.385 120.277Z",
                                    fill: "#30363D",
                                }),
                            }),
                            (0, y.jsx)("path", {
                                d: "M307.979 146.775C307.84 146.315 311.387 134.794 311.387 134.794C311.387 134.794 321.938 128.297 323.827 127.19C325.716 126.084 328.342 126.269 328.342 126.269L334.101 124.103C334.101 124.103 349.948 128.297 350.409 128.435C350.87 128.573 353.68 133.734 354.924 135.439C356.168 137.144 356.767 138.25 356.951 141.015L357.089 143.826L348.705 152.812H339.076C339.076 152.812 332.257 155.438 330.691 154.978C329.124 154.518 323.551 153.135 321.523 151.384C319.496 149.633 307.979 146.775 307.979 146.775Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M328.434 128.295C328.388 127.972 327.651 119.999 335.207 111.336L335.897 111.936C332.074 116.267 330.508 120.461 329.862 123.225C329.171 126.221 329.356 128.156 329.356 128.202L328.434 128.295Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M336.035 112.579C335.207 112.579 334.515 111.889 334.515 111.059C334.515 110.23 335.207 109.539 336.035 109.539C336.865 109.539 337.556 110.23 337.556 111.059C337.556 111.889 336.865 112.579 336.035 112.579ZM336.035 110.46C335.713 110.46 335.437 110.737 335.437 111.059C335.437 111.381 335.713 111.657 336.035 111.657C336.358 111.657 336.635 111.381 336.635 111.059C336.635 110.737 336.358 110.46 336.035 110.46Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M340.274 115.207C339.49 115.207 338.846 114.562 338.846 113.779C338.846 112.996 339.49 112.351 340.274 112.351C341.057 112.351 341.702 112.996 341.702 113.779C341.702 114.562 341.057 115.207 340.274 115.207ZM340.274 113.272C339.997 113.272 339.766 113.502 339.766 113.779C339.766 114.055 339.997 114.286 340.274 114.286C340.55 114.286 340.78 114.055 340.78 113.779C340.78 113.502 340.55 113.272 340.274 113.272Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M334.055 117.697C332.764 117.697 331.751 117.144 331.705 117.098L332.165 116.314C332.257 116.36 334.055 117.374 335.667 116.314C336.911 115.531 338.108 114.609 339.214 113.688L339.813 114.379C338.661 115.347 337.417 116.268 336.173 117.098C335.483 117.558 334.745 117.697 334.055 117.697Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M325.623 142.766C328.019 140.508 330.691 138.48 333.501 136.729C335.483 137.144 337.325 136.822 338.846 137.052C342.07 134.194 345.849 130.877 349.165 128.157C345.387 127.144 334.055 124.148 334.055 124.148L328.296 126.315C328.296 126.315 325.669 126.176 323.781 127.236C322.307 128.111 315.258 132.443 312.493 134.148C314.29 136.776 322.859 140.692 325.623 142.766Z",
                                fill: "#6E7681",
                            }),
                            (0, y.jsx)("path", {
                                d: "M312.631 134.239L312.493 134.055C315.12 132.443 322.261 128.018 323.781 127.143C325.577 126.13 328.019 126.176 328.342 126.222L334.101 124.056H334.147C334.239 124.102 345.479 127.051 349.257 128.064L349.211 128.295C345.572 127.328 334.883 124.47 334.147 124.286L328.434 126.452H328.388C328.342 126.452 325.762 126.314 323.965 127.374C322.399 128.203 315.258 132.627 312.631 134.239Z",
                                fill: "#6E7681",
                            }),
                            (0, y.jsx)("path", {
                                d: "M56.5281 157.927C78.7151 157.927 96.7013 156.152 96.7013 153.963C96.7013 151.775 78.7151 150 56.5281 150C34.3411 150 16.355 151.775 16.355 153.963C16.355 156.152 34.3411 157.927 56.5281 157.927Z",
                                fill: "#161B22",
                                fillOpacity: "0.5",
                            }),
                            (0, y.jsx)("path", {
                                d: "M78.3652 141.29C78.3652 141.29 79.1485 147.281 80.7148 148.894C82.2812 150.506 88.6849 154.977 89.0074 154.147C85.8747 150.23 82.5577 140.553 82.5577 140.553L78.3652 141.29Z",
                                fill: "#30363D",
                            }),
                            (0, y.jsx)("path", {
                                d: "M57.8184 141.705C57.7262 141.751 57.6802 141.797 57.6342 141.843C57.542 141.935 57.6342 142.12 57.6802 142.212C58.4173 143.456 58.9702 144.838 59.3847 146.222C59.6612 147.235 60.214 148.618 61.1354 148.156C62.7479 147.282 61.4119 145.162 61.1354 143.364C61.3198 144.47 64.9132 143.18 66.065 141.521C67.5392 139.401 63.9918 139.079 62.7018 139.401C61.0433 139.815 59.3847 140.968 57.8184 141.705Z",
                                fill: "#30363D",
                            }),
                            (0, y.jsx)("path", {
                                d: "M71.5007 128.756C69.3354 128.526 67.124 128.572 65.143 129.447C63.2541 130.277 61.7338 131.797 60.3517 133.318C59.9371 133.825 59.4764 134.24 58.9236 134.609C58.3707 134.885 57.7718 135.023 57.1729 135.023C54.2704 135.115 51.5523 133.503 49.6174 131.383C47.6824 129.263 46.3004 126.682 44.8261 124.194C42.4765 120.231 39.6201 116.267 35.566 114.101C29.9454 111.06 22.5742 111.982 17.4143 115.853C12.2545 119.677 9.25996 126.038 8.79926 132.397C8.70712 133.825 8.98353 135.623 10.3657 135.945L12.4849 131.843C13.5445 129.816 14.6502 127.742 16.4469 126.314C18.2436 124.885 20.9157 124.378 22.8046 125.668C24.2788 126.682 24.8777 128.572 25.062 130.369C25.2463 132.166 25.108 133.963 25.5227 135.715C26.5363 139.954 30.6826 142.904 34.921 143.733C38.0077 144.332 41.2326 144.056 44.1811 142.904C49.0645 140.968 53.303 136.729 58.5089 137.051C59.2 138.894 60.9967 140.139 62.8856 140.692C64.7744 141.244 66.8015 141.106 68.7364 141.014L66.1566 144.102C67.4926 146.82 69.3354 149.263 71.5007 151.337C72.5603 148.664 71.6849 145.945 70.0264 143.594C70.4411 142.766 71.1321 142.074 71.9614 141.706C73.8963 142.719 78.964 142.442 81.1293 142.166C81.0372 143.733 81.3597 147.328 82.3732 148.848C83.3867 150.369 86.6117 153.641 88.4544 154.609C89.6062 155.253 93.1536 156.083 93.7065 155.023C89.3298 153.18 84.9992 148.71 85.0453 143.964C85.0453 141.659 87.0724 140.139 86.9341 138.203C86.8421 136.498 84.0778 134.517 82.88 133.549C79.6551 130.922 75.693 129.263 71.5007 128.756Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M47.2678 136.591C45.5632 136.591 43.7664 136.959 42.5226 135.577C42.1079 135.023 41.7393 134.425 41.4169 133.825C40.4033 132.259 39.1594 132.074 37.3627 132.213C35.1974 132.351 34.4142 131.521 33.5389 129.54C31.0511 124.01 24.7856 119.678 18.7504 122.904C14.1434 125.392 11.3331 130.83 10.0431 135.715C10.0431 135.761 9.99707 135.807 9.99707 135.853C10.0893 135.899 10.1813 135.945 10.3196 135.991L12.4849 131.89C13.5445 129.862 14.6501 127.788 16.4468 126.36C18.2437 124.932 20.9157 124.424 22.8045 125.714C24.2788 126.728 24.8777 128.618 25.062 130.415C25.2463 132.213 25.1081 134.009 25.5227 135.761C26.5363 140 30.6826 142.95 34.921 143.78C38.0077 144.378 41.2326 144.102 44.1811 142.95C47.6363 141.567 50.8152 139.033 54.2244 137.789C52.1051 136.867 49.8016 136.591 47.2678 136.591Z",
                                fill: "#30363D",
                            }),
                            (0, y.jsx)("g", {
                                opacity: "0.6",
                                children: (0, y.jsx)("path", {
                                    opacity: "0.8",
                                    d: "M70.5332 134.747C70.6253 134.747 74.6795 137.466 74.6334 138.756C74.5873 140.046 70.9478 141.982 70.9478 141.982C70.9478 141.982 72.7445 139.724 72.3299 138.342C71.9152 136.959 70.5332 134.747 70.5332 134.747Z",
                                    fill: "#8B949E",
                                }),
                            }),
                            (0, y.jsx)("path", {
                                d: "M85.7362 135.945C85.3216 137.328 84.5384 138.618 84.2159 140.093C83.7553 141.89 84.1238 143.826 85.2295 145.3C85.1373 144.886 85.1373 144.424 85.1373 144.01C85.1373 141.706 87.1644 140.185 87.0262 138.25C86.934 137.466 86.4273 136.683 85.7362 135.945Z",
                                fill: "#30363D",
                            }),
                            (0, y.jsx)("path", {
                                d: "M88.501 133.134C89.5606 132.719 90.4359 133.825 89.6988 136.359L91.0348 136.405C90.8044 135.715 90.7122 134.977 90.8044 134.24C90.8505 133.595 91.4033 133.134 92.0484 133.18H92.0944C92.8315 133.226 93.0618 133.825 93.108 134.562C93.108 135.253 92.9698 135.945 92.6473 136.59C94.2596 137.743 95.135 139.723 94.9047 141.705C94.7665 142.396 94.6283 143.088 94.5822 143.779C94.5361 144.516 94.9047 145.162 95.5036 145.53C95.8721 145.668 96.2868 145.714 96.6554 145.806C97.0239 145.898 97.4385 146.222 97.3925 146.636C97.3463 146.958 97.0239 147.142 96.7474 147.328C94.49 148.434 91.864 148.434 89.6526 147.328C87.7177 146.36 86.1514 144.516 85.8749 142.396C85.6907 140.968 86.1052 139.585 87.0267 138.479C87.3492 138.111 88.3628 137.603 88.501 137.143C87.9021 136.405 87.0728 133.687 88.501 133.134Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M96.701 146.958C97.0317 146.958 97.2999 146.689 97.2999 146.359C97.2999 146.028 97.0317 145.76 96.701 145.76C96.3701 145.76 96.1021 146.028 96.1021 146.359C96.1021 146.689 96.3701 146.958 96.701 146.958Z",
                                fill: "#30363D",
                            }),
                            (0, y.jsx)("g", {
                                opacity: "0.6",
                                children: (0, y.jsx)("path", {
                                    opacity: "0.8",
                                    d: "M38.8833 121.566C41.325 124.331 43.2139 127.511 45.5174 130.368C47.8209 133.225 50.9998 135.298 54.5932 136.174C54.8696 136.128 55.0999 136.082 55.3764 136.036C52.8425 135.806 50.4929 134.331 48.7423 132.442C46.7613 130.322 45.4253 127.741 43.951 125.253C41.6014 121.29 38.7451 117.326 34.6909 115.16C31.8806 113.686 28.7018 113.087 25.5229 113.455C30.6828 114.423 35.5202 117.742 38.8833 121.566Z",
                                    fill: "#8B949E",
                                }),
                            }),
                            (0, y.jsx)("g", {
                                opacity: "0.6",
                                children: (0, y.jsx)("path", {
                                    opacity: "0.8",
                                    d: "M78.964 133.041C81.2214 134.332 82.9721 136.174 84.5385 138.202C84.6307 137.649 84.815 137.096 84.9992 136.59C83.8474 135.253 82.4654 134.054 80.9911 133.087C77.5819 130.875 73.6659 130.23 69.75 129.539L71.086 130.184C73.7121 131.152 76.5223 131.612 78.964 133.041Z",
                                    fill: "#8B949E",
                                }),
                            }),
                            (0, y.jsx)("g", {
                                opacity: "0.6",
                                children: (0, y.jsx)("path", {
                                    opacity: "0.8",
                                    d: "M88.0864 134.839C89.4224 134.747 88.6853 137.097 89.4225 137.373C90.0214 137.604 90.7585 137.143 91.4496 137.419C92.1867 137.789 92.7396 138.341 93.1081 139.079C93.6148 140.093 93.6148 141.014 93.5227 142.12C93.4766 143.548 93.5688 145.024 95.2273 145.438C94.7205 145.024 94.4441 144.424 94.4901 143.78C94.5363 143.088 94.6745 142.396 94.8127 141.706C95.043 139.724 94.1677 137.743 92.5552 136.591C92.8777 135.945 93.0159 135.253 93.0159 134.563C92.9698 133.825 92.7395 133.226 92.0023 133.18C91.3574 133.088 90.8045 133.549 90.7124 134.194V134.24C90.6203 134.977 90.7124 135.715 90.9427 136.406L89.6067 136.359C90.3438 133.779 89.4685 132.673 88.4089 133.134C87.7179 133.411 87.5797 134.147 87.6257 134.977C87.81 134.931 87.9482 134.885 88.0864 134.839Z",
                                    fill: "#8B949E",
                                }),
                            }),
                        ],
                    }),
                lY = () => {
                    let { resolvedColorMode: e } = (0, le.DP)();
                    switch (e) {
                        case "day":
                        case "light":
                            return (0, y.jsx)(lX, {});
                        case "night":
                        case "dark":
                            return (0, y.jsx)(lJ, {});
                        default:
                            return null;
                    }
                },
                l1 = () =>
                    (0, y.jsx)("div", {
                        className: lZ.NewViewGraphicContainer,
                        children: (0, y.jsx)(lY, {}),
                    });
            try {
                lX.displayName || (lX.displayName = "InboxZeroLightGraphic");
            } catch {}
            try {
                lJ.displayName || (lJ.displayName = "InboxZeroDarkGraphic");
            } catch {}
            try {
                lY.displayName || (lY.displayName = "InboxZeroGraphic");
            } catch {}
            try {
                l1.displayName || (l1.displayName = "InboxZeroGraphicWrapper");
            } catch {}
            function l2() {
                return (0, y.jsxs)("div", {
                    className: lG.NewViewExperienceContainer,
                    children: [
                        (0, y.jsx)(l1, {}),
                        (0, y.jsxs)("div", {
                            className: lG.textContent,
                            children: [
                                (0, y.jsx)(e8.A, {
                                    as: "h2",
                                    className: lG.Heading,
                                    children:
                                        "Build powerful views to keep track of work",
                                }),
                                (0, y.jsx)("span", {
                                    className: lG.descriptionText,
                                    children:
                                        "Create your own views to quickly find and access your work.",
                                }),
                            ],
                        }),
                    ],
                });
            }
            try {
                l2.displayName || (l2.displayName = "NewViewExperience");
            } catch {}
            let l0 = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "name",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "SearchBarCurrentViewFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "query",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "scopingRepository",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Shortcutable",
                    abstractKey: "__isShortcutable",
                };
            })();
            l0.hash = "9c50d63e7c8b908e123ab49c4f0f99ed";
            let l3 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SearchBarRepo",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInOrganization",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchBarActionsRepositoryFragment",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanSeeIssueFields",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            l3.hash = "fb9a1c5ba299c39422336b8e4fd4d059";
            var l4 = a(92415),
                l5 = a(55461);
            let l7 = {
                    assigned: "assigned",
                    pullsAssignedToMe: "assigned",
                    mentioned: "mentioned",
                    createdByMe: "created",
                    recentActivity: "recent",
                },
                l6 = "([a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)?(-[a-zA-Z0-9]+|-)*)",
                l9 = RegExp(`^/${l6}/(([._a-zA-Z0-9-])*)/issues`),
                l8 = RegExp(`^/${l6}/(([._a-zA-Z0-9-])*)/labels`),
                ae = RegExp(
                    `^/${l6}/(([._a-zA-Z0-9-])*)/labels/([._a-zA-Z0-9-]+)`
                ),
                al = RegExp(`^/${l6}/(([._a-zA-Z0-9-])*)/milestone/([0-9]+)`),
                aa = "AND|OR",
                an = RegExp(`\\b(?:${aa})(?:\\s+\\b(?:${aa})\\b)+`, "gi"),
                as = RegExp(`(^|\\()\\s*(?:${aa})\\b\\s*`, "gi"),
                ai = RegExp(`\\b(?:${aa})\\b\\s*(\\)|$)`, "gi"),
                at = RegExp(`\\((?:[^)]*\\b(?:${aa})\\b[^)]*)\\)`, "i"),
                ar = ({ viewId: e, query: l }) => {
                    let a = "";
                    if (e !== S.repository) {
                        if (e && e !== S.empty)
                            a = l7[e] ? `/${l7[e]}` : `/${e}`;
                        else if (l === L.assignedToMe)
                            return `/issues/${l7.assigned}`;
                        else if (l === L.mentioned)
                            return `/issues/${l7.mentioned}`;
                        else if (l === L.createdByMe)
                            return `/issues/${l7.createdByMe}`;
                        else if (l === L.recentActivity)
                            return `/issues/${l7.recentActivity}`;
                    }
                    if (
                        (void 0 !== l &&
                            "" !== l.trim() &&
                            (a = `${a}?q=${encodeURIComponent(l)}`),
                        e === S.repository)
                    ) {
                        let e = A.fV?.pathname,
                            l = e.match(l9);
                        if (l) return e + a;
                        if ((l = e.match(l8) || e.match(ae) || e.match(al)))
                            return `/${l[1]}/${l[3]}/issues${a}`;
                    }
                    return `/issues${a}`;
                };
            function ao(e) {
                return e.indexOf(" ") > -1 ? `"${e}"` : e;
            }
            function au(e, l, a) {
                if (!e) return;
                let n = RegExp(`(?:^|\\s)${l}:(?:\\"[^\\"]*\\"|\\S+)`, "g"),
                    s = e.replaceAll(n, "").replace(/^\s+/, ""),
                    i = ao(a);
                return `${s.trim()} ${l}:${i}`;
            }
            function ad(e, l, a) {
                var n;
                let s;
                if (!e) return `${l}:${a}`;
                let i = ao(a).replace(/[.*+?^${}()|[\]\\]/g, "\\$&"),
                    t = RegExp(`(?:^|\\s)(${l}:${i})(?=\\s|$)`, "g"),
                    r = e.replaceAll(t, "").replace(/^\s+/, ""),
                    o = ao(a);
                return (
                    (n = `${r.trim()} ${l}:${o}`),
                    (s = `${n}`.trim())
                        ? (s = (s = (s = (s = s.replace(an, (e) => {
                              let l =
                                  e.match(RegExp(`\\b(?:${aa})\\b`, "gi")) ||
                                  [];
                              if (l && l.length) {
                                  let e = l[l.length - 1];
                                  if (e) return ` ${e.toUpperCase()} `;
                              }
                              return " ";
                          })).replace(as, "$1")).replace(ai, "$1"))
                              .replace(/\s+/g, " ")
                              .trim())
                        : s
                );
            }
            let ac = (e, l, a, n) => {
                    let s = !(function (e) {
                        let l = String(e || ""),
                            [a, n] = aa.split("|"),
                            s = RegExp(`\\b${a}\\b`, "i").test(l),
                            i = RegExp(`\\b${n}\\b`, "i").test(l),
                            t = 0,
                            r = 0;
                        for (let e of l)
                            "(" === e
                                ? ++t > r && (r = t)
                                : ")" === e && (t = Math.max(0, t - 1));
                        let o = r > 0,
                            u = r > 1,
                            d = as.test(l),
                            c = ai.test(l),
                            m = an.test(l),
                            g = at.test(l);
                        return (
                            d || c || m || ((s || i) && o) || (s && i) || u || g
                        );
                    })(e)
                        ? au
                        : ad;
                    return ar({
                        viewId: l ? S.repository : void 0,
                        query: s(e, a, n),
                    });
                },
                am = (e, l, a, n) =>
                    ar({
                        viewId: l ? S.repository : void 0,
                        query: ad(e, a, n),
                    }),
                ag = { down: "ArrowDown", focusSearch: "/", up: "ArrowUp" };
            var ap = a(30459),
                ay = a(57019),
                ak = a(86877);
            let ah = {
                confirmLeave:
                    "Are you sure you want to leave? You have unsaved changes.",
                errorLoadingIssues:
                    "We encountered an error trying to load issues.",
                failedToLoadIssues: "Failed to load issues.",
                title: "Title",
                icon: "Icon",
                description: "Description",
                query: "Query",
                moreItemsAvailableTitle: (e) => `More ${e} available`,
                moreItemsAvailableDescription: (e, l) =>
                    `Showing the first ${e} ${l}. To view additional ${l.toLocaleString()}, please refine your search.`,
            };
            var ab = a(36724),
                af = a(57611),
                aC = a(70170),
                aF = a(34784);
            let aS = (e, l, a, n) =>
                (0, aF.fetchQuery)(
                    e,
                    lE.k5,
                    { owner: l, repo: a, number: n, count: 15 },
                    { fetchPolicy: "store-or-network" }
                ).toPromise();
            (0, aC.s)(aS, 500);
            var aL = a(8521),
                aK = a(91747),
                av = a(65432);
            let aI =
                    /https?:\/\/(?<hostname>github\.(com|localhost|localhost:\d+))\/(?<owner>.*)\/(?<repo>.*)\/issues\/(?<number>\d+)/,
                a_ = () => {
                    let {
                            setCanEditView: e,
                            activeSearchQuery: l,
                            setIsEditing: n,
                            setIsNewView: s,
                        } = eM(),
                        { scoped_repository: i, multi_tenant: t } = (0, v.X)(),
                        { isAnyInputElementActive: r } = (0, af.B)(),
                        { isCommentEditActive: o, cancelAllCommentEdits: u } =
                            (0, ab.N)(),
                        d = (0, b.useRef)(null),
                        c = (0, e7.Z)(),
                        m = (0, aF.useRelayEnvironment)(),
                        { issues_react_force_turbo_nav: g } = (0, aK.h)(),
                        p = (0, b.useCallback)(
                            async (e, l, n) => {
                                if (r) return;
                                if (o()) {
                                    if (!confirm(ah.confirmLeave)) return;
                                    u();
                                }
                                let s = new URL(e.toString(), A.fV.origin),
                                    i = s.pathname,
                                    p = i.match(ed),
                                    y = i.match(l9);
                                if (p && p.groups) {
                                    let {
                                        owner: a,
                                        repo: s,
                                        number: t,
                                    } = p.groups;
                                    if (a && s && t) {
                                        let r = parseInt(t);
                                        ((d.current = i),
                                            (0, av.SC)("react"),
                                            await aS(m, a, s, r),
                                            d.current === i &&
                                                i !== A.cg?.location.pathname &&
                                                ((d.current = null),
                                                n && window.scrollTo(0, 0),
                                                c(e, l)));
                                    }
                                } else
                                    y && t && g
                                        ? (async () => {
                                              let { softNavigate: e } =
                                                  await Promise.all([
                                                      a.e(
                                                          "vendors-node_modules_github_turbo_dist_turbo_es2017-esm_js"
                                                      ),
                                                      a.e(
                                                          "packages_soft-navigate_soft-navigate_ts"
                                                      ),
                                                  ]).then(a.bind(a, 54563));
                                              e(s);
                                          })()
                                        : (n && window.scrollTo(0, 0), c(e, l));
                            },
                            [u, m, r, o, g, t, c]
                        ),
                        y = (0, b.useCallback)(
                            (e) => {
                                if (
                                    e.metaKey ||
                                    e.shiftKey ||
                                    e.ctrlKey ||
                                    1 === e.button ||
                                    !(e.target instanceof HTMLElement)
                                )
                                    return;
                                let l = "";
                                if (
                                    ((l =
                                        e.currentTarget instanceof
                                        HTMLAnchorElement
                                            ? e.currentTarget.href
                                            : e.target instanceof
                                                HTMLAnchorElement
                                              ? e.target.href
                                              : (e.target.closest("a")?.href ??
                                                "")),
                                    l?.length > 0)
                                ) {
                                    let a = l.match(aI);
                                    if (a && a.groups) {
                                        let {
                                            hostname: n,
                                            owner: s,
                                            repo: i,
                                            number: t,
                                        } = a.groups;
                                        if (n !== window.location.hostname)
                                            return;
                                        if (s && i && t) {
                                            e.preventDefault();
                                            let a = (0, aL.$9)({
                                                    owner: s,
                                                    repo: i,
                                                    number: parseInt(t),
                                                }),
                                                n = ((e, l) =>
                                                    2 === l.split("#").length &&
                                                    l.split("#")[1]
                                                        ? `${e}#${l.split("#")[1]}`
                                                        : e)(a, l);
                                            eb(window.location.href, s, i) &&
                                            !window.location.href.includes(a)
                                                ? (e.preventDefault(), p(n))
                                                : window.location.assign(n);
                                        }
                                    }
                                }
                            },
                            [p]
                        ),
                        k = (0, b.useCallback)(
                            (e, a) => ac(l, !!i, e, a),
                            [l, i]
                        ),
                        h = (0, b.useCallback)(
                            (e, a) => am(l, !!i, e, a),
                            [l, i]
                        ),
                        f = (0, b.useCallback)(
                            ({
                                viewId: l,
                                canEditView: a,
                                isEditing: i = !1,
                                navigateOptions: t,
                                isNewView: r = !1,
                            }) => {
                                (c(ar({ viewId: l }), t), e(a), n(i), s(r));
                            },
                            [c, e, n, s]
                        ),
                        C = (0, b.useCallback)(
                            (e, l = {}) => {
                                let { isEditing: a = !0, isNewView: n = !1 } =
                                    l;
                                f({
                                    viewId: e,
                                    canEditView: !0,
                                    isEditing: a,
                                    isNewView: n,
                                });
                            },
                            [f]
                        ),
                        F = (0, b.useCallback)(
                            (e, l) => {
                                c(ar({ viewId: e, query: l }));
                            },
                            [c]
                        ),
                        S = (0, b.useCallback)(
                            (e, a) => {
                                if (i) p(`/${i.owner}/${i.name}/issues`);
                                else if (e === ee.id) F(void 0, l);
                                else {
                                    let n = a !== l ? l : void 0;
                                    F(n ? void 0 : e, n);
                                }
                            },
                            [l, F, p, i]
                        );
                    return {
                        onIssueHrefLinkClick: y,
                        navigateToUrl: p,
                        navigateToView: f,
                        navigateToSavedView: C,
                        navigateToSearch: F,
                        navigateToRoot: S,
                        getQueryFieldUrl: k,
                        getAdditiveQueryFieldUrl: h,
                    };
                };
            var ax = a(88243),
                aw = a(16213),
                aN = a(63415),
                aj = a(48738),
                aR = a(33727),
                aP = a(75642),
                aT = a(98646);
            let aA = { positive: !0, negative: !0, decimal: !0 };
            function aM(e, l) {
                return {
                    key: "field",
                    displayName: "Field",
                    description: e,
                    priority: 3,
                    icon: T.NoteIcon,
                    subKeys: l,
                };
            }
            async function aV(e, l) {
                let a;
                try {
                    if (
                        ((a = await fetch(e, {
                            method: "GET",
                            mode: "same-origin",
                            headers: {
                                Accept: "application/json",
                                "Content-Type": "application/json",
                            },
                            signal: l?.signal,
                        })),
                        a?.ok)
                    )
                        return await a.json();
                    return null;
                } catch (e) {
                    if (e instanceof Error && "AbortError" !== e.name) throw e;
                    return null;
                }
            }
            let aD = new Map(),
                aE = new Set();
            async function aq(e) {
                if (!A.cg) return null;
                let l = "dashboard-issue-fields-global";
                if (aD.has(l)) return aD.get(l);
                let a = aO(e);
                return (aD.set(l, a), a);
            }
            async function aO(e) {
                let l = new URL(
                        "/_filter/issue_fields/dashboard",
                        A.cg.location.origin
                    ),
                    a = await aV(l.toString());
                if (!a) {
                    let l = aM("Filter by issue fields", []);
                    return new aj.tW(l, e);
                }
                var n,
                    s = a,
                    i = e;
                let t = [];
                for (let e of (aE.clear(), Object.keys(s?.issue_fields ?? {})))
                    aE.add(e);
                for (let [e, l] of Object.entries(s?.issue_fields ?? {}))
                    for (let a of l.fields) {
                        if (!a || !a.data_type) continue;
                        let l = (function (e, l, a) {
                            let { name: n, data_type: s, name_slug: i } = e,
                                t = a ? `${n} (${a})` : n,
                                r = a
                                    ? `${i}-${a}`
                                    : (i ??
                                      n.toLowerCase().replace(/\s+/g, "-")),
                                o = [];
                            "single_select" === s
                                ? (o = (e.options || []).map((e) => ({
                                      value: e.name,
                                      displayName: e.name,
                                      priority: aR.a6,
                                  })))
                                : "date" === s && (o = aP.p);
                            let u = aT.d6[s];
                            return {
                                key: r,
                                displayName: t,
                                icon: u?.icon || T.NoteIcon,
                                type: (function (e) {
                                    switch (e) {
                                        case "text":
                                        default:
                                            return l4.CH.Text;
                                        case "single_select":
                                            return l4.CH.Select;
                                        case "date":
                                            return l4.CH.Date;
                                        case "number":
                                            return l4.CH.Number;
                                    }
                                })(s),
                                values: o,
                                options: (function (e, l) {
                                    let a = {
                                        ...aR.dQ,
                                        filterTypes: {
                                            multiKey: !1,
                                            multiValue: !0,
                                            valueless: e.filterTypes?.valueless,
                                            hasValue: e.filterTypes?.hasValue,
                                        },
                                    };
                                    return "number" === l ? { ...a, ...aA } : a;
                                })(l, s),
                                aliases: [`field.${e.name_slug || e.name}`],
                            };
                        })(
                            ((n = { ...a, organization: e }),
                            {
                                name: n?.name ?? "",
                                name_slug: n?.name_slug,
                                options: n?.options,
                                data_type: n?.data_type,
                                description: n?.description,
                            }),
                            i,
                            e
                        );
                        l && t.push(l);
                    }
                let r = aM("Filter by issue fields", t);
                return new aj.tW(r, i);
            }
            let aB = "field.";
            function a$(e) {
                let l = new Set(),
                    a = e.match(/org:(?:"([^"]+)"|([^\s]+))/g);
                if (a)
                    for (let e of a) {
                        let a = e.indexOf(":"),
                            n = e.substring(a + 1).replace(/^"(.*)"$/, "$1");
                        n && l.add(n);
                    }
                let n = e.match(/repo:(?:"([^"]+)"|([^\s]+))/g);
                if (n)
                    for (let e of n) {
                        let a = e.indexOf(":"),
                            n = e
                                .substring(a + 1)
                                .replace(/^"(.*)"$/, "$1")
                                .split("/")[0];
                        n && l.add(n);
                    }
                return Array.from(l).filter(Boolean);
            }
            function aQ(e, l) {
                if (!aU(e)) return null;
                let a = e.substring(aB.length),
                    n = e.endsWith(":") ? a.slice(0, -1) : a;
                for (let e of l)
                    if (n.endsWith(`-${e}`)) {
                        let l = n.substring(0, n.length - e.length - 1);
                        if (l.length > 0) return { fieldName: l, orgName: e };
                    }
                return null;
            }
            function aU(e) {
                return e.startsWith(aB) && e !== aB;
            }
            var az = new WeakSet(),
                aH = new WeakSet(),
                aW = new WeakSet();
            let IssueFieldFilterQueryParser = class IssueFieldFilterQueryParser extends aN.i {
                parse(e, l = new l4.Ny("", [], this.config), a = -1) {
                    let n = super.parse(e, l, a);
                    return (0, ax._)(this, az, aG).call(this, n, e);
                }
                insertSuggestion(e, l, a) {
                    let {
                        transformedSuggestion: n,
                        needsOrgInsertion: s,
                        orgName: i,
                    } = (0, ax._)(this, aW, aX).call(this, l, e, a);
                    if (n === l) return super.insertSuggestion(e, l, a);
                    if (!s) return super.insertSuggestion(e, n, a);
                    let t = RegExp(`\\borg:${i}\\b`),
                        r = RegExp(`\\brepo:(?:"${i}/|${i}/)`);
                    if (t.test(e.raw) || r.test(e.raw))
                        return super.insertSuggestion(e, n, a);
                    let o = `org:${i} ${n}`,
                        [u, d] = super.insertSuggestion(e, o, a);
                    return [u, d];
                }
                constructor(e = [], l) {
                    (super(e, l),
                        (0, aw._)(this, az),
                        (0, aw._)(this, aH),
                        (0, aw._)(this, aW));
                }
            };
            function aG(e, l) {
                let a = a$(l);
                if (0 === a.length) return e;
                let n = e.blocks.map((e) => {
                    if (
                        (0, l5.aK)(e) &&
                        e.provider.key.startsWith("field.") &&
                        e.provider.aliases?.includes(e.key.value)
                    ) {
                        let l = aQ(e.provider.key, aE),
                            n = l?.orgName;
                        if (n && !a.includes(n)) {
                            let l = (0, ax._)(this, aH, aZ).call(
                                this,
                                e.key.value,
                                a
                            );
                            if (l) return { ...e, provider: l };
                        }
                    }
                    return e;
                });
                return new l4.Ny(
                    e.raw,
                    n,
                    e.config,
                    e.activeBlock,
                    e.instanceContext,
                    e.isValidated
                );
            }
            function aZ(e, l) {
                for (let a of l) {
                    let l = `${e}-${a}`,
                        n = this.filterProviders.find((e) => e.key === l);
                    if (n) return n;
                }
            }
            function aX(e, l, a) {
                let n = (function (e, l) {
                        let a = new Set();
                        for (let n of e)
                            if (aU(n)) {
                                let e = aQ(n, l);
                                e && a.add(e.orgName);
                            }
                        return a;
                    })(
                        this.filterProviders.map((e) => e.key),
                        aE
                    ),
                    s = new Set(a$(l.raw)),
                    i = l.raw.match(/repo:(?:"([^"]+)"|([^\s]+))/g);
                if (i)
                    for (let e of i) {
                        let l = e.indexOf(":"),
                            a = e
                                .substring(l + 1)
                                .replace(/^"(.*)"$/, "$1")
                                .split("/")[0];
                        a && s.add(a);
                    }
                let t = aQ(e, aE);
                if (!t)
                    return {
                        transformedSuggestion: e,
                        needsOrgInsertion: !1,
                        orgName: "",
                    };
                let { fieldName: r, orgName: o } = t;
                if (s.size > 0 || !n.has(o))
                    return {
                        transformedSuggestion: e,
                        needsOrgInsertion: !1,
                        orgName: "",
                    };
                let u = s.has(o);
                return {
                    transformedSuggestion: e.endsWith(":")
                        ? `field.${r}:`
                        : `field.${r}`,
                    needsOrgInsertion: !u,
                    orgName: o,
                };
            }
            function aJ(e) {
                let l = {};
                for (let a of e)
                    if ((0, l5.B8)(a)) {
                        if (a.filterProviders)
                            for (let e of a.filterProviders) {
                                let a = e.key;
                                a && (l[a] = e);
                            }
                    } else {
                        let e = a.key;
                        e && (l[e] = a);
                    }
                return l;
            }
            var aY = a(79272);
            function a1(e) {
                return null != e;
            }
            var a2 = a(30158);
            let a0 = { positive: !0, negative: !0, decimal: !0 },
                a3 = new Map();
            async function a4(e, l) {
                let a = `${l}-${JSON.stringify(e)}`;
                if (a3.has(a)) return a3.get(a);
                let n = a5(e, l);
                return (a3.set(a, n), n);
            }
            async function a5(e, l) {
                let a = new URL(
                    "/_filter/issue_fields",
                    window.location.origin
                );
                l && a.searchParams.set("repo", l);
                let n = await a7(a.toString());
                return new aj.tW(
                    {
                        key: "field",
                        displayName: "Field",
                        description: "Filter by issue fields",
                        priority: 3,
                        icon: T.NoteIcon,
                        subKeys: (n?.issue_fields ?? [])
                            .filter((e) => !!e)
                            .map((l) =>
                                (function (e, l) {
                                    let {
                                            name: a,
                                            data_type: n,
                                            name_slug: s,
                                        } = e,
                                        i = [];
                                    return (
                                        "single_select" === n
                                            ? (i = (e.options || []).map(
                                                  (e) => ({
                                                      value: e.name,
                                                      displayName: e.name,
                                                      priority: aR.a6,
                                                  })
                                              ))
                                            : "date" === n && (i = aP.p),
                                        {
                                            key:
                                                s ??
                                                a
                                                    .toLowerCase()
                                                    .replace(/\s+/g, "-"),
                                            displayName: a,
                                            icon: aT.d6[n].icon,
                                            type: a6(n),
                                            values: i,
                                            options: (function (e, l) {
                                                let a = {
                                                    ...aR.dQ,
                                                    filterTypes: {
                                                        multiKey: !1,
                                                        multiValue: !0,
                                                        valueless:
                                                            e.filterTypes
                                                                ?.valueless,
                                                        hasValue:
                                                            e.filterTypes
                                                                ?.hasValue,
                                                    },
                                                };
                                                return "number" === l
                                                    ? { ...a, ...a0 }
                                                    : a;
                                            })(l, n),
                                        }
                                    );
                                })(
                                    {
                                        name: l?.name ?? "",
                                        name_slug: l?.name_slug,
                                        options: l?.options,
                                        data_type: l?.data_type.toLowerCase(),
                                    },
                                    e
                                )
                            ),
                    },
                    e
                );
            }
            async function a7(e, l) {
                let a;
                try {
                    if (
                        ((a = await fetch(e, {
                            method: "GET",
                            mode: "same-origin",
                            headers: {
                                Accept: "application/json",
                                "Content-Type": "application/json",
                            },
                            signal: l?.signal,
                        })),
                        a?.ok)
                    )
                        return await a.json();
                    return;
                } catch (e) {
                    if (e instanceof Error && "AbortError" !== e.name) throw e;
                    return;
                }
            }
            let a6 = (e) => {
                switch (e) {
                    case "text":
                    default:
                        return l4.CH.Text;
                    case "single_select":
                        return l4.CH.Select;
                    case "date":
                        return l4.CH.Date;
                    case "number":
                        return l4.CH.Number;
                }
            };
            var a9 = a(19459);
            let SubIssueFilterProvider = class SubIssueFilterProvider extends aj.uy {
                getSuggestions(e, l, a, n) {
                    let s = (0, l5.DS)(l, n),
                        i = l.provider.key,
                        t = [];
                    if (
                        ((0, l5.uT)(l) &&
                            l.raw !== `-${i}:` &&
                            (t.push((0, l5.jL)(this.displayName, this.icon)),
                            t.push((0, l5.Ms)(this.displayName, this.icon))),
                        "" === s && (0, l5.aK)(l) && l.raw !== `-${i}:`)
                    ) {
                        let e = (0, l5.m1)(i);
                        t.unshift(e);
                    }
                    return t;
                }
                validateFilterBlockValues(e, l, a) {
                    let n = RegExp(
                        '^"?(?<owner>[a-zA-Z0-9-_.]+)/(?<repo>[a-zA-Z0-9-_.]+)#(?<number>[0-9]+)"?$'
                    );
                    return a.map((e) => {
                        let l = (0, l5.q5)((0, l5.I8)(e.value));
                        return a.length < 1 || !l
                            ? {
                                  ...e,
                                  valid: !1,
                                  validations: [
                                      {
                                          type: l4.b.EmptyValue,
                                          message: a9.D.filterValueEmpty(
                                              this.key
                                          ),
                                      },
                                  ],
                              }
                            : n.test(l)
                              ? { ...e, valid: !0 }
                              : {
                                    ...e,
                                    valid: !1,
                                    validations: [
                                        {
                                            type: l4.b.InvalidValue,
                                            message: `${a9.D.filterInvalidValue(this.key, l)}. Use the format <pre>&lt;owner&gt;/&lt;repo&gt;#&lt;number&gt;</pre>.`,
                                        },
                                    ],
                                };
                    });
                }
                constructor() {
                    super(
                        {
                            key: "sub-issue",
                            displayName: "Sub-issue",
                            icon: T.IssueTracksIcon,
                            priority: 5,
                            type: l4.CH.Text,
                        },
                        [],
                        { filterTypes: { ...l4.dQ?.filterTypes, hasValue: !0 } }
                    );
                }
            };
            let a8 = (e, l) => (e ? [l] : []),
                ne = {
                    gap8: "SearchBar-module__gap8--tZi0W",
                    filterContainer: "SearchBar-module__filterContainer--XzLet",
                    validation: "SearchBar-module__validation--m94_M",
                    filter: "SearchBar-module__filter--uooUm",
                    FormControl: "SearchBar-module__FormControl--SjyQK",
                },
                nl = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "SearchBarActionsRepositoryFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isOwnerEnterpriseManaged",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameWithOwner",
                            storageKey: null,
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            nl.hash = "a797e54d6a4d9410241158e79db7ba3d";
            var na = a(92559),
                nn = a(21373);
            let ns = {
                    cancel: "Cancel",
                    apply: "Apply",
                    issues: "Issues",
                    newIssue: "New issue",
                    saveView: "Save view",
                    returnToList: "Return to list",
                    setIssueType: "Issue type",
                },
                ni = {
                    gap8: "SearchBarActions-module__gap8--TvBJx",
                    buttons: "SearchBarActions-module__buttons--DBEMp",
                };
            function nt({ currentRepository: e }) {
                let l = (0, e7.Z)(),
                    { currentUser: a } = (0, e6.J)(),
                    { scoped_repository: n, current_user_settings: s } = (0,
                    v.X)(),
                    i = (0, er.useFragment)(nl, e),
                    t =
                        n?.is_archived ||
                        (null != a &&
                            !!a?.is_emu &&
                            (!i || !i.isOwnerEnterpriseManaged));
                return (0, y.jsxs)("div", {
                    className: `${ni.buttons} ${ni.gap8} d-flex flex-wrap`,
                    children: [
                        (0, y.jsx)(nn.Q, {
                            as: "a",
                            href: `/${i?.nameWithOwner}/labels`,
                            leadingVisual: T.TagIcon,
                            children: "Labels",
                        }),
                        (0, y.jsx)(nn.Q, {
                            as: "a",
                            href: `/${i?.nameWithOwner}/milestones`,
                            leadingVisual: T.MilestoneIcon,
                            children: "Milestones",
                        }),
                        !t &&
                            (0, y.jsx)(na.a, {
                                label: ns.newIssue,
                                navigate: l,
                                optionConfig: {
                                    issueCreateArguments: {
                                        repository: n
                                            ? { owner: n.owner, name: n.name }
                                            : void 0,
                                    },
                                    showRepositoryPicker: null === n,
                                    emojiSkinTonePreference:
                                        s?.preferred_emoji_skin_tone,
                                    singleKeyShortcutsEnabled:
                                        s?.use_single_key_shortcut || !1,
                                    showFullScreenButton: !0,
                                    canBypassTemplateSelection: !0,
                                    navigate: l,
                                },
                            }),
                    ],
                });
            }
            try {
                nt.displayName || (nt.displayName = "SearchBarActions");
            } catch {}
            let nr = ({ editing: e, children: l }) =>
                e
                    ? (0, y.jsx)(ak.A, {
                          className: ne.FormControl,
                          children: l,
                      })
                    : (0, y.jsx)(y.Fragment, { children: l });
            function no({
                currentViewKey: e,
                currentRepository: l,
                queryFromCustomView: a,
                children: n,
            }) {
                let s = (0, b.useRef)(null),
                    {
                        setActiveSearchQuery: i,
                        isCustomView: t,
                        isEditing: r,
                        setCurrentPage: o,
                    } = eM(),
                    [u, d] = (0, b.useState)([]),
                    { search: c, pathname: m } = (0, I.zy)(),
                    g = new URLSearchParams(c).get("q"),
                    { scoped_repository: p, current_user_settings: h } = (0,
                    v.X)(),
                    { navigateToUrl: f } = a_(),
                    C = (0, k.G7)("issue_fields_global_search"),
                    F = (0, k.G7)("issue_search_trailing_space_removal"),
                    {
                        id: S,
                        scopingRepository: L,
                        query: K,
                    } = (0, er.useFragment)(l0, e),
                    _ = (0, er.useFragment)(l3, l),
                    {
                        author: x,
                        assignee: w,
                        mentioned: N,
                        label: j,
                    } = (0, I.g)(),
                    R = `${en.defaultQuery} ${en.query({ author: x, assignee: w, mentioned: N, label: j, createdByApp: eh(m) })}`,
                    P = K;
                ek(m)
                    ? (P = R)
                    : ey(m) && j && (P = eN("state:open", [j], "label"));
                let T = L ? `repo:${L.owner.login}/${L.name} ${P}` : P,
                    {
                        dirtySearchQuery: A,
                        setDirtySearchQuery: E,
                        setShouldFocusSearchOnNav: q,
                        shouldFocusSearchOnNav: O,
                    } = eV(),
                    B = (0, b.useCallback)(
                        (e) => {
                            (i(e), E(null));
                        },
                        [i, E]
                    );
                (0, b.useEffect)(() => {
                    em(m) || (i(g || T || ""), E(g));
                }, [B, g, m, T, i, E]);
                let { sendAnalyticsEvent: $ } = (0, ap.s)(),
                    Q = ((e) => {
                        let {
                                isOrgScope: l = !1,
                                isIssueFieldsEnabled: a = !1,
                                isIssueFieldsGlobalSearchEnabled: n = !1,
                            } = e,
                            { currentUser: s } = (0, e6.J)(),
                            i = (0, er.useRelayEnvironment)(),
                            { scoped_repository: t } = (0, v.X)(),
                            r = !!t,
                            o = (0, k.G7)("copilot_swe_agent"),
                            [u, d] = (0, b.useState)([]),
                            c = r ? `${t.owner}/${t.name}` : void 0,
                            m = r ? M : V,
                            g = (0, b.useMemo)(() => {
                                let e = {
                                        showAtMe: !!s,
                                        currentUserLogin: s?.login,
                                        currentUserAvatarUrl: s?.avatarUrl,
                                        repositoryScope: c,
                                    },
                                    a = { filterTypes: { valueless: !1 } },
                                    n = { filterTypes: { hasValue: !0 } };
                                return [
                                    ...a8(
                                        !r,
                                        new aj.pH({
                                            ...a,
                                            filterTypes: { multiKey: !0 },
                                        })
                                    ),
                                    ...u,
                                    ...a8(!r, new aj.E({ ...a })),
                                    new aj.I4(m, a),
                                    new aj.PT("mixed", a),
                                    new aj.aF(n),
                                    ...a8(l || !r, new aY.B(n, !0, i, c)),
                                    new aj.FG(n),
                                    new aj.Qq(n),
                                    new a2.A({ ...e, showAtCopilot: o }, n),
                                    new a2.OD({ ...e, showAtCopilot: o }, a),
                                    new a2.Tq({ ...e, showAtCopilot: !0 }, a),
                                    new aj.Pd(e, a),
                                    new aj.$q(l4._i.parentIssue, n),
                                    new aj.tQ(),
                                    new aj.rL(),
                                    new SubIssueFilterProvider(),
                                    new aj.pv(a),
                                    new aj._O(a),
                                    new aj.ws(a),
                                    new aj.Or(a),
                                    new a2.Te({ ...e, showAtCopilot: !0 }, a),
                                    new aj.HD(),
                                    new aj._N(e, a),
                                    new aj.Dv(e, a),
                                    new aj.LB(e, a),
                                    new a2.Tr({ ...e, showAtCopilot: !0 }, a),
                                    new aj.Ge(a),
                                    new aj.NT(a),
                                    new aj.Ag(a),
                                    new aj.d$(["issue", "pr"], a),
                                    new aj.AR(a),
                                    new aj.WE(a),
                                    new aj.FZ(a),
                                    new aj.A6(a),
                                    new aj.a2(a),
                                    new aj.KX(a),
                                    new aj.dR(a),
                                    new aj.Ws(a),
                                    new aj.C2(a),
                                    new aj.NN(c, a),
                                    new aj.X_(c, a),
                                    new aj.uB(
                                        [
                                            "created",
                                            "updated",
                                            "reactions",
                                            "comments",
                                            "relevance",
                                        ],
                                        a
                                    ),
                                ];
                            }, [s, c, r, u, m, l, i, o]);
                        for (let e of ((0, b.useEffect)(() => {
                            let e = async () => {
                                let e;
                                (c && a
                                    ? (e = await a4(
                                          {
                                              filterTypes: {
                                                  hasValue: !0,
                                                  valueless: !0,
                                              },
                                          },
                                          c
                                      ))
                                    : n &&
                                      (e = await aq({
                                          filterTypes: {
                                              hasValue: !0,
                                              valueless: !0,
                                          },
                                      })),
                                    e &&
                                        d((l) => [
                                            ...l.filter(
                                                (e) =>
                                                    !(
                                                        ("key" in e &&
                                                            "field" ===
                                                                e.key) ||
                                                        ("filterProviders" in
                                                            e &&
                                                            e.filterProviders?.some(
                                                                (e) =>
                                                                    e.key?.startsWith(
                                                                        "field."
                                                                    )
                                                            ))
                                                    )
                                            ),
                                            e,
                                        ]));
                            };
                            ((c && a) || n) && e();
                        }, [a, n, c]),
                        (0, b.useEffect)(
                            () => () => {
                                let e = g.find((e) => "Type" === e.displayName);
                                e && e.requestDisposable?.dispose();
                            },
                            [g]
                        ),
                        g))
                            "priority" in e && (e.priority = l4.$D);
                        return g;
                    })({
                        isOrgScope: !!_?.isInOrganization,
                        isIssueFieldsEnabled: !!_?.viewerCanSeeIssueFields,
                        isIssueFieldsGlobalSearchEnabled: C,
                    }),
                    z = (0, b.useCallback)(
                        (e, l) => {
                            let a = e.raw;
                            l === l4.FT.Clear && ((a = T), B(T));
                            let n = (a || "is:issue").trim();
                            (e.config.groupAndKeywordSupport ||
                                (n = ((e) => {
                                    let l = eR(e, "is", M);
                                    return eR(l, "state", D);
                                })(a)),
                                $("search.execute", "FILTER_BAR_INPUT", {
                                    new_query: n,
                                }),
                                f(ar({ viewId: S, query: n }), {
                                    preventAutofocus: !0,
                                }),
                                o(1));
                        },
                        [$, f, o, T, B, S]
                    ),
                    H = (0, b.useCallback)(
                        (e) => {
                            if (h?.use_single_key_shortcut && s && s.current) {
                                s.current.focus();
                                let l = s.current.value?.length || 0;
                                (s.current.setSelectionRange(l, l),
                                    e.preventDefault());
                            }
                        },
                        [h?.use_single_key_shortcut]
                    ),
                    W = (0, b.useCallback)(
                        (e) => {
                            E(e.trim());
                        },
                        [E]
                    ),
                    [Z, X] = (0, b.useState)(!1);
                (0, b.useEffect)(() => {
                    let e = s.current;
                    if (!e) return;
                    let l = () => X(!0),
                        a = () => X(!1);
                    return (
                        e.addEventListener("compositionstart", l),
                        e.addEventListener("compositionend", a),
                        () => {
                            (e.removeEventListener("compositionstart", l),
                                e.removeEventListener("compositionend", a));
                        }
                    );
                }, [s]);
                let J = (0, b.useCallback)((e) => d(e), [d]);
                ((0, ay._)([ag.focusSearch], H, { [ay.A.metaKey]: !0 }),
                    (0, ay._)([ag.focusSearch], H, { [ay.A.ctrlKey]: !0 }));
                let Y = r && t(S);
                ((0, b.useEffect)(() => {
                    if (!s.current || !Y) return;
                    let e = s.current;
                    function l() {
                        q(!0);
                    }
                    return (
                        e.addEventListener("focus", l),
                        () => e.removeEventListener("focus", l)
                    );
                }, [Y, q]),
                    (0, b.useEffect)(() => {
                        Y &&
                            s.current &&
                            O &&
                            requestAnimationFrame(() => {
                                if (s.current) {
                                    s.current.focus();
                                    let e = s.current.value?.length || 0;
                                    s.current.setSelectionRange(e, e);
                                }
                            });
                    }, [Y, O]));
                let el =
                        ek(m) || ey(m)
                            ? P
                            : [...es, ee].find((e) => e.id === S)?.query,
                    ea = (0, b.useMemo)(
                        () => (S === G.id ? (g ?? el) : (el ?? g)),
                        [el, g, S]
                    ),
                    ei = (0, b.useMemo)(() => A ?? ea ?? a ?? "", [A, ea, a]),
                    et = p ? `${p.owner}/${p.name}` : void 0,
                    eo = !1;
                eo = t(S)
                    ? A?.trim() !== a?.trim()
                    : S === G.id
                      ? A?.trim() !== el?.trim()
                      : A?.trim() !== ea?.trim();
                let eu = (function ({
                        baseFilterProviders: e,
                        effectiveQuery: l,
                        issueFieldsGlobalSearchEnabled: a,
                        providerRepositoryScope: n,
                    }) {
                        let s = (0, b.useMemo)(
                                () =>
                                    a &&
                                    e.some(
                                        (e) =>
                                            !!(0, l5.B8)(e) &&
                                            !!e.filterProviders &&
                                            e.filterProviders.some(
                                                (e) => e.key && aU(e.key)
                                            )
                                    ),
                                [a, e]
                            ),
                            i = (0, b.useMemo)(
                                () =>
                                    new aN.i(
                                        e.filter((e) => !(0, l5.B8)(e)),
                                        { ...l4.a7, groupAndKeywordSupport: !0 }
                                    ),
                                [e]
                            ),
                            t = (0, b.useMemo)(() => {
                                if (!s || !l)
                                    return {
                                        hasContext: !1,
                                        orgNames: new Set(),
                                        contextKey: "none",
                                    };
                                try {
                                    let e = a$(l),
                                        a = new Set(e),
                                        n = [];
                                    e.length > 0 &&
                                        n.push(`org:${e.join(",")}`);
                                    let s = n.length > 0 ? n.join("|") : "none";
                                    return {
                                        hasContext: a.size > 0,
                                        orgNames: a,
                                        contextKey: s,
                                    };
                                } catch {
                                    return {
                                        hasContext: !1,
                                        orgNames: new Set(),
                                        contextKey: "none",
                                    };
                                }
                            }, [s, l]),
                            r = (0, b.useCallback)((e, l, a) => {
                                if (0 === a.size) return l;
                                let n = { ...l };
                                for (let [e, i] of Object.entries(l))
                                    if (aU(e))
                                        if (
                                            (function (e, l) {
                                                return (
                                                    !aU(e) ||
                                                    Array.from(l).some((l) =>
                                                        e.includes(`-${l}`)
                                                    )
                                                );
                                            })(e, a)
                                        ) {
                                            var s;
                                            let l = (s = i.displayName)
                                                    ? s.replace(
                                                          /\s*\([^)]+\)\s*$/,
                                                          ""
                                                      ) || s
                                                    : "",
                                                t = (function (e, l, a) {
                                                    if (!aU(e)) return e;
                                                    let n = aQ(e, a || l);
                                                    if (!n) return e;
                                                    let {
                                                        fieldName: s,
                                                        orgName: i,
                                                    } = n;
                                                    return l.has(i)
                                                        ? `field.${s}`
                                                        : e;
                                                })(i.key, a, aE);
                                            (l !== i.displayName ||
                                                t !== i.key) &&
                                                (n[e] = (function (e, l, a) {
                                                    let n =
                                                            e.aliases?.filter(
                                                                (e) => e !== a
                                                            ) || [],
                                                        s = {
                                                            ...e,
                                                            displayName: l,
                                                            key: a,
                                                            aliases: n,
                                                            getSuggestions:
                                                                e.getSuggestions.bind(
                                                                    e
                                                                ),
                                                            validateFilterBlockValues:
                                                                e.validateFilterBlockValues.bind(
                                                                    e
                                                                ),
                                                            getValueRowProps:
                                                                e.getValueRowProps.bind(
                                                                    e
                                                                ),
                                                        };
                                                    if (
                                                        "getSuggestions" in e &&
                                                        "function" ==
                                                            typeof e.getSuggestions
                                                    ) {
                                                        let i =
                                                            e.getSuggestions.bind(
                                                                e
                                                            );
                                                        s.getSuggestions =
                                                            async function (
                                                                s,
                                                                t,
                                                                r,
                                                                o
                                                            ) {
                                                                let u =
                                                                        e.displayName,
                                                                    d = e.key,
                                                                    c =
                                                                        e.aliases;
                                                                ((e.displayName =
                                                                    l || ""),
                                                                    (e.key = a),
                                                                    (e.aliases =
                                                                        n));
                                                                try {
                                                                    if (
                                                                        "provider" in
                                                                            t &&
                                                                        t.provider
                                                                    ) {
                                                                        let e =
                                                                            {
                                                                                ...t,
                                                                                provider:
                                                                                    {
                                                                                        ...t.provider,
                                                                                        key: a,
                                                                                    },
                                                                            };
                                                                        return await i(
                                                                            s,
                                                                            e,
                                                                            r,
                                                                            o
                                                                        );
                                                                    }
                                                                    return await i(
                                                                        s,
                                                                        t,
                                                                        r,
                                                                        o
                                                                    );
                                                                } finally {
                                                                    ((e.displayName =
                                                                        u),
                                                                        (e.key =
                                                                            d),
                                                                        (e.aliases =
                                                                            c));
                                                                }
                                                            };
                                                    }
                                                    return s;
                                                })(i, l, t));
                                        } else delete n[e];
                                return n;
                            }, []);
                        return (0, b.useMemo)(() => {
                            let a;
                            if (!s) return e;
                            if (!t.hasContext) return Object.values(aJ(e));
                            let o = aJ(e);
                            try {
                                a = i.parse(l || "");
                            } catch {
                                a = new l4.Ny(
                                    l || "",
                                    [],
                                    void 0,
                                    void 0,
                                    void 0,
                                    !1
                                );
                            }
                            if (n && !a.context.repo) {
                                let [e] = n.split("/");
                                Object.defineProperty(a, "staticContext", {
                                    value: { repo: n, org: e },
                                    writable: !0,
                                });
                            }
                            return Object.values(r(a, o, t.orgNames));
                        }, [e, s, t.hasContext, t.orgNames, n, i, r, l]);
                    })({
                        baseFilterProviders: Q,
                        effectiveQuery: ei,
                        issueFieldsGlobalSearchEnabled: C,
                    }),
                    ed = (0, b.useMemo)(
                        () =>
                            new IssueFieldFilterQueryParser(
                                eu.filter((e) => !(0, l5.B8)(e)),
                                {
                                    ...l4.a7,
                                    aliasMatching: !0,
                                    groupAndKeywordSupport: !0,
                                }
                            ),
                        [eu]
                    ),
                    ec = (0, b.useMemo)(
                        () => (F || Z ? ei : ei ? `${ei.trim()} ` : ""),
                        [F, Z, ei]
                    );
                return (0, y.jsxs)(nr, {
                    editing: Y,
                    children: [
                        Y &&
                            (0, y.jsx)(ak.A.Label, {
                                visuallyHidden: !0,
                                children: ah.query,
                            }),
                        (0, y.jsx)("div", {
                            className: `${ne.gap8} px-0 ${Y ? "d-flex" : "d-block"} flex-row flex-justify-between`,
                            children: (0, y.jsxs)("div", {
                                className: `${ne.filterContainer} ${ne.gap8} d-flex flex-row flex-1 flexWrap min-width-0`,
                                children: [
                                    (0, y.jsx)("div", {
                                        className: `${ne.filter} d-flex flex-1 flex-column`,
                                        children: (0, y.jsx)(l4.dJ, {
                                            id: S ?? "search",
                                            context: et ? { repo: et } : void 0,
                                            label: Y
                                                ? U.issueEditingSearchInputAriaLabel
                                                : U.issueSearchInputAriaLabel,
                                            visuallyHideLabel: !Y,
                                            placeholder:
                                                U.issueSearchInputPlaceholder,
                                            onSubmit: z,
                                            onChange: W,
                                            providers: et ? Q : eu,
                                            inputRef: s,
                                            filterValue: ec,
                                            variant: "input",
                                            settings: {
                                                aliasMatching: !0,
                                                groupAndKeywordSupport: !0,
                                            },
                                            showValidationMessage: !1,
                                            onValidation: J,
                                            showClearButton: null !== A && eo,
                                            customParser: et ? void 0 : ed,
                                        }),
                                    }),
                                    n,
                                    p &&
                                        !em(m) &&
                                        (0, y.jsx)(nt, {
                                            currentRepository: _,
                                        }),
                                    u.length > 0 &&
                                        (0, y.jsx)("div", {
                                            className: `${ne.validation} mt-1`,
                                            children: (0, y.jsx)(l4.Xl, {
                                                messages: u,
                                                id: "repository-validation-message",
                                            }),
                                        }),
                                ],
                            }),
                        }),
                    ],
                });
            }
            try {
                nr.displayName || (nr.displayName = "DynamicWrapper");
            } catch {}
            try {
                no.displayName || (no.displayName = "SearchBar");
            } catch {}
            let nu = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchRepository",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "SearchList",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "fetchRepository",
                                variableName: "fetchRepository",
                            },
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "labelPageSize",
                                variableName: "labelPageSize",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "ListItemsPaginated_results",
                    },
                ],
                type: "Searchable",
                abstractKey: "__isSearchable",
            };
            nu.hash = "eba993ac639526f6caaf137566bcdb58";
            let nd = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SearchListRepo",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDisabled",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isLocked",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isArchived",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInOrganization",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            nd.hash = "f65187d282f8f58f706a2eabbfe6075b";
            var nc = a(90434);
            let nm = {
                    "+1": "Thumbs up",
                    "-1": "Thumbs down",
                    rocket: "Rocket",
                    tada: "Hooray",
                    eyes: "Eyes",
                    heart: "Heart",
                    smile: "Laugh",
                    thinking_face: "Confused",
                },
                ng = {
                    sort: "Sort",
                    Newest: "Newest",
                    Oldest: "Oldest",
                    RecentlyUpdated: "Recently updated",
                    sortDropdownOptionDisplayValues: {
                        created: "Created on",
                        updated: "Last updated",
                        comments: "Total comments",
                        relevance: "Best match",
                    },
                    sortDropdownMenuButtonLabels: {
                        created: { asc: "Oldest", desc: "Newest" },
                        comments: "Comments",
                        updated: "Updated",
                        relevance: "Best match",
                        reactions: "Reactions",
                        ...nm,
                    },
                    sortDropdownReactionLabels: nm,
                    sortKeyToQuery: {
                        created: "sort:created",
                        comments: "sort:comments",
                        updated: "sort:updated",
                        reactions: "sort:reactions",
                        relevance: "sort:relevance",
                        "+1": "sort:reactions-+1",
                        "-1": "sort:reactions--1",
                        rocket: "sort:reactions-rocket",
                        tada: "sort:reactions-tada",
                        eyes: "sort:reactions-eyes",
                        heart: "sort:reactions-heart",
                        smile: "sort:reactions-smile",
                        thinking_face: "sort:reactions-thinking_face",
                    },
                    reactions: "Reactions",
                    Compact: "Compact",
                    noResultsTitle: "No results",
                    noResultsDescription: "Try adjusting your search filters.",
                    ascending: "Ascending",
                    descending: "Descending",
                    totalReactions: "Total reactions",
                };
            var np = a(5524),
                ny = a(81945);
            let nk = {
                    rowLoadingContainer:
                        "RowLoading-module__rowLoadingContainer--mNExW",
                    rowLoadingContent:
                        "RowLoading-module__rowLoadingContent--uUIRD",
                    LoadingSkeleton:
                        "RowLoading-module__LoadingSkeleton--J59rS",
                },
                nh = ({ width: e = "random", showCompactDensity: l = !1 }) =>
                    (0, y.jsx)(np.l.Item, {
                        "aria-disabled": "true",
                        children: (0, y.jsxs)(le.az, {
                            sx: {
                                alignItems: l ? "center" : "flex-start",
                                height: l ? "20px" : "40px",
                            },
                            className: nk.rowLoadingContainer,
                            children: [
                                (0, y.jsx)(ny.O, {
                                    variant: "elliptical",
                                    height: "md",
                                    width: "md",
                                }),
                                (0, y.jsxs)("div", {
                                    className: nk.rowLoadingContent,
                                    children: [
                                        (0, y.jsx)(ny.O, {
                                            variant: "rounded",
                                            height: "sm",
                                            width: e,
                                            children: (0, y.jsx)("span", {
                                                className: "sr-only",
                                                children: "loading",
                                            }),
                                        }),
                                        !l &&
                                            (0, y.jsx)(ny.O, {
                                                variant: "rounded",
                                                height: "12px",
                                                width: e,
                                                className: nk.LoadingSkeleton,
                                            }),
                                    ],
                                }),
                            ],
                        }),
                    });
            try {
                nh.displayName || (nh.displayName = "RowLoading");
            } catch {}
            let nb = ({ numberOfRows: e, isCompact: l }) =>
                (0, y.jsx)(np.l, {
                    children: [...Array(e)].map((e, a) =>
                        (0, y.jsx)(nh, { showCompactDensity: l }, a)
                    ),
                });
            try {
                nb.displayName || (nb.displayName = "ActionListLoading");
            } catch {}
            let nf = {
                    ListLoadingHeader:
                        "ListLoading-module__ListLoadingHeader--dnuoU",
                },
                nC = ({
                    pageSize: e,
                    showBorder: l = !0,
                    headerTitle: a,
                    sectionFilters: n,
                    isCompactRows: s,
                }) =>
                    (0, y.jsxs)(le.az, {
                        sx: l
                            ? {
                                  border: "1px solid",
                                  borderColor: "border.muted",
                                  borderRadius: 2,
                              }
                            : {},
                        children: [
                            l &&
                                (0, y.jsxs)("div", {
                                    className: nf.ListLoadingHeader,
                                    children: [
                                        a,
                                        n?.map((e, l) =>
                                            (0, y.jsx)(
                                                b.Fragment,
                                                { children: e },
                                                `section-filter-link-${l}`
                                            )
                                        ),
                                    ],
                                }),
                            (0, y.jsx)(nb, { numberOfRows: e, isCompact: s }),
                        ],
                    });
            try {
                nC.displayName || (nC.displayName = "ListLoading");
            } catch {}
            let nF = ({ layoutDensity: e, ...l }) => {
                let a = e === ng.Compact.toLowerCase();
                return (0, y.jsx)(nC, { isCompactRows: a, ...l });
            };
            try {
                nF.displayName || (nF.displayName = "ListLoading");
            } catch {}
            let nS = {
                    label: "label",
                    assignee: "assignee",
                    "parent-issue": "parent-issue",
                    is: "is",
                },
                nL = { today: "@today" },
                nK = { day: "d", week: "w", month: "m", year: "y" },
                nv = RegExp(`^(\\d+)(${Object.values(nK).join("|")})`),
                nI = /(?:^|\s)reason:"?(completed|not(\s|-)planned)"?(?:$|\s)/g;
            function n_(e, l) {
                var a;
                let n = nx(
                    ((a = e),
                    l?.is_archived ? a : `${"" === a ? "archived:false" : a}`)
                );
                if (!l) return n;
                let s = "",
                    i = nw(n),
                    t = (function (e) {
                        let l = new Map(e),
                            a = l.get("is") || [],
                            n = l.get("type") || [],
                            s = {
                                issue: a.includes("issue"),
                                pr: a.includes("pr"),
                            };
                        a.length || l.delete("is");
                        let i = n.filter((e) => !s[e]);
                        return (
                            i.length > 0 ? l.set("type", i) : l.delete("type"),
                            l
                        );
                    })(i),
                    r = i.has("sort") ? "" : "sort:created-desc";
                for (let [e, l] of ((s = n),
                (function (e, l) {
                    let a = new Map();
                    for (let [n, s] of e) l.has(n) || a.set(n, s);
                    return a;
                })(i, t))) {
                    let a = `${e}:${l}`;
                    s = s.replace(a, "");
                }
                return [
                    (s = (s = (s = (function (e) {
                        let l = e.match(/(".*?"|[^"\s]+)+/g) ?? [],
                            a = /^(repo:|org:|user:|@)/;
                        return l.filter((e) => !a.test(e)).join(" ");
                    })(s))
                        .replace(/("[^"]*")|[ \t\r\n]+/g, (e, l) => l || " ")
                        .trim()).trim()),
                    `repo:${l.owner}/${l.name}`,
                    r,
                ]
                    .join(" ")
                    .trim();
            }
            function nx(e) {
                let l = (function (e) {
                    let l = [],
                        a = e.indexOf("@");
                    if (-1 === a) return l;
                    for (; a < e.length; ) {
                        for (let n in nL) {
                            let s = nL[n];
                            if (e.startsWith(s, a)) {
                                (l.push({ token: s, pos: a }), (a += s.length));
                                break;
                            }
                        }
                        if (-1 === (a = e.indexOf("@", a + 1))) break;
                    }
                    return l;
                })(e);
                if (0 === l.length) return e;
                let a = (function (e, l) {
                    let a = new Date(),
                        n = [];
                    for (let s of l) {
                        let l = s.token === nL.today ? a.getTime() : void 0;
                        if (!l) continue;
                        let i = (function (e, l, a) {
                            let n = l.token.length,
                                s = e.substring(l.pos + n, l.pos + n + 1);
                            if ("" === s || " " === s)
                                return {
                                    newValue: a.toISOString().substring(0, 10),
                                    length: n,
                                };
                            if ("-" === s || "+" === s) {
                                let r = e.substring(
                                    l.pos + l.token.length + s.length
                                );
                                var i = nv.exec(r),
                                    t = n;
                                if (!i) return null;
                                let o = parseInt(i[1], 10),
                                    u = i[2];
                                t += s.length + i[0].length;
                                let d = (function (e, l, a, n) {
                                    let s = new Date(e.getTime()),
                                        i = "-" === n ? -1 : 1;
                                    switch (a) {
                                        case nK.day:
                                            s.setDate(e.getDate() + i * l);
                                            break;
                                        case nK.week:
                                            s.setDate(e.getDate() + i * l * 7);
                                            break;
                                        case nK.month:
                                            (s.setMonth(e.getMonth() + i * l),
                                                1 === s.getDate() &&
                                                    1 !== e.getDate() &&
                                                    s.setDate(s.getDate() - 1));
                                            break;
                                        case nK.year:
                                            s.setFullYear(
                                                e.getFullYear() + i * l
                                            );
                                            break;
                                        default:
                                            return null;
                                    }
                                    return s;
                                })(a, o, u, s);
                                return d
                                    ? {
                                          newValue: d
                                              .toISOString()
                                              .substring(0, 10),
                                          length: t,
                                      }
                                    : null;
                            }
                            return null;
                        })(e, s, new Date(l));
                        i && n.push({ tokenPosition: s, replacement: i });
                    }
                    return n;
                })(e, l);
                return 0 === a.length
                    ? e
                    : (function (e, l) {
                          let a = e;
                          for (let e of l.reverse())
                              a =
                                  a.substring(0, e.tokenPosition.pos) +
                                  e.replacement.newValue +
                                  a.substring(
                                      e.tokenPosition.pos + e.replacement.length
                                  );
                          return a;
                      })(e, a);
            }
            function nw(e) {
                let l = new Map();
                for (let a of (l.set("searchTerms", []),
                e
                    .trim()
                    .split(/((?:[^\s"]+|"[^"]*")+)/g)
                    .filter((e) => "" !== e.trim()))) {
                    let [e, n] = a.split(/:(.*)/s);
                    if (e && n) {
                        if (!l.has(e)) {
                            l.set(e, [n]);
                            continue;
                        }
                        l.set(e, [...l.get(e), n]);
                        continue;
                    }
                    l.set("searchTerms", [...l.get("searchTerms"), a]);
                }
                return l;
            }
            function nN(e) {
                if (!e) return !1;
                let l = nw(e).get("sort");
                return (
                    (l && 1 === l.length && l[0].startsWith("reactions-")) || !1
                );
            }
            function nj(e) {
                let l = nw(e),
                    a = new Map(
                        [...(l.get("is") || []), ...(l.get("type") || [])].map(
                            (e) => [e, !0]
                        )
                    ),
                    n = a.has("pr") || a.has("pull-request"),
                    s = a.has("issue") || a.has("issues");
                return n && !s;
            }
            var nR = a(76873),
                nP = a(66730),
                nT = a(10095),
                nA = a(34164);
            let nM = {
                    errorIcon: "ListError-module__errorIcon--JanXt",
                    errorMessage: "ListError-module__errorMessage--Ba9p5",
                    retryLink: "ListError-module__retryLink--dfTU6",
                },
                nV = ({
                    retry: e,
                    icon: l,
                    title: a,
                    message: n,
                    retryText: s,
                    testid: i,
                }) =>
                    (0, y.jsxs)("div", {
                        className: "blankslate",
                        "data-testid": i,
                        children: [
                            (0, y.jsx)(nT.A, {
                                className: (0, nA.$)(
                                    "blankslate-icon",
                                    nM.errorIcon
                                ),
                                icon: l ?? T.AlertFillIcon,
                            }),
                            (0, y.jsx)("h3", {
                                className: "blankslate-heading",
                                children: a,
                            }),
                            (0, y.jsx)("p", {
                                className: nM.errorMessage,
                                children: n,
                            }),
                            e &&
                                (0, y.jsx)(e9.A, {
                                    as: "button",
                                    underline: !0,
                                    onClick: e,
                                    className: nM.retryLink,
                                    children: s ?? nP.l.tryAgain,
                                }),
                        ],
                    });
            try {
                nV.displayName || (nV.displayName = "ListError");
            } catch {}
            let nD = {
                    list: "list",
                    listHeader: "list-header",
                    issueRowItem: (e) => `issue-row-${e}`,
                    pullRequestRowItem: (e) => `pull-request-row-${e}`,
                    headerLoading: "header-loading",
                    issueViewerContainer: "issue-viewer-container",
                    fallback: "list-error-fallback",
                    milestoneAnchorFilter: "milestones-anchor-button",
                    issueTypeAnchorFilter: "issue-types-anchor-button",
                    ftcBannerContributingGuidelinesLink:
                        "contributing-guidelines",
                },
                nE = (e) =>
                    (0, y.jsx)(nV, {
                        retry: e,
                        title: ah.failedToLoadIssues,
                        message: ah.errorLoadingIssues,
                        testid: nD.fallback,
                    });
            try {
                nE.displayName || (nE.displayName = "ListError");
            } catch {}
            let nq = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "cursor",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchRepository",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    s = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "includeGitData",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    t = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    r = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    o = [{ kind: "Variable", name: "id", variableName: "id" }],
                    u = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    d = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    c = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    p = [
                        {
                            kind: "Variable",
                            name: "after",
                            variableName: "cursor",
                        },
                        u,
                        d,
                        c,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    C = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                    F = {
                        kind: "InlineFragment",
                        selections: [g],
                        type: "Node",
                        abstractKey: "__isNode",
                    },
                    S = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "labelPageSize",
                        },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "endCursor",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: S,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            g,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            b,
                                            h,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            m,
                                        ],
                                        storageKey: null,
                                    },
                                    L,
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [K, v],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: S,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    x = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    w = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    N = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    j = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    R = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            f,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            m,
                            C,
                            g,
                        ],
                        storageKey: null,
                    },
                    P = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    T = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                k,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                                g,
                            ],
                            storageKey: null,
                        },
                    ],
                    A = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: T,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: T,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    },
                    M = {
                        kind: "InlineFragment",
                        selections: [
                            I,
                            _,
                            x,
                            w,
                            N,
                            j,
                            R,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                            P,
                            A,
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    V = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "reviewDecision",
                        storageKey: null,
                    },
                    D = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    E = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInMergeQueue",
                        storageKey: null,
                    },
                    q = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    O = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [m, f, g],
                        storageKey: null,
                    },
                    B = {
                        alias: null,
                        args: null,
                        concreteType: "StatusCheckRollup",
                        kind: "LinkedField",
                        name: "statusCheckRollup",
                        plural: !1,
                        selections: [
                            P,
                            {
                                alias: null,
                                args: null,
                                concreteType:
                                    "StatusCheckRollupContextConnection",
                                kind: "LinkedField",
                                name: "contexts",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "checkRunCount",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "CheckRunStateCount",
                                        kind: "LinkedField",
                                        name: "checkRunCountsByState",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "count",
                                                storageKey: null,
                                            },
                                            P,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            g,
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a, n, s, i, t, r],
                        kind: "Fragment",
                        metadata: null,
                        name: "SearchPaginatedQuery",
                        selections: [
                            {
                                alias: null,
                                args: o,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "fetchRepository",
                                                variableName: "fetchRepository",
                                            },
                                            u,
                                            {
                                                kind: "Variable",
                                                name: "includeGitData",
                                                variableName: "includeGitData",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "labelPageSize",
                                                variableName: "labelPageSize",
                                            },
                                            d,
                                            c,
                                        ],
                                        kind: "FragmentSpread",
                                        name: "ListItemsPaginated_results",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, l, a, s, i, t, r, n],
                        kind: "Operation",
                        name: "SearchPaginatedQuery",
                        selections: [
                            {
                                alias: null,
                                args: o,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    m,
                                    g,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: p,
                                                concreteType:
                                                    "SearchResultItemConnection",
                                                kind: "LinkedField",
                                                name: "search",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "issueCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        if: null,
                                                        kind: "Stream",
                                                        label: "ListItemsPaginated_results$stream$Query_search",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "SearchResultItemEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                m,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            g,
                                                                                            y,
                                                                                            k,
                                                                                            {
                                                                                                alias: "titleHtml",
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "titleHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "IssueType",
                                                                                                kind: "LinkedField",
                                                                                                name: "issueType",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        g,
                                                                                                        h,
                                                                                                        b,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: [
                                                                                                    {
                                                                                                        kind: "Literal",
                                                                                                        name: "first",
                                                                                                        value: 10,
                                                                                                    },
                                                                                                ],
                                                                                                concreteType:
                                                                                                    "AssigneeConnection",
                                                                                                kind: "LinkedField",
                                                                                                name: "assignedActors",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                "AssigneeEdge",
                                                                                                            kind: "LinkedField",
                                                                                                            name: "edges",
                                                                                                            plural: !0,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        concreteType:
                                                                                                                            null,
                                                                                                                        kind: "LinkedField",
                                                                                                                        name: "node",
                                                                                                                        plural: !1,
                                                                                                                        selections:
                                                                                                                            [
                                                                                                                                m,
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        [
                                                                                                                                            g,
                                                                                                                                            f,
                                                                                                                                            h,
                                                                                                                                            {
                                                                                                                                                alias: null,
                                                                                                                                                args: null,
                                                                                                                                                kind: "ScalarField",
                                                                                                                                                name: "profileResourcePath",
                                                                                                                                                storageKey:
                                                                                                                                                    null,
                                                                                                                                            },
                                                                                                                                            {
                                                                                                                                                alias: null,
                                                                                                                                                args: [
                                                                                                                                                    {
                                                                                                                                                        kind: "Literal",
                                                                                                                                                        name: "size",
                                                                                                                                                        value: 64,
                                                                                                                                                    },
                                                                                                                                                ],
                                                                                                                                                kind: "ScalarField",
                                                                                                                                                name: "avatarUrl",
                                                                                                                                                storageKey:
                                                                                                                                                    "avatarUrl(size:64)",
                                                                                                                                            },
                                                                                                                                            C,
                                                                                                                                        ],
                                                                                                                                    type: "Actor",
                                                                                                                                    abstractKey:
                                                                                                                                        "__isActor",
                                                                                                                                },
                                                                                                                                F,
                                                                                                                            ],
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    "assignedActors(first:10)",
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "Repository",
                                                                                                kind: "LinkedField",
                                                                                                name: "repository",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "databaseId",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "isPrivate",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "isArchived",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        g,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        M,
                                                                                                        {
                                                                                                            kind: "InlineFragment",
                                                                                                            selections:
                                                                                                                [
                                                                                                                    I,
                                                                                                                    _,
                                                                                                                    x,
                                                                                                                    w,
                                                                                                                    N,
                                                                                                                    j,
                                                                                                                    R,
                                                                                                                    V,
                                                                                                                    D,
                                                                                                                    E,
                                                                                                                    q,
                                                                                                                    A,
                                                                                                                ],
                                                                                                            type: "PullRequest",
                                                                                                            abstractKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                type: "IssueOrPullRequest",
                                                                                                abstractKey:
                                                                                                    "__isIssueOrPullRequest",
                                                                                            },
                                                                                            {
                                                                                                condition:
                                                                                                    "fetchRepository",
                                                                                                kind: "Condition",
                                                                                                passingValue:
                                                                                                    !0,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                "Repository",
                                                                                                            kind: "LinkedField",
                                                                                                            name: "repository",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    h,
                                                                                                                    O,
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                            },
                                                                                        ],
                                                                                    type: "Issue",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            g,
                                                                                            y,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "Repository",
                                                                                                kind: "LinkedField",
                                                                                                name: "repository",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        h,
                                                                                                        O,
                                                                                                        g,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            k,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "titleHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                condition:
                                                                                                    "includeGitData",
                                                                                                kind: "Condition",
                                                                                                passingValue:
                                                                                                    !0,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                "PullRequestCommit",
                                                                                                            kind: "LinkedField",
                                                                                                            name: "headCommit",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        concreteType:
                                                                                                                            "Commit",
                                                                                                                        kind: "LinkedField",
                                                                                                                        name: "commit",
                                                                                                                        plural: !1,
                                                                                                                        selections:
                                                                                                                            [
                                                                                                                                g,
                                                                                                                                B,
                                                                                                                            ],
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                    g,
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        B,
                                                                                                    ],
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        M,
                                                                                                        {
                                                                                                            kind: "InlineFragment",
                                                                                                            selections:
                                                                                                                [
                                                                                                                    I,
                                                                                                                    _,
                                                                                                                    x,
                                                                                                                    w,
                                                                                                                    N,
                                                                                                                    j,
                                                                                                                    R,
                                                                                                                    D,
                                                                                                                    q,
                                                                                                                    A,
                                                                                                                    {
                                                                                                                        condition:
                                                                                                                            "includeGitData",
                                                                                                                        kind: "Condition",
                                                                                                                        passingValue:
                                                                                                                            !0,
                                                                                                                        selections:
                                                                                                                            [
                                                                                                                                V,
                                                                                                                                E,
                                                                                                                            ],
                                                                                                                    },
                                                                                                                ],
                                                                                                            type: "PullRequest",
                                                                                                            abstractKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                type: "IssueOrPullRequest",
                                                                                                abstractKey:
                                                                                                    "__isIssueOrPullRequest",
                                                                                            },
                                                                                        ],
                                                                                    type: "PullRequest",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                F,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    L,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                    },
                                                    {
                                                        if: null,
                                                        kind: "Defer",
                                                        label: "ListItemsPaginated_results$defer$Query_search$pageInfo",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "PageInfo",
                                                                kind: "LinkedField",
                                                                name: "pageInfo",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "startCursor",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    K,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "hasPreviousPage",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    v,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: p,
                                                filters: [
                                                    "query",
                                                    "type",
                                                    "skip",
                                                ],
                                                handle: "connection",
                                                key: "Query_search",
                                                kind: "LinkedHandle",
                                                name: "search",
                                            },
                                            {
                                                kind: "TypeDiscriminator",
                                                abstractKey: "__isNode",
                                            },
                                        ],
                                        type: "Searchable",
                                        abstractKey: "__isSearchable",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "24d0fe725e131dc555c2bd7e2a1f1c1a",
                        metadata: {},
                        name: "SearchPaginatedQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            nq.hash = "e1b8aa7e19458e9e6efcbb2e0d9f0481";
            let nO = (function () {
                var e = ["search"],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    s = {
                        kind: "Variable",
                        name: "labelPageSize",
                        variableName: "labelPageSize",
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "fetchRepository",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "includeGitData",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "labelPageSize",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "query",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "skip",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "first",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                                stream: !0,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: { count: "first", cursor: "cursor" },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: nq,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "ListItemsPaginated_results",
                    selections: [
                        {
                            kind: "CatchField",
                            field: {
                                alias: "search",
                                args: [
                                    {
                                        kind: "Variable",
                                        name: "query",
                                        variableName: "query",
                                    },
                                    {
                                        kind: "Variable",
                                        name: "skip",
                                        variableName: "skip",
                                    },
                                    {
                                        kind: "Literal",
                                        name: "type",
                                        value: "ISSUE_ADVANCED",
                                    },
                                ],
                                concreteType: "SearchResultItemConnection",
                                kind: "LinkedField",
                                name: "__Query_search_connection",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "issueCount",
                                        storageKey: null,
                                    },
                                    {
                                        kind: "Stream",
                                        selections: [
                                            {
                                                kind: "RequiredField",
                                                field: {
                                                    alias: null,
                                                    args: null,
                                                    concreteType:
                                                        "SearchResultItemEdge",
                                                    kind: "LinkedField",
                                                    name: "edges",
                                                    plural: !0,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType: null,
                                                            kind: "LinkedField",
                                                            name: "node",
                                                            plural: !1,
                                                            selections: [
                                                                l,
                                                                {
                                                                    kind: "InlineFragment",
                                                                    selections:
                                                                        [
                                                                            a,
                                                                            n,
                                                                            {
                                                                                args: [
                                                                                    {
                                                                                        kind: "Variable",
                                                                                        name: "fetchRepository",
                                                                                        variableName:
                                                                                            "fetchRepository",
                                                                                    },
                                                                                    s,
                                                                                ],
                                                                                kind: "FragmentSpread",
                                                                                name: "IssueRow",
                                                                            },
                                                                            {
                                                                                kind: "InlineDataFragmentSpread",
                                                                                name: "ApplyAssigneesBulkActionIssueFragment",
                                                                                selections:
                                                                                    [
                                                                                        a,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: [
                                                                                                {
                                                                                                    kind: "Literal",
                                                                                                    name: "first",
                                                                                                    value: 10,
                                                                                                },
                                                                                            ],
                                                                                            concreteType:
                                                                                                "AssigneeConnection",
                                                                                            kind: "LinkedField",
                                                                                            name: "assignedActors",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        concreteType:
                                                                                                            "AssigneeEdge",
                                                                                                        kind: "LinkedField",
                                                                                                        name: "edges",
                                                                                                        plural: !0,
                                                                                                        selections:
                                                                                                            [
                                                                                                                {
                                                                                                                    alias: null,
                                                                                                                    args: null,
                                                                                                                    concreteType:
                                                                                                                        null,
                                                                                                                    kind: "LinkedField",
                                                                                                                    name: "node",
                                                                                                                    plural: !1,
                                                                                                                    selections:
                                                                                                                        [
                                                                                                                            {
                                                                                                                                kind: "InlineDataFragmentSpread",
                                                                                                                                name: "AssigneePickerSharedAssignee",
                                                                                                                                selections:
                                                                                                                                    [
                                                                                                                                        {
                                                                                                                                            kind: "InlineFragment",
                                                                                                                                            selections:
                                                                                                                                                [
                                                                                                                                                    l,
                                                                                                                                                    a,
                                                                                                                                                    {
                                                                                                                                                        alias: null,
                                                                                                                                                        args: null,
                                                                                                                                                        kind: "ScalarField",
                                                                                                                                                        name: "login",
                                                                                                                                                        storageKey:
                                                                                                                                                            null,
                                                                                                                                                    },
                                                                                                                                                    {
                                                                                                                                                        alias: null,
                                                                                                                                                        args: null,
                                                                                                                                                        kind: "ScalarField",
                                                                                                                                                        name: "name",
                                                                                                                                                        storageKey:
                                                                                                                                                            null,
                                                                                                                                                    },
                                                                                                                                                    {
                                                                                                                                                        alias: null,
                                                                                                                                                        args: null,
                                                                                                                                                        kind: "ScalarField",
                                                                                                                                                        name: "profileResourcePath",
                                                                                                                                                        storageKey:
                                                                                                                                                            null,
                                                                                                                                                    },
                                                                                                                                                    {
                                                                                                                                                        alias: null,
                                                                                                                                                        args: [
                                                                                                                                                            {
                                                                                                                                                                kind: "Literal",
                                                                                                                                                                name: "size",
                                                                                                                                                                value: 64,
                                                                                                                                                            },
                                                                                                                                                        ],
                                                                                                                                                        kind: "ScalarField",
                                                                                                                                                        name: "avatarUrl",
                                                                                                                                                        storageKey:
                                                                                                                                                            "avatarUrl(size:64)",
                                                                                                                                                    },
                                                                                                                                                    {
                                                                                                                                                        kind: "InlineFragment",
                                                                                                                                                        selections:
                                                                                                                                                            [
                                                                                                                                                                {
                                                                                                                                                                    alias: null,
                                                                                                                                                                    args: null,
                                                                                                                                                                    kind: "ScalarField",
                                                                                                                                                                    name: "isCopilot",
                                                                                                                                                                    storageKey:
                                                                                                                                                                        null,
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        type: "Bot",
                                                                                                                                                        abstractKey:
                                                                                                                                                            null,
                                                                                                                                                    },
                                                                                                                                                ],
                                                                                                                                            type: "Actor",
                                                                                                                                            abstractKey:
                                                                                                                                                "__isActor",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                args: null,
                                                                                                                                argumentDefinitions:
                                                                                                                                    [],
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    storageKey:
                                                                                                                        null,
                                                                                                                },
                                                                                                            ],
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                ],
                                                                                            storageKey:
                                                                                                "assignedActors(first:10)",
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                "Repository",
                                                                                            kind: "LinkedField",
                                                                                            name: "repository",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "databaseId",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "isPrivate",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "isArchived",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                args: null,
                                                                                argumentDefinitions:
                                                                                    [],
                                                                            },
                                                                        ],
                                                                    type: "Issue",
                                                                    abstractKey:
                                                                        null,
                                                                },
                                                                {
                                                                    kind: "InlineFragment",
                                                                    selections:
                                                                        [
                                                                            a,
                                                                            n,
                                                                            {
                                                                                args: [
                                                                                    {
                                                                                        kind: "Variable",
                                                                                        name: "includeGitData",
                                                                                        variableName:
                                                                                            "includeGitData",
                                                                                    },
                                                                                    s,
                                                                                ],
                                                                                kind: "FragmentSpread",
                                                                                name: "PullRequestRow_pullRequest",
                                                                            },
                                                                        ],
                                                                    type: "PullRequest",
                                                                    abstractKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "cursor",
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                                action: "THROW",
                                            },
                                        ],
                                    },
                                    {
                                        kind: "Defer",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "PageInfo",
                                                kind: "LinkedField",
                                                name: "pageInfo",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "startCursor",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "endCursor",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "hasPreviousPage",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "hasNextPage",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                ],
                                storageKey: null,
                            },
                            to: "RESULT",
                        },
                        {
                            kind: "InlineFragment",
                            selections: [a],
                            type: "Node",
                            abstractKey: "__isNode",
                        },
                    ],
                    type: "Searchable",
                    abstractKey: "__isSearchable",
                };
            })();
            nO.hash = "e1b8aa7e19458e9e6efcbb2e0d9f0481";
            var nB = a(4559),
                n$ = a(97174);
            let nQ = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchRepository",
                    },
                    {
                        defaultValue: !0,
                        kind: "LocalArgument",
                        name: "includeMilestone",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "IssueRow",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "includeMilestone",
                                variableName: "includeMilestone",
                            },
                            {
                                kind: "Variable",
                                name: "labelPageSize",
                                variableName: "labelPageSize",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "IssueItem",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    {
                        condition: "fetchRepository",
                        kind: "Condition",
                        passingValue: !0,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "name",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "owner",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "login",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            nQ.hash = "21fd35aed4bf06bc46c2c5f43e336427";
            var nU = a(21067),
                nz = a(83494);
            let nH = {
                argumentDefinitions: [
                    {
                        defaultValue: !0,
                        kind: "LocalArgument",
                        name: "includeMilestone",
                    },
                    {
                        defaultValue: 10,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "IssueItem",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    {
                        alias: "titleHtml",
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "labelPageSize",
                                variableName: "labelPageSize",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "IssuePullRequestTitle",
                    },
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "includeMilestone",
                                variableName: "includeMilestone",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "IssuePullRequestDescription",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssuePullRequestStateIcon",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueTypeIndicator",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            nH.hash = "0117efdfcd4f84d5eb84fd080781921a";
            var nW = a(72822),
                nG = a(2970),
                nZ = a(98994),
                nX = a(51880),
                nJ = a(43617);
            let nY = {
                    ListItem_0: "IssueItem-module__ListItem_0--ni8FY",
                    leadingContent: "IssueItem-module__leadingContent--s16iU",
                    commentCountContainer:
                        "IssueItem-module__commentCountContainer--YUcKU",
                    defaultRepoContainer:
                        "IssueItem-module__defaultRepoContainer--oNwmq",
                    timestampContainer:
                        "IssueItem-module__timestampContainer--koCC8",
                    authorCreatedLink:
                        "IssueItem-module__authorCreatedLink--kzskP",
                    defaultNumberDescription:
                        "IssueItem-module__defaultNumberDescription--_0xgU",
                    compactNameWithOwnerLabel:
                        "IssueItem-module__compactNameWithOwnerLabel--DzPNM",
                    token: "IssueItem-module__token--huZNl",
                },
                n1 = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueItemBlockedBy",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "IssueDependenciesSummary",
                            kind: "LinkedField",
                            name: "issueDependenciesSummary",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "blockedBy",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            n1.hash = "9c625883c1ab2a710b78eb3d2e69cda8";
            var n2 = a(29731),
                n0 = a(54070);
            function n3({ metadataRef: e, issueId: l, getIssueTypeHref: a }) {
                return e
                    ? (0, y.jsx)(b.Suspense, {
                          fallback: null,
                          children: (0, y.jsx)(n4, {
                              issueId: l,
                              metadataRef: e,
                              getIssueTypeHref: a,
                          }),
                      })
                    : null;
            }
            function n4({ metadataRef: e, issueId: l, getIssueTypeHref: a }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(iX, e),
                    s = n?.find((e) => e?.id === l);
                return s
                    ? (0, y.jsx)(n5, { blockedByKey: s, getIssueTypeHref: a })
                    : null;
            }
            function n5({ blockedByKey: e, getIssueTypeHref: l }) {
                let a = (0, er.useFragment)(n1, e);
                if (a?.state === "CLOSED" || !a?.issueDependenciesSummary)
                    return null;
                let { blockedBy: n } = a.issueDependenciesSummary;
                if (0 === n) return null;
                let s = l?.() ?? void 0;
                return (0, y.jsx)(n0.A, {
                    text: "Blocked",
                    leadingVisual: () =>
                        (0, y.jsx)(T.BlockedIcon, {
                            className: "fgColor-danger",
                            size: 14,
                        }),
                    className: nY.token,
                    ...(s ? { as: "a", href: s } : {}),
                    ...(0, n2.G)("blocked-by-token"),
                });
            }
            try {
                n3.displayName || (n3.displayName = "IssueItemBlockedBy");
            } catch {}
            try {
                n4.displayName ||
                    (n4.displayName = "IssueItemBlockedByFetched");
            } catch {}
            try {
                n5.displayName ||
                    (n5.displayName = "IssueItemBlockedByInternal");
            } catch {}
            let n7 = {
                argumentDefinitions: [
                    {
                        defaultValue: 10,
                        kind: "LocalArgument",
                        name: "assigneePageSize",
                    },
                    {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "includeReactions",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "IssueItemMetadata",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        condition: "includeReactions",
                        kind: "Condition",
                        passingValue: !0,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "ReactionGroup",
                                kind: "LinkedField",
                                name: "reactionGroups",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        condition: "includeReactions",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "Reactions",
                                            },
                                        ],
                                    },
                                ],
                                type: "Reactable",
                                abstractKey: "__isReactable",
                            },
                        ],
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCommentsCount",
                        storageKey: null,
                    },
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "assigneePageSize",
                                variableName: "assigneePageSize",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "Assignees",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "ClosedByPullRequestsReferences",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            n7.hash = "40031c7706e02f95b7bde55bd32d1463";
            var n6 = a(4929),
                n9 = a(35220);
            let n8 = {
                    listRowRepoNameAndNumber: "list-row-repo-name-and-number",
                    listRowStateIcon: "list-row-state-icon",
                    listRowComments: "list-row-comments",
                    listRowAssignees: "list-row-assignees",
                    listRowLinkedPullRequests: "list-row-linked-pull-requests",
                },
                se = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "assigneePageSize",
                            },
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "cursor",
                            },
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "id",
                            },
                        ],
                        l = [
                            {
                                kind: "Variable",
                                name: "id",
                                variableName: "id",
                            },
                        ],
                        a = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        s = [
                            {
                                kind: "Variable",
                                name: "after",
                                variableName: "cursor",
                            },
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "assigneePageSize",
                            },
                        ],
                        i = [n];
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "IssueAssigneePaginatedQuery",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "node",
                                    plural: !1,
                                    selections: [
                                        {
                                            args: [
                                                {
                                                    kind: "Variable",
                                                    name: "assigneePageSize",
                                                    variableName:
                                                        "assigneePageSize",
                                                },
                                                {
                                                    kind: "Variable",
                                                    name: "cursor",
                                                    variableName: "cursor",
                                                },
                                            ],
                                            kind: "FragmentSpread",
                                            name: "Assignees",
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "Query",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "IssueAssigneePaginatedQuery",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "node",
                                    plural: !1,
                                    selections: [
                                        a,
                                        n,
                                        {
                                            kind: "InlineFragment",
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: s,
                                                    concreteType:
                                                        "AssigneeConnection",
                                                    kind: "LinkedField",
                                                    name: "assignedActors",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "AssigneeEdge",
                                                            kind: "LinkedField",
                                                            name: "edges",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "node",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            a,
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    i,
                                                                                type: "User",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    i,
                                                                                type: "Bot",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "login",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: [
                                                                                                {
                                                                                                    kind: "Literal",
                                                                                                    name: "size",
                                                                                                    value: 64,
                                                                                                },
                                                                                            ],
                                                                                            kind: "ScalarField",
                                                                                            name: "avatarUrl",
                                                                                            storageKey:
                                                                                                "avatarUrl(size:64)",
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                [
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "isCopilot",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                ],
                                                                                            type: "Bot",
                                                                                            abstractKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                type: "Actor",
                                                                                abstractKey:
                                                                                    "__isActor",
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    i,
                                                                                type: "Node",
                                                                                abstractKey:
                                                                                    "__isNode",
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "cursor",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "PageInfo",
                                                            kind: "LinkedField",
                                                            name: "pageInfo",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "endCursor",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "hasNextPage",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: s,
                                                    filters: null,
                                                    handle: "connection",
                                                    key: "IssueAssignees_assignedActors",
                                                    kind: "LinkedHandle",
                                                    name: "assignedActors",
                                                },
                                                {
                                                    kind: "TypeDiscriminator",
                                                    abstractKey: "__isNode",
                                                },
                                            ],
                                            type: "Assignable",
                                            abstractKey: "__isAssignable",
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "cd6195d2574e8fd2e46055cd654680f6",
                            metadata: {},
                            name: "IssueAssigneePaginatedQuery",
                            operationKind: "query",
                            text: null,
                        },
                    };
                })();
            se.hash = "6430a51068d73c42eaf731eae13d2c00";
            let sl = (function () {
                var e = ["assignedActors"],
                    l = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                    ];
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "assigneePageSize",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "assigneePageSize",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: {
                                    count: "assigneePageSize",
                                    cursor: "cursor",
                                },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: se,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "Assignees",
                    selections: [
                        {
                            alias: "assignedActors",
                            args: null,
                            concreteType: "AssigneeConnection",
                            kind: "LinkedField",
                            name: "__IssueAssignees_assignedActors_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "AssigneeEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                {
                                                    kind: "InlineFragment",
                                                    selections: l,
                                                    type: "User",
                                                    abstractKey: null,
                                                },
                                                {
                                                    kind: "InlineFragment",
                                                    selections: l,
                                                    type: "Bot",
                                                    abstractKey: null,
                                                },
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "Assignee",
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            kind: "InlineFragment",
                            selections: l,
                            type: "Node",
                            abstractKey: "__isNode",
                        },
                    ],
                    type: "Assignable",
                    abstractKey: "__isAssignable",
                };
            })();
            sl.hash = "6430a51068d73c42eaf731eae13d2c00";
            var sa = a(94602);
            let sn = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "Assignee",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                ],
                type: "Actor",
                abstractKey: "__isActor",
            };
            sn.hash = "42bd9fa660c90cbfea3449aa2b1d2c2c";
            var ss = a(12360),
                si = a(20403);
            let st = {
                    AssigneeAvatar: "Assignee-module__AssigneeAvatar--HCh3l",
                },
                sr = {
                    noAssigneeContainer:
                        "Assignees-module__noAssigneeContainer--ah41X",
                    assigneeIconLink:
                        "Assignees-module__assigneeIconLink--z2k8h",
                    AssigneesAvatarStack:
                        "Assignees-module__AssigneesAvatarStack--n7mGX",
                    noAssigneePersonIcon:
                        "Assignees-module__noAssigneePersonIcon--WUoXm",
                    noAssigneeBackgroundIcon:
                        "Assignees-module__noAssigneeBackgroundIcon--D8tOJ",
                };
            function so({ assignee: e, getAssigneeHref: l, className: a }) {
                let {
                        login: n,
                        avatarUrl: s,
                        isCopilot: i,
                    } = (0, er.useFragment)(sn, e),
                    t = i ? "Copilot" : n,
                    r = (0, si.S)(n, { isCopilot: i });
                return (0, y.jsx)(e9.A, {
                    "aria-label": `${t} is assigned`,
                    href: l(i ? "@copilot" : n),
                    ...r,
                    className: (0, nA.$)(
                        a,
                        "pc-AvatarItem",
                        sr.assigneeIconLink
                    ),
                    children: i
                        ? (0, y.jsx)(ss.C, { size: "small" }, n)
                        : (0, y.jsx)(
                              e1.r,
                              { alt: t, src: s, className: st.AssigneeAvatar },
                              n
                          ),
                });
            }
            try {
                so.displayName || (so.displayName = "Assignee");
            } catch {}
            function su({
                assigneeskey: e,
                getAssigneeHref: l,
                showPlaceholder: a = !0,
            }) {
                let { data: n } = (0, er.usePaginationFragment)(sl, e),
                    s = (n.assignedActors?.edges || []).flatMap((e) =>
                        e && e.node ? e.node : []
                    );
                return s.length
                    ? (0, y.jsx)(sa.A, {
                          alignRight: !0,
                          className: sr.AssigneesAvatarStack,
                          children: s.map((e) =>
                              (0, y.jsx)(
                                  so,
                                  { assignee: e, getAssigneeHref: l },
                                  e.id
                              )
                          ),
                      })
                    : a
                      ? (0, y.jsxs)("div", {
                            className: sr.noAssigneeContainer,
                            children: [
                                (0, y.jsx)(nT.A, {
                                    icon: T.PersonIcon,
                                    className: sr.noAssigneePersonIcon,
                                }),
                                (0, y.jsx)(nT.A, {
                                    size: 24,
                                    icon: T.CircleIcon,
                                    className: sr.noAssigneeBackgroundIcon,
                                }),
                            ],
                        })
                      : null;
            }
            try {
                su.displayName || (su.displayName = "Assignees");
            } catch {}
            var sd = a(82082);
            let sc = {
                    ListItemMetadata_0:
                        "IssueItemMetadata-module__ListItemMetadata_0--iaEA1",
                },
                sm = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "Reactions",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "ReactionGroup",
                            kind: "LinkedField",
                            name: "reactionGroups",
                            plural: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "content",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "ReactorConnection",
                                    kind: "LinkedField",
                                    name: "reactors",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "totalCount",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Reactable",
                    abstractKey: "__isReactable",
                };
            sm.hash = "74f8d34cc7d8c1ceb397b94750030f0d";
            let sg = {
                    reactionsContainer:
                        "Reactions-module__reactionsContainer--pA7Pn",
                },
                sp = ({
                    dataKey: e,
                    reactionEmojiToDisplay: l,
                    showCompactDensity: a = !1,
                }) => {
                    let n = (0, er.useFragment)(sm, e),
                        s =
                            n.reactionGroups?.filter(
                                (e) => e.content === l.reaction
                            )[0]?.reactors.totalCount || 0;
                    return l?.reactionEmoji && 0 !== s
                        ? (0, y.jsx)(le.az, {
                              sx: { minWidth: a ? 0 : "45px", ml: 3 * !a },
                              className: sg.reactionsContainer,
                              children:
                                  s > 0 &&
                                  (0, y.jsxs)(y.Fragment, {
                                      children: [
                                          (0, y.jsx)("span", {
                                              children: l.reactionEmoji,
                                          }),
                                          (0, y.jsx)("span", { children: s }),
                                      ],
                                  }),
                          })
                        : null;
                };
            try {
                sp.displayName || (sp.displayName = "Reactions");
            } catch {}
            function sy({ metadataRef: e, ...l }) {
                return null === e
                    ? null
                    : e
                      ? (0, y.jsx)(b.Suspense, {
                            fallback: (0, y.jsx)(sk, { ...l }),
                            children: (0, y.jsx)(sh, { ...l, metadataRef: e }),
                        })
                      : (0, y.jsx)(sk, { ...l });
            }
            function sk({
                showAssignees: e,
                showCommentCount: l = !0,
                reactionEmojiToDisplay: a,
                showLinkedPullRequests: n = !1,
            }) {
                let s = !!a?.reaction;
                return (0, y.jsxs)(y.Fragment, {
                    children: [
                        n &&
                            (0, y.jsx)(n6.V, {
                                "data-testid": n8.listRowLinkedPullRequests,
                                className: sc.ListItemMetadata_0,
                                children: (0, y.jsx)(ny.O, {
                                    variant: "pill",
                                    width: "xl",
                                }),
                            }),
                        (0, y.jsx)(n6.V, {
                            "data-testid": n8.listRowComments,
                            className: sc.ListItemMetadata_0,
                            children:
                                l &&
                                (0, y.jsx)(ny.O, {
                                    variant: "pill",
                                    width: "xl",
                                }),
                        }),
                        s &&
                            (0, y.jsx)(n6.V, {
                                className: sc.ListItemMetadata_0,
                                children: (0, y.jsx)(ny.O, {
                                    variant: "pill",
                                    width: "xl",
                                }),
                            }),
                        e &&
                            (0, y.jsx)(n6.V, {
                                "data-testid": n8.listRowAssignees,
                                alignment: "right",
                                className: sc.ListItemMetadata_0,
                                children: (0, y.jsx)(ny.O, {
                                    variant: "pill",
                                    width: "lg",
                                }),
                            }),
                    ],
                });
            }
            function sh({ issueId: e, metadataRef: l, ...a }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(iX, l),
                    s = n?.find((l) => l?.id === e);
                return s
                    ? (0, y.jsx)(sb, { itemKey: s, ...a })
                    : (0, y.jsx)(sk, { ...a });
            }
            let sb = ({
                itemKey: e,
                getMetadataHref: l,
                reactionEmojiToDisplay: a,
                showAssignees: n,
                showCommentCount: s = !0,
                showCommentZeroCount: i = !1,
                showLinkedPullRequests: t = !1,
            }) => {
                let r,
                    o,
                    { variant: u } = (0, n9.e)(),
                    d = (0, er.useFragment)(n7, e),
                    c = !!a?.reaction,
                    m = (0, k.G7)("issues_react_remove_placeholders");
                if (void 0 === d.totalCommentsCount)
                    return (0, y.jsx)(sk, {
                        reactionEmojiToDisplay: a,
                        showCommentCount: !0,
                        showLinkedPullRequests: !0,
                        showAssignees: !0,
                    });
                let g =
                    d?.totalCommentsCount && d.totalCommentsCount > 0
                        ? ` ${d.totalCommentsCount} comment${d.totalCommentsCount > 1 ? "s" : ""};`
                        : "";
                return (
                    m
                        ? ((o = d.totalCommentsCount ?? 0),
                          (r = s && (i || o > 0)))
                        : (o =
                              (r = s || i) && d.totalCommentsCount
                                  ? d.totalCommentsCount
                                  : 0),
                    (0, y.jsxs)(y.Fragment, {
                        children: [
                            d &&
                                t &&
                                (0, y.jsx)(n6.V, {
                                    "data-testid": n8.listRowLinkedPullRequests,
                                    className: sc.ListItemMetadata_0,
                                    children: (0, y.jsx)(sd.d, {
                                        issueId: d.id,
                                        closedByPullRequestsReferencesKey: d,
                                    }),
                                }),
                            (0, y.jsx)(n6.V, {
                                "aria-label": g,
                                "data-testid": n8.listRowComments,
                                className: sc.ListItemMetadata_0,
                                children:
                                    r &&
                                    (0, y.jsxs)("div", {
                                        className: nY.commentCountContainer,
                                        children: [
                                            (0, y.jsx)(T.CommentIcon, {
                                                size: 16,
                                            }),
                                            " ",
                                            (0, y.jsx)("span", {
                                                className: "ml-1",
                                                children: o,
                                            }),
                                            (0, y.jsx)("span", {
                                                className: "sr-only",
                                                children:
                                                    1 === o
                                                        ? " comment"
                                                        : " comments",
                                            }),
                                        ],
                                    }),
                            }),
                            c &&
                                (0, y.jsx)(n6.V, {
                                    className: sc.ListItemMetadata_0,
                                    children:
                                        d.reactionGroups &&
                                        (0, y.jsx)(sp, {
                                            dataKey: d,
                                            reactionEmojiToDisplay: a,
                                            showCompactDensity: "compact" === u,
                                        }),
                                }),
                            n &&
                                d &&
                                (0, y.jsx)(n6.V, {
                                    "data-testid": n8.listRowAssignees,
                                    alignment: "right",
                                    className: sc.ListItemMetadata_0,
                                    children: (0, y.jsx)(su, {
                                        showPlaceholder: !m,
                                        assigneeskey: d,
                                        getAssigneeHref: (e) =>
                                            l(nS.assignee, e),
                                    }),
                                }),
                        ],
                    })
                );
            };
            try {
                sy.displayName || (sy.displayName = "LazyIssueItemMetadata");
            } catch {}
            try {
                sk.displayName || (sk.displayName = "LoadingMetadata");
            } catch {}
            try {
                sh.displayName || (sh.displayName = "LazyIssueMetadataFetched");
            } catch {}
            try {
                sb.displayName || (sb.displayName = "IssueItemMetadata");
            } catch {}
            let sf = (function () {
                var e = [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isReadByViewer",
                        storageKey: null,
                    },
                ];
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueOrPullRequestUnreadIndicator",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        {
                            kind: "InlineFragment",
                            selections: e,
                            type: "Issue",
                            abstractKey: null,
                        },
                        {
                            kind: "InlineFragment",
                            selections: e,
                            type: "PullRequest",
                            abstractKey: null,
                        },
                    ],
                    type: "IssueOrPullRequest",
                    abstractKey: "__isIssueOrPullRequest",
                };
            })();
            sf.hash = "691d1fd40629826d5b45aaffeb927341";
            let sC = { unread: "UnreadIndicator-module__unread--TzgM4" };
            function sF({ unread: e }) {
                return e
                    ? (0, y.jsx)("div", {
                          className: sC.unread,
                          children: (0, y.jsx)("span", {
                              className: "sr-only",
                              children: "New activity.",
                          }),
                      })
                    : null;
            }
            try {
                sF.displayName || (sF.displayName = "UnreadIndicator");
            } catch {}
            function sS({ issueId: e, metadataRef: l }) {
                return l
                    ? (0, y.jsx)(b.Suspense, {
                          fallback: null,
                          children: (0, y.jsx)(sL, {
                              issueId: e,
                              metadataRef: l,
                          }),
                      })
                    : null;
            }
            function sL({ issueId: e, metadataRef: l }) {
                let { nodes: a } = (0, er.usePreloadedQuery)(iX, l),
                    n = a?.find((l) => l?.id === e);
                return n ? (0, y.jsx)(sK, { notificationKey: n }) : null;
            }
            function sK({ notificationKey: e }) {
                let l = (0, er.useFragment)(sf, e),
                    a = !!l && "isReadByViewer" in l && l.isReadByViewer;
                return (0, y.jsx)(sF, { unread: !a });
            }
            try {
                sS.displayName ||
                    (sS.displayName = "IssueOrPullRequestUnreadIndicator");
            } catch {}
            try {
                sL.displayName ||
                    (sL.displayName =
                        "IssueOrPullRequestUnreadIndicatorFetched");
            } catch {}
            try {
                sK.displayName ||
                    (sK.displayName =
                        "IssueOrPullRequestUnreadIndicatorInternal");
            } catch {}
            let sv = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "login",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__typename",
                                storageKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    t = {
                        args: [
                            {
                                kind: "Variable",
                                name: "includeMilestone",
                                variableName: "includeMilestone",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "MilestoneMetadata",
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: !0,
                            kind: "LocalArgument",
                            name: "includeGitData",
                        },
                        {
                            defaultValue: !0,
                            kind: "LocalArgument",
                            name: "includeMilestone",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssuePullRequestDescription",
                    selections: [
                        {
                            kind: "InlineFragment",
                            selections: [
                                e,
                                l,
                                a,
                                n,
                                s,
                                i,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "stateReason",
                                    storageKey: null,
                                },
                                t,
                            ],
                            type: "Issue",
                            abstractKey: null,
                        },
                        {
                            kind: "InlineFragment",
                            selections: [
                                e,
                                l,
                                a,
                                n,
                                s,
                                i,
                                t,
                                {
                                    condition: "includeGitData",
                                    kind: "Condition",
                                    passingValue: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "reviewDecision",
                                            storageKey: null,
                                        },
                                    ],
                                },
                            ],
                            type: "PullRequest",
                            abstractKey: null,
                        },
                    ],
                    type: "IssueOrPullRequest",
                    abstractKey: "__isIssueOrPullRequest",
                };
            })();
            sv.hash = "fa9824330990dabf19a484ca8d78a275";
            var sI = a(81366),
                s_ = a(69497),
                sx = a(62935),
                sw = a(42409);
            let sN = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "state",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "CheckRunStatus",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "StatusCheckRollup",
                            kind: "LinkedField",
                            name: "statusCheckRollup",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType:
                                        "StatusCheckRollupContextConnection",
                                    kind: "LinkedField",
                                    name: "contexts",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "checkRunCount",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "CheckRunStateCount",
                                            kind: "LinkedField",
                                            name: "checkRunCountsByState",
                                            plural: !0,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "count",
                                                    storageKey: null,
                                                },
                                                e,
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Commit",
                    abstractKey: null,
                };
            })();
            sN.hash = "6dc5ad338ebeeb78e4452c83673b4bec";
            let sj = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "state",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "CheckRunStatusFromPullRequest",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "StatusCheckRollup",
                            kind: "LinkedField",
                            name: "statusCheckRollup",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType:
                                        "StatusCheckRollupContextConnection",
                                    kind: "LinkedField",
                                    name: "contexts",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "checkRunCount",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "CheckRunStateCount",
                                            kind: "LinkedField",
                                            name: "checkRunCountsByState",
                                            plural: !0,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "count",
                                                    storageKey: null,
                                                },
                                                e,
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "PullRequest",
                    abstractKey: null,
                };
            })();
            sj.hash = "d75a7a69f99bfff558b671bcd7aeb083";
            var sR = a(99896);
            let sP = {
                    checkRunStatusContainer:
                        "CheckRunStatus-module__checkRunStatusContainer--yY4j1",
                },
                sT = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "PullRequestItemHeadCommit",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "PullRequestCommit",
                            kind: "LinkedField",
                            name: "headCommit",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Commit",
                                    kind: "LinkedField",
                                    name: "commit",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "id",
                                            storageKey: null,
                                        },
                                        {
                                            args: null,
                                            kind: "FragmentSpread",
                                            name: "CheckRunStatus",
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "PullRequest",
                    abstractKey: null,
                };
            sT.hash = "fd277c6401a8f4dcc071cc6026716196";
            let sA = (function () {
                var e = {
                    kind: "Variable",
                    name: "includeGitData",
                    variableName: "includeGitData",
                };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: !0,
                            kind: "LocalArgument",
                            name: "includeGitData",
                        },
                        {
                            defaultValue: !0,
                            kind: "LocalArgument",
                            name: "includeMilestone",
                        },
                        {
                            defaultValue: 10,
                            kind: "LocalArgument",
                            name: "labelPageSize",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "PullRequestItem",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        {
                            condition: "includeGitData",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "PullRequestItemHeadCommit",
                                },
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "CheckRunStatusFromPullRequest",
                                },
                            ],
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "name",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "titleHTML",
                            storageKey: null,
                        },
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "labelPageSize",
                                    variableName: "labelPageSize",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "IssuePullRequestTitle",
                        },
                        {
                            args: [
                                e,
                                {
                                    kind: "Variable",
                                    name: "includeMilestone",
                                    variableName: "includeMilestone",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "IssuePullRequestDescription",
                        },
                        {
                            args: [e],
                            kind: "FragmentSpread",
                            name: "IssuePullRequestStateIcon",
                        },
                    ],
                    type: "PullRequest",
                    abstractKey: null,
                };
            })();
            sA.hash = "6141a029801edc1d0f101b336064cb62";
            let sM = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssuePullRequestStateIconSecondary",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInMergeQueue",
                        storageKey: null,
                    },
                ],
                type: "PullRequest",
                abstractKey: null,
            };
            sM.hash = "d466f881ba7ae18b784921131fd14a79";
            let sV = {
                argumentDefinitions: [
                    {
                        defaultValue: !0,
                        kind: "LocalArgument",
                        name: "includeGitData",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "IssuePullRequestStateIcon",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isDraft",
                                storageKey: null,
                            },
                            {
                                condition: "includeGitData",
                                kind: "Condition",
                                passingValue: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInMergeQueue",
                                        storageKey: null,
                                    },
                                ],
                            },
                            {
                                alias: "pullRequestState",
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                        ],
                        type: "PullRequest",
                        abstractKey: null,
                    },
                ],
                type: "IssueOrPullRequest",
                abstractKey: "__isIssueOrPullRequest",
            };
            sV.hash = "bad896aa98ad487f05ec49c3434b03aa";
            var sD = a(65964),
                sE = a(82319);
            let sq = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "PullRequestRowSecondary",
                selections: [
                    {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestCommit",
                        kind: "LinkedField",
                        name: "headCommit",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "Commit",
                                kind: "LinkedField",
                                name: "commit",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssuePullRequestStateIconSecondary",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "ReviewDecision",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "CheckRunStatusFromPullRequest",
                    },
                ],
                type: "PullRequest",
                abstractKey: null,
            };
            sq.hash = "e97d88728742c8b65cc52759a9e77b36";
            let sO = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "id",
                                    variableName: "id",
                                },
                            ],
                            concreteType: "PullRequest",
                            kind: "LinkedField",
                            name: "pullRequestStatusUpdated",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "id",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "state",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isDraft",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "PullRequestRowStatusUpdatedSubscription",
                        selections: l,
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "PullRequestRowStatusUpdatedSubscription",
                        selections: l,
                    },
                    params: {
                        id: "62f0856d23072df832d99c11f2061ca2",
                        metadata: {},
                        name: "PullRequestRowStatusUpdatedSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            sO.hash = "2c6fa54e180c24a3939b45f4ed793005";
            let sB = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "id",
                                    variableName: "id",
                                },
                            ],
                            concreteType: "PullRequest",
                            kind: "LinkedField",
                            name: "pullRequestTitleUpdated",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "id",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "title",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "titleHTML",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "PullRequestRowTitleUpdatedSubscription",
                        selections: l,
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "PullRequestRowTitleUpdatedSubscription",
                        selections: l,
                    },
                    params: {
                        id: "a94c38f511b0bf82679e4034de7dcaae",
                        metadata: {},
                        name: "PullRequestRowTitleUpdatedSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            sB.hash = "a2fdd16da7a5dc39dd035c3334c00473";
            let s$ = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "id",
                                    variableName: "id",
                                },
                            ],
                            concreteType: "PullRequest",
                            kind: "LinkedField",
                            name: "pullRequestCommentsUpdated",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "id",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "totalCommentsCount",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "PullRequestRowCommentsSubscription",
                        selections: l,
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "PullRequestRowCommentsSubscription",
                        selections: l,
                    },
                    params: {
                        id: "9fd211e9ada999fbd9d0193e7eaff36e",
                        metadata: {},
                        name: "PullRequestRowCommentsSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            s$.hash = "c07750a7baf2631bfdee073a48c7ec32";
            let sQ = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "id",
                                    variableName: "id",
                                },
                            ],
                            concreteType: "PullRequest",
                            kind: "LinkedField",
                            name: "pullRequestReviewDecisionUpdated",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "id",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "reviewDecision",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "PullRequestRowReviewSubscription",
                        selections: l,
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "PullRequestRowReviewSubscription",
                        selections: l,
                    },
                    params: {
                        id: "f7a0455deeee4e2cb604d181c34d2419",
                        metadata: {},
                        name: "PullRequestRowReviewSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            sQ.hash = "25171224ff286ab953decc6e4bf6938a";
            let sU = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [{ kind: "Variable", name: "id", variableName: "id" }],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        concreteType: "StatusCheckRollupContextConnection",
                        kind: "LinkedField",
                        name: "contexts",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "checkRunCount",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "CheckRunStateCount",
                                kind: "LinkedField",
                                name: "checkRunCountsByState",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "count",
                                        storageKey: null,
                                    },
                                    n,
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "PullRequestRowCommitChecksSubscription",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "Commit",
                                kind: "LinkedField",
                                name: "commitChecksUpdated",
                                plural: !1,
                                selections: [
                                    a,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "StatusCheckRollup",
                                        kind: "LinkedField",
                                        name: "statusCheckRollup",
                                        plural: !1,
                                        selections: [n, s],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "PullRequestRowCommitChecksSubscription",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "Commit",
                                kind: "LinkedField",
                                name: "commitChecksUpdated",
                                plural: !1,
                                selections: [
                                    a,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "StatusCheckRollup",
                                        kind: "LinkedField",
                                        name: "statusCheckRollup",
                                        plural: !1,
                                        selections: [n, s, a],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "3326b1e4b960cfe7156499d6f7aa9f47",
                        metadata: {},
                        name: "PullRequestRowCommitChecksSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            sU.hash = "5dee87e2713acc6cc0a5df4aebd42df6";
            let sz = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: !0,
                            kind: "LocalArgument",
                            name: "includeGitData",
                        },
                        {
                            defaultValue: !0,
                            kind: "LocalArgument",
                            name: "includeMilestone",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "labelPageSize",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "PullRequestRow_pullRequest",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        e,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "name",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "includeGitData",
                                    variableName: "includeGitData",
                                },
                                {
                                    kind: "Variable",
                                    name: "includeMilestone",
                                    variableName: "includeMilestone",
                                },
                                {
                                    kind: "Variable",
                                    name: "labelPageSize",
                                    variableName: "labelPageSize",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "PullRequestItem",
                        },
                        {
                            condition: "includeGitData",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PullRequestCommit",
                                    kind: "LinkedField",
                                    name: "headCommit",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Commit",
                                            kind: "LinkedField",
                                            name: "commit",
                                            plural: !1,
                                            selections: [e],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                    ],
                    type: "PullRequest",
                    abstractKey: null,
                };
            })();
            sz.hash = "341904fa888e7deff66a0c98b01b7491";
            let sH = { row: "PullRequestRow-module__row--WgtyC" },
                sW = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "pullRequestId",
                            },
                        ],
                        l = [
                            {
                                kind: "Variable",
                                name: "id",
                                variableName: "pullRequestId",
                            },
                        ],
                        a = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "titleHTML",
                            storageKey: null,
                        },
                        s = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        i = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isDraft",
                            storageKey: null,
                        },
                        t = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        r = [{ kind: "Literal", name: "first", value: 10 }],
                        o = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        u = [t],
                        d = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "login",
                            storageKey: null,
                        },
                        c = {
                            kind: "InlineFragment",
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isCopilot",
                                    storageKey: null,
                                },
                            ],
                            type: "Bot",
                            abstractKey: null,
                        },
                        m = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        g = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "updatedAt",
                            storageKey: null,
                        },
                        p = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closed",
                            storageKey: null,
                        },
                        y = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closedAt",
                            storageKey: null,
                        },
                        k = {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "author",
                            plural: !1,
                            selections: [
                                d,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "resourcePath",
                                    storageKey: null,
                                },
                                o,
                                c,
                                t,
                            ],
                            storageKey: null,
                        },
                        h = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        b = [
                            {
                                alias: null,
                                args: null,
                                concreteType: "Milestone",
                                kind: "LinkedField",
                                name: "milestone",
                                plural: !1,
                                selections: [
                                    a,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "url",
                                        storageKey: null,
                                    },
                                    t,
                                ],
                                storageKey: null,
                            },
                        ],
                        f = {
                            kind: "InlineFragment",
                            selections: [
                                {
                                    kind: "InlineFragment",
                                    selections: b,
                                    type: "Issue",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: b,
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                            ],
                            type: "IssueOrPullRequest",
                            abstractKey: "__isIssueOrPullRequest",
                        };
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "PullRequestRowSubscription",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType:
                                        "PullRequestInfoForListViewUpdatedPayload",
                                    kind: "LinkedField",
                                    name: "pullRequestInfoForListViewUpdated",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "titleUpdated",
                                            plural: !1,
                                            selections: [a, n],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "statusUpdated",
                                            plural: !1,
                                            selections: [s, i],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "commentsUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "PullRequestItemMetadata",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "reviewDecisionUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "IssuePullRequestDescription",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "commitChecksUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "CheckRunStatusFromPullRequest",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "EventSubscription",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "PullRequestRowSubscription",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType:
                                        "PullRequestInfoForListViewUpdatedPayload",
                                    kind: "LinkedField",
                                    name: "pullRequestInfoForListViewUpdated",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "titleUpdated",
                                            plural: !1,
                                            selections: [a, n, t],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "statusUpdated",
                                            plural: !1,
                                            selections: [s, i, t],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "commentsUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "totalCommentsCount",
                                                    storageKey: null,
                                                },
                                                t,
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: r,
                                                            concreteType:
                                                                "AssigneeConnection",
                                                            kind: "LinkedField",
                                                            name: "assignedActors",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "AssigneeEdge",
                                                                    kind: "LinkedField",
                                                                    name: "edges",
                                                                    plural: !0,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    null,
                                                                                kind: "LinkedField",
                                                                                name: "node",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        o,
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                u,
                                                                                            type: "User",
                                                                                            abstractKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                u,
                                                                                            type: "Bot",
                                                                                            abstractKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                [
                                                                                                    d,
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: [
                                                                                                            {
                                                                                                                kind: "Literal",
                                                                                                                name: "size",
                                                                                                                value: 64,
                                                                                                            },
                                                                                                        ],
                                                                                                        kind: "ScalarField",
                                                                                                        name: "avatarUrl",
                                                                                                        storageKey:
                                                                                                            "avatarUrl(size:64)",
                                                                                                    },
                                                                                                    c,
                                                                                                ],
                                                                                            type: "Actor",
                                                                                            abstractKey:
                                                                                                "__isActor",
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                u,
                                                                                            type: "Node",
                                                                                            abstractKey:
                                                                                                "__isNode",
                                                                                        },
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "cursor",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "PageInfo",
                                                                    kind: "LinkedField",
                                                                    name: "pageInfo",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "endCursor",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "hasNextPage",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey:
                                                                "assignedActors(first:10)",
                                                        },
                                                        {
                                                            alias: null,
                                                            args: r,
                                                            filters: null,
                                                            handle: "connection",
                                                            key: "IssueAssignees_assignedActors",
                                                            kind: "LinkedHandle",
                                                            name: "assignedActors",
                                                        },
                                                        {
                                                            kind: "TypeDiscriminator",
                                                            abstractKey:
                                                                "__isNode",
                                                        },
                                                    ],
                                                    type: "Assignable",
                                                    abstractKey:
                                                        "__isAssignable",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "reviewDecisionUpdated",
                                            plural: !1,
                                            selections: [
                                                t,
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                m,
                                                                g,
                                                                p,
                                                                y,
                                                                k,
                                                                h,
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "stateReason",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                f,
                                                            ],
                                                            type: "Issue",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                m,
                                                                g,
                                                                p,
                                                                y,
                                                                k,
                                                                h,
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "reviewDecision",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                f,
                                                            ],
                                                            type: "PullRequest",
                                                            abstractKey: null,
                                                        },
                                                    ],
                                                    type: "IssueOrPullRequest",
                                                    abstractKey:
                                                        "__isIssueOrPullRequest",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "commitChecksUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType:
                                                        "StatusCheckRollup",
                                                    kind: "LinkedField",
                                                    name: "statusCheckRollup",
                                                    plural: !1,
                                                    selections: [
                                                        s,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "StatusCheckRollupContextConnection",
                                                            kind: "LinkedField",
                                                            name: "contexts",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "checkRunCount",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "CheckRunStateCount",
                                                                    kind: "LinkedField",
                                                                    name: "checkRunCountsByState",
                                                                    plural: !0,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "count",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            s,
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                        t,
                                                    ],
                                                    storageKey: null,
                                                },
                                                t,
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "05ab1c9819b53a5a7097836efab3d26d",
                            metadata: {},
                            name: "PullRequestRowSubscription",
                            operationKind: "subscription",
                            text: null,
                        },
                    };
                })();
            function sG({ secondaryDataKey: e }) {
                let l = (0, aF.useFragment)(sq, e);
                return l && l.headCommit
                    ? (0, y.jsx)(sJ, { commitId: l.headCommit.commit.id })
                    : null;
            }
            function sZ({ id: e, secondaryQueryRef: l }) {
                let { nodes: a } = (0, aF.usePreloadedQuery)(iX, l),
                    n = a?.find((l) => l?.id === e);
                return n ? (0, y.jsx)(sG, { secondaryDataKey: n }) : null;
            }
            function sX({ id: e, secondaryQueryRef: l }) {
                return l
                    ? (0, y.jsx)(b.Suspense, {
                          fallback: null,
                          children: (0, y.jsx)(sZ, {
                              id: e,
                              secondaryQueryRef: l,
                          }),
                      })
                    : null;
            }
            function sJ({ commitId: e }) {
                let l = (0, b.useMemo)(
                    () => ({ subscription: sU, variables: { id: e } }),
                    [e]
                );
                return ((0, er.useSubscription)(l), (0, y.jsx)(y.Fragment, {}));
            }
            sW.hash = "7997810aa9b64cc2931eccffac774bc1";
            let sY = (0, b.forwardRef)(
                (
                    {
                        pullRequestKey: e,
                        metadataRef: l,
                        reactionEmojiToDisplay: a,
                        getMetadataHref: n,
                        onSelect: s,
                        onSelectRow: i,
                        isActive: t,
                        isSelected: r,
                        sortingItemSelected: o,
                        additionalAnalyticsContext: u = {},
                        onNavigate: d,
                        ...c
                    },
                    m
                ) => {
                    let {
                            use_pull_request_subscriptions_enabled: g,
                            pull_request_single_subscription: p,
                        } = (0, aK.h)(),
                        k = (0, aF.useFragment)(sz, e);
                    g &&
                        (0, nU.M3)() &&
                        (p
                            ? ((e) => {
                                  let l = (0, b.useMemo)(
                                      () => ({
                                          subscription: sW,
                                          variables: { pullRequestId: e },
                                      }),
                                      [e]
                                  );
                                  (0, er.useSubscription)(l);
                              })(k.id)
                            : (function (e) {
                                  let l = (0, b.useMemo)(
                                          () => ({
                                              subscription: sO,
                                              variables: { id: e },
                                          }),
                                          [e]
                                      ),
                                      a = (0, b.useMemo)(
                                          () => ({
                                              subscription: sB,
                                              variables: { id: e },
                                          }),
                                          [e]
                                      ),
                                      n = (0, b.useMemo)(
                                          () => ({
                                              subscription: s$,
                                              variables: { id: e },
                                          }),
                                          [e]
                                      ),
                                      s = (0, b.useMemo)(
                                          () => ({
                                              subscription: sQ,
                                              variables: { id: e },
                                          }),
                                          [e]
                                      );
                                  ((0, er.useSubscription)(l),
                                      (0, er.useSubscription)(a),
                                      (0, er.useSubscription)(n),
                                      (0, er.useSubscription)(s));
                              })(k.id));
                    let h = k.repository.owner.login,
                        f = (0, aL.ET)({
                            owner: h,
                            repo: k.repository.name,
                            number: k.number,
                        }),
                        C = (0, b.useCallback)(() => {
                            d(f);
                        }, [f, d]),
                        F = (0, b.useCallback)(
                            (e) => {
                                (i({ type: k.__typename, ...u }),
                                    e.stopPropagation(),
                                    e.preventDefault(),
                                    C());
                            },
                            [u, i, k.__typename, C]
                        ),
                        S = (0, b.useCallback)(() => {
                            s?.(!r);
                        }, [s, r]);
                    return (0, y.jsxs)(y.Fragment, {
                        children: [
                            g &&
                                !p &&
                                (k.headCommit
                                    ? (0, y.jsx)(sJ, {
                                          commitId: k.headCommit.commit.id,
                                      })
                                    : (0, y.jsx)(sX, {
                                          id: k.id,
                                          secondaryQueryRef: l,
                                      })),
                            (0, y.jsx)(nz.tL, {
                                commands: {
                                    "list-view-items-issues-prs:open-focused-item":
                                        C,
                                    "list-view-items-issues-prs:toggle-focused-item-selection":
                                        S,
                                },
                                className: sH.row,
                                children: (0, y.jsx)(iL, {
                                    itemKey: k,
                                    metadataRef: l,
                                    isActive: t,
                                    isSelected: r,
                                    reactionEmojiToDisplay: a,
                                    showCommentCount: !0,
                                    showRepository: !0,
                                    showAssignees: !0,
                                    showLeadingRightSideContent: !1,
                                    sortingItemSelected: o,
                                    getMetadataHref: n,
                                    onSelect: s,
                                    onClick: F,
                                    href: f,
                                    ref: m,
                                    ...c,
                                }),
                            }),
                        ],
                    });
                }
            );
            sY.displayName = "PullRequestRow";
            let s1 = b.memo(sY);
            try {
                sG.displayName ||
                    (sG.displayName =
                        "LazyCommitChecksUpdateSubscriptionWrapperInternal");
            } catch {}
            try {
                sZ.displayName ||
                    (sZ.displayName =
                        "LazyCommitChecksUpdateSubscriptionWrapperFetched");
            } catch {}
            try {
                sX.displayName ||
                    (sX.displayName =
                        "LazyCommitChecksUpdateSubscriptionWrapper");
            } catch {}
            try {
                sJ.displayName ||
                    (sJ.displayName = "CommitChecksUpdateSubscriptionWrapper");
            } catch {}
            try {
                s1.displayName || (s1.displayName = "PullRequestRow");
            } catch {}
            function s2({ id: e, dataKey: l, metadataRef: a }) {
                let n = (0, er.useFragment)(sV, l);
                return "PullRequest" === n.__typename
                    ? void 0 === n.isInMergeQueue
                        ? (0, y.jsx)(s3, { id: e, data: n, metadataRef: a })
                        : (0, y.jsx)(s0, {
                              data: n,
                              isInMergeQueue: n.isInMergeQueue,
                          })
                    : (0, y.jsx)(s0, { data: n, isInMergeQueue: !1 });
            }
            function s0({ data: e, isInMergeQueue: l }) {
                let {
                    icon: a,
                    color: n,
                    description: s,
                } = (0, b.useMemo)(() => (0, sE.q)(null), []);
                if ("PullRequest" === e.__typename) {
                    let i = (function (e, l, a) {
                            if (l) return "IN_MERGE_QUEUE";
                            if ("OPEN" === a && e) return "DRAFT";
                            if (a in sw.g.pullRequestIcons) return a;
                            throw Error(`Invalid pull request state: ${a}`);
                        })(e.isDraft, l, e.pullRequestState),
                        t = (0, sE.V)(i);
                    ((a = t.icon), (n = t.color), (s = t.description));
                }
                if ("Issue" === e.__typename) {
                    let l =
                            "CLOSED" === e.state &&
                            ("NOT_PLANNED" === e.stateReason ||
                                "DUPLICATE" === e.stateReason)
                                ? e.stateReason
                                : e.state,
                        i = (0, sE.q)(l);
                    ((a = i.icon), (n = i.color), (s = i.description));
                }
                return (0, y.jsx)(sD.e, {
                    icon: a,
                    color: n,
                    description: s,
                    "data-testid": n8.listRowStateIcon,
                });
            }
            function s3({ data: e, metadataRef: l, id: a }) {
                return "PullRequest" === e.__typename && l
                    ? (0, y.jsx)(b.Suspense, {
                          fallback: (0, y.jsx)(s0, {
                              data: e,
                              isInMergeQueue: !1,
                          }),
                          children: (0, y.jsx)(s4, {
                              id: a,
                              data: e,
                              metadataRef: l,
                          }),
                      })
                    : (0, y.jsx)(s0, { data: e, isInMergeQueue: !1 });
            }
            function s4({ id: e, data: l, metadataRef: a }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(iX, a),
                    s = n?.find((l) => l?.id === e);
                return (0, y.jsx)(s5, { data: l, secondaryDataKey: s });
            }
            function s5({ data: e, secondaryDataKey: l }) {
                let a = (0, er.useFragment)(sq, l),
                    n = (0, er.useFragment)(sM, a);
                return (0, y.jsx)(s0, {
                    data: e,
                    isInMergeQueue: !!n?.isInMergeQueue,
                });
            }
            try {
                s2.displayName ||
                    (s2.displayName = "IssuePullRequestStateIcon");
            } catch {}
            try {
                s0.displayName ||
                    (s0.displayName = "IssuePullRequestStateIconInternal");
            } catch {}
            try {
                s3.displayName ||
                    (s3.displayName = "LazyIssuePullRequestStateIcon");
            } catch {}
            try {
                s4.displayName ||
                    (s4.displayName = "LazyIssuePullRequestStateIconFetched");
            } catch {}
            try {
                s5.displayName ||
                    (s5.displayName = "LazyIssuePullRequestStateIconInternal");
            } catch {}
            let s7 = (function () {
                var e = {
                        count: "labelPageSize",
                        cursor: null,
                        direction: "forward",
                        path: ["labels"],
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    s = {
                        alias: "labels",
                        args: [
                            {
                                kind: "Literal",
                                name: "orderBy",
                                value: { direction: "ASC", field: "NAME" },
                            },
                        ],
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "__Labels_labels_connection",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "Label",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "name",
                                                storageKey: null,
                                            },
                                            a,
                                            l,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "cursor",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "endCursor",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasNextPage",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey:
                            '__Labels_labels_connection(orderBy:{"direction":"ASC","field":"NAME"})',
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: 10,
                            kind: "LocalArgument",
                            name: "labelPageSize",
                        },
                    ],
                    kind: "Fragment",
                    metadata: { connection: [e, e] },
                    name: "IssuePullRequestTitle",
                    selections: [
                        l,
                        {
                            kind: "InlineFragment",
                            selections: [a, n, s],
                            type: "Issue",
                            abstractKey: null,
                        },
                        {
                            kind: "InlineFragment",
                            selections: [n, s],
                            type: "PullRequest",
                            abstractKey: null,
                        },
                    ],
                    type: "IssueOrPullRequest",
                    abstractKey: "__isIssueOrPullRequest",
                };
            })();
            s7.hash = "a24e25f6c540b1b24c68cfd21c14e1a2";
            var s6 = a(95378),
                s9 = a(42299),
                s8 = a(54571),
                ie = a(65848);
            let il = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueItemSubIssuesSummary",
                selections: [
                    {
                        alias: null,
                        args: null,
                        concreteType: "SubIssuesSummary",
                        kind: "LinkedField",
                        name: "subIssuesSummary",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "completed",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "percentCompleted",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "total",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            il.hash = "69d927a8cc29fe0a0e03b982885c9f3a";
            var ia = a(56742),
                is = a(11196);
            let ii = {
                progressCircle:
                    "IssueItemSubIssuesSummary-module__progressCircle--B_9jW",
                token: "IssueItemSubIssuesSummary-module__token--lQcLp",
            };
            function it({ metadataRef: e, issueId: l, link: a }) {
                return e
                    ? (0, y.jsx)(b.Suspense, {
                          fallback: null,
                          children: (0, y.jsx)(ir, {
                              issueId: l,
                              metadataRef: e,
                              link: a,
                          }),
                      })
                    : null;
            }
            function ir({ metadataRef: e, issueId: l, link: a }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(iX, e),
                    s = n?.find((e) => e?.id === l);
                return s ? (0, y.jsx)(io, { summaryKey: s, link: a }) : null;
            }
            function io({ summaryKey: e, link: l }) {
                let a = (0, er.useFragment)(il, e);
                if (!a?.subIssuesSummary) return null;
                let {
                    total: n,
                    completed: s,
                    percentCompleted: i,
                } = a.subIssuesSummary;
                return 0 === n
                    ? null
                    : (0, y.jsx)(s9.r, {
                          title: "sub-issues summary",
                          children: (0, y.jsx)(is.m, {
                              text: `${i}% completed`,
                              type: "description",
                              children: (0, y.jsx)(e9.A, {
                                  href: l,
                                  onKeyDown: (e) => e.stopPropagation(),
                                  children: (0, y.jsx)(n0.A, {
                                      className: ii.token,
                                      leadingVisual: () =>
                                          (0, y.jsx)(ia.a, {
                                              percentCompleted: i,
                                              size: 14,
                                              svgClassName: ii.progressCircle,
                                          }),
                                      text: (0, y.jsx)("span", {
                                          children: `${s} / ${n}`,
                                      }),
                                  }),
                              }),
                          }),
                      });
            }
            try {
                it.displayName ||
                    (it.displayName = "IssueItemSubIssuesSummary");
            } catch {}
            try {
                ir.displayName || (ir.displayName = "SubIssuesSummaryFetched");
            } catch {}
            try {
                io.displayName || (io.displayName = "SubIssuesSummaryInternal");
            } catch {}
            let iu = {
                    ListItemTitle_0:
                        "IssuePullRequestTitle-module__ListItemTitle_0--ORbH2",
                    ListItemTitle_1:
                        "IssuePullRequestTitle-module__ListItemTitle_1--FWLq8",
                },
                id = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "Label",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameHTML",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                    ],
                    type: "Label",
                    abstractKey: null,
                };
            id.hash = "df87cd3d5d39328fcca137f7bf3b8c12";
            var ic = a(2892),
                im = a(73017);
            let ig = { LabelTooltip: "Label-module__LabelTooltip--BUH7n" };
            function ip({
                label: e,
                hidden: l = !1,
                getLabelHref: a,
                fontWeight: n,
            }) {
                let {
                    nameHTML: s,
                    color: i,
                    id: t,
                    name: r,
                    description: o,
                } = (0, aF.useFragment)(id, e);
                return (0, y.jsx)(le.m_, {
                    text: o ?? "",
                    type: "description",
                    "aria-label": o ?? "",
                    sx: { visibility: o ? "visible" : "hidden" },
                    className: ig.LabelTooltip,
                    children: (0, y.jsxs)(le.N_, {
                        href: a(r),
                        className: (0, nA.$)({ "sr-only": l }),
                        "aria-describedby": `${t}-tooltip`,
                        sx: { visibility: l ? "hidden" : null },
                        children: [
                            (0, y.jsx)(
                                ic.a,
                                {
                                    interactive: !0,
                                    text: (0, y.jsx)(im.JR, { html: s }),
                                    fillColor: `#${i}`,
                                    fontWeight: n,
                                },
                                t
                            ),
                            (0, y.jsx)("span", {
                                className: "sr-only",
                                id: `${t}-tooltip`,
                                children: o ?? "",
                            }),
                        ],
                    }),
                });
            }
            try {
                ip.displayName || (ip.displayName = "Label");
            } catch {}
            function iy({
                dataKey: e,
                metadataRef: l,
                ref: a,
                href: n,
                target: s,
                onClick: i,
                value: t,
                leadingBadge: r,
                getLabelHref: o,
                getSubIssuesHref: u,
                headerClassName: d,
                repositoryOwner: c,
                repositoryName: m,
            }) {
                let g = (0, er.useFragment)(s7, e),
                    { number: p, labels: k } =
                        "PullRequest" === g.__typename ||
                        "Issue" === g.__typename
                            ? g
                            : { number: void 0, labels: void 0 },
                    h = (0, b.useCallback)(
                        (e) => {
                            1 === e.button ||
                                e.shiftKey ||
                                e.ctrlKey ||
                                e.metaKey ||
                                i?.(e);
                        },
                        [i]
                    ),
                    f = [
                        ...(k?.edges || [])
                            .flatMap((e) => e?.node || [])
                            .map((e) =>
                                (0, y.jsx)(
                                    s9.r,
                                    {
                                        title: e.name,
                                        children: (0, y.jsx)(ip, {
                                            label: e,
                                            getLabelHref: o,
                                            fontWeight: 500,
                                        }),
                                    },
                                    e.id
                                )
                            ),
                    ];
                if ("Issue" === g.__typename) {
                    let e = (0, y.jsx)(
                        it,
                        {
                            metadataRef: l,
                            issueId: g.id,
                            link: p && u ? u(c, m, p) : "",
                        },
                        "sub-issues-summary"
                    );
                    e && f.unshift(e);
                }
                let C = (0, b.useMemo)(
                        () =>
                            p
                                ? (function (e, l, a, n) {
                                      switch (e) {
                                          case "PullRequest":
                                              return (0, e5.i9S)({
                                                  owner: l,
                                                  repo: a,
                                                  pullRequestNumber: n,
                                              });
                                          case "Issue":
                                              return (0, e5.Nbg)({
                                                  owner: l,
                                                  repo: a,
                                                  issueNumber: n,
                                              });
                                          default:
                                              return "";
                                      }
                                  })(g.__typename, c, m, p)
                                : void 0,
                        [g.__typename, p, m, c]
                    ),
                    [F] = (0, s8.I)(() => !1, !0, []),
                    S = (0, b.useMemo)(() => {
                        let e = (0, y.jsx)("a", {
                            "data-hovercard-url": C,
                            "data-testid": "issue-pr-title-link",
                            className: (0, nA.$)(p && iu.ListItemTitle_1),
                            target: s,
                            ref: a,
                            href: n,
                            children: " ",
                        });
                        return (0, ie.F0)(e).replace(/ <\/a>$/, `${t}</a>`);
                    }, [C, n, p, a, s, t]);
                return F
                    ? (0, y.jsx)(s6.ao, {
                          value: t,
                          onClick: h,
                          leadingBadge: r,
                          trailingBadges: f,
                          headingClassName: (0, nA.$)(d, iu.ListItemTitle_0),
                          anchorRef: a,
                          anchorClassName: (0, nA.$)(p && iu.ListItemTitle_1),
                          href: n,
                          target: s,
                          linkProps: {
                              "data-hovercard-url": C,
                              "data-testid": "issue-pr-title-link",
                          },
                      })
                    : (0, y.jsx)(s6.kx, {
                          html: S,
                          onClick: h,
                          leadingBadge: r,
                          trailingBadges: f,
                          headingClassName: (0, nA.$)(d, iu.ListItemTitle_0),
                      });
            }
            try {
                iy.displayName || (iy.displayName = "IssuePullRequestTitle");
            } catch {}
            let ik = {
                    ListItem_0: "PullRequestItem-module__ListItem_0--uJQc9",
                },
                ih = {
                    argumentDefinitions: [
                        {
                            defaultValue: 10,
                            kind: "LocalArgument",
                            name: "assigneePageSize",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "includeReactions",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "PullRequestItemMetadata",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCommentsCount",
                            storageKey: null,
                        },
                        {
                            condition: "includeReactions",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "ReactionGroup",
                                    kind: "LinkedField",
                                    name: "reactionGroups",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "__typename",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: [
                                        {
                                            condition: "includeReactions",
                                            kind: "Condition",
                                            passingValue: !0,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "Reactions",
                                                },
                                            ],
                                        },
                                    ],
                                    type: "Reactable",
                                    abstractKey: "__isReactable",
                                },
                            ],
                        },
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "assigneePageSize",
                                    variableName: "assigneePageSize",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "Assignees",
                        },
                    ],
                    type: "PullRequest",
                    abstractKey: null,
                };
            ih.hash = "54e17665aafa06d00fcfbe5073208c99";
            let ib = {
                    ListItemMetadata_0:
                        "PullRequestItemMetadata-module__ListItemMetadata_0--Aqw5G",
                },
                iC = ({ metadataRef: e, ...l }) =>
                    e
                        ? (0, y.jsx)(b.Suspense, {
                              fallback: (0, y.jsx)(sk, { ...l }),
                              children: (0, y.jsx)(iF, {
                                  ...l,
                                  metadataRef: e,
                              }),
                          })
                        : (0, y.jsx)(sk, { ...l });
            function iF({ pullId: e, metadataRef: l, ...a }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(iX, l),
                    s = n?.find((l) => l?.id === e);
                return s ? (0, y.jsx)(iS, { itemKey: s, ...a }) : null;
            }
            let iS = ({
                itemKey: e,
                getMetadataHref: l,
                reactionEmojiToDisplay: a,
                showAssignees: n = !0,
                showCommentCount: s = !0,
                showCommentZeroCount: i = !1,
            }) => {
                let { variant: t } = (0, n9.e)(),
                    r = (0, er.useFragment)(ih, e),
                    o = (0, k.G7)("issues_react_remove_placeholders"),
                    u =
                        r?.totalCommentsCount && r.totalCommentsCount > 0
                            ? ` ${r.totalCommentsCount} comment${r.totalCommentsCount > 1 ? "s" : ""};`
                            : "",
                    d = !!a?.reaction,
                    c = (s && !!r.totalCommentsCount) || (s && i);
                return (0, y.jsxs)(y.Fragment, {
                    children: [
                        (0, y.jsx)(n6.V, {
                            "aria-label": u,
                            "data-testid": n8.listRowComments,
                            className: ib.ListItemMetadata_0,
                            children:
                                c &&
                                (0, y.jsxs)(y.Fragment, {
                                    children: [
                                        (0, y.jsx)(T.CommentIcon, { size: 16 }),
                                        " ",
                                        r.totalCommentsCount
                                            ? r.totalCommentsCount
                                            : 0,
                                    ],
                                }),
                        }),
                        d &&
                            (0, y.jsx)(n6.V, {
                                className: ib.ListItemMetadata_0,
                                children:
                                    r.reactionGroups &&
                                    (0, y.jsx)(sp, {
                                        dataKey: r,
                                        reactionEmojiToDisplay: a,
                                        showCompactDensity: "compact" === t,
                                    }),
                            }),
                        (0, y.jsx)(n6.V, {
                            alignment: "right",
                            className: ib.ListItemMetadata_0,
                            children:
                                n &&
                                r &&
                                (0, y.jsx)(su, {
                                    showPlaceholder: !o,
                                    assigneeskey: r,
                                    getAssigneeHref: (e) => l(nS.assignee, e),
                                }),
                        }),
                    ],
                });
            };
            try {
                iC.displayName ||
                    (iC.displayName = "LazyPullRequestItemMetadata");
            } catch {}
            try {
                iF.displayName || (iF.displayName = "LazyPullMetadataFetched");
            } catch {}
            try {
                iS.displayName || (iS.displayName = "PullRequestItemMetadata");
            } catch {}
            let iL = ({
                itemKey: e,
                metadataRef: l,
                isActive: a = !1,
                isSelected: n,
                ref: s,
                href: i,
                showCommentCount: t,
                showCommentZeroCount: r,
                showAssignees: o,
                showRepository: u = !0,
                onSelect: d = K.l,
                onClick: c = K.l,
                getMetadataHref: m,
                reactionEmojiToDisplay: g,
                sortingItemSelected: p,
                includeGitDataFromMainQuery: k,
                as: h,
                role: b,
            }) => {
                let f = (0, er.useFragment)(sA, e),
                    C = f && (0, nW.us)(f.title, f.titleHTML),
                    { pull_request_single_subscription: F } = (0, aK.h)(),
                    S = (0, er.useFragment)(sT, !F && k ? f : null),
                    L = (0, er.useFragment)(
                        iK,
                        F ? null : S?.headCommit?.commit
                    ),
                    v = (0, y.jsx)(iy, {
                        value: C,
                        dataKey: f,
                        href: i,
                        ref: s,
                        repositoryOwner: f.repository.owner.login,
                        repositoryName: f.repository.name,
                        onClick: c,
                        getLabelHref: (e) => m(nS.label, e),
                    }),
                    I = (0, y.jsx)(iq, {
                        repositoryOwner: f.repository.owner.login,
                        repositoryName: f.repository.name,
                        statusCheckRollup: L?.statusCheckRollup || void 0,
                        dataKey: f,
                        showRepository: u,
                        sortingItemSelected: p,
                        getAuthorHref: (e) => m("author", e),
                        id: f.id,
                        metadataRef: l,
                        includeGitDataFromMainQuery: k,
                    }),
                    _ = (0, y.jsx)(iC, {
                        pullId: f.id,
                        metadataRef: l,
                        getMetadataHref: m,
                        reactionEmojiToDisplay: g,
                        showAssignees: o,
                        showCommentCount: t,
                        showCommentZeroCount: r,
                    });
                return (0, y.jsxs)(
                    nG.c,
                    {
                        title: v,
                        isActive: a,
                        isSelected: n,
                        onSelect: d,
                        metadata: _,
                        metadataContainerClassName: ik.ListItem_0,
                        role: b || "listitem",
                        as: h,
                        children: [
                            (0, y.jsx)(sS, { metadataRef: l, issueId: f.id }),
                            (0, y.jsx)(nX.B, {
                                children: (0, y.jsx)(s2, {
                                    id: f.id,
                                    dataKey: f,
                                    metadataRef: l,
                                }),
                            }),
                            (0, y.jsx)(nJ.Q, {
                                children: (0, y.jsx)(nZ.U, { children: I }),
                            }),
                        ],
                    },
                    f.id
                );
            };
            iL.nodeType = "pullRequest";
            try {
                iL.displayName || (iL.displayName = "PullRequestItem");
            } catch {}
            let iK = sN;
            function iv({ statusCheckRollup: e, variant: l }) {
                if (!e) return null;
                let a = e.contexts?.checkRunCount,
                    n = e.contexts?.checkRunCountsByState?.find(
                        (e) => "SUCCESS" === e.state
                    )?.count,
                    s = `${n}/${a}`,
                    i = e.state.toLowerCase() || "";
                return (0, y.jsxs)("span", {
                    className: sP.checkRunStatusContainer,
                    children: [
                        " ",
                        "\xb7 ",
                        (0, y.jsx)(sR.B6, {
                            disablePopover: !0,
                            statusRollup: i,
                        }),
                        (0, y.jsx)("span", { children: "default" === l && s }),
                    ],
                });
            }
            function iI({
                id: e,
                primaryQueryRef: l,
                secondaryQueryRef: a,
                variant: n,
            }) {
                return a || l
                    ? l
                        ? (0, y.jsx)(iw, { dataKey: l, variant: n })
                        : a
                          ? (0, y.jsx)(b.Suspense, {
                                fallback: null,
                                children: (0, y.jsx)(i_, {
                                    id: e,
                                    secondaryQueryRef: a,
                                    variant: n,
                                }),
                            })
                          : null
                    : null;
            }
            function i_({ id: e, secondaryQueryRef: l, variant: a }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(iX, l),
                    s = n?.find((l) => l?.id === e),
                    { pull_request_single_subscription: i } = (0, aK.h)();
                return s
                    ? i
                        ? (0, y.jsx)(iw, { dataKey: s, variant: a })
                        : (0, y.jsx)(ix, { secondaryDataKey: s, variant: a })
                    : null;
            }
            function ix({ secondaryDataKey: e, variant: l }) {
                let a = (0, er.useFragment)(sT, e),
                    n = (0, er.useFragment)(iK, a.headCommit?.commit);
                return n?.statusCheckRollup
                    ? (0, y.jsx)(iv, {
                          statusCheckRollup: n.statusCheckRollup,
                          variant: l,
                      })
                    : null;
            }
            function iw({ dataKey: e, variant: l }) {
                let a = (0, er.useFragment)(sj, e);
                return a?.statusCheckRollup
                    ? (0, y.jsx)(iv, {
                          statusCheckRollup: a.statusCheckRollup,
                          variant: l,
                      })
                    : null;
            }
            try {
                iv.displayName || (iv.displayName = "CheckRunStatus");
            } catch {}
            try {
                iI.displayName || (iI.displayName = "LazyCheckRunStatus");
            } catch {}
            try {
                i_.displayName ||
                    (i_.displayName = "LazyCheckRunStatusFetched");
            } catch {}
            try {
                ix.displayName ||
                    (ix.displayName = "LazyCheckRunStatusInternal");
            } catch {}
            try {
                iw.displayName ||
                    (iw.displayName = "LazyCheckRunStatusFromPRInternal");
            } catch {}
            let iN = {
                    repositoryNameTruncate:
                        "IssuePullRequestDescription-module__repositoryNameTruncate--dTjwn",
                    RelativeTime:
                        "IssuePullRequestDescription-module__RelativeTime--lbeGP",
                },
                ij = (function () {
                    var e = [
                        {
                            condition: "includeMilestone",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Milestone",
                                    kind: "LinkedField",
                                    name: "milestone",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "title",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "url",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                    ];
                    return {
                        argumentDefinitions: [
                            {
                                defaultValue: !0,
                                kind: "LocalArgument",
                                name: "includeMilestone",
                            },
                        ],
                        kind: "Fragment",
                        metadata: null,
                        name: "MilestoneMetadata",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: e,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: e,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    };
                })();
            ij.hash = "42e2c9b063aef2dbe465b822a97ed4da";
            let iR = {
                    milestoneLink:
                        "MilestoneMetadata-module__milestoneLink--gnE34",
                    milestoneTitleTruncate:
                        "MilestoneMetadata-module__milestoneTitleTruncate--ZhflK",
                },
                iP = ({ data: e }) => {
                    let { milestone: l } = (0, er.useFragment)(ij, e);
                    return l
                        ? (0, y.jsxs)(y.Fragment, {
                              children: [
                                  "\xb7",
                                  (0, y.jsxs)(e9.A, {
                                      href: l.url,
                                      muted: !0,
                                      "aria-label": l.title,
                                      className: iR.milestoneLink,
                                      children: [
                                          (0, y.jsx)(nT.A, {
                                              icon: T.MilestoneIcon,
                                              size: 16,
                                          }),
                                          "\xa0",
                                          (0, y.jsx)(s_.A, {
                                              title: l.title,
                                              className:
                                                  iR.milestoneTitleTruncate,
                                              children: l.title,
                                          }),
                                      ],
                                  }),
                              ],
                          })
                        : null;
                };
            try {
                iP.displayName || (iP.displayName = "MilestoneMetadata");
            } catch {}
            let iT = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ReviewDecision",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "reviewDecision",
                        storageKey: null,
                    },
                ],
                type: "PullRequest",
                abstractKey: null,
            };
            iT.hash = "1c213dcaa975bc9ffa4c8aaaba1c8aec";
            let iA = {
                reviewDecisionContainer:
                    "ReviewDecision-module__reviewDecisionContainer--OQCsF",
                reviewDecisionContent:
                    "ReviewDecision-module__reviewDecisionContent--vklGz",
                approvedIcon: "ReviewDecision-module__approvedIcon--iw7fU",
                statusText: "ReviewDecision-module__statusText--t5WK8",
                changesRequestedIcon:
                    "ReviewDecision-module__changesRequestedIcon--iuMSn",
                reviewRequiredIcon:
                    "ReviewDecision-module__reviewRequiredIcon--CMkL2",
            };
            function iM({ decision: e, variant: l = "default" }) {
                let a = (function (e) {
                    switch (e) {
                        case "APPROVED":
                            return (0, y.jsxs)(y.Fragment, {
                                children: [
                                    (0, y.jsx)(nT.A, {
                                        icon: T.CheckCircleFillIcon,
                                        size: 12,
                                        className: iA.approvedIcon,
                                    }),
                                    " ",
                                    (0, y.jsx)("span", {
                                        className: iA.statusText,
                                        children: "Approved",
                                    }),
                                ],
                            });
                        case "CHANGES_REQUESTED":
                            return (0, y.jsxs)(y.Fragment, {
                                children: [
                                    (0, y.jsx)(nT.A, {
                                        icon: T.XCircleFillIcon,
                                        size: 12,
                                        className: iA.changesRequestedIcon,
                                    }),
                                    " ",
                                    (0, y.jsx)("span", {
                                        className: iA.statusText,
                                        children: "Changes requested",
                                    }),
                                ],
                            });
                        case "REVIEW_REQUIRED":
                            return (0, y.jsxs)(y.Fragment, {
                                children: [
                                    (0, y.jsx)(nT.A, {
                                        icon: T.NoEntryFillIcon,
                                        size: 12,
                                        className: iA.reviewRequiredIcon,
                                    }),
                                    " ",
                                    (0, y.jsx)("span", {
                                        className: iA.statusText,
                                        children: "Review required",
                                    }),
                                ],
                            });
                        default:
                            return null;
                    }
                })(e);
                return a
                    ? "default" === l
                        ? (0, y.jsxs)("div", {
                              className: iA.reviewDecisionContainer,
                              children: [
                                  " ",
                                  "\xb7",
                                  (0, y.jsx)("span", {
                                      className: iA.reviewDecisionContent,
                                      children: a,
                                  }),
                              ],
                          })
                        : (0, y.jsxs)("div", {
                              className: iA.reviewDecisionContainer,
                              children: [
                                  (0, y.jsx)("span", { children: "\xb7" }),
                                  a,
                              ],
                          })
                    : null;
            }
            function iV({ id: e, secondaryQueryRef: l, variant: a }) {
                return l
                    ? (0, y.jsx)(b.Suspense, {
                          fallback: null,
                          children: (0, y.jsx)(iD, {
                              id: e,
                              secondaryQueryRef: l,
                              variant: a,
                          }),
                      })
                    : null;
            }
            function iD({ id: e, secondaryQueryRef: l, variant: a }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(iX, l),
                    s = n?.find((l) => l?.id === e);
                return s
                    ? (0, y.jsx)(iE, { secondaryDataKey: s, variant: a })
                    : null;
            }
            function iE({ secondaryDataKey: e, variant: l }) {
                let a = (0, er.useFragment)(sq, e),
                    n = (0, er.useFragment)(iT, a);
                return n?.reviewDecision
                    ? (0, y.jsx)(iM, { decision: n.reviewDecision, variant: l })
                    : null;
            }
            try {
                iM.displayName || (iM.displayName = "ReviewDecision");
            } catch {}
            try {
                iV.displayName || (iV.displayName = "LazyReviewDecision");
            } catch {}
            try {
                iD.displayName ||
                    (iD.displayName = "LazyReviewDecisionFetched");
            } catch {}
            try {
                iE.displayName ||
                    (iE.displayName = "LazyReviewDecisionInternal");
            } catch {}
            function iq({
                dataKey: e,
                repositoryOwner: l,
                repositoryName: a,
                ...n
            }) {
                let { number: s } = (0, er.useFragment)(sv, e),
                    i = `${l}/${a}`,
                    t = { number: `number ${s} `, repo: `In ${i};` },
                    r = (0, y.jsxs)("div", {
                        className: nY.defaultRepoContainer,
                        children: [
                            (0, y.jsx)("span", {
                                children: n.showRepository ? i : "",
                            }),
                            (0, y.jsx)("span", {
                                className: "sr-only",
                                children: t.number,
                            }),
                        ],
                    }),
                    o = (0, y.jsxs)("span", {
                        className: nY.defaultNumberDescription,
                        children: [
                            (0, y.jsxs)("span", { children: ["#", s] }),
                            "\xa0",
                            (0, y.jsx)("span", {
                                className: "sr-only",
                                children: t.repo,
                            }),
                        ],
                    });
                return (0, y.jsx)(iO, {
                    dataKey: e,
                    defaultRepositoryRender: r,
                    defaultMetaRender: o,
                    nameWithOwner: i,
                    repositoryOwner: l,
                    repositoryName: a,
                    ariaLabels: t,
                    ...n,
                });
            }
            let iO = ({
                    dataKey: e,
                    metadataRef: l,
                    showRepository: a = !0,
                    sortingItemSelected: n,
                    statusCheckRollup: s,
                    defaultRepositoryRender: i,
                    defaultMetaRender: t,
                    nameWithOwner: r,
                    ariaLabels: o,
                    getAuthorHref: u,
                    id: d,
                    includeGitDataFromMainQuery: c,
                }) => {
                    let m = (0, er.useFragment)(sv, e),
                        { pull_request_single_subscription: g } = (0, aK.h)(),
                        { variant: p } = (0, n9.e)(),
                        {
                            author: k,
                            reviewDecision: h,
                            closed: b,
                            closedAt: f,
                            createdAt: C,
                            updatedAt: F,
                            stateReason: S,
                        } = m,
                        L = k?.__typename,
                        K = k?.login || sw.t.ghostUserLogin,
                        v = "Bot" === L ? `app/${K}` : K,
                        I = k?.isCopilot,
                        _ = I ? sw.t.copilotDisplayName : K,
                        x = k?.resourcePath || "",
                        w = (0, si.S)(K, { isCopilot: I }),
                        N = C ? new Date(C) : void 0,
                        j = F ? new Date(F) : void 0,
                        R = f ? new Date(f) : void 0;
                    return (0, y.jsxs)(sI.z, {
                        "data-testid": n8.listRowRepoNameAndNumber,
                        children: [
                            "compact" === p
                                ? a &&
                                  (0, y.jsxs)(y.Fragment, {
                                      children: [
                                          (0, y.jsx)(s_.A, {
                                              title: r,
                                              className:
                                                  iN.repositoryNameTruncate,
                                              children: (0, y.jsx)("span", {
                                                  className:
                                                      nY.compactNameWithOwnerLabel,
                                                  children: r,
                                              }),
                                          }),
                                          (0, y.jsx)("span", {
                                              className: "sr-only",
                                              children: o.number,
                                          }),
                                      ],
                                  })
                                : a && i,
                            t,
                            "default" === p &&
                                (0, y.jsxs)(y.Fragment, {
                                    children: [
                                        b
                                            ? (0, y.jsx)(i$, {
                                                  displayName: _,
                                                  authorFullLogin: v,
                                                  resourcePath: x,
                                                  getAuthorHref: u,
                                                  hovercardAttributes: w,
                                                  timestamp: R,
                                                  testId: "closed-at",
                                                  action: iB.Closed,
                                              })
                                            : (0, y.jsx)(i$, {
                                                  displayName: _,
                                                  authorFullLogin: v,
                                                  resourcePath: x,
                                                  getAuthorHref: u,
                                                  hovercardAttributes: w,
                                                  timestamp: N,
                                                  testId: "created-at",
                                                  action: iB.Opened,
                                              }),
                                        (n === ng.RecentlyUpdated ||
                                            "updated" === n) &&
                                            j &&
                                            (0, y.jsxs)("div", {
                                                "data-testid": "updated-at",
                                                className:
                                                    nY.timestampContainer,
                                                children: [
                                                    " ",
                                                    "\xb7 Updated",
                                                    " ",
                                                    (0, y.jsxs)(sx.A, {
                                                        date: j,
                                                        className:
                                                            iN.RelativeTime,
                                                        children: [
                                                            "on ",
                                                            j.toLocaleDateString(
                                                                "en-US",
                                                                {
                                                                    month: "short",
                                                                    day: "numeric",
                                                                    year: "numeric",
                                                                }
                                                            ),
                                                        ],
                                                    }),
                                                ],
                                            }),
                                    ],
                                }),
                            S?.toLowerCase() === "duplicate" &&
                                (0, y.jsxs)("span", {
                                    "data-testid": "state-reason",
                                    children: [" \xb7", " Duplicate"],
                                }),
                            h
                                ? (0, y.jsx)(iM, { decision: h, variant: p })
                                : (0, y.jsx)(iV, {
                                      id: d,
                                      variant: p,
                                      secondaryQueryRef: l,
                                  }),
                            (0, y.jsx)(iP, { data: m }),
                            s
                                ? (0, y.jsx)(iv, {
                                      variant: p,
                                      statusCheckRollup: s,
                                  })
                                : (0, y.jsx)(iI, {
                                      id: d,
                                      variant: p,
                                      primaryQueryRef: g && c ? e : void 0,
                                      secondaryQueryRef: l,
                                  }),
                        ],
                    });
                },
                iB = { Opened: "opened", Closed: "closed" },
                i$ = ({
                    displayName: e,
                    authorFullLogin: l,
                    resourcePath: a,
                    getAuthorHref: n,
                    hovercardAttributes: s,
                    timestamp: i,
                    testId: t,
                    action: r,
                }) =>
                    (0, y.jsxs)("div", {
                        "data-testid": t,
                        className: nY.timestampContainer,
                        children: [
                            (0, y.jsx)("span", { children: "\xb7 " }),
                            (0, y.jsx)("span", {
                                children: r === iB.Closed && " by ",
                            }),
                            (0, y.jsx)(e9.A, {
                                href: n ? n(l) : a,
                                className: nY.authorCreatedLink,
                                ...s,
                                children: e,
                            }),
                            " ",
                            (0, y.jsx)("span", {
                                children:
                                    r === iB.Opened
                                        ? " opened "
                                        : " was closed ",
                            }),
                            i &&
                                (0, y.jsxs)(sx.A, {
                                    date: i,
                                    children: [
                                        "on ",
                                        i.toLocaleDateString("en-US", {
                                            month: "short",
                                            day: "numeric",
                                            year: "numeric",
                                        }),
                                    ],
                                }),
                        ],
                    });
            try {
                iq.displayName ||
                    (iq.displayName = "IssuePullRequestDescription");
            } catch {}
            try {
                iO.displayName ||
                    (iO.displayName = "IssuePullRequestDescriptionItem");
            } catch {}
            try {
                i$.displayName || (i$.displayName = "TimestampContainer");
            } catch {}
            let iQ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueTypeIndicator",
                selections: [
                    {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "issueType",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "id",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "color",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            iQ.hash = "dad417bd99b3d4b49eae2364363cde61";
            var iU = a(25983);
            let iz = {
                    container: "IssueTypeIndicator-module__container--Pqzj1",
                },
                iH = ({ dataKey: e, getIssueTypeHref: l }) => {
                    let { issueType: a } = (0, er.useFragment)(iQ, e);
                    return a?.id && a?.name
                        ? (0, y.jsx)("div", {
                              className: iz.container,
                              children: (0, y.jsx)(iU.n, {
                                  name: a.name,
                                  color: a.color,
                                  href: l(a.name),
                                  getTooltipText: (e) => (e ? a.name : void 0),
                              }),
                          })
                        : null;
                };
            try {
                iH.displayName || (iH.displayName = "IssueTypeIndicator");
            } catch {}
            let iW = ({
                itemKey: e,
                metadataRef: l,
                isSelected: a,
                isActive: n = !1,
                showCommentCount: s,
                showCommentZeroCount: i,
                showAssignees: t = !0,
                showRepository: r = !0,
                onSelect: o = K.l,
                onFocus: u = K.l,
                onClick: d = K.l,
                getMetadataHref: c,
                getAdditiveMetadataHref: m,
                reactionEmojiToDisplay: g,
                sortingItemSelected: p,
                ref: k,
                href: h,
                repositoryOwner: b,
                repositoryName: f,
                as: C,
                role: F,
            }) => {
                let S = (0, er.useFragment)(nH, e),
                    L = S && (0, nW.us)(S.title, S.titleHtml),
                    v = (0, y.jsx)(iy, {
                        value: L,
                        dataKey: S,
                        metadataRef: l,
                        repositoryOwner: b,
                        repositoryName: f,
                        ref: k,
                        href: h,
                        onClick: d,
                        getLabelHref: (e) => c(nS.label, e),
                        getSubIssuesHref: (e, l, a) =>
                            c(nS["parent-issue"], `${e}/${l}#${a}`),
                    }),
                    I = (0, y.jsx)(iq, {
                        repositoryOwner: b,
                        repositoryName: f,
                        dataKey: S,
                        showRepository: r,
                        sortingItemSelected: p,
                        getAuthorHref: (e) => c("author", e),
                        id: S.id,
                    }),
                    _ = (0, y.jsx)(sy, {
                        issueId: S.id,
                        metadataRef: l,
                        getMetadataHref: c,
                        showAssignees: t,
                        reactionEmojiToDisplay: g,
                        showCommentCount: s,
                        showCommentZeroCount: i,
                        showLinkedPullRequests: !0,
                    });
                return (0, y.jsxs)(
                    nG.c,
                    {
                        title: v,
                        isSelected: a,
                        isActive: n,
                        onSelect: o,
                        onFocus: u,
                        metadata: _,
                        metadataContainerClassName: nY.ListItem_0,
                        role: F || "listitem",
                        as: C,
                        children: [
                            (0, y.jsx)(sS, { metadataRef: l, issueId: S.id }),
                            (0, y.jsx)(nX.B, {
                                className: nY.leadingContent,
                                children: (0, y.jsx)(s2, { dataKey: S }),
                            }),
                            (0, y.jsx)(nJ.Q, {
                                children: (0, y.jsxs)(nZ.U, {
                                    children: [
                                        (0, y.jsx)(iH, {
                                            dataKey: S,
                                            getIssueTypeHref: (e) =>
                                                c("type", e),
                                        }),
                                        (0, y.jsx)(n3, {
                                            metadataRef: l,
                                            issueId: S.id,
                                            getIssueTypeHref: () =>
                                                m(nS.is, "blocked"),
                                        }),
                                        I,
                                    ],
                                }),
                            }),
                        ],
                    },
                    S.id
                );
            };
            iW.nodeType = "issue";
            try {
                iW.displayName || (iW.displayName = "IssueItem");
            } catch {}
            let iG = { row: "IssueRow-module__row--pHXv5" },
                iZ = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "issueId",
                            },
                        ],
                        l = [
                            {
                                kind: "Variable",
                                name: "id",
                                variableName: "issueId",
                            },
                        ],
                        a = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "titleHTML",
                            storageKey: null,
                        },
                        s = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        i = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "stateReason",
                            storageKey: null,
                        },
                        t = [{ kind: "Literal", name: "first", value: 10 }],
                        r = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        o = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closed",
                            storageKey: null,
                        },
                        u = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        d = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        c = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        m = [
                            r,
                            a,
                            o,
                            u,
                            d,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "viewerCanUpdate",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "hasReachedItemsLimit",
                                storageKey: null,
                            },
                            c,
                        ],
                        g = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        p = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        y = [
                            { kind: "Literal", name: "first", value: 20 },
                            {
                                kind: "Literal",
                                name: "orderBy",
                                value: { direction: "ASC", field: "NAME" },
                            },
                        ],
                        k = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "cursor",
                            storageKey: null,
                        },
                        h = {
                            alias: null,
                            args: null,
                            concreteType: "PageInfo",
                            kind: "LinkedField",
                            name: "pageInfo",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "endCursor",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "hasNextPage",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        b = [
                            u,
                            {
                                alias: null,
                                args: y,
                                concreteType: "LabelConnection",
                                kind: "LinkedField",
                                name: "labels",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "LabelEdge",
                                        kind: "LinkedField",
                                        name: "edges",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Label",
                                                kind: "LinkedField",
                                                name: "node",
                                                plural: !1,
                                                selections: [
                                                    r,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "nameHTML",
                                                        storageKey: null,
                                                    },
                                                    p,
                                                    g,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "description",
                                                        storageKey: null,
                                                    },
                                                    c,
                                                ],
                                                storageKey: null,
                                            },
                                            k,
                                        ],
                                        storageKey: null,
                                    },
                                    h,
                                ],
                                storageKey:
                                    'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                            },
                            {
                                alias: null,
                                args: y,
                                filters: ["orderBy"],
                                handle: "connection",
                                key: "Labels_labels",
                                kind: "LinkedHandle",
                                name: "labels",
                            },
                        ],
                        f = [r];
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "IssueRowSubscription",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType: "IssueUpdatedPayload",
                                    kind: "LinkedField",
                                    name: "issueUpdated",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueTitleUpdated",
                                            plural: !1,
                                            selections: [a, n],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueStateUpdated",
                                            plural: !1,
                                            selections: [s, i],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueTypeUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "IssueTypeIndicator",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueMetadataUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: [
                                                        {
                                                            kind: "Literal",
                                                            name: "labelPageSize",
                                                            value: 20,
                                                        },
                                                    ],
                                                    kind: "FragmentSpread",
                                                    name: "IssuePullRequestTitle",
                                                },
                                                {
                                                    args: [
                                                        {
                                                            kind: "Literal",
                                                            name: "assigneePageSize",
                                                            value: 10,
                                                        },
                                                    ],
                                                    kind: "FragmentSpread",
                                                    name: "Assignees",
                                                },
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "MilestonesSectionMilestone",
                                                },
                                                {
                                                    alias: null,
                                                    args: t,
                                                    concreteType:
                                                        "ProjectV2ItemConnection",
                                                    kind: "LinkedField",
                                                    name: "projectItemsNext",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "ProjectV2ItemEdge",
                                                            kind: "LinkedField",
                                                            name: "edges",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "ProjectV2Item",
                                                                    kind: "LinkedField",
                                                                    name: "node",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            r,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    "ProjectV2",
                                                                                kind: "LinkedField",
                                                                                name: "project",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            kind: "InlineDataFragmentSpread",
                                                                                            name: "ProjectPickerRelay",
                                                                                            selections:
                                                                                                m,
                                                                                            args: null,
                                                                                            argumentDefinitions:
                                                                                                [],
                                                                                        },
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey:
                                                        "projectItemsNext(first:10)",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "EventSubscription",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "IssueRowSubscription",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType: "IssueUpdatedPayload",
                                    kind: "LinkedField",
                                    name: "issueUpdated",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueTitleUpdated",
                                            plural: !1,
                                            selections: [a, n, r],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueStateUpdated",
                                            plural: !1,
                                            selections: [s, i, r],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueTypeUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "IssueType",
                                                    kind: "LinkedField",
                                                    name: "issueType",
                                                    plural: !1,
                                                    selections: [r, g, p],
                                                    storageKey: null,
                                                },
                                                r,
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueMetadataUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "Milestone",
                                                    kind: "LinkedField",
                                                    name: "milestone",
                                                    plural: !1,
                                                    selections: [
                                                        r,
                                                        a,
                                                        o,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "dueOn",
                                                            storageKey: null,
                                                        },
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "progressPercentage",
                                                            storageKey: null,
                                                        },
                                                        d,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "closedAt",
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: t,
                                                    concreteType:
                                                        "ProjectV2ItemConnection",
                                                    kind: "LinkedField",
                                                    name: "projectItemsNext",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "ProjectV2ItemEdge",
                                                            kind: "LinkedField",
                                                            name: "edges",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "ProjectV2Item",
                                                                    kind: "LinkedField",
                                                                    name: "node",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            r,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    "ProjectV2",
                                                                                kind: "LinkedField",
                                                                                name: "project",
                                                                                plural: !1,
                                                                                selections:
                                                                                    m,
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey:
                                                        "projectItemsNext(first:10)",
                                                },
                                                r,
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [
                                                        c,
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: b,
                                                            type: "Issue",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: b,
                                                            type: "PullRequest",
                                                            abstractKey: null,
                                                        },
                                                    ],
                                                    type: "IssueOrPullRequest",
                                                    abstractKey:
                                                        "__isIssueOrPullRequest",
                                                },
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: t,
                                                            concreteType:
                                                                "AssigneeConnection",
                                                            kind: "LinkedField",
                                                            name: "assignedActors",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "AssigneeEdge",
                                                                    kind: "LinkedField",
                                                                    name: "edges",
                                                                    plural: !0,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    null,
                                                                                kind: "LinkedField",
                                                                                name: "node",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        c,
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                f,
                                                                                            type: "User",
                                                                                            abstractKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                f,
                                                                                            type: "Bot",
                                                                                            abstractKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                [
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "login",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: [
                                                                                                            {
                                                                                                                kind: "Literal",
                                                                                                                name: "size",
                                                                                                                value: 64,
                                                                                                            },
                                                                                                        ],
                                                                                                        kind: "ScalarField",
                                                                                                        name: "avatarUrl",
                                                                                                        storageKey:
                                                                                                            "avatarUrl(size:64)",
                                                                                                    },
                                                                                                    {
                                                                                                        kind: "InlineFragment",
                                                                                                        selections:
                                                                                                            [
                                                                                                                {
                                                                                                                    alias: null,
                                                                                                                    args: null,
                                                                                                                    kind: "ScalarField",
                                                                                                                    name: "isCopilot",
                                                                                                                    storageKey:
                                                                                                                        null,
                                                                                                                },
                                                                                                            ],
                                                                                                        type: "Bot",
                                                                                                        abstractKey:
                                                                                                            null,
                                                                                                    },
                                                                                                ],
                                                                                            type: "Actor",
                                                                                            abstractKey:
                                                                                                "__isActor",
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                f,
                                                                                            type: "Node",
                                                                                            abstractKey:
                                                                                                "__isNode",
                                                                                        },
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            k,
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                h,
                                                            ],
                                                            storageKey:
                                                                "assignedActors(first:10)",
                                                        },
                                                        {
                                                            alias: null,
                                                            args: t,
                                                            filters: null,
                                                            handle: "connection",
                                                            key: "IssueAssignees_assignedActors",
                                                            kind: "LinkedHandle",
                                                            name: "assignedActors",
                                                        },
                                                        {
                                                            kind: "TypeDiscriminator",
                                                            abstractKey:
                                                                "__isNode",
                                                        },
                                                    ],
                                                    type: "Assignable",
                                                    abstractKey:
                                                        "__isAssignable",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "cecaa6e2242a56ba1659900a0cb65274",
                            metadata: {},
                            name: "IssueRowSubscription",
                            operationKind: "subscription",
                            text: null,
                        },
                    };
                })();
            iZ.hash = "bf556b1b8bb9e5e6d91fccbaaef75ac5";
            let iX = c,
                iJ = (0, b.forwardRef)(
                    (
                        {
                            isActive: e,
                            isSelected: l,
                            issueKey: a,
                            scopedRepository: n,
                            getMetadataHref: s,
                            getAdditiveMetadataHref: i,
                            onSelect: t,
                            onNavigate: r,
                            onSidePanelNavigate: o,
                            onSelectRow: u,
                            reactionEmojiToDisplay: d,
                            sortingItemSelected: c,
                            metadataRef: m,
                            ...g
                        },
                        p
                    ) => {
                        let k = (0, aF.useFragment)(nQ, a),
                            h = (0, aF.useFragment)(nH, k);
                        (0, nU.M3)() &&
                            ((e) => {
                                let l = (0, b.useMemo)(
                                    () => ({
                                        subscription: iZ,
                                        variables: { issueId: e },
                                    }),
                                    [e]
                                );
                                (0, er.useSubscription)(l);
                            })(h.id);
                        let f = n ? n.owner : k.repository?.owner.login || "",
                            C = n ? n.name : k.repository?.name || "",
                            F = (0, aL.$9)({
                                owner: f,
                                repo: C,
                                number: k.number,
                            }),
                            S = (0, b.useCallback)(() => {
                                o
                                    ? o({
                                          number: k.number,
                                          repo: C,
                                          owner: f,
                                          type: "Issue",
                                      })
                                    : r(F);
                            }, [o, k.number, C, f, r, F]),
                            L = (0, b.useCallback)(
                                (e) => {
                                    (u({ type: h.__typename }),
                                        e.ctrlKey ||
                                            e.metaKey ||
                                            (e.stopPropagation(),
                                            e.preventDefault(),
                                            S()));
                                },
                                [h.__typename, S, u]
                            ),
                            K = (0, b.useCallback)(() => {
                                t?.(!l);
                            }, [t, l]);
                        return (0, y.jsx)(nz.tL, {
                            commands: {
                                "list-view-items-issues-prs:open-focused-item":
                                    S,
                                "list-view-items-issues-prs:toggle-focused-item-selection":
                                    K,
                            },
                            className: iG.row,
                            children: (0, y.jsx)(iW, {
                                isActive: e,
                                itemKey: k,
                                metadataRef: m,
                                isSelected: l,
                                reactionEmojiToDisplay: d,
                                showCommentCount: !0,
                                showRepository: !n,
                                repositoryOwner: f,
                                repositoryName: C,
                                showAssignees: !0,
                                showLeadingRightSideContent: !1,
                                sortingItemSelected: c,
                                getMetadataHref: s,
                                getAdditiveMetadataHref: i,
                                onSelect: t,
                                onClick: L,
                                href: F,
                                ref: p,
                                ...g,
                            }),
                        });
                    }
                );
            iJ.displayName = "IssueRowInternal";
            let iY = b.memo(iJ);
            try {
                iY.displayName || (iY.displayName = "IssueRow");
            } catch {}
            let i1 = ({ id: e, ariaLabel: l }) =>
                (0, y.jsxs)("div", {
                    id: e,
                    className: "blankslate",
                    role: "region",
                    "aria-label": l,
                    "aria-live": "polite",
                    "aria-atomic": "true",
                    children: [
                        (0, y.jsx)("h3", {
                            className: "blankslate-heading",
                            children: ng.noResultsTitle,
                        }),
                        (0, y.jsx)("p", { children: ng.noResultsDescription }),
                    ],
                });
            try {
                i1.displayName || (i1.displayName = "NoResults");
            } catch {}
            var i2 = a(75202),
                i0 = a(79866),
                i3 = a(27042);
            let i4 = {
                    sortingMenuButton:
                        "sorting-dropdown-module__sortingMenuButton--nMVkF",
                },
                i5 = /(created|updated|comments|reactions|relevance?)/,
                i7 = { asc: T.SortAscIcon, desc: T.SortDescIcon },
                i6 = {
                    ...ng.sortDropdownOptionDisplayValues,
                    ...ng.sortDropdownReactionLabels,
                    reactions: ng.totalReactions,
                };
            function i9({
                activeSearchQuery: e,
                dirtySearchQuery: l,
                setReactionEmojiToDisplay: a,
                setSortingItemSelected: n,
                searchUrl: s,
                setCurrentPage: i,
                nested: t = !1,
            }) {
                var r, o;
                let u = (0, b.useMemo)(() => nw(e).get("sort")?.[0] || "", [e]),
                    [d, c] = (0, b.useState)(() => tl(u)),
                    [m, g] = (0, b.useState)(() => ta(u)),
                    p = (0, e7.Z)(),
                    k = (0, b.useCallback)(
                        (e, a) => {
                            var n, t;
                            (p(
                                s(
                                    ((n = l || ""),
                                    (t = `${ng.sortKeyToQuery[e]}-${a}`),
                                    n
                                        .replace(/\bsort\S+/gi, "")
                                        .concat(` ${t}`)
                                        .replaceAll("  ", " "))
                                )
                            ),
                                i(1));
                        },
                        [l, p, s, i]
                    ),
                    h = (0, b.useCallback)(
                        (e) => {
                            let l = te(e),
                                s = i0.qG[l || ""];
                            l &&
                                s &&
                                (n(e), a({ reaction: l, reactionEmoji: s }));
                        },
                        [a, n]
                    ),
                    f = (0, b.useCallback)(
                        (e, l) => {
                            (n(e),
                                "relevance" === l && "asc" === d
                                    ? (c("desc"), k(l, "desc"))
                                    : k(l, d));
                        },
                        [d, k, n]
                    ),
                    C = (0, b.useCallback)(
                        (e) => {
                            ("asc" === d && c("desc"), k(e, "desc"), h(e));
                        },
                        [d, k, h]
                    ),
                    F = (0, b.useCallback)(
                        (e) => {
                            m && (c(e), n(i6[m]), k(m, e));
                        },
                        [k, m, n]
                    );
                (0, b.useEffect)(() => {
                    (c(tl(u)), g(ta(u)));
                    let e = i8(u);
                    (n(e), h(e));
                }, [a, n, u, h]);
                let S = Object.entries(ng.sortDropdownOptionDisplayValues),
                    L = Object.entries(ng.sortDropdownReactionLabels),
                    K = ts(m) || "relevance" === m,
                    v = (0, y.jsxs)(y.Fragment, {
                        children: [
                            (0, y.jsx)(
                                np.l.Item,
                                {
                                    onSelect: () =>
                                        f(ng.totalReactions, "reactions"),
                                    selected: "reactions" === m,
                                    role: "menuitemradio",
                                    children: ng.totalReactions,
                                },
                                "reactions"
                            ),
                            (0, y.jsx)(np.l.Divider, {}),
                            L.map(([e, l]) =>
                                (0, y.jsxs)(
                                    np.l.Item,
                                    {
                                        onSelect: () => C(e),
                                        selected: m === e,
                                        role: "menuitemradio",
                                        children: [
                                            (0, y.jsx)(np.l.LeadingVisual, {
                                                children: i0.qG[te(e) || ""],
                                            }),
                                            l,
                                        ],
                                    },
                                    e
                                )
                            ),
                        ],
                    }),
                    I = (0, y.jsxs)(y.Fragment, {
                        children: [
                            (0, y.jsxs)(np.l.Group, {
                                children: [
                                    (0, y.jsx)(np.l.GroupHeading, {
                                        children: "Sort by",
                                    }),
                                    S.map(([e, l]) =>
                                        (0, y.jsx)(
                                            np.l.Item,
                                            {
                                                onSelect: () => f(l, e),
                                                selected: m === e,
                                                role: "menuitemradio",
                                                children: l,
                                            },
                                            e
                                        )
                                    ),
                                    (0, y.jsxs)(i3.W, {
                                        children: [
                                            (0, y.jsx)(i3.W.Anchor, {
                                                children: (0, y.jsx)(
                                                    np.l.Item,
                                                    {
                                                        selected:
                                                            ts(m) ||
                                                            "reactions" === m,
                                                        children: ng.reactions,
                                                    }
                                                ),
                                            }),
                                            (0, y.jsx)(i3.W.Overlay, {
                                                children: (0, y.jsx)(np.l, {
                                                    selectionVariant: "single",
                                                    children: v,
                                                }),
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                            (0, y.jsx)(np.l.Divider, {}),
                            (0, y.jsxs)(np.l.Group, {
                                children: [
                                    (0, y.jsx)(np.l.GroupHeading, {
                                        children: "Order",
                                    }),
                                    (0, y.jsxs)(
                                        np.l.Item,
                                        {
                                            disabled: K,
                                            selected: "asc" === d && null !== m,
                                            onSelect: () => F("asc"),
                                            children: [
                                                (0, y.jsx)(np.l.LeadingVisual, {
                                                    children: (0, y.jsx)(
                                                        T.SortAscIcon,
                                                        {}
                                                    ),
                                                }),
                                                tn(m, "asc"),
                                            ],
                                        },
                                        "ascending"
                                    ),
                                    (0, y.jsxs)(
                                        np.l.Item,
                                        {
                                            disabled: K,
                                            selected:
                                                "desc" === d && null !== m,
                                            onSelect: () => F("desc"),
                                            children: [
                                                (0, y.jsx)(np.l.LeadingVisual, {
                                                    children: (0, y.jsx)(
                                                        T.SortDescIcon,
                                                        {}
                                                    ),
                                                }),
                                                tn(m, "desc"),
                                            ],
                                        },
                                        "descending"
                                    ),
                                ],
                            }),
                        ],
                    });
                return t
                    ? (0, y.jsx)(i2.t, {
                          fallback: null,
                          children: (0, y.jsx)(np.l, {
                              selectionVariant: "single",
                              "aria-labelledby": "",
                              "aria-label": "Sort",
                              children: I,
                          }),
                      })
                    : (0, y.jsxs)(i3.W, {
                          children: [
                              (0, y.jsxs)(i3.W.Button, {
                                  variant: "invisible",
                                  className: i4.sortingMenuButton,
                                  leadingVisual: i7[d || "desc"],
                                  children: [
                                      ti(m ?? "")
                                          ? (0, y.jsx)("span", {
                                                className: "sr-only",
                                                children: "Sort by ",
                                            })
                                          : null,
                                      (0, y.jsx)(y.Fragment, {
                                          children: m
                                              ? ((r = m),
                                                (o = d || "desc"),
                                                "created" === r
                                                    ? ng
                                                          .sortDropdownMenuButtonLabels[
                                                          r
                                                      ][o]
                                                    : ng
                                                          .sortDropdownMenuButtonLabels[
                                                          r
                                                      ])
                                              : ng.sort,
                                      }),
                                      ti(m ?? "")
                                          ? (0, y.jsx)("span", {
                                                className: "sr-only",
                                                children:
                                                    "asc" === d
                                                        ? ", ascending"
                                                        : ", descending",
                                            })
                                          : null,
                                  ],
                              }),
                              (0, y.jsx)(i3.W.Overlay, {
                                  children: (0, y.jsx)(np.l, {
                                      selectionVariant: "single",
                                      children: I,
                                  }),
                              }),
                          ],
                      });
            }
            function i8(e) {
                let l = ta(e);
                return l || "relevance";
            }
            function te(e) {
                var l;
                let a = i6[e]?.replace(" ", "_").toUpperCase();
                return ((l = a), Object.keys(i0.qG).includes(l)) ? a : void 0;
            }
            function tl(e) {
                let l = e.split("-")?.[1];
                return "asc" === l || "desc" === l ? l : "desc";
            }
            function ta(e) {
                if (!e) return "created";
                let l = e.match(i5)?.[0];
                return (
                    "reactions" === l &&
                        (l =
                            e
                                .split(/-asc|-desc/)?.[0]
                                ?.split("reactions-")?.[1] || "reactions"),
                    ti(l) ? l : null
                );
            }
            function tn(e, l) {
                return "created" === e || "updated" === e
                    ? "asc" === l
                        ? ng.Oldest
                        : ng.Newest
                    : "asc" === l
                      ? ng.ascending
                      : ng.descending;
            }
            function ts(e) {
                return !!e && ng.sortDropdownReactionLabels.hasOwnProperty(e);
            }
            function ti(e) {
                return !!e && Object.keys(i6).includes(e);
            }
            try {
                i5.displayName || (i5.displayName = "SORT_KEY_MATCHING_REGEX");
            } catch {}
            try {
                i9.displayName || (i9.displayName = "SortingDropdown");
            } catch {}
            var tt = a(39111),
                tr = a(40104),
                to = a(64583),
                tu = a(24347);
            let td = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    l = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = [{ kind: "Literal", name: "first", value: 10 }],
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    i = [
                        a,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closed",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanUpdate",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "hasReachedItemsLimit",
                            storageKey: null,
                        },
                        s,
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "AddToProjectsBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType:
                                                    "ProjectV2ItemConnection",
                                                kind: "LinkedField",
                                                name: "projectItemsNext",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "ProjectV2ItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "ProjectV2Item",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    a,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "ProjectV2",
                                                                        kind: "LinkedField",
                                                                        name: "project",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    kind: "InlineDataFragmentSpread",
                                                                                    name: "ProjectPickerRelay",
                                                                                    selections:
                                                                                        i,
                                                                                    args: null,
                                                                                    argumentDefinitions:
                                                                                        [],
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "projectItemsNext(first:10)",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "AddToProjectsBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    s,
                                    a,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType:
                                                    "ProjectV2ItemConnection",
                                                kind: "LinkedField",
                                                name: "projectItemsNext",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "ProjectV2ItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "ProjectV2Item",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    a,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "ProjectV2",
                                                                        kind: "LinkedField",
                                                                        name: "project",
                                                                        plural: !1,
                                                                        selections:
                                                                            i,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "projectItemsNext(first:10)",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "15d9ddc81110f2787c880adbece9b713",
                        metadata: {},
                        name: "AddToProjectsBulkActionQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            td.hash = "f8203856eae7d031eaee328883deddb3";
            var tc = a(21728);
            let tm = (e) => {
                    let l,
                        a,
                        n,
                        s,
                        i,
                        t = (0, tc.c)(14);
                    t[0] !== e
                        ? (({ disabled: n, nested: l, ...a } = e),
                          (t[0] = e),
                          (t[1] = l),
                          (t[2] = a),
                          (t[3] = n))
                        : ((l = t[1]), (a = t[2]), (n = t[3]));
                    let r = void 0 !== n && n,
                        [o, u] = (0, b.useState)(!1);
                    t[4] !== r || t[5] !== l
                        ? ((s = (e) =>
                              l
                                  ? (0, y.jsxs)(np.l.Item, {
                                        disabled: r,
                                        ...e,
                                        role: "menuitem",
                                        children: [
                                            (0, y.jsx)(np.l.LeadingVisual, {
                                                children: (0, y.jsx)(
                                                    T.ProjectSymlinkIcon,
                                                    {}
                                                ),
                                            }),
                                            "Project",
                                        ],
                                    })
                                  : (0, y.jsx)(nn.Q, {
                                        "data-testid":
                                            "bulk-add-to-project-button",
                                        disabled: r,
                                        leadingVisual: T.ProjectSymlinkIcon,
                                        trailingVisual: T.TriangleDownIcon,
                                        ...e,
                                        children: "Project",
                                    })),
                          (t[4] = r),
                          (t[5] = l),
                          (t[6] = s))
                        : (s = t[6]);
                    let d = s;
                    if (!o) {
                        let e, l;
                        return (
                            t[7] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = () => {
                                      u(!0);
                                  }),
                                  (t[7] = e))
                                : (e = t[7]),
                            t[8] !== d
                                ? ((l = d({ onClick: e })),
                                  (t[8] = d),
                                  (t[9] = l))
                                : (l = t[9]),
                            l
                        );
                    }
                    return (
                        t[10] !== d || t[11] !== r || t[12] !== a
                            ? ((i = (0, y.jsx)(tg, {
                                  disabled: r,
                                  anchorElement: d,
                                  ...a,
                              })),
                              (t[10] = d),
                              (t[11] = r),
                              (t[12] = a),
                              (t[13] = i))
                            : (i = t[13]),
                        i
                    );
                },
                tg = (e) => {
                    let l,
                        a,
                        n,
                        s,
                        i,
                        t = (0, tc.c)(16),
                        {
                            issuesToActOn: r,
                            anchorElement: o,
                            onCompleted: u,
                            onError: d,
                            nested: c,
                            owner: m,
                            repo: g,
                        } = e;
                    (t[0] !== r
                        ? ((l = { ids: r }), (t[0] = r), (t[1] = l))
                        : (l = t[1]),
                        t[2] === Symbol.for("react.memo_cache_sentinel")
                            ? ((a = { fetchPolicy: "store-or-network" }),
                              (t[2] = a))
                            : (a = t[2]));
                    let { nodes: p } = (0, er.useLazyLoadQuery)(td, l, a);
                    if (t[3] !== p) {
                        let e = new Map(),
                            l = (p || []).map((l) => {
                                let a = l?.id;
                                return a
                                    ? ((l.projectItemsNext?.edges || [])
                                          .flatMap(tp)
                                          .map((l) => {
                                              let n = e.get(a) || [];
                                              return (
                                                  n.push(l.id),
                                                  e.set(a, n),
                                                  {
                                                      issueId: a,
                                                      projectId: l.id,
                                                      projectNode: l,
                                                  }
                                              );
                                          }) ?? [])
                                    : [];
                            });
                        for (let e of ((n = {}), l))
                            for (let a of e)
                                a.projectId in n ||
                                    (l.every((e) =>
                                        e.some(
                                            (e) => e.projectId === a.projectId
                                        )
                                    ) &&
                                        (n[a.projectId] = a.projectNode));
                        ((t[3] = p), (t[4] = n));
                    } else n = t[4];
                    return (
                        t[5] !== n
                            ? ((s = Object.values(n)), (t[5] = n), (t[6] = s))
                            : (s = t[6]),
                        t[7] !== o ||
                        t[8] !== r ||
                        t[9] !== c ||
                        t[10] !== u ||
                        t[11] !== d ||
                        t[12] !== m ||
                        t[13] !== g ||
                        t[14] !== s
                            ? ((i = (0, y.jsx)(lR.k$, {
                                  pickerId: "add-to-projects-project-picker",
                                  issueIds: r,
                                  readonly: !1,
                                  triggerOpen: !0,
                                  selectedProjects: s,
                                  onCompleted: u,
                                  onError: d,
                                  nested: c,
                                  anchorElement: o,
                                  owner: m,
                                  repo: g,
                              })),
                              (t[7] = o),
                              (t[8] = r),
                              (t[9] = c),
                              (t[10] = u),
                              (t[11] = d),
                              (t[12] = m),
                              (t[13] = g),
                              (t[14] = s),
                              (t[15] = i))
                            : (i = t[15]),
                        i
                    );
                };
            try {
                tm.displayName || (tm.displayName = "AddToProjectsBulkAction");
            } catch {}
            try {
                tg.displayName || (tg.displayName = "LazyBulkProjectPicker");
            } catch {}
            function tp(e) {
                return e?.node ? [(0, lR.Kx)(e?.node.project)] : [];
            }
            let ty = {
                kind: "InlineDataFragment",
                name: "ApplyAssigneesBulkActionIssueFragment",
            };
            ty.hash = "bf89051fe20d80d2d3307cbae57ac84e";
            let tk = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    l = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = [{ kind: "Literal", name: "first", value: 10 }],
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    u = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isPrivate",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isArchived",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ApplyAssigneesBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                kind: "InlineDataFragmentSpread",
                                                name: "ApplyAssigneesBulkActionIssueFragment",
                                                selections: [
                                                    a,
                                                    {
                                                        alias: null,
                                                        args: n,
                                                        concreteType:
                                                            "AssigneeConnection",
                                                        kind: "LinkedField",
                                                        name: "assignedActors",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "AssigneeEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    kind: "InlineDataFragmentSpread",
                                                                                    name: "AssigneePickerSharedAssignee",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        s,
                                                                                                        a,
                                                                                                        i,
                                                                                                        t,
                                                                                                        r,
                                                                                                        o,
                                                                                                        u,
                                                                                                    ],
                                                                                                type: "Actor",
                                                                                                abstractKey:
                                                                                                    "__isActor",
                                                                                            },
                                                                                        ],
                                                                                    args: null,
                                                                                    argumentDefinitions:
                                                                                        [],
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey:
                                                            "assignedActors(first:10)",
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "Repository",
                                                        kind: "LinkedField",
                                                        name: "repository",
                                                        plural: !1,
                                                        selections: [d, c, m],
                                                        storageKey: null,
                                                    },
                                                ],
                                                args: null,
                                                argumentDefinitions: [],
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ApplyAssigneesBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    s,
                                    a,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType:
                                                    "AssigneeConnection",
                                                kind: "LinkedField",
                                                name: "assignedActors",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "AssigneeEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    s,
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                a,
                                                                                i,
                                                                                t,
                                                                                r,
                                                                                o,
                                                                                u,
                                                                            ],
                                                                        type: "Actor",
                                                                        abstractKey:
                                                                            "__isActor",
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [a],
                                                                        type: "Node",
                                                                        abstractKey:
                                                                            "__isNode",
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "assignedActors(first:10)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [d, c, m, a],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "11cb80353a4e6415dfdb24a6212ede8f",
                        metadata: {},
                        name: "ApplyAssigneesBulkActionQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            tk.hash = "7b24a3d9b4d5a3ffef80b3c4da2c65e1";
            let th = (e) => {
                    let l,
                        a,
                        n,
                        s,
                        i,
                        t,
                        r,
                        o,
                        u,
                        d,
                        c,
                        m,
                        g = (0, tc.c)(25);
                    (g[0] !== e
                        ? (({ issueIds: l, ...a } = e),
                          (g[0] = e),
                          (g[1] = l),
                          (g[2] = a))
                        : ((l = g[1]), (a = g[2])),
                        g[3] !== l
                            ? ((n = { ids: l }), (g[3] = l), (g[4] = n))
                            : (n = g[4]),
                        g[5] === Symbol.for("react.memo_cache_sentinel")
                            ? ((s = { fetchPolicy: "store-only" }), (g[5] = s))
                            : (s = g[5]));
                    let { nodes: p } = (0, er.useLazyLoadQuery)(tk, n, s);
                    if (g[6] !== p) {
                        let e = (p || []).filter(Boolean).map(tf),
                            l = e[0];
                        t = l?.repository;
                        let a = new Map(),
                            n = new Map(),
                            s = e.map((e) => {
                                let l = e?.id;
                                return l
                                    ? ((e.assignedActors?.edges || [])
                                          .flatMap(tC)
                                          .map((e) => {
                                              n.set(e.id, e);
                                              let s = a.get(l) || [];
                                              return (
                                                  s.push(e.id),
                                                  a.set(l, s),
                                                  {
                                                      issueId: l,
                                                      assigneeId: e.id,
                                                      assigneeNode: e,
                                                  }
                                              );
                                          }) ?? [])
                                    : [];
                            }),
                            c = {},
                            m = {};
                        for (let e of s)
                            for (let l of e)
                                l.assigneeId in c ||
                                    (s.every((e) =>
                                        e.some(
                                            (e) => e.assigneeId === l.assigneeId
                                        )
                                    )
                                        ? (c[l.assigneeId] = l.assigneeNode)
                                        : (m[l.assigneeId] = l.assigneeNode));
                        ((i = tb),
                            (r = a),
                            (o = [...n.values()]),
                            (u = Object.values(c)),
                            (d = Object.values(m)),
                            (g[6] = p),
                            (g[7] = i),
                            (g[8] = t),
                            (g[9] = r),
                            (g[10] = o),
                            (g[11] = u),
                            (g[12] = d));
                    } else
                        ((i = g[7]),
                            (t = g[8]),
                            (r = g[9]),
                            (o = g[10]),
                            (u = g[11]),
                            (d = g[12]));
                    let k = t?.databaseId ?? null,
                        h = t?.isPrivate ?? !1,
                        b = t?.isArchived ?? !1;
                    return (
                        g[13] !== k || g[14] !== h || g[15] !== b
                            ? ((c = {
                                  databaseId: k,
                                  isPrivate: h,
                                  isArchived: b,
                              }),
                              (g[13] = k),
                              (g[14] = h),
                              (g[15] = b),
                              (g[16] = c))
                            : (c = g[16]),
                        g[17] !== i ||
                        g[18] !== a ||
                        g[19] !== c ||
                        g[20] !== r ||
                        g[21] !== o ||
                        g[22] !== u ||
                        g[23] !== d
                            ? ((m = (0, y.jsx)(i, {
                                  existingIssueAssignees: r,
                                  suggestions: o,
                                  assigneesAppliedToAll: u,
                                  assigneesAppliedToSome: d,
                                  repository: c,
                                  ...a,
                              })),
                              (g[17] = i),
                              (g[18] = a),
                              (g[19] = c),
                              (g[20] = r),
                              (g[21] = o),
                              (g[22] = u),
                              (g[23] = d),
                              (g[24] = m))
                            : (m = g[24]),
                        m
                    );
                },
                tb = (e) => {
                    let l,
                        a,
                        n,
                        s,
                        i,
                        t,
                        r,
                        o,
                        u,
                        d = (0, tc.c)(20);
                    d[0] !== e
                        ? (({
                              issuesToActOn: l,
                              disabled: i,
                              nested: a,
                              singleKeyShortcutsEnabled: s,
                              ...n
                          } = e),
                          (d[0] = e),
                          (d[1] = l),
                          (d[2] = a),
                          (d[3] = n),
                          (d[4] = s),
                          (d[5] = i))
                        : ((l = d[1]),
                          (a = d[2]),
                          (n = d[3]),
                          (s = d[4]),
                          (i = d[5]));
                    let c = void 0 !== i && i,
                        m = (0, b.useRef)(null);
                    d[6] !== l
                        ? ((t = l.reduce(tF, {})), (d[6] = l), (d[7] = t))
                        : (t = d[7]);
                    let g = t;
                    d[8] !== c || d[9] !== a
                        ? ((r = (e) => {
                              var l;
                              let { ref: n, ...s } = e,
                                  i =
                                      ((l = [n, m]),
                                      (e) => {
                                          for (let a of l)
                                              "function" == typeof a
                                                  ? a(e)
                                                  : null != a &&
                                                    (a.current = e);
                                      });
                              return a
                                  ? (0, y.jsxs)(np.l.Item, {
                                        disabled: c,
                                        ...s,
                                        role: "menuitem",
                                        ref: i,
                                        children: [
                                            (0, y.jsx)(np.l.LeadingVisual, {
                                                children: (0, y.jsx)(
                                                    T.PeopleIcon,
                                                    {}
                                                ),
                                            }),
                                            "Assign",
                                        ],
                                    })
                                  : (0, y.jsx)(nn.Q, {
                                        ref: i,
                                        "data-testid":
                                            "bulk-set-assignee-button",
                                        disabled: c,
                                        leadingVisual: T.PeopleIcon,
                                        trailingVisual: T.TriangleDownIcon,
                                        ...s,
                                        children: "Assign",
                                    });
                          }),
                          (d[8] = c),
                          (d[9] = a),
                          (d[10] = r))
                        : (r = d[10]);
                    let p = r;
                    if (
                        (d[11] !== p
                            ? ((o = (e) => p(e)), (d[11] = p), (d[12] = o))
                            : (o = d[12]),
                        d[13] !== g ||
                            d[14] !== l ||
                            d[15] !== a ||
                            d[16] !== n ||
                            d[17] !== s ||
                            d[18] !== o)
                    ) {
                        let e = {
                            issuesToActOn: l,
                            readonly: !1,
                            shortcutEnabled: s,
                            connectionIds: g,
                            anchorElement: o,
                            nested: a,
                            externalReturnFocusRef: m,
                            ...n,
                        };
                        ((u = (0, y.jsx)(lw.mK, { ...e })),
                            (d[13] = g),
                            (d[14] = l),
                            (d[15] = a),
                            (d[16] = n),
                            (d[17] = s),
                            (d[18] = o),
                            (d[19] = u));
                    } else u = d[19];
                    return u;
                };
            try {
                th.displayName || (th.displayName = "ApplyAssigneesBulkAction");
            } catch {}
            try {
                tb.displayName ||
                    (tb.displayName = "ApplyAssigneesActionInternal");
            } catch {}
            function tf(e) {
                return (0, er.readInlineData)(ty, e);
            }
            function tC(e) {
                return e?.node ? [(0, lw.uX)(e.node)] : [];
            }
            function tF(e, l) {
                return (
                    (e[l] = [
                        eG.ConnectionHandler.getConnectionID(
                            l,
                            "IssueAssignees_assignedActors"
                        ),
                        eG.ConnectionHandler.getConnectionID(
                            l,
                            "Assignees_actionAssignees"
                        ),
                    ]),
                    e
                );
            }
            let tS = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    l = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isEnabled",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    o = [
                        a,
                        n,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "dataType",
                            storageKey: null,
                        },
                    ],
                    u = {
                        kind: "InlineFragment",
                        selections: o,
                        type: "IssueFieldText",
                        abstractKey: null,
                    },
                    d = {
                        kind: "InlineFragment",
                        selections: o,
                        type: "IssueFieldSingleSelect",
                        abstractKey: null,
                    },
                    c = {
                        kind: "InlineFragment",
                        selections: o,
                        type: "IssueFieldDate",
                        abstractKey: null,
                    },
                    m = {
                        kind: "InlineFragment",
                        selections: o,
                        type: "IssueFieldNumber",
                        abstractKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ApplyIssueTypeBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            a,
                                            {
                                                alias: "actionIssueType",
                                                args: null,
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        kind: "InlineDataFragmentSpread",
                                                        name: "IssueTypePickerIssueTypeShared",
                                                        selections: [
                                                            a,
                                                            n,
                                                            s,
                                                            i,
                                                            t,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "pinnedFields",
                                                                plural: !0,
                                                                selections: [
                                                                    r,
                                                                    u,
                                                                    d,
                                                                    c,
                                                                    m,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        args: null,
                                                        argumentDefinitions: [],
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ApplyIssueTypeBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    r,
                                    a,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: "actionIssueType",
                                                args: null,
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: [
                                                    a,
                                                    n,
                                                    s,
                                                    i,
                                                    t,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "pinnedFields",
                                                        plural: !0,
                                                        selections: [
                                                            r,
                                                            u,
                                                            d,
                                                            c,
                                                            m,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [a],
                                                                type: "Node",
                                                                abstractKey:
                                                                    "__isNode",
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "1c0b1d8ee3d4a9978b5ded6337bbce85",
                        metadata: {},
                        name: "ApplyIssueTypeBulkActionQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            tS.hash = "5b15b627f9b21002ff36d471fff67f7f";
            let tL = { markAs: "Mark as", setIssueType: "Issue type" },
                tK = (e) => {
                    let l,
                        a,
                        n,
                        s,
                        i,
                        t,
                        r,
                        o,
                        u,
                        d,
                        c = (0, tc.c)(20);
                    (c[0] !== e
                        ? (({
                              issueIds: a,
                              disabled: l,
                              nested: n,
                              singleKeyShortcutsEnabled: i,
                              ...s
                          } = e),
                          (c[0] = e),
                          (c[1] = l),
                          (c[2] = a),
                          (c[3] = n),
                          (c[4] = s),
                          (c[5] = i))
                        : ((l = c[1]),
                          (a = c[2]),
                          (n = c[3]),
                          (s = c[4]),
                          (i = c[5])),
                        c[6] !== a
                            ? ((t = { ids: a }), (c[6] = a), (c[7] = t))
                            : (t = c[7]),
                        c[8] === Symbol.for("react.memo_cache_sentinel")
                            ? ((r = { fetchPolicy: "store-only" }), (c[8] = r))
                            : (r = c[8]));
                    let { nodes: m } = (0, er.useLazyLoadQuery)(tS, t, r);
                    if (c[9] !== m) {
                        let e = (m || []).filter(tv).map(tI);
                        ((o = (1 === new Set(e.map(t_)).size && e[0]) || null),
                            (c[9] = m),
                            (c[10] = o));
                    } else o = c[10];
                    let g = o;
                    c[11] !== l || c[12] !== n
                        ? ((u = (e) =>
                              n
                                  ? (0, y.jsxs)(np.l.Item, {
                                        "data-testid":
                                            "bulk-set-issue-type-button",
                                        disabled: l,
                                        ...e,
                                        role: "menuitem",
                                        children: [
                                            (0, y.jsx)(np.l.LeadingVisual, {
                                                children: (0, y.jsx)(
                                                    T.IssueOpenedIcon,
                                                    {}
                                                ),
                                            }),
                                            tL.setIssueType,
                                        ],
                                    })
                                  : (0, y.jsx)(nn.Q, {
                                        "data-testid":
                                            "bulk-set-issue-type-button",
                                        disabled: l,
                                        leadingVisual: T.IssueOpenedIcon,
                                        trailingVisual: T.TriangleDownIcon,
                                        ...e,
                                        children: tL.setIssueType,
                                    })),
                          (c[11] = l),
                          (c[12] = n),
                          (c[13] = u))
                        : (u = c[13]);
                    let p = u;
                    return (
                        c[14] !== g ||
                        c[15] !== p ||
                        c[16] !== n ||
                        c[17] !== s ||
                        c[18] !== i
                            ? ((d = (0, y.jsx)(lN.$H, {
                                  readonly: !1,
                                  shortcutEnabled: i,
                                  activeIssueType: g,
                                  anchorElement: p,
                                  nested: n,
                                  ...s,
                              })),
                              (c[14] = g),
                              (c[15] = p),
                              (c[16] = n),
                              (c[17] = s),
                              (c[18] = i),
                              (c[19] = d))
                            : (d = c[19]),
                        d
                    );
                };
            try {
                tK.displayName || (tK.displayName = "ApplyIssueTypeBulkAction");
            } catch {}
            function tv(e) {
                return !!e;
            }
            function tI(e) {
                return e && e.actionIssueType
                    ? (0, lN.iO)(e.actionIssueType)
                    : null;
            }
            function t_(e) {
                return e?.id;
            }
            let tx = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    l = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = [
                        { kind: "Literal", name: "first", value: 20 },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    s = [
                        a,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameHTML",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ApplyLabelsBulkActionLabelQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType: "LabelConnection",
                                                kind: "LinkedField",
                                                name: "labels",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "LabelEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Label",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        kind: "InlineDataFragmentSpread",
                                                                        name: "LabelPickerLabel",
                                                                        selections:
                                                                            s,
                                                                        args: null,
                                                                        argumentDefinitions:
                                                                            [],
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ApplyLabelsBulkActionLabelQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    a,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType: "LabelConnection",
                                                kind: "LinkedField",
                                                name: "labels",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "LabelEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Label",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: s,
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "02815c0f1c7f68d3a5e520b675a5492b",
                        metadata: {},
                        name: "ApplyLabelsBulkActionLabelQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            tx.hash = "44889de9ad73a14e365e1011f491f2bf";
            let tw = (e) => {
                    let l,
                        a,
                        n,
                        s,
                        i,
                        t,
                        r,
                        o,
                        u = (0, tc.c)(15);
                    (u[0] !== e
                        ? (({ issueIds: l, ...a } = e),
                          (u[0] = e),
                          (u[1] = l),
                          (u[2] = a))
                        : ((l = u[1]), (a = u[2])),
                        u[3] !== l
                            ? ((n = { ids: l }), (u[3] = l), (u[4] = n))
                            : (n = u[4]),
                        u[5] === Symbol.for("react.memo_cache_sentinel")
                            ? ((s = { fetchPolicy: "store-or-network" }),
                              (u[5] = s))
                            : (s = u[5]));
                    let { nodes: d } = (0, er.useLazyLoadQuery)(tx, n, s);
                    if (u[6] !== d) {
                        i = new Map();
                        let e = (d || []).map((e) => {
                            let l = e?.id;
                            return l
                                ? ((e.labels?.edges || [])
                                      .flatMap(tj)
                                      .map((e) => {
                                          let a = i.get(l) || [];
                                          return (
                                              a.push(e.id),
                                              i.set(l, a),
                                              {
                                                  issueId: l,
                                                  labelName: e.name,
                                                  labelNode: e,
                                              }
                                          );
                                      }) ?? [])
                                : [];
                        });
                        for (let l of ((t = {}), e))
                            for (let a of l) {
                                let l = a.labelName.toLowerCase();
                                l in t ||
                                    (e.every((e) =>
                                        e.some(
                                            (e) =>
                                                e.labelName.toLowerCase() === l
                                        )
                                    ) &&
                                        (t[l] = a.labelNode));
                            }
                        ((u[6] = d), (u[7] = i), (u[8] = t));
                    } else ((i = u[7]), (t = u[8]));
                    return (
                        u[9] !== t
                            ? ((r = Object.values(t)), (u[9] = t), (u[10] = r))
                            : (r = u[10]),
                        u[11] !== i || u[12] !== a || u[13] !== r
                            ? ((o = (0, y.jsx)(tN, {
                                  existingIssueLabels: i,
                                  labelAppliedToAll: r,
                                  ...a,
                              })),
                              (u[11] = i),
                              (u[12] = a),
                              (u[13] = r),
                              (u[14] = o))
                            : (o = u[14]),
                        o
                    );
                },
                tN = (e) => {
                    let l,
                        a,
                        n,
                        s,
                        i,
                        t,
                        r,
                        o,
                        u,
                        d = (0, tc.c)(20);
                    d[0] !== e
                        ? (({
                              issuesToActOn: l,
                              disabled: s,
                              nested: i,
                              singleKeyShortcutsEnabled: n,
                              ...a
                          } = e),
                          (d[0] = e),
                          (d[1] = l),
                          (d[2] = a),
                          (d[3] = n),
                          (d[4] = s),
                          (d[5] = i))
                        : ((l = d[1]),
                          (a = d[2]),
                          (n = d[3]),
                          (s = d[4]),
                          (i = d[5]));
                    let c = void 0 !== s && s,
                        m = void 0 !== i && i;
                    d[6] !== l
                        ? ((t = l.reduce(tR, {})), (d[6] = l), (d[7] = t))
                        : (t = d[7]);
                    let g = t;
                    d[8] !== c || d[9] !== m
                        ? ((r = (e) =>
                              m
                                  ? (0, y.jsxs)(np.l.Item, {
                                        disabled: c,
                                        ...e,
                                        role: "menuitem",
                                        children: [
                                            (0, y.jsx)(np.l.LeadingVisual, {
                                                children: (0, y.jsx)(
                                                    T.TagIcon,
                                                    {}
                                                ),
                                            }),
                                            "Label",
                                        ],
                                    })
                                  : (0, y.jsx)(nn.Q, {
                                        "data-testid": "bulk-set-label-button",
                                        disabled: c,
                                        leadingVisual: T.TagIcon,
                                        trailingVisual: T.TriangleDownIcon,
                                        ...e,
                                        children: "Label",
                                    })),
                          (d[8] = c),
                          (d[9] = m),
                          (d[10] = r))
                        : (r = d[10]);
                    let p = r;
                    return (
                        d[11] !== p
                            ? ((o = (e) => p(e)), (d[11] = p), (d[12] = o))
                            : (o = d[12]),
                        d[13] !== g ||
                        d[14] !== l ||
                        d[15] !== m ||
                        d[16] !== a ||
                        d[17] !== n ||
                        d[18] !== o
                            ? ((u = (0, y.jsx)(lj.CH, {
                                  issuesToActOn: l,
                                  readonly: !1,
                                  canCreateLabel: !1,
                                  shortcutEnabled: n,
                                  connectionIds: g,
                                  anchorElement: o,
                                  nested: m,
                                  ...a,
                              })),
                              (d[13] = g),
                              (d[14] = l),
                              (d[15] = m),
                              (d[16] = a),
                              (d[17] = n),
                              (d[18] = o),
                              (d[19] = u))
                            : (u = d[19]),
                        u
                    );
                };
            try {
                tw.displayName || (tw.displayName = "ApplyLabelsBulkAction");
            } catch {}
            try {
                tN.displayName ||
                    (tN.displayName = "ApplyLabelsActionInternal");
            } catch {}
            function tj(e) {
                return e?.node ? [(0, lj.P5)(e.node)] : [];
            }
            function tR(e, l) {
                return (
                    (e[l] = [
                        eG.ConnectionHandler.getConnectionID(
                            l,
                            "Labels_labels",
                            { orderBy: { direction: "ASC", field: "NAME" } }
                        ),
                    ]),
                    e
                );
            }
            let tP = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    l = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        concreteType: "Milestone",
                        kind: "LinkedField",
                        name: "milestone",
                        plural: !1,
                        selections: [
                            a,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "title",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "closed",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "dueOn",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "progressPercentage",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "url",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "closedAt",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ApplyMilestoneBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [a, n],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ApplyMilestoneBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    a,
                                    {
                                        kind: "InlineFragment",
                                        selections: [n],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "1e9f62e18d3b4c6e916bf7d517f40605",
                        metadata: {},
                        name: "ApplyMilestoneBulkActionQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            tP.hash = "b281b4aca4cad0a9ce3acf8a02d6a374";
            var tT = a(49275),
                tA = a(14182);
            let tM = (e) => {
                let l,
                    a,
                    n,
                    s,
                    i,
                    t,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g = (0, tc.c)(22);
                (g[0] !== e
                    ? (({
                          issueIds: a,
                          disabled: l,
                          nested: n,
                          singleKeyShortcutsEnabled: i,
                          ...s
                      } = e),
                      (g[0] = e),
                      (g[1] = l),
                      (g[2] = a),
                      (g[3] = n),
                      (g[4] = s),
                      (g[5] = i))
                    : ((l = g[1]),
                      (a = g[2]),
                      (n = g[3]),
                      (s = g[4]),
                      (i = g[5])),
                    g[6] !== a
                        ? ((t = { ids: a }), (g[6] = a), (g[7] = t))
                        : (t = g[7]),
                    g[8] === Symbol.for("react.memo_cache_sentinel")
                        ? ((r = { fetchPolicy: "store-or-network" }),
                          (g[8] = r))
                        : (r = g[8]));
                let { nodes: p } = (0, er.useLazyLoadQuery)(tP, t, r);
                if (g[9] !== p) {
                    let e = (p || []).map(tV) ?? [];
                    ((o =
                        (e.length > 0 &&
                            e.every((l) => l?.id === e[0]?.id) &&
                            e[0]) ||
                        null),
                        (g[9] = p),
                        (g[10] = o));
                } else o = g[10];
                let k = o;
                g[11] !== l || g[12] !== n
                    ? ((u = (e) =>
                          n
                              ? (0, y.jsxs)(np.l.Item, {
                                    disabled: l,
                                    ...e,
                                    role: "menuitem",
                                    children: [
                                        (0, y.jsx)(np.l.LeadingVisual, {
                                            children: (0, y.jsx)(
                                                T.MilestoneIcon,
                                                {}
                                            ),
                                        }),
                                        "Milestone",
                                    ],
                                })
                              : (0, y.jsx)(nn.Q, {
                                    "data-testid": "bulk-set-milestone-button",
                                    disabled: l,
                                    leadingVisual: T.MilestoneIcon,
                                    trailingVisual: T.TriangleDownIcon,
                                    ...e,
                                    children: "Milestone",
                                })),
                      (g[11] = l),
                      (g[12] = n),
                      (g[13] = u))
                    : (u = g[13]);
                let h = u;
                (g[14] === Symbol.for("react.memo_cache_sentinel")
                    ? ((d = (0, y.jsx)(im.JR, {
                          html: tT.v.noMilestoneData.title,
                      })),
                      (g[14] = d))
                    : (d = g[14]),
                    g[15] === Symbol.for("react.memo_cache_sentinel")
                        ? ((c = {
                              id: tT.v.noMilestoneData.id,
                              description: "",
                              descriptionVariant: "inline",
                              children: d,
                              source: tT.v.noMilestoneData,
                              groupId: "",
                              leadingVisual: tD,
                          }),
                          (g[15] = c))
                        : (c = g[15]));
                let b = c;
                return (
                    g[16] !== k ||
                    g[17] !== h ||
                    g[18] !== n ||
                    g[19] !== s ||
                    g[20] !== i
                        ? ((m = (0, y.jsx)(tA.C2, {
                              readonly: !1,
                              shortcutEnabled: i,
                              activeMilestone: k,
                              anchorElement: h,
                              nested: n,
                              noMilestoneItem: b,
                              canCreateMilestone: !1,
                              ...s,
                          })),
                          (g[16] = k),
                          (g[17] = h),
                          (g[18] = n),
                          (g[19] = s),
                          (g[20] = i),
                          (g[21] = m))
                        : (m = g[21]),
                    m
                );
            };
            try {
                tM.displayName || (tM.displayName = "ApplyMilestoneBulkAction");
            } catch {}
            function tV(e) {
                return e?.id && e.milestone ? e.milestone : null;
            }
            function tD() {
                return (0, y.jsx)(T.MilestoneIcon, {});
            }
            let tE = {
                    issueIcons: {
                        OPEN: {
                            color: "open.fg",
                            icon: T.IssueOpenedIcon,
                            description: "Open issue",
                        },
                        CLOSED: {
                            color: "done.fg",
                            icon: T.IssueClosedIcon,
                            description: "Closed issue (completed)",
                        },
                        NOT_PLANNED: {
                            color: "fg.muted",
                            icon: T.SkipIcon,
                            description: "Closed issue (not planned)",
                        },
                    },
                },
                tq = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "input",
                            },
                        ],
                        l = [
                            {
                                alias: null,
                                args: [
                                    {
                                        kind: "Variable",
                                        name: "input",
                                        variableName: "input",
                                    },
                                ],
                                concreteType: "UpdateIssuesBulkPayload",
                                kind: "LinkedField",
                                name: "updateIssuesBulk",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "jobId",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ];
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "updateIssuesBulkActionsMutation",
                            selections: l,
                            type: "Mutation",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "updateIssuesBulkActionsMutation",
                            selections: l,
                        },
                        params: {
                            id: "dfb2a4b140aa897b294cc6d1a17dbeae",
                            metadata: {},
                            name: "updateIssuesBulkActionsMutation",
                            operationKind: "mutation",
                            text: null,
                        },
                    };
                })();
            function tO(e, l, a) {
                for (let n of l) {
                    let l = e.get(n);
                    if (l)
                        for (let [e, n] of Object.entries(a)) l.setValue(n, e);
                }
            }
            tq.hash = "2187d2996ee91c8c84510d55982245d5";
            let tB = [
                    {
                        name: "Open",
                        icon: tE.issueIcons.OPEN.icon,
                        value: { state: "OPEN" },
                    },
                    {
                        name: "Completed",
                        icon: tE.issueIcons.CLOSED.icon,
                        value: { state: "CLOSED", stateReason: "COMPLETED" },
                    },
                    {
                        name: "Not planned",
                        icon: tE.issueIcons.NOT_PLANNED.icon,
                        value: { state: "CLOSED", stateReason: "NOT_PLANNED" },
                    },
                ],
                t$ = (e) => {
                    let l,
                        a,
                        n,
                        s,
                        i,
                        t,
                        r,
                        o,
                        u,
                        d,
                        c,
                        m,
                        g,
                        p,
                        k,
                        h = (0, tc.c)(29),
                        {
                            issuesToActOn: f,
                            disabled: C,
                            onCompleted: F,
                            onError: S,
                            nested: L,
                        } = e,
                        K = (0, er.useRelayEnvironment)(),
                        [v, I] = (0, b.useState)(!1);
                    h[0] === Symbol.for("react.memo_cache_sentinel")
                        ? ((l = (e) => {
                              I(e);
                          }),
                          (h[0] = l))
                        : (l = h[0]);
                    let _ = l;
                    (h[1] === Symbol.for("react.memo_cache_sentinel")
                        ? ((a = ["e"]),
                          (n = () => _(!0)),
                          (s = {
                              triggerWhenInputElementHasFocus: !1,
                              triggerWhenPortalIsActive: !1,
                          }),
                          (h[1] = a),
                          (h[2] = n),
                          (h[3] = s))
                        : ((a = h[1]), (n = h[2]), (s = h[3])),
                        (0, ay._)(a, n, s),
                        h[4] === Symbol.for("react.memo_cache_sentinel")
                            ? ((i = ["Escape"]),
                              (t = () => _(!1)),
                              (r = {}),
                              (h[4] = i),
                              (h[5] = t),
                              (h[6] = r))
                            : ((i = h[4]), (t = h[5]), (r = h[6])),
                        (0, ay._)(i, t, r),
                        h[7] !== f || h[8] !== F || h[9] !== S || h[10] !== K
                            ? ((o = (e) => {
                                  !(function ({
                                      environment: e,
                                      optimisticUpdateIds: l,
                                      input: {
                                          ids: a,
                                          state: n,
                                          stateReason: s,
                                      },
                                      onCompleted: i,
                                      onError: t,
                                  }) {
                                      let r = { state: n, stateReason: s },
                                          o = { ids: a, ...r };
                                      (0, er.commitMutation)(e, {
                                          mutation: tq,
                                          variables: { input: o },
                                          updater: (e) => tO(e, l, r),
                                          optimisticUpdater: (e) => tO(e, l, r),
                                          onCompleted: (e) => i && i(e),
                                          onError: (e) => t && t(e),
                                      });
                                  })({
                                      environment: K,
                                      optimisticUpdateIds: f,
                                      input: { ids: [...f], ...e },
                                      onCompleted: (e) => {
                                          let { updateIssuesBulk: l } = e;
                                          F?.(l?.jobId || void 0);
                                      },
                                      onError: (e) => {
                                          S?.(e);
                                      },
                                  });
                              }),
                              (h[7] = f),
                              (h[8] = F),
                              (h[9] = S),
                              (h[10] = K),
                              (h[11] = o))
                            : (o = h[11]));
                    let x = o;
                    (h[12] !== x
                        ? ((u = tB.map((e, l) =>
                              (0, y.jsxs)(
                                  np.l.Item,
                                  {
                                      onSelect: () => x(e.value),
                                      children: [
                                          (0, y.jsx)(np.l.LeadingVisual, {
                                              children: (0, y.jsx)(e.icon, {}),
                                          }),
                                          e.name,
                                      ],
                                  },
                                  l
                              )
                          )),
                          (h[12] = x),
                          (h[13] = u))
                        : (u = h[13]),
                        h[14] !== u
                            ? ((d = (0, y.jsx)(y.Fragment, { children: u })),
                              (h[14] = u),
                              (h[15] = d))
                            : (d = h[15]));
                    let w = d;
                    if (void 0 !== L && L) {
                        let e, l;
                        return (
                            h[16] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = (0, y.jsx)(i3.W.Anchor, {
                                      children: (0, y.jsxs)(np.l.Item, {
                                          children: [
                                              (0, y.jsx)(np.l.LeadingVisual, {
                                                  children: (0, y.jsx)(
                                                      tE.issueIcons.CLOSED.icon,
                                                      {}
                                                  ),
                                              }),
                                              "Mark as",
                                          ],
                                      }),
                                  })),
                                  (h[16] = e))
                                : (e = h[16]),
                            h[17] !== w
                                ? ((l = (0, y.jsxs)(i3.W, {
                                      children: [
                                          e,
                                          (0, y.jsx)(i3.W.Overlay, {
                                              children: (0, y.jsx)(np.l, {
                                                  children: w,
                                              }),
                                          }),
                                      ],
                                  })),
                                  (h[17] = w),
                                  (h[18] = l))
                                : (l = h[18]),
                            l
                        );
                    }
                    return (
                        h[19] === Symbol.for("react.memo_cache_sentinel")
                            ? ((c = (0, n2.G)("mark-as-action-menu-button")),
                              (h[19] = c))
                            : (c = h[19]),
                        h[20] !== C
                            ? ((m = (0, y.jsx)(i3.W.Anchor, {
                                  children: (0, y.jsx)(nn.Q, {
                                      disabled: C,
                                      leadingVisual: tE.issueIcons.CLOSED.icon,
                                      trailingVisual: T.TriangleDownIcon,
                                      ...c,
                                      children: tL.markAs,
                                  }),
                              })),
                              (h[20] = C),
                              (h[21] = m))
                            : (m = h[21]),
                        h[22] === Symbol.for("react.memo_cache_sentinel")
                            ? ((g = (0, n2.G)("mark-as-action-menu-list")),
                              (h[22] = g))
                            : (g = h[22]),
                        h[23] !== w
                            ? ((p = (0, y.jsx)(i3.W.Overlay, {
                                  children: (0, y.jsx)(np.l, {
                                      ...g,
                                      children: w,
                                  }),
                              })),
                              (h[23] = w),
                              (h[24] = p))
                            : (p = h[24]),
                        h[25] !== v || h[26] !== m || h[27] !== p
                            ? ((k = (0, y.jsxs)(i3.W, {
                                  open: v,
                                  onOpenChange: _,
                                  children: [m, p],
                              })),
                              (h[25] = v),
                              (h[26] = m),
                              (h[27] = p),
                              (h[28] = k))
                            : (k = h[28]),
                        k
                    );
                };
            try {
                t$.displayName || (t$.displayName = "BulkMarkAs");
            } catch {}
            var tQ = a(63350),
                tU = a(53687);
            function tz(e, l, { container: a = document.body } = {}) {
                if (!e && a.querySelector("[data-overflow-menu-overlay]"))
                    for (let e of Array.from(
                        a.querySelectorAll('[role="dialog"]')
                    )) {
                        let { width: l, height: a } = e.getBoundingClientRect();
                        if (e.hasAttribute("data-visibility-visible") || l || a)
                            return;
                    }
                l(e);
            }
            function tH() {
                let e = (0, b.useCallback)(
                        (e, l, a) =>
                            e
                                ? (0, y.jsxs)(np.l.Item, {
                                      disabled: !0,
                                      children: [
                                          (0, y.jsx)(np.l.LeadingVisual, {
                                              children: (0, y.jsx)(l, {}),
                                          }),
                                          a,
                                          (0, y.jsx)(np.l.TrailingVisual, {
                                              children: (0, y.jsx)(
                                                  T.TriangleDownIcon,
                                                  {}
                                              ),
                                          }),
                                      ],
                                  })
                                : (0, y.jsx)(nn.Q, {
                                      disabled: !0,
                                      leadingVisual: l,
                                      trailingVisual: T.TriangleDownIcon,
                                      children: a,
                                  }),
                        []
                    ),
                    l = (0, b.useMemo)(
                        () => [
                            {
                                key: "mark-as",
                                render: (l) =>
                                    e(l, E.issueIcons.CLOSED.icon, "Mark as"),
                            },
                            {
                                key: "apply-labels",
                                render: (l) => e(l, T.TagIcon, "Label"),
                            },
                            {
                                key: "apply-assignees",
                                render: (l) => e(l, T.PeopleIcon, "Assign"),
                            },
                            {
                                key: "add-to-projects",
                                render: (l) =>
                                    e(l, T.ProjectSymlinkIcon, "Project"),
                            },
                            {
                                key: "apply-milestone",
                                render: (l) =>
                                    e(l, T.MilestoneIcon, "Milestone"),
                            },
                            {
                                key: "apply-issue-type",
                                render: (l) =>
                                    e(l, T.IssueOpenedIcon, ns.setIssueType),
                            },
                        ],
                        [e]
                    );
                return (0, y.jsx)(tQ.X, {
                    onToggleSelectAll: K.l,
                    actionsLabel: U.bulkActions,
                    actions: l,
                    density: "normal",
                });
            }
            function tW({
                checkedItems: e,
                issueNodes: l,
                setCheckedItems: a,
                useBulkActions: n,
                listHasPRs: s,
                isInOrganization: i,
            }) {
                let { scoped_repository: t, current_user_settings: r } = (0,
                    v.X)(),
                    { addToast: o, addPersistedToast: u } = (0, _.Y6)(),
                    { setBulkJobId: d, bulkJobId: c } = eV(),
                    m = Array.from(e.values())
                        .filter((e) => null != e)
                        .filter((e) => "Issue" === e.__typename),
                    [g, p] = (0, b.useState)(null !== c),
                    { activeSearchQuery: k, isQueryLoading: h } = eM(),
                    { setMultiPageSelectionAllowed: f } = (0, tU.P)(),
                    C = (0, b.useCallback)(
                        (e) => {
                            (p(!1),
                                e &&
                                    (u({
                                        type: "info",
                                        message: U.updatingIssues,
                                        icon: (0, y.jsx)(T.RocketIcon, {}),
                                        role: "status",
                                    }),
                                    d(e)));
                        },
                        [u, d]
                    ),
                    F = (0, b.useCallback)(
                        (e) => {
                            (p(!1),
                                o({
                                    type: "error",
                                    message: `Could not update issues: ${e.message}`,
                                }));
                        },
                        [o]
                    ),
                    [S, L] = (0, b.useState)(!1),
                    K = (0, b.useMemo)(
                        () => ({
                            onCompleted: C,
                            onError: F,
                            disabled: g,
                            issuesToActOn: S
                                ? l.filter((e) => null != e).map((e) => e.id)
                                : m.filter((e) => null != e).map((e) => e.id),
                            query: k,
                            singleKeyShortcutsEnabled:
                                r?.use_single_key_shortcut || !1,
                        }),
                        [S, C, F, g, l, m, k, r?.use_single_key_shortcut]
                    ),
                    { setSelectedCount: I } = (0, tu.v)(),
                    x = (0, b.useCallback)(
                        (e) => {
                            e
                                ? a(
                                      l
                                          .filter((e) => null != e)
                                          .reduce(
                                              (e, l) => e.set(l.id, l),
                                              new Map()
                                          )
                                  )
                                : (a(new Map()), S && (L(!1), I(0), f?.(!1)));
                        },
                        [l, a, f, I, S]
                    ),
                    w = t && n && !s,
                    N = (0, b.useMemo)(
                        () => ({
                            owner: t?.owner ?? "",
                            repositoryName: t?.name ?? "",
                        }),
                        [t?.name, t?.owner]
                    ),
                    [j, R] = (0, b.useState)(void 0),
                    P = (0, b.useMemo)(
                        () => ({ open: j, onOpenChange: (e) => tz(e, R) }),
                        [j]
                    ),
                    A = (0, b.useMemo)(() => {
                        if (!w) return;
                        let e = m.map((e) => e.id),
                            l = m.map((e) => e.number),
                            a = [
                                {
                                    key: "mark-as",
                                    render: (e) =>
                                        (0, y.jsx)(t$, { ...K, nested: e }),
                                },
                                {
                                    key: "apply-labels",
                                    render: (l) =>
                                        (0, y.jsx)(tw, {
                                            owner: t.owner,
                                            repo: t.name,
                                            nested: l,
                                            issueIds: e,
                                            ...K,
                                        }),
                                },
                                {
                                    key: "apply-assignees",
                                    render: (a) =>
                                        (0, y.jsx)(th, {
                                            nested: a,
                                            issueIds: e,
                                            issueNumbers: l,
                                            ...K,
                                            owner: t?.owner,
                                            repo: t?.name,
                                        }),
                                },
                                {
                                    key: "add-to-projects",
                                    render: (e) =>
                                        (0, y.jsx)(tm, {
                                            nested: e,
                                            issueIds: m.map((e) => e.id),
                                            owner: t?.owner,
                                            repo: t?.name,
                                            ...K,
                                        }),
                                },
                                {
                                    key: "apply-milestone",
                                    render: (e) =>
                                        (0, y.jsx)(tM, {
                                            owner: t.owner,
                                            repo: t.name,
                                            nested: e,
                                            issueIds: m.map((e) => e.id),
                                            ...K,
                                        }),
                                },
                            ];
                        return (
                            i &&
                                a.push({
                                    key: "apply-issue-type",
                                    render: (l) =>
                                        (0, y.jsx)(la.y, {
                                            appName: "issue_types",
                                            category: "issues_index",
                                            metadata: N,
                                            children: (0, y.jsx)(tK, {
                                                owner: t.owner,
                                                repo: t.name,
                                                nested: l,
                                                issueIds: e,
                                                ...K,
                                            }),
                                        }),
                                }),
                            a
                        );
                    }, [w, K, t?.owner, t?.name, i, m, N]);
                return (0, y.jsx)(b.Suspense, {
                    fallback: (0, y.jsx)(tH, {}),
                    children: (0, y.jsx)(tQ.X, {
                        onToggleSelectAll: x,
                        actionsLabel: U.bulkActions,
                        actions: A,
                        density: "normal",
                        assistiveAnnouncement: h
                            ? U.loadingQueryResults
                            : void 0,
                        overflowMenuProps: P,
                    }),
                });
            }
            try {
                tH.displayName ||
                    (tH.displayName = "ListItemsHeaderBulkFallback");
            } catch {}
            try {
                tW.displayName ||
                    (tW.displayName = "ListItemsHeaderWithBulkActions");
            } catch {}
            var tG = a(69726),
                tZ = a(33987);
            let tX = {
                assigneeFilterButton:
                    "ListAssigneeFilter-module__assigneeFilterButton--Fh2n7",
            };
            function tJ({ repo: e, applySectionFilter: l, nested: a }) {
                let { name: n, owner: s } = e,
                    { activeSearchQuery: i, currentViewId: t } = eM(),
                    { debouncedDirtySearchQuery: r } = eV(),
                    { current_user_settings: o } = (0, v.X)(),
                    u = r ?? i,
                    d = (0, b.useMemo)(() => ex(u, "assignee").slice(-1), [u]),
                    c = (0, b.useMemo)(
                        () => ({
                            id: tT.v.noAssigneeData.id,
                            description: "",
                            descriptionVariant: "inline",
                            children: (0, y.jsx)(im.JR, {
                                html: tT.v.noAssigneeData.login,
                            }),
                            source: tT.v.noAssigneeData,
                            selected: u.includes("no:assignee"),
                            leadingVisual: () => (0, y.jsx)(T.PersonIcon, {}),
                        }),
                        [u]
                    ),
                    m = (0, b.useCallback)(
                        (e) => {
                            let a = eN(
                                    u,
                                    e.map((e) =>
                                        e.id === tT.v.noAssigneeData.id
                                            ? "no:assignee"
                                            : (0, tZ.i)(e)
                                    ),
                                    "assignee"
                                ),
                                n = ar({ viewId: t, query: a });
                            l(a, n);
                        },
                        [u, l, t]
                    ),
                    g = {
                        readonly: !1,
                        title: U.filters.assigneesLabel,
                        assigneeTokens: d,
                        assignees: [],
                        repo: n,
                        owner: s,
                        onSelectionChange: m,
                        shortcutEnabled: o?.use_single_key_shortcut || !1,
                        noAssigneeOption: c,
                        anchorElement: a ? tY : t1,
                        showNoMatchItem: !0,
                    };
                return (0, y.jsx)(lw._g, {
                    ...g,
                    name: "assignee",
                    selectionVariant: "single",
                    includeAuthorableBots: !1,
                    includeAssignableBots: !0,
                });
            }
            function tY(e) {
                return (0, y.jsxs)(np.l.Item, {
                    ...e,
                    "aria-label": U.filters.assigneesLabel,
                    role: "menuitem",
                    children: [
                        (0, y.jsx)(np.l.LeadingVisual, {
                            children: (0, y.jsx)(T.MentionIcon, {}),
                        }),
                        U.filters.assignees,
                        "...",
                    ],
                });
            }
            function t1(e) {
                return (0, y.jsx)(nn.Q, {
                    variant: "invisible",
                    "data-testid": "assignees-anchor-button",
                    trailingVisual: T.TriangleDownIcon,
                    "aria-label": U.filters.assigneesLabel,
                    className: tX.assigneeFilterButton,
                    ...e,
                    children: U.filters.assignees,
                });
            }
            try {
                tJ.displayName || (tJ.displayName = "ListAssigneeFilter");
            } catch {}
            try {
                tY.displayName || (tY.displayName = "NestedAssigneesAnchor");
            } catch {}
            try {
                t1.displayName || (t1.displayName = "AssigneesAnchor");
            } catch {}
            let t2 = {
                authorFilterButton:
                    "ListAuthorFilter-module__authorFilterButton--ktiSA",
            };
            function t0({ repo: e, applySectionFilter: l, nested: a }) {
                let { name: n, owner: s } = e,
                    { activeSearchQuery: i, currentViewId: t } = eM(),
                    { debouncedDirtySearchQuery: r } = eV(),
                    { current_user_settings: o } = (0, v.X)(),
                    u = (0, k.G7)("issues_react_include_bots_in_pickers"),
                    d = r ?? i,
                    c = (0, b.useMemo)(() => ex(d, "author"), [d]),
                    m = (0, b.useCallback)(
                        (e) => {
                            let a = ej(d, e.map(tZ.i), "author"),
                                n = ar({ viewId: t, query: a });
                            l(a, n);
                        },
                        [d, l, t]
                    ),
                    g = {
                        readonly: !1,
                        title: U.filters.authorLabel,
                        assigneeTokens: c,
                        assignees: [],
                        repo: n,
                        owner: s,
                        onSelectionChange: m,
                        shortcutEnabled: o?.use_single_key_shortcut || !1,
                        anchorElement: a ? t3 : t4,
                        showNoMatchItem: !0,
                    };
                return (0, y.jsx)(lw._g, {
                    name: "author",
                    selectionVariant: "single",
                    ...g,
                    includeAuthorableBots: u,
                    includeAssignableBots: !1,
                });
            }
            function t3(e) {
                return (0, y.jsxs)(np.l.Item, {
                    ...e,
                    "aria-label": U.filters.authorLabel,
                    role: "menuitem",
                    children: [
                        (0, y.jsx)(np.l.LeadingVisual, {
                            children: (0, y.jsx)(T.PersonIcon, {}),
                        }),
                        U.filters.author,
                        "...",
                    ],
                });
            }
            function t4(e) {
                return (0, y.jsx)(nn.Q, {
                    variant: "invisible",
                    "data-testid": "authors-anchor-button",
                    trailingVisual: T.TriangleDownIcon,
                    "aria-label": U.filters.authorLabel,
                    className: t2.authorFilterButton,
                    ...e,
                    children: U.filters.author,
                });
            }
            try {
                t0.displayName || (t0.displayName = "ListAuthorFilter");
            } catch {}
            try {
                t3.displayName || (t3.displayName = "NestedAuthorsAnchor");
            } catch {}
            try {
                t4.displayName || (t4.displayName = "AuthorsAnchor");
            } catch {}
            let t5 = {
                issueTypeFilterButton:
                    "ListIssueTypeFilter-module__issueTypeFilterButton--TUlC2",
            };
            function t7({ repo: e, applySectionFilter: l, nested: a }) {
                let { name: n, owner: s } = e,
                    { activeSearchQuery: i, currentViewId: t } = eM(),
                    { debouncedDirtySearchQuery: r } = eV(),
                    { current_user_settings: o } = (0, v.X)(),
                    u = r ?? i,
                    d = (0, b.useMemo)(() => t8(u), [u]),
                    c = (0, b.useCallback)(
                        (e) => {
                            let a = eN(
                                    u,
                                    e?.map((e) =>
                                        e.id === tT.v.noTypeData.id
                                            ? "no:type"
                                            : e.name
                                    ) || [],
                                    "type"
                                ),
                                n = ar({ viewId: t, query: a });
                            l(a, n);
                        },
                        [u, l, t]
                    ),
                    m = (0, b.useMemo)(() => ex(u, "type").at(-1), [u]);
                return (0, y.jsx)(lN.uF, {
                    title: U.filters.issueTypeLabel,
                    repo: n,
                    owner: s,
                    readonly: !1,
                    activeIssueType: null,
                    issueTypeToken: m,
                    onSelectionChange: c,
                    shortcutEnabled: o?.use_single_key_shortcut || !1,
                    anchorElement: a ? t6 : t9,
                    width: "medium",
                    noTypeItem: d,
                });
            }
            function t6(e) {
                return (0, y.jsxs)(np.l.Item, {
                    ...e,
                    "aria-label": U.filters.issueTypeLabel,
                    role: "menuitem",
                    children: [
                        (0, y.jsx)(np.l.LeadingVisual, {
                            children: (0, y.jsx)(T.IssueOpenedIcon, {}),
                        }),
                        U.filters.issueType,
                        "...",
                    ],
                });
            }
            function t9(e) {
                return (0, y.jsx)(nn.Q, {
                    variant: "invisible",
                    "data-testid": nD.issueTypeAnchorFilter,
                    trailingVisual: T.TriangleDownIcon,
                    "aria-label": U.filters.issueTypeLabel,
                    className: t5.issueTypeFilterButton,
                    ...e,
                    children: U.filters.issueType,
                });
            }
            let t8 = (e) => ({
                id: tT.v.noTypeData.id,
                description: "",
                descriptionVariant: "inline",
                children: (0, y.jsx)(im.JR, { html: tT.v.noTypeData.name }),
                source: tT.v.noTypeData,
                groupId: "",
                selected: e.includes("no:type"),
            });
            try {
                t7.displayName || (t7.displayName = "ListIssueTypeFilter");
            } catch {}
            try {
                (s = NoIssueTypeItem).displayName ||
                    (s.displayName = "NoIssueTypeItem");
            } catch {}
            try {
                t6.displayName || (t6.displayName = "NestedIssueTypeAnchor");
            } catch {}
            try {
                t9.displayName || (t9.displayName = "IssueTypeAnchor");
            } catch {}
            let re = {
                    ListViewMetadata_0:
                        "ListItemsHeaderWithoutBulkActions-module__ListViewMetadata_0--oA0Cm",
                },
                rl = {
                    labelColorIndicator:
                        "ListLabelFilter-module__labelColorIndicator--fdoSZ",
                    labelFilterButton:
                        "ListLabelFilter-module__labelFilterButton--zPHv9",
                };
            function ra({ nested: e, repo: l, applySectionFilter: a }) {
                let { activeSearchQuery: n, currentViewId: s } = eM(),
                    { debouncedDirtySearchQuery: i } = eV(),
                    { current_user_settings: t } = (0, v.X)(),
                    r = i ?? n,
                    o = (0, b.useMemo)(
                        () => ({
                            id: tT.v.noLabelsData.id,
                            description: "",
                            descriptionVariant: "inline",
                            children: (0, y.jsx)(im.JR, {
                                html: tT.v.noLabelsData.name,
                                title: tT.v.noLabelsData.description,
                            }),
                            source: tT.v.noLabelsData,
                            selected: r.includes("no:label"),
                            groupId: "",
                            leadingVisual: () =>
                                (0, y.jsx)(le.az, {
                                    sx: {
                                        bg: "transparent",
                                        borderColor: "border.muted",
                                    },
                                    className: rl.labelColorIndicator,
                                }),
                        }),
                        [r]
                    ),
                    u = (0, b.useCallback)(
                        (e) => {
                            let l = eN(
                                    r,
                                    e.map((e) =>
                                        e.id === tT.v.noLabelsData.id
                                            ? "no:label"
                                            : e.name
                                    ),
                                    "label"
                                ),
                                n = ar({ viewId: s, query: l });
                            a(l, n);
                        },
                        [r, a, s]
                    ),
                    d = (0, b.useMemo)(() => {
                        let e = ex(r, "label");
                        return e.length > 0 ? e : void 0;
                    }, [r]);
                return (0, y.jsx)(lj.tJ, {
                    anchorElement: e ? rn : rs,
                    title: U.filters.labelsLabel,
                    showEditLabelsButton: !1,
                    repo: l.name,
                    owner: l.owner,
                    readonly: !1,
                    shortcutEnabled: t?.use_single_key_shortcut || !1,
                    onSelectionChange: u,
                    noLabelOption: o,
                    labels: [],
                    labelNames: d,
                    canCreateLabel: !1,
                });
            }
            function rn(e) {
                return (0, y.jsxs)(np.l.Item, {
                    ...e,
                    "aria-label": U.filters.labelsLabel,
                    role: "menuitem",
                    children: [
                        (0, y.jsx)(np.l.LeadingVisual, {
                            children: (0, y.jsx)(T.TagIcon, {}),
                        }),
                        U.filters.labels,
                        "...",
                    ],
                });
            }
            function rs(e) {
                return (0, y.jsx)(nn.Q, {
                    variant: "invisible",
                    "data-testid": "labels-anchor-button",
                    trailingVisual: T.TriangleDownIcon,
                    "aria-label": U.filters.labelsLabel,
                    className: rl.labelFilterButton,
                    ...e,
                    children: U.filters.labels,
                });
            }
            try {
                ra.displayName || (ra.displayName = "ListLabelFilter");
            } catch {}
            try {
                (i = NoLabelItem).displayName ||
                    (i.displayName = "NoLabelItem");
            } catch {}
            try {
                rn.displayName || (rn.displayName = "NestedLabelsAnchor");
            } catch {}
            try {
                rs.displayName || (rs.displayName = "LabelsAnchor");
            } catch {}
            let ri = {
                    milestoneFilterButton:
                        "ListMilestoneFilter-module__milestoneFilterButton--0NXiL",
                },
                rt = ({ nested: e, repo: l, applySectionFilter: a }) => {
                    let { activeSearchQuery: n, currentViewId: s } = eM(),
                        { debouncedDirtySearchQuery: i } = eV(),
                        { current_user_settings: t } = (0, v.X)(),
                        [r, o] = (0, b.useState)(null),
                        u = i ?? n,
                        d = (0, b.useMemo)(
                            () => ({
                                id: tT.v.noMilestoneData.id,
                                description: "",
                                descriptionVariant: "inline",
                                children: (0, y.jsx)(im.JR, {
                                    html: tT.v.noMilestoneData.title,
                                }),
                                source: tT.v.noMilestoneData,
                                groupId: "",
                                selected: u.includes("no:milestone"),
                                leadingVisual: () =>
                                    (0, y.jsx)(T.MilestoneIcon, {}),
                            }),
                            [u]
                        ),
                        c = (0, b.useMemo)(() => ex(u, "milestone"), [u]);
                    (0, b.useEffect)(() => {
                        c.length <= 0 && o(null);
                    }, [c]);
                    let m = (0, b.useCallback)(
                        (e) => {
                            let l = e[0]?.id === tT.v.noMilestoneData.id,
                                n = e.map((e) => e.title);
                            e[0] && o(e[0]);
                            let i = ej(u, n, "milestone", l),
                                t = ar({ viewId: s, query: i });
                            a(i, t);
                        },
                        [u, a, s]
                    );
                    return (0, y.jsx)(tA.De, {
                        repo: l.name,
                        activeMilestone: r,
                        anchorElement: e ? rr : ro,
                        shortcutEnabled: t?.use_single_key_shortcut || !1,
                        owner: l.owner,
                        onSelectionChange: m,
                        noMilestoneItem: d,
                        title: U.filters.milestonesLabel,
                        canCreateMilestone: !1,
                    });
                };
            function rr(e) {
                return (0, y.jsxs)(np.l.Item, {
                    ...e,
                    "aria-label": U.filters.milestonesLabel,
                    role: "menuitem",
                    children: [
                        (0, y.jsx)(np.l.LeadingVisual, {
                            children: (0, y.jsx)(T.MilestoneIcon, {}),
                        }),
                        U.filters.milestones,
                        "...",
                    ],
                });
            }
            function ro(e) {
                return (0, y.jsx)(nn.Q, {
                    variant: "invisible",
                    "data-testid": nD.milestoneAnchorFilter,
                    trailingVisual: T.TriangleDownIcon,
                    "aria-label": U.filters.milestonesLabel,
                    className: ri.milestoneFilterButton,
                    ...e,
                    children: U.filters.milestones,
                });
            }
            try {
                rt.displayName || (rt.displayName = "ListMilestoneFilter");
            } catch {}
            try {
                (t = NoMilestoneItem).displayName ||
                    (t.displayName = "NoMilestoneItem");
            } catch {}
            try {
                rr.displayName || (rr.displayName = "NestedMilestonesAnchor");
            } catch {}
            try {
                ro.displayName || (ro.displayName = "MilestonesAnchor");
            } catch {}
            let ru = {
                projectFilterButton:
                    "ListProjectFilter-module__projectFilterButton--FE2sz",
            };
            function rd({ repo: e, applySectionFilter: l, nested: a }) {
                let { activeSearchQuery: n, currentViewId: s } = eM(),
                    { debouncedDirtySearchQuery: i } = eV(),
                    t = i ?? n,
                    r = (0, b.useMemo)(() => ex(t, "project"), [t]),
                    o = (0, b.useCallback)(
                        (a) => {
                            let n = eN(
                                t,
                                a.map((l) => `${e.owner}/${l.number}`),
                                "project"
                            );
                            if (n !== t) {
                                let e = ar({ viewId: s, query: n });
                                l(n, e);
                            }
                        },
                        [t, l, s, e.owner]
                    ),
                    u = (0, b.useCallback)(
                        (e) => {
                            let l = [];
                            return (
                                r?.map((a) => {
                                    let n = e.find((e) => {
                                        let [l, n] = a.split("/");
                                        return e.url.endsWith(
                                            `/${l}/projects/${n}`
                                        );
                                    });
                                    n && n.id && !l.includes(n) && l.push(n);
                                }),
                                l
                            );
                        },
                        [r]
                    );
                return (0, y.jsx)(lR.wX, {
                    pickerId: "list-project-filter",
                    anchorElement: a ? rc : rm,
                    repo: e.name,
                    owner: e.owner,
                    onSave: o,
                    selectedProjects: [],
                    readonly: !0,
                    getSelectedProjects: u,
                    title: U.filters.projectsLabel,
                });
            }
            function rc(e) {
                return (0, y.jsxs)(np.l.Item, {
                    ...e,
                    "aria-label": U.filters.projectsLabel,
                    role: "menuitem",
                    children: [
                        (0, y.jsx)(np.l.LeadingVisual, {
                            children: (0, y.jsx)(T.ProjectIcon, {}),
                        }),
                        U.filters.projects,
                        "...",
                    ],
                });
            }
            function rm(e) {
                return (0, y.jsx)(nn.Q, {
                    variant: "invisible",
                    "data-testid": "projects-anchor-button",
                    trailingVisual: T.TriangleDownIcon,
                    "aria-label": U.filters.projectsLabel,
                    className: ru.projectFilterButton,
                    ...e,
                    children: U.filters.projects,
                });
            }
            try {
                rd.displayName || (rd.displayName = "ListProjectFilter");
            } catch {}
            try {
                rc.displayName || (rc.displayName = "NestedProjectsAnchor");
            } catch {}
            try {
                rm.displayName || (rm.displayName = "ProjectsAnchor");
            } catch {}
            let rg = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    a = {
                        defaultValue:
                            "archived:false assignee:@me sort:updated-desc",
                        kind: "LocalArgument",
                        name: "query",
                    },
                    n = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    s = {
                        alias: null,
                        args: [
                            {
                                kind: "Literal",
                                name: "aggregations",
                                value: !0,
                            },
                            { kind: "Literal", name: "first", value: 0 },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Literal",
                                name: "type",
                                value: "ISSUE_ADVANCED",
                            },
                        ],
                        concreteType: "SearchResultItemConnection",
                        kind: "LinkedField",
                        name: "search",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "closedIssueCount",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "openIssueCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a],
                        kind: "Fragment",
                        metadata: null,
                        name: "OpenClosedTabsQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [s],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [a, e, l],
                        kind: "Operation",
                        name: "OpenClosedTabsQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    s,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "29746fd23262d23f528e1f5b9b427437",
                        metadata: {},
                        name: "OpenClosedTabsQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            rg.hash = "92e6e2f7f4ef23316cc497dae63fde6e";
            let rp = {
                    listScopedCommand:
                        "ListItems-module__listScopedCommand--GGPXX",
                    tabsContainer: "ListItems-module__tabsContainer--scl6F",
                    loading: "ListItems-module__loading--T8fIn",
                    listItem: "ListItems-module__listItem--KRcR0",
                    progressBar: "ListItems-module__progressBar--h41q8",
                    listContainer: "ListItems-module__listContainer--sgptj",
                },
                ry = ({ isClosedTabActive: e, isOpenTabActive: l }) =>
                    (0, y.jsxs)("div", {
                        className: `${(0, nA.$)(rp.tabsContainer, rp.loading)}`,
                        children: [
                            (0, y.jsx)(
                                nc.L,
                                {
                                    title: "Open",
                                    isSelected: l,
                                    isLoading: !0,
                                    href: "",
                                },
                                "open"
                            ),
                            (0, y.jsx)(
                                nc.L,
                                {
                                    title: "Closed",
                                    isSelected: e,
                                    isLoading: !0,
                                    href: "",
                                },
                                "closed"
                            ),
                        ],
                    });
            function rk(e) {
                let { activeSearchQuery: l } = eM(),
                    a = ef(l),
                    n = eC(l),
                    s = eF(l),
                    i = eS(l);
                return (0, y.jsx)(b.Suspense, {
                    fallback: (0, y.jsx)(ry, {
                        isOpenTabActive: (a && !s) || i,
                        isClosedTabActive: (n && !i) || s,
                    }),
                    children: (0, y.jsx)(rh, { ...e }),
                });
            }
            function rh({ applySectionFilter: e, scopedRepository: l }) {
                let { activeSearchQuery: a } = eM(),
                    n = A.fV.pathname,
                    s = (0, b.useMemo)(() => eL(a), [a]),
                    i = s ? `?q=${encodeURIComponent(s)}` : "",
                    t = `${n}${i}`,
                    r = (0, b.useMemo)(
                        () =>
                            ((e, l) => {
                                if (!(e = e.trim())) return "";
                                if (
                                    ((e = eK(e)),
                                    void 0 === l && (l = eL(e)),
                                    !l)
                                )
                                    return L.defaultRepoLevelClosed;
                                let a = ef(l);
                                return eS(l)
                                    ? l.replaceAll(`-${L.closed}`, `-${L.open}`)
                                    : a
                                      ? l.replaceAll(L.open, L.closed)
                                      : "";
                            })(a),
                        [a]
                    ),
                    o = r ? `${n}?q=${encodeURIComponent(r)}` : n,
                    u = (0, tt.X)(["mac"]),
                    d = (0, b.useCallback)(
                        (l, n) => {
                            if (!a || !e || (u ? l.metaKey : l.ctrlKey)) return;
                            l.preventDefault();
                            let i = l.currentTarget.href;
                            e(n ? s || L.defaultRepoLevelOpen : r, i);
                        },
                        [a, e, r, u, s]
                    ),
                    c = ef(a),
                    m = eC(a),
                    g = eF(a),
                    p = eS(a),
                    k = (c && !g) || p,
                    h = (m && !p) || g,
                    f = (0, b.useMemo)(() => {
                        let e = s.match(nI) ? r : s;
                        return ((e = n_(e, l)), s) ? e : `is:issue ${e}`;
                    }, [r, s, l]),
                    C = (0, er.useLazyLoadQuery)(
                        rg,
                        { query: f, owner: l.owner, name: l.name },
                        { fetchPolicy: "store-or-network" }
                    ),
                    F = C.repository?.search?.closedIssueCount || 0,
                    S = C.repository?.search?.openIssueCount || 0;
                return (0, y.jsx)("div", {
                    ...(0, n2.G)("list-view-section-filters"),
                    children: (0, y.jsxs)("ul", {
                        className: `list-style-none ${(0, nA.$)(rp.tabsContainer)}`,
                        children: [
                            (0, y.jsx)(
                                "li",
                                {
                                    ...(0, n2.G)("list-view-section-filter-0"),
                                    children: (0, y.jsx)(
                                        nc.L,
                                        {
                                            title: "Open",
                                            isSelected: k && !h,
                                            count: Q(S),
                                            href: t,
                                            onClick: (e) => d(e, !0),
                                        },
                                        "open"
                                    ),
                                },
                                "section-filter-0"
                            ),
                            (0, y.jsx)(
                                "li",
                                {
                                    ...(0, n2.G)("list-view-section-filter-1"),
                                    children: (0, y.jsx)(
                                        nc.L,
                                        {
                                            title: "Closed",
                                            isSelected: h && !k,
                                            count: Q(F),
                                            href: o,
                                            onClick: (e) => d(e, !1),
                                        },
                                        "closed"
                                    ),
                                },
                                "section-filter-1"
                            ),
                        ],
                    }),
                });
            }
            try {
                ry.displayName || (ry.displayName = "SuspendedFilterLinks");
            } catch {}
            try {
                rk.displayName || (rk.displayName = "OpenClosedTabs");
            } catch {}
            try {
                rh.displayName || (rh.displayName = "OpenClosedTabsInternal");
            } catch {}
            function rb({
                issueCount: e,
                issueNodes: l,
                setCheckedItems: a,
                setReactionEmojiToDisplay: n,
                setSortingItemSelected: s,
                setCurrentPage: i,
                updateListHasPRs: t,
                isInOrganization: r,
                ...o
            }) {
                let { scoped_repository: u } = (0, v.X)(),
                    { dirtySearchQuery: d, setDirtySearchQuery: c } = eV(),
                    {
                        activeSearchQuery: m,
                        isQueryLoading: g,
                        currentViewId: p,
                    } = eM(),
                    { navigateToUrl: k } = a_(),
                    h = (0, b.useMemo)(() => U.numberOfResults(e), [e]),
                    f = (0, b.useCallback)(
                        (e, l) => {
                            (c(e), k(l), i(1));
                        },
                        [k, i, c]
                    ),
                    [C, F] = (0, b.useState)(!1),
                    { setSelectedCount: S } = (0, tu.v)(),
                    { setMultiPageSelectionAllowed: L } = (0, tU.P)(),
                    K = (0, b.useCallback)(
                        (e) => {
                            e
                                ? (a(
                                      l
                                          .filter((e) => null != e)
                                          .reduce(
                                              (e, l) => e.set(l.id, l),
                                              new Map()
                                          )
                                  ),
                                  t(
                                      l
                                          .filter((e) => null != e)
                                          .reduce(
                                              (e, l) => e.set(l.id, l),
                                              new Map()
                                          )
                                  ))
                                : (a(new Map()), C && (F(!1), S(0), L?.(!1)));
                        },
                        [l, S, a, C, L, t]
                    ),
                    I = (0, b.useCallback)(
                        (e) => ar({ viewId: p, query: e }),
                        [p]
                    ),
                    _ = (0, b.useMemo)(
                        () => ({
                            key: "sort-by",
                            render: (e) =>
                                (0, y.jsx)(i9, {
                                    activeSearchQuery: m,
                                    dirtySearchQuery: d || m,
                                    setReactionEmojiToDisplay: n,
                                    setSortingItemSelected: s,
                                    searchUrl: I,
                                    nested: e,
                                    setCurrentPage: i,
                                }),
                        }),
                        [m, d, I, i, n, s]
                    ),
                    x = (0, b.useMemo)(
                        () => ({
                            key: "spinner",
                            render: () =>
                                g
                                    ? (0, y.jsx)(tG.A, { size: "small" })
                                    : (0, y.jsx)(y.Fragment, {}),
                        }),
                        [g]
                    ),
                    w = (0, b.useMemo)(() => {
                        if (!u) return [];
                        let e = [
                            {
                                key: "authors",
                                render: (e) =>
                                    (0, y.jsx)(t0, {
                                        nested: e,
                                        repo: u,
                                        applySectionFilter: f,
                                    }),
                            },
                            {
                                key: "labels",
                                render: (e) =>
                                    (0, y.jsx)(ra, {
                                        nested: e,
                                        repo: u,
                                        applySectionFilter: f,
                                    }),
                            },
                            {
                                key: "projects",
                                render: (e) =>
                                    (0, y.jsx)(rd, {
                                        nested: e,
                                        repo: u,
                                        applySectionFilter: f,
                                    }),
                            },
                            {
                                key: "milestones",
                                render: (e) =>
                                    (0, y.jsx)(rt, {
                                        nested: e,
                                        repo: u,
                                        applySectionFilter: f,
                                    }),
                            },
                            {
                                key: "assignees",
                                render: (e) =>
                                    (0, y.jsx)(tJ, {
                                        nested: e,
                                        repo: u,
                                        applySectionFilter: f,
                                    }),
                            },
                        ];
                        return (
                            r &&
                                e.push({
                                    key: "issue-types",
                                    render: (e) =>
                                        (0, y.jsx)(t7, {
                                            nested: e,
                                            repo: u,
                                            applySectionFilter: f,
                                        }),
                                }),
                            e
                        );
                    }, [f, u, r]),
                    N = (0, b.useMemo)(
                        () => (A.KJ ? [x, ...w, _] : []),
                        [w, _, x]
                    );
                return (0, y.jsx)(tQ.X, {
                    title: !u && h,
                    sectionFilters:
                        u &&
                        (0, y.jsx)(rk, {
                            applySectionFilter: f,
                            scopedRepository: u,
                        }),
                    onToggleSelectAll: K,
                    density: "condensed",
                    assistiveAnnouncement: g ? U.loadingQueryResults : void 0,
                    actionsLabel: "Actions",
                    actions: N,
                    className: re.ListViewMetadata_0,
                    ...o,
                });
            }
            try {
                rb.displayName ||
                    (rb.displayName = "ListItemsHeaderWithoutBulkActions");
            } catch {}
            function rf({ ...e }) {
                let { anyItemsSelected: l } = (0, tu.v)();
                return l ? (0, y.jsx)(tW, { ...e }) : (0, y.jsx)(rb, { ...e });
            }
            try {
                rf.displayName || (rf.displayName = "ListItemsHeader");
            } catch {}
            var rC = a(97949);
            let rF = ({ itemsLabel: e }) => {
                let { activeSearchQuery: l } = eM(),
                    { currentUser: a } = (0, e6.J)(),
                    n = (0, b.useMemo)(() => nj(l), [l]),
                    s = (0, aK.u)("issues_react_bypass_es_limits");
                return (0, y.jsx)("div", {
                    className: "p-2",
                    children: (0, y.jsx)(rC.l, {
                        description: ah.moreItemsAvailableDescription(
                            E.maxIssuesListItems(s, n, !!a),
                            e
                        ),
                        hideTitle: !0,
                        title: ah.moreItemsAvailableTitle(e),
                    }),
                });
            };
            try {
                rF.displayName ||
                    (rF.displayName = "MoreResultsAvailableBanner");
            } catch {}
            function rS({ key: e }) {
                let { data: l, refetch: a } = (0, er.usePaginationFragment)(
                    nO,
                    e
                );
                return { data: l, refetch: a };
            }
            function rL({
                search: e,
                queryFromCustomView: l,
                listRef: a,
                isBulkSupported: n,
                includeGitDataFromMainQuery: s = !1,
                isInOrganization: i,
                onSidePanelNavigate: t,
            }) {
                let r = `${A.fV.pathname}${A.fV.search}`,
                    { scoped_repository: o } = (0, v.X)(),
                    { currentUser: u } = (0, e6.J)(),
                    {
                        activeSearchQuery: d,
                        currentPage: c,
                        setCurrentPage: m,
                    } = eM(),
                    [g, p] = (0, b.useState)(!1),
                    k = (0, e7.Z)(),
                    h = (0, tt.X)(["mac"]),
                    [f, C] = (0, b.useState)(),
                    { shiftKeyPressedRef: F } = (function () {
                        let e = (0, b.useRef)(!1);
                        return (
                            (0, b.useEffect)(() => {
                                let l = (l) => (e.current = l.shiftKey),
                                    a = () => (e.current = !1);
                                return (
                                    window.addEventListener("keydown", l),
                                    window.addEventListener("keyup", a),
                                    () => {
                                        (window.removeEventListener(
                                            "keydown",
                                            l
                                        ),
                                            window.removeEventListener(
                                                "keyup",
                                                a
                                            ));
                                    }
                                );
                            }, []),
                            { shiftKeyPressedRef: e }
                        );
                    })(),
                    { issues_react_bypass_es_limits: S } = (0, aK.h)(),
                    [L, I] = (0, aF.useQueryLoader)(iX),
                    { data: _, refetch: x } = rS({ key: e }),
                    w = null === _.search || void 0 === _.search,
                    N = _.search?.ok ? null : _.search?.errors;
                if (!_.search.ok) {
                    let e = N?.some(
                            (e) =>
                                e &&
                                "object" == typeof e &&
                                "type" in e &&
                                "SERVICE_UNAVAILABLE" === e.type
                        ),
                        l = Error(
                            `ListItemsPaginated: pageData.search.value.edges is errored. Errors: ${JSON.stringify(N)}`
                        );
                    throw ((l.shouldSkipReport = e ?? !1), l);
                }
                let { ok: j, value: { edges: R, issueCount: P } = {} } =
                        _.search,
                    T = null != R,
                    M = !w && j && T,
                    [V, D] = (0, b.useState)(!1),
                    q = (0, b.useMemo)(() => {
                        let e = _.id && "RootQueryObject" !== _.id;
                        return !V && w && e;
                    }, [V, w, _]);
                ((0, b.useEffect)(() => {
                    (0, nB.i)(U.numberOfResults(P || 0), { assertive: !0 });
                }, [P]),
                    (0, b.useEffect)(() => {
                        if (q)
                            return x(
                                {},
                                {
                                    fetchPolicy: "network-only",
                                    onComplete: () => D(!0),
                                }
                            ).dispose;
                    }, [d, x, w, q]));
                let O = (0, b.useMemo)(
                        () =>
                            R
                                ? R.map((e) =>
                                      e?.node &&
                                      ("PullRequest" === e.node.__typename ||
                                          "Issue" === e.node.__typename)
                                          ? e.node
                                          : null
                                  ).filter((e) => null != e)
                                : [],
                        [R]
                    ),
                    B = (0, b.useRef)(null),
                    $ = (0, b.useMemo)(() => nj(d), [d]),
                    Q = E.maxIssuesListItems(S || !1, $, !!u),
                    z = (0, b.useMemo)(
                        () =>
                            P
                                ? Math.ceil(Math.min(Q, P) / E.issuesPageSize())
                                : 0,
                        [P, Q]
                    ),
                    {
                        getQueryFieldUrl: H,
                        getAdditiveQueryFieldUrl: W,
                        navigateToUrl: G,
                    } = a_(),
                    Z = (0, b.useCallback)(
                        (e, l) => {
                            if ((h ? e.metaKey : e.ctrlKey) || e.shiftKey)
                                return;
                            e.preventDefault();
                            let a = ev(r, l);
                            (m(l), G(a));
                        },
                        [h, r, m, G]
                    ),
                    X = (0, b.useCallback)((e) => ev(r, e), [r]),
                    {
                        initialSortingItem: J,
                        initialReactionEmojiToDisplay: Y,
                    } = (0, b.useMemo)(() => {
                        let e = nw(l || d).get("sort"),
                            a = i8(e?.[0] || ""),
                            n = te(a),
                            s = i0.qG[n || ""];
                        return {
                            initialSortingItem: a || "created",
                            initialReactionEmojiToDisplay: s
                                ? { reaction: n || "", reactionEmoji: s }
                                : void 0,
                        };
                    }, [d, l]),
                    [ee, el] = (0, b.useState)(Y),
                    [ea, en] = (0, b.useState)(J),
                    [es, ei] = (0, b.useState)(!1),
                    { sendAnalyticsEvent: et } = (0, ap.s)(),
                    er = (0, b.useMemo)(
                        () =>
                            n &&
                            !(function (e) {
                                let l = nw(e),
                                    a = new Set([
                                        ...(l.get("is") || []),
                                        ...(l.get("type") || []),
                                    ]);
                                return (
                                    0 === a.size ||
                                    !a.has("issue") ||
                                    a.has("pr") ||
                                    a.has("pull-request")
                                );
                            })(d),
                        [d, n]
                    ),
                    [eo, eu] = (0, b.useState)(() => new Map()),
                    ed = (e) => {
                        ei(
                            Array.from(e.values()).some(
                                (e) => "PullRequest" === e.__typename
                            )
                        );
                    },
                    ec = (0, b.useCallback)(
                        (e, l, a, n) => {
                            let s = O.findIndex((e) => e.id === l),
                                i = O.findIndex((e) => e.id === a);
                            for (
                                let l = Math.min(s, i);
                                l <= Math.max(s, i);
                                l++
                            ) {
                                let a = O[l];
                                (n ? e.set(a.id, a) : e.delete(a.id), ed(e));
                            }
                        },
                        [O]
                    ),
                    em = (0, b.useCallback)(
                        (e, l, a) => {
                            let n = new Map(eo);
                            (F.current && f
                                ? ec(n, f.id, e, a)
                                : (a ? n.set(e, l) : n.delete(e), ed(n)),
                                eu(n),
                                C({ id: e, node: l }));
                        },
                        [ec, eo, f, F]
                    );
                ((0, b.useEffect)(() => {
                    Array.from(eo.values()).find(
                        (e) => !O.find((l) => l === e)
                    ) &&
                        eu(
                            O.reduce(
                                (e, l) => (
                                    l && eo.has(l.id) && e.set(l.id, l),
                                    e
                                ),
                                new Map()
                            )
                        );
                }, [eo, O]),
                    (0, b.useEffect)(() => {
                        let e = ((e) => {
                            let l = new URLSearchParams(e).get("page");
                            return l ? parseInt(l, 10) : 1;
                        })(A.fV.search);
                        (m(e > 1 ? e : 1), eu(new Map()));
                    }, [m, r]));
                let eg = (0, y.jsx)(rf, {
                        checkedItems: eo,
                        issueCount: P || 0,
                        issueNodes: O.filter((e) => null != e).reduce(
                            (e, l) => (l && e.push(l), e),
                            []
                        ),
                        sortingItemSelected: ea,
                        setCheckedItems: eu,
                        setReactionEmojiToDisplay: el,
                        setSortingItemSelected: en,
                        useBulkActions: er,
                        setCurrentPage: m,
                        listHasPRs: es,
                        updateListHasPRs: ed,
                        isInOrganization: i,
                    }),
                    ep = (0, b.useCallback)(
                        (e) => {
                            et(
                                "search_results.select_row",
                                "SEARCH_RESULT_ROW",
                                { ...e }
                            );
                        },
                        [et]
                    ),
                    ey = new Set(O?.map((e) => e?.__typename) || []),
                    ek = (0, b.useCallback)((e, l = {}) => G(e, l, !0), [G]),
                    [eh] = (0, tr.Fo)(
                        `${o?.owner}-${o?.name}-deletedRecordId`,
                        ""
                    ),
                    eb = (0, b.useMemo)(
                        () =>
                            O.map((e) => e?.id)
                                .filter((e) => e !== eh)
                                .filter(Boolean),
                        [O, eh]
                    ),
                    ef = null !== L;
                (0, b.useEffect)(() => {
                    A.X3 || I({ nodes: eb, includeReactions: !!Y });
                }, [Y, I, eb, ef]);
                let eC = O?.map((e) => {
                    let l = {
                        isActive: !1,
                        isSelected: !!(e && eo.has(e.id)),
                        getMetadataHref: H,
                        onSelect: (l) => e && em(e.id, e, l),
                        onSelectRow: ep,
                        reactionEmojiToDisplay: ee,
                        sortingItemSelected: ea,
                        scopedRepository: o,
                    };
                    return null == e || e.id === eh
                        ? null
                        : (0, y.jsxs)(
                              "div",
                              {
                                  className: rp.listItem,
                                  children: [
                                      "Issue" === e.__typename &&
                                          (0, y.jsx)(
                                              iY,
                                              {
                                                  issueKey: e,
                                                  metadataRef: L,
                                                  ...l,
                                                  "data-testid":
                                                      nD.issueRowItem(
                                                          e?.number || "-1"
                                                      ),
                                                  onNavigate: (e, l) =>
                                                      ek(e, l),
                                                  onSidePanelNavigate: t,
                                                  getMetadataHref: H,
                                                  getAdditiveMetadataHref: W,
                                              },
                                              e.id
                                          ),
                                      "PullRequest" === e.__typename &&
                                          (0, y.jsx)(
                                              s1,
                                              {
                                                  pullRequestKey: e,
                                                  metadataRef: L,
                                                  onNavigate: k,
                                                  ...l,
                                                  "data-testid":
                                                      nD.pullRequestRowItem(
                                                          e?.number || "-1"
                                                      ),
                                                  getMetadataHref: H,
                                                  includeGitDataFromMainQuery:
                                                      s,
                                              },
                                              e.id
                                          ),
                                  ],
                              },
                              e.id
                          );
                });
                (0, b.useEffect)(() => {
                    g &&
                        c &&
                        ((0, nB.i)(U.announcePage(c, z, eC.length)), p(!1));
                }, [c, g, eC.length, z]);
                let eF = void 0 !== c && z === c && void 0 !== P && P > Q,
                    eS = () => {
                        if (a.current) {
                            let e = a.current.querySelector('[tabindex="0"]');
                            e && e instanceof HTMLElement && e.focus();
                        }
                    },
                    eL = (0, y.jsxs)(y.Fragment, {
                        children: [
                            (0, y.jsx)(nz.ak, {
                                commands: {
                                    "issues-react:focus-next-issue": eS,
                                    "issues-react:focus-previous-issue": eS,
                                },
                            }),
                            (0, y.jsx)("div", {
                                "data-testid": "list-load-progress-bar",
                                ref: B,
                                className: (0, nA.$)(
                                    "turbo-progress-bar",
                                    rp.progressBar
                                ),
                            }),
                            (0, y.jsx)(nz.tL, {
                                commands: {
                                    "issues-react:focus-next-issue": K.l,
                                    "issues-react:focus-previous-issue": K.l,
                                },
                                className: rp.listScopedCommand,
                                children: (0, y.jsxs)(n$.u, {
                                    ...(0, n2.G)(nD.list),
                                    title: U.searchResults,
                                    totalCount: P || 0,
                                    selectedCount: eo.size,
                                    titleHeaderTag: "h2",
                                    isSelectable: er,
                                    metadata: eg,
                                    singularUnits: U.singularUnits(ey),
                                    pluralUnits: U.pluralUnits(ey),
                                    listRef: a,
                                    children: [
                                        eC,
                                        0 === eC.length &&
                                            M &&
                                            (0, y.jsx)(i1, {}),
                                        eF &&
                                            (0, y.jsx)(rF, {
                                                itemsLabel:
                                                    U.pluralUnits(ey) ??
                                                    "issues",
                                            }),
                                    ],
                                }),
                            }),
                        ],
                    });
                return (0, y.jsxs)("div", {
                    children: [
                        (0, y.jsx)("div", {
                            "data-hpc": !0,
                            className: rp.listContainer,
                            children: eL,
                        }),
                        c && z > 1
                            ? (0, y.jsx)(to.A, {
                                  pageCount: z,
                                  currentPage: c,
                                  onPageChange: Z,
                                  hrefBuilder: X,
                                  marginPageCount: 2,
                                  surroundingPageCount: 2,
                              })
                            : null,
                    ],
                });
            }
            try {
                rS.displayName || (rS.displayName = "SearchFunction");
            } catch {}
            try {
                rL.displayName || (rL.displayName = "ListItems");
            } catch {}
            function rK({
                itemIdentifier: e,
                query: l,
                search: a,
                repository: n,
                loadSearchQuery: s,
                queryFromCustomView: i,
                listRef: t,
                onSidePanelNavigate: r,
            }) {
                let o = (0, er.useFragment)(nu, a),
                    { scoped_repository: u } = (0, v.X)(),
                    { pathname: d } = (0, I.zy)(),
                    c = e?.number === void 0 && "/issues/new" !== d,
                    m = (0, er.useFragment)(nd, n),
                    g =
                        m &&
                        m.viewerCanPush &&
                        !(m.isDisabled || m.isLocked || m.isArchived),
                    p = [
                        (0, y.jsx)(
                            nc.L,
                            { title: "Open", isLoading: !0, href: "" },
                            "open"
                        ),
                        (0, y.jsx)(
                            nc.L,
                            { title: "Closed", isLoading: !0, href: "" },
                            "closed"
                        ),
                    ];
                return (0, y.jsx)(b.Suspense, {
                    fallback: (0, y.jsx)(nF, {
                        sectionFilters: p,
                        showBorder: c,
                        layoutDensity: "default",
                        pageSize: E.issuesPageSize(),
                    }),
                    children: (0, y.jsx)(nR.A, {
                        critical: !0,
                        fallback: nE,
                        onRetry: () => {
                            l &&
                                s &&
                                s(
                                    {
                                        query: n_(l, u),
                                        owner: u ? u.owner : "",
                                        name: u ? u.name : "",
                                    },
                                    { fetchPolicy: "network-only" }
                                );
                        },
                        children: (0, y.jsx)(rL, {
                            search: o,
                            queryFromCustomView: i,
                            listRef: t,
                            isBulkSupported: g ?? !1,
                            onSidePanelNavigate: r,
                            isInOrganization: m?.isInOrganization ?? !1,
                        }),
                    }),
                });
            }
            try {
                rK.displayName || (rK.displayName = "SearchList");
            } catch {}
            let rv = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "name",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "DashboardEditViewActionsFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "icon",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "query",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "scopingRepository",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Shortcutable",
                    abstractKey: "__isShortcutable",
                };
            })();
            rv.hash = "3b84c25573420783a2b736065a76b8a7";
            let rI = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "removeUserViewMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType:
                                    "RemoveDashboardSearchShortcutPayload",
                                kind: "LinkedField",
                                name: "removeDashboardSearchShortcut",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "UserDashboard",
                                        kind: "LinkedField",
                                        name: "dashboard",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "SavedViewsShortcutsFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "SearchShortcut",
                                        kind: "LinkedField",
                                        name: "shortcut",
                                        plural: !1,
                                        selections: [a],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "removeUserViewMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType:
                                    "RemoveDashboardSearchShortcutPayload",
                                kind: "LinkedField",
                                name: "removeDashboardSearchShortcut",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "UserDashboard",
                                        kind: "LinkedField",
                                        name: "dashboard",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 25,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "searchTypes",
                                                        value: ["ISSUES"],
                                                    },
                                                ],
                                                concreteType:
                                                    "SearchShortcutConnection",
                                                kind: "LinkedField",
                                                name: "shortcuts",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "totalCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchShortcut",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            a,
                                                            n,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "query",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "icon",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "color",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "description",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "scopingRepository",
                                                                plural: !1,
                                                                selections: [
                                                                    n,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "owner",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "__typename",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "login",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                a,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    a,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    'shortcuts(first:25,searchTypes:["ISSUES"])',
                                            },
                                            a,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "SearchShortcut",
                                        kind: "LinkedField",
                                        name: "shortcut",
                                        plural: !1,
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                filters: null,
                                                handle: "deleteRecord",
                                                key: "",
                                                kind: "ScalarHandle",
                                                name: "id",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "2939ea7192de2c6284da481de6737322",
                        metadata: {},
                        name: "removeUserViewMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function r_({
                environment: e,
                input: { shortcutId: l },
                onCompleted: a,
                onError: n,
            }) {
                return (0, er.commitMutation)(e, {
                    mutation: rI,
                    variables: { input: { shortcutId: l } },
                    onCompleted: (e) => a && a(e),
                    onError: (e) => n && n(e),
                });
            }
            rI.hash = "245da169b3f76a221246bc00c4db41b4";
            let rx = { gap8: "DashboardEditViewActions-module__gap8--_01kQ" };
            function rw({ currentView: e }) {
                let {
                        id: l,
                        color: a,
                        name: n,
                        description: s,
                        icon: i,
                        scopingRepository: t,
                        query: r,
                    } = (0, er.useFragment)(rv, e),
                    o = (0, er.useRelayEnvironment)(),
                    { pathname: u } = (0, I.zy)(),
                    { navigateToView: d } = a_(),
                    {
                        setIsEditing: c,
                        setIsNewView: m,
                        dirtyViewId: g,
                        isNewView: p,
                    } = eM(),
                    {
                        dirtyTitle: k,
                        dirtyDescription: h,
                        commitUserViewEdit: f,
                        dirtySearchQuery: C,
                        dirtyViewIcon: F,
                        dirtyViewColor: S,
                        clearSavedViewEditState: L,
                    } = eV(),
                    { sendAnalyticsEvent: v } = (0, ap.s)(),
                    { author: _, assignee: x, mentioned: w } = (0, I.g)(),
                    N = `${en.defaultQuery} ${en.query({ author: _, assignee: x, mentioned: w, createdByApp: eh(u) })}`,
                    j = ek(u) ? N : r,
                    R = t ? `repo:${t.owner.login}/${t.name} ${j}` : `${j}`,
                    P = (0, b.useCallback)(() => {
                        let e = {
                            viewName: a1(k) ? k : n,
                            viewDescription: a1(h) ? h : s,
                            viewIcon: a1(F) ? F : i,
                            viewColor: a1(S) ? S : a,
                            viewQuery: a1(C) ? C : R,
                        };
                        "" !== e.viewName.trim() &&
                            (v("search.save", "FILTER_BAR_SAVE_BUTTON", {
                                new_color: e.viewColor,
                                new_icon: e.viewIcon,
                                new_query: e.viewQuery,
                                new_view_description: e.viewDescription,
                                new_view_name: e.viewName,
                                prev_color: a,
                                prev_icon: i,
                                prev_query: R,
                                prev_view_description: s,
                                prev_view_name: n,
                            }),
                            f({
                                viewId: l,
                                ...e,
                                onSuccess: () => {
                                    let e = ar({ viewId: l });
                                    ((0, ln.bj)(e), c(!1));
                                },
                                relayEnvironment: o,
                            }),
                            m(!1),
                            L());
                    }, [k, v, S, F, C, h, a, i, R, s, n, l, o, f, m, L, c]),
                    T = (0, b.useCallback)(() => {
                        void 0 !== g &&
                            r_({
                                environment: o,
                                input: { shortcutId: g },
                                onError: () => K.l,
                                onCompleted: () => {
                                    d({ viewId: W.id, canEditView: !0 });
                                },
                            });
                    }, [g, d, o]),
                    A = (0, b.useCallback)(() => {
                        (c(!1),
                            p && T(),
                            m(!1),
                            L(),
                            d({ viewId: l, canEditView: !0 }));
                    }, [c, p, m, L, d, l, T]);
                return (0, y.jsxs)("div", {
                    className: `${rx.gap8} d-flex flex-row`,
                    children: [
                        (0, y.jsx)(nn.Q, { onClick: A, children: ns.cancel }),
                        (0, y.jsx)(nn.Q, {
                            variant: "primary",
                            onClick: P,
                            children: ns.saveView,
                        }),
                    ],
                });
            }
            try {
                rw.displayName || (rw.displayName = "DashboardEditViewActions");
            } catch {}
            let rN = {
                    searchContainer:
                        "DashboardSearch-module__searchContainer--LEgAY",
                    actions: "DashboardSearch-module__actions--IpaWx",
                },
                rj = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "DashboardSearchBarActionsFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "icon",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "query",
                            storageKey: null,
                        },
                    ],
                    type: "Shortcutable",
                    abstractKey: "__isShortcutable",
                };
            rj.hash = "682b1e8a44de9aaf4d1a1b28c4aa0972";
            let rR = {
                searchBarContainer:
                    "DashboardSearchBarActions-module__searchBarContainer--qeHZD",
                menuOverlay:
                    "DashboardSearchBarActions-module__menuOverlay--QGi3_",
                warning: "DashboardSearchBarActions-module__warning--ho_zw",
            };
            function rP({ currentView: e }) {
                let {
                        id: l,
                        name: a,
                        query: n,
                        description: s,
                        color: i,
                        icon: t,
                    } = (0, er.useFragment)(rj, e),
                    r = (0, er.useRelayEnvironment)(),
                    { addToast: o } = (0, _.Y6)(),
                    {
                        isCustomView: u,
                        canEditView: d,
                        savedViewsCount: c,
                    } = eM(),
                    { navigateToSavedView: m, navigateToUrl: g } = a_(),
                    {
                        commitUserViewDuplicate: p,
                        commitUserViewEdit: k,
                        dirtySearchQuery: h,
                    } = eV(),
                    f = l !== S.repository && (d || !u),
                    C = u(l) && d,
                    F = null !== h && n?.trim() !== h?.trim(),
                    L = c >= E.viewsPageSize,
                    K = (0, b.useCallback)(() => {
                        p({
                            viewName: a,
                            viewIcon: t,
                            viewColor: i,
                            viewDescription: s,
                            viewQuery: null === h ? n : h,
                            onError: () =>
                                o({
                                    type: "error",
                                    message: U.views.duplicateError,
                                }),
                            relayEnvironment: r,
                            onSuccess: ({
                                createDashboardSearchShortcut: e,
                            }) => {
                                e?.shortcut &&
                                    m(e.shortcut.id, { isEditing: !1 });
                            },
                        });
                    }, [h, n, a, t, i, s, r, p, o, m]),
                    v = (0, b.useCallback)(() => {
                        k({
                            viewId: l,
                            viewQuery: null === h ? n : h,
                            viewName: a,
                            viewIcon: t,
                            viewColor: i,
                            viewDescription: s,
                            onSuccess: () => {
                                g(ar({ viewId: l }));
                            },
                            relayEnvironment: r,
                        });
                    }, [h, n, l, a, t, i, s, r, k, g]),
                    I = [
                        {
                            icon: (0, y.jsx)(T.BookmarkIcon, {}),
                            text: "Save changes",
                            onSelect: v,
                            enabled: C,
                        },
                        {
                            icon: (0, y.jsx)(T.DuplicateIcon, {}),
                            text: "Save changes to new view",
                            onSelect: K,
                            enabled: f && !L,
                            showDescription: !!(f && L),
                            description: U.views.maxViewsReached,
                        },
                    ];
                return (0, y.jsx)("div", {
                    className: rR.searchBarContainer,
                    children: (0, y.jsxs)(i3.W, {
                        children: [
                            (0, y.jsx)(i3.W.Button, {
                                disabled: !F || !C,
                                children: "Save",
                            }),
                            (0, y.jsx)(i3.W.Overlay, {
                                className: rR.menuOverlay,
                                children: (0, y.jsx)(np.l, {
                                    children: I.map((e) =>
                                        (0, y.jsxs)(
                                            np.l.Item,
                                            {
                                                onSelect: e.onSelect,
                                                disabled: !e.enabled,
                                                children: [
                                                    (0, y.jsx)(
                                                        np.l.LeadingVisual,
                                                        { children: e.icon }
                                                    ),
                                                    e.text,
                                                    e.showDescription &&
                                                        (0, y.jsx)(
                                                            np.l.Description,
                                                            {
                                                                variant:
                                                                    "block",
                                                                children: (0,
                                                                y.jsx)("span", {
                                                                    className:
                                                                        rR.warning,
                                                                    children:
                                                                        e.description,
                                                                }),
                                                            }
                                                        ),
                                                ],
                                            },
                                            e.text
                                        )
                                    ),
                                }),
                            }),
                        ],
                    }),
                });
            }
            try {
                rP.displayName ||
                    (rP.displayName = "DashboardSearchBarActions");
            } catch {}
            function rT({
                itemIdentifier: e,
                currentView: l,
                search: a,
                loadSearchQuery: n,
                onSidePanelNavigate: s,
                showSsoBanner: i = !0,
            }) {
                let { ssoOrgs: t } = (0, lW.N)(),
                    r = t.map((e) => e.login).filter((e) => void 0 !== e),
                    o = (0, er.useFragment)(lU, a),
                    u = (0, er.useFragment)(lz, l),
                    { activeSearchQuery: d, isNewView: c, isEditing: m } = eM(),
                    g = (0, b.useRef)(void 0),
                    p = c && !d,
                    k = m
                        ? (0, y.jsx)(rw, { currentView: u })
                        : (0, y.jsx)(rP, { currentView: u });
                return (0, y.jsxs)("div", {
                    className: rN.searchContainer,
                    children: [
                        (0, y.jsx)(no, {
                            currentViewKey: u,
                            currentRepository: null,
                            queryFromCustomView: u.query,
                            children: (0, y.jsx)("div", {
                                className: rN.actions,
                                children: k,
                            }),
                        }),
                        p
                            ? (0, y.jsx)(l2, {})
                            : (0, y.jsxs)(y.Fragment, {
                                  children: [
                                      i &&
                                          (0, y.jsx)(lH.x, {
                                              protectedOrgs: r,
                                          }),
                                      (0, y.jsx)(rK, {
                                          itemIdentifier: e,
                                          search: o,
                                          repository: null,
                                          loadSearchQuery: n,
                                          query: d,
                                          listRef: g,
                                          onSidePanelNavigate: s,
                                      }),
                                  ],
                              }),
                    ],
                });
            }
            try {
                rT.displayName || (rT.displayName = "DashboardSearch");
            } catch {}
            let rA = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "HeaderCurrentViewFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "query",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "HeaderContentCurrentViewFragment",
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            rA.hash = "3bfaf6f707910045da8c4fd0f5829990";
            var rM = a(76143);
            let rV = {
                    HeaderCreateIssueContainer:
                        "Header-module__HeaderCreateIssueContainer--SKtEN",
                    leftSideContent: "Header-module__leftSideContent--EtPB2",
                    Button: "Header-module__Button--QYgVj",
                    Truncate: "Header-module__Truncate--mCGtf",
                    HeaderListContainer:
                        "Header-module__HeaderListContainer--KyKxD",
                    mobileNavigationContainer:
                        "Header-module__mobileNavigationContainer--MPqbO",
                    allViewsButton: "Header-module__allViewsButton--DZTjv",
                    actionButtonsContainer:
                        "Header-module__actionButtonsContainer--rnZ15",
                },
                rD = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "HeaderContentCurrentViewFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IconAndColorPickerViewFragment",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "ViewOptionsButtonCurrentViewFragment",
                        },
                    ],
                    type: "Shortcutable",
                    abstractKey: "__isShortcutable",
                };
            rD.hash = "f305cee1d125371a31f8f260f6725199";
            var rE = a(62559),
                rq = a(50560),
                rO = a(99511);
            let rB = {
                    HeaderContentContainer:
                        "HeaderContent-module__HeaderContentContainer--VW7Bw",
                    editingModeContainer:
                        "HeaderContent-module__editingModeContainer--mw0aj",
                    iconTitleInputRow:
                        "HeaderContent-module__iconTitleInputRow--ZXm8_",
                    FormControl: "HeaderContent-module__FormControl--JomtC",
                    TextInput: "HeaderContent-module__TextInput--ZQAAM",
                    displayModeContainer:
                        "HeaderContent-module__displayModeContainer--cJT14",
                    titleOptionsRow:
                        "HeaderContent-module__titleOptionsRow--hPAtk",
                    Heading: "HeaderContent-module__Heading--uCBAw",
                    descriptionText:
                        "HeaderContent-module__descriptionText--XC5Vu",
                },
                r$ = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IconAndColorPickerViewFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "icon",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                    ],
                    type: "Shortcutable",
                    abstractKey: "__isShortcutable",
                };
            r$.hash = "1c65d9cf28b7c9542ac14b219f1610b8";
            var rQ = a(31604);
            let rU = {
                anchoredOverlay:
                    "IconAndColorPicker-module__anchoredOverlay--CBbMW",
                iconDisplayContainer:
                    "IconAndColorPicker-module__iconDisplayContainer--GI8vS",
                overlayContent:
                    "IconAndColorPicker-module__overlayContent--wTvVS",
                sectionLabel: "IconAndColorPicker-module__sectionLabel--jIlze",
                colorSelectionGrid:
                    "IconAndColorPicker-module__colorSelectionGrid--v5jXc",
                iconSelectionGrid:
                    "IconAndColorPicker-module__iconSelectionGrid--MGasx",
                actionButtonsContainer:
                    "IconAndColorPicker-module__actionButtonsContainer--IJT3o",
            };
            function rz({ readOnly: e, currentView: l }) {
                let { isEditing: a, isNewView: n } = eM(),
                    { icon: s, color: i } = (0, er.useFragment)(r$, l),
                    {
                        dirtyViewIcon: t,
                        setDirtyViewIcon: r,
                        dirtyViewColor: o,
                        setDirtyViewColor: u,
                    } = eV(),
                    [d, c] = (0, b.useState)(!1),
                    m = (0, b.useCallback)((e) => {
                        c(e);
                    }, []),
                    g = (0, b.useCallback)(() => {
                        m(!1);
                    }, [m]),
                    p = (0, b.useCallback)(
                        (e) => {
                            r(e);
                        },
                        [r]
                    ),
                    k = (0, b.useCallback)(
                        (e) => {
                            u(e);
                        },
                        [u]
                    ),
                    h = (0, b.useCallback)(() => {
                        (m(!1), r(null), u(null));
                    }, [m, r, u]),
                    f = t || (n ? E.defaultViewIcon : s),
                    C = o || (n ? E.defaultViewColor : i),
                    F = O(f),
                    S = R[C],
                    L = P[C];
                return e || !a
                    ? (0, y.jsx)(le.az, {
                          sx: { backgroundColor: S, color: L },
                          className: rU.iconDisplayContainer,
                          children: (0, y.jsx)(nT.A, { icon: O(s) }),
                      })
                    : (0, y.jsx)(rQ.T, {
                          renderAnchor: (e) =>
                              (0, y.jsx)("div", {
                                  ...e,
                                  children: (0, y.jsx)(le.K0, {
                                      ...e,
                                      "aria-labelledby": void 0,
                                      "aria-label":
                                          U.views.iconAndColorAnchorAriaLabel,
                                      icon: F,
                                      size: "medium",
                                      variant: "invisible",
                                      onClick: () => m(!d),
                                      id: "edit-view-icon-button",
                                      sx: { backgroundColor: S, color: L },
                                  }),
                              }),
                          focusZoneSettings: { disabled: !0 },
                          focusTrapSettings: { restoreFocusOnCleanUp: !0 },
                          open: d,
                          onOpen: () => m(!0),
                          onClose: h,
                          className: rU.anchoredOverlay,
                          children: (0, y.jsxs)("div", {
                              className: rU.overlayContent,
                              children: [
                                  (0, y.jsx)("span", {
                                      className: rU.sectionLabel,
                                      children: U.views.color,
                                  }),
                                  (0, y.jsx)("div", {
                                      className: rU.colorSelectionGrid,
                                      "data-testid": "color-selection-grid",
                                      children: N.map((e) => {
                                          let l = P[e],
                                              a = R[e],
                                              n = e === C,
                                              s = j[e] ?? e;
                                          return (0, y.jsx)(
                                              is.m,
                                              {
                                                  text: `${s} color`,
                                                  direction: "n",
                                                  delay: "long",
                                                  children: (0, y.jsx)(le.K0, {
                                                      icon: n
                                                          ? T.CheckCircleFillIcon
                                                          : T.CircleIcon,
                                                      "aria-label": s,
                                                      "aria-checked": n,
                                                      role: "radio",
                                                      variant: "invisible",
                                                      sx: {
                                                          "&:hover:not([aria-disabled])":
                                                              {
                                                                  backgroundColor:
                                                                      n ? l : a,
                                                                  color: n
                                                                      ? "fg.onEmphasis"
                                                                      : l,
                                                              },
                                                          "&:focus:not([aria-disabled])":
                                                              {
                                                                  backgroundColor:
                                                                      n ? l : a,
                                                                  color: n
                                                                      ? "fg.onEmphasis"
                                                                      : l,
                                                              },
                                                          color: n
                                                              ? "fg.onEmphasis"
                                                              : l,
                                                          backgroundColor: n
                                                              ? l
                                                              : "transparent",
                                                      },
                                                      onClick: () => k(e),
                                                  }),
                                              },
                                              e
                                          );
                                      }),
                                  }),
                                  (0, y.jsx)("span", {
                                      className: rU.sectionLabel,
                                      children: U.views.icon,
                                  }),
                                  (0, y.jsx)("div", {
                                      className: rU.iconSelectionGrid,
                                      "data-testid": "icon-selection-grid",
                                      children: Object.keys($).map((e) => {
                                          let l = e === f;
                                          return (0, y.jsx)(
                                              is.m,
                                              {
                                                  text: `${(function (e) {
                                                      if (!e) return e;
                                                      let l = e
                                                          .replace(/_+/g, " ")
                                                          .trim();
                                                      return (
                                                          l
                                                              .charAt(0)
                                                              .toUpperCase() +
                                                          l
                                                              .slice(1)
                                                              .toLowerCase()
                                                      );
                                                  })(e)} icon`,
                                                  direction: "n",
                                                  delay: "long",
                                                  children: (0, y.jsx)(le.K0, {
                                                      icon: O(e),
                                                      "aria-label": e,
                                                      "aria-checked": l,
                                                      role: "radio",
                                                      variant: "invisible",
                                                      sx: {
                                                          "&:hover:not([aria-disabled])":
                                                              {
                                                                  backgroundColor:
                                                                      l
                                                                          ? ""
                                                                          : S,
                                                              },
                                                          "&:focus-visible:not([aria-disabled])":
                                                              {
                                                                  backgroundColor:
                                                                      l
                                                                          ? ""
                                                                          : S,
                                                              },
                                                          backgroundColor: l
                                                              ? L
                                                              : "transparent",
                                                          color: l
                                                              ? "fg.onEmphasis"
                                                              : "fg.muted",
                                                      },
                                                      onClick: () => p(e),
                                                  }),
                                              },
                                              e
                                          );
                                      }),
                                  }),
                                  (0, y.jsxs)("div", {
                                      className: rU.actionButtonsContainer,
                                      children: [
                                          (0, y.jsx)(nn.Q, {
                                              onClick: h,
                                              children: ns.cancel,
                                          }),
                                          (0, y.jsx)(nn.Q, {
                                              variant: "primary",
                                              onClick: g,
                                              children: ns.apply,
                                          }),
                                      ],
                                  }),
                              ],
                          }),
                      });
            }
            try {
                rz.displayName || (rz.displayName = "IconAndColorPicker");
            } catch {}
            let rH = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ViewOptionsButtonCurrentViewFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "icon",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "query",
                        storageKey: null,
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            rH.hash = "62dca5895718c106a2f717dbe6980390";
            var rW = a(31223),
                rG = a(24990);
            let rZ = { warning: "ViewOptionsButton-module__warning--wYM3M" },
                rX = ({ currentView: e }) => {
                    let {
                            id: l,
                            name: a,
                            query: n,
                            description: s,
                            color: i,
                            icon: t,
                        } = (0, er.useFragment)(rH, e),
                        {
                            isCustomView: r,
                            setIsEditing: o,
                            canEditView: u,
                            savedViewsCount: d,
                        } = eM(),
                        { commitUserViewDuplicate: c } = eV(),
                        m = (0, er.useRelayEnvironment)(),
                        g = d >= E.viewsPageSize,
                        p = (0, b.useRef)(null),
                        [k, h] = (0, b.useState)(!1),
                        f = (0, rW.M)(k),
                        { addToast: C } = (0, _.Y6)(),
                        { navigateToSavedView: F, navigateToView: L } = a_(),
                        K = (0, rG.S)(),
                        v = (0, b.useCallback)(() => {
                            o(!0);
                        }, [o]),
                        I = (0, b.useCallback)(() => {
                            c({
                                viewName: a,
                                viewIcon: t,
                                viewColor: i,
                                viewDescription: s,
                                viewQuery: n,
                                onError: () =>
                                    C({
                                        type: "error",
                                        message: U.views.duplicateError,
                                    }),
                                relayEnvironment: m,
                                onSuccess: ({
                                    createDashboardSearchShortcut: e,
                                }) => {
                                    e?.shortcut &&
                                        F(e.shortcut.id, { isEditing: !1 });
                                },
                            });
                        }, [a, t, i, s, n, m, C, c, F]);
                    (0, b.useEffect)(() => {
                        f.current && !k && p.current?.focus();
                    }, [k, f]);
                    let x = (0, b.useCallback)(async () => {
                            if (l) {
                                if (
                                    (h(!0),
                                    !(await K({
                                        title: U.views.deleteTitle,
                                        content: U.views.deleteContent(a),
                                        confirmButtonContent:
                                            U.views.deleteConfirmationButton,
                                        confirmButtonType: "danger",
                                    })))
                                )
                                    return void h(!1);
                                (r_({
                                    environment: m,
                                    input: { shortcutId: l },
                                    onError: () =>
                                        C({
                                            type: "error",
                                            message: U.views.deleteError,
                                        }),
                                    onCompleted: () => {
                                        L({ viewId: W.id, canEditView: !0 });
                                    },
                                }),
                                    h(!1));
                            }
                        }, [C, K, L, m, l, a]),
                        w = l !== S.repository && (u || !r),
                        N = r(l) && u;
                    return N || w
                        ? (0, y.jsxs)(i3.W, {
                              children: [
                                  (0, y.jsx)(i3.W.Anchor, {
                                      children: (0, y.jsx)(lQ.K, {
                                          icon: T.KebabHorizontalIcon,
                                          "aria-label":
                                              U.views.editButtonAriaLabel,
                                          variant: "invisible",
                                          ref: p,
                                      }),
                                  }),
                                  (0, y.jsx)(i3.W.Overlay, {
                                      width: "small",
                                      children: (0, y.jsxs)(np.l, {
                                          children: [
                                              N &&
                                                  (0, y.jsxs)(np.l.Item, {
                                                      onSelect: v,
                                                      children: [
                                                          (0, y.jsx)(
                                                              np.l
                                                                  .LeadingVisual,
                                                              {
                                                                  children: (0,
                                                                  y.jsx)(
                                                                      T.PencilIcon,
                                                                      {}
                                                                  ),
                                                              }
                                                          ),
                                                          U.views.edit,
                                                      ],
                                                  }),
                                              w &&
                                                  (0, y.jsxs)(np.l.Item, {
                                                      onSelect: I,
                                                      disabled: g,
                                                      children: [
                                                          (0, y.jsx)(
                                                              np.l
                                                                  .LeadingVisual,
                                                              {
                                                                  children: (0,
                                                                  y.jsx)(
                                                                      T.DuplicateIcon,
                                                                      {}
                                                                  ),
                                                              }
                                                          ),
                                                          U.views.duplicate,
                                                          g &&
                                                              (0, y.jsx)(
                                                                  np.l
                                                                      .Description,
                                                                  {
                                                                      variant:
                                                                          "block",
                                                                      children:
                                                                          (0,
                                                                          y.jsx)(
                                                                              "span",
                                                                              {
                                                                                  className:
                                                                                      rZ.warning,
                                                                                  children:
                                                                                      U
                                                                                          .views
                                                                                          .maxViewsReached,
                                                                              }
                                                                          ),
                                                                  }
                                                              ),
                                                      ],
                                                  }),
                                              N &&
                                                  (0, y.jsxs)(y.Fragment, {
                                                      children: [
                                                          (0, y.jsx)(
                                                              np.l.Divider,
                                                              {}
                                                          ),
                                                          (0, y.jsxs)(
                                                              np.l.Item,
                                                              {
                                                                  variant:
                                                                      "danger",
                                                                  onSelect: x,
                                                                  children: [
                                                                      (0,
                                                                      y.jsx)(
                                                                          np.l
                                                                              .LeadingVisual,
                                                                          {
                                                                              children:
                                                                                  (0,
                                                                                  y.jsx)(
                                                                                      T.TrashIcon,
                                                                                      {}
                                                                                  ),
                                                                          }
                                                                      ),
                                                                      U.views
                                                                          .delete,
                                                                  ],
                                                              }
                                                          ),
                                                      ],
                                                  }),
                                          ],
                                      }),
                                  }),
                              ],
                          })
                        : null;
                };
            try {
                rX.displayName || (rX.displayName = "ViewOptionsButton");
            } catch {}
            function rJ({ readOnly: e = !1, currentViewKey: l }) {
                let { isCustomView: a, isEditing: n } = eM(),
                    { scoped_repository: s } = (0, v.X)(),
                    i = (0, er.useFragment)(rD, l),
                    { name: t, description: r, id: o } = i,
                    {
                        dirtyTitle: u,
                        setDirtyTitle: d,
                        dirtyDescription: c,
                        setDirtyDescription: m,
                        shouldFocusSearchOnNav: g,
                    } = eV(),
                    [p, k] = (0, b.useState)(void 0),
                    h = (0, b.useRef)(null);
                return (
                    (0, b.useEffect)(() => {
                        n &&
                            h.current &&
                            A.KJ &&
                            !g &&
                            requestAnimationFrame(() => {
                                h.current && h.current.focus();
                            });
                    }, [n, g]),
                    (0, y.jsx)("div", {
                        className: rB.HeaderContentContainer,
                        children: n
                            ? (0, y.jsxs)("div", {
                                  className: rB.editingModeContainer,
                                  children: [
                                      (0, y.jsxs)("div", {
                                          className: rB.iconTitleInputRow,
                                          children: [
                                              (0, y.jsxs)(ak.A, {
                                                  children: [
                                                      (0, y.jsx)(ak.A.Label, {
                                                          htmlFor:
                                                              "edit-view-icon-button",
                                                          children: ah.icon,
                                                      }),
                                                      a(o) &&
                                                          (0, y.jsx)(rz, {
                                                              readOnly: e,
                                                              currentView: i,
                                                          }),
                                                  ],
                                              }),
                                              (0, y.jsxs)(ak.A, {
                                                  className: rB.FormControl,
                                                  children: [
                                                      (0, y.jsx)(ak.A.Label, {
                                                          children: ah.title,
                                                      }),
                                                      (0, y.jsx)(rO.A, {
                                                          ref: h,
                                                          onChange: (e) => {
                                                              let l =
                                                                  e.target
                                                                      .value;
                                                              (k(
                                                                  (0, rE.iy)(l)
                                                                      .errorMessage
                                                              ),
                                                                  d(l));
                                                          },
                                                          value: a1(u) ? u : t,
                                                          placeholder:
                                                              rq.k
                                                                  .viewTitlePlaceholder,
                                                          className:
                                                              rB.TextInput,
                                                      }),
                                                      p &&
                                                          (0, y.jsx)(
                                                              ak.A.Validation,
                                                              {
                                                                  variant:
                                                                      "error",
                                                                  children: p,
                                                              }
                                                          ),
                                                  ],
                                              }),
                                          ],
                                      }),
                                      (0, y.jsxs)(ak.A, {
                                          className: rB.FormControl,
                                          children: [
                                              (0, y.jsx)(ak.A.Label, {
                                                  children: ah.description,
                                              }),
                                              (0, y.jsx)(rO.A, {
                                                  onChange: (e) => {
                                                      m(e.target.value);
                                                  },
                                                  value: a1(c) ? c : r,
                                                  placeholder:
                                                      rq.k
                                                          .viewDescriptionPlaceholder,
                                                  className: rB.TextInput,
                                              }),
                                          ],
                                      }),
                                  ],
                              })
                            : (0, y.jsxs)("div", {
                                  className: rB.displayModeContainer,
                                  children: [
                                      (0, y.jsxs)("span", {
                                          className: rB.titleOptionsRow,
                                          children: [
                                              a(o) &&
                                                  (0, y.jsx)(rz, {
                                                      readOnly: e,
                                                      currentView: i,
                                                  }),
                                              (0, y.jsx)(e8.A, {
                                                  as: "h1",
                                                  className: (0, nA.$)(
                                                      s ? "sr-only" : "",
                                                      rB.Heading
                                                  ),
                                                  children: t,
                                              }),
                                              a(o) &&
                                                  !e &&
                                                  (0, y.jsx)(rX, {
                                                      currentView: i,
                                                  }),
                                          ],
                                      }),
                                      r &&
                                          (0, y.jsx)("span", {
                                              className: rB.descriptionText,
                                              children: r,
                                          }),
                                  ],
                              }),
                    })
                );
            }
            try {
                rJ.displayName || (rJ.displayName = "HeaderContent");
            } catch {}
            function rY({
                currentViewKey: e,
                onCollapse: l,
                setSafeDocumentTitle: a,
            }) {
                let { pathname: n } = (0, I.zy)(),
                    s = em(n),
                    { navigateToRoot: i, navigateToUrl: t } = a_(),
                    { isEditing: r, canEditView: o } = eM(),
                    u = (0, er.useFragment)(rA, e),
                    { id: d, name: c, query: m } = u,
                    { openNavigation: g } = F(),
                    { scoped_repository: p, current_user_settings: k } = (0,
                    v.X)(),
                    { activeSearchQuery: h } = eM(),
                    f = (0, b.useCallback)(() => {
                        d === S.repository && h !== m
                            ? t(
                                  (function ({ query: e } = {}) {
                                      let l = A.fV?.pathname,
                                          a = l.match(ec),
                                          n =
                                              e &&
                                              e.length > 0 &&
                                              e !== L.defaultRepoLevelOpen
                                                  ? `?${E.searchUrlParameterName}=${encodeURIComponent(e)}`
                                                  : "";
                                      if (a) {
                                          let e = l.substring(
                                              0,
                                              l.length - a[a.length - 1].length
                                          );
                                          return `${e}issues${n}`;
                                      }
                                      return `${l}${n}`;
                                  })({ query: h })
                              )
                            : i(d, m);
                    }, [h, i, t, d, m]),
                    C = U.documentTitleForView();
                (p
                    ? (C = U.documentTitleForRepository(p.owner, p.name))
                    : c && (C = U.documentTitleForView(c)),
                    A.XC &&
                        C !== A.XC.title &&
                        (a ? (0, rM.D)(A.XC.title) : (0, rM.D)(C)));
                let K = (0, e7.Z)(),
                    _ = (0, b.useCallback)(
                        (e) => {
                            K(e, { reloadDocument: !0 });
                        },
                        [K]
                    );
                return (0, y.jsx)("div", {
                    "data-testid": nD.listHeader,
                    children: s
                        ? (0, y.jsx)("div", {
                              className: rV.HeaderCreateIssueContainer,
                              children: (0, y.jsxs)("div", {
                                  className: rV.leftSideContent,
                                  children: [
                                      l &&
                                          (0, y.jsx)(lQ.K, {
                                              variant: "invisible",
                                              icon: T.SidebarExpandIcon,
                                              onClick: l,
                                              "aria-label": "Collapse",
                                              keybindingHint: "Mod+B",
                                              tooltipDirection: "e",
                                          }),
                                      (0, y.jsx)(nn.Q, {
                                          variant: "invisible",
                                          onClick: f,
                                          leadingVisual: T.ArrowLeftIcon,
                                          size: "small",
                                          title: ns.returnToList,
                                          className: rV.Button,
                                          children: (0, y.jsx)(s_.A, {
                                              id: "view-title",
                                              title: c,
                                              className: rV.Truncate,
                                              children: c,
                                          }),
                                      }),
                                  ],
                              }),
                          })
                        : (0, y.jsxs)("div", {
                              className: rV.HeaderListContainer,
                              children: [
                                  !p &&
                                      (0, y.jsx)("div", {
                                          className:
                                              rV.mobileNavigationContainer,
                                          children: (0, y.jsx)(nn.Q, {
                                              variant: "invisible",
                                              size: "small",
                                              onClick: g,
                                              trailingVisual:
                                                  T.TriangleDownIcon,
                                              className: rV.allViewsButton,
                                              children: U.allViews,
                                          }),
                                      }),
                                  (0, y.jsx)(rJ, {
                                      readOnly: !o,
                                      currentViewKey: u,
                                  }),
                                  !r &&
                                      (0, y.jsx)("div", {
                                          className: rV.actionButtonsContainer,
                                          children:
                                              !p &&
                                              (0, y.jsx)(na.a, {
                                                  label: ns.newIssue,
                                                  navigate: _,
                                                  optionConfig: {
                                                      showRepositoryPicker:
                                                          null === p,
                                                      singleKeyShortcutsEnabled:
                                                          k?.use_single_key_shortcut ||
                                                          !1,
                                                      emojiSkinTonePreference:
                                                          k?.preferred_emoji_skin_tone,
                                                      showFullScreenButton: !0,
                                                  },
                                              }),
                                      }),
                              ],
                          }),
                });
            }
            try {
                rY.displayName || (rY.displayName = "Header");
            } catch {}
            var r1 = a(41057);
            let r2 = {
                    HeaderLoadingContainer:
                        "HeaderLoading-module__HeaderLoadingContainer--iSc7C",
                    headingContainer:
                        "HeaderLoading-module__headingContainer--ikpDV",
                    Heading: "HeaderLoading-module__Heading--nFwuX",
                },
                r0 = () =>
                    (0, y.jsxs)("div", {
                        "data-testid": nD.headerLoading,
                        className: r2.HeaderLoadingContainer,
                        children: [
                            (0, y.jsx)("div", {
                                className: r2.headingContainer,
                                children: (0, y.jsx)(e8.A, {
                                    as: "h1",
                                    className: r2.Heading,
                                    children: ns.issues,
                                }),
                            }),
                            (0, y.jsx)(r1.Q, { height: "xl", width: "150px" }),
                        ],
                    });
            try {
                r0.displayName || (r0.displayName = "HeaderLoading");
            } catch {}
            var r3 = a(50558),
                r4 = a(86645),
                r5 = a(48779);
            function r7(e) {
                let l = (0, b.useRef)(0),
                    a = (0, b.useCallback)(
                        (l) => {
                            if (!e) return () => void 0;
                            let a = new ResizeObserver(l);
                            return (
                                a.observe(e),
                                () => {
                                    (a.unobserve(e), a.disconnect());
                                }
                            );
                        },
                        [e]
                    );
                return (0, b.useSyncExternalStore)(a, () => {
                    if (!e) return l.current;
                    let a = e.getBoundingClientRect().bottom;
                    return a === l.current ? l.current : ((l.current = a), a);
                });
            }
            let r6 = {
                    IssueSidePanelContent:
                        "IssueSidePanel-module__IssueSidePanelContent--EB1br",
                },
                r9 = ({ onClose: e, children: l }) => {
                    let a = (0, b.useRef)(null),
                        n = (0, b.useRef)(null),
                        s = (() => {
                            let e = r7(document.querySelector(".AppHeader")),
                                l = r7(
                                    document.querySelector(
                                        ".primary-viewer #issue-viewer-sticky-header"
                                    )
                                ),
                                a = (0, r5.Jd)();
                            return e > l ? e + a : l;
                        })(),
                        { disableFocusTrap: i } = (0, r4.V)();
                    return (0, y.jsx)(r3.w, {
                        open: !0,
                        defaultCloseElement: "overlay",
                        onClose: e,
                        initialFocusRef: n,
                        returnFocusRef: a,
                        "aria-labelledby": "issue-side-panel",
                        width: "min(90%, 1280px)",
                        topOffset: s,
                        externalFocusTrapDisabled: i,
                        children: (0, y.jsxs)("div", {
                            id: "issue-viewer-side-panel",
                            className: r6.IssueSidePanelContent,
                            children: [
                                (0, y.jsx)("span", {
                                    tabIndex: -1,
                                    ref: n,
                                    ...(0, n2.G)("side-panel-focus-target"),
                                }),
                                l,
                            ],
                        }),
                    });
                },
                r8 = ({ onClose: e, children: l }) =>
                    (0, y.jsx)(r4.R, {
                        children: (0, y.jsx)(r9, { onClose: e, children: l }),
                    });
            try {
                r9.displayName || (r9.displayName = "IssueSidePanelInternal");
            } catch {}
            try {
                r8.displayName || (r8.displayName = "IssueSidePanel");
            } catch {}
            var oe = a(15220),
                ol = a(61864);
            let oa = (e, l, a = 0) => {
                let n = (0, e7.Z)(),
                    {
                        viewPosition: s,
                        setViewPosition: i,
                        activeSearchQuery: t,
                        setIsNewView: r,
                    } = eM(),
                    { viewId: o } = li(),
                    { knownViewRoutes: u } = ei(),
                    d = (0, b.useCallback)(() => {
                        let l = e.findIndex((e) => e.id === o);
                        return (
                            s || -1 === l || i(e[l].position),
                            -1 === l && (l = e.findIndex((e) => e.query === t)),
                            l
                        );
                    }, [e, s, o, i, t]),
                    c = (0, b.useCallback)(
                        (e) => {
                            (r(!1),
                                e.query
                                    ? n(ar({ viewId: e.id, query: void 0 }))
                                    : e.url && n(e.url),
                                i(e.position));
                        },
                        [n, r, i]
                    ),
                    m = (0, b.useCallback)(
                        (l) => {
                            !isNaN(l) && l >= 0 && l < e.length && c(e[l]);
                        },
                        [c, e]
                    ),
                    g = (0, b.useCallback)(
                        (e) => {
                            e.altKey &&
                                e.shiftKey &&
                                m(
                                    parseInt(
                                        e.code.substring(e.code.length - 1),
                                        10
                                    ) -
                                        a -
                                        1
                                );
                        },
                        [a, m]
                    ),
                    p = (0, b.useCallback)(
                        (l) => {
                            if (l.altKey && l.shiftKey) {
                                let a = d();
                                -1 === a
                                    ? s === u.length + 1 && "ArrowUp" === l.key
                                        ? m(e.length - 1)
                                        : s === u.length &&
                                          "ArrowDown" === l.key &&
                                          m(0)
                                    : a >= 1 && "ArrowUp" === l.key
                                      ? m(a - 1)
                                      : a + 1 < e.length &&
                                        "ArrowDown" === l.key &&
                                        m(a + 1);
                            }
                        },
                        [d, e.length, s, u.length, m]
                    );
                ((0, ay._)([ag.up, ag.down], p), (0, ay._)(l, g));
            };
            var on = a(54589);
            let os = { wrapper: "CallToActionItem-module__wrapper--tW9wL" };
            function oi({ showBetaPill: e }) {
                let l = (0, k.G7)("lifecycle_label_name_updates");
                return (0, y.jsx)("div", {
                    className: os.wrapper,
                    children:
                        e &&
                        (0, y.jsx)(on.X, { children: l ? U.preview : U.beta }),
                });
            }
            try {
                oi.displayName || (oi.displayName = "CallToActionItem");
            } catch {}
            let ot = {
                AppTitleContainer: "AppTitle-module__AppTitleContainer--Lpwx3",
                Heading: "AppTitle-module__Heading--K9xgc",
            };
            function or() {
                return (0, y.jsx)("div", {
                    className: ot.AppTitleContainer,
                    children: (0, y.jsx)(e8.A, {
                        id: "sidebar-title",
                        as: "h2",
                        className: ot.Heading,
                        children: (0, y.jsx)("span", { children: U.appHeader }),
                    }),
                });
            }
            try {
                or.displayName || (or.displayName = "AppTitle");
            } catch {}
            let oo = {
                navItem: "SavedViewItem-module__navItem--_X9cB",
                itemText: "SavedViewItem-module__itemText--MKHIQ",
                truncatedItemText:
                    "SavedViewItem-module__truncatedItemText--Pkqut",
                icon: "SavedViewItem-module__icon--XK10s",
            };
            function ou({
                id: e,
                icon: l,
                Icon: a,
                color: n,
                title: s,
                position: i,
                query: t,
            }) {
                let {
                        setViewPosition: r,
                        setCanEditView: o,
                        isNewView: u,
                        setIsNewView: d,
                        setCurrentPage: c,
                        currentViewId: m,
                        setIsEditing: g,
                        dirtyViewId: p,
                    } = eM(),
                    {
                        dirtyDescription: k,
                        dirtySearchQuery: h,
                        dirtyTitle: f,
                        clearSavedViewEditState: C,
                    } = eV(),
                    { closeNavigation: L } = F(),
                    { navigateToUrl: v } = a_(),
                    _ = (0, er.useRelayEnvironment)(),
                    x = (0, e7.Z)(),
                    w = (0, rG.S)(),
                    N = e === m,
                    j = ar({ viewId: e, query: t }),
                    R = (0, b.useCallback)(async () => {
                        (v(j), c(1));
                    }, [v, j, c]),
                    P = (0, b.useCallback)(() => {
                        void 0 !== p &&
                            r_({
                                environment: _,
                                input: { shortcutId: p },
                                onError: K.l,
                                onCompleted: K.l,
                            });
                    }, [p, _]),
                    T = (0, b.useCallback)(async () => {
                        if (e === S.repository) return R();
                        if (
                            u &&
                            (f !== U.views.defaultName || "" !== h || "" !== k)
                        ) {
                            if (
                                !(await w({
                                    title: U.views.unsavedChangesTitle,
                                    content: U.views.unsavedChangesContent,
                                    confirmButtonType: "danger",
                                }))
                            )
                                return;
                            P();
                        }
                        (g(!1), d(!1), x(j), C(), r(i), o(!0), L());
                    }, [e, u, f, h, k, g, d, x, j, C, r, i, o, L, R, w, P]),
                    A = (0, b.useCallback)(
                        (e) => {
                            (T(), e.preventDefault(), e.stopPropagation());
                        },
                        [T]
                    );
                return (0, y.jsx)(ol.c.Item, {
                    to: j,
                    as: I.N_,
                    "aria-current": N ? "page" : void 0,
                    onClick: A,
                    className: oo.navItem,
                    children: (0, y.jsxs)("div", {
                        className: oo.itemText,
                        children: [
                            (0, y.jsx)("div", {
                                className: oo.icon,
                                "data-color": n.toLowerCase(),
                                children: a
                                    ? (0, y.jsx)(a, {})
                                    : l
                                      ? (0, y.jsx)(nT.A, { icon: q(l) })
                                      : null,
                            }),
                            (0, y.jsx)("span", {
                                className: oo.truncatedItemText,
                                children: s,
                            }),
                        ],
                    }),
                });
            }
            try {
                ou.displayName || (ou.displayName = "SavedViewItem");
            } catch {}
            let od = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SavedViewsShortcutsFragment",
                selections: [
                    {
                        alias: null,
                        args: [
                            { kind: "Literal", name: "first", value: 25 },
                            {
                                kind: "Literal",
                                name: "searchTypes",
                                value: ["ISSUES"],
                            },
                        ],
                        concreteType: "SearchShortcutConnection",
                        kind: "LinkedField",
                        name: "shortcuts",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "SearchShortcut",
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "name",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "query",
                                        storageKey: null,
                                    },
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "SavedViewRow",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey:
                            'shortcuts(first:25,searchTypes:["ISSUES"])',
                    },
                ],
                type: "UserDashboard",
                abstractKey: null,
            };
            od.hash = "54b562703acca0689408ea22e5656e42";
            let oc = { disabled: "CreateSavedView-module__disabled--HLIuj" };
            function om({ disabled: e }) {
                let {
                        commitUserViewCreate: l,
                        dirtyDescription: a,
                        dirtySearchQuery: n,
                        dirtyTitle: s,
                    } = eV(),
                    { dirtyViewId: i, setDirtyViewId: t, isNewView: r } = eM(),
                    o = (0, er.useRelayEnvironment)(),
                    u = (0, rG.S)(),
                    [d, c] = (0, b.useState)(!1),
                    { navigateToSavedView: m } = a_(),
                    g = (0, b.useCallback)(() => {
                        c(!0);
                    }, [c]),
                    p = (0, b.useCallback)(() => {
                        void 0 !== i &&
                            r_({
                                environment: o,
                                input: { shortcutId: i },
                                onError: K.l,
                                onCompleted: K.l,
                            });
                    }, [i, o]),
                    k = (0, b.useCallback)(async () => {
                        if (
                            r &&
                            (s !== U.views.defaultName || "" !== n || "" !== a)
                        ) {
                            if (
                                !(await u({
                                    title: U.views.unsavedChangesTitle,
                                    content: U.views.unsavedChangesContent,
                                    confirmButtonType: "danger",
                                }))
                            )
                                return;
                            p();
                        }
                        l({
                            onSuccess: ({
                                createDashboardSearchShortcut: e,
                            }) => {
                                e?.shortcut &&
                                    (t(e.shortcut.id),
                                    m(e.shortcut.id, { isNewView: !0 }));
                            },
                            relayEnvironment: o,
                        });
                    }, [l, u, p, a, n, s, r, m, o, t]);
                return (0, y.jsxs)(y.Fragment, {
                    children: [
                        (0, y.jsx)(lQ.K, {
                            icon: T.PlusIcon,
                            size: "small",
                            variant: "invisible",
                            "aria-label": e
                                ? U.views.maxViewsTooltip
                                : U.views.createLink,
                            onClick: e ? g : k,
                            className: e ? oc.disabled : "",
                            inactive: e,
                        }),
                        e &&
                            d &&
                            (0, y.jsx)(oe.l, {
                                title: `${U.views.maxViewsTooltip} (${E.viewsPageSize})`,
                                onClose: () => c(!1),
                                children: U.views.maxViewsDescription,
                            }),
                    ],
                });
            }
            try {
                om.displayName || (om.displayName = "CreateSavedView");
            } catch {}
            let og = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "name",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "SavedViewRow",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "icon",
                            storageKey: null,
                        },
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "query",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "scopingRepository",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "SearchShortcut",
                    abstractKey: null,
                };
            })();
            function op({ savedView: e, position: l }) {
                let a = (0, aF.useFragment)(og, e);
                return (
                    a &&
                    (0, y.jsx)(
                        ou,
                        {
                            id: a.id,
                            position: l,
                            icon: a.icon,
                            color: a.color,
                            title: a.name,
                            description: a.description,
                            query: ((e) => {
                                let l = e.query,
                                    a = e.scopingRepository;
                                return a
                                    ? `repo:${a.owner.login}/${a.name} ${l}`
                                    : l;
                            })(a),
                        },
                        a.id
                    )
                );
            }
            og.hash = "ccf64a6e8946f133ba890e4c61f6e60e";
            try {
                op.displayName || (op.displayName = "SavedViewRow");
            } catch {}
            let oy = {
                headerRow: "SavedViews-module__headerRow--JHWUB",
                savedViewsList: "SavedViews-module__savedViewsList--CZ1Yt",
            };
            function ok({ savedViewsRef: e }) {
                let l = (0, er.usePreloadedQuery)(eE, e);
                return l.viewer.dashboard
                    ? (0, y.jsx)(oh, { savedViewsRef: l.viewer.dashboard })
                    : null;
            }
            function oh({ savedViewsRef: e }) {
                let { knownViews: l } = ei(),
                    { setSavedViewsCount: a } = eM(),
                    n = (0, er.useFragment)(od, e),
                    s = (0, b.useMemo)(
                        () => n.shortcuts.nodes || [],
                        [n.shortcuts.nodes]
                    );
                (0, b.useEffect)(() => {
                    a(n.shortcuts.totalCount);
                }, [n, a]);
                let i = (0, b.useMemo)(
                        () =>
                            s
                                .filter(ob)
                                .map((e, a) => ({
                                    id: e.id,
                                    name: e.name,
                                    query: e.query,
                                    position: a + l.length + 1,
                                })),
                        [l.length, s]
                    ),
                    t = (0, b.useMemo)(
                        () => i?.map((e) => e.position.toString()),
                        [i]
                    );
                return (
                    oa(i, t, l.length),
                    (0, y.jsxs)(y.Fragment, {
                        children: [
                            (0, y.jsxs)("div", {
                                className: `d-flex flex-items-center ${oy.headerRow}`,
                                children: [
                                    (0, y.jsx)("span", {
                                        className: "flex-1",
                                        children: U.viewsTitle,
                                    }),
                                    (0, y.jsx)(om, {
                                        disabled: s.length >= E.viewsPageSize,
                                    }),
                                ],
                            }),
                            (0, y.jsx)(ol.c, {
                                "aria-label": U.viewsTitle,
                                className: oy.savedViewsList,
                                children:
                                    s.length > 0 &&
                                    s
                                        .filter(ob)
                                        .map((e, l) =>
                                            (0, y.jsx)(
                                                op,
                                                {
                                                    savedView: e,
                                                    position: l + 1,
                                                },
                                                e.id
                                            )
                                        ),
                            }),
                        ],
                    })
                );
            }
            function ob(e) {
                return null != e;
            }
            try {
                ok.displayName || (ok.displayName = "SavedViews");
            } catch {}
            try {
                oh.displayName || (oh.displayName = "SavedViewsInternal");
            } catch {}
            let of = {
                    SavedViewsList: "Sidebar-module__SavedViewsList--gjKCu",
                    SidebarContainer: "Sidebar-module__SidebarContainer--kYEwB",
                    sidebarFooter: "Sidebar-module__sidebarFooter--yPHGM",
                },
                oC = {
                    SavedViewsList:
                        "SidebarLoading-module__SavedViewsList--DkpxY",
                    LoadingViewsList:
                        "SidebarLoading-module__LoadingViewsList--XVSUU",
                    SidebarLoadingContainer:
                        "SidebarLoading-module__SidebarLoadingContainer--At91F",
                    sidebarLoadingFooter:
                        "SidebarLoading-module__sidebarLoadingFooter--QyUEq",
                    ctaContainer: "SidebarLoading-module__ctaContainer--wWaAt",
                };
            var oF = a(66108),
                oS = a(55255);
            function oL({
                icon: e,
                title: l,
                id: a,
                path: n,
                tooltip: s,
                onClick: i,
            }) {
                let t = (() => {
                    let e = (A.fV?.pathname).split("/");
                    return 0 === e.length ? "" : e[e.length - 1];
                })();
                return (0, y.jsxs)(ol.c.Item, {
                    as: oF.N,
                    "aria-current": t === a ? "page" : void 0,
                    to: n,
                    onClick: i,
                    children: [
                        (0, y.jsx)(ol.c.LeadingVisual, {
                            children: (0, y.jsx)(nT.A, { icon: e }),
                        }),
                        (0, y.jsx)(oS.A, { "aria-label": s, children: l }),
                    ],
                });
            }
            try {
                oL.displayName || (oL.displayName = "SidebarRow");
            } catch {}
            function oK() {
                let { knownViews: e } = ei(),
                    l = e
                        .filter((e) => !e.hidden)
                        .map((e, l) =>
                            e.url
                                ? (0, y.jsx)(
                                      oL,
                                      {
                                          icon: q(e.icon),
                                          id: e.id,
                                          path: e.url,
                                          title: e.name,
                                          tooltip: "",
                                      },
                                      e.id
                                  )
                                : (0, y.jsx)(
                                      ou,
                                      {
                                          id: e.id,
                                          icon: e.icon,
                                          color: E.defaultViewColor,
                                          title: e.name,
                                          query: e.query,
                                          position: l + 1,
                                      },
                                      e.id
                                  )
                        );
                return (0, y.jsxs)("nav", {
                    "aria-labelledby": "sidebar-title",
                    className: oC.SidebarLoadingContainer,
                    children: [
                        (0, y.jsx)("div", {
                            className: "sr-only",
                            "aria-hidden": "true",
                            children: (0, y.jsx)(or, {}),
                        }),
                        (0, y.jsx)(ol.c, {
                            "aria-label": U.defaultViews,
                            className: oC.SavedViewsList,
                            children: l,
                        }),
                        (0, y.jsx)(ol.c, {
                            className: oC.LoadingViewsList,
                            children: [...Array(E.viewLoadingSize)].map(
                                (e, l) =>
                                    (0, y.jsxs)(
                                        ol.c.Item,
                                        {
                                            children: [
                                                (0, y.jsx)(ol.c.LeadingVisual, {
                                                    children: (0, y.jsx)(r1.Q, {
                                                        borderRadius:
                                                            "elliptical",
                                                        height: "md",
                                                        width: "md",
                                                    }),
                                                }),
                                                (0, y.jsx)(r1.Q, {
                                                    height: "sm",
                                                    width: "random",
                                                }),
                                            ],
                                        },
                                        l
                                    )
                            ),
                        }),
                        (0, y.jsx)("div", {
                            className: oC.sidebarLoadingFooter,
                            children: (0, y.jsx)("div", {
                                className: oC.ctaContainer,
                                children: (0, y.jsx)(oi, {}),
                            }),
                        }),
                    ],
                });
            }
            try {
                oK.displayName || (oK.displayName = "SidebarLoading");
            } catch {}
            let ov = ({ customViewsRef: e, isFullHeight: l }) =>
                e
                    ? (0, y.jsx)(b.Suspense, {
                          fallback: (0, y.jsx)(oK, {}),
                          children: (0, y.jsx)(oI, {
                              customViewsRef: e,
                              isFullHeight: l,
                          }),
                      })
                    : (0, y.jsx)(oK, {});
            function oI({ customViewsRef: e, isFullHeight: l }) {
                let { knownViews: a, knownViewRoutes: n } = ei(),
                    { isNavigationOpen: s } = F();
                oa(
                    n,
                    (0, b.useMemo)(
                        () => a.map((e, l) => (l + 1).toString()),
                        [a]
                    )
                );
                let i = a
                    .filter((e) => !e.hidden)
                    .map((e, l) =>
                        e.url
                            ? (0, y.jsx)(
                                  oL,
                                  {
                                      title: e.name,
                                      icon: q(e.icon),
                                      id: e.id,
                                      path: e.url,
                                      tooltip: e.name,
                                  },
                                  e.id
                              )
                            : (0, y.jsx)(
                                  ou,
                                  {
                                      id: e.id,
                                      position: l + 1,
                                      icon: e.icon,
                                      color: E.defaultViewColor,
                                      title: e.name,
                                  },
                                  e.id
                              )
                    );
                return (0, y.jsxs)(le.az, {
                    as: s ? "div" : "nav",
                    "aria-labelledby": "sidebar-title",
                    sx: { height: l ? "calc(100vh - 64px)" : "auto" },
                    className: of.SidebarContainer,
                    children: [
                        (0, y.jsx)("div", {
                            className: "sr-only",
                            "aria-hidden": "true",
                            children: (0, y.jsx)(or, {}),
                        }),
                        (0, y.jsx)(ol.c, {
                            "aria-label": U.defaultViews,
                            className: of.SavedViewsList,
                            children: i,
                        }),
                        (0, y.jsx)(ok, { savedViewsRef: e }),
                        (0, y.jsx)("div", {
                            className: of.sidebarFooter,
                            children: (0, y.jsx)(oi, {}),
                        }),
                    ],
                });
            }
            try {
                ov.displayName || (ov.displayName = "Sidebar");
            } catch {}
            try {
                oI.displayName || (oI.displayName = "SidebarInternal");
            } catch {}
            function o_({ customViewsRef: e }) {
                let { isNavigationOpen: l, closeNavigation: a } = F();
                return l
                    ? (0, y.jsx)(oe.l, {
                          width: "large",
                          title: U.allViews,
                          onClose: a,
                          children: (0, y.jsx)(ov, { customViewsRef: e }),
                      })
                    : null;
            }
            try {
                o_.displayName || (o_.displayName = "MobileNavigation");
            } catch {}
            let ox = {
                    searchListContainer:
                        "IssueDashboardCustomViewPage-module__searchListContainer--cGCg0",
                },
                ow = ({
                    queries: {
                        pageQuery: e,
                        currentViewQuery: l,
                        customViewsQuery: a,
                    },
                }) => {
                    let n = (0, v.X)(),
                        s =
                            n?.current_user_settings?.use_single_key_shortcut ||
                            !1,
                        {
                            sidePanelItemIdentifier: i,
                            setSidePanelItemIdentifier: t,
                            sidePanelItemURL: r,
                            onCloseSidePanel: o,
                            onParentIssueActivate: u,
                        } = li(),
                        { queryRef: d } = ll(e, eO),
                        { queryRef: c } = ll(l, eq),
                        { queryRef: m } = ll(a, eE),
                        { setCurrentViewId: g } = eM(),
                        { pathname: p } = (0, I.zy)(),
                        k = p.split("/").pop();
                    (0, b.useEffect)(() => {
                        g(k || S.empty);
                    }, [k, e, g]);
                    let h = (0, b.useCallback)(
                        (e) => {
                            let { owner: l, repo: a, number: n } = e;
                            t({ owner: l, repo: a, number: n, type: "Issue" });
                        },
                        [t]
                    );
                    return c && d && m
                        ? (0, y.jsxs)(y.Fragment, {
                              children: [
                                  (0, y.jsx)(oN, {
                                      pageQueryRef: d,
                                      currentViewQueryRef: c,
                                      savedViewsQueryRef: m,
                                      onSidePanelNavigate: t,
                                  }),
                                  i &&
                                      (0, y.jsx)(r8, {
                                          onClose: o,
                                          children: (0, y.jsx)(lE.cI, {
                                              itemIdentifier: i,
                                              optionConfig: Object.assign(
                                                  {},
                                                  lq.C,
                                                  {
                                                      shouldSkipSetDocumentTitle:
                                                          !0,
                                                      onClose: o,
                                                      insideSidePanel: !0,
                                                      showRepositoryPill: !0,
                                                      singleKeyShortcutsEnabled:
                                                          s,
                                                      onSubIssueClick: h,
                                                      onParentIssueActivate: u,
                                                      navigateBack: o,
                                                      additionalHeaderActions:
                                                          (0, y.jsx)(lQ.K, {
                                                              as: "a",
                                                              role: "link",
                                                              variant:
                                                                  "invisible",
                                                              icon: T.ScreenFullIcon,
                                                              "aria-label":
                                                                  U.sidePanelTooltip,
                                                              href: r,
                                                          }),
                                                  }
                                              ),
                                          }),
                                      }),
                              ],
                          })
                        : null;
                };
            function oN({
                pageQueryRef: e,
                currentViewQueryRef: l,
                savedViewsQueryRef: a,
                onSidePanelNavigate: n,
            }) {
                let { itemIdentifier: s } = li(),
                    i = (0, er.usePreloadedQuery)(eO, e),
                    t = (0, er.usePreloadedQuery)(eq, l),
                    r = (0, er.useFragment)(lM, i),
                    o = (0, er.useFragment)(lV, t.node);
                if (!t.node || !o || !a) return null;
                let u = (0, k.G7)("global_sso_banner");
                return (0, y.jsxs)(lt, {
                    category: "Issues Dashboard",
                    children: [
                        u && (0, y.jsx)(lD.Y0, {}),
                        (0, y.jsx)(l$, {
                            leftPaneWidth: "small",
                            leftPane: {
                                element: (0, y.jsx)(ov, {
                                    customViewsRef: a,
                                    isFullHeight: !0,
                                }),
                                ariaLabel: U.viewSidebarPaneAriaLabel,
                            },
                            middlePane: (0, y.jsxs)("div", {
                                className: ox.searchListContainer,
                                children: [
                                    (0, y.jsx)(b.Suspense, {
                                        fallback: (0, y.jsx)(r0, {}),
                                        children: (0, y.jsx)(rY, {
                                            setSafeDocumentTitle: !!s?.number,
                                            currentViewKey: o,
                                        }),
                                    }),
                                    (0, y.jsx)(rT, {
                                        currentView: t.node,
                                        onSidePanelNavigate: n,
                                        itemIdentifier: s,
                                        search: r,
                                        showSsoBanner: !u,
                                    }),
                                ],
                            }),
                        }),
                        (0, y.jsx)(o_, { customViewsRef: a }),
                    ],
                });
            }
            try {
                oN.displayName ||
                    (oN.displayName = "IssueDashboardCustomViewPageContent");
            } catch {}
            let oj = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ListCurrentViewFragment",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchCurrentViewFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "HeaderCurrentViewFragment",
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            oj.hash = "05ee3fdaa319a2a74e5b5a03a864a22f";
            let oR = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ListRepositoryFragment",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchRepositoryFragment",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            oR.hash = "43412226b117b1577ed7fcaed18f763d";
            let oP = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchRepository",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "ListQuery",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "fetchRepository",
                                variableName: "fetchRepository",
                            },
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "labelPageSize",
                                variableName: "labelPageSize",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "SearchRootFragment",
                    },
                ],
                type: "Searchable",
                abstractKey: "__isSearchable",
            };
            oP.hash = "fffb2a7f82c540775dec16181b7de01e";
            let oT = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchRepository",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "SearchRootFragment",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "fetchRepository",
                                variableName: "fetchRepository",
                            },
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "labelPageSize",
                                variableName: "labelPageSize",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "SearchList",
                    },
                ],
                type: "Searchable",
                abstractKey: "__isSearchable",
            };
            oT.hash = "a60cb5e484347caebc0f83a2894c42e9";
            let oA = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SearchRepositoryFragment",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchListRepo",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchBarRepo",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            oA.hash = "106cc34171464a5987f090b0f9c7ff7e";
            let oM = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SearchCurrentViewFragment",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchBarCurrentViewFragment",
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            oM.hash = "866bc486e7c985c0348b2a2761417fad";
            let oV = {
                SearchContainer: "Search-module__SearchContainer--CkrWX",
            };
            function oD({
                itemIdentifier: e,
                currentViewKey: l,
                currentRepository: a,
                search: n,
                loadSearchQuery: s,
                queryFromCustomView: i,
                onSidePanelNavigate: t,
                showSsoBanner: r,
            }) {
                let { ssoOrgs: o } = (0, lW.N)(),
                    u = o.map((e) => e.login).filter((e) => void 0 !== e),
                    d = (0, er.useFragment)(oT, n),
                    c = (0, er.useFragment)(oA, a),
                    m = (0, er.useFragment)(oM, l),
                    { activeSearchQuery: g, isNewView: p } = eM(),
                    k = (0, b.useRef)(void 0);
                return (0, y.jsxs)("div", {
                    className: oV.SearchContainer,
                    children: [
                        (0, y.jsx)(no, {
                            currentViewKey: m,
                            currentRepository: c ?? null,
                            queryFromCustomView: i,
                        }),
                        p && !g
                            ? (0, y.jsx)(l2, {})
                            : (0, y.jsxs)(y.Fragment, {
                                  children: [
                                      r &&
                                          (0, y.jsx)(lH.x, {
                                              protectedOrgs: u,
                                          }),
                                      (0, y.jsx)(rK, {
                                          itemIdentifier: e,
                                          search: d,
                                          repository: c ?? null,
                                          loadSearchQuery: s,
                                          query: g,
                                          queryFromCustomView: i,
                                          listRef: k,
                                          onSidePanelNavigate: t,
                                      }),
                                  ],
                              }),
                    ],
                });
            }
            try {
                oD.displayName || (oD.displayName = "Search");
            } catch {}
            let oE = ({
                    fetchedView: e,
                    fetchedRepository: l,
                    search: a,
                    loadSearchQuery: n,
                    queryFromCustomView: s,
                    onCollapse: i,
                    onSidePanelNavigate: t,
                    showSsoBanner: r,
                }) => {
                    let o = (0, er.useFragment)(oj, e),
                        u = (0, er.useFragment)(oR, l || null),
                        d = (0, er.useFragment)(oP, a),
                        { itemIdentifier: c } = li();
                    return (0, y.jsxs)(le.az, {
                        sx: {
                            display: "flex",
                            flexDirection: "column",
                            gap: 2,
                            maxWidth: "100%",
                        },
                        children: [
                            o &&
                                (0, y.jsx)(b.Suspense, {
                                    fallback: (0, y.jsx)(r0, {}),
                                    children: (0, y.jsx)(rY, {
                                        setSafeDocumentTitle: !!c?.number,
                                        currentViewKey: o,
                                        onCollapse: i,
                                    }),
                                }),
                            o &&
                                d &&
                                (0, y.jsx)(oD, {
                                    itemIdentifier: c,
                                    currentViewKey: o,
                                    currentRepository: u ?? null,
                                    search: d,
                                    loadSearchQuery: n,
                                    queryFromCustomView: s,
                                    onSidePanelNavigate: t,
                                    showSsoBanner: r,
                                }),
                        ],
                    });
                },
                oq = (0, b.memo)(oE);
            try {
                oE.displayName || (oE.displayName = "ListInternal");
            } catch {}
            try {
                oq.displayName || (oq.displayName = "List");
            } catch {}
            let oO = ({ queries: { pageQuery: e, customViewsQuery: l } }) => {
                let a = (0, v.X)(),
                    n = a?.current_user_settings?.use_single_key_shortcut || !1,
                    {
                        sidePanelItemIdentifier: s,
                        setSidePanelItemIdentifier: i,
                        sidePanelItemURL: t,
                        onCloseSidePanel: r,
                        onParentIssueActivate: o,
                    } = li(),
                    { queryRef: u, loadQuery: d } = ll(e, eB),
                    { queryRef: c } = ll(l, eE),
                    { setCurrentViewId: m } = eM(),
                    { pathname: g } = (0, I.zy)(),
                    p = g.split("/").pop();
                (0, b.useEffect)(() => {
                    m(p || S.empty);
                }, [p, e, m]);
                let k = (0, b.useCallback)(
                    (e) => {
                        let { owner: l, repo: a, number: n } = e;
                        i({ owner: l, repo: a, number: n, type: "Issue" });
                    },
                    [i]
                );
                return u && c
                    ? (0, y.jsxs)(y.Fragment, {
                          children: [
                              (0, y.jsx)(oB, {
                                  id: p,
                                  pageQueryRef: u,
                                  loadQuery: d,
                                  savedViewsQueryRef: c,
                                  onSidePanelNavigate: i,
                              }),
                              s &&
                                  (0, y.jsx)(r8, {
                                      onClose: r,
                                      children: (0, y.jsx)(lE.cI, {
                                          itemIdentifier: s,
                                          optionConfig: Object.assign(
                                              {},
                                              lq.C,
                                              {
                                                  shouldSkipSetDocumentTitle:
                                                      !0,
                                                  onClose: r,
                                                  insideSidePanel: !0,
                                                  showRepositoryPill: !0,
                                                  singleKeyShortcutsEnabled: n,
                                                  onSubIssueClick: k,
                                                  onParentIssueActivate: o,
                                                  navigateBack: r,
                                                  additionalHeaderActions: (0,
                                                  y.jsx)(lQ.K, {
                                                      as: "a",
                                                      role: "link",
                                                      variant: "invisible",
                                                      icon: T.ScreenFullIcon,
                                                      "aria-label":
                                                          U.sidePanelTooltip,
                                                      href: t,
                                                  }),
                                              }
                                          ),
                                      }),
                                  }),
                          ],
                      })
                    : null;
            };
            function oB({
                id: e,
                pageQueryRef: l,
                loadQuery: a,
                savedViewsQueryRef: n,
                onSidePanelNavigate: s,
            }) {
                let i = (0, er.usePreloadedQuery)(eB, l),
                    t = (0, er.useLazyLoadQuery)(
                        eq,
                        { id: e },
                        { fetchPolicy: "store-only" }
                    ),
                    r = (0, k.G7)("global_sso_banner");
                return (0, y.jsxs)(lt, {
                    category: "Issues Dashboard",
                    children: [
                        r && (0, y.jsx)(lD.Y0, {}),
                        (0, y.jsx)(l$, {
                            leftPaneWidth: "small",
                            leftPane: {
                                element: (0, y.jsx)(ov, {
                                    customViewsRef: n,
                                    isFullHeight: !0,
                                }),
                                ariaLabel: U.viewSidebarPaneAriaLabel,
                            },
                            middlePane: t.node
                                ? (0, y.jsx)(oq, {
                                      fetchedView: t.node,
                                      search: i,
                                      fetchedRepository: null,
                                      loadSearchQuery: a,
                                      onSidePanelNavigate: s,
                                      showSsoBanner: !r,
                                  })
                                : void 0,
                        }),
                        (0, y.jsx)(o_, { customViewsRef: n }),
                    ],
                });
            }
            try {
                oB.displayName ||
                    (oB.displayName = "IssueDashboardKnownViewPageContent");
            } catch {}
            let o$ = ({ queries: { pageQuery: e, customViewsQuery: l } }) => {
                let a = (0, v.X)(),
                    n = a?.current_user_settings?.use_single_key_shortcut || !1,
                    {
                        sidePanelItemIdentifier: s,
                        setSidePanelItemIdentifier: i,
                        sidePanelItemURL: t,
                        onCloseSidePanel: r,
                        onParentIssueActivate: o,
                    } = li(),
                    { queryRef: u, loadQuery: d } = ll(e, e$),
                    { queryRef: c } = ll(l, eE),
                    { navigateToView: m } = a_(),
                    { search: g } = (0, I.zy)(),
                    p = (0, b.useCallback)(
                        (e) => {
                            let { owner: l, repo: a, number: n } = e;
                            i({ owner: l, repo: a, number: n, type: "Issue" });
                        },
                        [i]
                    );
                return u && c
                    ? new URLSearchParams(g).get("q")
                        ? (0, y.jsxs)(y.Fragment, {
                              children: [
                                  (0, y.jsx)(oQ, {
                                      pageQueryRef: u,
                                      loadQuery: d,
                                      savedViewsQueryRef: c,
                                      onSidePanelNavigate: i,
                                  }),
                                  s &&
                                      (0, y.jsx)(r8, {
                                          onClose: r,
                                          children: (0, y.jsx)(lE.cI, {
                                              itemIdentifier: s,
                                              optionConfig: Object.assign(
                                                  {},
                                                  lq.C,
                                                  {
                                                      shouldSkipSetDocumentTitle:
                                                          !0,
                                                      onClose: r,
                                                      insideSidePanel: !0,
                                                      showRepositoryPill: !0,
                                                      singleKeyShortcutsEnabled:
                                                          n,
                                                      onSubIssueClick: p,
                                                      onParentIssueActivate: o,
                                                      navigateBack: r,
                                                      additionalHeaderActions:
                                                          (0, y.jsx)(lQ.K, {
                                                              as: "a",
                                                              role: "link",
                                                              variant:
                                                                  "invisible",
                                                              icon: T.ScreenFullIcon,
                                                              "aria-label":
                                                                  U.sidePanelTooltip,
                                                              href: t,
                                                          }),
                                                  }
                                              ),
                                          }),
                                      }),
                              ],
                          })
                        : (m({ viewId: W.id, canEditView: !0 }), null)
                    : null;
            };
            function oQ({
                pageQueryRef: e,
                loadQuery: l,
                savedViewsQueryRef: a,
                onSidePanelNavigate: n,
            }) {
                let { setCurrentViewId: s } = eM();
                (0, b.useEffect)(() => {
                    s(ee.id);
                }, [s]);
                let i = (0, er.useLazyLoadQuery)(
                        eq,
                        { id: ee.id },
                        { fetchPolicy: "store-only" }
                    ),
                    t = (0, er.usePreloadedQuery)(e$, e);
                if (!i || !i.node) return null;
                let r = (0, k.G7)("global_sso_banner");
                return (0, y.jsxs)(lt, {
                    category: "Issues Dashboard",
                    children: [
                        r && (0, y.jsx)(lD.Y0, {}),
                        (0, y.jsx)(l$, {
                            leftPaneWidth: "small",
                            leftPane: {
                                element: (0, y.jsx)(ov, { customViewsRef: a }),
                                ariaLabel: U.viewSidebarPaneAriaLabel,
                            },
                            middlePane: (0, y.jsx)(oq, {
                                fetchedView: i.node,
                                fetchedRepository: null,
                                search: t,
                                loadSearchQuery: l,
                                onSidePanelNavigate: n,
                                showSsoBanner: !r,
                            }),
                        }),
                        (0, y.jsx)(o_, { customViewsRef: a }),
                    ],
                });
            }
            try {
                oQ.displayName ||
                    (oQ.displayName = "IssueDashboardPageContent");
            } catch {}
            let oU = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "id",
                                    variableName: "id",
                                },
                            ],
                            concreteType: "JobStatusUpdatedPayload",
                            kind: "LinkedField",
                            name: "jobStatusUpdated",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "JobStatus",
                                    kind: "LinkedField",
                                    name: "jobStatus",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "percentage",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "updatedAt",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "jobId",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "state",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "JobError",
                                            kind: "LinkedField",
                                            name: "executionErrors",
                                            plural: !0,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "message",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "nodeId",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "JobInfoWrapperStatusSubscription",
                        selections: l,
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "JobInfoWrapperStatusSubscription",
                        selections: l,
                    },
                    params: {
                        id: "c6c7ea78576b613fb09a4ef07b376577",
                        metadata: {},
                        name: "JobInfoWrapperStatusSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            oU.hash = "47f9aec1c876c707ac0b7a218fd72209";
            let oz = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    l = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    o = [
                        { kind: "Literal", name: "first", value: 20 },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    u = {
                        alias: null,
                        args: o,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            t,
                                            i,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            a,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "cursor",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "endCursor",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasNextPage",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey:
                            'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                    },
                    d = {
                        alias: null,
                        args: o,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            r,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            a,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                            n,
                        ],
                        storageKey: null,
                    },
                    k = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                s,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                                n,
                            ],
                            storageKey: null,
                        },
                    ],
                    h = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: k,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: k,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "JobInfoWrapperQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "fetchRepository",
                                                        value: !0,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "labelPageSize",
                                                        value: 20,
                                                    },
                                                ],
                                                kind: "FragmentSpread",
                                                name: "IssueRow",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "JobInfoWrapperQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    a,
                                    n,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            s,
                                            {
                                                alias: "titleHtml",
                                                args: null,
                                                kind: "ScalarField",
                                                name: "titleHTML",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: [n, i, t],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "number",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    i,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [a, r, n],
                                                        storageKey: null,
                                                    },
                                                    n,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            u,
                                                            d,
                                                            c,
                                                            m,
                                                            g,
                                                            p,
                                                            y,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "stateReason",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "state",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            h,
                                                        ],
                                                        type: "Issue",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            u,
                                                            d,
                                                            c,
                                                            m,
                                                            g,
                                                            p,
                                                            y,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "reviewDecision",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "isDraft",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "isInMergeQueue",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: "pullRequestState",
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "state",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            h,
                                                        ],
                                                        type: "PullRequest",
                                                        abstractKey: null,
                                                    },
                                                ],
                                                type: "IssueOrPullRequest",
                                                abstractKey:
                                                    "__isIssueOrPullRequest",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "c9d36c58474c6e66db301b7aefbb00d6",
                        metadata: {},
                        name: "JobInfoWrapperQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            oz.hash = "7309db0a39dad5a48c29b0b0bbc14f85";
            var oH = a(20928);
            function oW(e) {
                let l,
                    a,
                    n,
                    s,
                    i,
                    t,
                    r,
                    o = (0, tc.c)(22),
                    { children: u, bulkJobId: d, setBulkJobId: c } = e,
                    {
                        addPersistedToast: m,
                        addToast: g,
                        clearPersistedToast: p,
                    } = (0, _.Y6)(),
                    [k, h] = (0, b.useState)(null),
                    f = (0, er.useRelayEnvironment)(),
                    C = (0, b.useRef)(0),
                    [F, S] = (0, b.useState)(void 0),
                    L = (0, b.useRef)(null),
                    K = (0, b.useRef)(null),
                    v = (0, b.useRef)(!1);
                (o[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((l = () => () => {
                          L.current && clearTimeout(L.current);
                      }),
                      (a = []),
                      (o[0] = l),
                      (o[1] = a))
                    : ((l = o[0]), (a = o[1])),
                    (0, b.useEffect)(l, a),
                    o[2] !== p || o[3] !== c || o[4] !== k
                        ? ((n = () => {
                              (c(null),
                                  (C.current = 0),
                                  p(),
                                  k?.dispose(),
                                  h(null));
                          }),
                          (o[2] = p),
                          (o[3] = c),
                          (o[4] = k),
                          (o[5] = n))
                        : (n = o[5]));
                let I = n;
                o[6] !== m ||
                o[7] !== g ||
                o[8] !== d ||
                o[9] !== f ||
                o[10] !== I
                    ? ((s = (e) => ({
                          subscription: oU,
                          variables: { id: e },
                          onNext: (e) => {
                              let l;
                              if (
                                  !e ||
                                  !e.jobStatusUpdated ||
                                  !e.jobStatusUpdated.jobStatus
                              )
                                  return void I();
                              let { jobStatusUpdated: a } = e,
                                  n = a?.jobStatus,
                                  s =
                                      a?.jobStatus?.executionErrors?.length ??
                                      0;
                              if (!n) {
                                  (g({
                                      type: "error",
                                      message: "Bulk update had an error",
                                  }),
                                      I());
                                  return;
                              }
                              let i = new Date(n.updatedAt),
                                  t = Date.now() - i.getTime();
                              switch (n.state) {
                                  case "ERROR":
                                      (g({
                                          type: "error",
                                          message: "Bulk update had an error",
                                      }),
                                          I());
                                      break;
                                  case "PENDING":
                                  case "QUEUED":
                                      n.jobId
                                          ? m({
                                                message:
                                                    "Bulk update is pending",
                                                icon: (0, y.jsx)(
                                                    T.ClockIcon,
                                                    {}
                                                ),
                                                type: "info",
                                                role: "status",
                                            })
                                          : (g({
                                                type: "error",
                                                message:
                                                    "Bulk update could not be started, please try again later.",
                                            }),
                                            (0, eY.N7)(
                                                Error(
                                                    "Issue bulk edit job mutation did not create a job (no job id)"
                                                )
                                            ),
                                            I());
                                      break;
                                  case "STARTED":
                                      if (100 === C.current) break;
                                      if (
                                          (n.percentage &&
                                              n.percentage > C.current &&
                                              (C.current = n.percentage),
                                          (l = C.current),
                                          t > 3e5)
                                      ) {
                                          (I(),
                                              g({
                                                  type: "error",
                                                  message:
                                                      "The update operation has timed out but your changes might have been applied. Please check the items and, if needed, attempt the update again in a few minutes and contact us if the error persists.",
                                              }),
                                              (0, eY.N7)(
                                                  Error(
                                                      `Issue bulk edit job(${n.jobId}) did not advance after 5 minutes`
                                                  )
                                              ));
                                          break;
                                      }
                                      (L.current && clearTimeout(L.current),
                                          (L.current = setTimeout(() => {
                                              S(Date.now());
                                          }, 6e4)),
                                          d &&
                                              m({
                                                  message: `Bulk update is in progress ${l} % ${s > 0 ? `(${s} issues failing to update)` : ""}`,
                                                  icon: (0, y.jsx)(oH.d, {
                                                      progress: l / 100,
                                                  }),
                                                  type: "info",
                                                  role: "status",
                                              }));
                                      break;
                                  case "SUCCESS":
                                      if (
                                          ((C.current = 100),
                                          g({
                                              type: "success",
                                              message: `Bulk update completed ${s > 0 ? "with errors" : "successfully"}`,
                                          }),
                                          n.jobId &&
                                              n.jobId !== K.current &&
                                              (v.current = !1),
                                          n.jobId === K.current ||
                                              v.current ||
                                              ((0, nB.i)(
                                                  `Bulk update completed ${s > 0 ? "with errors" : "successfully"}`
                                              ),
                                              (v.current = !0),
                                              (K.current = n.jobId)),
                                          I(),
                                          s > 0)
                                      ) {
                                          let e = n.executionErrors.map(oG),
                                              l = f.getStore().getSource();
                                          ((e = e.filter((e) => l.has(e))),
                                              (0, er.fetchQuery)(
                                                  f,
                                                  oz,
                                                  { ids: e },
                                                  {
                                                      fetchPolicy:
                                                          "network-only",
                                                  }
                                              ).subscribe({}));
                                      }
                                      break;
                                  default:
                                      throw (
                                          I(),
                                          Error(
                                              `Unexpected job status: ${n.state}`
                                          )
                                      );
                              }
                          },
                      })),
                      (o[6] = m),
                      (o[7] = g),
                      (o[8] = d),
                      (o[9] = f),
                      (o[10] = I),
                      (o[11] = s))
                    : (s = o[11]);
                let x = s;
                return (
                    o[12] !== d ||
                    o[13] !== p ||
                    o[14] !== x ||
                    o[15] !== f ||
                    o[16] !== F ||
                    o[17] !== k
                        ? ((i = () => {
                              d
                                  ? (!k || F) &&
                                    (h((0, er.requestSubscription)(f, x(d))),
                                    F &&
                                        (0, eY.N7)(
                                            Error(
                                                `Issue bulk edit job(${d}) did not send an update after 1 minute (subscription msg not received)`
                                            )
                                        ),
                                    S(void 0))
                                  : p();
                          }),
                          (t = [x, f, d, h, F, k, p]),
                          (o[12] = d),
                          (o[13] = p),
                          (o[14] = x),
                          (o[15] = f),
                          (o[16] = F),
                          (o[17] = k),
                          (o[18] = i),
                          (o[19] = t))
                        : ((i = o[18]), (t = o[19])),
                    (0, b.useEffect)(i, t),
                    o[20] !== u
                        ? ((r = (0, y.jsx)(y.Fragment, { children: u })),
                          (o[20] = u),
                          (o[21] = r))
                        : (r = o[21]),
                    r
                );
            }
            function oG(e) {
                return e.nodeId;
            }
            try {
                oW.displayName || (oW.displayName = "JobInfoWithSubscription");
            } catch {}
            let oZ = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "node",
                        },
                    ],
                    l = [
                        { kind: "Variable", name: "id", variableName: "node" },
                    ],
                    a = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "ContributingGuidelines",
                                kind: "LinkedField",
                                name: "contributingGuidelines",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "firstTimeContributionLink",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Repository",
                        abstractKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "FirstTimeContributionBannerContributingGuidelinesQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [a],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "FirstTimeContributionBannerContributingGuidelinesQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    a,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "7adec652ef8f517f484da9e58d7a0b8b",
                        metadata: {},
                        name: "FirstTimeContributionBannerContributingGuidelinesQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            oZ.hash = "a3f69364d9a035e3974c1bbe5362d35c";
            let oX = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "FirstTimeContributionBanner",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: [
                            {
                                kind: "Literal",
                                name: "isPullRequests",
                                value: !1,
                            },
                        ],
                        kind: "ScalarField",
                        name: "showFirstTimeContributorBanner",
                        storageKey:
                            "showFirstTimeContributorBanner(isPullRequests:false)",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "CommunityProfile",
                        kind: "LinkedField",
                        name: "communityProfile",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "goodFirstIssueIssuesCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            oX.hash = "70d7c59b6eb3bd2d43672a5457a4bf4f";
            let oJ = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "DismissRepositoryNoticePayload",
                            kind: "LinkedField",
                            name: "dismissRepositoryNotice",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "clientMutationId",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "dismissFirstTimeContributionBannerForRepoMutation",
                        selections: l,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "dismissFirstTimeContributionBannerForRepoMutation",
                        selections: l,
                    },
                    params: {
                        id: "da3ddd34bd75926d4b320abbf42dba8b",
                        metadata: {},
                        name: "dismissFirstTimeContributionBannerForRepoMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            oJ.hash = "a7ab55b350a1a7ea25ac34d44f953470";
            let oY = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "DismissNoticePayload",
                            kind: "LinkedField",
                            name: "dismissNotice",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "clientMutationId",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "dismissFirstTimeContributionBannerMutation",
                        selections: l,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "dismissFirstTimeContributionBannerMutation",
                        selections: l,
                    },
                    params: {
                        id: "0ec27968d3caa9566cce5b4c519eaf3f",
                        metadata: {},
                        name: "dismissFirstTimeContributionBannerMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            oY.hash = "627f89c848988611d395dde7073ca948";
            let o1 = ({
                repoNameWithOwner: e,
                contributingGuidelinesUrl: l,
                hasGoodFirstIssueIssues: a,
                contributeUrl: n,
                dismissForAllRepos: s,
                dismissForThisRepo: i,
            }) =>
                (0, y.jsxs)("div", {
                    className:
                        "p-4 text-center rounded-2 border color-border-muted",
                    children: [
                        (0, y.jsx)("div", {
                            className: "float-right",
                            children: (0, y.jsxs)(i3.W, {
                                children: [
                                    (0, y.jsx)(i3.W.Button, {
                                        children: "Dismiss",
                                    }),
                                    (0, y.jsx)(i3.W.Overlay, {
                                        width: "medium",
                                        children: (0, y.jsxs)(np.l, {
                                            children: [
                                                (0, y.jsx)(np.l.Item, {
                                                    onSelect: i,
                                                    children:
                                                        "Dismiss for this repository only",
                                                }),
                                                (0, y.jsx)(np.l.Item, {
                                                    onSelect: s,
                                                    children:
                                                        "Dismiss for all repositories",
                                                }),
                                            ],
                                        }),
                                    }),
                                ],
                            }),
                        }),
                        (0, y.jsxs)("div", {
                            className: "col-8 mx-auto",
                            children: [
                                (0, y.jsxs)("h4", {
                                    className: "mb-2",
                                    children: [
                                        "\u{1F44B} Want to contribute to ",
                                        e,
                                        "?",
                                    ],
                                }),
                                (0, y.jsxs)("span", {
                                    children: [
                                        (0, y.jsx)("span", {
                                            children:
                                                "If you have a bug or an idea, read the ",
                                        }),
                                        (0, y.jsx)(e9.A, {
                                            href:
                                                l ??
                                                "https://opensource.guide/",
                                            target: "_blank",
                                            "data-testid":
                                                nD.ftcBannerContributingGuidelinesLink,
                                            children: "contributing guidelines",
                                        }),
                                        (0, y.jsx)("span", {
                                            children:
                                                " before opening an issue. ",
                                        }),
                                    ],
                                }),
                                a &&
                                    (0, y.jsxs)(y.Fragment, {
                                        children: [
                                            (0, y.jsx)("br", {}),
                                            (0, y.jsxs)("span", {
                                                children: [
                                                    (0, y.jsx)("span", {
                                                        children:
                                                            "If you're ready to tackle some open issues, ",
                                                    }),
                                                    (0, y.jsx)(e9.A, {
                                                        href: n,
                                                        target: "_blank",
                                                        "data-testid":
                                                            "repo-good-first-issues",
                                                        children:
                                                            "we've collected some good first issues for you.",
                                                    }),
                                                ],
                                            }),
                                        ],
                                    }),
                            ],
                        }),
                    ],
                });
            try {
                o1.displayName ||
                    (o1.displayName = "FirstTimeContributionBannerDisplay");
            } catch {}
            let o2 = ({ repository: e }) => {
                    let l = (0, er.useRelayEnvironment)(),
                        [a, n] = (0, er.useQueryLoader)(oZ),
                        s = (0, er.useFragment)(oX, e),
                        i = (0, b.useCallback)(() => {
                            !(function ({ environment: e, repositoryId: l }) {
                                (0, er.commitMutation)(e, {
                                    mutation: oJ,
                                    variables: {
                                        input: {
                                            notice: "first_time_contributor_issues_banner",
                                            repositoryId: l,
                                        },
                                    },
                                    updater: (e) => {
                                        let a = e.get(l);
                                        a &&
                                            a.setValue(
                                                !1,
                                                "showFirstTimeContributorBanner(isPullRequests:false)"
                                            );
                                    },
                                });
                            })({ environment: l, repositoryId: s.id });
                        }, [l, s.id]),
                        t = (0, b.useCallback)(() => {
                            !(function ({ environment: e, repositoryId: l }) {
                                (0, er.commitMutation)(e, {
                                    mutation: oY,
                                    variables: {
                                        input: {
                                            notice: "first_time_contributor_issues_banner",
                                        },
                                    },
                                    updater: (e) => {
                                        let a = e.get(l);
                                        a &&
                                            a.setValue(
                                                !1,
                                                "showFirstTimeContributorBanner(isPullRequests:false)"
                                            );
                                    },
                                });
                            })({ environment: l, repositoryId: s.id });
                        }, [l, s.id]);
                    (0, b.useEffect)(() => {
                        s.showFirstTimeContributorBanner && n({ node: s.id });
                    }, [n, s]);
                    let r = (0, b.useMemo)(
                        () =>
                            (0, y.jsx)(o1, {
                                repoNameWithOwner: s.nameWithOwner,
                                contributingGuidelinesUrl: void 0,
                                hasGoodFirstIssueIssues:
                                    !!s.communityProfile
                                        ?.goodFirstIssueIssuesCount,
                                contributeUrl: `${s.url}/contribute`,
                                dismissForThisRepo: i,
                                dismissForAllRepos: t,
                            }),
                        [
                            s.nameWithOwner,
                            s.communityProfile?.goodFirstIssueIssuesCount,
                            s.url,
                            i,
                            t,
                        ]
                    );
                    return s.showFirstTimeContributorBanner
                        ? a
                            ? (0, y.jsx)(b.Suspense, {
                                  fallback: r,
                                  children: (0, y.jsx)(o0, {
                                      queryRef: a,
                                      data: s,
                                      dismissForThisRepo: i,
                                      dismissForAllRepos: t,
                                  }),
                              })
                            : r
                        : null;
                },
                o0 = ({
                    data: e,
                    queryRef: l,
                    dismissForAllRepos: a,
                    dismissForThisRepo: n,
                }) => {
                    let { node: s } = (0, er.usePreloadedQuery)(oZ, l);
                    return (0, y.jsx)(o1, {
                        repoNameWithOwner: e.nameWithOwner,
                        contributingGuidelinesUrl:
                            s?.contributingGuidelines
                                ?.firstTimeContributionLink ?? void 0,
                        hasGoodFirstIssueIssues:
                            !!e.communityProfile?.goodFirstIssueIssuesCount,
                        contributeUrl: `${e.url}/contribute`,
                        dismissForThisRepo: n,
                        dismissForAllRepos: a,
                    });
                };
            try {
                o2.displayName ||
                    (o2.displayName = "FirstTimeContributionBanner");
            } catch {}
            try {
                o0.displayName ||
                    (o0.displayName = "FirstTimeContributionBannerInternal");
            } catch {}
            let o3 = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "PinnedIssues",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: [
                                { kind: "Literal", name: "first", value: 3 },
                            ],
                            concreteType: "PinnedIssueConnection",
                            kind: "LinkedField",
                            name: "pinnedIssues",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PinnedIssue",
                                    kind: "LinkedField",
                                    name: "nodes",
                                    plural: !0,
                                    selections: [
                                        e,
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issue",
                                            plural: !1,
                                            selections: [
                                                e,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "title",
                                                    storageKey: null,
                                                },
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "PinnedIssueIssue",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "totalCount",
                                    storageKey: null,
                                },
                            ],
                            storageKey: "pinnedIssues(first:3)",
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanPinIssues",
                            storageKey: null,
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            o3.hash = "6f99e78aa98c45e24d83e282f516fea3";
            var o4 = a(87670),
                o5 = a(4578);
            let o7 = {
                    couldNotUnpinIssue: "Could not unpin issue",
                    couldNotReorderPinnedIssues:
                        "Could not reorder pinned issues",
                },
                o6 = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "input",
                            },
                        ],
                        l = [
                            {
                                kind: "Variable",
                                name: "input",
                                variableName: "input",
                            },
                        ],
                        a = [{ kind: "Literal", name: "first", value: 3 }],
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        s = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        i = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        };
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "prioritizePinnedIssuesMutation",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType:
                                        "PrioritizePinnedIssuesPayload",
                                    kind: "LinkedField",
                                    name: "prioritizePinnedIssues",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Repository",
                                            kind: "LinkedField",
                                            name: "repository",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: a,
                                                    concreteType:
                                                        "PinnedIssueConnection",
                                                    kind: "LinkedField",
                                                    name: "pinnedIssues",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "PinnedIssue",
                                                            kind: "LinkedField",
                                                            name: "nodes",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "Issue",
                                                                    kind: "LinkedField",
                                                                    name: "issue",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            n,
                                                                            s,
                                                                            {
                                                                                args: null,
                                                                                kind: "FragmentSpread",
                                                                                name: "PinnedIssueIssue",
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey:
                                                        "pinnedIssues(first:3)",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "Mutation",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "prioritizePinnedIssuesMutation",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType:
                                        "PrioritizePinnedIssuesPayload",
                                    kind: "LinkedField",
                                    name: "prioritizePinnedIssues",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Repository",
                                            kind: "LinkedField",
                                            name: "repository",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: a,
                                                    concreteType:
                                                        "PinnedIssueConnection",
                                                    kind: "LinkedField",
                                                    name: "pinnedIssues",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "PinnedIssue",
                                                            kind: "LinkedField",
                                                            name: "nodes",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "Issue",
                                                                    kind: "LinkedField",
                                                                    name: "issue",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            n,
                                                                            s,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "titleHTML",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            i,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "createdAt",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "state",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "stateReason",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "number",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    null,
                                                                                kind: "LinkedField",
                                                                                name: "author",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "__typename",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "login",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        i,
                                                                                        n,
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "totalCommentsCount",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    "Repository",
                                                                                kind: "LinkedField",
                                                                                name: "repository",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "viewerCanPinIssues",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        n,
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                n,
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey:
                                                        "pinnedIssues(first:3)",
                                                },
                                                n,
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "25e2e16efc92a0f22e68aa3e80cd0ae4",
                            metadata: {},
                            name: "prioritizePinnedIssuesMutation",
                            operationKind: "mutation",
                            text: null,
                        },
                    };
                })();
            o6.hash = "8d81d4322538bb0f6ee082e437422283";
            let o9 = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "url",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "PinnedIssueIssue",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "titleHTML",
                            storageKey: null,
                        },
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "stateReason",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "author",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "login",
                                    storageKey: null,
                                },
                                e,
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCommentsCount",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "viewerCanPinIssues",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            o9.hash = "3fcb5899d4e1abb96acfe94dc8129a7e";
            var o8 = a(82899),
                ue = a(10436);
            let ul = {
                PinnedIssueContainer:
                    "PinnedIssue-module__PinnedIssueContainer--cnO1m",
                contentContainer: "PinnedIssue-module__contentContainer--MYfai",
                titleOptionsContainer:
                    "PinnedIssue-module__titleOptionsContainer--HrCJ9",
                Link: "PinnedIssue-module__Link--AKpPA",
                Octicon: "PinnedIssue-module__Octicon--N8CRP",
                IconButton: "PinnedIssue-module__IconButton--TXjjx",
                metadataContainer:
                    "PinnedIssue-module__metadataContainer--xrOpD",
                issueMetadata: "PinnedIssue-module__issueMetadata--WaoIr",
                commentCountContainer:
                    "PinnedIssue-module__commentCountContainer--MYaJk",
                commentIcon: "PinnedIssue-module__commentIcon--M0x8R",
                commentCountText: "PinnedIssue-module__commentCountText--goHP5",
            };
            function ua({ issue: e }) {
                let l = (0, er.useFragment)(o9, e),
                    a = (0, er.useRelayEnvironment)(),
                    { addToast: n } = (0, _.Y6)(),
                    s = (0, b.useCallback)(() => {
                        l &&
                            (0, o8.e)({
                                environment: a,
                                input: { issueId: l.id },
                                onCompleted: () => {},
                                onError: () => {
                                    n({
                                        type: "error",
                                        message: o7.couldNotUnpinIssue,
                                    });
                                },
                            });
                    }, [n, l, a]),
                    i = (0, b.useRef)(null);
                if (!l) return (0, y.jsx)(y.Fragment, {});
                let t =
                        "CLOSED" === l.state && "NOT_PLANNED" === l.stateReason
                            ? "NOT_PLANNED"
                            : l.state,
                    r = (0, sE.q)(t),
                    o = l.totalCommentsCount ?? 0,
                    u = new Date(l.createdAt);
                return (0, y.jsx)("div", {
                    className: ul.PinnedIssueContainer,
                    children: (0, y.jsxs)("div", {
                        className: ul.contentContainer,
                        children: [
                            (0, y.jsxs)("div", {
                                className: ul.titleOptionsContainer,
                                children: [
                                    (0, y.jsxs)(e9.A, {
                                        "aria-label": `View ${l.title}`,
                                        className: (0, nA.$)(
                                            "css-truncate",
                                            ul.Link
                                        ),
                                        href: l.url,
                                        muted: !0,
                                        children: [
                                            (0, y.jsx)(ue.m4, {
                                                sx: { color: r.color },
                                                icon: r.icon,
                                                "aria-label": r.description,
                                                className: ul.Octicon,
                                            }),
                                            (0, y.jsx)(im.JR, {
                                                html: l.titleHTML,
                                            }),
                                        ],
                                    }),
                                    l.repository.viewerCanPinIssues &&
                                        (0, y.jsxs)(i3.W, {
                                            anchorRef: i,
                                            children: [
                                                (0, y.jsx)(i3.W.Anchor, {
                                                    children: (0, y.jsx)(lQ.K, {
                                                        size: "small",
                                                        icon: T.KebabHorizontalIcon,
                                                        variant: "invisible",
                                                        "aria-label":
                                                            "Pinned issue options",
                                                        className:
                                                            ul.IconButton,
                                                    }),
                                                }),
                                                (0, y.jsx)(i3.W.Overlay, {
                                                    width: "medium",
                                                    children: (0, y.jsxs)(
                                                        np.l,
                                                        {
                                                            children: [
                                                                l &&
                                                                    (0, y.jsxs)(
                                                                        np.l
                                                                            .Item,
                                                                        {
                                                                            onSelect:
                                                                                s,
                                                                            "aria-label": `Unpin issue #${l.number}, ${l.title}`,
                                                                            children:
                                                                                [
                                                                                    (0,
                                                                                    y.jsx)(
                                                                                        np
                                                                                            .l
                                                                                            .LeadingVisual,
                                                                                        {
                                                                                            children:
                                                                                                (0,
                                                                                                y.jsx)(
                                                                                                    ue.m4,
                                                                                                    {
                                                                                                        icon: T.PinSlashIcon,
                                                                                                    }
                                                                                                ),
                                                                                        }
                                                                                    ),
                                                                                    "Unpin",
                                                                                ],
                                                                        }
                                                                    ),
                                                                (0, y.jsx)(
                                                                    o4.sH,
                                                                    {
                                                                        Component:
                                                                            un,
                                                                        returnFocusRef:
                                                                            i,
                                                                    }
                                                                ),
                                                            ],
                                                        }
                                                    ),
                                                }),
                                            ],
                                        }),
                                ],
                            }),
                            (0, y.jsxs)("div", {
                                className: ul.metadataContainer,
                                children: [
                                    (0, y.jsxs)("span", {
                                        className: ul.issueMetadata,
                                        children: [
                                            "#",
                                            l.number,
                                            " \xb7",
                                            " ",
                                            l.author &&
                                                (0, y.jsx)(e9.A, {
                                                    "aria-label": `View ${l.author.login} profile`,
                                                    href: l.author.url,
                                                    "data-hovercard-url": (0,
                                                    e5.dCN)({
                                                        owner: l.author.login,
                                                    }),
                                                    muted: !0,
                                                    children: l.author.login,
                                                }),
                                            " ",
                                            (0, y.jsx)("span", {
                                                children: "opened ",
                                            }),
                                            (0, y.jsxs)(sx.A, {
                                                date: u,
                                                children: [
                                                    "on ",
                                                    u.toLocaleDateString(
                                                        "en-US",
                                                        {
                                                            month: "short",
                                                            day: "numeric",
                                                            year: "numeric",
                                                        }
                                                    ),
                                                ],
                                            }),
                                        ],
                                    }),
                                    o > 0 &&
                                        (0, y.jsxs)("div", {
                                            className: ul.commentCountContainer,
                                            children: [
                                                (0, y.jsx)(ue.m4, {
                                                    icon: T.CommentIcon,
                                                    "aria-label": `${o} comments`,
                                                    className: ul.commentIcon,
                                                }),
                                                (0, y.jsx)("span", {
                                                    className:
                                                        ul.commentCountText,
                                                    children: o,
                                                }),
                                            ],
                                        }),
                                ],
                            }),
                        ],
                    }),
                });
            }
            function un({ onClick: e }) {
                return (0, y.jsxs)(np.l.Item, {
                    onSelect: e,
                    children: [
                        (0, y.jsx)(np.l.LeadingVisual, {
                            children: (0, y.jsx)(ue.m4, {
                                icon: T.GrabberIcon,
                            }),
                        }),
                        "Advanced move...",
                    ],
                });
            }
            try {
                ua.displayName || (ua.displayName = "PinnedIssue");
            } catch {}
            try {
                un.displayName || (un.displayName = "ActionListItemReorder");
            } catch {}
            let us = {
                container: "PinnedIssues-module__container--zhGQR",
                area: "PinnedIssues-module__area--JvxU0",
            };
            function ui({ repository: e }) {
                let l = (0, er.useFragment)(o3, e),
                    a = (0, b.useCallback)(
                        (e) =>
                            (e?.nodes || [])
                                .flatMap((e) => (e?.issue ? e : []))
                                .map((e) => ({
                                    title: e.issue.title,
                                    id: e.issue.id,
                                    data: e,
                                })),
                        []
                    ),
                    [n, s] = (0, b.useState)(() => a(l.pinnedIssues));
                (0, b.useEffect)(() => {
                    l.pinnedIssues && s(() => a(l.pinnedIssues));
                }, [l.pinnedIssues, a]);
                let i = (0, er.useRelayEnvironment)(),
                    { addToast: t } = (0, _.Y6)(),
                    r = (0, b.useCallback)(
                        ({ dragMetadata: e, dropMetadata: a, isBefore: r }) => {
                            if (e.id === a?.id) return;
                            let o = n.find((l) => l.id === e.id);
                            if (!o) return;
                            let u = n.reduce(
                                (e, l) => (
                                    o.id === l.id ||
                                        (l.id !== a?.id
                                            ? e.push(l)
                                            : r
                                              ? e.push(o, l)
                                              : e.push(l, o)),
                                    e
                                ),
                                []
                            );
                            s(u);
                            let d = u.map((e) => e.id);
                            !(function ({
                                environment: e,
                                input: l,
                                onCompleted: a,
                                onError: n,
                            }) {
                                (0, er.commitMutation)(e, {
                                    mutation: o6,
                                    variables: { input: l },
                                    onCompleted: () => a?.(),
                                    onError: (e) => n?.(e),
                                });
                            })({
                                environment: i,
                                input: { repositoryId: l.id, issueIds: d },
                                onCompleted: () => {},
                                onError: () => {
                                    (s(n),
                                        t({
                                            type: "error",
                                            message:
                                                o7.couldNotReorderPinnedIssues,
                                        }));
                                },
                            });
                        },
                        [t, l.id, i, n]
                    ),
                    o = (0, b.useRef)(null),
                    u = (0, o5.w)(o.current);
                if (1 > (l.pinnedIssues?.totalCount || 0)) return null;
                let d = 1 === n.length;
                return (0, y.jsx)("div", {
                    ref: o,
                    children: (0, y.jsx)(o4.BS, {
                        items: n,
                        onDrop: r,
                        className: us.area,
                        direction: u(["vertical", "vertical", "horizontal"]),
                        "aria-label": "Drag and drop pinned issues list.",
                        renderOverlay: (e, a) =>
                            (0, y.jsx)(
                                o4.BS.Item,
                                {
                                    index: a,
                                    id: e.id,
                                    title: e.title,
                                    hideTrigger: !l.viewerCanPinIssues,
                                    className: us.container,
                                    style: {
                                        display: l.viewerCanPinIssues
                                            ? "grid"
                                            : void 0,
                                        alignItems: "start",
                                        gridTemplateColumns: d
                                            ? "0px 1fr"
                                            : "24px 1fr",
                                        gap: 16,
                                        paddingLeft: l.viewerCanPinIssues
                                            ? "var(--base-size-8)"
                                            : "var(--base-size-12)",
                                    },
                                    isDragOverlay: !0,
                                    children: (0, y.jsx)(ua, {
                                        issue: e.data.issue,
                                    }),
                                },
                                e.id
                            ),
                        children: n.map((e, a) =>
                            (0, y.jsx)(
                                o4.BS.Item,
                                {
                                    index: a,
                                    id: e.id,
                                    title: e.title,
                                    hideTrigger: !l.viewerCanPinIssues,
                                    className: us.container,
                                    style: {
                                        display: l.viewerCanPinIssues
                                            ? "grid"
                                            : void 0,
                                        alignItems: "start",
                                        gridTemplateColumns: d
                                            ? "0px 1fr"
                                            : "24px 1fr",
                                        gap: 16,
                                        paddingLeft: l.viewerCanPinIssues
                                            ? "var(--base-size-8)"
                                            : "var(--base-size-12)",
                                    },
                                    children: (0, y.jsx)(ua, {
                                        issue: e.data.issue,
                                    }),
                                },
                                e.id
                            )
                        ),
                    }),
                });
            }
            try {
                ui.displayName || (ui.displayName = "PinnedIssues");
            } catch {}
            let ut = {
                    middlePaneGrid:
                        "IssueIndexPage-module__middlePaneGrid--rg2zq",
                },
                ur = ({ queries: { pageQuery: e } }) => {
                    let { queryRef: l, loadQuery: a } = ll(e, eQ),
                        { setCurrentViewId: n } = eM();
                    return ((0, b.useEffect)(() => {
                        n(S.repository);
                    }, [e, n]),
                    l)
                        ? (0, y.jsx)(uo, { pageQueryRef: l, loadQuery: a })
                        : null;
                };
            function uo({ pageQueryRef: e, loadQuery: l }) {
                let a = (0, er.useLazyLoadQuery)(
                        eq,
                        { id: S.repository },
                        { fetchPolicy: "store-only" }
                    ),
                    { bulkJobId: n, setBulkJobId: s } = eV(),
                    i = (0, er.usePreloadedQuery)(eQ, e);
                return i.repository
                    ? (0, y.jsx)(lt, {
                          category: "Issues Index",
                          children: (0, y.jsxs)(oW, {
                              bulkJobId: n,
                              setBulkJobId: s,
                              children: [
                                  (0, y.jsx)(l$, {
                                      contentAs: "div",
                                      resizeable: !1,
                                      leftPaneWidth: "small",
                                      middlePane: (0, y.jsx)(y.Fragment, {
                                          children: (0, y.jsxs)("div", {
                                              className: ut.middlePaneGrid,
                                              children: [
                                                  (0, y.jsx)(oi, {}),
                                                  (0, y.jsx)(o2, {
                                                      repository: i.repository,
                                                  }),
                                                  (0, y.jsx)(ui, {
                                                      repository: i.repository,
                                                  }),
                                                  a.node
                                                      ? (0, y.jsx)(oq, {
                                                            fetchedView: a.node,
                                                            fetchedRepository:
                                                                i.repository,
                                                            search: i.repository,
                                                            loadSearchQuery: l,
                                                        })
                                                      : null,
                                              ],
                                          }),
                                      }),
                                  }),
                                  (0, y.jsx)(o_, {}),
                              ],
                          }),
                      })
                    : null;
            }
            try {
                ur.displayName || (ur.displayName = "IssueIndexPage");
            } catch {}
            try {
                uo.displayName || (uo.displayName = "IssueIndexPageContent");
            } catch {}
            var uu = a(80443);
            let ud = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueDetailCurrentViewFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "query",
                        storageKey: null,
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            function uc(e) {
                return e.target instanceof HTMLElement
                    ? e.target.closest(".js-hovercard-content")
                    : null;
            }
            ud.hash = "2c8ca9d1a4c7011b9735fb27e282abab";
            let um = {
                    IssueDetailContainer:
                        "IssueDetail-module__IssueDetailContainer--h6eYv",
                },
                ug = ({ fetchedView: e, preloadedQueries: l }) => {
                    var a;
                    let {
                            itemIdentifier: n,
                            viewId: s,
                            sidePanelItemIdentifier: i,
                            setSidePanelItemIdentifier: t,
                            sidePanelItemURL: r,
                        } = li(),
                        { onIssueHrefLinkClick: o, navigateToRoot: u } = a_(),
                        { query: d } = (0, er.useFragment)(ud, e),
                        c = (0, v.X)(),
                        m =
                            c?.current_user_settings?.use_single_key_shortcut ||
                            !1,
                        g = c?.current_user_settings?.preferred_emoji_skin_tone,
                        p = !c.scoped_repository,
                        k = (0, b.useCallback)(() => {
                            u(s ?? ee.id, d);
                        }, [s, d, u]),
                        { navigateToUrl: h } = a_(),
                        f = (0, b.useCallback)(
                            (e) => {
                                let { owner: l, repo: a, number: n } = e;
                                t({
                                    owner: l,
                                    repo: a,
                                    number: n,
                                    type: "Issue",
                                });
                            },
                            [t]
                        ),
                        C = (0, b.useCallback)(() => {
                            t(null);
                        }, [t]),
                        [F, S] = (0, tr.Fo)(
                            `${c.scoped_repository?.owner}-${c.scoped_repository?.name}-deletedRecordId`,
                            ""
                        ),
                        L = (0, b.useCallback)(
                            (e) => {
                                S(e);
                            },
                            [S]
                        ),
                        K = (0, b.useCallback)(
                            (e, l) =>
                                !!n &&
                                l.owner === n.owner &&
                                l.repo === n.repo &&
                                l.number === n.number &&
                                (e.preventDefault(), C(), !0),
                            [n, C]
                        );
                    return (
                        (a = (e, l) => {
                            if (eb(e, n?.owner || "", n?.repo || "")) return;
                            let a = l.target.closest("a");
                            a && h(a);
                        }),
                        (0, b.useEffect)(() => {
                            let e = (e) => {
                                    uc(e) && e.stopPropagation();
                                },
                                l = (e) => {
                                    let l = uc(e);
                                    if (!l) return;
                                    let n = l.getAttribute(
                                        "data-hovercard-target-url"
                                    );
                                    n && a(n, e);
                                };
                            return (
                                window.addEventListener("focus", e, !0),
                                window.addEventListener("click", l),
                                () => {
                                    (window.removeEventListener("focus", e, !0),
                                        window.removeEventListener("click", l));
                                }
                            );
                        }),
                        (0, y.jsxs)(y.Fragment, {
                            children: [
                                (0, y.jsx)("div", {
                                    className: (0, nA.$)(
                                        "primary-viewer",
                                        um.IssueDetailContainer
                                    ),
                                    "data-testid": nD.issueViewerContainer,
                                    children: (0, y.jsx)(b.Suspense, {
                                        fallback: (0, y.jsx)("span", {
                                            children: "Loading Issue...",
                                        }),
                                        children:
                                            n &&
                                            (0, y.jsx)(lE.cI, {
                                                itemIdentifier: n,
                                                optionConfig: {
                                                    singleKeyShortcutsEnabled:
                                                        m,
                                                    emojiSkinTonePreference: g,
                                                    showRepositoryPill: p,
                                                    showIssueCreateButton: !0,
                                                    onLinkClick: o,
                                                    navigateBack: k,
                                                    onIssueDelete: L,
                                                    navigate: h,
                                                    preloadedQueries: l,
                                                    timelineEventBaseUrl: ((
                                                        e,
                                                        l
                                                    ) =>
                                                        l
                                                            ? `/${l}/${e}/issues`
                                                            : "/issues")(
                                                        c?.scoped_repository
                                                            ?.name,
                                                        c?.scoped_repository
                                                            ?.owner
                                                    ),
                                                    scrollToTopOnClick: !0,
                                                    onSubIssueClick: f,
                                                    useViewportQueries: !0,
                                                    insideSidePanel:
                                                        !i && void 0,
                                                },
                                            }),
                                    }),
                                }),
                                i &&
                                    (0, y.jsx)(r8, {
                                        onClose: C,
                                        children: (0, y.jsx)(lE.cI, {
                                            itemIdentifier: i,
                                            optionConfig: Object.assign(
                                                {},
                                                lq.C,
                                                {
                                                    shouldSkipSetDocumentTitle:
                                                        !0,
                                                    onClose: C,
                                                    insideSidePanel: !0,
                                                    singleKeyShortcutsEnabled:
                                                        m,
                                                    onSubIssueClick: f,
                                                    onParentIssueActivate: K,
                                                    onIssueDelete: L,
                                                    navigateBack: C,
                                                    additionalHeaderActions: (0,
                                                    y.jsx)(lQ.K, {
                                                        as: "a",
                                                        role: "link",
                                                        variant: "invisible",
                                                        icon: T.ScreenFullIcon,
                                                        "aria-label":
                                                            U.sidePanelTooltip,
                                                        href: r,
                                                    }),
                                                }
                                            ),
                                        }),
                                    }),
                            ],
                        })
                    );
                };
            try {
                ug.displayName || (ug.displayName = "IssueDetail");
            } catch {}
            let up = ({ queries: { ...e } }) => {
                let { scoped_repository: l } = (0, v.X)(),
                    { currentViewId: a, setCurrentViewId: n } = eM(),
                    { bulkJobId: s, setBulkJobId: i } = eV(),
                    t = a || (l ? S.repository : S.assignedToMe);
                l && !a && n(t);
                let r = (0, er.useLazyLoadQuery)(
                    eq,
                    { id: t },
                    { fetchPolicy: "store-only" }
                );
                return (((0, uu.N)().title = ""), r && r.node)
                    ? (0, y.jsx)(lt, {
                          category: "Issue Show",
                          children: (0, y.jsx)(oW, {
                              bulkJobId: s,
                              setBulkJobId: i,
                              children: (0, y.jsx)(le.az, {
                                  sx: {
                                      display: "flex",
                                      height: "100%",
                                      justifyContent: "stretch",
                                      "> *": { width: "100%" },
                                  },
                                  children: (0, y.jsx)(ug, {
                                      fetchedView: r.node,
                                      preloadedQueries: e,
                                  }),
                              }),
                          }),
                      })
                    : null;
            };
            try {
                up.displayName || (up.displayName = "IssueShowPage");
            } catch {}
            let uy = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    n = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    s = [
                        {
                            kind: "Variable",
                            name: "number",
                            variableName: "number",
                        },
                    ],
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a],
                        kind: "Fragment",
                        metadata: null,
                        name: "RepositoryMilestoneEditPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: s,
                                        kind: "FragmentSpread",
                                        name: "RepositoryMilestoneEditPageContentInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, a, l],
                        kind: "Operation",
                        name: "RepositoryMilestoneEditPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: s,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            i,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "number",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "title",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "dueOn",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "state",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    i,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "1dd2279633d96fb745325e7da3dc9180",
                        metadata: {},
                        name: "RepositoryMilestoneEditPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            uy.hash = "5fdd29f09a481802c9943f6d95d436ea";
            let uk = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryMilestoneEditPageContentInternal",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "number",
                                variableName: "number",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "MilestoneEditFormRepositoryQuery",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            uk.hash = "ff932bfcc382dda2e87c2a3243a08062";
            let uh = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneEditFormRepositoryQuery",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: [
                            {
                                kind: "Variable",
                                name: "number",
                                variableName: "number",
                            },
                        ],
                        concreteType: "Milestone",
                        kind: "LinkedField",
                        name: "milestone",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "id",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "number",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "title",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "description",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "dueOn",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneFormRepositoryQueryInternal",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            uh.hash = "c18b08b3c57d1ae0743ce04f3c39f1ce";
            let ub = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneFormRepositoryQueryInternal",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            ub.hash = "bb188885dcd6b84a291913e4a172557f";
            var uf = a(83463),
                uC = a(4175);
            let uF = {
                    editMilestone: "Edit",
                    newMilestone: "New milestone",
                    newIssue: "New issue",
                    milestoneClosed: "Closed ",
                    milestoneOpen: "Open",
                    milestoneOverdue: "Overdue by",
                    separator: "\u2022",
                    milestoneLastUpdated: "Last updated ",
                    noDueDate: "No due date",
                    dueBy: "Due by",
                    milestoneError: "Milestone cannot be loaded.",
                    milestonesError: "Milestones cannot be loaded.",
                    milestoneErrorMessage:
                        "This milestone cannot be loaded due to a system error.",
                    milestonesErrorMessage:
                        "Milestones cannot be loaded due to a system error.",
                    milestoneIssuesError: "Failed to load issues.",
                    milestoneIssuesErrorMessage:
                        "This milestone's issues can not be loaded due to a system error.",
                    milestoneCreateError: "Could not create milestone",
                    milestonePageError: "Could not load page",
                    milestonePageErrorMessage:
                        "This page cannot be loaded due to a system error.",
                    milestoneCreatePermissionError:
                        "You do not have permission to create milestones in this repository.",
                    titleRequired: "Title cannot be empty",
                    bulkActions: "Bulk actions",
                    markAs: "Mark as",
                    label: "Label",
                    assign: "Assign",
                    project: "Project",
                    milestone: "Milestone",
                    noCreatedMilestones:
                        "You haven\u2019t created any Milestones.",
                    noCreatedMilestonesDescription:
                        "Use Milestones to create collections of Issues and Pull Requests for a particular release or project.",
                    createAMilestone: "Create a milestone",
                    weCouldntFindMilestones: "We couldn\u2019t find anything!",
                    weCouldntFindMilestonesDescription:
                        "There aren't any milestones that match. Give it another shot above.",
                    setIssueType: "Issue type",
                    emptyStateOpenIssues:
                        "There are no open issues in this milestone",
                    emptyStateClosedIssues:
                        "There are no closed issues in this milestone",
                    title: "Title",
                    description: "Description (optional)",
                    dueDate: "Due date (optional)",
                    createMilestone: "Create milestone",
                    cancel: "Cancel",
                    createMilestoneDescription:
                        "Create a new milestone to help organize your issues and pull requests. ",
                    learnMorePrefix: "Learn more about ",
                    milestonesAndIssues: "milestones and issues",
                    datePlaceholder: "Choose date...",
                    titlePlaceholder: "Milestone name",
                    descriptionPlaceholder: "Describe your milestone",
                    saveChanges: "Save changes",
                    closeMilestone: "Close milestone",
                    reopenMilestone: "Reopen milestone",
                    editMilestoneTitle: "Edit milestone",
                    milestoneEditPermissionError:
                        "You do not have permission to edit milestones in this repository.",
                    milestoneEditError: "Could not edit milestone",
                    deleteMilestoneConfirmationTitle:
                        "Permanently delete milestone",
                    deleteMilestoneWarningPermanent:
                        "Once you delete this milestone you will not be able to see it again.",
                    deleteMilestoneAssociatedIssuesNote:
                        "Deleting this milestone will not delete or close the associated issues.",
                    deleteMilestoneConfirmationButton: "Delete milestone",
                    deleteMilestoneError:
                        "Could not delete this milestone. Please try again.",
                },
                uS = {
                    milestonePageTitle:
                        "MilestoneForm-module__milestonePageTitle--s_VOH",
                    errorBanner: "MilestoneForm-module__errorBanner--XTfqk",
                    formWrapper: "MilestoneForm-module__formWrapper--WBGHP",
                    formContainer: "MilestoneForm-module__formContainer--_UpiI",
                    formControl: "MilestoneForm-module__formControl--GT0g7",
                    datePickerAnchor:
                        "MilestoneForm-module__datePickerAnchor--fiDOS",
                    buttonGroup: "MilestoneForm-module__buttonGroup--z5MCp",
                    buttonRow: "MilestoneForm-module__buttonRow--Ii6aq",
                };
            function uL({
                repository: e,
                onCancel: l,
                formTitle: a,
                formDescription: n,
                formSubmitLabel: s = uF.createMilestone,
                onSubmit: i,
                submissionErrors: t,
                initialValues: r,
                onToggleMilestoneState: o,
                toggleStateLabel: u,
            }) {
                let [d, c] = (0, b.useState)(r?.title || ""),
                    [m, g] = (0, b.useState)(r?.description || ""),
                    [p, k] = (0, b.useState)(() => {
                        if (r?.dueOn) {
                            let e = new Date(r.dueOn);
                            return new Date(
                                e.getUTCFullYear(),
                                e.getUTCMonth(),
                                e.getUTCDate()
                            );
                        }
                        return null;
                    }),
                    [h, f] = (0, b.useState)(!1),
                    [C, F] = (0, b.useState)(null),
                    S = (0, b.useRef)(null),
                    L = (0, er.useFragment)(ub, e),
                    K = (0, b.useCallback)(
                        async (e) => {
                            if (h) return;
                            if (
                                (e.preventDefault(), f(!0), F(null), !d.trim())
                            ) {
                                (F(uF.titleRequired),
                                    S.current?.focus(),
                                    f(!1));
                                return;
                            }
                            let l = null;
                            if (p) {
                                let e = p.getFullYear();
                                l = new Date(
                                    Date.UTC(e, p.getMonth(), p.getDate())
                                ).toISOString();
                            }
                            i(
                                {
                                    repositoryId: L.id,
                                    title: d.trim(),
                                    description: m?.trim(),
                                    dueOn: l,
                                },
                                f
                            );
                        },
                        [m, p, i, L, d, h]
                    );
                return (0, y.jsxs)("div", {
                    className: uS.formContainer,
                    id: "milestone-create-form",
                    "data-hpc": !0,
                    children: [
                        t &&
                            (0, y.jsx)(rC.l, {
                                "aria-label": "Error",
                                title: "Error",
                                description: t,
                                variant: "critical",
                                className: uS.errorBanner,
                            }),
                        (0, y.jsxs)("div", {
                            children: [
                                a &&
                                    (0, y.jsx)(e8.A, {
                                        as: "h1",
                                        variant: "medium",
                                        className: uS.milestonePageTitle,
                                        children: a,
                                    }),
                                n,
                            ],
                        }),
                        (0, y.jsxs)("form", {
                            onSubmit: K,
                            children: [
                                (0, y.jsxs)("div", {
                                    className: uS.formWrapper,
                                    children: [
                                        (0, y.jsxs)(ak.A, {
                                            className: uS.formControl,
                                            id: "milestone-title",
                                            disabled: h,
                                            required: !0,
                                            children: [
                                                (0, y.jsx)(ak.A.Label, {
                                                    htmlFor: "milestone-title",
                                                    children: uF.title,
                                                }),
                                                (0, y.jsx)(rO.A, {
                                                    block: !0,
                                                    value: d,
                                                    onChange: (e) => {
                                                        (c(e.target.value),
                                                            C && F(null));
                                                    },
                                                    placeholder:
                                                        uF.titlePlaceholder,
                                                    ref: S,
                                                }),
                                                C &&
                                                    (0, y.jsx)(
                                                        ak.A.Validation,
                                                        {
                                                            variant: "error",
                                                            children: C,
                                                        }
                                                    ),
                                            ],
                                        }),
                                        (0, y.jsxs)(ak.A, {
                                            className: uS.formControl,
                                            id: "milestone-due-on",
                                            children: [
                                                (0, y.jsx)(ak.A.Label, {
                                                    htmlFor: "milestone-due-on",
                                                    children: uF.dueDate,
                                                }),
                                                (0, y.jsx)(uf.DatePicker, {
                                                    variant: "single",
                                                    showClearButton: !0,
                                                    value: p,
                                                    onChange: (e) => {
                                                        k(e);
                                                    },
                                                    disabled: h,
                                                    dateFormat: "MMM d, yyyy",
                                                    placeholder:
                                                        uF.datePlaceholder,
                                                    anchorClassName:
                                                        uS.datePickerAnchor,
                                                    fieldName: uF.dueDate,
                                                }),
                                            ],
                                        }),
                                        (0, y.jsxs)(ak.A, {
                                            className: uS.formControl,
                                            id: "milestone-description",
                                            disabled: h,
                                            children: [
                                                (0, y.jsx)(ak.A.Label, {
                                                    htmlFor:
                                                        "milestone-description",
                                                    children: uF.description,
                                                }),
                                                (0, y.jsx)(uC.Ay, {
                                                    value: m,
                                                    onChange: (e) =>
                                                        g(e.target.value),
                                                    rows: 5,
                                                    placeholder:
                                                        uF.descriptionPlaceholder,
                                                    block: !0,
                                                }),
                                            ],
                                        }),
                                    ],
                                }),
                                (0, y.jsxs)("div", {
                                    className: `${uS.buttonRow} ${o ? "flex-justify-between" : "flex-justify-end"}`,
                                    children: [
                                        o &&
                                            u &&
                                            (0, y.jsx)(nn.Q, {
                                                onClick: (e) => o?.(e, f),
                                                children: u,
                                            }),
                                        (0, y.jsxs)("div", {
                                            className: uS.buttonGroup,
                                            children: [
                                                (0, y.jsx)(nn.Q, {
                                                    onClick: l,
                                                    children: uF.cancel,
                                                }),
                                                (0, y.jsx)(nn.Q, {
                                                    type: "submit",
                                                    variant: "primary",
                                                    loading: h,
                                                    children: s,
                                                }),
                                            ],
                                        }),
                                    ],
                                }),
                            ],
                        }),
                    ],
                });
            }
            try {
                uL.displayName || (uL.displayName = "MilestoneForm");
            } catch {}
            let uK = {
                middlePaneWrapper:
                    "MilestoneCreateEdit-module__middlePaneWrapper--T05l8",
                milestonePageDescription:
                    "MilestoneCreateEdit-module__milestonePageDescription--q6Hqk",
            };
            var uv = a(26382);
            let uI = {
                    middlePaneWrapper:
                        "RepositoryMilestone-module__middlePaneWrapper--Fw9e2",
                    middlePaneGrid:
                        "RepositoryMilestone-module__middlePaneGrid--n7Of1",
                    milestoneDetailsWrapper:
                        "RepositoryMilestone-module__milestoneDetailsWrapper--hQIzy",
                    status: "RepositoryMilestone-module__status--TflE_",
                    metadataWrapper:
                        "RepositoryMilestone-module__metadataWrapper--aRksE",
                    listMetadataContainer:
                        "RepositoryMilestone-module__listMetadataContainer--yaljt",
                    listMetadata:
                        "RepositoryMilestone-module__listMetadata--IwseM",
                    listProgressSection:
                        "RepositoryMilestone-module__listProgressSection--pVqBl",
                    progressBar:
                        "RepositoryMilestone-module__progressBar--LX8bh",
                    progress: "RepositoryMilestone-module__progress--gKeiw",
                    menuButton: "RepositoryMilestone-module__menuButton--_kk_R",
                    progressSection:
                        "RepositoryMilestone-module__progressSection--U3Kvg",
                    progressPercentage:
                        "RepositoryMilestone-module__progressPercentage--jhjud",
                    overDue: "RepositoryMilestone-module__overDue--XPgL3",
                    tabsContainer:
                        "RepositoryMilestone-module__tabsContainer--paHod",
                    buttonGrp: "RepositoryMilestone-module__buttonGrp--QJTlA",
                    header: "RepositoryMilestone-module__header--y2sSL",
                    actionsGrp: "RepositoryMilestone-module__actionsGrp--eu5Di",
                    milestoneListWrapper:
                        "RepositoryMilestone-module__milestoneListWrapper--rWRxP",
                    milestoneDataContainer:
                        "RepositoryMilestone-module__milestoneDataContainer--aCJ91",
                    middot: "RepositoryMilestone-module__middot--M3Mnq",
                    milestoneIssueCount:
                        "RepositoryMilestone-module__milestoneIssueCount--U2QDP",
                    milestoneRow:
                        "RepositoryMilestone-module__milestoneRow--QHA0K",
                    listItemContent:
                        "RepositoryMilestone-module__listItemContent--OWrSh",
                    listDescription:
                        "RepositoryMilestone-module__listDescription--BElA1",
                    listDateContainer:
                        "RepositoryMilestone-module__listDateContainer--c7o0b",
                    milestoneData:
                        "RepositoryMilestone-module__milestoneData--xWq8w",
                    milestoneStatus:
                        "RepositoryMilestone-module__milestoneStatus--pKLxu",
                    milestoneDescription:
                        "RepositoryMilestone-module__milestoneDescription--ZXV1R",
                    mdViewer: "RepositoryMilestone-module__mdViewer--YYdHE",
                    collapsed: "RepositoryMilestone-module__collapsed--syEvM",
                    expanded: "RepositoryMilestone-module__expanded--N51HM",
                    showMoreButtonContainer:
                        "RepositoryMilestone-module__showMoreButtonContainer--hUl7D",
                    button: "RepositoryMilestone-module__button--Z8EGq",
                    dialogTitle:
                        "RepositoryMilestone-module__dialogTitle--J4W_m",
                    dialogDescriptionContainer:
                        "RepositoryMilestone-module__dialogDescriptionContainer--rRqvB",
                    dialogDescription:
                        "RepositoryMilestone-module__dialogDescription--Jcl4T",
                    errorFallbackContainer:
                        "RepositoryMilestone-module__errorFallbackContainer--Thngu",
                    loadMoreButton:
                        "RepositoryMilestone-module__loadMoreButton--OAgGo",
                    loadMoreButtonWrapper:
                        "RepositoryMilestone-module__loadMoreButtonWrapper--jc1Fr",
                    dndList: "RepositoryMilestone-module__dndList--cP3uJ",
                    deleteMilestoneButton:
                        "RepositoryMilestone-module__deleteMilestoneButton--hxy12",
                    dragAndDropItem:
                        "RepositoryMilestone-module__dragAndDropItem--u9_ni",
                    link: "RepositoryMilestone-module__link--_QJar",
                    heading: "RepositoryMilestone-module__heading--ztfjH",
                    milestoneTitleWrapper:
                        "RepositoryMilestone-module__milestoneTitleWrapper--bNRJJ",
                    title: "RepositoryMilestone-module__title--Lx3Q9",
                },
                u_ = ({ title: e, message: l }) =>
                    (0, y.jsxs)("div", {
                        className: uI.errorFallbackContainer,
                        children: [
                            (0, y.jsxs)(uv.E, {
                                children: [
                                    (0, y.jsx)(uv.E.Visual, {
                                        children: (0, y.jsx)(T.AlertIcon, {
                                            size: "medium",
                                        }),
                                    }),
                                    (0, y.jsx)(uv.E.Heading, { children: e }),
                                    (0, y.jsxs)(uv.E.Description, {
                                        children: [
                                            l,
                                            " Try reloading the page, or if the problem persists",
                                            " ",
                                            (0, y.jsx)(e9.A, {
                                                href: "https://support.github.com/",
                                                inline: !0,
                                                children: "contact support",
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                            (0, y.jsx)(e9.A, {
                                href: "https://www.githubstatus.com/",
                                children: "GitHub Status",
                            }),
                        ],
                    });
            try {
                u_.displayName || (u_.displayName = "MilestoneError");
            } catch {}
            let ux = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "message",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "updateMilestoneDetailsMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "UpdateMilestonePayload",
                                kind: "LinkedField",
                                name: "updateMilestone",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "MilestoneDetail",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [a],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "updateMilestoneDetailsMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "UpdateMilestonePayload",
                                kind: "LinkedField",
                                name: "updateMilestone",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "closed",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "updatedAt",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "descriptionHTML",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "progressPercentage",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "dueOn",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "id",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                            a,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "9e2070837146ea7b194fdf07aad0ba86",
                        metadata: {},
                        name: "updateMilestoneDetailsMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            ux.hash = "64505a94b96eb0c14b201becddec86a0";
            let uw = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "UpdateMilestonePayload",
                            kind: "LinkedField",
                            name: "updateMilestone",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Milestone",
                                    kind: "LinkedField",
                                    name: "milestone",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "id",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "closed",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "updateMilestoneMutation",
                        selections: l,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "updateMilestoneMutation",
                        selections: l,
                    },
                    params: {
                        id: "1d5567fef295bc7769be0ec14110d3aa",
                        metadata: {},
                        name: "updateMilestoneMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function uN({
                environment: e,
                input: l,
                onError: a,
                onCompleted: n,
            }) {
                return (0, er.commitMutation)(e, {
                    mutation: uw,
                    variables: { input: l },
                    onError: (e) => a && a(e),
                    optimisticResponse: {
                        updateMilestone: {
                            milestone: {
                                id: l.id,
                                closed: "CLOSED" === l.state,
                            },
                        },
                    },
                    onCompleted: (e) => n && n(e),
                });
            }
            function uj(e) {
                return e
                    .map((e) => e.message)
                    .filter(Boolean)
                    .join(", ");
            }
            function uR(e) {
                let [l, a] = (0, b.useState)(null),
                    n = (0, e7.Z)(),
                    s = (0, er.useRelayEnvironment)(),
                    { repository: i } = e,
                    t = (0, er.useFragment)(uh, i),
                    r = (0, b.useCallback)(
                        (e, l) => {
                            if ((a(null), !t.milestone)) {
                                (a(uF.milestoneErrorMessage), l(!1));
                                return;
                            }
                            if (!t?.viewerCanPush) {
                                (a(uF.milestoneEditPermissionError), l(!1));
                                return;
                            }
                            !(function ({
                                environment: e,
                                input: l,
                                onError: a,
                                onCompleted: n,
                            }) {
                                (0, eG.commitMutation)(e, {
                                    mutation: ux,
                                    variables: { input: l },
                                    onError: (e) => a && a(e),
                                    onCompleted: (e) => n && n(e),
                                });
                            })({
                                environment: s,
                                input: {
                                    id: t.milestone.id,
                                    title: e.title,
                                    description: e.description,
                                    dueOn: e.dueOn,
                                },
                                onError: (e) => {
                                    (l(!1),
                                        e.cause && Array.isArray(e.cause)
                                            ? a(uj(e.cause))
                                            : a(uF.milestoneEditError));
                                },
                                onCompleted: (e) => {
                                    if (
                                        !e.updateMilestone?.milestone ||
                                        e?.updateMilestone?.errors?.length > 0
                                    ) {
                                        (a(uF.milestoneEditError), l(!1));
                                        return;
                                    }
                                    t.milestone &&
                                        n(
                                            `/${t.nameWithOwner}/milestone/${t.milestone.number}`
                                        );
                                },
                            });
                        },
                        [s, n, t]
                    ),
                    o = (0, b.useCallback)(
                        (e, l) => {
                            if (
                                (e.preventDefault(),
                                l(!0),
                                a(null),
                                !t?.milestone)
                            ) {
                                (a(uF.milestoneErrorMessage), l(!1));
                                return;
                            }
                            if (!t?.viewerCanPush) {
                                (a(uF.milestoneEditPermissionError), l(!1));
                                return;
                            }
                            let i = t?.milestone?.state;
                            uN({
                                environment: s,
                                input: {
                                    id: t.milestone.id,
                                    state: "CLOSED" === i ? "OPEN" : "CLOSED",
                                },
                                onError: (e) => {
                                    (l(!1),
                                        e.cause && Array.isArray(e.cause)
                                            ? a(uj(e.cause))
                                            : a(uF.milestoneEditError));
                                },
                                onCompleted: (e) => {
                                    if (!e.updateMilestone?.milestone) {
                                        (a(uF.milestoneEditError), l(!1));
                                        return;
                                    }
                                    n(
                                        `/${t.nameWithOwner}/milestone/${t?.milestone?.number}`
                                    );
                                },
                            });
                        },
                        [s, n, t]
                    );
                if (!t?.milestone)
                    return (0, y.jsx)("div", {
                        className: uK.middlePaneWrapper,
                        children: (0, y.jsx)(u_, {
                            title: uF.milestoneError,
                            message: uF.milestoneErrorMessage,
                        }),
                    });
                let u = {
                    id: t.milestone.id,
                    title: t.milestone.title,
                    description: t.milestone.description,
                    dueOn: t.milestone.dueOn,
                };
                return (0, y.jsx)("div", {
                    className: uK.middlePaneWrapper,
                    "data-testid": "milestone-edit",
                    children: (0, y.jsx)(i2.t, {
                        fallback: (0, y.jsx)(u_, {
                            title: uF.milestonePageError,
                            message: uF.milestonePageErrorMessage,
                        }),
                        children: (0, y.jsx)(uL, {
                            repository: t,
                            optionConfig: e.optionConfig,
                            formTitle: uF.editMilestoneTitle,
                            formSubmitLabel: uF.saveChanges,
                            onSubmit: r,
                            onCancel: () => {
                                (0, ln.OE)();
                            },
                            submissionErrors: l,
                            initialValues: u,
                            onToggleMilestoneState: o,
                            toggleStateLabel:
                                "OPEN" === t.milestone.state
                                    ? uF.closeMilestone
                                    : uF.reopenMilestone,
                        }),
                    }),
                });
            }
            uw.hash = "7de82b3f406a20a1bcff83a3b90caa3f";
            try {
                uR.displayName || (uR.displayName = "MilestoneEdit");
            } catch {}
            let uP = ({ queries: { pageQuery: e } }) => {
                let { queryRef: l } = ll(e, uy);
                return l
                    ? (0, y.jsx)(lt, {
                          category: "Repository Milestone Edit",
                          children: (0, y.jsx)(uT, { pageQueryRef: l }),
                      })
                    : null;
            };
            function uT({ pageQueryRef: e }) {
                let l = (0, er.usePreloadedQuery)(uy, e),
                    { setCurrentViewId: a } = eM();
                return ((0, b.useEffect)(() => {
                    a(S.repository);
                }, [e, a]),
                l.repository)
                    ? (0, y.jsx)(uA, { repository: l.repository })
                    : (reportError(
                          Error(
                              `Could not find repository when loading milestone edit page for ${A.fV?.href.toString()}`
                          )
                      ),
                      (0, y.jsx)("div", { children: "Repository not found" }));
            }
            function uA({ repository: e }) {
                let l = (0, er.useFragment)(uk, e),
                    { current_user_settings: a } = (0, v.X)(),
                    n = {
                        singleKeyShortcutsEnabled: a.use_single_key_shortcut,
                    };
                return (0, y.jsx)(uR, { repository: l, optionConfig: n });
            }
            try {
                uT.displayName ||
                    (uT.displayName = "RepositoryMilestoneEditPageContent");
            } catch {}
            try {
                uA.displayName ||
                    (uA.displayName =
                        "RepositoryMilestoneEditPageContentInternal");
            } catch {}
            let uM = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "name",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "owner",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "RepositoryMilestoneNewPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "RepositoryMilestoneNewPageContentInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "RepositoryMilestoneNewPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "464458f0f148c3968c73a7a1705e4e57",
                        metadata: {},
                        name: "RepositoryMilestoneNewPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            uM.hash = "749c7099d42326fd01bc6fe04b11e359";
            let uV = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryMilestoneNewPageContentInternal",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneCreateFormRepositoryQuery",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            uV.hash = "47febff47eae9f5d9f892373fe759979";
            let uD = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneCreateFormRepositoryQuery",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneFormRepositoryQueryInternal",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            uD.hash = "4436584437a09ba2611e78aa4dba1852";
            let uE = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "message",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "createRepositoryMilestoneMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "CreateMilestonePayload",
                                kind: "LinkedField",
                                name: "createMilestone",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [a],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [n],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "createRepositoryMilestoneMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "CreateMilestonePayload",
                                kind: "LinkedField",
                                name: "createMilestone",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "id",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                            n,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "3bbed252fba522eb614bc7d07f407808",
                        metadata: {},
                        name: "createRepositoryMilestoneMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function uq(e) {
                let l = (0, e7.Z)(),
                    a = (0, er.useRelayEnvironment)(),
                    [n, s] = (0, b.useState)(null),
                    i = (0, er.useFragment)(uD, e.repository),
                    t = (0, b.useCallback)(
                        (e, n) => {
                            if ((s(null), !i?.viewerCanPush)) {
                                (s(uF.milestoneCreatePermissionError), n(!1));
                                return;
                            }
                            !(function ({
                                environment: e,
                                input: l,
                                onError: a,
                                onCompleted: n,
                            }) {
                                (0, eG.commitMutation)(e, {
                                    mutation: uE,
                                    variables: { input: l },
                                    onError: (e) => a && a(e),
                                    onCompleted: (e) => n && n(e),
                                });
                            })({
                                environment: a,
                                input: e,
                                onError: (e) => {
                                    (n(!1),
                                        e.cause && Array.isArray(e.cause)
                                            ? s(uj(e.cause))
                                            : s(uF.milestoneCreateError));
                                },
                                onCompleted: (e) => {
                                    if (
                                        !e.createMilestone?.milestone ||
                                        e?.createMilestone?.errors?.length > 0
                                    ) {
                                        (s(uF.milestoneCreateError), n(!1));
                                        return;
                                    }
                                    l(
                                        `/${i.nameWithOwner}/milestone/${e.createMilestone?.milestone.number}`
                                    );
                                },
                            });
                        },
                        [a, l, i]
                    ),
                    r = (0, y.jsxs)("p", {
                        className: uK.milestonePageDescription,
                        children: [
                            uF.createMilestoneDescription,
                            " ",
                            uF.learnMorePrefix,
                            " ",
                            (0, y.jsx)(e9.A, {
                                href: "https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues",
                                inline: !0,
                                children: uF.milestonesAndIssues,
                            }),
                            ".",
                        ],
                    });
                return (0, y.jsx)("div", {
                    className: uK.middlePaneWrapper,
                    "data-hpc": !0,
                    "data-testid": "milestone-create",
                    children: (0, y.jsx)(i2.t, {
                        fallback: (0, y.jsx)(u_, {
                            title: uF.milestonePageError,
                            message: uF.milestonePageErrorMessage,
                        }),
                        children: (0, y.jsx)(uL, {
                            repository: i,
                            optionConfig: e.optionConfig,
                            formTitle: uF.createMilestone,
                            formDescription: r,
                            formSubmitLabel: uF.createMilestone,
                            onSubmit: t,
                            onCancel: () => {
                                (0, ln.OE)();
                            },
                            submissionErrors: n,
                        }),
                    }),
                });
            }
            uE.hash = "0125b820c8c6a0ed165bd9e3da6cf56e";
            try {
                uq.displayName || (uq.displayName = "MilestoneCreate");
            } catch {}
            let uO = ({ queries: { pageQuery: e } }) => {
                let { queryRef: l } = ll(e, uM);
                return l
                    ? (0, y.jsx)(lt, {
                          category: "Repository Milestone New",
                          children: (0, y.jsx)(uB, { pageQueryRef: l }),
                      })
                    : null;
            };
            function uB({ pageQueryRef: e }) {
                let l = (0, er.usePreloadedQuery)(uM, e),
                    { setCurrentViewId: a } = eM();
                return ((0, b.useEffect)(() => {
                    a(S.repository);
                }, [e, a]),
                l.repository)
                    ? (0, y.jsx)(u$, { repository: l.repository })
                    : (reportError(
                          Error(
                              `Could not find repository when loading milestone new page for ${A.fV?.href.toString()}`
                          )
                      ),
                      (0, y.jsx)("div", { children: "Repository not found" }));
            }
            function u$({ repository: e }) {
                let l = (0, er.useFragment)(uV, e),
                    { current_user_settings: a } = (0, v.X)(),
                    n = {
                        singleKeyShortcutsEnabled: a.use_single_key_shortcut,
                    };
                return (0, y.jsx)(uq, { repository: l, optionConfig: n });
            }
            try {
                uB.displayName ||
                    (uB.displayName = "RepositoryMilestoneNewPageContent");
            } catch {}
            try {
                u$.displayName ||
                    (u$.displayName =
                        "RepositoryMilestoneNewPageContentInternal");
            } catch {}
            let uQ = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    {
                        defaultValue: "ASC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    {
                        defaultValue: "NAME",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryLabelIndexPageContentInternal",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "orderDirection",
                                variableName: "orderDirection",
                            },
                            {
                                kind: "Variable",
                                name: "orderField",
                                variableName: "orderField",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "RepositoryLabelsInternal",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            uQ.hash = "2605942908ff38ddc04349e54bb1baeb";
            let uU = {
                argumentDefinitions: [
                    { defaultValue: 30, kind: "LocalArgument", name: "first" },
                    {
                        defaultValue: "ASC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    {
                        defaultValue: "NAME",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryLabelsInternal",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "orderDirection",
                                variableName: "orderDirection",
                            },
                            {
                                kind: "Variable",
                                name: "orderField",
                                variableName: "orderField",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "LabelList",
                    },
                    { args: null, kind: "FragmentSpread", name: "LabelCreate" },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            uU.hash = "4eb551169f8543de2632cb8a1ac8b95d";
            let uz = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "LabelCreate",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            uz.hash = "8fb54c2ec326eaca63b8336f3a43368d";
            let uH = {
                cancelButtonText: "Cancel",
                clearSearch: "Clear search",
                color: "Color",
                createButtonText: "Create label",
                deleteButtonText: "Delete",
                deleteLabelAssociatedIssuesNote:
                    "Deleting this label will remove it from all issues and pull requests.",
                deleteLabelButtonText: "Delete this label",
                deleteLabelError:
                    "There was an error deleting the label. Please try again.",
                deleteLabelWarningPermanent:
                    "Once you delete this label, you will not be able to see it again.",
                description: "Description",
                editLabel: "Edit label",
                editLabelError: "Could not update label",
                invalidColor: "Color is invalid",
                labelCreateError: "Could not create label",
                labelCreatePermissionError:
                    "You do not have permission to create labels in this repository",
                labelDeleteDialogTitle: "Permanently delete label",
                labelDescriptionPlaceholder: "Optionally add a description",
                labelNamePlaceholder: "Label name",
                labelPreview: "Label preview",
                name: "Name",
                nameRequired: "Name is required",
                newLabel: "New label",
                noLabelsCreatedDescription:
                    'Start creating labels using the "New Label" button.',
                noLabelsCreatedTitle: "There are no labels in this repository",
                noMatchingLabelsDescription:
                    "We couldn\u2019t find any labels that match your filter. Please try again.",
                noMatchingLabelsTitle: "No matching labels",
                saveChanges: "Save changes",
                search: "Search",
                searchAll: "Search all labels",
                updateLabelError: "There was an error updating this label",
            };
            var uW = a(43715),
                uG = a(47990);
            let uZ = {
                    container: "LabelColorPicker-module__container--TgIWS",
                    inputContainer:
                        "LabelColorPicker-module__inputContainer--COZ7K",
                    popup: "LabelColorPicker-module__popup--z4LSb",
                    text: "LabelColorPicker-module__text--oLGuF",
                    colors: "LabelColorPicker-module__colors--GSjXi",
                    color: "LabelColorPicker-module__color--kNI1G",
                },
                uX = [
                    "#b60205",
                    "#d93f0b",
                    "#fbca04",
                    "#0e8a16",
                    "#006b75",
                    "#1d76db",
                    "#0052cc",
                    "#5319e7",
                ],
                uJ = [
                    "#e99695",
                    "#f9d0c4",
                    "#fef2c0",
                    "#c2e0c6",
                    "#bfdadc",
                    "#c5def5",
                    "#bfd4f2",
                    "#d4c5f9",
                ],
                uY = {
                    "#b60205": "Red",
                    "#d93f0b": "Orange",
                    "#fbca04": "Yellow",
                    "#0e8a16": "Green",
                    "#006b75": "Teal",
                    "#1d76db": "Blue",
                    "#0052cc": "Navy",
                    "#5319e7": "Purple",
                    "#e99695": "Pink",
                    "#f9d0c4": "Light Pink",
                    "#fef2c0": "Light Yellow",
                    "#c2e0c6": "Light Green",
                    "#bfdadc": "Light Teal",
                    "#c5def5": "Light Blue",
                    "#bfd4f2": "Light Indigo",
                    "#d4c5f9": "Lavender",
                };
            function u1() {
                let e = () => Math.floor(256 * Math.random());
                return `#${[e(), e(), e()].map((e) => e.toString(16).padStart(2, "0")).join("")}`;
            }
            function u2(e) {
                return /^#([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})$/.test(e);
            }
            let u0 = (0, b.forwardRef)((e, l) => {
                let a,
                    n,
                    s,
                    i,
                    t,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p,
                    k,
                    h,
                    f,
                    C = (0, tc.c)(37),
                    { color: F, onChangeCallback: S } = e,
                    [L, K] = (0, b.useState)(F),
                    [v, I] = (0, b.useState)(F),
                    [_, x] = (0, b.useState)(!1),
                    w = ((e, l) => {
                        let a,
                            n,
                            s,
                            i,
                            t,
                            r,
                            o,
                            u,
                            d,
                            c,
                            m,
                            g,
                            p,
                            y,
                            k = (0, tc.c)(34),
                            { colorScheme: h } = (0, le.DP)(),
                            b = h?.includes("high_contrast");
                        1 !== k[0]
                            ? ((a = {
                                  "--lightness-threshold": "0.453",
                                  "--border-threshold": "0.96",
                                  "--background-alpha": "0.20",
                                  "--border-alpha":
                                      "max(0, min(calc((var(--perceived-lightness) - var(--border-threshold)) * 100), 1))",
                                  background:
                                      "rgb(var(--label-r), var(--label-g), var(--label-b))",
                                  color: "hsl(0deg, 0%, calc(var(--lightness-switch) * 100%))",
                                  borderWidth: e,
                                  borderStyle: "solid",
                                  borderColor:
                                      "hsla(var(--label-h), calc(var(--label-s) * 1%), calc((var(--label-l) - 25) * 1%), var(--border-alpha))",
                              }),
                              (k[0] = e),
                              (k[1] = a))
                            : (a = k[1]);
                        let f = a,
                            C = b ? "0.9" : "0.3";
                        k[2] !== e || k[3] !== C
                            ? ((n = {
                                  "--lightness-threshold": "0.6",
                                  "--background-alpha": "0.18",
                                  "--border-alpha": C,
                                  "--lighten-by":
                                      "calc(((var(--lightness-threshold) - var(--perceived-lightness)) * 100) * var(--lightness-switch))",
                                  borderWidth: e,
                                  borderStyle: "solid",
                                  background:
                                      "rgba(var(--label-r), var(--label-g), var(--label-b), var(--background-alpha))",
                                  color: "hsl(var(--label-h), calc(var(--label-s) * 1%), calc((var(--label-l) + var(--lighten-by)) * 1%))",
                                  borderColor:
                                      "hsla(var(--label-h), calc(var(--label-s) * 1%), calc((var(--label-l) + var(--lighten-by)) * 1%), var(--border-alpha))",
                              }),
                              (k[2] = e),
                              (k[3] = C),
                              (k[4] = n))
                            : (n = k[4]);
                        let F = n;
                        k[5] !== l
                            ? ((s = (0, uG.Du)(l)), (k[5] = l), (k[6] = s))
                            : (s = k[6]);
                        let [S, L, K] = s;
                        if (
                            k[7] !== K ||
                            k[8] !== l ||
                            k[9] !== L ||
                            k[10] !== S
                        ) {
                            let [e, a, n] = (0, uG.BT)(l);
                            ((t = a),
                                (i = n),
                                (u = String(S)),
                                (d = String(L)),
                                (c = String(K)),
                                (r = String),
                                (o = Math.round(e)),
                                (k[7] = K),
                                (k[8] = l),
                                (k[9] = L),
                                (k[10] = S),
                                (k[11] = i),
                                (k[12] = t),
                                (k[13] = r),
                                (k[14] = o),
                                (k[15] = u),
                                (k[16] = d),
                                (k[17] = c));
                        } else
                            ((i = k[11]),
                                (t = k[12]),
                                (r = k[13]),
                                (o = k[14]),
                                (u = k[15]),
                                (d = k[16]),
                                (c = k[17]));
                        let v = r(o);
                        k[18] !== t
                            ? ((m = Math.round(100 * t)),
                              (k[18] = t),
                              (k[19] = m))
                            : (m = k[19]);
                        let I = String(m);
                        k[20] !== i
                            ? ((g = Math.round(100 * i)),
                              (k[20] = i),
                              (k[21] = g))
                            : (g = k[21]);
                        let _ = String(g);
                        return (
                            k[22] !== h || k[23] !== F || k[24] !== f
                                ? ((p = h?.includes("light") ? f : F),
                                  (k[22] = h),
                                  (k[23] = F),
                                  (k[24] = f),
                                  (k[25] = p))
                                : (p = k[25]),
                            k[26] !== v ||
                            k[27] !== I ||
                            k[28] !== _ ||
                            k[29] !== p ||
                            k[30] !== u ||
                            k[31] !== d ||
                            k[32] !== c
                                ? ((y = {
                                      "--label-r": u,
                                      "--label-g": d,
                                      "--label-b": c,
                                      "--label-h": v,
                                      "--label-s": I,
                                      "--label-l": _,
                                      "--perceived-lightness":
                                          "calc(((var(--label-r) * 0.2126) + (var(--label-g) * 0.7152) + (var(--label-b) * 0.0722)) / 255)",
                                      "--lightness-switch":
                                          "max(0, min(calc((var(--perceived-lightness) - var(--lightness-threshold)) * -1000), 1))",
                                      "--border-color":
                                          "var(--borderColor-muted, var(--color-border-subtle))",
                                      ...p,
                                  }),
                                  (k[26] = v),
                                  (k[27] = I),
                                  (k[28] = _),
                                  (k[29] = p),
                                  (k[30] = u),
                                  (k[31] = d),
                                  (k[32] = c),
                                  (k[33] = y))
                                : (y = k[33]),
                            y
                        );
                    })(1, v);
                C[0] !== S
                    ? ((a = (e) => {
                          (K(e), u2(e) && I(e), S?.(e));
                      }),
                      (C[0] = S),
                      (C[1] = a))
                    : (a = C[1]);
                let N = a;
                C[2] !== N
                    ? ((n = () => N(u1())), (C[2] = N), (C[3] = n))
                    : (n = C[3]);
                let j = n;
                C[4] !== N
                    ? ((s = (e) => N(e.target.value)), (C[4] = N), (C[5] = s))
                    : (s = C[5]);
                let R = s;
                C[6] !== N
                    ? ((i = (e, l) =>
                          (0, y.jsx)(
                              nn.Q,
                              {
                                  variant: "invisible",
                                  className: uZ.color,
                                  style: { backgroundColor: e },
                                  "aria-label": `${uY[e] ?? "Color:"} (${e})`,
                                  onClick: () => {
                                      (N(e), x(!1));
                                  },
                                  tabIndex: 0,
                              },
                              l
                          )),
                      (C[6] = N),
                      (C[7] = i))
                    : (i = C[7]);
                let P = i;
                (C[8] === Symbol.for("react.memo_cache_sentinel")
                    ? ((t = (0, y.jsx)(ak.A.Label, { children: "Color" })),
                      (C[8] = t))
                    : (t = C[8]),
                    C[9] !== v || C[10] !== w
                        ? ((r = { ...w, backgroundColor: v }),
                          (C[9] = v),
                          (C[10] = w),
                          (C[11] = r))
                        : (r = C[11]),
                    C[12] !== j || C[13] !== r
                        ? ((o = (0, y.jsx)(lQ.K, {
                              style: r,
                              icon: T.SyncIcon,
                              "aria-label": "Choose random color",
                              title: "Choose random color",
                              onClick: j,
                          })),
                          (C[12] = j),
                          (C[13] = r),
                          (C[14] = o))
                        : (o = C[14]));
                let A = `${uY[v] ?? "Color:"} (${v})`;
                (C[15] !== A
                    ? ((u = (0, y.jsx)(ak.A.Label, {
                          visuallyHidden: !0,
                          children: A,
                      })),
                      (C[15] = A),
                      (C[16] = u))
                    : (u = C[16]),
                    C[17] === Symbol.for("react.memo_cache_sentinel")
                        ? ((d = (0, n2.G)("color-input")), (C[17] = d))
                        : (d = C[17]),
                    C[18] === Symbol.for("react.memo_cache_sentinel")
                        ? ((c = () => x(!0)),
                          (m = (e) => {
                              (e.relatedTarget &&
                                  e.relatedTarget.closest(`.${uZ.popup}`)) ||
                                  x(!1);
                          }),
                          (C[18] = c),
                          (C[19] = m))
                        : ((c = C[18]), (m = C[19])));
                let M = u2(L) ? "success" : "error";
                return (
                    C[20] !== L || C[21] !== R || C[22] !== l || C[23] !== M
                        ? ((g = (0, y.jsx)(rO.A, {
                              ...d,
                              value: L,
                              onChange: R,
                              onFocus: c,
                              onBlur: m,
                              validationStatus: M,
                              ref: l,
                          })),
                          (C[20] = L),
                          (C[21] = R),
                          (C[22] = l),
                          (C[23] = M),
                          (C[24] = g))
                        : (g = C[24]),
                    C[25] !== g || C[26] !== u
                        ? ((p = (0, y.jsxs)(ak.A, { children: [u, g] })),
                          (C[25] = g),
                          (C[26] = u),
                          (C[27] = p))
                        : (p = C[27]),
                    C[28] !== P || C[29] !== _
                        ? ((k =
                              _ &&
                              (0, y.jsxs)("div", {
                                  className: uZ.popup,
                                  tabIndex: -1,
                                  children: [
                                      (0, y.jsx)("span", {
                                          className: uZ.text,
                                          children:
                                              "Choose from default colors",
                                      }),
                                      (0, y.jsx)("div", {
                                          className: uZ.colors,
                                          children: uX.map(P),
                                      }),
                                      (0, y.jsx)("div", {
                                          className: uZ.colors,
                                          children: uJ.map(P),
                                      }),
                                  ],
                              })),
                          (C[28] = P),
                          (C[29] = _),
                          (C[30] = k))
                        : (k = C[30]),
                    C[31] !== p || C[32] !== k
                        ? ((h = (0, y.jsxs)("div", {
                              className: uZ.inputContainer,
                              children: [p, k],
                          })),
                          (C[31] = p),
                          (C[32] = k),
                          (C[33] = h))
                        : (h = C[33]),
                    C[34] !== h || C[35] !== o
                        ? ((f = (0, y.jsxs)(ak.A, {
                              children: [
                                  t,
                                  (0, y.jsxs)("div", {
                                      className: uZ.container,
                                      children: [o, h],
                                  }),
                              ],
                          })),
                          (C[34] = h),
                          (C[35] = o),
                          (C[36] = f))
                        : (f = C[36]),
                    f
                );
            });
            u0.displayName = "LabelColorPicker";
            let u3 = { container: "LabelPreview-module__container--NXD8W" };
            function u4(e) {
                let l,
                    a,
                    n,
                    s = (0, tc.c)(8),
                    { nameHTML: i, name: t, color: r } = e;
                s[0] !== t || s[1] !== i
                    ? ((l = i ? (0, y.jsx)(im.JR, { html: i }) : t || ""),
                      (s[0] = t),
                      (s[1] = i),
                      (s[2] = l))
                    : (l = s[2]);
                let o = l,
                    u = `#${r}`;
                return (
                    s[3] === Symbol.for("react.memo_cache_sentinel")
                        ? ((a = {
                              overflow: "hidden",
                              textOverflow: "ellipsis",
                              cursor: "pointer",
                              maxWidth: "100%",
                          }),
                          (s[3] = a))
                        : (a = s[3]),
                    s[4] !== o || s[5] !== t || s[6] !== u
                        ? ((n = (0, y.jsx)("div", {
                              className: u3.container,
                              children: (0, y.jsx)(ic.a, {
                                  text: o,
                                  fillColor: u,
                                  "aria-label": t,
                                  style: a,
                              }),
                          })),
                          (s[4] = o),
                          (s[5] = t),
                          (s[6] = u),
                          (s[7] = n))
                        : (n = s[7]),
                    n
                );
            }
            try {
                u4.displayName || (u4.displayName = "LabelPreview");
            } catch {}
            let u5 = {
                middlePaneWrapper:
                    "RepositoryLabel-module__middlePaneWrapper--J7mNi",
                labelListWrapper:
                    "RepositoryLabel-module__labelListWrapper--G0b5q",
                labelRowDescriptionItemDescription:
                    "RepositoryLabel-module__labelRowDescriptionItemDescription--M5zXu",
                labelRowIssuesAndPrsCount:
                    "RepositoryLabel-module__labelRowIssuesAndPrsCount--cvCtY",
                labelRowDescription:
                    "RepositoryLabel-module__labelRowDescription--mRyog",
                empty: "RepositoryLabel-module__empty--o4qjn",
                noActionBar: "RepositoryLabel-module__noActionBar--dX2zH",
                loadingIssueAndPullRequestCount:
                    "RepositoryLabel-module__loadingIssueAndPullRequestCount--NHihD",
                header: "RepositoryLabel-module__header--L66Zo",
                heading: "RepositoryLabel-module__heading--RmLIR",
                dialogForm: "RepositoryLabel-module__dialogForm--W24eG",
                dialogFormBody: "RepositoryLabel-module__dialogFormBody--FrZm0",
                dialogFormButtonGroup:
                    "RepositoryLabel-module__dialogFormButtonGroup--b46Za",
                dialogFormInput:
                    "RepositoryLabel-module__dialogFormInput--Cg3kU",
                dialogFormPreviewContainer:
                    "RepositoryLabel-module__dialogFormPreviewContainer--T8PPP",
                countContainer: "RepositoryLabel-module__countContainer--GFWJl",
                countItem: "RepositoryLabel-module__countItem--mMW91",
            };
            function u7(e) {
                let l,
                    a,
                    n,
                    s,
                    i,
                    t,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p,
                    k,
                    h,
                    f,
                    C,
                    F,
                    S,
                    L,
                    K,
                    v,
                    I,
                    _,
                    x,
                    w,
                    N = (0, tc.c)(68),
                    {
                        onDialogClose: j,
                        onDialogSubmit: R,
                        formTitle: P,
                        submissionErrors: T,
                        submitButtonText: A,
                        namePlaceholder: M,
                        descriptionPlaceholder: V,
                        initialValues: D,
                    } = e,
                    E = void 0 === P ? uH.newLabel : P,
                    q = void 0 === T ? "" : T,
                    O = void 0 === A ? uH.createButtonText : A,
                    [B, $] = (0, b.useState)(D?.name ?? ""),
                    [Q, U] = (0, b.useState)(D?.description ?? "");
                N[0] !== D
                    ? ((l = () => (D?.color ? `#${D.color}` : u1())),
                      (N[0] = D),
                      (N[1] = l))
                    : (l = N[1]);
                let [z, H] = (0, b.useState)(l),
                    [W, G] = (0, b.useState)(z),
                    [Z, X] = (0, b.useState)(!1),
                    [J, Y] = (0, b.useState)(null),
                    [ee, el] = (0, b.useState)(null),
                    ea = (0, b.useRef)(null),
                    en = (0, b.useRef)(null),
                    es = (0, b.useRef)(null);
                N[2] !== z ||
                N[3] !== W ||
                N[4] !== Q ||
                N[5] !== Z ||
                N[6] !== B ||
                N[7] !== R
                    ? ((a = () => {
                          if (!Z) {
                              if ((X(!0), Y(null), el(null), !B)) {
                                  (Y(uH.nameRequired),
                                      X(!1),
                                      en.current?.focus());
                                  return;
                              }
                              if (!u2(W)) {
                                  (el(uH.invalidColor),
                                      X(!1),
                                      es.current?.focus());
                                  return;
                              }
                              R(
                                  {
                                      name: B.trim(),
                                      description: Q.trim(),
                                      color: z.replace("#", ""),
                                  },
                                  X
                              );
                          }
                      }),
                      (N[2] = z),
                      (N[3] = W),
                      (N[4] = Q),
                      (N[5] = Z),
                      (N[6] = B),
                      (N[7] = R),
                      (N[8] = a))
                    : (a = N[8]);
                let ei = a;
                N[9] === Symbol.for("react.memo_cache_sentinel")
                    ? ((n = (e) => {
                          (G(e), u2(e) && (H(e), el(null)));
                      }),
                      (N[9] = n))
                    : (n = N[9]);
                let et = n;
                (N[10] !== q
                    ? ((s = () => {
                          q &&
                              q.length > 0 &&
                              ea?.current &&
                              ea.current.focus();
                      }),
                      (i = [ea, q]),
                      (N[10] = q),
                      (N[11] = s),
                      (N[12] = i))
                    : ((s = N[11]), (i = N[12])),
                    (0, b.useEffect)(s, i),
                    N[13] !== ei || N[14] !== j
                        ? ((t = {
                              "repository-label:save-label-submit": ei,
                              "repository-label:cancel-save-label": j,
                          }),
                          (N[13] = ei),
                          (N[14] = j),
                          (N[15] = t))
                        : (t = N[15]),
                    N[16] !== q
                        ? ((r =
                              q?.length > 0
                                  ? (0, y.jsx)(rC.l, {
                                        ref: ea,
                                        title: "Error",
                                        description: (0, y.jsx)(uW.o, {
                                            children: q,
                                        }),
                                        variant: "critical",
                                        role: "alert",
                                    })
                                  : null),
                          (N[16] = q),
                          (N[17] = r))
                        : (r = N[17]));
                let er = B || uH.labelPreview;
                return (
                    N[18] !== z
                        ? ((o = z?.replace("#", "")), (N[18] = z), (N[19] = o))
                        : (o = N[19]),
                    N[20] !== er || N[21] !== o
                        ? ((u = (0, y.jsx)("div", {
                              className: u5.dialogFormPreviewContainer,
                              children: (0, y.jsx)(u4, { name: er, color: o }),
                          })),
                          (N[20] = er),
                          (N[21] = o),
                          (N[22] = u))
                        : (u = N[22]),
                    N[23] === Symbol.for("react.memo_cache_sentinel")
                        ? ((d = (0, y.jsx)(ak.A.Label, {
                              htmlFor: "label-form-name",
                              children: uH.name,
                          })),
                          (N[23] = d))
                        : (d = N[23]),
                    N[24] === Symbol.for("react.memo_cache_sentinel")
                        ? ((c = (e) => $(e.target.value)), (N[24] = c))
                        : (c = N[24]),
                    N[25] !== B || N[26] !== M
                        ? ((m = (0, y.jsx)(rO.A, {
                              value: B,
                              onChange: c,
                              className: u5.dialogFormInput,
                              ref: en,
                              maxLength: 50,
                              placeholder: M,
                          })),
                          (N[25] = B),
                          (N[26] = M),
                          (N[27] = m))
                        : (m = N[27]),
                    N[28] !== J
                        ? ((g =
                              J &&
                              (0, y.jsx)(ak.A.Validation, {
                                  variant: "error",
                                  children: J,
                              })),
                          (N[28] = J),
                          (N[29] = g))
                        : (g = N[29]),
                    N[30] !== m || N[31] !== g
                        ? ((p = (0, y.jsxs)(ak.A, {
                              className: u5.dialogFormInput,
                              id: "label-form-name",
                              children: [d, m, g],
                          })),
                          (N[30] = m),
                          (N[31] = g),
                          (N[32] = p))
                        : (p = N[32]),
                    N[33] === Symbol.for("react.memo_cache_sentinel")
                        ? ((k = (0, y.jsx)(ak.A.Label, {
                              htmlFor: "label-form-description",
                              children: uH.description,
                          })),
                          (N[33] = k))
                        : (k = N[33]),
                    N[34] === Symbol.for("react.memo_cache_sentinel")
                        ? ((h = (e) => U(e.target.value)), (N[34] = h))
                        : (h = N[34]),
                    N[35] !== Q || N[36] !== V
                        ? ((f = (0, y.jsxs)(ak.A, {
                              className: u5.dialogFormInput,
                              id: "label-form-description",
                              children: [
                                  k,
                                  (0, y.jsx)(uC.Ay, {
                                      value: Q,
                                      onChange: h,
                                      rows: 3,
                                      className: u5.dialogFormInput,
                                      placeholder: V,
                                  }),
                              ],
                          })),
                          (N[35] = Q),
                          (N[36] = V),
                          (N[37] = f))
                        : (f = N[37]),
                    N[38] !== z
                        ? ((C = (0, y.jsx)(u0, {
                              color: z,
                              onChangeCallback: et,
                              ref: es,
                          })),
                          (N[38] = z),
                          (N[39] = C))
                        : (C = N[39]),
                    N[40] === Symbol.for("react.memo_cache_sentinel")
                        ? ((F = (0, y.jsx)(ak.A.Label, {
                              visuallyHidden: !0,
                              children: uH.color,
                          })),
                          (N[40] = F))
                        : (F = N[40]),
                    N[41] !== ee
                        ? ((S =
                              ee &&
                              (0, y.jsx)(ak.A.Validation, {
                                  variant: "error",
                                  children: ee,
                              })),
                          (N[41] = ee),
                          (N[42] = S))
                        : (S = N[42]),
                    N[43] !== C || N[44] !== S
                        ? ((L = (0, y.jsxs)(ak.A, {
                              className: u5.dialogFormInput,
                              id: "label-form-color",
                              children: [C, F, S],
                          })),
                          (N[43] = C),
                          (N[44] = S),
                          (N[45] = L))
                        : (L = N[45]),
                    N[46] !== r ||
                    N[47] !== u ||
                    N[48] !== p ||
                    N[49] !== f ||
                    N[50] !== L
                        ? ((K = (0, y.jsxs)(oe.l.Body, {
                              className: u5.dialogFormBody,
                              children: [r, u, p, f, L],
                          })),
                          (N[46] = r),
                          (N[47] = u),
                          (N[48] = p),
                          (N[49] = f),
                          (N[50] = L),
                          (N[51] = K))
                        : (K = N[51]),
                    N[52] !== Z
                        ? ((v = (0, y.jsx)(nz.cQ, {
                              commandId: "repository-label:cancel-save-label",
                              disabled: Z,
                              children: uH.cancelButtonText,
                          })),
                          (N[52] = Z),
                          (N[53] = v))
                        : (v = N[53]),
                    N[54] !== Z || N[55] !== O
                        ? ((I = (0, y.jsx)(nz.cQ, {
                              commandId: "repository-label:save-label-submit",
                              variant: "primary",
                              loading: Z,
                              showKeybindingHint: !0,
                              children: O,
                          })),
                          (N[54] = Z),
                          (N[55] = O),
                          (N[56] = I))
                        : (I = N[56]),
                    N[57] !== v || N[58] !== I
                        ? ((_ = (0, y.jsxs)(oe.l.Footer, {
                              className: u5.dialogFormButtonGroup,
                              children: [v, I],
                          })),
                          (N[57] = v),
                          (N[58] = I),
                          (N[59] = _))
                        : (_ = N[59]),
                    N[60] !== E || N[61] !== j || N[62] !== K || N[63] !== _
                        ? ((x = (0, y.jsxs)(oe.l, {
                              title: E,
                              onClose: j,
                              className: u5.dialogForm,
                              children: [K, _],
                          })),
                          (N[60] = E),
                          (N[61] = j),
                          (N[62] = K),
                          (N[63] = _),
                          (N[64] = x))
                        : (x = N[64]),
                    N[65] !== x || N[66] !== t
                        ? ((w = (0, y.jsx)(nz.tL, {
                              commands: t,
                              children: x,
                          })),
                          (N[65] = x),
                          (N[66] = t),
                          (N[67] = w))
                        : (w = N[67]),
                    w
                );
            }
            try {
                u7.displayName || (u7.displayName = "DialogForm");
            } catch {}
            let u6 = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "connection",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "input",
                    },
                    a = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "message",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l],
                        kind: "Fragment",
                        metadata: null,
                        name: "createRepositoryLabelMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "CreateLabelPayload",
                                kind: "LinkedField",
                                name: "createLabel",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "label",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "LabelRow",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [s],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, e],
                        kind: "Operation",
                        name: "createRepositoryLabelMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "CreateLabelPayload",
                                kind: "LinkedField",
                                name: "createLabel",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "label",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "name",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "color",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        filters: null,
                                        handle: "prependNode",
                                        key: "",
                                        kind: "LinkedHandle",
                                        name: "label",
                                        handleArgs: [
                                            {
                                                items: [
                                                    {
                                                        kind: "Variable",
                                                        name: "connections.0",
                                                        variableName:
                                                            "connection",
                                                    },
                                                ],
                                                kind: "ListValue",
                                                name: "connections",
                                            },
                                            {
                                                kind: "Literal",
                                                name: "edgeTypeName",
                                                value: "LabelEdge",
                                            },
                                        ],
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                            s,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "400a790ec793657e416efe2cb1edd649",
                        metadata: {},
                        name: "createRepositoryLabelMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            u6.hash = "f147fb55ba80b3d234ad6dbd8c038076";
            let u9 = { name: "NAME", count: "ISSUE_COUNT" },
                u8 = Object.keys(u9),
                de = ["asc", "desc"];
            function dl(e) {
                return e
                    .map((e) => e.message.trim())
                    .filter(Boolean)
                    .join(", ");
            }
            function da(e) {
                let l,
                    a,
                    n,
                    s,
                    i = (0, tc.c)(12),
                    { repository: t, isOpen: r, onClose: o } = e,
                    u = (0, er.useRelayEnvironment)(),
                    [d, c] = (0, b.useState)(""),
                    [m] = (0, e7.o)();
                i[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((l = uz), (i[0] = l))
                    : (l = i[0]);
                let g = (0, er.useFragment)(l, r ? t : null);
                i[1] !== u || i[2] !== o || i[3] !== g || i[4] !== m
                    ? ((a = (e, l) => {
                          if ((c(""), !g?.viewerCanPush)) {
                              (c(uH.labelCreatePermissionError), l(!1));
                              return;
                          }
                          let a = (function (e) {
                                  let [l, a = "asc"] = (
                                          e.get("sort") ?? "name-asc"
                                      ).split("-"),
                                      n = u9[l] ?? u9.name;
                                  return {
                                      orderBy: {
                                          direction: (de.includes(a)
                                              ? a
                                              : "asc"
                                          ).toUpperCase(),
                                          field: n,
                                      },
                                      skip: 0,
                                      ...(e.get("q") && { query: e.get("q") }),
                                  };
                              })(m),
                              n = er.ConnectionHandler.getConnectionID(
                                  g.id,
                                  "LabelList_labels",
                                  a
                              );
                          !(function ({
                              environment: e,
                              input: l,
                              connectionId: a,
                              onError: n,
                              onCompleted: s,
                          }) {
                              (0, er.commitMutation)(e, {
                                  mutation: u6,
                                  variables: { input: l, connection: a },
                                  onError: (e) => n?.(e),
                                  onCompleted: (e) => s?.(e),
                                  updater: (e) => {
                                      if (!a) return;
                                      let l = e.get(a);
                                      if (!l) return;
                                      let n = l.getValue("totalCount") ?? 0;
                                      l.setValue(n + 1, "totalCount");
                                  },
                              });
                          })({
                              environment: u,
                              input: {
                                  repositoryId: g.id,
                                  name: e.name,
                                  color: e.color,
                                  description: e.description,
                              },
                              connectionId: n,
                              onError: (e) => {
                                  (l(!1),
                                      e.cause && Array.isArray(e.cause)
                                          ? c(dl(e.cause))
                                          : c(uH.labelCreateError));
                              },
                              onCompleted: (e) => {
                                  (l(!1),
                                      e.createLabel?.errors &&
                                      e.createLabel.errors.length > 0
                                          ? c(dl(e.createLabel.errors))
                                          : o());
                              },
                          });
                      }),
                      (i[1] = u),
                      (i[2] = o),
                      (i[3] = g),
                      (i[4] = m),
                      (i[5] = a))
                    : (a = i[5]);
                let p = a;
                i[6] !== o
                    ? ((n = () => {
                          (c(""), o());
                      }),
                      (i[6] = o),
                      (i[7] = n))
                    : (n = i[7]);
                let k = n;
                return r
                    ? (i[8] !== k || i[9] !== p || i[10] !== d
                          ? ((s = (0, y.jsx)(u7, {
                                onDialogClose: k,
                                formTitle: uH.newLabel,
                                namePlaceholder: uH.labelNamePlaceholder,
                                descriptionPlaceholder:
                                    uH.labelDescriptionPlaceholder,
                                submissionErrors: d,
                                submitButtonText: uH.createButtonText,
                                onDialogSubmit: p,
                            })),
                            (i[8] = k),
                            (i[9] = p),
                            (i[10] = d),
                            (i[11] = s))
                          : (s = i[11]),
                      s)
                    : null;
            }
            try {
                da.displayName || (da.displayName = "LabelCreate");
            } catch {}
            let dn = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "cursor",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    n = {
                        defaultValue: "DESC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    s = {
                        defaultValue: "NAME",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    t = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    r = [{ kind: "Variable", name: "id", variableName: "id" }],
                    o = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    u = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    d = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    g = [
                        {
                            kind: "Variable",
                            name: "after",
                            variableName: "cursor",
                        },
                        o,
                        {
                            fields: [
                                {
                                    kind: "Variable",
                                    name: "direction",
                                    variableName: "orderDirection",
                                },
                                {
                                    kind: "Variable",
                                    name: "field",
                                    variableName: "orderField",
                                },
                            ],
                            kind: "ObjectValue",
                            name: "orderBy",
                        },
                        u,
                        d,
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a, n, s, i, t],
                        kind: "Fragment",
                        metadata: null,
                        name: "LabelListQuery",
                        selections: [
                            {
                                alias: null,
                                args: r,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                            o,
                                            {
                                                kind: "Variable",
                                                name: "orderDirection",
                                                variableName: "orderDirection",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "orderField",
                                                variableName: "orderField",
                                            },
                                            u,
                                            d,
                                        ],
                                        kind: "FragmentSpread",
                                        name: "LabelList",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, l, n, s, i, t, a],
                        kind: "Operation",
                        name: "LabelListQuery",
                        selections: [
                            {
                                alias: null,
                                args: r,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    c,
                                    m,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameWithOwner",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: g,
                                                concreteType: "LabelConnection",
                                                kind: "LinkedField",
                                                name: "labels",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "LabelEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Label",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    m,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "name",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "nameHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "color",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "description",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    c,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "totalCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "endCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasNextPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: g,
                                                filters: [
                                                    "query",
                                                    "orderBy",
                                                    "skip",
                                                ],
                                                handle: "connection",
                                                key: "LabelList_labels",
                                                kind: "LinkedHandle",
                                                name: "labels",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isWritable",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanPush",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Repository",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "52535aabb06ed2be85721b28cdf4ddf3",
                        metadata: {},
                        name: "LabelListQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            dn.hash = "877381f6a4d0225be11b63a26d9ca9c5";
            let ds = (function () {
                var e = ["labels"],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: "DESC",
                            kind: "LocalArgument",
                            name: "orderDirection",
                        },
                        {
                            defaultValue: "NAME",
                            kind: "LocalArgument",
                            name: "orderField",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "query",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "skip",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "first",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: { count: "first", cursor: "cursor" },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: dn,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "LabelList",
                    selections: [
                        l,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameWithOwner",
                            storageKey: null,
                        },
                        {
                            alias: "labels",
                            args: [
                                {
                                    fields: [
                                        {
                                            kind: "Variable",
                                            name: "direction",
                                            variableName: "orderDirection",
                                        },
                                        {
                                            kind: "Variable",
                                            name: "field",
                                            variableName: "orderField",
                                        },
                                    ],
                                    kind: "ObjectValue",
                                    name: "orderBy",
                                },
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "query",
                                },
                                {
                                    kind: "Variable",
                                    name: "skip",
                                    variableName: "skip",
                                },
                            ],
                            concreteType: "LabelConnection",
                            kind: "LinkedField",
                            name: "__LabelList_labels_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "LabelEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Label",
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                l,
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "LabelRow",
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "totalCount",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isWritable",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanPush",
                            storageKey: null,
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            ds.hash = "877381f6a4d0225be11b63a26d9ca9c5";
            let di = (e) => {
                let l,
                    a,
                    n,
                    s,
                    i,
                    t = (0, tc.c)(13),
                    {
                        noLabelsCreated: r,
                        viewerCanPush: o,
                        onCreateLabel: u,
                    } = e,
                    d = r ? uH.noLabelsCreatedTitle : uH.noMatchingLabelsTitle,
                    c =
                        r && o
                            ? uH.noLabelsCreatedDescription
                            : uH.noMatchingLabelsDescription;
                return (
                    t[0] === Symbol.for("react.memo_cache_sentinel")
                        ? ((l = (0, y.jsx)(uv.E.Visual, {
                              children: (0, y.jsx)(T.TagIcon, {
                                  size: "medium",
                              }),
                          })),
                          (t[0] = l))
                        : (l = t[0]),
                    t[1] !== d
                        ? ((a = (0, y.jsx)(uv.E.Heading, {
                              as: "h3",
                              children: d,
                          })),
                          (t[1] = d),
                          (t[2] = a))
                        : (a = t[2]),
                    t[3] !== c
                        ? ((n = (0, y.jsx)(uv.E.Description, { children: c })),
                          (t[3] = c),
                          (t[4] = n))
                        : (n = t[4]),
                    t[5] !== r || t[6] !== u || t[7] !== o
                        ? ((s =
                              r &&
                              o &&
                              (0, y.jsx)(uv.E.PrimaryAction, {
                                  onClick: u,
                                  children: uH.newLabel,
                              })),
                          (t[5] = r),
                          (t[6] = u),
                          (t[7] = o),
                          (t[8] = s))
                        : (s = t[8]),
                    t[9] !== a || t[10] !== n || t[11] !== s
                        ? ((i = (0, y.jsxs)(uv.E, { children: [l, a, n, s] })),
                          (t[9] = a),
                          (t[10] = n),
                          (t[11] = s),
                          (t[12] = i))
                        : (i = t[12]),
                    i
                );
            };
            try {
                di.displayName || (di.displayName = "EmptyState");
            } catch {}
            let dt = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "nodes",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "ids",
                            variableName: "nodes",
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "IssuesAndPullRequestsCountSecondaryQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    a,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssuesAndPullRequestsCount",
                                            },
                                        ],
                                        type: "Label",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "IssuesAndPullRequestsCountSecondaryQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    a,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueCount",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "pullRequestCount",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Label",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "b314e1ada402f5a1ad5a80f5d3395c1d",
                        metadata: {},
                        name: "IssuesAndPullRequestsCountSecondaryQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            dt.hash = "5b29bf068c8fc22535058a3f1eba0c50";
            let dr = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssuesAndPullRequestsCount",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "issueCount",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "pullRequestCount",
                        storageKey: null,
                    },
                ],
                type: "Label",
                abstractKey: null,
            };
            dr.hash = "b68f025268eb8acb0882842361c6589b";
            var du = a(66565),
                dd = a(74753);
            let dc = (e) => {
                    let l,
                        a,
                        n,
                        s = (0, tc.c)(7),
                        {
                            secondaryQueryRef: i,
                            labelName: t,
                            labelId: r,
                            repositoryNameWithOwner: o,
                        } = e;
                    return i
                        ? (s[0] === Symbol.for("react.memo_cache_sentinel")
                              ? ((l = (0, y.jsxs)(sI.z, {
                                    className: u5.labelRowIssuesAndPrsCount,
                                    children: [
                                        (0, y.jsx)(T.AlertIcon, { size: 16 }),
                                        " Could not load data",
                                    ],
                                })),
                                (s[0] = l))
                              : (l = s[0]),
                          s[1] === Symbol.for("react.memo_cache_sentinel")
                              ? ((a = (0, y.jsx)(dm, {})), (s[1] = a))
                              : (a = s[1]),
                          s[2] !== r || s[3] !== t || s[4] !== o || s[5] !== i
                              ? ((n = (0, y.jsx)(i2.t, {
                                    fallback: l,
                                    children: (0, y.jsx)(b.Suspense, {
                                        fallback: a,
                                        children: (0, y.jsx)(dg, {
                                            labelName: t,
                                            labelId: r,
                                            secondaryQueryRef: i,
                                            repositoryNameWithOwner: o,
                                        }),
                                    }),
                                })),
                                (s[2] = r),
                                (s[3] = t),
                                (s[4] = o),
                                (s[5] = i),
                                (s[6] = n))
                              : (n = s[6]),
                          n)
                        : null;
                },
                dm = () => {
                    let e,
                        l = (0, tc.c)(1);
                    return (
                        l[0] === Symbol.for("react.memo_cache_sentinel")
                            ? ((e = (0, y.jsxs)(sI.z, {
                                  className: u5.labelRowIssuesAndPrsCount,
                                  children: [
                                      (0, y.jsx)(du.f, {
                                          className:
                                              u5.loadingIssueAndPullRequestCount,
                                      }),
                                      (0, y.jsx)(du.f, {
                                          className:
                                              u5.loadingIssueAndPullRequestCount,
                                      }),
                                  ],
                              })),
                              (l[0] = e))
                            : (e = l[0]),
                        e
                    );
                },
                dg = (e) => {
                    let l,
                        a,
                        n = (0, tc.c)(7),
                        {
                            secondaryQueryRef: s,
                            labelName: i,
                            labelId: t,
                            repositoryNameWithOwner: r,
                        } = e,
                        { nodes: o } = (0, er.usePreloadedQuery)(dt, s);
                    n[0] !== t || n[1] !== o
                        ? ((l = o?.find((e) => e?.id === t)),
                          (n[0] = t),
                          (n[1] = o),
                          (n[2] = l))
                        : (l = n[2]);
                    let u = l;
                    return u
                        ? (n[3] !== i || n[4] !== u || n[5] !== r
                              ? ((a = (0, y.jsx)(dp, {
                                    repositoryNameWithOwner: r,
                                    labelName: i,
                                    labelNode: u,
                                })),
                                (n[3] = i),
                                (n[4] = u),
                                (n[5] = r),
                                (n[6] = a))
                              : (a = n[6]),
                          a)
                        : null;
                },
                dp = (e) => {
                    let l,
                        a,
                        n,
                        s,
                        i,
                        t,
                        r,
                        o,
                        u,
                        d = (0, tc.c)(25),
                        {
                            labelName: c,
                            labelNode: m,
                            repositoryNameWithOwner: g,
                        } = e;
                    d[0] === Symbol.for("react.memo_cache_sentinel")
                        ? ((l = dr), (d[0] = l))
                        : (l = d[0]);
                    let p = (0, er.useFragment)(l, m);
                    d[1] !== c || d[2] !== g
                        ? ((a = (e) => {
                              let l = `${encodeURIComponent(`is:open is:${e} label:"${c}"`)}`;
                              return `/${g}/issues?q=${l}`;
                          }),
                          (d[1] = c),
                          (d[2] = g),
                          (d[3] = a))
                        : (a = d[3]);
                    let k = a,
                        h = p.issueCount || 0,
                        b = p.pullRequestCount || 0,
                        f = b > 0,
                        C = h > 0,
                        F = !f && u5.empty;
                    (d[4] !== F
                        ? ((n = (0, nA.$)(u5.countContainer, F)),
                          (d[4] = F),
                          (d[5] = n))
                        : (n = d[5]),
                        d[6] !== k || d[7] !== f || d[8] !== b
                            ? ((s =
                                  f &&
                                  (0, y.jsx)(is.m, {
                                      text: `${b} open pull requests`,
                                      direction: "n",
                                      children: (0, y.jsxs)(e9.A, {
                                          href: k("pr"),
                                          muted: !0,
                                          className: u5.countItem,
                                          children: [
                                              (0, y.jsx)(T.GitPullRequestIcon, {
                                                  size: 16,
                                              }),
                                              b,
                                              " ",
                                              (0, y.jsx)(dd.s, {
                                                  children:
                                                      "open pull requests",
                                              }),
                                          ],
                                      }),
                                  })),
                              (d[6] = k),
                              (d[7] = f),
                              (d[8] = b),
                              (d[9] = s))
                            : (s = d[9]),
                        d[10] !== n || d[11] !== s
                            ? ((i = (0, y.jsx)("div", {
                                  className: n,
                                  children: s,
                              })),
                              (d[10] = n),
                              (d[11] = s),
                              (d[12] = i))
                            : (i = d[12]));
                    let S = !C && u5.empty;
                    return (
                        d[13] !== S
                            ? ((t = (0, nA.$)(u5.countContainer, S)),
                              (d[13] = S),
                              (d[14] = t))
                            : (t = d[14]),
                        d[15] !== k || d[16] !== C || d[17] !== h
                            ? ((r =
                                  C &&
                                  (0, y.jsx)(is.m, {
                                      text: `${h} open issues`,
                                      direction: "n",
                                      children: (0, y.jsxs)(e9.A, {
                                          href: k("issue"),
                                          muted: !0,
                                          className: u5.countItem,
                                          children: [
                                              (0, y.jsx)(T.IssueOpenedIcon, {
                                                  size: 16,
                                              }),
                                              h,
                                              " ",
                                              (0, y.jsx)(dd.s, {
                                                  children: "open issues",
                                              }),
                                          ],
                                      }),
                                  })),
                              (d[15] = k),
                              (d[16] = C),
                              (d[17] = h),
                              (d[18] = r))
                            : (r = d[18]),
                        d[19] !== t || d[20] !== r
                            ? ((o = (0, y.jsx)("div", {
                                  className: t,
                                  children: r,
                              })),
                              (d[19] = t),
                              (d[20] = r),
                              (d[21] = o))
                            : (o = d[21]),
                        d[22] !== o || d[23] !== i
                            ? ((u = (0, y.jsxs)(sI.z, {
                                  className: u5.labelRowIssuesAndPrsCount,
                                  children: [i, o],
                              })),
                              (d[22] = o),
                              (d[23] = i),
                              (d[24] = u))
                            : (u = d[24]),
                        u
                    );
                };
            try {
                dc.displayName ||
                    (dc.displayName = "IssuesAndPullRequestsCount");
            } catch {}
            try {
                dm.displayName ||
                    (dm.displayName = "LoadingLabelSecondaryData");
            } catch {}
            try {
                dg.displayName ||
                    (dg.displayName = "IssuesAndPullRequestsCountFetched");
            } catch {}
            try {
                dp.displayName ||
                    (dp.displayName = "IssuesAndPullRequestsCountInternal");
            } catch {}
            let dy = { labelsPageSize: 30 },
                dk = (e) => {
                    let l,
                        a,
                        n,
                        s,
                        i = (0, tc.c)(13),
                        { dataCount: t } = e,
                        r = dy.labelsPageSize,
                        o = (0, e7.Z)(),
                        [u] = (0, e7.o)();
                    i[0] !== u
                        ? ((l = u.get("page")
                              ? parseInt(u.get("page"), 10)
                              : 1),
                          (i[0] = u),
                          (i[1] = l))
                        : (l = i[1]);
                    let d = l;
                    i[2] !== d || i[3] !== o || i[4] !== u
                        ? ((a = (e, l) => {
                              if ((e.preventDefault(), l === d)) return;
                              let a = new URLSearchParams(u);
                              (a.set("page", l.toString()),
                                  o(
                                      `${A.cg?.location.pathname}?${a.toString()}`
                                  ));
                          }),
                          (i[2] = d),
                          (i[3] = o),
                          (i[4] = u),
                          (i[5] = a))
                        : (a = i[5]);
                    let c = a;
                    i[6] !== u
                        ? ((n = (e) => {
                              let l = new URLSearchParams(u);
                              return (
                                  l.set("page", e.toString()),
                                  `${A.cg?.location.pathname}?${l.toString()}`
                              );
                          }),
                          (i[6] = u),
                          (i[7] = n))
                        : (n = i[7]);
                    let m = n,
                        g = Math.ceil(t / r);
                    return (
                        i[8] !== d || i[9] !== c || i[10] !== m || i[11] !== g
                            ? ((s = (0, y.jsx)(to.A, {
                                  pageCount: g,
                                  hrefBuilder: m,
                                  currentPage: d,
                                  onPageChange: c,
                              })),
                              (i[8] = d),
                              (i[9] = c),
                              (i[10] = m),
                              (i[11] = g),
                              (i[12] = s))
                            : (s = i[12]),
                        s
                    );
                };
            try {
                dk.displayName || (dk.displayName = "LabelListPagination");
            } catch {}
            let dh = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "LabelRow",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameHTML",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                ],
                type: "Label",
                abstractKey: null,
            };
            dh.hash = "018d9a2a4921ee93f19396bdfd3a4d22";
            var db = a(9214);
            let df = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "DeleteLabelPayload",
                            kind: "LinkedField",
                            name: "deleteLabel",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "clientMutationId",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "deleteLabelMutation",
                        selections: l,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "deleteLabelMutation",
                        selections: l,
                    },
                    params: {
                        id: "6a0d967e7c0851a17cc7be6b19d438b4",
                        metadata: {},
                        name: "deleteLabelMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            df.hash = "c579787fb72c7a89c766b95d6330f372";
            let dC = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "UpdateLabelPayload",
                            kind: "LinkedField",
                            name: "updateLabel",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Label",
                                    kind: "LinkedField",
                                    name: "label",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "id",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "name",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "nameHTML",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "description",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "color",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "updateLabelMutation",
                        selections: l,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "updateLabelMutation",
                        selections: l,
                    },
                    params: {
                        id: "01f658521cc6c78250b2636d2c75f846",
                        metadata: {},
                        name: "updateLabelMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            dC.hash = "5bda9d6819d5f7a4b515c22a83f1c73c";
            var dF = a(99418);
            function dS(e) {
                let l,
                    a,
                    n,
                    s,
                    i,
                    t,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p,
                    k,
                    h,
                    f,
                    C,
                    F = (0, tc.c)(57),
                    {
                        label: K,
                        isActionsAvailable: v,
                        viewerCanPush: I,
                        secondaryQueryRef: _,
                        repositoryId: x,
                        repositoryNameWithOwner: w,
                    } = e,
                    [N, j] = (0, b.useState)(!1),
                    [R, P] = (0, b.useState)(!1),
                    [T, A] = (0, b.useState)(!1),
                    [M, V] = (0, b.useState)(""),
                    D = (0, b.useRef)(null);
                F[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((l = dh), (F[0] = l))
                    : (l = F[0]);
                let E = (0, er.useFragment)(l, K),
                    q = (0, er.useRelayEnvironment)();
                F[1] !== E.id || F[2] !== q || F[3] !== x
                    ? ((a = async () => {
                          !(function ({
                              environment: e,
                              input: l,
                              onError: a,
                              onCompleted: n,
                          }) {
                              (0, er.commitMutation)(e, {
                                  mutation: df,
                                  variables: { input: l },
                                  optimisticUpdater: (e) => {
                                      e.delete(l.id);
                                  },
                                  updater: (e) => {
                                      e.delete(l.id);
                                  },
                                  onError: (e) => a?.(e),
                                  onCompleted: (e) => n?.(e),
                              });
                          })({
                              environment: q,
                              input: { id: E.id },
                              onCompleted: () => {
                                  (j(!1),
                                      P(!1),
                                      q.commitUpdate((e) => {
                                          let l = `client:${x}:__LabelList_labels_connection(orderBy:{"direction":"ASC","field":"NAME"},skip:0)`,
                                              a = e.get(l);
                                          if (a) {
                                              let e = a.getValue("totalCount");
                                              a.setValue(
                                                  Math.max(e - 1, 0),
                                                  "totalCount"
                                              );
                                          }
                                      }));
                              },
                              onError: () => {
                                  j(!0);
                              },
                          });
                      }),
                      (F[1] = E.id),
                      (F[2] = q),
                      (F[3] = x),
                      (F[4] = a))
                    : (a = F[4]);
                let O = a;
                F[5] !== E.id || F[6] !== q
                    ? ((n = async (e, l) => {
                          (V(""),
                              (function ({
                                  environment: e,
                                  input: l,
                                  onError: a,
                                  onCompleted: n,
                              }) {
                                  (0, er.commitMutation)(e, {
                                      mutation: dC,
                                      variables: { input: l },
                                      optimisticResponse: {
                                          updateLabel: {
                                              label: {
                                                  id: l.id,
                                                  name: l.name,
                                                  nameHTML: dF.default.sanitize(
                                                      l.name,
                                                      {
                                                          ALLOWED_TAGS: [],
                                                          ALLOWED_ATTR: [],
                                                          ALLOW_ARIA_ATTR: !1,
                                                      }
                                                  ),
                                                  description:
                                                      l.description ?? null,
                                                  color: l.color,
                                              },
                                          },
                                      },
                                      onError: (e) => a?.(e),
                                      onCompleted: (e) => n?.(e),
                                  });
                              })({
                                  environment: q,
                                  input: {
                                      id: E.id,
                                      name: e.name,
                                      description: e.description,
                                      color: e.color,
                                  },
                                  onCompleted: (e) => {
                                      if (!e.updateLabel?.label) {
                                          (V(uH.editLabelError), l(!1));
                                          return;
                                      }
                                      (l(!1), A(!1));
                                  },
                                  onError: (e) => {
                                      (e.cause && Array.isArray(e.cause)
                                          ? V(
                                                ((e) => {
                                                    let l = e
                                                        .map((e) => e?.message)
                                                        .filter(Boolean)
                                                        .join(", ");
                                                    return (
                                                        (l
                                                            ? l
                                                                  .charAt(0)
                                                                  .toUpperCase() +
                                                              l.slice(1)
                                                            : null) ??
                                                        uH.updateLabelError
                                                    );
                                                })(e.cause)
                                            )
                                          : V(uH.editLabelError),
                                          l(!1));
                                  },
                              }));
                      }),
                      (F[5] = E.id),
                      (F[6] = q),
                      (F[7] = n))
                    : (n = F[7]);
                let B = n;
                if (
                    (F[8] !== N
                        ? ((s = () => {
                              N && D?.current && D.current.focus();
                          }),
                          (i = [D, N]),
                          (F[8] = N),
                          (F[9] = s),
                          (F[10] = i))
                        : ((s = F[9]), (i = F[10])),
                    (0, b.useEffect)(s, i),
                    F[11] !== E.name)
                ) {
                    let e = eN(L.open, [E.name], "label");
                    ((t = ar({ viewId: S.repository, query: e })),
                        (F[11] = E.name),
                        (F[12] = t));
                } else t = F[12];
                let $ = t,
                    Q = E.id;
                (F[13] === Symbol.for("react.memo_cache_sentinel")
                    ? ((r = (0, y.jsx)(y.Fragment, {})), (F[13] = r))
                    : (r = F[13]),
                    F[14] !== v || F[15] !== I
                        ? ((o = v
                              ? (0, y.jsx)(db.L, {
                                    staticMenuActions: [
                                        ...(I
                                            ? [
                                                  {
                                                      key: "edit",
                                                      render: () =>
                                                          (0, y.jsx)(
                                                              np.l.Item,
                                                              {
                                                                  onSelect:
                                                                      () =>
                                                                          A(!0),
                                                                  children:
                                                                      "Edit",
                                                              }
                                                          ),
                                                  },
                                              ]
                                            : []),
                                        ...(I
                                            ? [
                                                  {
                                                      key: "delete",
                                                      render: () =>
                                                          (0, y.jsxs)(
                                                              y.Fragment,
                                                              {
                                                                  children: [
                                                                      (0,
                                                                      y.jsx)(
                                                                          np.l
                                                                              .Divider,
                                                                          {}
                                                                      ),
                                                                      (0,
                                                                      y.jsx)(
                                                                          np.l
                                                                              .Item,
                                                                          {
                                                                              variant:
                                                                                  "danger",
                                                                              onSelect:
                                                                                  () =>
                                                                                      P(
                                                                                          !0
                                                                                      ),
                                                                              children:
                                                                                  uH.deleteButtonText,
                                                                          }
                                                                      ),
                                                                  ],
                                                              }
                                                          ),
                                                  },
                                              ]
                                            : []),
                                    ],
                                })
                              : void 0),
                          (F[14] = v),
                          (F[15] = I),
                          (F[16] = o))
                        : (o = F[16]));
                let U = !v && u5.noActionBar;
                F[17] !== U
                    ? ((u = (0, nA.$)(u5.labelRowDescription, U)),
                      (F[17] = U),
                      (F[18] = u))
                    : (u = F[18]);
                let z = E.nameHTML;
                F[19] !== z
                    ? ((d = (0, y.jsx)(im.JR, { html: z })),
                      (F[19] = z),
                      (F[20] = d))
                    : (d = F[20]);
                let H = `#${E.color}`;
                return (
                    F[21] !== d || F[22] !== H
                        ? ((c = (0, y.jsx)(
                              ic.a,
                              { text: d, interactive: !0, fillColor: H },
                              0
                          )),
                          (F[21] = d),
                          (F[22] = H),
                          (F[23] = c))
                        : (c = F[23]),
                    F[24] !== E.name || F[25] !== $ || F[26] !== c
                        ? ((m = (0, y.jsxs)(sI.z, {
                              children: [
                                  (0, y.jsx)(e9.A, {
                                      href: $,
                                      muted: !0,
                                      "aria-label": E.name,
                                      children: c,
                                  }),
                                  " ",
                              ],
                          })),
                          (F[24] = E.name),
                          (F[25] = $),
                          (F[26] = c),
                          (F[27] = m))
                        : (m = F[27]),
                    F[28] !== E.description
                        ? ((g = (0, y.jsx)(sI.z, {
                              className: u5.labelRowDescriptionItemDescription,
                              children: E.description,
                          })),
                          (F[28] = E.description),
                          (F[29] = g))
                        : (g = F[29]),
                    F[30] !== E.id ||
                    F[31] !== E.name ||
                    F[32] !== w ||
                    F[33] !== _
                        ? ((p = (0, y.jsx)(dc, {
                              repositoryNameWithOwner: w,
                              labelName: E.name,
                              labelId: E.id,
                              secondaryQueryRef: _,
                          })),
                          (F[30] = E.id),
                          (F[31] = E.name),
                          (F[32] = w),
                          (F[33] = _),
                          (F[34] = p))
                        : (p = F[34]),
                    F[35] !== u || F[36] !== m || F[37] !== g || F[38] !== p
                        ? ((k = (0, y.jsx)(nJ.Q, {
                              children: (0, y.jsxs)(nZ.U, {
                                  className: u,
                                  children: [m, g, p],
                              }),
                          })),
                          (F[35] = u),
                          (F[36] = m),
                          (F[37] = g),
                          (F[38] = p),
                          (F[39] = k))
                        : (k = F[39]),
                    F[40] !== N || F[41] !== O || F[42] !== R
                        ? ((h =
                              R &&
                              (0, y.jsx)(rG.K, {
                                  onClose: (e) => {
                                      "confirm" === e ? O() : (j(!1), P(!1));
                                  },
                                  title: (0, y.jsx)("p", {
                                      children: uH.labelDeleteDialogTitle,
                                  }),
                                  cancelButtonContent: uH.cancelButtonText,
                                  confirmButtonContent:
                                      uH.deleteLabelButtonText,
                                  confirmButtonType: "danger",
                                  children: (0, y.jsxs)("div", {
                                      children: [
                                          N &&
                                              (0, y.jsx)(rC.l, {
                                                  ref: D,
                                                  className: "mb-3",
                                                  title: "Error",
                                                  description: (0, y.jsx)(
                                                      uW.o,
                                                      {
                                                          children:
                                                              uH.deleteLabelError,
                                                      }
                                                  ),
                                                  variant: "critical",
                                                  role: "alert",
                                              }),
                                          (0, y.jsx)("p", {
                                              children:
                                                  uH.deleteLabelWarningPermanent,
                                          }),
                                          (0, y.jsx)("p", {
                                              children:
                                                  uH.deleteLabelAssociatedIssuesNote,
                                          }),
                                      ],
                                  }),
                              })),
                          (F[40] = N),
                          (F[41] = O),
                          (F[42] = R),
                          (F[43] = h))
                        : (h = F[43]),
                    F[44] !== E.color ||
                    F[45] !== E.description ||
                    F[46] !== E.name ||
                    F[47] !== M ||
                    F[48] !== B ||
                    F[49] !== T
                        ? ((f =
                              T &&
                              (0, y.jsx)(u7, {
                                  onDialogClose: () => {
                                      (V(""), A(!1));
                                  },
                                  formTitle: uH.editLabel,
                                  descriptionPlaceholder:
                                      uH.labelDescriptionPlaceholder,
                                  submissionErrors: M,
                                  submitButtonText: uH.saveChanges,
                                  onDialogSubmit: B,
                                  initialValues: {
                                      name: E.name,
                                      description: E.description,
                                      color: E.color,
                                  },
                              })),
                          (F[44] = E.color),
                          (F[45] = E.description),
                          (F[46] = E.name),
                          (F[47] = M),
                          (F[48] = B),
                          (F[49] = T),
                          (F[50] = f))
                        : (f = F[50]),
                    F[51] !== E.id ||
                    F[52] !== k ||
                    F[53] !== h ||
                    F[54] !== f ||
                    F[55] !== o
                        ? ((C = (0, y.jsxs)(
                              nG.c,
                              {
                                  title: r,
                                  role: "listitem",
                                  secondaryActions: o,
                                  children: [k, h, f],
                              },
                              Q
                          )),
                          (F[51] = E.id),
                          (F[52] = k),
                          (F[53] = h),
                          (F[54] = f),
                          (F[55] = o),
                          (F[56] = C))
                        : (C = F[56]),
                    C
                );
            }
            try {
                dS.displayName || (dS.displayName = "LabelRow");
            } catch {}
            function dL() {
                let e,
                    l,
                    a,
                    n,
                    s,
                    i,
                    t,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p,
                    k,
                    h,
                    b,
                    f,
                    C,
                    F,
                    S = (0, tc.c)(50),
                    [L] = (0, e7.o)(),
                    K = (0, e7.Z)();
                if (S[0] !== L) {
                    let a = L.get("sort");
                    if (((l = "name"), (e = "asc"), a)) {
                        let [n, s] = a.split("-");
                        (u8.includes(n) && (l = n),
                            ("asc" === s || "desc" === s) && (e = s));
                    }
                    ((S[0] = L), (S[1] = e), (S[2] = l));
                } else ((e = S[1]), (l = S[2]));
                S[3] !== K || S[4] !== l || S[5] !== L
                    ? ((a = (e) => {
                          if (e === l) return;
                          let a = new URLSearchParams(L);
                          (a.set(
                              "sort",
                              `${e}-${"count" === e ? "desc" : "asc"}`
                          ),
                              K(`${A.cg?.location.pathname}?${a.toString()}`));
                      }),
                      (S[3] = K),
                      (S[4] = l),
                      (S[5] = L),
                      (S[6] = a))
                    : (a = S[6]);
                let v = a;
                S[7] !== e || S[8] !== K || S[9] !== l || S[10] !== L
                    ? ((n = (a) => {
                          if (a === e) return;
                          let n = new URLSearchParams(L);
                          (n.set("sort", `${l}-${a}`),
                              K(`${A.cg?.location.pathname}?${n.toString()}`));
                      }),
                      (S[7] = e),
                      (S[8] = K),
                      (S[9] = l),
                      (S[10] = L),
                      (S[11] = n))
                    : (n = S[11]);
                let I = n,
                    _ = "asc" === e ? T.SortAscIcon : T.SortDescIcon;
                (S[12] !== _
                    ? ((s = (0, y.jsx)(i3.W.Button, {
                          variant: "invisible",
                          leadingVisual: _,
                          children: "Sort",
                      })),
                      (S[12] = _),
                      (S[13] = s))
                    : (s = S[13]),
                    S[14] === Symbol.for("react.memo_cache_sentinel")
                        ? ((i = (0, y.jsx)(np.l.GroupHeading, {
                              children: "Sort by",
                          })),
                          (S[14] = i))
                        : (i = S[14]),
                    S[15] !== v
                        ? ((t = () => v("name")), (S[15] = v), (S[16] = t))
                        : (t = S[16]));
                let x = "name" === l;
                (S[17] !== t || S[18] !== x
                    ? ((r = (0, y.jsx)(np.l.Item, {
                          onSelect: t,
                          selected: x,
                          children: "Name",
                      })),
                      (S[17] = t),
                      (S[18] = x),
                      (S[19] = r))
                    : (r = S[19]),
                    S[20] !== v
                        ? ((o = () => v("count")), (S[20] = v), (S[21] = o))
                        : (o = S[21]));
                let w = "count" === l;
                (S[22] !== o || S[23] !== w
                    ? ((u = (0, y.jsx)(np.l.Item, {
                          onSelect: o,
                          selected: w,
                          children: "Total issue count",
                      })),
                      (S[22] = o),
                      (S[23] = w),
                      (S[24] = u))
                    : (u = S[24]),
                    S[25] !== u || S[26] !== r
                        ? ((d = (0, y.jsxs)(np.l.Group, {
                              children: [i, r, u],
                          })),
                          (S[25] = u),
                          (S[26] = r),
                          (S[27] = d))
                        : (d = S[27]),
                    S[28] === Symbol.for("react.memo_cache_sentinel")
                        ? ((c = (0, y.jsx)(np.l.GroupHeading, {
                              children: "Order",
                          })),
                          (S[28] = c))
                        : (c = S[28]));
                let N = "asc" === e;
                (S[29] !== I
                    ? ((m = () => I("asc")), (S[29] = I), (S[30] = m))
                    : (m = S[30]),
                    S[31] === Symbol.for("react.memo_cache_sentinel")
                        ? ((g = (0, y.jsx)(np.l.LeadingVisual, {
                              children: (0, y.jsx)(T.SortAscIcon, {}),
                          })),
                          (S[31] = g))
                        : (g = S[31]),
                    S[32] !== N || S[33] !== m
                        ? ((p = (0, y.jsxs)(
                              np.l.Item,
                              {
                                  selected: N,
                                  onSelect: m,
                                  children: [g, "Ascending"],
                              },
                              "ascending"
                          )),
                          (S[32] = N),
                          (S[33] = m),
                          (S[34] = p))
                        : (p = S[34]));
                let j = "desc" === e;
                return (
                    S[35] !== I
                        ? ((k = () => I("desc")), (S[35] = I), (S[36] = k))
                        : (k = S[36]),
                    S[37] === Symbol.for("react.memo_cache_sentinel")
                        ? ((h = (0, y.jsx)(np.l.LeadingVisual, {
                              children: (0, y.jsx)(T.SortDescIcon, {}),
                          })),
                          (S[37] = h))
                        : (h = S[37]),
                    S[38] !== j || S[39] !== k
                        ? ((b = (0, y.jsxs)(
                              np.l.Item,
                              {
                                  selected: j,
                                  onSelect: k,
                                  children: [h, "Descending"],
                              },
                              "descending"
                          )),
                          (S[38] = j),
                          (S[39] = k),
                          (S[40] = b))
                        : (b = S[40]),
                    S[41] !== p || S[42] !== b
                        ? ((f = (0, y.jsxs)(np.l.Group, {
                              children: [c, p, b],
                          })),
                          (S[41] = p),
                          (S[42] = b),
                          (S[43] = f))
                        : (f = S[43]),
                    S[44] !== d || S[45] !== f
                        ? ((C = (0, y.jsx)(i3.W.Overlay, {
                              children: (0, y.jsxs)(np.l, {
                                  selectionVariant: "single",
                                  children: [d, f],
                              }),
                          })),
                          (S[44] = d),
                          (S[45] = f),
                          (S[46] = C))
                        : (C = S[46]),
                    S[47] !== C || S[48] !== s
                        ? ((F = (0, y.jsxs)(i3.W, { children: [s, C] })),
                          (S[47] = C),
                          (S[48] = s),
                          (S[49] = F))
                        : (F = S[49]),
                    F
                );
            }
            try {
                dL.displayName || (dL.displayName = "LabelSortMenu");
            } catch {}
            function dK(e) {
                let l,
                    a,
                    n = (0, tc.c)(6),
                    { repositoryRef: s, onCreateLabel: i } = e;
                n[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((l = ds), (n[0] = l))
                    : (l = n[0]);
                let {
                    data: t,
                    loadNext: r,
                    hasNext: o,
                } = (0, er.usePaginationFragment)(l, s);
                if (!t.labels) throw Error("labels data is null or undefined");
                return (
                    n[1] !== t || n[2] !== o || n[3] !== r || n[4] !== i
                        ? ((a = (0, y.jsx)(dv, {
                              data: t,
                              loadNext: r,
                              hasNext: o,
                              onCreateLabel: i,
                          })),
                          (n[1] = t),
                          (n[2] = o),
                          (n[3] = r),
                          (n[4] = i),
                          (n[5] = a))
                        : (a = n[5]),
                    a
                );
            }
            function dv(e) {
                let l,
                    a,
                    n,
                    s,
                    i,
                    t,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g = (0, tc.c)(38),
                    { data: p, onCreateLabel: k } = e;
                g[0] !== p.labels?.edges
                    ? ((l = p.labels?.edges?.map(dw).filter(dx) || []),
                      (g[0] = p.labels?.edges),
                      (g[1] = l))
                    : (l = g[1]);
                let h = l,
                    [f] = (0, e7.o)(),
                    C = p.labels?.totalCount || 0,
                    F = 1 === C ? "1 label" : `${C} labels`;
                g[2] !== F
                    ? ((a = (0, y.jsx)("span", {
                          "aria-live": "polite",
                          children: F,
                      })),
                      (g[2] = F),
                      (g[3] = a))
                    : (a = g[3]);
                let S = a,
                    L = p.isWritable && p.viewerCanPush;
                if (0 === h.length || f.get("q")) {
                    let e;
                    (g[4] === Symbol.for("react.memo_cache_sentinel")
                        ? ((e = []), (g[4] = e))
                        : (e = g[4]),
                        (n = e));
                } else {
                    let e;
                    (g[5] === Symbol.for("react.memo_cache_sentinel")
                        ? ((e = [{ key: "label-sort-menu", render: d_ }]),
                          (g[5] = e))
                        : (e = g[5]),
                        (n = e));
                }
                let K = n;
                g[6] !== K || g[7] !== S
                    ? ((s = (0, y.jsx)(tQ.X, {
                          title: S,
                          actions: K,
                          actionsLabel: "Label actions",
                      })),
                      (g[6] = K),
                      (g[7] = S),
                      (g[8] = s))
                    : (s = g[8]);
                let v = s,
                    [I, _] = (0, er.useQueryLoader)(dt);
                (g[9] !== _ || g[10] !== h
                    ? ((i = () => {
                          A.X3 || _({ nodes: h.map(dI) });
                      }),
                      (t = [h, _]),
                      (g[9] = _),
                      (g[10] = h),
                      (g[11] = i),
                      (g[12] = t))
                    : ((i = g[11]), (t = g[12])),
                    (0, b.useEffect)(i, t),
                    g[13] === Symbol.for("react.memo_cache_sentinel")
                        ? ((r = (0, n2.G)("repository-label-list-view")),
                          (g[13] = r))
                        : (r = g[13]));
                let x = h.length > 0 ? "ul" : "div",
                    w = h.length > 0 ? "list" : "status";
                return (
                    g[14] !== p.id ||
                    g[15] !== p.nameWithOwner ||
                    g[16] !== p.viewerCanPush ||
                    g[17] !== L ||
                    g[18] !== I ||
                    g[19] !== h
                        ? ((o =
                              h.length > 0 &&
                              h.map((e) =>
                                  (0, y.jsx)(
                                      dS,
                                      {
                                          label: e,
                                          isActionsAvailable: L,
                                          viewerCanPush: p.viewerCanPush,
                                          secondaryQueryRef: I,
                                          repositoryId: p.id,
                                          repositoryNameWithOwner:
                                              p.nameWithOwner,
                                      },
                                      e.id
                                  )
                              )),
                          (g[14] = p.id),
                          (g[15] = p.nameWithOwner),
                          (g[16] = p.viewerCanPush),
                          (g[17] = L),
                          (g[18] = I),
                          (g[19] = h),
                          (g[20] = o))
                        : (o = g[20]),
                    g[21] !== p.viewerCanPush ||
                    g[22] !== C ||
                    g[23] !== h.length ||
                    g[24] !== k
                        ? ((u =
                              0 === h.length &&
                              (0, y.jsx)(di, {
                                  noLabelsCreated: 0 === C,
                                  viewerCanPush: p.viewerCanPush,
                                  onCreateLabel: k,
                              })),
                          (g[21] = p.viewerCanPush),
                          (g[22] = C),
                          (g[23] = h.length),
                          (g[24] = k),
                          (g[25] = u))
                        : (u = g[25]),
                    g[26] !== v ||
                    g[27] !== w ||
                    g[28] !== o ||
                    g[29] !== u ||
                    g[30] !== x
                        ? ((d = (0, y.jsxs)(n$.u, {
                              ...r,
                              title: "Labels",
                              metadata: v,
                              titleHeaderTag: "h2",
                              as: x,
                              role: w,
                              children: [o, u],
                          })),
                          (g[26] = v),
                          (g[27] = w),
                          (g[28] = o),
                          (g[29] = u),
                          (g[30] = x),
                          (g[31] = d))
                        : (d = g[31]),
                    g[32] !== C || g[33] !== h.length
                        ? ((c =
                              h.length > 0 && (0, y.jsx)(dk, { dataCount: C })),
                          (g[32] = C),
                          (g[33] = h.length),
                          (g[34] = c))
                        : (c = g[34]),
                    g[35] !== d || g[36] !== c
                        ? ((m = (0, y.jsxs)("div", {
                              className: u5.labelListWrapper,
                              "data-hpc": !0,
                              children: [d, c],
                          })),
                          (g[35] = d),
                          (g[36] = c),
                          (g[37] = m))
                        : (m = g[37]),
                    m
                );
            }
            function dI(e) {
                return e.id;
            }
            function d_() {
                return (0, y.jsx)(dL, {});
            }
            function dx(e) {
                return !!e;
            }
            function dw(e) {
                return e?.node ? e.node : null;
            }
            try {
                dK.displayName || (dK.displayName = "LabelList");
            } catch {}
            try {
                dv.displayName || (dv.displayName = "LabelListInternal");
            } catch {}
            let dN = {
                searchWrapper: "SearchBar-module__searchWrapper--ADttG",
                searchInput: "SearchBar-module__searchInput--FfUYF",
                searchBtn: "SearchBar-module__searchBtn--GaONK",
                searchInputWrapper:
                    "SearchBar-module__searchInputWrapper--NCjRa",
            };
            function dj() {
                let e,
                    l,
                    a,
                    n,
                    s,
                    i,
                    t,
                    r,
                    o,
                    u,
                    d = (0, tc.c)(25),
                    [c] = (0, I.ok)(),
                    m = (0, I.Zp)();
                d[0] !== c
                    ? ((e = c.get("q")), (d[0] = c), (d[1] = e))
                    : (e = d[1]);
                let g = e,
                    [p, k] = (0, b.useState)(g || "");
                d[2] !== m || d[3] !== c || d[4] !== p
                    ? ((l = () => {
                          let e = new URLSearchParams(c);
                          (e.set("q", p),
                              m(`${A.cg?.location.pathname}?${e.toString()}`));
                      }),
                      (d[2] = m),
                      (d[3] = c),
                      (d[4] = p),
                      (d[5] = l))
                    : (l = d[5]);
                let h = l;
                d[6] !== h
                    ? ((a = (e) => {
                          "Enter" === e.key && (e.preventDefault(), h());
                      }),
                      (d[6] = h),
                      (d[7] = a))
                    : (a = d[7]);
                let f = a;
                d[8] !== m || d[9] !== c
                    ? ((n = () => {
                          k("");
                          let e = new URLSearchParams(c);
                          (e.delete("q"),
                              m(`${A.cg?.location.pathname}?${e.toString()}`));
                      }),
                      (d[8] = m),
                      (d[9] = c),
                      (d[10] = n))
                    : (n = d[10]);
                let C = n;
                return (
                    d[11] === Symbol.for("react.memo_cache_sentinel")
                        ? ((s = (0, y.jsx)(ak.A.Label, {
                              htmlFor: "search-input",
                              visuallyHidden: !0,
                              children: uH.searchAll,
                          })),
                          (d[11] = s))
                        : (s = d[11]),
                    d[12] === Symbol.for("react.memo_cache_sentinel")
                        ? ((i = (e) => k(e.currentTarget.value)), (d[12] = i))
                        : (i = d[12]),
                    d[13] !== C || d[14] !== p
                        ? ((t =
                              "" !== p
                                  ? (0, y.jsx)(lQ.K, {
                                        icon: T.XCircleFillIcon,
                                        onClick: C,
                                        "aria-label": uH.clearSearch,
                                        variant: "invisible",
                                    })
                                  : void 0),
                          (d[13] = C),
                          (d[14] = p),
                          (d[15] = t))
                        : (t = d[15]),
                    d[16] !== f || d[17] !== p || d[18] !== t
                        ? ((r = (0, y.jsxs)(ak.A, {
                              id: "search-input",
                              className: dN.searchInputWrapper,
                              children: [
                                  s,
                                  (0, y.jsx)(rO.A, {
                                      type: "text",
                                      className: dN.searchInput,
                                      placeholder: uH.searchAll,
                                      value: p,
                                      onKeyDown: f,
                                      onChange: i,
                                      trailingAction: t,
                                  }),
                              ],
                          })),
                          (d[16] = f),
                          (d[17] = p),
                          (d[18] = t),
                          (d[19] = r))
                        : (r = d[19]),
                    d[20] !== h
                        ? ((o = (0, y.jsx)(lQ.K, {
                              "aria-label": uH.search,
                              size: "medium",
                              icon: T.SearchIcon,
                              variant: "default",
                              onClick: h,
                              className: dN.searchBtn,
                          })),
                          (d[20] = h),
                          (d[21] = o))
                        : (o = d[21]),
                    d[22] !== r || d[23] !== o
                        ? ((u = (0, y.jsxs)("form", {
                              role: "search",
                              "aria-labelledby": "search-input",
                              className: dN.searchWrapper,
                              onSubmit: dR,
                              children: [r, o],
                          })),
                          (d[22] = r),
                          (d[23] = o),
                          (d[24] = u))
                        : (u = d[24]),
                    u
                );
            }
            function dR(e) {
                return e.preventDefault();
            }
            try {
                dj.displayName || (dj.displayName = "SearchBar");
            } catch {}
            function dP(e) {
                let l,
                    a,
                    n,
                    s,
                    i,
                    t,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g = (0, tc.c)(21),
                    { repository: p } = e,
                    [k, h] = (0, b.useState)(!1);
                g[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((l = uU), (g[0] = l))
                    : (l = g[0]);
                let f = (0, er.useFragment)(l, p);
                return (
                    g[1] === Symbol.for("react.memo_cache_sentinel")
                        ? ((a = (0, y.jsx)(e8.A, {
                              as: "h2",
                              className: u5.heading,
                              children: "Labels",
                          })),
                          (g[1] = a))
                        : (a = g[1]),
                    g[2] !== f.viewerCanPush
                        ? ((n =
                              f.viewerCanPush &&
                              (0, y.jsx)(nn.Q, {
                                  variant: "primary",
                                  onClick: () => h(!0),
                                  children: "New label",
                              })),
                          (g[2] = f.viewerCanPush),
                          (g[3] = n))
                        : (n = g[3]),
                    g[4] !== n
                        ? ((s = (0, y.jsxs)("div", {
                              className: u5.header,
                              children: [a, n],
                          })),
                          (g[4] = n),
                          (g[5] = s))
                        : (s = g[5]),
                    g[6] === Symbol.for("react.memo_cache_sentinel")
                        ? ((i = (0, y.jsx)(dj, {})), (g[6] = i))
                        : (i = g[6]),
                    g[7] === Symbol.for("react.memo_cache_sentinel")
                        ? ((t = (0, y.jsx)("div", {
                              children: "Oops we could not load the labels",
                          })),
                          (g[7] = t))
                        : (t = g[7]),
                    g[8] === Symbol.for("react.memo_cache_sentinel")
                        ? ((r = () => h(!0)), (g[8] = r))
                        : (r = g[8]),
                    g[9] !== f
                        ? ((o = (0, y.jsx)(i2.t, {
                              fallback: t,
                              children: (0, y.jsx)(dK, {
                                  repositoryRef: f,
                                  onCreateLabel: r,
                              }),
                          })),
                          (g[9] = f),
                          (g[10] = o))
                        : (o = g[10]),
                    g[11] !== s || g[12] !== o
                        ? ((u = (0, y.jsx)(l$, {
                              contentAs: "div",
                              resizeable: !1,
                              leftPaneWidth: "small",
                              middlePane: (0, y.jsxs)("div", {
                                  className: u5.middlePaneWrapper,
                                  children: [s, i, o],
                              }),
                          })),
                          (g[11] = s),
                          (g[12] = o),
                          (g[13] = u))
                        : (u = g[13]),
                    g[14] === Symbol.for("react.memo_cache_sentinel")
                        ? ((d = () => h(!1)), (g[14] = d))
                        : (d = g[14]),
                    g[15] !== f || g[16] !== k
                        ? ((c = (0, y.jsx)(da, {
                              repository: f,
                              isOpen: k,
                              onClose: d,
                          })),
                          (g[15] = f),
                          (g[16] = k),
                          (g[17] = c))
                        : (c = g[17]),
                    g[18] !== c || g[19] !== u
                        ? ((m = (0, y.jsxs)(y.Fragment, { children: [u, c] })),
                          (g[18] = c),
                          (g[19] = u),
                          (g[20] = m))
                        : (m = g[20]),
                    m
                );
            }
            try {
                dP.displayName || (dP.displayName = "RepositoryLabelsInternal");
            } catch {}
            let dT = ({ queries: { pageQuery: e } }) => {
                let { queryRef: l, loadQuery: a } = ll(e, eU);
                return l
                    ? (0, y.jsx)(lt, {
                          category: "Repository Label Index",
                          children: (0, y.jsx)(dA, {
                              pageQueryRef: l,
                              loadQuery: a,
                          }),
                      })
                    : null;
            };
            function dA({ pageQueryRef: e }) {
                let l = (0, er.usePreloadedQuery)(eU, e),
                    { setCurrentViewId: a } = eM();
                return ((0, b.useEffect)(() => {
                    a(S.repository);
                }, [e, a]),
                l.repository)
                    ? (0, y.jsx)(dM, { repository: l.repository })
                    : (reportError(
                          Error(
                              `Could not find repository when loading labels index for ${A.fV?.href.toString()}`
                          )
                      ),
                      (0, y.jsx)("div", { children: "Repository not found" }));
            }
            function dM({ repository: e }) {
                let l = (0, er.useFragment)(uQ, e);
                return (0, y.jsx)(dP, { repository: l });
            }
            try {
                dA.displayName ||
                    (dA.displayName = "RepositoryLabelIndexContent");
            } catch {}
            try {
                dM.displayName ||
                    (dM.displayName =
                        "RepositoryLabelIndexPageContentInternal");
            } catch {}
            let dV = {
                argumentDefinitions: [
                    {
                        defaultValue: "DESC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    {
                        defaultValue: "CREATED_AT",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "state",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryMilestoneIndexPageContentInternal",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "orderDirection",
                                variableName: "orderDirection",
                            },
                            {
                                kind: "Variable",
                                name: "orderField",
                                variableName: "orderField",
                            },
                            {
                                kind: "Variable",
                                name: "state",
                                variableName: "state",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "RepositoryMilestonesInternal",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            dV.hash = "c3181e2da6a22e3d5d53fb3d15250df2";
            let dD = {
                argumentDefinitions: [
                    {
                        defaultValue: "DESC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    {
                        defaultValue: "CREATED_AT",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "state",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryMilestonesInternal",
                selections: [
                    {
                        args: [
                            { kind: "Literal", name: "first", value: 50 },
                            {
                                kind: "Variable",
                                name: "orderDirection",
                                variableName: "orderDirection",
                            },
                            {
                                kind: "Variable",
                                name: "orderField",
                                variableName: "orderField",
                            },
                            {
                                kind: "Variable",
                                name: "state",
                                variableName: "state",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "MilestoneList",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestonesActions",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            dD.hash = "168c6c023dcd919ea76f3cc6fae4b49b";
            let dE = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "cursor",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    n = {
                        defaultValue: "DESC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    s = {
                        defaultValue: "CREATED_AT",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "state",
                    },
                    t = [{ kind: "Variable", name: "id", variableName: "id" }],
                    r = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    d = [
                        {
                            kind: "Variable",
                            name: "after",
                            variableName: "cursor",
                        },
                        r,
                        {
                            fields: [
                                {
                                    kind: "Variable",
                                    name: "direction",
                                    variableName: "orderDirection",
                                },
                                {
                                    kind: "Variable",
                                    name: "field",
                                    variableName: "orderField",
                                },
                            ],
                            kind: "ObjectValue",
                            name: "orderBy",
                        },
                        {
                            items: [
                                {
                                    kind: "Variable",
                                    name: "states.0",
                                    variableName: "state",
                                },
                            ],
                            kind: "ListValue",
                            name: "states",
                        },
                    ],
                    c = { kind: "Literal", name: "first", value: 0 },
                    m = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a, n, s, i],
                        kind: "Fragment",
                        metadata: null,
                        name: "MilestoneListQuery",
                        selections: [
                            {
                                alias: null,
                                args: t,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                            r,
                                            {
                                                kind: "Variable",
                                                name: "orderDirection",
                                                variableName: "orderDirection",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "orderField",
                                                variableName: "orderField",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "state",
                                                variableName: "state",
                                            },
                                        ],
                                        kind: "FragmentSpread",
                                        name: "MilestoneList",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, l, n, s, i, a],
                        kind: "Operation",
                        name: "MilestoneListQuery",
                        selections: [
                            {
                                alias: null,
                                args: t,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    o,
                                    u,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameWithOwner",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: d,
                                                concreteType:
                                                    "MilestoneConnection",
                                                kind: "LinkedField",
                                                name: "milestones",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "MilestoneEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Milestone",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    u,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "description",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "title",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "url",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "state",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [u],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "progressPercentage",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "openIssueCount",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "closedIssueCount",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "closed",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "dueOn",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    o,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "endCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasNextPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: d,
                                                filters: ["states", "orderBy"],
                                                handle: "connection",
                                                key: "MilestoneList_milestones",
                                                kind: "LinkedHandle",
                                                name: "milestones",
                                            },
                                            {
                                                alias: "open",
                                                args: [
                                                    c,
                                                    {
                                                        kind: "Literal",
                                                        name: "states",
                                                        value: "OPEN",
                                                    },
                                                ],
                                                concreteType:
                                                    "MilestoneConnection",
                                                kind: "LinkedField",
                                                name: "milestones",
                                                plural: !1,
                                                selections: m,
                                                storageKey:
                                                    'milestones(first:0,states:"OPEN")',
                                            },
                                            {
                                                alias: "closed",
                                                args: [
                                                    c,
                                                    {
                                                        kind: "Literal",
                                                        name: "states",
                                                        value: "CLOSED",
                                                    },
                                                ],
                                                concreteType:
                                                    "MilestoneConnection",
                                                kind: "LinkedField",
                                                name: "milestones",
                                                plural: !1,
                                                selections: m,
                                                storageKey:
                                                    'milestones(first:0,states:"CLOSED")',
                                            },
                                        ],
                                        type: "Repository",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "0aadc9cef9f6d5447307200a57b3b63d",
                        metadata: {},
                        name: "MilestoneListQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            dE.hash = "3db42140a58f5e3d4d9a2b592ed1efb7";
            let dq = (function () {
                var e = ["milestones"],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = { kind: "Literal", name: "first", value: 0 },
                    n = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                    ];
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: "DESC",
                            kind: "LocalArgument",
                            name: "orderDirection",
                        },
                        {
                            defaultValue: "CREATED_AT",
                            kind: "LocalArgument",
                            name: "orderField",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "state",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "first",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: { count: "first", cursor: "cursor" },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: dE,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "MilestoneList",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameWithOwner",
                            storageKey: null,
                        },
                        {
                            alias: "milestones",
                            args: [
                                {
                                    fields: [
                                        {
                                            kind: "Variable",
                                            name: "direction",
                                            variableName: "orderDirection",
                                        },
                                        {
                                            kind: "Variable",
                                            name: "field",
                                            variableName: "orderField",
                                        },
                                    ],
                                    kind: "ObjectValue",
                                    name: "orderBy",
                                },
                                {
                                    items: [
                                        {
                                            kind: "Variable",
                                            name: "states.0",
                                            variableName: "state",
                                        },
                                    ],
                                    kind: "ListValue",
                                    name: "states",
                                },
                            ],
                            concreteType: "MilestoneConnection",
                            kind: "LinkedField",
                            name: "__MilestoneList_milestones_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "MilestoneEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Milestone",
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                l,
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "MilestoneRow",
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: "open",
                            args: [
                                a,
                                {
                                    kind: "Literal",
                                    name: "states",
                                    value: "OPEN",
                                },
                            ],
                            concreteType: "MilestoneConnection",
                            kind: "LinkedField",
                            name: "milestones",
                            plural: !1,
                            selections: n,
                            storageKey: 'milestones(first:0,states:"OPEN")',
                        },
                        {
                            alias: "closed",
                            args: [
                                a,
                                {
                                    kind: "Literal",
                                    name: "states",
                                    value: "CLOSED",
                                },
                            ],
                            concreteType: "MilestoneConnection",
                            kind: "LinkedField",
                            name: "milestones",
                            plural: !1,
                            selections: n,
                            storageKey: 'milestones(first:0,states:"CLOSED")',
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "OpenClosedMilestones",
                        },
                        l,
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            dq.hash = "3db42140a58f5e3d4d9a2b592ed1efb7";
            let dO = {
                issueIcons: {
                    OPEN: {
                        color: "open.fg",
                        icon: T.IssueOpenedIcon,
                        description: "Open issue",
                    },
                    CLOSED: {
                        color: "done.fg",
                        icon: T.IssueClosedIcon,
                        description: "Closed issue (completed)",
                    },
                    NOT_PLANNED: {
                        color: "fg.muted",
                        icon: T.SkipIcon,
                        description: "Closed issue (not planned)",
                    },
                },
                issuesPageSize: 25,
                maxPrioritizableItemCount: 1e3,
                milestonePageSize: 50,
                localStorageKeyBulkUpdateIssues: "milestone.bulkUpdateIssues",
            };
            function dB({ noCreatedMilestones: e, newMilestoneUrl: l }) {
                let a = e ? uF.noCreatedMilestones : uF.weCouldntFindMilestones,
                    n = e
                        ? uF.noCreatedMilestonesDescription
                        : uF.weCouldntFindMilestonesDescription;
                return (0, y.jsxs)(uv.E, {
                    children: [
                        (0, y.jsx)(uv.E.Visual, {
                            children: (0, y.jsx)(T.MilestoneIcon, {
                                size: "medium",
                            }),
                        }),
                        (0, y.jsx)(uv.E.Heading, { children: a }),
                        (0, y.jsx)(uv.E.Description, { children: n }),
                        e &&
                            (0, y.jsx)(uv.E.PrimaryAction, {
                                href: l,
                                children: uF.createAMilestone,
                            }),
                    ],
                });
            }
            try {
                dB.displayName || (dB.displayName = "MilestoneEmptyState");
            } catch {}
            let d$ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneRow",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneRowTitle",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneRowMetadata",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneDate",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneIssueCount",
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            d$.hash = "9179d9703c79d416043b8546babc5fd0";
            let dQ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneDate",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "dueOn",
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            function dU({ milestone: e }) {
                let l = (0, er.useFragment)(dQ, e),
                    a = (0, b.useMemo)(() => {
                        if (!l || !l.dueOn) return null;
                        let e = new Date(l.dueOn),
                            a = new Date();
                        if (
                            (a.setHours(0, 0, 0, 0),
                            e.setHours(0, 0, 0, 0),
                            e >= a)
                        )
                            return null;
                        let n = Math.floor((a.getTime() - e.getTime()) / 864e5);
                        if (n < 30) return `${n} day(s)`;
                        let s = Math.floor(n / 30);
                        if (s < 12) return `${s} month(s)`;
                        let i = Math.floor(s / 12);
                        return `${i} year(s)`;
                    }, [l]),
                    n = (0, b.useMemo)(
                        () =>
                            l.dueOn
                                ? new Date(l.dueOn).toLocaleDateString(
                                      "en-US",
                                      {
                                          month: "long",
                                          day: "numeric",
                                          year: "numeric",
                                          timeZone: "UTC",
                                      }
                                  )
                                : null,
                        [l.dueOn]
                    );
                return (0, y.jsxs)(y.Fragment, {
                    children: [
                        a && !l.closed
                            ? (0, y.jsxs)("div", {
                                  className: uI.milestoneData,
                                  children: [
                                      (0, y.jsxs)("div", {
                                          className: uI.overDue,
                                          children: [
                                              (0, y.jsx)(T.AlertFillIcon, {
                                                  size: 12,
                                              }),
                                              (0, y.jsxs)("span", {
                                                  children: [
                                                      uF.milestoneOverdue,
                                                      " ",
                                                      a,
                                                  ],
                                              }),
                                          ],
                                      }),
                                      (0, y.jsx)("span", {
                                          className: uI.middot,
                                          children: uF.separator,
                                      }),
                                  ],
                              })
                            : null,
                        (0, y.jsx)("div", {
                            className: uI.milestoneData,
                            children: l.dueOn
                                ? (0, y.jsxs)("span", {
                                      children: [uF.dueBy, " ", n],
                                  })
                                : (0, y.jsx)("span", {
                                      children: uF.noDueDate,
                                  }),
                        }),
                    ],
                });
            }
            dQ.hash = "c744c3501e741c32d84fc88af287a26b";
            try {
                dU.displayName || (dU.displayName = "MilestoneDate");
            } catch {}
            let dz = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneIssueCount",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedIssueCount",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "openIssueCount",
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            function dH({ milestone: e }) {
                let l = (0, er.useFragment)(dz, e),
                    a = (0, b.useMemo)(() => {
                        let e = l.openIssueCount ?? 0,
                            a = l.closedIssueCount ?? 0;
                        return { open: e, closed: a, total: e + a };
                    }, [l.openIssueCount, l.closedIssueCount]);
                return a.total <= 0
                    ? null
                    : (0, y.jsxs)("div", {
                          className: uI.milestoneIssueCount,
                          children: [
                              (0, y.jsx)("span", {
                                  className: uI.middot,
                                  children: uF.separator,
                              }),
                              (0, y.jsxs)("span", {
                                  children: [
                                      a.closed,
                                      "/",
                                      a.total,
                                      " issues closed",
                                  ],
                              }),
                          ],
                      });
            }
            dz.hash = "15f84a40e0bbfcf780c02f604ec96267";
            try {
                dH.displayName || (dH.displayName = "MilestoneIssueCount");
            } catch {}
            let dW = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneRowMetadata",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneRowMenu",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "progressPercentage",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "openIssueCount",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedIssueCount",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            dW.hash = "db345f0e64434fb83335b93532e33afd";
            var dG = a(77141);
            let dZ = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "MilestoneRowMenu",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [e],
                            storageKey: null,
                        },
                    ],
                    type: "Milestone",
                    abstractKey: null,
                };
            })();
            dZ.hash = "148d9e06feebee4ecf8d39ed423415ce";
            let dX = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "deleteMilestoneMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "DeleteMilestonePayload",
                                kind: "LinkedField",
                                name: "deleteMilestone",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [a],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "deleteMilestoneMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "DeleteMilestonePayload",
                                kind: "LinkedField",
                                name: "deleteMilestone",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                filters: null,
                                                handle: "deleteRecord",
                                                key: "",
                                                kind: "ScalarHandle",
                                                name: "id",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "51d866034128db62d668c9e305002192",
                        metadata: {},
                        name: "deleteMilestoneMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function dJ({ milestone: e }) {
                let [l, a] = (0, b.useState)(!1),
                    [n, s] = (0, b.useState)(!1),
                    [i, t] = (0, b.useState)(!1),
                    r = (0, b.useRef)(null),
                    o = (0, er.useFragment)(dZ, e),
                    u = (0, e7.Z)(),
                    [d] = (0, e7.o)(),
                    c = (0, er.useRelayEnvironment)(),
                    { addToast: m } = (0, _.Y6)(),
                    g = (0, b.useCallback)(() => {
                        let e =
                                `${o.url.replace("/milestone/", "/milestones/")}/edit`.split(
                                    "/"
                                ),
                            l = e.lastIndexOf("milestone");
                        (-1 !== l && "" === e[l + 1] && (e[l] = "milestones"),
                            u(
                                new URL(e.join("/"), window.location.origin)
                                    .pathname
                            ));
                    }, [o.url, u]),
                    p = (0, b.useCallback)(() => {
                        let e = o.state,
                            l = "CLOSED" === e ? "OPEN" : "CLOSED";
                        uN({
                            environment: c,
                            input: { id: o.id, state: l },
                            onCompleted: () => {
                                c.commitUpdate((a) => {
                                    let n = a.get(
                                        `client:${o.repository.id}:milestones(first:0,states:"OPEN")`
                                    );
                                    if (n) {
                                        let l = n.getValue("totalCount");
                                        n.setValue(
                                            "CLOSED" === e ? l + 1 : l - 1,
                                            "totalCount"
                                        );
                                    }
                                    let s = a.get(
                                        `client:${o.repository.id}:milestones(first:0,states:"CLOSED")`
                                    );
                                    if (s) {
                                        let l = s.getValue("totalCount");
                                        s.setValue(
                                            "CLOSED" === e ? l - 1 : l + 1,
                                            "totalCount"
                                        );
                                    }
                                    let i = d.get("state"),
                                        t =
                                            "asc" === d.get("direction")
                                                ? "ASC"
                                                : "DESC",
                                        r = d.get("sort"),
                                        u = "CREATED_AT";
                                    r &&
                                        (u =
                                            "due_date" === r
                                                ? "DUE_DATE"
                                                : "UPDATED_AT");
                                    let c = `client:${o.repository.id}:__MilestoneList_milestones_connection(orderBy:{"direction":"${t}","field":"${u}"},states:["${"closed" !== i ? "OPEN" : "CLOSED"}"])`,
                                        m = a.get(c);
                                    if (m) {
                                        let e = m
                                            .getLinkedRecords("edges")
                                            ?.filter(
                                                (e) =>
                                                    e
                                                        ?.getLinkedRecord(
                                                            "node"
                                                        )
                                                        ?.getValue("id") !==
                                                    o.id
                                            );
                                        m.setLinkedRecords(e || [], "edges");
                                    }
                                    let g = `client:${o.repository.id}:__MilestoneList_milestones_connection(orderBy:{"direction":"${t}","field":"${u}"},states:["${l}"])`,
                                        p = a.get(g);
                                    if (p) {
                                        let e =
                                                p.getLinkedRecords("edges") ||
                                                [],
                                            l = a.get(o.id);
                                        if (l) {
                                            let n = `client:newEdge:${o.id}`,
                                                s = a.get(n);
                                            (s ||
                                                (s = a.create(
                                                    n,
                                                    "MilestoneEdge"
                                                )),
                                                s.setLinkedRecord(l, "node"),
                                                p.setLinkedRecords(
                                                    [s, ...e],
                                                    "edges"
                                                ));
                                        }
                                    }
                                });
                            },
                            onError: () => {
                                m({
                                    type: "error",
                                    message: "Could not change Milestone state",
                                });
                            },
                        });
                    }, [m, o.id, o.repository.id, o.state, c, d]),
                    k = (0, b.useCallback)(() => {
                        n ||
                            (s(!0),
                            (function ({
                                environment: e,
                                input: l,
                                onError: a,
                                onCompleted: n,
                            }) {
                                (0, er.commitMutation)(e, {
                                    mutation: dX,
                                    variables: { input: l },
                                    onError: (e) => a && a(e),
                                    onCompleted: (e) => n && n(e),
                                });
                            })({
                                environment: c,
                                input: { id: o.id },
                                onCompleted: () => {
                                    (c.commitUpdate((e) => {
                                        let l =
                                                "closed" !== d.get("state")
                                                    ? "OPEN"
                                                    : "CLOSED",
                                            a = e.get(
                                                `client:${o.repository.id}:milestones(first:0,states:"OPEN")`
                                            );
                                        if (a && "OPEN" === l) {
                                            let e = a.getValue("totalCount");
                                            a.setValue(
                                                Math.max(e - 1, 0),
                                                "totalCount"
                                            );
                                        }
                                        let n = e.get(
                                            `client:${o.repository.id}:milestones(first:0,states:"CLOSED")`
                                        );
                                        if (n && "CLOSED" === l) {
                                            let e = n.getValue("totalCount");
                                            n.setValue(
                                                Math.max(e - 1, 0),
                                                "totalCount"
                                            );
                                        }
                                    }),
                                        a(!1),
                                        s(!1),
                                        t(!1));
                                },
                                onError: () => {
                                    (t(!0), s(!1));
                                },
                            }));
                    }, [o.id, o.repository.id, c, d, n]),
                    h = (0, b.useCallback)((e) => {
                        "Enter" === e.key && e.stopPropagation();
                    }, []);
                return (
                    (0, b.useEffect)(() => {
                        i && r?.current && r.current.focus();
                    }, [r, i]),
                    (0, y.jsxs)(y.Fragment, {
                        children: [
                            (0, y.jsxs)(i3.W, {
                                children: [
                                    (0, y.jsx)(i3.W.Button, {
                                        className: uI.menuButton,
                                        "aria-label": "Milestone menu",
                                        variant: "invisible",
                                        icon: (0, y.jsx)(
                                            T.KebabHorizontalIcon,
                                            {}
                                        ),
                                        onKeyDown: h,
                                    }),
                                    (0, y.jsx)(i3.W.Overlay, {
                                        children: (0, y.jsxs)(np.l, {
                                            children: [
                                                (0, y.jsx)(np.l.Item, {
                                                    onSelect: () => g(),
                                                    children: "Edit",
                                                }),
                                                (0, y.jsx)(np.l.Item, {
                                                    onSelect: () => p(),
                                                    children:
                                                        "CLOSED" === o.state
                                                            ? "Open"
                                                            : "Close",
                                                }),
                                                (0, y.jsx)(np.l.Divider, {}),
                                                (0, y.jsx)(np.l.Item, {
                                                    onSelect: () => a(!0),
                                                    children: (0, y.jsx)(
                                                        "span",
                                                        {
                                                            className:
                                                                uI.deleteMilestoneButton,
                                                            children: "Delete",
                                                        }
                                                    ),
                                                }),
                                            ],
                                        }),
                                    }),
                                ],
                            }),
                            l &&
                                (0, y.jsx)(rG.K, {
                                    onClose: (e) => {
                                        "confirm" === e ? k() : (a(!1), t(!1));
                                    },
                                    title: (0, y.jsx)("p", {
                                        className: uI.dialogTitle,
                                        children:
                                            uF.deleteMilestoneConfirmationTitle,
                                    }),
                                    cancelButtonContent: uF.cancel,
                                    confirmButtonContent:
                                        uF.deleteMilestoneConfirmationButton,
                                    confirmButtonType: "danger",
                                    children: (0, y.jsxs)("div", {
                                        className:
                                            uI.dialogDescriptionContainer,
                                        children: [
                                            i &&
                                                (0, y.jsx)(rC.l, {
                                                    ref: r,
                                                    className: "mb-3",
                                                    title: "Error",
                                                    description: (0, y.jsx)(
                                                        uW.o,
                                                        {
                                                            children:
                                                                uF.deleteMilestoneError,
                                                        }
                                                    ),
                                                    variant: "critical",
                                                    role: "alert",
                                                }),
                                            (0, y.jsx)("p", {
                                                className: uI.dialogDescription,
                                                children:
                                                    uF.deleteMilestoneWarningPermanent,
                                            }),
                                            (0, y.jsx)("p", {
                                                className: uI.dialogDescription,
                                                children:
                                                    uF.deleteMilestoneAssociatedIssuesNote,
                                            }),
                                        ],
                                    }),
                                }),
                        ],
                    })
                );
            }
            dX.hash = "d96316a2c94a676025441e29c80749db";
            try {
                dJ.displayName || (dJ.displayName = "MilestoneRowMenu");
            } catch {}
            function dY({ milestone: e, repositoryNameWithOwner: l }) {
                let a = (0, er.useFragment)(dW, e),
                    n = (e) =>
                        `/${l}/issues?q=${encodeURIComponent(`is:${e} milestone:"${a.title ?? ""}"`)}`;
                return (0, y.jsxs)("div", {
                    className: uI.listProgressSection,
                    children: [
                        (0, y.jsxs)("div", {
                            className: uI.progress,
                            children: [
                                (0, y.jsx)(dG.z, {
                                    progress: Math.floor(a.progressPercentage),
                                    "aria-hidden": "true",
                                    "data-testid":
                                        "milestone-metadata-progress-bar",
                                    barSize: "small",
                                    className: uI.progressBar,
                                }),
                                (0, y.jsxs)("div", {
                                    className: uI.listMetadata,
                                    children: [
                                        (0, y.jsxs)("span", {
                                            children: [
                                                (0, y.jsxs)("span", {
                                                    className:
                                                        uI.progressPercentage,
                                                    children: [
                                                        Math.floor(
                                                            a.progressPercentage
                                                        ),
                                                        "%",
                                                    ],
                                                }),
                                                " complete",
                                            ],
                                        }),
                                        (0, y.jsxs)(e9.A, {
                                            className: uI.link,
                                            href: n("open"),
                                            children: [
                                                (0, y.jsx)("span", {
                                                    className:
                                                        uI.progressPercentage,
                                                    children: a.openIssueCount,
                                                }),
                                                " open",
                                            ],
                                        }),
                                        (0, y.jsxs)(e9.A, {
                                            className: uI.link,
                                            href: n("closed"),
                                            children: [
                                                (0, y.jsx)("span", {
                                                    className:
                                                        uI.progressPercentage,
                                                    children:
                                                        a.closedIssueCount,
                                                }),
                                                " closed",
                                            ],
                                        }),
                                    ],
                                }),
                            ],
                        }),
                        (0, y.jsx)(dJ, { milestone: a }),
                    ],
                });
            }
            try {
                dY.displayName || (dY.displayName = "MilestoneRowMetadata");
            } catch {}
            let d1 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneRowTitle",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            function d2({ milestone: e }) {
                let l = (0, er.useFragment)(d1, e),
                    a = l.url,
                    n = (0, tt.X)(["mac"]),
                    s = (0, e7.Z)(),
                    i = (0, b.useCallback)(
                        (e) => {
                            (n ? e.metaKey : e.ctrlKey) ||
                                (e.preventDefault(),
                                s(new URL(a, window.location.origin).pathname));
                        },
                        [a, n, s]
                    );
                return (0, y.jsx)(s6.ao, {
                    value: l.title,
                    href: l.url,
                    onClick: i,
                });
            }
            d1.hash = "5bc05bbe94a56bd64216010d45ac7f03";
            try {
                d2.displayName || (d2.displayName = "MilestoneRowTitle");
            } catch {}
            function d0({ milestone: e, repositoryNameWithOwner: l }) {
                let a = (0, er.useFragment)(d$, e),
                    n = (0, y.jsx)(d2, { milestone: a }),
                    s = (0, y.jsx)(dY, {
                        milestone: a,
                        repositoryNameWithOwner: l,
                    });
                return (0, y.jsx)(
                    nG.c,
                    {
                        title: n,
                        role: "listitem",
                        metadata: s,
                        className: uI.milestoneRow,
                        metadataContainerClassName: uI.listMetadataContainer,
                        children: (0, y.jsx)(nJ.Q, {
                            children: (0, y.jsxs)(nZ.U, {
                                className: uI.listItemContent,
                                children: [
                                    a.description &&
                                        (0, y.jsx)("p", {
                                            className: uI.listDescription,
                                            children: a.description,
                                        }),
                                    (0, y.jsxs)("div", {
                                        className: uI.listDateContainer,
                                        children: [
                                            (0, y.jsx)(dU, { milestone: a }),
                                            (0, y.jsx)(dH, { milestone: a }),
                                        ],
                                    }),
                                ],
                            }),
                        }),
                    },
                    a.id
                );
            }
            try {
                d0.displayName || (d0.displayName = "MilestoneRow");
            } catch {}
            function d3() {
                let [e] = (0, e7.o)(),
                    l = e.get("sort"),
                    a = e.get("direction"),
                    n = (0, e7.Z)(),
                    s = (0, b.useCallback)(
                        (l, a) => {
                            if (A.cg) {
                                let s = new URLSearchParams(e);
                                (l ? s.set("sort", l) : s.delete("sort"),
                                    a
                                        ? s.set("direction", a)
                                        : s.delete("direction"),
                                    n(
                                        `${A.cg.location.pathname}?${s.toString()}`
                                    ));
                            }
                        },
                        [n, e]
                    );
                return (0, y.jsxs)(i3.W, {
                    children: [
                        (0, y.jsx)(i3.W.Button, {
                            variant: "invisible",
                            leadingVisual: T.SortDescIcon,
                            children: "Sort",
                        }),
                        (0, y.jsx)(i3.W.Overlay, {
                            children: (0, y.jsx)(np.l, {
                                selectionVariant: "single",
                                children: (0, y.jsxs)(np.l.Group, {
                                    children: [
                                        (0, y.jsx)(np.l.GroupHeading, {
                                            children: "Sort by",
                                        }),
                                        (0, y.jsx)(np.l.Item, {
                                            onSelect: () => s(void 0, void 0),
                                            selected: !l,
                                            role: "menuitemradio",
                                            children: "Recently updated",
                                        }),
                                        (0, y.jsx)(np.l.Item, {
                                            onSelect: () =>
                                                s("due_date", "desc"),
                                            selected:
                                                "due_date" === l &&
                                                "desc" === a,
                                            role: "menuitemradio",
                                            children: "Furthest due date",
                                        }),
                                        (0, y.jsx)(np.l.Item, {
                                            onSelect: () =>
                                                s("due_date", "asc"),
                                            selected:
                                                "due_date" === l && "asc" === a,
                                            role: "menuitemradio",
                                            children: "Closest due date",
                                        }),
                                        (0, y.jsx)(np.l.Item, {
                                            onSelect: () =>
                                                s("completeness", "asc"),
                                            selected:
                                                "completeness" === l &&
                                                "asc" === a,
                                            role: "menuitemradio",
                                            children: "Least complete",
                                        }),
                                        (0, y.jsx)(np.l.Item, {
                                            onSelect: () =>
                                                s("completeness", "desc"),
                                            selected:
                                                "completeness" === l &&
                                                "desc" === a,
                                            role: "menuitemradio",
                                            children: "Most complete",
                                        }),
                                        (0, y.jsx)(np.l.Item, {
                                            onSelect: () => s("title", "asc"),
                                            selected:
                                                "title" === l && "asc" === a,
                                            role: "menuitemradio",
                                            children: "Alphabetical",
                                        }),
                                        (0, y.jsx)(np.l.Item, {
                                            onSelect: () => s("title", "desc"),
                                            selected:
                                                "title" === l && "desc" === a,
                                            role: "menuitemradio",
                                            children: "Reverse alphabetical",
                                        }),
                                        (0, y.jsx)(np.l.Item, {
                                            onSelect: () => s("count", "desc"),
                                            selected:
                                                "count" === l && "desc" === a,
                                            role: "menuitemradio",
                                            children: "Most issues",
                                        }),
                                        (0, y.jsx)(np.l.Item, {
                                            onSelect: () => s("count", "asc"),
                                            selected:
                                                "count" === l && "asc" === a,
                                            role: "menuitemradio",
                                            children: "Fewest issues",
                                        }),
                                    ],
                                }),
                            }),
                        }),
                    ],
                });
            }
            try {
                d3.displayName || (d3.displayName = "MilestoneSortMenu");
            } catch {}
            let d4 = (function () {
                var e = { kind: "Literal", name: "first", value: 0 },
                    l = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                    ];
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "OpenClosedMilestones",
                    selections: [
                        {
                            alias: "open",
                            args: [
                                e,
                                {
                                    kind: "Literal",
                                    name: "states",
                                    value: "OPEN",
                                },
                            ],
                            concreteType: "MilestoneConnection",
                            kind: "LinkedField",
                            name: "milestones",
                            plural: !1,
                            selections: l,
                            storageKey: 'milestones(first:0,states:"OPEN")',
                        },
                        {
                            alias: "closed",
                            args: [
                                e,
                                {
                                    kind: "Literal",
                                    name: "states",
                                    value: "CLOSED",
                                },
                            ],
                            concreteType: "MilestoneConnection",
                            kind: "LinkedField",
                            name: "milestones",
                            plural: !1,
                            selections: l,
                            storageKey: 'milestones(first:0,states:"CLOSED")',
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            function d5({ repository: e }) {
                let l = (0, er.useFragment)(d4, e),
                    a = Math.abs(l?.open?.totalCount || 0).toLocaleString(),
                    n = Math.abs(l?.closed?.totalCount || 0).toLocaleString(),
                    s = "";
                A.cg && (s = A.cg.location.pathname);
                let i = `${s}?state=closed`,
                    [t] = (0, e7.o)(),
                    r = t.get("state"),
                    o = (0, tt.X)(["mac"]),
                    u = (0, e7.Z)(),
                    d = (0, b.useCallback)(
                        (e, l) => {
                            if ((o ? e.metaKey : e.ctrlKey) || !A.cg) return;
                            e.preventDefault();
                            let a = new URLSearchParams(t);
                            (l ? a.delete("state") : a.set("state", "closed"),
                                u(`${A.cg.location.pathname}?${a.toString()}`));
                        },
                        [o, u, t]
                    );
                return (0, y.jsx)("div", {
                    children: (0, y.jsxs)("ul", {
                        className: `list-style-none ${(0, nA.$)(uI.tabsContainer)}`,
                        children: [
                            (0, y.jsx)(
                                "li",
                                {
                                    children: (0, y.jsx)(
                                        nc.L,
                                        {
                                            title: "Open",
                                            isSelected: A.KJ && "closed" !== r,
                                            count: a,
                                            href: s,
                                            onClick: (e) => d(e, !0),
                                            "data-testid": "open-milestone-tab",
                                        },
                                        "open"
                                    ),
                                },
                                "section-filter-0"
                            ),
                            (0, y.jsx)(
                                "li",
                                {
                                    children: (0, y.jsx)(
                                        nc.L,
                                        {
                                            title: "Closed",
                                            isSelected: A.KJ && "closed" === r,
                                            count: n,
                                            href: i,
                                            onClick: (e) => d(e, !1),
                                            "data-testid":
                                                "closed-milestone-tab",
                                        },
                                        "closed"
                                    ),
                                },
                                "section-filter-1"
                            ),
                        ],
                    }),
                });
            }
            d4.hash = "889a40b9e8f1d42c2c11ed7d91f2ae48";
            try {
                d5.displayName || (d5.displayName = "OpenClosedMilestones");
            } catch {}
            function d7({ repositoryRef: e }) {
                let {
                    data: l,
                    loadNext: a,
                    hasNext: n,
                    isLoadingNext: s,
                } = (0, er.usePaginationFragment)(dq, e);
                if (!l.milestones)
                    throw Error("Milestones data is null or undefined");
                return (0, y.jsx)(d6, {
                    data: l,
                    loadNext: a,
                    hasNext: n,
                    isLoadingNext: s,
                });
            }
            function d6({
                data: e,
                hasNext: l,
                isLoadingNext: a,
                loadNext: n,
            }) {
                let s = (0, b.useMemo)(
                        () =>
                            e.milestones?.edges
                                ?.map((e) => (e?.node ? e.node : null))
                                .filter((e) => !!e) || [],
                        [e]
                    ),
                    i = (0, b.useMemo)(
                        () => [
                            {
                                key: "milestone-sort-menu",
                                render: () => (0, y.jsx)(d3, {}),
                            },
                        ],
                        []
                    ),
                    t = `${A.fV.origin}/${e.nameWithOwner}`,
                    r = `${t}/milestones/new`,
                    o = (0, y.jsx)(tQ.X, {
                        actions: i,
                        actionsLabel: "Actions",
                        sectionFilters: (0, y.jsx)(d5, { repository: e }),
                    }),
                    u = (0, b.useMemo)(
                        () =>
                            l
                                ? (0, y.jsx)("div", {
                                      className: uI.loadMoreButtonWrapper,
                                      children: (0, y.jsx)(nn.Q, {
                                          variant: "invisible",
                                          onClick: () =>
                                              n(dO.milestonePageSize),
                                          className: uI.loadMoreButton,
                                          "data-testid":
                                              "load-more-milestones-button",
                                          loading: a,
                                          children: "Load more",
                                      }),
                                  })
                                : null,
                        [l, a, n]
                    );
                return (0, y.jsxs)(y.Fragment, {
                    children: [
                        (0, y.jsx)("div", {
                            className: uI.milestoneListWrapper,
                            "data-hpc": !0,
                            children: (0, y.jsx)(n$.u, {
                                ...(0, n2.G)("repository-milestone-list-view"),
                                title: "",
                                metadata: o,
                                titleHeaderTag: "h2",
                                singularUnits: "milestone",
                                pluralUnits: "milestones",
                                as: s.length > 0 ? "ul" : "div",
                                role: s.length > 0 ? "list" : "status",
                                children: (() => {
                                    if (s.length > 0)
                                        return s.map((l) =>
                                            (0, y.jsx)(
                                                d0,
                                                {
                                                    milestone: l,
                                                    repositoryNameWithOwner:
                                                        e.nameWithOwner,
                                                },
                                                l.id
                                            )
                                        );
                                    let l = e.open?.totalCount ?? 0,
                                        a = e.closed?.totalCount ?? 0;
                                    return (0, y.jsx)(dB, {
                                        noCreatedMilestones: 0 === l && 0 === a,
                                        newMilestoneUrl: r,
                                    });
                                })(),
                            }),
                        }),
                        u,
                    ],
                });
            }
            try {
                d7.displayName || (d7.displayName = "MilestoneList");
            } catch {}
            try {
                d6.displayName || (d6.displayName = "MilestoneListInternal");
            } catch {}
            let d9 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestonesActions",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            function d8({ repositoryRef: e }) {
                let { viewerCanPush: l, nameWithOwner: a } = (0,
                    er.useFragment)(d9, e),
                    n = `${A.fV.origin}/${a}`,
                    s = `${n}/milestones/new`,
                    i = (0, e7.Z)(),
                    t = (0, b.useCallback)(() => {
                        i(s);
                    }, [i, s]);
                return (0, y.jsxs)("div", {
                    className: uI.buttonGrp,
                    children: [
                        (0, y.jsx)(e8.A, {
                            as: "h2",
                            className: uI.heading,
                            children: "Milestones",
                        }),
                        l
                            ? (0, y.jsx)("div", {
                                  className: uI.actionsGrp,
                                  children: (0, y.jsx)(nn.Q, {
                                      as: "a",
                                      href: s,
                                      onClick: t,
                                      variant: "primary",
                                      "data-testid": "new-milestone-button",
                                      children: uF.newMilestone,
                                  }),
                              })
                            : null,
                    ],
                });
            }
            d9.hash = "96feda0851486d21958e3e27d74358d0";
            try {
                d8.displayName || (d8.displayName = "MilestonesActions");
            } catch {}
            function ce({ repository: e }) {
                let l = (0, er.useFragment)(dD, e);
                return (0, y.jsx)(l$, {
                    contentAs: "div",
                    resizeable: !1,
                    leftPaneWidth: "small",
                    middlePane: (0, y.jsx)("div", {
                        className: uI.middlePaneWrapper,
                        children: (0, y.jsxs)(i2.t, {
                            fallback: (0, y.jsx)(u_, {
                                title: uF.milestonesError,
                                message: uF.milestonesErrorMessage,
                            }),
                            children: [
                                (0, y.jsx)(d8, { repositoryRef: l }),
                                (0, y.jsx)(d7, { repositoryRef: l }),
                            ],
                        }),
                    }),
                });
            }
            try {
                ce.displayName ||
                    (ce.displayName = "RepositoryMilestonesInternal");
            } catch {}
            let cl = ({ queries: { pageQuery: e } }) => {
                let { queryRef: l, loadQuery: a } = ll(e, ez);
                return l
                    ? (0, y.jsx)(lt, {
                          category: "Repository Milestone Index",
                          children: (0, y.jsx)(ca, {
                              pageQueryRef: l,
                              loadQuery: a,
                          }),
                      })
                    : null;
            };
            function ca({ pageQueryRef: e }) {
                let l = (0, er.usePreloadedQuery)(ez, e),
                    { setCurrentViewId: a } = eM();
                return ((0, b.useEffect)(() => {
                    a(S.repository);
                }, [e, a]),
                l.repository)
                    ? (0, y.jsx)(cn, { repository: l.repository })
                    : (reportError(
                          Error(
                              `Could not find repository when loading milestone index for ${A.fV?.href.toString()}`
                          )
                      ),
                      (0, y.jsx)("div", { children: "Repository not found" }));
            }
            function cn({ repository: e }) {
                let l = (0, er.useFragment)(dV, e);
                return (0, y.jsx)(ce, { repository: l });
            }
            try {
                ca.displayName ||
                    (ca.displayName = "RepositoryMilestoneIndexContent");
            } catch {}
            try {
                cn.displayName ||
                    (cn.displayName =
                        "RepositoryMilestoneIndexPageContentInternal");
            } catch {}
            let cs = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryMilestonePageContentInternal",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "number",
                                variableName: "number",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "RepositoryMilestoneInternal",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            cs.hash = "7d31d10aafeaa69d827d858e9b244865";
            let ci = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    i = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    t = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    r = {
                        kind: "Variable",
                        name: "number",
                        variableName: "number",
                    },
                    o = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [k, h, d],
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    C = [
                        { kind: "Literal", name: "aggregations", value: !0 },
                        t,
                        o,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    S = [
                        { kind: "Literal", name: "first", value: 10 },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        concreteType: "PageInfo",
                        kind: "LinkedField",
                        name: "pageInfo",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "endCursor",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "hasNextPage",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: S,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            d,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            F,
                                            f,
                                            y,
                                            k,
                                        ],
                                        storageKey: null,
                                    },
                                    L,
                                ],
                                storageKey: null,
                            },
                            K,
                        ],
                        storageKey:
                            'labels(first:10,orderBy:{"direction":"ASC","field":"NAME"})',
                    },
                    I = {
                        alias: null,
                        args: S,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    x = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    w = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            h,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            k,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                            d,
                        ],
                        storageKey: null,
                    },
                    N = {
                        kind: "InlineFragment",
                        selections: [
                            v,
                            I,
                            _,
                            p,
                            c,
                            x,
                            w,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    j = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    R = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a, n, s],
                        kind: "Fragment",
                        metadata: null,
                        name: "RepositoryMilestoneQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: [t, r, o],
                                        kind: "FragmentSpread",
                                        name: "RepositoryMilestoneInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [n, l, a, e, s],
                        kind: "Operation",
                        name: "RepositoryMilestoneQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    u,
                                    {
                                        alias: null,
                                        args: [r],
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            d,
                                            c,
                                            m,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [u, d],
                                                storageKey: null,
                                            },
                                            g,
                                            p,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "openIssueCount",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "closedIssueCount",
                                                storageKey: null,
                                            },
                                            y,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "descriptionHTML",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "progressPercentage",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "dueOn",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                    b,
                                    f,
                                    {
                                        alias: null,
                                        args: C,
                                        concreteType:
                                            "SearchResultItemConnection",
                                        kind: "LinkedField",
                                        name: "search",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueCount",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "SearchResultItemEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [
                                                            k,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    d,
                                                                    g,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "state",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    m,
                                                                    {
                                                                        alias: "titleHtml",
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "titleHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "IssueType",
                                                                        kind: "LinkedField",
                                                                        name: "issueType",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                d,
                                                                                f,
                                                                                F,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                N,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            v,
                                                                                            I,
                                                                                            _,
                                                                                            p,
                                                                                            c,
                                                                                            x,
                                                                                            w,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "reviewDecision",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            j,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isInMergeQueue",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            R,
                                                                                        ],
                                                                                    type: "PullRequest",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "IssueOrPullRequest",
                                                                        abstractKey:
                                                                            "__isIssueOrPullRequest",
                                                                    },
                                                                ],
                                                                type: "Issue",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    d,
                                                                    g,
                                                                    c,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                f,
                                                                                b,
                                                                                d,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    m,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "titleHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                N,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            v,
                                                                                            I,
                                                                                            _,
                                                                                            p,
                                                                                            x,
                                                                                            w,
                                                                                            j,
                                                                                            R,
                                                                                        ],
                                                                                    type: "PullRequest",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "IssueOrPullRequest",
                                                                        abstractKey:
                                                                            "__isIssueOrPullRequest",
                                                                    },
                                                                ],
                                                                type: "PullRequest",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [d],
                                                                type: "Node",
                                                                abstractKey:
                                                                    "__isNode",
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    L,
                                                ],
                                                storageKey: null,
                                            },
                                            K,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: C,
                                        filters: [
                                            "query",
                                            "type",
                                            "aggregations",
                                        ],
                                        handle: "connection",
                                        key: "MilestoneIssuesList_search",
                                        kind: "LinkedHandle",
                                        name: "search",
                                    },
                                    d,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isArchived",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isDisabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isLocked",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInOrganization",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "30520301d90734d14acaeec676fc6f2d",
                        metadata: {},
                        name: "RepositoryMilestoneQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            ci.hash = "0a0e1c3003c63955a36ca0169f77ff91";
            let ct = (function () {
                var e = {
                        kind: "Variable",
                        name: "number",
                        variableName: "number",
                    },
                    l = [e];
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "number",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "query",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "RepositoryMilestoneInternal",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameWithOwner",
                            storageKey: null,
                        },
                        {
                            args: l,
                            kind: "FragmentSpread",
                            name: "MilestoneActions",
                        },
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "first",
                                    variableName: "first",
                                },
                                e,
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "query",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "MilestoneIssuesList",
                        },
                        {
                            alias: null,
                            args: l,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "MilestoneDetail",
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "title",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "number",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            ct.hash = "ed58f7c20d8325fa9641338233943cdb";
            let cr = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneActions",
                selections: [
                    {
                        alias: null,
                        args: [
                            {
                                kind: "Variable",
                                name: "number",
                                variableName: "number",
                            },
                        ],
                        concreteType: "Milestone",
                        kind: "LinkedField",
                        name: "milestone",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "ToggleMilestoneState",
                            },
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "MilestoneTitle",
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "number",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "title",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "login",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            cr.hash = "4c04143e376497bc1a37d2218000a808";
            let co = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneTitle",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "nameWithOwner",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            co.hash = "3aa545b4589bf0d967e46deb8f691360";
            var cu = a(35405);
            function cd({ milestoneRef: e }) {
                let { title: l, repository: a } = (0, er.useFragment)(co, e);
                return (0, y.jsxs)("div", {
                    className: uI.milestoneTitleWrapper,
                    children: [
                        (0, y.jsxs)(cu.A, {
                            children: [
                                (0, y.jsx)(cu.A.Item, {
                                    href: `/${a.nameWithOwner}/milestones`,
                                    children: "Milestones",
                                }),
                                (0, y.jsx)(cu.A.Item, {
                                    selected: !0,
                                    children: (0, y.jsx)("span", {
                                        children:
                                            l.length > 30
                                                ? `${l.slice(0, 30)}\u{2026}`
                                                : l,
                                    }),
                                }),
                            ],
                        }),
                        (0, y.jsx)(e8.A, {
                            className: uI.title,
                            as: "h2",
                            children: l,
                        }),
                    ],
                });
            }
            try {
                cd.displayName || (cd.displayName = "MilestoneTitle");
            } catch {}
            let cc = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ToggleMilestoneState",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            function cm({ milestoneRef: e }) {
                let l = (0, er.useFragment)(cc, e),
                    a = (0, er.useRelayEnvironment)(),
                    { addToast: n } = (0, _.Y6)(),
                    s = (0, b.useCallback)(() => {
                        uN({
                            environment: a,
                            input: {
                                id: l.id,
                                state: l.closed ? "OPEN" : "CLOSED",
                            },
                            onCompleted: () => {},
                            onError: () => {
                                n({
                                    type: "error",
                                    message:
                                        "Could not change Milestone status",
                                });
                            },
                        });
                    }, [n, l.closed, l.id, a]);
                return (0, y.jsx)(nn.Q, {
                    onClick: s,
                    variant: "default",
                    children: l.closed ? "Reopen Milestone" : "Close Milestone",
                });
            }
            cc.hash = "e9d04dbed832ecb0dfde42e7ee424484";
            try {
                cm.displayName || (cm.displayName = "ToggleMilestoneState");
            } catch {}
            function cg({ repositoryRef: e, optionConfig: l }) {
                let {
                        milestone: a,
                        viewerCanPush: n,
                        owner: s,
                        name: i,
                    } = (0, er.useFragment)(cr, e),
                    t = (0, e7.Z)(),
                    r = (0, b.useCallback)(
                        (e) => {
                            if (!a || !a.title) return;
                            let l = `milestone=${encodeURIComponent(a.title)}`;
                            t(e.includes("?") ? `${e}&${l}` : `${e}?${l}`);
                        },
                        [a, t]
                    );
                if (!a) return null;
                let o = `${A.fV.origin}/${s.login}/${i}`,
                    u = `${o}/milestones/${a.number}/edit`;
                return (0, y.jsxs)("div", {
                    className: `${uI.buttonGrp} ${uI.header}`,
                    children: [
                        (0, y.jsx)(cd, { milestoneRef: a }),
                        (0, y.jsxs)("div", {
                            className: uI.actionsGrp,
                            children: [
                                n
                                    ? (0, y.jsxs)(y.Fragment, {
                                          children: [
                                              (0, y.jsx)(nn.Q, {
                                                  as: "a",
                                                  href: u,
                                                  children: uF.editMilestone,
                                              }),
                                              (0, y.jsx)(cm, {
                                                  milestoneRef: a,
                                              }),
                                          ],
                                      })
                                    : null,
                                (0, y.jsx)(na.a, {
                                    label: uF.newIssue,
                                    navigate: r,
                                    optionConfig: {
                                        ...l,
                                        showRepositoryPicker: !1,
                                        issueCreateArguments: {
                                            repository: {
                                                owner: s.login,
                                                name: i,
                                            },
                                        },
                                        showFullScreenButton: !0,
                                        navigateToFullScreenOnTemplateChoice:
                                            t !== K.l,
                                        canBypassTemplateSelection: !0,
                                    },
                                }),
                            ],
                        }),
                    ],
                });
            }
            try {
                cg.displayName || (cg.displayName = "MilestoneActions");
            } catch {}
            let cp = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneDetail",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "descriptionHTML",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "progressPercentage",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneDate",
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            cp.hash = "b924a97b25ba7fc66844fdbc57ca3181";
            var cy = a(26076),
                ck = a(85369);
            function ch({ milestoneRef: e }) {
                let l = (0, er.useFragment)(cp, e),
                    [a, n] = (0, b.useState)(!1),
                    s = l.descriptionHTML && l.descriptionHTML.length > 600;
                return (0, y.jsxs)("div", {
                    className: `${uI.milestoneDetailsWrapper} ${a && s ? uI.expanded : ""}`,
                    children: [
                        (0, y.jsxs)("div", {
                            className: uI.metadataWrapper,
                            children: [
                                (0, y.jsxs)("div", {
                                    className: uI.status,
                                    "data-testid": "milestone-status",
                                    children: [
                                        (0, y.jsx)(ck.A, {
                                            className: uI.milestoneStatus,
                                            variant: "small",
                                            status: l.closed
                                                ? "closed"
                                                : "open",
                                            children: l.closed
                                                ? uF.milestoneClosed
                                                : uF.milestoneOpen,
                                        }),
                                        (0, y.jsxs)("div", {
                                            className:
                                                uI.milestoneDataContainer,
                                            children: [
                                                (0, y.jsx)(dU, {
                                                    milestone: l,
                                                }),
                                                (0, y.jsxs)("span", {
                                                    children: [
                                                        l.closed
                                                            ? (0, y.jsx)(
                                                                  y.Fragment,
                                                                  {
                                                                      children:
                                                                          uF.milestoneClosed,
                                                                  }
                                                              )
                                                            : (0, y.jsx)(
                                                                  y.Fragment,
                                                                  {
                                                                      children:
                                                                          uF.milestoneLastUpdated,
                                                                  }
                                                              ),
                                                        (0, y.jsx)(sx.A, {
                                                            date: new Date(
                                                                l.updatedAt
                                                            ),
                                                            tense: "past",
                                                        }),
                                                    ],
                                                }),
                                            ],
                                        }),
                                    ],
                                }),
                                (0, y.jsxs)("div", {
                                    className: uI.progressSection,
                                    children: [
                                        (0, y.jsxs)("span", {
                                            children: [
                                                (0, y.jsxs)("span", {
                                                    className:
                                                        uI.progressPercentage,
                                                    children: [
                                                        Math.floor(
                                                            l.progressPercentage
                                                        ),
                                                        "%",
                                                    ],
                                                }),
                                                " ",
                                                "complete",
                                            ],
                                        }),
                                        (0, y.jsx)(dG.z, {
                                            progress: Math.floor(
                                                l.progressPercentage
                                            ),
                                            "aria-hidden": "true",
                                        }),
                                    ],
                                }),
                            ],
                        }),
                        l.description && l.descriptionHTML
                            ? (0, y.jsxs)("div", {
                                  className: uI.milestoneDescription,
                                  id: "milestone-description",
                                  children: [
                                      (0, y.jsx)(cy.G, {
                                          className: (0, nA.$)(
                                              uI.mdViewer,
                                              s
                                                  ? a
                                                      ? uI.expanded
                                                      : uI.collapsed
                                                  : null
                                          ),
                                          markdownValue: l.description,
                                          verifiedHTML: l.descriptionHTML,
                                          onChange: () => {},
                                      }),
                                      s &&
                                          (0, y.jsx)("div", {
                                              className: (0, nA.$)(
                                                  uI.showMoreButtonContainer,
                                                  a ? uI.expanded : uI.collapsed
                                              ),
                                              children: (0, y.jsx)(nn.Q, {
                                                  size: "small",
                                                  variant: "invisible",
                                                  className: uI.button,
                                                  onClick: () => {
                                                      n(!a);
                                                  },
                                                  "aria-expanded": a,
                                                  "aria-controls":
                                                      "milestone-description",
                                                  trailingVisual: a
                                                      ? T.ChevronUpIcon
                                                      : T.ChevronDownIcon,
                                                  children: a
                                                      ? "Show less"
                                                      : "Show more",
                                              }),
                                          }),
                                  ],
                              })
                            : null,
                    ],
                });
            }
            try {
                ch.displayName || (ch.displayName = "MilestoneDetail");
            } catch {}
            let cb = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "cursor",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    i = [{ kind: "Variable", name: "id", variableName: "id" }],
                    t = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    r = {
                        kind: "Variable",
                        name: "number",
                        variableName: "number",
                    },
                    o = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    c = [
                        {
                            kind: "Variable",
                            name: "after",
                            variableName: "cursor",
                        },
                        { kind: "Literal", name: "aggregations", value: !0 },
                        t,
                        o,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    k = [
                        { kind: "Literal", name: "first", value: 10 },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        concreteType: "PageInfo",
                        kind: "LinkedField",
                        name: "pageInfo",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "endCursor",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "hasNextPage",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: k,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            d,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            y,
                                            p,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            u,
                                        ],
                                        storageKey: null,
                                    },
                                    h,
                                ],
                                storageKey: null,
                            },
                            b,
                        ],
                        storageKey:
                            'labels(first:10,orderBy:{"direction":"ASC","field":"NAME"})',
                    },
                    C = {
                        alias: null,
                        args: k,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            v,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            u,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                            d,
                        ],
                        storageKey: null,
                    },
                    _ = {
                        kind: "InlineFragment",
                        selections: [
                            f,
                            C,
                            F,
                            S,
                            L,
                            K,
                            I,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    x = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    w = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    N = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [u, v, d],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, a, n, s],
                        kind: "Fragment",
                        metadata: null,
                        name: "MilestoneIssuesListQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                            t,
                                            r,
                                            o,
                                        ],
                                        kind: "FragmentSpread",
                                        name: "MilestoneIssuesList",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, l, n, s, a],
                        kind: "Operation",
                        name: "MilestoneIssuesListQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    u,
                                    d,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: c,
                                                concreteType:
                                                    "SearchResultItemConnection",
                                                kind: "LinkedField",
                                                name: "search",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "issueCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchResultItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    u,
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                d,
                                                                                m,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "state",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                g,
                                                                                {
                                                                                    alias: "titleHtml",
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "IssueType",
                                                                                    kind: "LinkedField",
                                                                                    name: "issueType",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            d,
                                                                                            p,
                                                                                            y,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            _,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        f,
                                                                                                        C,
                                                                                                        F,
                                                                                                        S,
                                                                                                        L,
                                                                                                        K,
                                                                                                        I,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "reviewDecision",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        x,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "isInMergeQueue",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        w,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "Issue",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                d,
                                                                                m,
                                                                                L,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            p,
                                                                                            N,
                                                                                            d,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                g,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            _,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        f,
                                                                                                        C,
                                                                                                        F,
                                                                                                        S,
                                                                                                        K,
                                                                                                        I,
                                                                                                        x,
                                                                                                        w,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "PullRequest",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [d],
                                                                        type: "Node",
                                                                        abstractKey:
                                                                            "__isNode",
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            h,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    b,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: c,
                                                filters: [
                                                    "query",
                                                    "type",
                                                    "aggregations",
                                                ],
                                                handle: "connection",
                                                key: "MilestoneIssuesList_search",
                                                kind: "LinkedHandle",
                                                name: "search",
                                            },
                                            {
                                                alias: null,
                                                args: [r],
                                                concreteType: "Milestone",
                                                kind: "LinkedField",
                                                name: "milestone",
                                                plural: !1,
                                                selections: [
                                                    d,
                                                    m,
                                                    S,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "openIssueCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "closedIssueCount",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            N,
                                            p,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isArchived",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanPush",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isDisabled",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isLocked",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isInOrganization",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Repository",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "f3116c955bb0aed1085c5f9ce3ea17b1",
                        metadata: {},
                        name: "MilestoneIssuesListQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            cb.hash = "51fbe7ba275adbf51fd5718aeca48151";
            let cf = (function () {
                var e = ["search"],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    n = {
                        kind: "Literal",
                        name: "includeMilestone",
                        value: !1,
                    },
                    s = { kind: "Literal", name: "labelPageSize", value: 10 };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "number",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "query",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "first",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: { count: "first", cursor: "cursor" },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: cb,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "MilestoneIssuesList",
                    selections: [
                        {
                            alias: "search",
                            args: [
                                {
                                    kind: "Literal",
                                    name: "aggregations",
                                    value: !0,
                                },
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "query",
                                },
                                {
                                    kind: "Literal",
                                    name: "type",
                                    value: "ISSUE_ADVANCED",
                                },
                            ],
                            concreteType: "SearchResultItemConnection",
                            kind: "LinkedField",
                            name: "__MilestoneIssuesList_search_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "issueCount",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "SearchResultItemEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [
                                                        l,
                                                        a,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "state",
                                                            storageKey: null,
                                                        },
                                                        {
                                                            args: [
                                                                {
                                                                    kind: "Literal",
                                                                    name: "fetchRepository",
                                                                    value: !1,
                                                                },
                                                                n,
                                                                s,
                                                            ],
                                                            kind: "FragmentSpread",
                                                            name: "IssueRow",
                                                        },
                                                    ],
                                                    type: "Issue",
                                                    abstractKey: null,
                                                },
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [
                                                        l,
                                                        a,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "closed",
                                                            storageKey: null,
                                                        },
                                                        {
                                                            args: [
                                                                {
                                                                    kind: "Literal",
                                                                    name: "includeGitData",
                                                                    value: !1,
                                                                },
                                                                n,
                                                                s,
                                                            ],
                                                            kind: "FragmentSpread",
                                                            name: "PullRequestRow_pullRequest",
                                                        },
                                                    ],
                                                    type: "PullRequest",
                                                    abstractKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "number",
                                    variableName: "number",
                                },
                            ],
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "MilestoneIssuesListInternal",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "owner",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "login",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        l,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isArchived",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanPush",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isDisabled",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isLocked",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isInOrganization",
                            storageKey: null,
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            cf.hash = "51fbe7ba275adbf51fd5718aeca48151";
            let cC = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneIssuesListInternal",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "OpenClosedMilestoneIssues",
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            cC.hash = "4b1062184102941393701896eeda1e42";
            let cF = {
                    emptyState: "EmptyState-module__emptyState--T_45S",
                    emptyStateHeading:
                        "EmptyState-module__emptyStateHeading--alMtZ",
                },
                cS = ({
                    selected: e,
                    ariaLabel: l,
                    id: a,
                    descriptionUrl: n,
                }) => (
                    "open" !== e && "closed" !== e && (e = "open"),
                    (0, y.jsxs)("div", {
                        id: a,
                        className: cF.emptyState,
                        role: "region",
                        "aria-label": l,
                        "aria-live": "polite",
                        "aria-atomic": "true",
                        children: [
                            (0, y.jsx)("h3", {
                                className: cF.emptyStateHeading,
                                children:
                                    "open" === e
                                        ? uF.emptyStateOpenIssues
                                        : uF.emptyStateClosedIssues,
                            }),
                            (0, y.jsx)("p", {
                                children:
                                    "open" === e
                                        ? (0, y.jsxs)(y.Fragment, {
                                              children: [
                                                  "Add issues to milestones to help organize your work for a particular release or project. Find and add",
                                                  " ",
                                                  (0, y.jsx)(e9.A, {
                                                      inline: !0,
                                                      href: n,
                                                      children:
                                                          "issues with no milestones",
                                                  }),
                                                  " ",
                                                  "in this repo.",
                                              ],
                                          })
                                        : "Issues will automatically be moved here when they are closed.",
                            }),
                        ],
                    })
                );
            try {
                cS.displayName || (cS.displayName = "EmptyState");
            } catch {}
            function cL() {
                let e = (0, b.useCallback)(
                        (e, l, a) =>
                            e
                                ? (0, y.jsxs)(np.l.Item, {
                                      disabled: !0,
                                      children: [
                                          (0, y.jsx)(np.l.LeadingVisual, {
                                              children: (0, y.jsx)(l, {}),
                                          }),
                                          a,
                                          (0, y.jsx)(np.l.TrailingVisual, {
                                              children: (0, y.jsx)(
                                                  T.TriangleDownIcon,
                                                  {}
                                              ),
                                          }),
                                      ],
                                  })
                                : (0, y.jsx)(nn.Q, {
                                      disabled: !0,
                                      leadingVisual: l,
                                      trailingVisual: T.TriangleDownIcon,
                                      children: a,
                                  }),
                        []
                    ),
                    l = (0, b.useMemo)(
                        () => [
                            {
                                key: "mark-as",
                                render: (l) =>
                                    e(l, dO.issueIcons.CLOSED.icon, uF.markAs),
                            },
                            {
                                key: "apply-labels",
                                render: (l) => e(l, T.TagIcon, uF.label),
                            },
                            {
                                key: "apply-assignees",
                                render: (l) => e(l, T.PeopleIcon, uF.assign),
                            },
                            {
                                key: "add-to-projects",
                                render: (l) =>
                                    e(l, T.ProjectSymlinkIcon, uF.project),
                            },
                            {
                                key: "apply-milestone",
                                render: (l) =>
                                    e(l, T.MilestoneIcon, uF.milestone),
                            },
                            {
                                key: "apply-issue-type",
                                render: (l) =>
                                    e(l, T.IssueOpenedIcon, uF.setIssueType),
                            },
                        ],
                        [e]
                    );
                return (0, y.jsx)(tQ.X, {
                    onToggleSelectAll: K.l,
                    actionsLabel: uF.bulkActions,
                    actions: l,
                    density: "normal",
                });
            }
            let cK = ({
                checkedItems: e,
                issueNodes: l,
                setCheckedItems: a,
                updateListHasPRs: n,
                useBulkActions: s,
                scopedRepository: i,
                singleKeyShortcutsEnabled: t,
                bulkJobId: r,
                setBulkJobId: o,
                isInOrganization: u,
            }) => {
                let { addToast: d, addPersistedToast: c } = (0, _.Y6)(),
                    { setSelectedCount: m } = (0, tu.v)(),
                    { setMultiPageSelectionAllowed: g } = (0, tU.P)(),
                    [p, k] = (0, b.useState)(null !== r),
                    h = Array.from(e.values())
                        .filter((e) => null != e)
                        .filter((e) => "Issue" === e.__typename),
                    f = (0, b.useCallback)(
                        (e) => {
                            (k(!1),
                                e &&
                                    (c({
                                        type: "info",
                                        message: "Updating issues",
                                        icon: (0, y.jsx)(T.RocketIcon, {}),
                                        role: "status",
                                    }),
                                    o(e)));
                        },
                        [c, o]
                    ),
                    C = (0, b.useCallback)(
                        (e) => {
                            (k(!1),
                                d({
                                    type: "error",
                                    message: `Could not update issues: ${e.message}`,
                                }));
                        },
                        [d]
                    ),
                    F = (0, b.useMemo)(
                        () => ({
                            onCompleted: f,
                            onError: C,
                            disabled: p,
                            issuesToActOn: h
                                .filter((e) => null != e)
                                .map((e) => e.id),
                            singleKeyShortcutsEnabled: t || !1,
                        }),
                        [f, C, p, h, t]
                    ),
                    S = (0, b.useCallback)(
                        (e) => {
                            e
                                ? (a(
                                      l
                                          .filter((e) => null != e)
                                          .reduce(
                                              (e, l) => e.set(l.id, l),
                                              new Map()
                                          )
                                  ),
                                  n(
                                      l
                                          .filter((e) => null != e)
                                          .reduce(
                                              (e, l) => e.set(l.id, l),
                                              new Map()
                                          )
                                  ))
                                : (a(new Map()), m(0), g?.(!1));
                        },
                        [l, a, g, m, n]
                    ),
                    L = i && s,
                    [K, v] = (0, b.useState)(void 0),
                    I = (0, b.useMemo)(
                        () => ({
                            owner: i?.owner ?? "",
                            repositoryName: i?.name ?? "",
                        }),
                        [i?.name, i?.owner]
                    ),
                    x = (0, b.useMemo)(
                        () => ({ open: K, onOpenChange: (e) => tz(e, v) }),
                        [K]
                    ),
                    w = (0, b.useMemo)(() => {
                        if (!L) return;
                        let e = h.map((e) => e.id),
                            l = h.map((e) => e.number),
                            a = [
                                {
                                    key: "mark-as",
                                    render: (e) =>
                                        (0, y.jsx)(t$, { ...F, nested: e }),
                                },
                                {
                                    key: "apply-labels",
                                    render: (l) =>
                                        (0, y.jsx)(tw, {
                                            owner: i.owner,
                                            repo: i.name,
                                            nested: l,
                                            issueIds: e,
                                            ...F,
                                        }),
                                },
                                {
                                    key: "apply-assignees",
                                    render: (a) =>
                                        (0, y.jsx)(th, {
                                            nested: a,
                                            issueIds: e,
                                            issueNumbers: l,
                                            ...F,
                                            owner: i?.owner,
                                            repo: i?.name,
                                        }),
                                },
                                {
                                    key: "add-to-projects",
                                    render: (l) =>
                                        (0, y.jsx)(tm, {
                                            nested: l,
                                            issueIds: e,
                                            owner: i?.owner,
                                            repo: i?.name,
                                            ...F,
                                        }),
                                },
                                {
                                    key: "apply-milestone",
                                    render: (e) =>
                                        (0, y.jsx)(tM, {
                                            owner: i.owner,
                                            repo: i.name,
                                            nested: e,
                                            issueIds: h.map((e) => e.id),
                                            ...F,
                                        }),
                                },
                            ];
                        return (
                            u &&
                                a.push({
                                    key: "apply-issue-type",
                                    render: (l) =>
                                        (0, y.jsx)(la.y, {
                                            appName: "issue_types",
                                            category: "issues_index",
                                            metadata: I,
                                            children: (0, y.jsx)(tK, {
                                                owner: i.owner,
                                                repo: i.name,
                                                nested: l,
                                                issueIds: e,
                                                ...F,
                                            }),
                                        }),
                                }),
                            a
                        );
                    }, [F, i?.owner, i?.name, h, L, I, u]);
                return (0, y.jsx)(b.Suspense, {
                    fallback: (0, y.jsx)(cL, {}),
                    children: (0, y.jsx)(tQ.X, {
                        onToggleSelectAll: S,
                        actionsLabel: uF.bulkActions,
                        actions: w,
                        density: "normal",
                        ...F,
                        overflowMenuProps: x,
                    }),
                });
            };
            try {
                cL.displayName ||
                    (cL.displayName = "ListItemsHeaderBulkFallback");
            } catch {}
            try {
                cK.displayName ||
                    (cK.displayName = "ListItemsHeaderWithBulkActions");
            } catch {}
            let cv = ({
                sectionFilters: e,
                issueNodes: l,
                setCheckedItems: a,
                updateListHasPRs: n,
                ...s
            }) => {
                let { setSelectedCount: i } = (0, tu.v)(),
                    { setMultiPageSelectionAllowed: t } = (0, tU.P)(),
                    r = (0, b.useCallback)(
                        (e) => {
                            e
                                ? (a(
                                      l
                                          .filter((e) => null != e)
                                          .reduce(
                                              (e, l) => e.set(l.id, l),
                                              new Map()
                                          )
                                  ),
                                  n(
                                      l
                                          .filter((e) => null != e)
                                          .reduce(
                                              (e, l) => e.set(l.id, l),
                                              new Map()
                                          )
                                  ))
                                : (a(new Map()), i(0), t?.(!1));
                        },
                        [l, a, t, i, n]
                    );
                return (0, y.jsx)(tQ.X, {
                    onToggleSelectAll: r,
                    actionsLabel: uF.bulkActions,
                    actions: [],
                    sectionFilters: e,
                    density: "normal",
                    ...s,
                });
            };
            try {
                cv.displayName ||
                    (cv.displayName = "ListItemsHeaderWithoutBulkActions");
            } catch {}
            function cI({ ...e }) {
                let { anyItemsSelected: l } = (0, tu.v)();
                return l ? (0, y.jsx)(cK, { ...e }) : (0, y.jsx)(cv, { ...e });
            }
            try {
                cI.displayName || (cI.displayName = "ListItemsHeader");
            } catch {}
            function c_({
                orderedNodes: e,
                checkedItems: l,
                itemSelected: a,
                getMetadataHref: n,
                getAdditiveMetadataHref: s,
                withDragAndDrop: i,
                scopedRepository: t,
                handleNavigate: r,
            }) {
                let o = (0, e7.Z)(),
                    [u, d] = (0, er.useQueryLoader)(iX),
                    c = null !== u;
                (0, b.useEffect)(() => {
                    A.X3 ||
                        d({ nodes: e.map((e) => e.id), includeReactions: !1 });
                }, [d, e, c]);
                let m = e?.map((e, d) => {
                    let c = {
                        isActive: !1,
                        isSelected: e && l.has(e.id),
                        onSelect: (l) => e && a(e.id, e, l),
                        onSelectRow: K.l,
                        getMetadataHref: n,
                        getAdditiveMetadataHref: s,
                        reactionEmojiToDisplay: {
                            reaction: "",
                            reactionEmoji: "",
                        },
                        sortingItemSelected: "",
                        scopedRepository: t,
                        metadataRef: u,
                    };
                    if (!i)
                        if ("Issue" === e.__typename)
                            return (0, y.jsx)(
                                iY,
                                {
                                    issueKey: e,
                                    onNavigate: (l, a) => r(e.number, l, a),
                                    ...c,
                                },
                                e.id
                            );
                        else
                            return (0, y.jsx)(
                                s1,
                                {
                                    pullRequestKey: e,
                                    includeGitDataFromMainQuery: !1,
                                    onNavigate: o,
                                    ...c,
                                },
                                e.id
                            );
                    return (0, y.jsx)(
                        o4.BS.Item,
                        {
                            hideTrigger: !0,
                            as: "li",
                            index: d,
                            id: e.id,
                            title: "",
                            style: { display: "flex", width: "100%" },
                            className: uI.dragAndDropItem,
                            tabIndex: -1,
                            elementId: `list-view-node-${e.id}`,
                            children:
                                "Issue" === e.__typename
                                    ? (0, y.jsx)(
                                          iY,
                                          {
                                              issueKey: e,
                                              onNavigate: (l, a) =>
                                                  r(e.number, l, a),
                                              ...c,
                                              as: "div",
                                              role: "none",
                                          },
                                          e.id
                                      )
                                    : (0, y.jsx)(
                                          s1,
                                          {
                                              pullRequestKey: e,
                                              includeGitDataFromMainQuery: !1,
                                              onNavigate: o,
                                              ...c,
                                              as: "div",
                                              role: "none",
                                          },
                                          e.id
                                      ),
                        },
                        e.id
                    );
                });
                return (0, y.jsx)(y.Fragment, { children: m });
            }
            try {
                c_.displayName || (c_.displayName = "MilestoneIssuesListPage");
            } catch {}
            let cx = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "ReprioritizeMilestoneIssuePayload",
                            kind: "LinkedField",
                            name: "reprioritizeMilestoneIssue",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Milestone",
                                    kind: "LinkedField",
                                    name: "milestone",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "id",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "updatedAt",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "reprioritizeMilestoneIssueMutation",
                        selections: l,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "reprioritizeMilestoneIssueMutation",
                        selections: l,
                    },
                    params: {
                        id: "7d5f7ac13ff9d53e475f834c63eda91c",
                        metadata: {},
                        name: "reprioritizeMilestoneIssueMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            cx.hash = "30aff72adf0f613394b97d1727b41dd0";
            let cw = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "OpenClosedMilestoneIssues",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "openIssueCount",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedIssueCount",
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            function cN({ milestoneRef: e }) {
                let l = (0, er.useFragment)(cw, e),
                    a = Math.abs(l?.openIssueCount || 0).toLocaleString(),
                    n = Math.abs(l?.closedIssueCount || 0).toLocaleString(),
                    s = "";
                A.cg && (s = A.cg.location.pathname);
                let i = `${s}?closed=1`,
                    [t] = (0, e7.o)(),
                    r = t.get("closed"),
                    o = (0, tt.X)(["mac"]),
                    u = (0, e7.Z)(),
                    d = (0, b.useCallback)(
                        (e, l) => {
                            (o ? e.metaKey : e.ctrlKey) ||
                                (e.preventDefault(), u(l ? s : i));
                        },
                        [i, o, u, s]
                    );
                return (0, y.jsx)("div", {
                    children: (0, y.jsxs)("ul", {
                        className: `list-style-none ${(0, nA.$)(uI.tabsContainer)}`,
                        children: [
                            (0, y.jsx)(
                                "li",
                                {
                                    children: (0, y.jsx)(
                                        nc.L,
                                        {
                                            title: "Open",
                                            isSelected: A.KJ && "1" !== r,
                                            count: a,
                                            href: s,
                                            onClick: (e) => d(e, !0),
                                        },
                                        "open"
                                    ),
                                },
                                "section-filter-0"
                            ),
                            (0, y.jsx)(
                                "li",
                                {
                                    children: (0, y.jsx)(
                                        nc.L,
                                        {
                                            title: "Closed",
                                            isSelected: A.KJ && "1" === r,
                                            count: n,
                                            href: i,
                                            onClick: (e) => d(e, !1),
                                        },
                                        "closed"
                                    ),
                                },
                                "section-filter-1"
                            ),
                        ],
                    }),
                });
            }
            cw.hash = "91b6ba0a2d4f55865eaf8fbec036f6bd";
            try {
                cN.displayName ||
                    (cN.displayName = "OpenClosedMilestoneIssues");
            } catch {}
            function cj({ repositoryRef: e, singleKeyShortcutsEnabled: l }) {
                let {
                    data: a,
                    loadNext: n,
                    hasNext: s,
                } = (0, er.usePaginationFragment)(cf, e);
                return a.milestone
                    ? (0, y.jsx)(cR, {
                          data: a,
                          milestone: a.milestone,
                          loadNext: n,
                          hasNext: s,
                          singleKeyShortcutsEnabled: l,
                          viewerCanPush: a.viewerCanPush,
                      })
                    : null;
            }
            function cR({
                data: e,
                milestone: l,
                loadNext: a,
                hasNext: n,
                singleKeyShortcutsEnabled: s,
                viewerCanPush: i,
            }) {
                let t = (0, er.useFragment)(cC, l),
                    r = (0, b.useMemo)(
                        () => ({
                            id: e.id,
                            name: e.name,
                            owner: e.owner.login,
                            is_archived: e.isArchived,
                            viewerCanPush: e.viewerCanPush,
                            isDisabled: e.isDisabled,
                            isLocked: e.isLocked,
                        }),
                        [e]
                    ),
                    [o, u] = (0, b.useState)(() => new Map()),
                    [d, c] = (0, b.useState)(),
                    { shiftKeyPressedRef: m } = (function () {
                        let e = (0, b.useRef)(!1);
                        return (
                            (0, b.useEffect)(() => {
                                let l = (l) => (e.current = l.shiftKey),
                                    a = () => (e.current = !1);
                                return (
                                    window.addEventListener("keydown", l),
                                    window.addEventListener("keyup", a),
                                    () => {
                                        (window.removeEventListener(
                                            "keydown",
                                            l
                                        ),
                                            window.removeEventListener(
                                                "keyup",
                                                a
                                            ));
                                    }
                                );
                            }, []),
                            { shiftKeyPressedRef: e }
                        );
                    })(),
                    g = (0, b.useMemo)(
                        () =>
                            e.search?.edges
                                ?.map((e) =>
                                    e?.node &&
                                    ("PullRequest" === e.node.__typename ||
                                        "Issue" === e.node.__typename)
                                        ? e.node
                                        : null
                                )
                                .filter((e) => !!e) || [],
                        [e]
                    ),
                    p = (0, er.useRelayEnvironment)(),
                    k = (0, e7.Z)(),
                    h = (0, b.useCallback)(
                        async (l, a, n) => (
                            (0, av.SC)("react"),
                            await aS(p, e.owner.login, e.name, l),
                            k(a, n)
                        ),
                        [e.name, e.owner.login, p, k]
                    ),
                    [f, C] = (0, w.M)(dO.localStorageKeyBulkUpdateIssues, null),
                    [F, S] = (0, b.useState)(!1),
                    L =
                        r &&
                        r.viewerCanPush &&
                        !(r.isDisabled || r.isLocked || r.is_archived) &&
                        g.length < 100,
                    v = (0, b.useMemo)(() => L && !F, [F, L]),
                    x = (e) => {
                        S(
                            Array.from(e.values()).some(
                                (e) => "PullRequest" === e.__typename
                            )
                        );
                    },
                    N = (0, b.useCallback)(
                        (e, l, a, n) => {
                            let s = g.findIndex((e) => e.id === l),
                                i = g.findIndex((e) => e.id === a);
                            for (
                                let l = Math.min(s, i);
                                l <= Math.max(s, i);
                                l++
                            ) {
                                let a = g[l];
                                (a && (n ? e.set(a.id, a) : e.delete(a.id)),
                                    x(e));
                            }
                        },
                        [g]
                    ),
                    j = (0, b.useCallback)(
                        (e, l, a) => {
                            let n = new Map(o);
                            (m.current && d
                                ? N(n, d.id, e, a)
                                : (a ? n.set(e, l) : n.delete(e), x(n)),
                                u(n),
                                c({ id: e, node: l }));
                        },
                        [N, o, d, m]
                    ),
                    R = (0, b.useCallback)(
                        (e, l) => ac("is:issue state:open", !0, e, l),
                        []
                    ),
                    P = (0, b.useCallback)(
                        (e, l) => am("is:issue state:open", !0, e, l),
                        []
                    ),
                    [T, M] = (0, b.useState)(g),
                    V = `${A.fV.origin}/${e.owner.login}/${e.name}`,
                    D = `${V}/issues/?q=is%3Aissue%20state%3Aopen%20no%3Amilestone`,
                    E = `/${e.owner.login}/${e.name}/milestone/${t.number}`,
                    q = A.fV.pathname,
                    [O] = (0, I.ok)(),
                    B = O.get("closed"),
                    $ = E === q && "1" === B;
                function Q(e) {
                    return "Issue" === e.__typename
                        ? e.state
                        : "PullRequest" === e.__typename
                          ? e.closed
                              ? "CLOSED"
                              : "OPEN"
                          : null;
                }
                (0, b.useEffect)(() => {
                    M((e) => {
                        let l = $ ? "CLOSED" : "OPEN",
                            a = e.filter((e) => Q(e) === l),
                            n = new Set(
                                a.map((e) => `${e.__typename}:${e.id}`)
                            );
                        return [
                            ...a,
                            ...g.filter(
                                (e) =>
                                    Q(e) === l &&
                                    !n.has(`${e.__typename}:${e.id}`)
                            ),
                        ];
                    });
                }, [g, $]);
                let { addToast: U } = (0, _.Y6)(),
                    z = (0, b.useCallback)(
                        ({ dragMetadata: e, dropMetadata: l, isBefore: a }) => {
                            if (e.id === l?.id) return;
                            let n = T.find((l) => l.id === e.id),
                                s = T.findIndex((e) => e.id === l?.id),
                                i = T[s];
                            if (n && i) {
                                let e = null;
                                ((e = a ? (s > 0 ? T[s - 1]?.id : null) : i.id),
                                    M(
                                        T.reduce(
                                            (e, s) => (
                                                n.id === s.id ||
                                                    (s.id !== l?.id
                                                        ? e.push(s)
                                                        : a
                                                          ? e.push(n, s)
                                                          : e.push(s, n)),
                                                e
                                            ),
                                            []
                                        )
                                    ),
                                    (function ({
                                        environment: e,
                                        input: l,
                                        onError: a,
                                        onCompleted: n,
                                    }) {
                                        (0, er.commitMutation)(e, {
                                            mutation: cx,
                                            variables: { input: l },
                                            onError: (e) => a && a(e),
                                            onCompleted: (e) => n && n(e),
                                        });
                                    })({
                                        environment: p,
                                        input: {
                                            id: n.id,
                                            milestoneId: t.id,
                                            timestamp: t.updatedAt,
                                            prevId: e,
                                        },
                                        onError: (e) => {
                                            e &&
                                                (Array.isArray(e.cause) &&
                                                e.cause[0] &&
                                                "UNPROCESSABLE" ===
                                                    e.cause[0].type
                                                    ? U({
                                                          type: "info",
                                                          message:
                                                              e.cause[0]
                                                                  .message,
                                                          role: "alert",
                                                      })
                                                    : U({
                                                          type: "error",
                                                          message:
                                                              "Error while updating milestone issue ordering",
                                                          role: "alert",
                                                      }),
                                                M(T));
                                        },
                                    }));
                            }
                        },
                        [U, p, t.id, t.updatedAt, T]
                    ),
                    H = e.search?.issueCount || 0,
                    W = i && H < dO.maxPrioritizableItemCount && !$,
                    G = (0, b.useMemo)(() => {
                        let e = dO.issuesPageSize,
                            l = [];
                        for (let a = 0; a < T.length; a += e)
                            l.push(T.slice(a, a + e));
                        return l;
                    }, [T]).map((e) =>
                        (0, y.jsx)(
                            c_,
                            {
                                orderedNodes: e,
                                checkedItems: o,
                                itemSelected: j,
                                getMetadataHref: R,
                                getAdditiveMetadataHref: P,
                                withDragAndDrop: W,
                                scopedRepository: r,
                                handleNavigate: h,
                            },
                            e[0] ? e[0].id : "my_key"
                        )
                    ),
                    Z = (0, y.jsx)(cI, {
                        checkedItems: o,
                        scopedRepository: r,
                        isInOrganization: e.isInOrganization,
                        sectionFilters: (0, y.jsx)(cN, { milestoneRef: t }),
                        issueCount: H,
                        issueNodes: g
                            .filter(Boolean)
                            .reduce((e, l) => (e.push(l), e), []),
                        setCheckedItems: u,
                        updateListHasPRs: x,
                        useBulkActions: v,
                        singleKeyShortcutsEnabled: s,
                        bulkJobId: f,
                        setBulkJobId: C,
                    }),
                    X = (0, b.useCallback)(() => {
                        a(dO.issuesPageSize);
                    }, [a]),
                    J = (0, b.useMemo)(
                        () =>
                            H > dO.issuesPageSize && n
                                ? (0, y.jsx)("div", {
                                      className: uI.loadMoreButtonWrapper,
                                      children: (0, y.jsx)(nn.Q, {
                                          variant: "invisible",
                                          onClick: X,
                                          className: uI.loadMoreButton,
                                          "data-testid": "load-more-button",
                                          children: (0, y.jsx)("span", {
                                              children: "Load more",
                                          }),
                                      }),
                                  })
                                : null,
                        [H, n, X]
                    ),
                    Y = {
                        items: T.map((e) => ({ id: e.id, title: "" })),
                        onDrop: z,
                        className: uI.dndList,
                        direction: "vertical",
                        enableTouch: !0,
                        renderOverlay: (e, l) => {
                            let a = T[l];
                            if (!a) return null;
                            let n = null;
                            return ("Issue" === a.__typename &&
                                (n = (0, y.jsx)(iY, {
                                    metadataRef: null,
                                    issueKey: a,
                                    getMetadataHref: () => "",
                                    getAdditiveMetadataHref: () => "",
                                    onSelectRow: K.l,
                                    isActive: !1,
                                    sortingItemSelected: "",
                                    onNavigate: K.l,
                                })),
                            "PullRequest" === a.__typename)
                                ? (0, y.jsx)(s1, {
                                      metadataRef: null,
                                      pullRequestKey: a,
                                      includeGitDataFromMainQuery: !1,
                                      getMetadataHref: () => "",
                                      onSelectRow: K.l,
                                      isActive: !1,
                                      sortingItemSelected: "",
                                      onNavigate: K.l,
                                  })
                                : (0, y.jsx)(
                                      o4.BS.Item,
                                      {
                                          hideTrigger: !0,
                                          as: "li",
                                          index: l,
                                          id: "dragItem",
                                          title: "",
                                          isDragOverlay: !0,
                                          containerStyle: {
                                              display: "flex",
                                              width: "100%",
                                          },
                                          style: { listStyle: "none" },
                                          children: n,
                                      },
                                      "dragItem"
                                  );
                        },
                    };
                return (0, y.jsxs)(y.Fragment, {
                    children: [
                        (0, y.jsx)("div", {
                            className: uI.milestoneListWrapper,
                            "data-hpc": !0,
                            ...(0, n2.G)("repository-milestone-list-view"),
                            children: (0, y.jsxs)(n$.u, {
                                title: "",
                                totalCount: H,
                                selectedCount: o.size,
                                titleHeaderTag: "h2",
                                isSelectable: !0,
                                hasDragHandle: W,
                                metadata: Z,
                                singularUnits: "issue",
                                pluralUnits: "issues",
                                as: W ? o4.BS : "ul",
                                ...(W ? Y : {}),
                                children: [
                                    T.length > 0 && G,
                                    0 === G.length &&
                                        (0, y.jsx)(cS, {
                                            selected: $ ? "closed" : "open",
                                            descriptionUrl: D,
                                        }),
                                ],
                            }),
                        }),
                        J,
                    ],
                });
            }
            try {
                cj.displayName || (cj.displayName = "MilestoneIssuesList");
            } catch {}
            try {
                cR.displayName ||
                    (cR.displayName = "MilestoneIssuesListInternal");
            } catch {}
            function cP({ pageQueryRef: e }) {
                let l = (0, aF.usePreloadedQuery)(ci, e);
                return l.repository
                    ? (0, y.jsx)(cT, { repository: l.repository })
                    : null;
            }
            function cT({ repository: e, optionConfig: l }) {
                let a = (0, er.useFragment)(ct, e),
                    [n, s] = (0, w.M)(dO.localStorageKeyBulkUpdateIssues, null);
                return ((0, b.useEffect)(() => {
                    let e = "Milestone";
                    (a.milestone &&
                        a.nameWithOwner &&
                        (e = `${a.milestone.title} \xb7 Milestone #${a.milestone.number} \xb7 ${a.nameWithOwner}`),
                        (0, rM.D)(e));
                }, [a.milestone, a.nameWithOwner]),
                a.milestone)
                    ? (0, y.jsx)(oW, {
                          bulkJobId: n,
                          setBulkJobId: s,
                          children: (0, y.jsx)(l$, {
                              contentAs: "div",
                              resizeable: !1,
                              leftPaneWidth: "small",
                              middlePane: (0, y.jsx)("div", {
                                  className: uI.middlePaneWrapper,
                                  children: (0, y.jsxs)(i2.t, {
                                      fallback: (0, y.jsx)(u_, {
                                          title: uF.milestoneError,
                                          message: uF.milestoneErrorMessage,
                                      }),
                                      children: [
                                          (0, y.jsx)(cg, {
                                              repositoryRef: a,
                                              optionConfig: l,
                                          }),
                                          (0, y.jsxs)("div", {
                                              className: uI.middlePaneGrid,
                                              children: [
                                                  (0, y.jsx)(ch, {
                                                      milestoneRef: a.milestone,
                                                  }),
                                                  (0, y.jsx)(i2.t, {
                                                      fallback: (0, y.jsx)(u_, {
                                                          title: uF.milestoneIssuesError,
                                                          message:
                                                              uF.milestoneIssuesErrorMessage,
                                                      }),
                                                      children: (0, y.jsx)(cj, {
                                                          repositoryRef: a,
                                                          singleKeyShortcutsEnabled:
                                                              l?.singleKeyShortcutsEnabled,
                                                      }),
                                                  }),
                                              ],
                                          }),
                                      ],
                                  }),
                              }),
                          }),
                      })
                    : null;
            }
            try {
                (r = ({ queryRef: e }) => {
                    let [l] = (0, aF.useQueryLoader)(ci, e);
                    return l
                        ? (0, y.jsx)(b.Suspense, {
                              fallback: (0, y.jsx)("div", {
                                  children: "Loading...",
                              }),
                              children: (0, y.jsx)(cP, { pageQueryRef: l }),
                          })
                        : null;
                }).displayName || (r.displayName = "RepositoryMilestone");
            } catch {}
            try {
                cP.displayName ||
                    (cP.displayName = "RepositoryMilestoneContent");
            } catch {}
            try {
                cT.displayName ||
                    (cT.displayName = "RepositoryMilestoneInternal");
            } catch {}
            let cA = ({ queries: { pageQuery: e } }) => {
                let { queryRef: l, loadQuery: a } = ll(e, eH);
                return l
                    ? (0, y.jsx)(lt, {
                          category: "Repository Milestone Show",
                          children: (0, y.jsx)(cM, {
                              pageQueryRef: l,
                              loadQuery: a,
                          }),
                      })
                    : null;
            };
            function cM({ pageQueryRef: e }) {
                let l = (0, er.usePreloadedQuery)(eH, e),
                    { setCurrentViewId: a } = eM();
                return ((0, b.useEffect)(() => {
                    a(S.repository);
                }, [e, a]),
                l.repository)
                    ? (0, y.jsx)(cV, { repository: l.repository })
                    : (reportError(
                          Error(
                              `Could not find repository when loading TemplateList for ${A.fV?.href.toString()}`
                          )
                      ),
                      (0, y.jsx)("div", { children: "Repository not found" }));
            }
            function cV({ repository: e }) {
                let l = (0, er.useFragment)(cs, e),
                    { current_user_settings: a } = (0, v.X)(),
                    n = {
                        singleKeyShortcutsEnabled: a.use_single_key_shortcut,
                    };
                return (0, y.jsx)(cT, { repository: l, optionConfig: n });
            }
            try {
                cM.displayName ||
                    (cM.displayName = "RepositoryMilestoneContent");
            } catch {}
            try {
                cV.displayName ||
                    (cV.displayName = "RepositoryMilestonePageContentInternal");
            } catch {}
            let cD = (e, l) => {
                    if (Object.keys(l.pathParams).length > 0) {
                        let a = l.searchParams.get("q"),
                            n = `${a || G.query}`,
                            s = en.query({
                                author: l.pathParams.author,
                                assignee: l.pathParams.assignee,
                                mentioned: l.pathParams.mentioned,
                                label: l.pathParams.label,
                            });
                        ((e.query = n_(s && !a ? `${n} ${s}` : n, {
                            owner: l.pathParams.owner,
                            name: l.pathParams.repo,
                        })),
                            eI(l.searchParams, e),
                            (e.owner = l.pathParams.owner),
                            (e.name = l.pathParams.repo),
                            (e.includeReactions = !!a && nN(a)));
                    }
                    return e;
                },
                cE = {
                    "/:owner/:name/issues/new": (e, l) => {
                        let a = l.searchParams.get("assignees");
                        a && ((e.assigneeLogins = a), (e.withAssignees = !0));
                        let n = l.searchParams.get("labels");
                        n && ((e.labelNames = n), (e.withLabels = !0));
                        let s = l.searchParams.get("milestone");
                        s && ((e.milestoneTitle = s), (e.withMilestone = !0));
                        let i = l.searchParams.get("projects");
                        if (l && i) {
                            let a = ((e, l) =>
                                e && l
                                    ? e
                                          .split(",")
                                          .map((e) => {
                                              let [a, n] = e.split("/");
                                              if (a === l && n) {
                                                  let e = parseInt(n);
                                                  return isNaN(e) || e < 0
                                                      ? void 0
                                                      : e;
                                              }
                                          })
                                          .filter((e) => void 0 !== e)
                                          .splice(0, 20)
                                    : [])(i, l.pathParams.owner);
                            a.length > 0 &&
                                ((e.projectNumbers = a), (e.withProjects = !0));
                        }
                        let t = l.searchParams.get("type");
                        t && ((e.type = t), (e.withType = !0));
                        let r = l.searchParams.get(
                            "created_from_discussion_number"
                        );
                        if (r) {
                            let l = parseInt(r, 10);
                            ((e.discussionNumber = cq(r) ? l : 0),
                                (e.includeDiscussion = cq(r) && !!l));
                        }
                        let o = l.searchParams.get("template");
                        return (
                            o &&
                                ((e.templateFilter = o), (e.withTemplate = !0)),
                            (e.withTriagePermission =
                                e.withType || e.withProjects || !1),
                            e
                        );
                    },
                    "/:owner/:name/issues/new/choose": (e) => e,
                    "/:owner/:repo/issues/created_by/app/:author": (e, l) => {
                        let a = { ...l };
                        return (
                            (a.pathParams = {
                                ...l.pathParams,
                                author: `app/${l.pathParams.author}`,
                            }),
                            cD(e, a)
                        );
                    },
                    "/:owner/:repo/milestone/:number": (e, l) => {
                        ((e.id = G.id),
                            (e.first = dO.issuesPageSize),
                            (e.owner = l.pathParams.owner),
                            (e.name = l.pathParams.repo));
                        let a = l.pathParams.number,
                            n = "1" === l.searchParams.get("closed");
                        e.skip = 0;
                        let s = l.searchParams.get("page");
                        if (
                            (s &&
                                cq(s) &&
                                parseInt(s, 10) > 1 &&
                                (e.skip =
                                    (parseInt(s, 10) - 1) * dO.issuesPageSize),
                            a)
                        ) {
                            let l = parseInt(a, 10);
                            ((e.number = cq(a) ? l : 0),
                                (e.query = `state:${n ? "closed" : "open"} milestone-number:${e.number} archived:false sort:milestone_prio-desc`));
                        }
                        return e;
                    },
                    "/:owner/:repo/milestones": (e, l) => {
                        ((e.owner = l.pathParams.owner),
                            (e.name = l.pathParams.repo),
                            (e.state =
                                "closed" === l.searchParams.get("state")
                                    ? "CLOSED"
                                    : "OPEN"));
                        let a = l.searchParams.get("sort"),
                            n = l.searchParams.get("direction");
                        return (
                            a &&
                                n &&
                                ("due_date" === a &&
                                    (e.orderField = "DUE_DATE"),
                                "completeness" === a &&
                                    (e.orderField = "COMPLETED"),
                                "title" === a &&
                                    (e.orderField = "ALPHABETICAL"),
                                "count" === a && (e.orderField = "ISSUES"),
                                "asc" === n
                                    ? (e.orderDirection = "ASC")
                                    : (e.orderDirection = "DESC")),
                            e
                        );
                    },
                    "/:owner/:repo/milestones/new": (e, l) => (
                        (e.owner = l.pathParams.owner),
                        (e.name = l.pathParams.repo),
                        e
                    ),
                    "/:owner/:repo/milestones/:number/edit": (e, l) => {
                        let a = l.pathParams.number;
                        if (
                            ((e.owner = l.pathParams.owner),
                            (e.name = l.pathParams.repo),
                            a)
                        ) {
                            let l = parseInt(a, 10);
                            e.number = cq(a) ? l : 0;
                        }
                        return e;
                    },
                    "/:owner/:repo/labels": (e, l) => {
                        ((e.owner = l.pathParams.owner),
                            (e.name = l.pathParams.repo),
                            (e.first = dy.labelsPageSize),
                            (e.skip = 0));
                        let a = l.searchParams.get("page");
                        a &&
                            cq(a) &&
                            parseInt(a, 10) > 1 &&
                            (e.skip =
                                (parseInt(a, 10) - 1) * dy.labelsPageSize);
                        let n = l.searchParams.get("sort");
                        if (n) {
                            let [l, a] = n.split("-");
                            "name" === l
                                ? ((e.orderField = "NAME"),
                                  (e.orderDirection =
                                      "asc" === a ? "ASC" : "DESC"))
                                : "count" === l &&
                                  ((e.orderField = "ISSUE_COUNT"),
                                  (e.orderDirection =
                                      "asc" === a ? "ASC" : "DESC"));
                        }
                        let s = l.searchParams.get("q");
                        return (s && (e.query = nx(s)), e);
                    },
                    "/:owner/:repo/labels/:label": (e, l) => {
                        if (Object.keys(l.pathParams).length > 0) {
                            let a = l.searchParams.get("q"),
                                n = eN(L.open, [l.pathParams.label], "label");
                            ((e.query = n_(a?.trim() || n, {
                                owner: l.pathParams.owner,
                                name: l.pathParams.repo,
                            })),
                                eI(l.searchParams, e),
                                (e.owner = l.pathParams.owner),
                                (e.name = l.pathParams.repo),
                                (e.includeReactions = !1));
                        }
                        return e;
                    },
                    "/:owner/:repo/issues": cD,
                    "/:owner/:repo/issues/created_by/:author": cD,
                    "/:owner/:repo/issues/assigned/:assignee": cD,
                    "/:owner/:repo/issues/mentioned/:mentioned": cD,
                    "/issues/:id": (e, l, a) => {
                        let n;
                        if ((l && (n = l.pathParams.id), n && a)) {
                            let s = l.searchParams.get("q"),
                                i = a.getStore().getSource().get(n);
                            i &&
                                (s
                                    ? ((e.query = nx(s)),
                                      (e.includeReactions = nN(s)))
                                    : i.query &&
                                      ((e.query = nx(`${i.query}`)),
                                      (e.includeReactions = nN(`${i.query}`))));
                        }
                        return (eI(l.searchParams, e), e);
                    },
                    "/:owner/:repo/issues/:number": (e, l) => {
                        ((e.id = G.id), (e.count = 15));
                        let a = l.searchParams.get("timeline_page");
                        if (a && cq(a)) {
                            let l = parseInt(a, 10);
                            l > 0 &&
                                ((e.skip = 15 + (l - 1) * 150),
                                (e.count = 150));
                        }
                        return e;
                    },
                    "/issues": (e, l) => {
                        let a = l.searchParams.get("q");
                        return (
                            a &&
                                ((e.query = nx(a)),
                                (e.includeReactions = nN(a))),
                            eI(l.searchParams, e),
                            e
                        );
                    },
                    "/issues/assigned": (e, l) => {
                        let a = l.searchParams.get("q");
                        return (
                            (e.query = a ? nx(a) : L.assignedToMe),
                            eI(l.searchParams, e),
                            e
                        );
                    },
                    "/issues/mentioned": (e, l) => {
                        let a = l.searchParams.get("q");
                        return (
                            (e.query = a ? nx(a) : L.mentioned),
                            eI(l.searchParams, e),
                            e
                        );
                    },
                    "/issues/recent": (e, l) => (
                        (e.query = nx(
                            l.searchParams.get("q") || L.recentActivity
                        )),
                        eI(l.searchParams, e),
                        e
                    ),
                    "/issues/created": (e, l) => {
                        let a = l.searchParams.get("q");
                        return (
                            (e.query = a ? nx(a) : L.createdByMe),
                            eI(l.searchParams, e),
                            e
                        );
                    },
                },
                cq = (e) => /^\s*-?\d+\s*$/.test(e),
                cO = [
                    d.A.params.name,
                    o.A.params.name,
                    c.params.name,
                    u.A.params.name,
                ],
                cB = (e) => {
                    (e?.persistedQueryName &&
                        cO.includes(e?.persistedQueryName) &&
                        "SAML error" === e.errorMessage) ||
                        c$();
                },
                c$ = () => {
                    let e = ["reload", "1"],
                        l = new URL(
                            window.location.href,
                            window.location.origin
                        );
                    l.searchParams.has(...e) ||
                        (l.searchParams.set(...e), window.location.assign(l));
                };
            (0, m.o)("issues-react", () => {
                let e = (0, g.E7)();
                (((e) => {
                    let l = {};
                    for (let e of [ee, el, Z, ...es])
                        l[e.id] = {
                            __typename: "KnownShortcut",
                            __id: e.id,
                            ...e,
                        };
                    for (let e of [
                        "client:__type:KnownShortcut",
                        "client:__type:TeamSearchShortcut",
                        "client:__type:SearchShortcut",
                    ])
                        l[e] = {
                            __typename: "__TypeSchema",
                            __id: e,
                            __isShortcutable: !0,
                        };
                    e.getStore().publish(new eG.RecordSource(l));
                })(e),
                    (function ({ environment: e }) {
                        (0, g.SD)({
                            environment: e,
                            query: eW,
                            variables: { ids: z },
                        }).subscribe({});
                    })({ environment: e }));
                let l = { 404: { AUTHENTICATION: c$ }, 200: { FORBIDDEN: cB } },
                    a = {
                        componentLoader: async () => {
                            throw Error("This method should not be called");
                        },
                        fallback: "",
                        relayEnvironment: e,
                    };
                return {
                    App: eD,
                    routes: [
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:name/issues/new",
                            resourceName: "IssueRepoNew",
                            title: "New Issue",
                            Component: lA,
                            transformVariables: cE["/:owner/:name/issues/new"],
                            queryConfigs: {
                                pageQuery: {
                                    concreteRequest: eZ,
                                    variableMappers: (e) => ({
                                        owner: e.pathParams.owner,
                                        name: e.pathParams.name,
                                    }),
                                },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:name/issues/new/choose",
                            resourceName: "IssueRepoNewChoose",
                            title: "Choose an Issue Template",
                            Component: lo,
                            transformVariables:
                                cE["/:owner/:name/issues/new/choose"],
                            queryConfigs: {
                                pageQuery: {
                                    concreteRequest: eX,
                                    variableMappers: (e) => ({
                                        owner: e.pathParams.owner,
                                        name: e.pathParams.name,
                                    }),
                                },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/issues/assigned",
                            resourceName: "ClientSideView",
                            title: "Assigned to me",
                            Component: oO,
                            transitionType: "transition-while-fetch",
                            transformVariables: cE["/issues/assigned"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eB },
                                customViewsQuery: { concreteRequest: eE },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/issues/mentioned",
                            resourceName: "ClientSideView",
                            title: "Mentioned",
                            Component: oO,
                            transitionType: "transition-while-fetch",
                            transformVariables: cE["/issues/mentioned"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eB },
                                customViewsQuery: { concreteRequest: eE },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/issues/created",
                            resourceName: "ClientSideView",
                            title: "Created by me",
                            Component: oO,
                            transitionType: "transition-while-fetch",
                            transformVariables: cE["/issues/created"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eB },
                                customViewsQuery: { concreteRequest: eE },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/issues/recent",
                            resourceName: "ClientSideView",
                            title: "Recent Activity",
                            Component: oO,
                            transitionType: "transition-while-fetch",
                            transformVariables: cE["/issues/recent"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eB },
                                customViewsQuery: { concreteRequest: eE },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/issues/:number",
                            resourceName: "IssueShow",
                            title: "Issue",
                            Component: up,
                            transformVariables:
                                cE["/:owner/:repo/issues/:number"],
                            queryConfigs: {
                                issueViewerViewQuery: {
                                    concreteRequest: u.A,
                                    variableMappers: (e) => ({
                                        owner: e.pathParams.owner,
                                        repo: e.pathParams.repo,
                                        number: e.pathParams.number
                                            ? parseInt(e.pathParams.number)
                                            : void 0,
                                    }),
                                },
                            },
                            maxAge: 10,
                            errorCallbacks: l,
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/issues",
                            resourceName: "IssueRepoIndex",
                            title: "Repo Issues",
                            Component: ur,
                            transformVariables: cE["/:owner/:repo/issues"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eQ },
                            },
                            errorCallbacks: l,
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/issues/:id",
                            resourceName: "View",
                            title: "View",
                            Component: ow,
                            transitionType: "transition-while-fetch",
                            transformVariables: cE["/issues/:id"],
                            queryConfigs: {
                                currentViewQuery: {
                                    concreteRequest: eq,
                                    variableMappers: (e) => ({
                                        id: e.pathParams.id,
                                    }),
                                },
                                pageQuery: { concreteRequest: eO },
                                customViewsQuery: { concreteRequest: eE },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/issues",
                            resourceName: "IssuesIndex",
                            title: "Issues",
                            Component: o$,
                            transformVariables: cE["/issues"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: e$ },
                                customViewsQuery: { concreteRequest: eE },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/issues/created_by/:author",
                            resourceName: "IssueRepoIndex",
                            title: "Repo Issues",
                            Component: ur,
                            transformVariables:
                                cE["/:owner/:repo/issues/created_by/:author"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eQ },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/issues/created_by/app/:author",
                            resourceName: "IssueRepoIndex",
                            title: "Repo Issues",
                            Component: ur,
                            transformVariables:
                                cE[
                                    "/:owner/:repo/issues/created_by/app/:author"
                                ],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eQ },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/issues/assigned/:assignee",
                            resourceName: "IssueRepoIndex",
                            title: "Repo Issues",
                            Component: ur,
                            transformVariables:
                                cE["/:owner/:repo/issues/assigned/:assignee"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eQ },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/milestone/:number",
                            resourceName: "RepoMilestoneShow",
                            title: "",
                            Component: cA,
                            transformVariables:
                                cE["/:owner/:repo/milestone/:number"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eH },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/milestones",
                            resourceName: "RepoMilestoneIndex",
                            title: "Milestone Index",
                            Component: cl,
                            transformVariables: cE["/:owner/:repo/milestones"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: ez },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/milestones/new",
                            resourceName: "RepoMilestoneNew",
                            title: "New Milestone",
                            Component: uO,
                            transformVariables:
                                cE["/:owner/:repo/milestones/new"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: uM },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/milestones/:number/edit",
                            resourceName: "RepoMilestoneEdit",
                            title: "Edit Milestone",
                            Component: uP,
                            transformVariables:
                                cE["/:owner/:repo/milestones/:number/edit"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: uy },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/labels",
                            resourceName: "RepoLabelsIndex",
                            title: "Labels Index",
                            Component: dT,
                            transformVariables: cE["/:owner/:repo/labels"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eU },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/issues/labels",
                            resourceName: "RepoLabelsIndex",
                            title: "Labels Index",
                            Component: dT,
                            transformVariables: cE["/:owner/:repo/labels"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eU },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/issues/mentioned/:mentioned",
                            resourceName: "IssueRepoIndex",
                            title: "Repo Issues",
                            Component: ur,
                            transformVariables:
                                cE["/:owner/:repo/issues/mentioned/:mentioned"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eQ },
                            },
                        }),
                        (0, p.X)({
                            ...a,
                            path: "/:owner/:repo/labels/:label",
                            transformVariables:
                                cE["/:owner/:repo/labels/:label"],
                            resourceName: "IssueLabelIndex",
                            title: "Label Issues",
                            Component: ur,
                            queryConfigs: {
                                pageQuery: { concreteRequest: eQ },
                            },
                        }),
                    ],
                };
            });
        },
        90434: (e, l, a) => {
            a.d(l, { L: () => d });
            var n = a(74848),
                s = a(81945),
                i = a(29731),
                t = a(98552),
                r = a(67955),
                o = a(34164);
            let u = {
                    container: "SectionFilterLink-module__container--tSSWO",
                    selected: "SectionFilterLink-module__selected--wtR_6",
                    count: "SectionFilterLink-module__count--Ljtnf",
                    loading: "SectionFilterLink-module__loading--bYMSw",
                    counterLabelSkeleton:
                        "SectionFilterLink-module__counterLabelSkeleton--xhhE2",
                    title: "SectionFilterLink-module__title--DmKmf",
                },
                d = ({
                    href: e,
                    title: l,
                    count: a,
                    isSelected: d = !1,
                    isLoading: c = !1,
                    className: m,
                    ...g
                }) =>
                    (0, n.jsxs)(t.A, {
                        as: "a",
                        href: e,
                        className: (0, o.$)(u.container, d && u.selected, m),
                        ...(0, i.G)("list-view-section-filter-link"),
                        "aria-current": d ? "true" : void 0,
                        ...g,
                        children: [
                            (0, n.jsx)("div", {
                                className: u.title,
                                children: l,
                            }),
                            void 0 !== a &&
                                (0, n.jsx)(r.A, {
                                    className: (0, o.$)(
                                        u.count,
                                        c && u.loading
                                    ),
                                    children: a,
                                }),
                            void 0 === a &&
                                c &&
                                (0, n.jsx)(s.O, {
                                    variant: "pill",
                                    height: "18px",
                                    width: "32px",
                                    className: u.counterLabelSkeleton,
                                }),
                        ],
                    });
            try {
                d.displayName || (d.displayName = "ListViewSectionFilterLink");
            } catch {}
        },
        99896: (e, l, a) => {
            a.d(l, { xC: () => K, B6: () => x, ym: () => j });
            var n = a(74848),
                s = a(21728),
                i = a(38621),
                t = a(87448),
                r = a(55255),
                o = a(10436),
                u = a(96540),
                d = a(34164),
                c = a(69726),
                m = a(15220),
                g = a(77430),
                p = a(57352),
                y = a(11196);
            let k = {
                Box: "CheckRunItem-module__Box--LZ7kH",
                Box_1: "CheckRunItem-module__Box_1--uqwhY",
                Link: "CheckRunItem-module__Link--sKVjI",
                Text: "CheckRunItem-module__Text--yCiXY",
                Text_1: "CheckRunItem-module__Text_1--byPUg",
                Text_2: "CheckRunItem-module__Text_2--JMqoY",
                Link_1: "CheckRunItem-module__Link_1--i579_",
                Box_2: "CheckRunItem-module__Box_2--Ht42S",
            };
            function h(e) {
                let l,
                    a,
                    t,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    h,
                    b,
                    f,
                    C,
                    F = (0, s.c)(37),
                    { checkRun: S } = e;
                F[0] !== S.icon
                    ? ((l = (function (e) {
                          switch (e) {
                              case "check":
                                  return (0, n.jsx)(i.CheckIcon, {
                                      className:
                                          "fgColor-success my-0 mx-2 flex-self-center",
                                  });
                              case "dot-fill":
                                  return (0, n.jsx)(i.DotFillIcon, {
                                      className:
                                          "fgColor-attention my-0 mx-2 flex-self-center",
                                  });
                              case "stop":
                                  return (0, n.jsx)(i.StopIcon, {
                                      className:
                                          "fgColor-muted my-0 mx-2 flex-self-center",
                                  });
                              case "issue-reopened":
                                  return (0, n.jsx)(i.IssueReopenedIcon, {
                                      className:
                                          "fgColor-muted my-0 mx-2 flex-self-center",
                                  });
                              case "clock":
                                  return (0, n.jsx)(i.ClockIcon, {
                                      className:
                                          "fgColor-attention my-0 mx-2 flex-self-center",
                                  });
                              case "square-fill":
                                  return (0, n.jsx)(i.SquareFillIcon, {
                                      className:
                                          "fgColor-default my-0 mx-2 flex-self-center",
                                  });
                              case "skip":
                                  return (0, n.jsx)(i.SkipIcon, {
                                      className:
                                          "fgColor-muted my-0 mx-2 flex-self-center",
                                  });
                              case "alert":
                                  return (0, n.jsx)(i.AlertIcon, {
                                      className:
                                          "fgColor-danger my-0 mx-2 flex-self-center",
                                  });
                              default:
                                  return (0, n.jsx)(i.XIcon, {
                                      className:
                                          "fgColor-danger my-0 mx-2 flex-self-center",
                                  });
                          }
                      })(S.icon)),
                      (F[0] = S.icon),
                      (F[1] = l))
                    : (l = F[1]);
                let L = l,
                    K = "in_progress" === S.state;
                return (
                    F[2] !== L || F[3] !== K
                        ? ((a = K
                              ? (0, n.jsx)("div", {
                                    className: k.Box_2,
                                    children: (0, n.jsxs)("svg", {
                                        fill: "none",
                                        viewBox: "0 0 16 16",
                                        className: "anim-rotate",
                                        "aria-hidden": "true",
                                        role: "img",
                                        children: [
                                            (0, n.jsx)("path", {
                                                opacity: ".5",
                                                d: "M8 15A7 7 0 108 1a7 7 0 000 14v0z",
                                                stroke: "#dbab0a",
                                                strokeWidth: "2",
                                            }),
                                            (0, n.jsx)("path", {
                                                d: "M15 8a7 7 0 01-7 7",
                                                stroke: "#dbab0a",
                                                strokeWidth: "2",
                                            }),
                                            (0, n.jsx)("path", {
                                                d: "M8 12a4 4 0 100-8 4 4 0 000 8z",
                                                fill: "#dbab0a",
                                            }),
                                        ],
                                    }),
                                })
                              : (0, n.jsx)(n.Fragment, { children: L })),
                          (F[2] = L),
                          (F[3] = K),
                          (F[4] = a))
                        : (a = F[4]),
                    F[5] !== S.avatarBackgroundColor
                        ? ((t = { backgroundColor: S.avatarBackgroundColor }),
                          (F[5] = S.avatarBackgroundColor),
                          (F[6] = t))
                        : (t = F[6]),
                    F[7] !== S.avatarLogo || F[8] !== t
                        ? ((r = (0, n.jsx)(g.r, {
                              square: !0,
                              src: S.avatarLogo,
                              sx: t,
                          })),
                          (F[7] = S.avatarLogo),
                          (F[8] = t),
                          (F[9] = r))
                        : (r = F[9]),
                    F[10] !== S.avatarUrl || F[11] !== r
                        ? ((o = (0, n.jsx)(p.A, {
                              href: S.avatarUrl,
                              "aria-label": "Avatar",
                              className: k.Link,
                              children: r,
                          })),
                          (F[10] = S.avatarUrl),
                          (F[11] = r),
                          (F[12] = o))
                        : (o = F[12]),
                    F[13] !== S.avatarDescription || F[14] !== o
                        ? ((u = (0, n.jsx)(y.m, {
                              text: S.avatarDescription,
                              direction: "e",
                              children: o,
                          })),
                          (F[13] = S.avatarDescription),
                          (F[14] = o),
                          (F[15] = u))
                        : (u = F[15]),
                    F[16] !== a || F[17] !== u
                        ? ((d = (0, n.jsxs)("div", {
                              className: k.Box_1,
                              children: [a, u],
                          })),
                          (F[16] = a),
                          (F[17] = u),
                          (F[18] = d))
                        : (d = F[18]),
                    F[19] !== S.name
                        ? ((c = (0, n.jsxs)("span", {
                              className: k.Text_1,
                              children: [S.name, " "],
                          })),
                          (F[19] = S.name),
                          (F[20] = c))
                        : (c = F[20]),
                    F[21] !== S.additionalContext || F[22] !== S.pending
                        ? ((m = S.pending
                              ? (0, n.jsx)("span", {
                                    className: k.Text_2,
                                    children: S.additionalContext,
                                })
                              : S.additionalContext),
                          (F[21] = S.additionalContext),
                          (F[22] = S.pending),
                          (F[23] = m))
                        : (m = F[23]),
                    F[24] !== S.description || F[25] !== S.pending
                        ? ((h =
                              S.description &&
                              (0, n.jsxs)("span", {
                                  children: [
                                      " ",
                                      "- ",
                                      S.pending
                                          ? (0, n.jsx)("span", {
                                                className: k.Text_2,
                                                children: S.description,
                                            })
                                          : S.description,
                                  ],
                              })),
                          (F[24] = S.description),
                          (F[25] = S.pending),
                          (F[26] = h))
                        : (h = F[26]),
                    F[27] !== h || F[28] !== c || F[29] !== m
                        ? ((b = (0, n.jsxs)("span", {
                              className: k.Text,
                              children: [c, m, h],
                          })),
                          (F[27] = h),
                          (F[28] = c),
                          (F[29] = m),
                          (F[30] = b))
                        : (b = F[30]),
                    F[31] !== S.targetUrl
                        ? ((f = (0, n.jsx)(p.A, {
                              href: S.targetUrl,
                              className: k.Link_1,
                              children: "Details",
                          })),
                          (F[31] = S.targetUrl),
                          (F[32] = f))
                        : (f = F[32]),
                    F[33] !== b || F[34] !== f || F[35] !== d
                        ? ((C = (0, n.jsxs)("li", {
                              "data-testid": "check-run-item",
                              className: k.Box,
                              children: [d, b, f],
                          })),
                          (F[33] = b),
                          (F[34] = f),
                          (F[35] = d),
                          (F[36] = C))
                        : (C = F[36]),
                    C
                );
            }
            try {
                h.displayName || (h.displayName = "CheckRunItem");
            } catch {}
            let b = { Box: "ChecksStatusBadgeFooter-module__Box--A9a95" };
            function f(e) {
                let l,
                    a,
                    i = (0, s.c)(4),
                    { checkRuns: t } = e;
                return (
                    i[0] !== t
                        ? ((l = t.map(C)), (i[0] = t), (i[1] = l))
                        : (l = i[1]),
                    i[2] !== l
                        ? ((a = (0, n.jsx)("ul", {
                              className: b.Box,
                              children: l,
                          })),
                          (i[2] = l),
                          (i[3] = a))
                        : (a = i[3]),
                    a
                );
            }
            function C(e, l) {
                return (0, n.jsx)(h, { checkRun: e }, l);
            }
            try {
                f.displayName || (f.displayName = "ChecksStatusBadgeFooter");
            } catch {}
            let F = {
                Text: "ChecksStatusBadgeHeader-module__Text--mNbul",
                Text_1: "ChecksStatusBadgeHeader-module__Text_1--Ccfb0",
                Text_2: "ChecksStatusBadgeHeader-module__Text_2--d8Yn7",
            };
            function S(e) {
                let l = (0, s.c)(4),
                    { checksHeaderState: a } = e;
                switch (a) {
                    case "SUCCEEDED": {
                        let e;
                        return (
                            l[0] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = (0, n.jsx)("span", {
                                      className: F.Text,
                                      children: "All checks have passed",
                                  })),
                                  (l[0] = e))
                                : (e = l[0]),
                            e
                        );
                    }
                    case "FAILED": {
                        let e;
                        return (
                            l[1] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = (0, n.jsx)("span", {
                                      className: F.Text_1,
                                      children: "All checks have failed",
                                  })),
                                  (l[1] = e))
                                : (e = l[1]),
                            e
                        );
                    }
                    case "PENDING": {
                        let e;
                        return (
                            l[2] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = (0, n.jsx)("span", {
                                      className: F.Text_2,
                                      children:
                                          "Some checks haven\u2019t completed yet",
                                  })),
                                  (l[2] = e))
                                : (e = l[2]),
                            e
                        );
                    }
                    default: {
                        let e;
                        return (
                            l[3] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = (0, n.jsx)("span", {
                                      className: F.Text_1,
                                      children:
                                          "Some checks were not successful",
                                  })),
                                  (l[3] = e))
                                : (e = l[3]),
                            e
                        );
                    }
                }
            }
            try {
                S.displayName || (S.displayName = "HeaderState");
            } catch {}
            let L = {
                Dialog: "CheckStatusDialog-module__Dialog--k1EnR",
                Dialog_Body: "CheckStatusDialog-module__Dialog_Body--sRD_i",
                Box: "CheckStatusDialog-module__Box--uYuTX",
            };
            function K(e) {
                let l,
                    a,
                    i = (0, s.c)(7),
                    { combinedStatus: t, isOpen: r, onDismiss: o } = e;
                i[0] !== t
                    ? ((l = t
                          ? (0, n.jsx)(S, {
                                checksHeaderState: t.checksHeaderState,
                            })
                          : "Loading..."),
                      (i[0] = t),
                      (i[1] = l))
                    : (l = i[1]);
                let u = l;
                return (
                    i[2] !== t || i[3] !== r || i[4] !== o || i[5] !== u
                        ? ((a = r
                              ? (0, n.jsx)(m.l, {
                                    onClose: o,
                                    title: u,
                                    subtitle: t
                                        ? t.checksStatusSummary
                                        : void 0,
                                    width: "xlarge",
                                    renderBody: () =>
                                        (0, n.jsx)(m.l.Body, {
                                            className: L.Dialog_Body,
                                            children: t
                                                ? (0, n.jsx)(f, {
                                                      checkRuns: t.checkRuns,
                                                  })
                                                : (0, n.jsx)("div", {
                                                      className: L.Box,
                                                      children: (0, n.jsx)(
                                                          c.A,
                                                          { size: "medium" }
                                                      ),
                                                  }),
                                        }),
                                    className: L.Dialog,
                                })
                              : null),
                          (i[2] = t),
                          (i[3] = r),
                          (i[4] = o),
                          (i[5] = u),
                          (i[6] = a))
                        : (a = i[6]),
                    a
                );
            }
            try {
                K.displayName || (K.displayName = "CheckStatusDialog");
            } catch {}
            let v = {
                    ChecksStatusBadgeButton:
                        "ChecksStatusBadge-module__ChecksStatusBadgeButton--rZYKL",
                    ChecksStatusBadgeIconButton:
                        "ChecksStatusBadge-module__ChecksStatusBadgeIconButton--rpD4z",
                },
                I = {
                    success: {
                        circled: i.CheckCircleIcon,
                        filled: i.CheckCircleFillIcon,
                        default: i.CheckIcon,
                        color: "var(--bgColor-success-emphasis, var(--color-success-emphasis))",
                    },
                    pending: {
                        circled: i.CircleIcon,
                        filled: i.DotFillIcon,
                        default: i.DotFillIcon,
                        color: "var(--bgColor-attention-emphasis, var(--color-scale-yellow-4))",
                    },
                    failure: {
                        circled: i.XCircleIcon,
                        filled: i.XCircleFillIcon,
                        default: i.XIcon,
                        color: "var(--bgColor-danger-emphasis, var(--color-scale-red-4))",
                    },
                    error: {
                        circled: i.QuestionIcon,
                        filled: i.QuestionIcon,
                        default: i.QuestionIcon,
                        color: "var(--fgColor-muted, var(--color-canvas-subtle))",
                    },
                };
            function _(e) {
                let l,
                    a,
                    i,
                    t,
                    c,
                    m = (0, s.c)(19),
                    {
                        className: g,
                        descriptionText: p,
                        icon: y,
                        iconColor: k,
                        tooltipText: h,
                    } = e,
                    b = (0, u.useId)(),
                    f = h ? b : void 0,
                    C = h ? void 0 : p || "See all checks";
                (m[0] !== k
                    ? ((l = { color: k }), (m[0] = k), (m[1] = l))
                    : (l = m[1]),
                    m[2] !== y || m[3] !== f || m[4] !== C || m[5] !== l
                        ? ((a = (0, n.jsx)(o.m4, {
                              "aria-labelledby": f,
                              icon: y,
                              "aria-label": C,
                              sx: l,
                          })),
                          (m[2] = y),
                          (m[3] = f),
                          (m[4] = C),
                          (m[5] = l),
                          (m[6] = a))
                        : (a = m[6]));
                let F = a;
                if (h) {
                    let e;
                    (m[7] !== F || m[8] !== b || m[9] !== h
                        ? ((e = (0, n.jsx)(r.A, {
                              id: b,
                              "aria-label": h,
                              direction: "e",
                              children: F,
                          })),
                          (m[7] = F),
                          (m[8] = b),
                          (m[9] = h),
                          (m[10] = e))
                        : (e = m[10]),
                        (F = e));
                }
                return (
                    m[11] !== g
                        ? ((i = (0, d.$)(g, "d-flex flex-items-center gap-1")),
                          (m[11] = g),
                          (m[12] = i))
                        : (i = m[12]),
                    m[13] !== p
                        ? ((t =
                              p && (0, n.jsxs)("span", { children: [" ", p] })),
                          (m[13] = p),
                          (m[14] = t))
                        : (t = m[14]),
                    m[15] !== F || m[16] !== i || m[17] !== t
                        ? ((c = (0, n.jsxs)("span", {
                              className: i,
                              "data-testid": "checks-status-badge-icon-only",
                              children: [F, t],
                          })),
                          (m[15] = F),
                          (m[16] = i),
                          (m[17] = t),
                          (m[18] = c))
                        : (c = m[18]),
                    c
                );
            }
            function x(e) {
                let l,
                    a,
                    i,
                    r,
                    o = (0, s.c)(27),
                    {
                        statusRollup: c,
                        combinedStatus: m,
                        variant: g,
                        disablePopover: p,
                        buttonClassName: y,
                        buttonSx: k,
                        size: h,
                        descriptionText: b,
                        onWillOpenPopup: f,
                    } = e,
                    C = void 0 === g ? "default" : g,
                    F = void 0 === h ? "medium" : h,
                    S = void 0 === b ? "" : b,
                    [L, x] = (0, u.useState)(!1),
                    w = (0, u.useRef)(null),
                    N = I[c],
                    j = N?.[C] || I.error[C],
                    R = N?.color || I.error.color;
                o[0] !== j || o[1] !== R
                    ? ((l = { icon: j, iconColor: R }),
                      (o[0] = j),
                      (o[1] = R),
                      (o[2] = l))
                    : (l = o[2]);
                let { icon: P, iconColor: T } = l;
                if ("error" === c) {
                    let e,
                        l = p ? void 0 : "p-1";
                    return (
                        o[3] !== P || o[4] !== T || o[5] !== l
                            ? ((e = (0, n.jsx)(_, {
                                  className: l,
                                  descriptionText: "?/?",
                                  icon: P,
                                  iconColor: T,
                                  tooltipText:
                                      "There was an error retrieving checks status",
                              })),
                              (o[3] = P),
                              (o[4] = T),
                              (o[5] = l),
                              (o[6] = e))
                            : (e = o[6]),
                        e
                    );
                }
                if (p) {
                    let e;
                    return (
                        o[7] !== S || o[8] !== P || o[9] !== T
                            ? ((e = (0, n.jsx)(_, {
                                  descriptionText: S,
                                  icon: P,
                                  iconColor: T,
                              })),
                              (o[7] = S),
                              (o[8] = P),
                              (o[9] = T),
                              (o[10] = e))
                            : (e = o[10]),
                        e
                    );
                }
                return (
                    o[11] !== y ||
                    o[12] !== k ||
                    o[13] !== m?.checksStatusSummary ||
                    o[14] !== S ||
                    o[15] !== f ||
                    o[16] !== P ||
                    o[17] !== T ||
                    o[18] !== F ||
                    o[19] !== c
                        ? ((a = S
                              ? (0, n.jsx)(t.$n, {
                                    "data-testid": "checks-status-badge-button",
                                    leadingVisual: P,
                                    variant: "invisible",
                                    size: F,
                                    "aria-label":
                                        m?.checksStatusSummary ??
                                        `Status checks: ${c}`,
                                    sx: { svg: { color: T }, ...k },
                                    ref: w,
                                    onClick: () => {
                                        (f?.(), x(!0));
                                    },
                                    className: (0, d.$)(
                                        v.ChecksStatusBadgeButton,
                                        y
                                    ),
                                    children: S,
                                })
                              : (0, n.jsx)(t.K0, {
                                    "data-testid": "checks-status-badge-icon",
                                    tooltipDirection: "s",
                                    icon: P,
                                    variant: "invisible",
                                    size: F,
                                    "aria-label": m?.checksStatusSummary ?? c,
                                    sx: { svg: { color: T }, ...k },
                                    className: (0, d.$)(
                                        v.ChecksStatusBadgeIconButton,
                                        y
                                    ),
                                    ref: w,
                                    onClick: () => {
                                        (f?.(), x(!0));
                                    },
                                })),
                          (o[11] = y),
                          (o[12] = k),
                          (o[13] = m?.checksStatusSummary),
                          (o[14] = S),
                          (o[15] = f),
                          (o[16] = P),
                          (o[17] = T),
                          (o[18] = F),
                          (o[19] = c),
                          (o[20] = a))
                        : (a = o[20]),
                    o[21] !== m || o[22] !== L
                        ? ((i =
                              L &&
                              (0, n.jsx)(K, {
                                  combinedStatus: m,
                                  isOpen: L,
                                  onDismiss: () => {
                                      (x(!1),
                                          setTimeout(() => {
                                              w.current?.focus();
                                          }, 0));
                                  },
                              })),
                          (o[21] = m),
                          (o[22] = L),
                          (o[23] = i))
                        : (i = o[23]),
                    o[24] !== a || o[25] !== i
                        ? ((r = (0, n.jsxs)(n.Fragment, { children: [a, i] })),
                          (o[24] = a),
                          (o[25] = i),
                          (o[26] = r))
                        : (r = o[26]),
                    r
                );
            }
            try {
                _.displayName || (_.displayName = "IconOnlyStatus");
            } catch {}
            try {
                x.displayName || (x.displayName = "ChecksStatusBadge");
            } catch {}
            var w = a(25407),
                N = a(96379);
            function j(e, l) {
                let a,
                    n,
                    i = (0, s.c)(7),
                    [t, r] = (0, u.useState)(),
                    [o, d] = (0, u.useState)();
                i[0] !== e || i[1] !== o || i[2] !== l
                    ? ((a = async () => {
                          if (o !== e && (d(e), r(void 0), e)) {
                              let a = (0, w.vki)(l, e),
                                  n = await (0, N.lS)(a);
                              r(await n.json());
                          }
                      }),
                      (i[0] = e),
                      (i[1] = o),
                      (i[2] = l),
                      (i[3] = a))
                    : (a = i[3]);
                let c = a;
                return (
                    i[4] !== t || i[5] !== c
                        ? ((n = [t, c]), (i[4] = t), (i[5] = c), (i[6] = n))
                        : (n = i[6]),
                    n
                );
            }
        },
    },
    (e) => {
        (e.O(
            0,
            [
                "primer-react",
                "react-lib",
                "react-core",
                "octicons-react",
                "vendors-node_modules_primer_behaviors_dist_esm_index_mjs",
                "vendors-node_modules_oddbird_popover-polyfill_dist_popover-fn_js",
                "vendors-node_modules_stacktrace-parser_dist_stack-trace-parser_esm_js-node_modules_github_bro-2f4e04",
                "vendors-node_modules_emotion_is-prop-valid_dist_emotion-is-prop-valid_esm_js-node_modules_emo-825c28",
                "vendors-node_modules_github_mini-throttle_dist_index_js-node_modules_github_hydro-analytics-c-c228f9",
                "vendors-node_modules_tanstack_query-core_build_modern_mutation_js-node_modules_tanstack_query-9bf7e4",
                "vendors-node_modules_swc_helpers_esm__class_private_method_get_js-node_modules_swc_helpers_es-d6b1a6",
                "vendors-node_modules_dompurify_dist_purify_es_mjs",
                "vendors-node_modules_tanstack_query-core_build_modern_queryObserver_js-node_modules_tanstack_-defd52",
                "vendors-node_modules_date-fns_format_mjs",
                "vendors-node_modules_lodash-es__Stack_js-node_modules_lodash-es__Uint8Array_js-node_modules_l-4faaa6",
                "vendors-node_modules_date-fns_addWeeks_mjs-node_modules_date-fns_addYears_mjs-node_modules_da-827f4f",
                "vendors-node_modules_github_relative-time-element_dist_index_js",
                "vendors-node_modules_github_hotkey_dist_index_js-node_modules_date-fns_getDaysInMonth_mjs-nod-70c11b",
                "vendors-node_modules_github_hydro-analytics-client_dist_analytics-client_js-node_modules_gith-c7919d",
                "vendors-node_modules_dnd-kit_modifiers_dist_modifiers_esm_js-node_modules_dnd-kit_sortable_di-5ada6e",
                "vendors-node_modules_braintree_browser-detection_dist_browser-detection_js-node_modules_githu-bb80ec",
                "vendors-node_modules_tanstack_react-virtual_dist_esm_index_js",
                "vendors-node_modules_lodash-es_cloneDeep_js",
                "vendors-node_modules_react-relay_index_js",
                "vendors-node_modules_comma-separated-tokens_index_js-node_modules_mdast-util-from-markdown_li-6db53e",
                "vendors-node_modules_hastscript_lib_index_js-node_modules_mdast-util-gfm_lib_index_js-node_mo-2895d2",
                "vendors-node_modules_github_mini-throttle_dist_decorators_js-node_modules_accname_dist_access-690142",
                "vendors-node_modules_codemirror_language_dist_index_js",
                "vendors-node_modules_codemirror_commands_dist_index_js",
                "vendors-node_modules_fzy_js_index_js-node_modules_github_g-emoji-element_dist_index_js-node_m-b54f2c",
                "vendors-node_modules_tanstack_react-query_build_modern_queryOptions_js-node_modules_marked_li-65af4e",
                "vendors-node_modules_github_quote-selection_dist_index_js-node_modules_react-relay_hooks_js-n-8b21cb",
                "packages_paths_index_ts",
                "packages_ui-commands_ui-commands_ts",
                "packages_date-picker_components_DatePicker_tsx",
                "packages_drag-and-drop_drag-and-drop_ts-packages_hydro-analytics_hydro-analytics_ts",
                "packages_list-view_src_hooks_use-next-header-tag_ts-packages_list-view_src_ListItem_ListItem_-055669",
                "packages_ref-selector_RefSelector_tsx",
                "packages_filter_utils_index_ts-packages_fuzzy-score_fuzzy-score_ts-packages_use-analytics_use-efa20b",
                "packages_copilot-chat_utils_copilot-local-storage_ts",
                "packages_filter_Filter_tsx",
                "packages_filter_providers_index_ts",
                "packages_copilot-chat_components_tracing_TraceProvider_tsx",
                "packages_copilot-chat_utils_CopilotChatContext_tsx-packages_safe-html_VerifiedHTML_tsx",
                "packages_item-picker_components_RepositoryPicker_tsx",
                "packages_alive_alive_ts-packages_alive_connect-alive-subscription_ts-packages_history_history-28179b",
                "packages_comment-box_api_file-upload_ts-packages_comment-box_api_preview_ts-packages_markdown-c95d34",
                "packages_issue-fields-shared_issue-field_ts-packages_issue-type-token_IssueTypeToken_tsx-pack-cc1ae8",
                "packages_signed-commit-badge_index_ts",
                "packages_commenting_hooks_use-markdown-body_ts-packages_commenting_utils_blocked-commenting-r-21549c",
                "packages_nested-list-view_src_NestedListItem_LeadingContent_tsx-packages_nested-list-view_src-1f776c",
                "packages_markdown-viewer_NewMarkdownViewer_tsx",
                "packages_issue-viewer_components_IssueViewer_tsx-packages_issue-viewer_contexts_IssueViewerCo-f66842",
                "packages_list-view-items-issues-prs_constants_stateIcon_ts-packages_promise-with-resolvers-po-969e43",
                "packages_app-uuid_app-uuid_ts-packages_commenting_constants_values_ts-packages_document-metad-95e0dc",
            ],
            () => e((e.s = 87890))
        ),
            e.O());
    },
]);
//# sourceMappingURL=issues-react-accfdcc159f7.js.map
