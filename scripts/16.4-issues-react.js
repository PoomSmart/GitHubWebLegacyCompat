"use strict";
(globalThis.webpackChunk = globalThis.webpackChunk || []).push([
    [
        "issues-react",
        "lazy-react-partial-actions-survey",
        "lazy-react-partial-enterprise-team",
        "lazy-react-partial-global-sso-banner",
        "lazy-react-partial-single-sign-on-dropdown-partial",
        "ui_packages_document-metadata_document-metadata_ts-ui_packages_fetch-headers_fetch-headers_ts-1d63f8",
        "ui_packages_document-metadata_document-metadata_ts-ui_packages_fetch-headers_fetch-headers_ts-ae5464",
        "ui_packages_inline-autocomplete_InlineAutocomplete_tsx",
    ],
    {
        66661: (e, a, l) => {
            function n(e) {
                let a = e.parentNode;
                if (null === a || !(a instanceof HTMLElement)) throw Error();
                let l = 0;
                a instanceof HTMLOListElement &&
                    1 !== a.start &&
                    (l = a.start - 1);
                let n = a.children;
                for (let a = 0; a < n.length; ++a) if (n[a] === e) return l + a;
                return l;
            }
            l.d(a, { P: () => Quote, g: () => MarkdownQuote });
            let t = 0;
            function i(e) {
                return e
                    .replace(/&/g, "&amp;")
                    .replace(/'/g, "&apos;")
                    .replace(/"/g, "&quot;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;");
            }
            let s = {
                INPUT: (e) =>
                    e instanceof HTMLInputElement && e.checked
                        ? "[x] "
                        : "[ ] ",
                CODE(e) {
                    let a = e.textContent || "";
                    return e.parentNode && "PRE" === e.parentNode.nodeName
                        ? ((e.textContent = `\`\`\`
${a.replace(/\n+$/, "")}
\`\`\`

`),
                          e)
                        : a.indexOf("`") >= 0
                          ? `\`\` ${a} \`\``
                          : `\`${a}\``;
                },
                P(e) {
                    let a = document.createElement("p");
                    return (
                        (a.textContent = (e.textContent || "").replace(
                            /<(\/?)(pre|strong|weak|em)>/g,
                            "\\<$1$2\\>"
                        )),
                        a
                    );
                },
                STRONG: (e) => `**${e.textContent || ""}**`,
                EM: (e) => `_${e.textContent || ""}_`,
                DEL: (e) => `~${e.textContent || ""}~`,
                BLOCKQUOTE(e) {
                    let a = (e.textContent || "").trim().replace(/^/gm, "> "),
                        l = document.createElement("pre");
                    return (
                        (l.textContent = `${a}

`),
                        l
                    );
                },
                A(e) {
                    let a = e.textContent || "",
                        l = e.getAttribute("href");
                    return /^https?:/.test(a) && a === l
                        ? a
                        : l
                          ? `[${a}](${l})`
                          : a;
                },
                IMG(e) {
                    let a = e.getAttribute("alt") || "",
                        l = e.getAttribute("src");
                    if (!l) throw Error();
                    let n = e.hasAttribute("width")
                            ? ` width="${i(e.getAttribute("width") || "")}"`
                            : "",
                        t = e.hasAttribute("height")
                            ? ` height="${i(e.getAttribute("height") || "")}"`
                            : "";
                    return n || t
                        ? `<img alt="${i(a)}"${n}${t} src="${i(l)}">`
                        : `![${a}](${l})`;
                },
                LI(e) {
                    let a = e.parentNode;
                    if (!a) throw Error();
                    let l = "";
                    if (
                        !(function (e) {
                            let a = e.childNodes[0],
                                l = e.childNodes[1];
                            return (
                                !!a &&
                                e.childNodes.length < 3 &&
                                ("OL" === a.nodeName || "UL" === a.nodeName) &&
                                (!l ||
                                    (l.nodeType === Node.TEXT_NODE &&
                                        !(l.textContent || "").trim()))
                            );
                        })(e)
                    )
                        if ("OL" === a.nodeName)
                            if (t > 0 && !a.previousSibling) {
                                let a = n(e) + t + 1;
                                l = `${a}\\. `;
                            } else l = `${n(e) + 1}. `;
                        else l = "* ";
                    let i = l.replace(/\S/g, " "),
                        s = (e.textContent || "").trim().replace(/^/gm, i),
                        r = document.createElement("pre");
                    return ((r.textContent = s.replace(i, l)), r);
                },
                OL(e) {
                    let a = document.createElement("li");
                    return (
                        a.appendChild(document.createElement("br")),
                        e.append(a),
                        e
                    );
                },
                H1(e) {
                    let a = parseInt(e.nodeName.slice(1));
                    return (e.prepend(`${Array(a + 1).join("#")} `), e);
                },
                UL: (e) => e,
            };
            s.UL = s.OL;
            for (let e = 2; e <= 6; ++e) s[`H${e}`] = s.H1;
            let Quote = class Quote {
                constructor() {
                    ((this.selection = window.getSelection()),
                        (this.processSelectionText = (e) => e));
                }
                closest(e) {
                    let a = this.range.startContainer,
                        l = a instanceof Element ? a : a.parentElement;
                    return l ? l.closest(e) : null;
                }
                get active() {
                    var e;
                    return (
                        ((null == (e = this.selection)
                            ? void 0
                            : e.rangeCount) || 0) > 0
                    );
                }
                get range() {
                    var e;
                    return (
                        null == (e = this.selection) ? void 0 : e.rangeCount
                    )
                        ? this.selection.getRangeAt(0)
                        : new Range();
                }
                set range(e) {
                    var a, l;
                    (null == (a = this.selection) || a.removeAllRanges(),
                        null == (l = this.selection) || l.addRange(e));
                }
                set processSelectionTextFn(e) {
                    this.processSelectionText = e;
                }
                get selectionText() {
                    var e;
                    return this.processSelectionText(
                        (null == (e = this.selection)
                            ? void 0
                            : e.toString().trim()) || ""
                    );
                }
                get quotedText() {
                    return `> ${this.selectionText.replace(
                        /\n/g,
                        `
> `
                    )}

`;
                }
                select(e) {
                    this.selection &&
                        (this.selection.removeAllRanges(),
                        this.selection.selectAllChildren(e));
                }
                insert(e) {
                    (e.value
                        ? (e.value = `${e.value}

${this.quotedText}`)
                        : (e.value = this.quotedText),
                        e.dispatchEvent(
                            new CustomEvent("change", {
                                bubbles: !0,
                                cancelable: !1,
                            })
                        ),
                        e.focus(),
                        (e.selectionStart = e.value.length),
                        (e.scrollTop = e.scrollHeight));
                }
            };
            let MarkdownQuote = class MarkdownQuote extends Quote {
                constructor(e = "", a) {
                    (super(), (this.scopeSelector = e), (this.callback = a));
                }
                get selectionText() {
                    var e, a;
                    if (!this.selection) return "";
                    let l = (function (e, a) {
                        let l = e.startContainer;
                        if (
                            !l ||
                            !l.parentNode ||
                            !(l.parentNode instanceof HTMLElement)
                        )
                            throw Error(
                                "the range must start within an HTMLElement"
                            );
                        let i = l.parentNode,
                            s = e.cloneContents();
                        if (a) {
                            let e = s.querySelector(a);
                            e &&
                                (s =
                                    document.createDocumentFragment()).appendChild(
                                    e
                                );
                        }
                        t = 0;
                        let r = i.closest("li");
                        if (i.closest("pre")) {
                            let e = document.createElement("pre");
                            (e.appendChild(s),
                                (s =
                                    document.createDocumentFragment()).appendChild(
                                    e
                                ));
                        } else if (
                            r &&
                            r.parentNode &&
                            ("OL" === r.parentNode.nodeName && (t = n(r)),
                            !s.querySelector("li"))
                        ) {
                            let e = document.createElement("li");
                            if (!r.parentNode) throw Error();
                            let a = document.createElement(
                                r.parentNode.nodeName
                            );
                            (e.appendChild(s),
                                a.appendChild(e),
                                (s =
                                    document.createDocumentFragment()).appendChild(
                                    a
                                ));
                        }
                        return s;
                    })(this.range, null != (e = this.scopeSelector) ? e : "");
                    null == (a = this.callback) || a.call(this, l);
                    let i = document.createNodeIterator(
                            l,
                            NodeFilter.SHOW_ELEMENT,
                            {
                                acceptNode: (e) =>
                                    e.nodeName in s &&
                                    !(function (e) {
                                        if (
                                            e instanceof HTMLAnchorElement &&
                                            1 === e.childNodes.length
                                        ) {
                                            let a = e.childNodes[0];
                                            if (a instanceof HTMLImageElement)
                                                return a.src === e.href;
                                        }
                                        return !1;
                                    })(e) &&
                                    ("IMG" === e.nodeName ||
                                        null != e.firstChild ||
                                        ("INPUT" === e.nodeName &&
                                            e instanceof HTMLInputElement &&
                                            "checkbox" === e.type))
                                        ? NodeFilter.FILTER_ACCEPT
                                        : NodeFilter.FILTER_SKIP,
                            }
                        ),
                        r = [],
                        o = i.nextNode();
                    for (; o; )
                        (o instanceof HTMLElement && r.push(o),
                            (o = i.nextNode()));
                    for (let e of (r.reverse(), r))
                        e.replaceWith(s[e.nodeName](e));
                    let u = document.body;
                    if (!u) return "";
                    let d = document.createElement("div");
                    (d.appendChild(l),
                        (d.style.cssText = "position:absolute;left:-9999px;"),
                        u.appendChild(d));
                    let c = "";
                    try {
                        let e = document.createRange();
                        (e.selectNodeContents(d),
                            this.selection.removeAllRanges(),
                            this.selection.addRange(e),
                            (c = this.selection.toString()),
                            this.selection.removeAllRanges(),
                            e.detach());
                    } finally {
                        u.removeChild(d);
                    }
                    return this.processSelectionText(c.trim());
                }
            };
        },
        34441: (e, a, l) => {
            l.d(a, { A: () => n });
            let n = {
                Box: "SingleSignOnBanner-module__Box--iwIEO",
                Flash: "SingleSignOnBanner-module__Flash--XK1g3",
                Box_1: "SingleSignOnBanner-module__Box_1--VPBly",
                Octicon: "SingleSignOnBanner-module__Octicon--JXNw_",
                Box_2: "SingleSignOnBanner-module__Box_2--kq0MT",
                ForceWrap: "SingleSignOnBanner-module__ForceWrap--tZqOV",
                Paragraph: "SingleSignOnBanner-module__Paragraph--rpV0k",
                ProtectedOrgs_FullList:
                    "SingleSignOnBanner-module__ProtectedOrgs_FullList--HTdZQ",
                ProtectedOrgs_Shortened:
                    "SingleSignOnBanner-module__ProtectedOrgs_Shortened--MTXYo",
                ShieldLockIcon:
                    "SingleSignOnBanner-module__ShieldLockIcon--TXlVP",
            };
        },
        78924: (e, a, l) => {
            l.d(a, { I: () => n });
            let n = (0, l(96540).createContext)(null);
        },
        52811: (e, a, l) => {
            l.d(a, { C: () => s, i: () => r });
            var n = l(96679),
                t = l(27851),
                i = l(46493);
            function s(e, a) {
                (0, t.G7)("arianotify_comprehensive_migration")
                    ? r(o(e), { ...a, element: a?.element ?? e })
                    : (0, t.G7)("primer_live_region_element") &&
                        a?.element === void 0
                      ? (0, i.Cj)(e, {
                            politeness: a?.assertive ? "assertive" : "polite",
                        })
                      : r(o(e), a);
            }
            function r(e, a) {
                let { assertive: l, element: s } = a ?? {};
                (0, t.G7)("arianotify_comprehensive_migration") &&
                "ariaNotify" in Element.prototype
                    ? (s || document.body).ariaNotify(e)
                    : (0, t.G7)("primer_live_region_element") && void 0 === s
                      ? (0, i.iP)(e, { politeness: l ? "assertive" : "polite" })
                      : (function (e, a, l) {
                            let t =
                                l ??
                                n.XC?.querySelector(
                                    a
                                        ? "#js-global-screen-reader-notice-assertive"
                                        : "#js-global-screen-reader-notice"
                                );
                            t &&
                                (t.textContent === e
                                    ? (t.textContent = `${e}\u00A0`)
                                    : (t.textContent = e));
                        })(e, l, s);
            }
            function o(e) {
                return (
                    e.getAttribute("aria-label") ||
                    e.innerText ||
                    ""
                ).trim();
            }
        },
        53005: (e, a, l) => {
            l.d(a, { O: () => s, S: () => i });
            var n = l(96679);
            let t =
                    n.cg?.document?.head?.querySelector('meta[name="release"]')
                        ?.content || "",
                i = "X-GitHub-Client-Version";
            function s() {
                return t;
            }
        },
        44237: (e, a, l) => {
            l.d(a, { xC: () => I, B6: () => w, ym: () => R });
            var n = l(74848),
                t = l(21728),
                i = l(38621),
                s = l(55847),
                r = l(87330),
                o = l(53110),
                u = l(94977),
                d = l(96540),
                c = l(34164),
                m = l(63867),
                g = l(9852),
                p = l(39459),
                y = l(34614),
                h = l(18828);
            let k = {
                Box: "CheckRunItem-module__Box--vkNX2",
                Box_1: "CheckRunItem-module__Box_1--NFRJY",
                Link: "CheckRunItem-module__Link--lCbe1",
                Text: "CheckRunItem-module__Text--b7ASk",
                Text_1: "CheckRunItem-module__Text_1--ixwzU",
                Text_2: "CheckRunItem-module__Text_2--bhoH3",
                Link_1: "CheckRunItem-module__Link_1--YV819",
                Box_2: "CheckRunItem-module__Box_2--If0BN",
            };
            function f(e) {
                let a,
                    l,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    f,
                    b,
                    C,
                    S = (0, t.c)(37),
                    { checkRun: F } = e;
                S[0] !== F.icon
                    ? ((a = (function (e) {
                          switch (e) {
                              case "check":
                                  return (0, n.jsx)(i.CheckIcon, {
                                      className:
                                          "fgColor-success my-0 mx-2 flex-self-center",
                                  });
                              case "dot-fill":
                                  return (0, n.jsx)(i.DotFillIcon, {
                                      className:
                                          "fgColor-attention my-0 mx-2 flex-self-center",
                                  });
                              case "stop":
                                  return (0, n.jsx)(i.StopIcon, {
                                      className:
                                          "fgColor-muted my-0 mx-2 flex-self-center",
                                  });
                              case "issue-reopened":
                                  return (0, n.jsx)(i.IssueReopenedIcon, {
                                      className:
                                          "fgColor-muted my-0 mx-2 flex-self-center",
                                  });
                              case "clock":
                                  return (0, n.jsx)(i.ClockIcon, {
                                      className:
                                          "fgColor-attention my-0 mx-2 flex-self-center",
                                  });
                              case "square-fill":
                                  return (0, n.jsx)(i.SquareFillIcon, {
                                      className:
                                          "fgColor-default my-0 mx-2 flex-self-center",
                                  });
                              case "skip":
                                  return (0, n.jsx)(i.SkipIcon, {
                                      className:
                                          "fgColor-muted my-0 mx-2 flex-self-center",
                                  });
                              case "alert":
                                  return (0, n.jsx)(i.AlertIcon, {
                                      className:
                                          "fgColor-danger my-0 mx-2 flex-self-center",
                                  });
                              default:
                                  return (0, n.jsx)(i.XIcon, {
                                      className:
                                          "fgColor-danger my-0 mx-2 flex-self-center",
                                  });
                          }
                      })(F.icon)),
                      (S[0] = F.icon),
                      (S[1] = a))
                    : (a = S[1]);
                let v = a,
                    L = "in_progress" === F.state;
                return (
                    S[2] !== v || S[3] !== L
                        ? ((l = L
                              ? (0, n.jsx)("div", {
                                    className: k.Box_2,
                                    children: (0, n.jsxs)("svg", {
                                        fill: "none",
                                        viewBox: "0 0 16 16",
                                        className: "anim-rotate",
                                        "aria-hidden": "true",
                                        role: "img",
                                        children: [
                                            (0, n.jsx)("path", {
                                                opacity: ".5",
                                                d: "M8 15A7 7 0 108 1a7 7 0 000 14v0z",
                                                stroke: "#dbab0a",
                                                strokeWidth: "2",
                                            }),
                                            (0, n.jsx)("path", {
                                                d: "M15 8a7 7 0 01-7 7",
                                                stroke: "#dbab0a",
                                                strokeWidth: "2",
                                            }),
                                            (0, n.jsx)("path", {
                                                d: "M8 12a4 4 0 100-8 4 4 0 000 8z",
                                                fill: "#dbab0a",
                                            }),
                                        ],
                                    }),
                                })
                              : (0, n.jsx)(n.Fragment, { children: v })),
                          (S[2] = v),
                          (S[3] = L),
                          (S[4] = l))
                        : (l = S[4]),
                    S[5] !== F.avatarBackgroundColor
                        ? ((s = { backgroundColor: F.avatarBackgroundColor }),
                          (S[5] = F.avatarBackgroundColor),
                          (S[6] = s))
                        : (s = S[6]),
                    S[7] !== F.avatarLogo || S[8] !== s
                        ? ((r = (0, n.jsx)(p.r, {
                              square: !0,
                              src: F.avatarLogo,
                              sx: s,
                          })),
                          (S[7] = F.avatarLogo),
                          (S[8] = s),
                          (S[9] = r))
                        : (r = S[9]),
                    S[10] !== F.avatarUrl || S[11] !== r
                        ? ((o = (0, n.jsx)(y.A, {
                              href: F.avatarUrl,
                              "aria-label": "Avatar",
                              className: k.Link,
                              children: r,
                          })),
                          (S[10] = F.avatarUrl),
                          (S[11] = r),
                          (S[12] = o))
                        : (o = S[12]),
                    S[13] !== F.avatarDescription || S[14] !== o
                        ? ((u = (0, n.jsx)(h.m, {
                              text: F.avatarDescription,
                              direction: "e",
                              children: o,
                          })),
                          (S[13] = F.avatarDescription),
                          (S[14] = o),
                          (S[15] = u))
                        : (u = S[15]),
                    S[16] !== l || S[17] !== u
                        ? ((d = (0, n.jsxs)("div", {
                              className: k.Box_1,
                              children: [l, u],
                          })),
                          (S[16] = l),
                          (S[17] = u),
                          (S[18] = d))
                        : (d = S[18]),
                    S[19] !== F.name
                        ? ((c = (0, n.jsxs)("span", {
                              className: k.Text_1,
                              children: [F.name, " "],
                          })),
                          (S[19] = F.name),
                          (S[20] = c))
                        : (c = S[20]),
                    S[21] !== F.additionalContext || S[22] !== F.pending
                        ? ((m = F.pending
                              ? (0, n.jsx)("span", {
                                    className: k.Text_2,
                                    children: F.additionalContext,
                                })
                              : F.additionalContext),
                          (S[21] = F.additionalContext),
                          (S[22] = F.pending),
                          (S[23] = m))
                        : (m = S[23]),
                    S[24] !== F.description || S[25] !== F.pending
                        ? ((g =
                              F.description &&
                              (0, n.jsxs)("span", {
                                  children: [
                                      " ",
                                      "- ",
                                      F.pending
                                          ? (0, n.jsx)("span", {
                                                className: k.Text_2,
                                                children: F.description,
                                            })
                                          : F.description,
                                  ],
                              })),
                          (S[24] = F.description),
                          (S[25] = F.pending),
                          (S[26] = g))
                        : (g = S[26]),
                    S[27] !== g || S[28] !== c || S[29] !== m
                        ? ((f = (0, n.jsxs)("span", {
                              className: k.Text,
                              children: [c, m, g],
                          })),
                          (S[27] = g),
                          (S[28] = c),
                          (S[29] = m),
                          (S[30] = f))
                        : (f = S[30]),
                    S[31] !== F.targetUrl
                        ? ((b = (0, n.jsx)(y.A, {
                              href: F.targetUrl,
                              className: k.Link_1,
                              children: "Details",
                          })),
                          (S[31] = F.targetUrl),
                          (S[32] = b))
                        : (b = S[32]),
                    S[33] !== f || S[34] !== b || S[35] !== d
                        ? ((C = (0, n.jsxs)("li", {
                              "data-testid": "check-run-item",
                              className: k.Box,
                              children: [d, f, b],
                          })),
                          (S[33] = f),
                          (S[34] = b),
                          (S[35] = d),
                          (S[36] = C))
                        : (C = S[36]),
                    C
                );
            }
            try {
                f.displayName || (f.displayName = "CheckRunItem");
            } catch {}
            let b = { Box: "ChecksStatusBadgeFooter-module__Box--H_aiQ" };
            function C(e) {
                let a,
                    l,
                    i = (0, t.c)(4),
                    { checkRuns: s } = e;
                return (
                    i[0] !== s
                        ? ((a = s.map(S)), (i[0] = s), (i[1] = a))
                        : (a = i[1]),
                    i[2] !== a
                        ? ((l = (0, n.jsx)("ul", {
                              className: b.Box,
                              children: a,
                          })),
                          (i[2] = a),
                          (i[3] = l))
                        : (l = i[3]),
                    l
                );
            }
            function S(e, a) {
                return (0, n.jsx)(f, { checkRun: e }, a);
            }
            try {
                C.displayName || (C.displayName = "ChecksStatusBadgeFooter");
            } catch {}
            let F = {
                Text: "ChecksStatusBadgeHeader-module__Text--IBN_O",
                Text_1: "ChecksStatusBadgeHeader-module__Text_1--nuXs5",
                Text_2: "ChecksStatusBadgeHeader-module__Text_2--nXTHk",
            };
            function v(e) {
                let a = (0, t.c)(4),
                    { checksHeaderState: l } = e;
                switch (l) {
                    case "SUCCEEDED": {
                        let e;
                        return (
                            a[0] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = (0, n.jsx)("span", {
                                      className: F.Text,
                                      children: "All checks have passed",
                                  })),
                                  (a[0] = e))
                                : (e = a[0]),
                            e
                        );
                    }
                    case "FAILED": {
                        let e;
                        return (
                            a[1] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = (0, n.jsx)("span", {
                                      className: F.Text_1,
                                      children: "All checks have failed",
                                  })),
                                  (a[1] = e))
                                : (e = a[1]),
                            e
                        );
                    }
                    case "PENDING": {
                        let e;
                        return (
                            a[2] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = (0, n.jsx)("span", {
                                      className: F.Text_2,
                                      children:
                                          "Some checks haven\u2019t completed yet",
                                  })),
                                  (a[2] = e))
                                : (e = a[2]),
                            e
                        );
                    }
                    default: {
                        let e;
                        return (
                            a[3] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = (0, n.jsx)("span", {
                                      className: F.Text_1,
                                      children:
                                          "Some checks were not successful",
                                  })),
                                  (a[3] = e))
                                : (e = a[3]),
                            e
                        );
                    }
                }
            }
            try {
                v.displayName || (v.displayName = "HeaderState");
            } catch {}
            let L = {
                Dialog: "CheckStatusDialog-module__Dialog--TK4Dm",
                Dialog_Body: "CheckStatusDialog-module__Dialog_Body--WjYUz",
                Box: "CheckStatusDialog-module__Box--KtBxw",
            };
            function I(e) {
                let a,
                    l,
                    i = (0, t.c)(7),
                    { combinedStatus: s, isOpen: r, onDismiss: o } = e;
                i[0] !== s
                    ? ((a = s
                          ? (0, n.jsx)(v, {
                                checksHeaderState: s.checksHeaderState,
                            })
                          : "Loading..."),
                      (i[0] = s),
                      (i[1] = a))
                    : (a = i[1]);
                let u = a;
                return (
                    i[2] !== s || i[3] !== r || i[4] !== o || i[5] !== u
                        ? ((l = r
                              ? (0, n.jsx)(g.l, {
                                    onClose: o,
                                    title: u,
                                    subtitle: s
                                        ? s.checksStatusSummary
                                        : void 0,
                                    width: "xlarge",
                                    renderBody: () =>
                                        (0, n.jsx)(g.l.Body, {
                                            className: L.Dialog_Body,
                                            children: s
                                                ? (0, n.jsx)(C, {
                                                      checkRuns: s.checkRuns,
                                                  })
                                                : (0, n.jsx)("div", {
                                                      className: L.Box,
                                                      children: (0, n.jsx)(
                                                          m.A,
                                                          { size: "medium" }
                                                      ),
                                                  }),
                                        }),
                                    className: L.Dialog,
                                })
                              : null),
                          (i[2] = s),
                          (i[3] = r),
                          (i[4] = o),
                          (i[5] = u),
                          (i[6] = l))
                        : (l = i[6]),
                    l
                );
            }
            try {
                I.displayName || (I.displayName = "CheckStatusDialog");
            } catch {}
            let _ = {
                    ChecksStatusBadgeButton:
                        "ChecksStatusBadge-module__ChecksStatusBadgeButton--cXKro",
                    ChecksStatusBadgeIconButton:
                        "ChecksStatusBadge-module__ChecksStatusBadgeIconButton--XFKHo",
                },
                x = {
                    success: {
                        circled: i.CheckCircleIcon,
                        filled: i.CheckCircleFillIcon,
                        default: i.CheckIcon,
                        color: "var(--bgColor-success-emphasis, var(--color-success-emphasis))",
                    },
                    pending: {
                        circled: i.CircleIcon,
                        filled: i.DotFillIcon,
                        default: i.DotFillIcon,
                        color: "var(--bgColor-attention-emphasis, var(--color-scale-yellow-4))",
                    },
                    failure: {
                        circled: i.XCircleIcon,
                        filled: i.XCircleFillIcon,
                        default: i.XIcon,
                        color: "var(--bgColor-danger-emphasis, var(--color-scale-red-4))",
                    },
                    error: {
                        circled: i.QuestionIcon,
                        filled: i.QuestionIcon,
                        default: i.QuestionIcon,
                        color: "var(--fgColor-muted, var(--color-canvas-subtle))",
                    },
                };
            function K(e) {
                let a,
                    l,
                    i,
                    s,
                    r,
                    m = (0, t.c)(19),
                    {
                        className: g,
                        descriptionText: p,
                        icon: y,
                        iconColor: h,
                        tooltipText: k,
                    } = e,
                    f = (0, d.useId)(),
                    b = k ? f : void 0,
                    C = k ? void 0 : p || "See all checks";
                (m[0] !== h
                    ? ((a = { color: h }), (m[0] = h), (m[1] = a))
                    : (a = m[1]),
                    m[2] !== y || m[3] !== b || m[4] !== C || m[5] !== a
                        ? ((l = (0, n.jsx)(o.A, {
                              "aria-labelledby": b,
                              icon: y,
                              "aria-label": C,
                              sx: a,
                          })),
                          (m[2] = y),
                          (m[3] = b),
                          (m[4] = C),
                          (m[5] = a),
                          (m[6] = l))
                        : (l = m[6]));
                let S = l;
                if (k) {
                    let e;
                    (m[7] !== S || m[8] !== f || m[9] !== k
                        ? ((e = (0, n.jsx)(u.A, {
                              id: f,
                              "aria-label": k,
                              direction: "e",
                              children: S,
                          })),
                          (m[7] = S),
                          (m[8] = f),
                          (m[9] = k),
                          (m[10] = e))
                        : (e = m[10]),
                        (S = e));
                }
                return (
                    m[11] !== g
                        ? ((i = (0, c.$)(g, "d-flex flex-items-center gap-1")),
                          (m[11] = g),
                          (m[12] = i))
                        : (i = m[12]),
                    m[13] !== p
                        ? ((s =
                              p && (0, n.jsxs)("span", { children: [" ", p] })),
                          (m[13] = p),
                          (m[14] = s))
                        : (s = m[14]),
                    m[15] !== S || m[16] !== i || m[17] !== s
                        ? ((r = (0, n.jsxs)("span", {
                              className: i,
                              "data-testid": "checks-status-badge-icon-only",
                              children: [S, s],
                          })),
                          (m[15] = S),
                          (m[16] = i),
                          (m[17] = s),
                          (m[18] = r))
                        : (r = m[18]),
                    r
                );
            }
            function w(e) {
                let a,
                    l,
                    i,
                    o,
                    u = (0, t.c)(26),
                    {
                        statusRollup: c,
                        combinedStatus: m,
                        variant: g,
                        disablePopover: p,
                        buttonSx: y,
                        size: h,
                        descriptionText: k,
                        onWillOpenPopup: f,
                    } = e,
                    b = void 0 === g ? "default" : g,
                    C = void 0 === h ? "medium" : h,
                    S = void 0 === k ? "" : k,
                    [F, v] = (0, d.useState)(!1),
                    L = (0, d.useRef)(null),
                    w = x[c],
                    N = w?.[b] || x.error[b],
                    j = w?.color || x.error.color;
                u[0] !== N || u[1] !== j
                    ? ((a = { icon: N, iconColor: j }),
                      (u[0] = N),
                      (u[1] = j),
                      (u[2] = a))
                    : (a = u[2]);
                let { icon: R, iconColor: T } = a;
                if ("error" === c) {
                    let e,
                        a = p ? void 0 : "p-1";
                    return (
                        u[3] !== R || u[4] !== T || u[5] !== a
                            ? ((e = (0, n.jsx)(K, {
                                  className: a,
                                  descriptionText: "?/?",
                                  icon: R,
                                  iconColor: T,
                                  tooltipText:
                                      "There was an error retrieving checks status",
                              })),
                              (u[3] = R),
                              (u[4] = T),
                              (u[5] = a),
                              (u[6] = e))
                            : (e = u[6]),
                        e
                    );
                }
                if (p) {
                    let e;
                    return (
                        u[7] !== S || u[8] !== R || u[9] !== T
                            ? ((e = (0, n.jsx)(K, {
                                  descriptionText: S,
                                  icon: R,
                                  iconColor: T,
                              })),
                              (u[7] = S),
                              (u[8] = R),
                              (u[9] = T),
                              (u[10] = e))
                            : (e = u[10]),
                        e
                    );
                }
                return (
                    u[11] !== y ||
                    u[12] !== m?.checksStatusSummary ||
                    u[13] !== S ||
                    u[14] !== f ||
                    u[15] !== R ||
                    u[16] !== T ||
                    u[17] !== C ||
                    u[18] !== c
                        ? ((l = S
                              ? (0, n.jsx)(s.Q, {
                                    "data-testid": "checks-status-badge-button",
                                    leadingVisual: R,
                                    variant: "invisible",
                                    size: C,
                                    "aria-label":
                                        m?.checksStatusSummary ??
                                        `Status checks: ${c}`,
                                    sx: { svg: { color: T }, ...y },
                                    ref: L,
                                    onClick: () => {
                                        (f?.(), v(!0));
                                    },
                                    className: _.ChecksStatusBadgeButton,
                                    children: S,
                                })
                              : (0, n.jsx)(r.K, {
                                    "data-testid": "checks-status-badge-icon",
                                    tooltipDirection: "s",
                                    icon: R,
                                    variant: "invisible",
                                    size: C,
                                    "aria-label": m?.checksStatusSummary ?? c,
                                    sx: { svg: { color: T }, ...y },
                                    className: _.ChecksStatusBadgeIconButton,
                                    ref: L,
                                    onClick: () => {
                                        (f?.(), v(!0));
                                    },
                                })),
                          (u[11] = y),
                          (u[12] = m?.checksStatusSummary),
                          (u[13] = S),
                          (u[14] = f),
                          (u[15] = R),
                          (u[16] = T),
                          (u[17] = C),
                          (u[18] = c),
                          (u[19] = l))
                        : (l = u[19]),
                    u[20] !== m || u[21] !== F
                        ? ((i =
                              F &&
                              (0, n.jsx)(I, {
                                  combinedStatus: m,
                                  isOpen: F,
                                  onDismiss: () => {
                                      (v(!1),
                                          setTimeout(() => {
                                              L.current?.focus();
                                          }, 0));
                                  },
                              })),
                          (u[20] = m),
                          (u[21] = F),
                          (u[22] = i))
                        : (i = u[22]),
                    u[23] !== l || u[24] !== i
                        ? ((o = (0, n.jsxs)(n.Fragment, { children: [l, i] })),
                          (u[23] = l),
                          (u[24] = i),
                          (u[25] = o))
                        : (o = u[25]),
                    o
                );
            }
            try {
                K.displayName || (K.displayName = "IconOnlyStatus");
            } catch {}
            try {
                w.displayName || (w.displayName = "ChecksStatusBadge");
            } catch {}
            var N = l(96235),
                j = l(60039);
            function R(e, a) {
                let l,
                    n,
                    i = (0, t.c)(7),
                    [s, r] = (0, d.useState)(),
                    [o, u] = (0, d.useState)();
                i[0] !== e || i[1] !== o || i[2] !== a
                    ? ((l = async () => {
                          if (o !== e && (u(e), r(void 0), e)) {
                              let l = (0, N.vki)(a, e),
                                  n = await (0, j.lS)(l);
                              r(await n.json());
                          }
                      }),
                      (i[0] = e),
                      (i[1] = o),
                      (i[2] = a),
                      (i[3] = l))
                    : (l = i[3]);
                let c = l;
                return (
                    i[4] !== s || i[5] !== c
                        ? ((n = [s, c]), (i[4] = s), (i[5] = c), (i[6] = n))
                        : (n = i[6]),
                    n
                );
            }
        },
        8367: (e, a, l) => {
            function n(e) {
                return t(e)[0];
            }
            function t(e) {
                let a = [];
                for (let l of (function () {
                    try {
                        return document.cookie.split(";");
                    } catch {
                        return [];
                    }
                })()) {
                    let [n, t] = l.trim().split("=");
                    e === n && void 0 !== t && a.push({ key: n, value: t });
                }
                return a;
            }
            function i(e, a, l = null, n = !1, t = "lax") {
                let s = document.domain;
                if (null == s) throw Error("Unable to get document domain");
                s.endsWith(".github.com") && (s = "github.com");
                let r = "https:" === location.protocol ? "; secure" : "",
                    o = l ? `; expires=${l}` : "";
                !1 === n && (s = `.${s}`);
                try {
                    document.cookie = `${e}=${a}; path=/; domain=${s}${o}${r}; samesite=${t}`;
                } catch {}
            }
            function s(e, a = !1) {
                let l = document.domain;
                if (null == l) throw Error("Unable to get document domain");
                l.endsWith(".github.com") && (l = "github.com");
                let n = new Date(Date.now() - 1).toUTCString(),
                    t = "https:" === location.protocol ? "; secure" : "",
                    i = `; expires=${n}`;
                !1 === a && (l = `.${l}`);
                try {
                    document.cookie = `${e}=''; path=/; domain=${l}${i}${t}`;
                } catch {}
            }
            l.d(a, { OR: () => t, Ri: () => n, TV: () => i, Yj: () => s });
        },
        92520: (e, a, l) => {
            function n(e, a, l) {
                return (
                    a in e
                        ? Object.defineProperty(e, a, {
                              value: l,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                          })
                        : (e[a] = l),
                    e
                );
            }
            l.d(a, { Y: () => AuthToken });
            let AuthToken = class AuthToken {
                get authorizationHeaderValue() {
                    return `GitHub-Bearer ${this.value}`;
                }
                needsRefreshing(e) {
                    return this.isExpired || this.ssoChanged(e);
                }
                get isExpired() {
                    let e = new Date(this.expiration);
                    return (
                        new Date(
                            Date.UTC(
                                e.getUTCFullYear(),
                                e.getUTCMonth(),
                                e.getUTCDate(),
                                e.getUTCHours(),
                                e.getUTCMinutes(),
                                e.getUTCSeconds(),
                                e.getUTCMilliseconds()
                            )
                        ) < new Date(Date.now() + 15e3)
                    );
                }
                ssoChanged(e) {
                    return !(
                        this.ssoOrgIDs.every((a) => e.includes(a)) &&
                        e.every((e) => this.ssoOrgIDs.includes(e))
                    );
                }
                static fromResult(e, a) {
                    return new AuthToken(e.token, e.expiration, a);
                }
                serialize() {
                    return {
                        value: this.value,
                        expiration: this.expiration,
                        ssoOrgIDs: this.ssoOrgIDs,
                    };
                }
                static deserialize(e) {
                    return new AuthToken(e.value, e.expiration, e.ssoOrgIDs);
                }
                constructor(e, a, l) {
                    (n(this, "value", void 0),
                        n(this, "expiration", void 0),
                        n(this, "ssoOrgIDs", void 0),
                        (this.value = e),
                        (this.expiration = a),
                        (this.ssoOrgIDs = l));
                }
            };
        },
        879: (e, a, l) => {
            l.d(a, { J: () => CopilotAuthTokenProvider });
            var n = l(92520),
                t = l(85351),
                i = l(60039);
            function s(e, a, l) {
                return (
                    a in e
                        ? Object.defineProperty(e, a, {
                              value: l,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                          })
                        : (e[a] = l),
                    e
                );
            }
            let CopilotAuthTokenProvider = class CopilotAuthTokenProvider {
                async getAuthToken() {
                    let e = this.getLocalStorageAuthToken();
                    return e
                        ? this.validateAuthToken(e)
                        : this.fetchAuthToken();
                }
                setLocalStorageAuthToken(e) {
                    this.copilotLocalStorage.setItem(
                        this.storageKey,
                        JSON.stringify(e.serialize())
                    );
                }
                getLocalStorageAuthToken() {
                    let e = this.copilotLocalStorage.getItem(this.storageKey);
                    return e ? n.Y.deserialize(JSON.parse(e)) : null;
                }
                removeLocalStorageAuthToken() {
                    this.copilotLocalStorage.removeItem(this.storageKey);
                }
                async validateAuthToken(e) {
                    return e.needsRefreshing(this.ssoOrgIDs)
                        ? this.fetchAuthToken()
                        : e;
                }
                fetchAuthToken() {
                    return (
                        this.currentAuthTokenRequest ||
                            (this.currentAuthTokenRequest =
                                this._fetchAuthToken()),
                        this.currentAuthTokenRequest
                    );
                }
                async _fetchAuthToken() {
                    let e = await (0, i.lS)(this.tokenEndpoint, {
                        method: "POST",
                    });
                    if (e.ok) {
                        let a = await e.json();
                        this.currentAuthTokenRequest = null;
                        let l = n.Y.fromResult(a, this.ssoOrgIDs);
                        return (this.setLocalStorageAuthToken(l), l);
                    }
                    throw (
                        (this.currentAuthTokenRequest = null),
                        Error("Failed to mint new auth token")
                    );
                }
                constructor(
                    e,
                    a = "/github-copilot/chat/token",
                    l = "COPILOT_AUTH_TOKEN"
                ) {
                    (s(this, "tokenEndpoint", void 0),
                        s(this, "storageKey", void 0),
                        s(this, "ssoOrgIDs", void 0),
                        s(this, "currentAuthTokenRequest", void 0),
                        s(this, "copilotLocalStorage", void 0),
                        (this.ssoOrgIDs = e),
                        (this.currentAuthTokenRequest = null),
                        (this.copilotLocalStorage = (0, t.A)("localStorage", {
                            throwQuotaErrorsOnSet: !1,
                            ttl: 864e5,
                        })),
                        (this.storageKey = l),
                        (this.tokenEndpoint = a));
                }
            };
        },
        91819: (e, a, l) => {
            l.d(a, {
                Bc: () => i,
                Qs: () => u,
                fv: () => s,
                uN: () => t,
                wJ: () => o,
                wX: () => r,
                wg: () => n,
            });
            let n = "copilot-chat-textarea",
                t = "copilot-chat-topic-search",
                i = "Review",
                s = "copilot-chat-header-button",
                r = "copilot-diff-header-button",
                o = "copilot-chat-panel",
                u = "copilot-chat-panel";
        },
        640: (e, a, l) => {
            l.d(a, { D: () => n });
            function n(e) {
                if ("clipboard" in navigator)
                    return navigator.clipboard.writeText(e);
                let a = document.body;
                if (!a) return Promise.reject(Error());
                let l = (function (e) {
                    let a = document.createElement("pre");
                    return (
                        (a.style.width = "1px"),
                        (a.style.height = "1px"),
                        (a.style.position = "fixed"),
                        (a.style.top = "5px"),
                        (a.textContent = e),
                        a
                    );
                })(e);
                return (
                    a.appendChild(l),
                    !(function (e) {
                        if ("clipboard" in navigator)
                            return navigator.clipboard.writeText(
                                e.textContent || ""
                            );
                        let a = getSelection();
                        if (null == a) return Promise.reject(Error());
                        a.removeAllRanges();
                        let l = document.createRange();
                        (l.selectNodeContents(e),
                            a.addRange(l),
                            document.execCommand("copy"),
                            a.removeAllRanges(),
                            Promise.resolve());
                    })(l),
                    a.removeChild(l),
                    Promise.resolve()
                );
            }
        },
        39627: (e, a, l) => {
            l.d(a, { D: () => i, Y: () => s });
            var n = l(52811),
                t = l(96679);
            function i(e) {
                if (!t.XC) return;
                let a = t.XC.querySelector("title"),
                    l = t.XC.createElement("title");
                ((l.textContent = e),
                    a
                        ? a.textContent !== e && (a.replaceWith(l), (0, n.i)(e))
                        : (t.XC.head.appendChild(l), (0, n.i)(e)));
            }
            function s(e) {
                return document.body.classList.contains("logged-out")
                    ? `${e} \xb7 GitHub`
                    : e;
            }
        },
        26559: (e, a, l) => {
            l.d(a, { jC: () => o, kt: () => s, tV: () => r });
            var n = l(53005),
                t = l(27851),
                i = l(88191);
            function s(e) {
                let a = {
                    "X-Requested-With": "XMLHttpRequest",
                    ...(0, i.wE)(e),
                };
                return (
                    (0, t.G7)("client_version_header") &&
                        (a = { ...a, [n.S]: (0, n.O)() }),
                    a
                );
            }
            function r(e, a) {
                for (let [l, n] of Object.entries(s(a))) e.set(l, n);
            }
            function o(e) {
                return { "X-GitHub-App-Type": e };
            }
        },
        88191: (e, a, l) => {
            l.d(a, {
                $r: () => s,
                M1: () => r,
                li: () => t,
                pS: () => u,
                wE: () => o,
            });
            var n = l(96679);
            let t = "X-Fetch-Nonce",
                i = new Set();
            function s(e) {
                i.add(e);
            }
            function r() {
                return i.values().next().value || "";
            }
            function o(e) {
                let a = {};
                return (
                    void 0 !== e && (a["X-Fetch-Nonce-To-Validate"] = e),
                    void 0 === e
                        ? (a[t] = r())
                        : i.has(e)
                          ? (a[t] = e)
                          : (a[t] = Array.from(i).join(",")),
                    a
                );
            }
            function u() {
                let e =
                    n.XC?.head?.querySelector('meta[name="fetch-nonce"]')
                        ?.content || "";
                e && s(e);
            }
        },
        66871: (e, a, l) => {
            l.d(a, {
                C3: () => r,
                JV: () => t,
                K3: () => c,
                MM: () => o,
                OE: () => m,
                Zu: () => d,
                bj: () => i,
                jc: () => u,
                kd: () => s,
            });
            var n = l(96679);
            function t() {
                return n.Kn?.state || {};
            }
            function i(e) {
                g(t(), "", e);
            }
            function s(e) {
                (n.Kn?.pushState({ appId: t().appId }, "", e), p());
            }
            function r(e) {
                g({ ...t(), ...e }, "", location.href);
            }
            function o(e) {
                i(`?${e.toString()}${n.fV.hash}`);
            }
            function u() {
                i(n.fV.pathname + n.fV.hash);
            }
            function d(e) {
                i(e.startsWith("#") ? e : `#${e}`);
            }
            function c() {
                i(n.fV.pathname + n.fV.search);
            }
            function m() {
                n.Kn?.back();
            }
            function g(e, a, l) {
                (n.Kn?.replaceState(e, a, l), p());
            }
            function p() {
                n.cg?.dispatchEvent(
                    new CustomEvent("statechange", {
                        bubbles: !1,
                        cancelable: !1,
                    })
                );
            }
        },
        72841: (e, a, l) => {
            l.d(a, { A: () => n });
            let n = (e, a) => {
                let l = new URL(e, window.location.origin),
                    n = new URL(a, window.location.origin);
                return (
                    n.href.includes("#") &&
                    l.host === n.host &&
                    l.pathname === n.pathname &&
                    l.search === n.search
                );
            };
        },
        21153: (e, a, l) => {
            var n,
                t,
                i,
                s,
                r,
                o = l(20551),
                u = l(69689),
                d = l(64527);
            let c = (function () {
                var e = {
                        defaultValue: 10,
                        kind: "LocalArgument",
                        name: "assigneePageSize",
                    },
                    a = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "includeReactions",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "nodes",
                    },
                    n = [
                        {
                            kind: "Variable",
                            name: "ids",
                            variableName: "nodes",
                        },
                    ],
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    s = {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueOrPullRequestUnreadIndicator",
                    },
                    r = [
                        {
                            kind: "Variable",
                            name: "assigneePageSize",
                            variableName: "assigneePageSize",
                        },
                        {
                            kind: "Variable",
                            name: "includeReactions",
                            variableName: "includeReactions",
                        },
                    ],
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCommentsCount",
                        storageKey: null,
                    },
                    u = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                    ],
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    c = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isReadByViewer",
                            storageKey: null,
                        },
                    ],
                    m = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: c,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: c,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    },
                    g = {
                        condition: "includeReactions",
                        kind: "Condition",
                        passingValue: !0,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "ReactionGroup",
                                kind: "LinkedField",
                                name: "reactionGroups",
                                plural: !0,
                                selections: [i],
                                storageKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        condition: "includeReactions",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "ReactionGroup",
                                                kind: "LinkedField",
                                                name: "reactionGroups",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "content",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "ReactorConnection",
                                                        kind: "LinkedField",
                                                        name: "reactors",
                                                        plural: !1,
                                                        selections: u,
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                ],
                                type: "Reactable",
                                abstractKey: "__isReactable",
                            },
                        ],
                    },
                    p = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "assigneePageSize",
                        },
                    ],
                    y = [t],
                    h = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: p,
                                concreteType: "AssigneeConnection",
                                kind: "LinkedField",
                                name: "assignedActors",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "AssigneeEdge",
                                        kind: "LinkedField",
                                        name: "edges",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "node",
                                                plural: !1,
                                                selections: [
                                                    i,
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: y,
                                                        type: "User",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: y,
                                                        type: "Bot",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "login",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: [
                                                                    {
                                                                        kind: "Literal",
                                                                        name: "size",
                                                                        value: 64,
                                                                    },
                                                                ],
                                                                kind: "ScalarField",
                                                                name: "avatarUrl",
                                                                storageKey:
                                                                    "avatarUrl(size:64)",
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "isCopilot",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "Bot",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                        ],
                                                        type: "Actor",
                                                        abstractKey:
                                                            "__isActor",
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: y,
                                                        type: "Node",
                                                        abstractKey: "__isNode",
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "cursor",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "PageInfo",
                                        kind: "LinkedField",
                                        name: "pageInfo",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "endCursor",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "hasNextPage",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: p,
                                filters: null,
                                handle: "connection",
                                key: "IssueAssignees_assignedActors",
                                kind: "LinkedHandle",
                                name: "assignedActors",
                            },
                            {
                                kind: "TypeDiscriminator",
                                abstractKey: "__isNode",
                            },
                        ],
                        type: "Assignable",
                        abstractKey: "__isAssignable",
                    },
                    k = {
                        alias: null,
                        args: null,
                        concreteType: "StatusCheckRollup",
                        kind: "LinkedField",
                        name: "statusCheckRollup",
                        plural: !1,
                        selections: [
                            d,
                            {
                                alias: null,
                                args: null,
                                concreteType:
                                    "StatusCheckRollupContextConnection",
                                kind: "LinkedField",
                                name: "contexts",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "checkRunCount",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "CheckRunStateCount",
                                        kind: "LinkedField",
                                        name: "checkRunCountsByState",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "count",
                                                storageKey: null,
                                            },
                                            d,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            t,
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueRowSecondaryQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    t,
                                    i,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            s,
                                            {
                                                args: r,
                                                kind: "FragmentSpread",
                                                name: "IssueItemMetadata",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueItemSubIssuesSummary",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueItemBlockedBy",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            s,
                                            {
                                                args: r,
                                                kind: "FragmentSpread",
                                                name: "PullRequestItemMetadata",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "PullRequestRowSecondary",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "PullRequestItemHeadCommit",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "CheckRunStatusFromPullRequest",
                                            },
                                        ],
                                        type: "PullRequest",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, e, a],
                        kind: "Operation",
                        name: "IssueRowSecondaryQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    t,
                                    i,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            o,
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 0,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "includeClosedPrs",
                                                        value: !0,
                                                    },
                                                ],
                                                concreteType:
                                                    "PullRequestConnection",
                                                kind: "LinkedField",
                                                name: "closedByPullRequestsReferences",
                                                plural: !1,
                                                selections: u,
                                                storageKey:
                                                    "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "SubIssuesSummary",
                                                kind: "LinkedField",
                                                name: "subIssuesSummary",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "completed",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "percentCompleted",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "total",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            d,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "IssueDependenciesSummary",
                                                kind: "LinkedField",
                                                name: "issueDependenciesSummary",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "blockedBy",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            m,
                                            g,
                                            h,
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            o,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "PullRequestCommit",
                                                kind: "LinkedField",
                                                name: "headCommit",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Commit",
                                                        kind: "LinkedField",
                                                        name: "commit",
                                                        plural: !1,
                                                        selections: [t, k],
                                                        storageKey: null,
                                                    },
                                                    t,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isInMergeQueue",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "reviewDecision",
                                                storageKey: null,
                                            },
                                            k,
                                            m,
                                            g,
                                            h,
                                        ],
                                        type: "PullRequest",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "94d38dded736cdabaf92c2e06e57dc3e",
                        metadata: {},
                        name: "IssueRowSecondaryQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            c.hash = "2ff6561ad9e4d321e65e008ea0b3442a";
            var m = l(48551),
                g = l(96615),
                p = l(3086),
                y = l(74848),
                h = l(27851),
                k = l(16815),
                f = l(96540);
            let b = (0, f.createContext)(null);
            function C({ children: e }) {
                let [a, l] = (0, f.useState)(!1),
                    n = (0, f.useCallback)(() => {
                        l(!1);
                    }, []),
                    t = (0, f.useCallback)(() => {
                        l(!0);
                    }, []),
                    i = (0, f.useMemo)(
                        () => ({
                            isNavigationOpen: a,
                            openNavigation: t,
                            closeNavigation: n,
                        }),
                        [a, t, n]
                    );
                return (0, y.jsx)(b.Provider, { value: i, children: e });
            }
            let S = () => {
                let e = (0, f.useContext)(b);
                if (!e)
                    throw Error(
                        "useNavigationContext must be used within a NavigationContextProvider."
                    );
                return e;
            };
            try {
                b.displayName || (b.displayName = "NavigationContext");
            } catch {}
            try {
                C.displayName || (C.displayName = "NavigationContextProvider");
            } catch {}
            let F = {
                repository: "repository",
                assignedToMe: "assigned",
                pullsAssignedToMe: "pullsAssignedToMe",
                mentioned: "mentioned",
                created: "created",
                recent: "recent",
                new: "new",
                empty: "empty",
            };
            var v = l(13233),
                L = l(35983),
                I = l(64262),
                _ = l(85788),
                x = l(99543),
                K = l(44263),
                w = l(28835);
            let N = [
                    "GRAY",
                    "BLUE",
                    "GREEN",
                    "ORANGE",
                    "RED",
                    "PINK",
                    "PURPLE",
                ],
                j = {
                    GRAY: "Gray",
                    BLUE: "Blue",
                    GREEN: "Green",
                    ORANGE: "Orange",
                    RED: "Red",
                    PINK: "Pink",
                    PURPLE: "Purple",
                },
                R = {
                    GRAY: "var(--bgColor-neutral-muted, var(--color-neutral-subtle))",
                    BLUE: "var(--bgColor-accent-muted, var(--color-accent-subtle))",
                    GREEN: "var(--bgColor-success-muted, var(--color-success-subtle))",
                    ORANGE: "var(--bgColor-severe-muted, var(--color-severe-subtle))",
                    RED: "var(--bgColor-danger-muted, var(--color-danger-subtle))",
                    PINK: "var(--bgColor-sponsors-muted, var(--color-sponsors-subtle))",
                    PURPLE: "var(--bgColor-done-muted, var(--color-done-subtle))",
                },
                T = {
                    GRAY: "var(--fgColor-muted, var(--color-neutral-emphasis))",
                    BLUE: "var(--fgColor-accent, var(--color-accent-fg))",
                    GREEN: "var(--fgColor-success, var(--color-success-fg))",
                    ORANGE: "var(--fgColor-severe, var(--color-severe-fg))",
                    RED: "var(--fgColor-danger, var(--color-danger-fg))",
                    PINK: "var(--fgColor-sponsors, var(--color-sponsors-fg))",
                    PURPLE: "var(--fgColor-done, var(--color-done-fg))",
                };
            var P = l(38621),
                A = l(96679);
            let M = Object.values({
                    closed: "closed",
                    draft: "draft",
                    issue: "issue",
                    locked: "locked",
                    merged: "merged",
                    open: "open",
                    pr: "pr",
                    unlocked: "unlocked",
                    blocked: "blocked",
                    blocking: "blocking",
                }),
                D = [
                    ...Object.values({ public: "public", private: "private" }),
                    ...M,
                ],
                V = Object.values({
                    open: "open",
                    closed: "closed",
                    draft: "draft",
                    merged: "merged",
                }),
                E = {
                    repositoriesPreloadCount: 5,
                    issuesPageSizeDefault: 25,
                    issuesPageSizeMax: 100,
                    issuesPageSize: () => {
                        let e = new URLSearchParams(A.fV.search).get(
                            "pageSize"
                        );
                        return Math.min(
                            e ? parseInt(e) : 25,
                            E.issuesPageSizeMax
                        );
                    },
                    pullRequestsMaxPageSize: 50,
                    labelPageSize: 20,
                    assigneePageSize: 20,
                    viewsPageSize: 25,
                    viewLoadingSize: 6,
                    teamsMaxPreloadCount: 100,
                    teamsPageSize: 25,
                    searchUrlParameterName: "q",
                    maxBulkUpdateIssues: 1e3,
                    maxIssuesListItems: (e, a, l) =>
                        l ? (e && !a ? 5e4 : e && a ? 1e4 : 1e3) : 1e3,
                    localStorageKeyBulkUpdateIssues: "repo.bulkUpdateIssues",
                    storageKeyPrefix: (e) =>
                        e.scoped_repository?.id || "hyperlist",
                    defaultViewIcon: "BOOKMARK",
                    defaultViewColor: "GRAY",
                    defaultQueryForNewView: "",
                    issueIcons: {
                        OPEN: {
                            color: "open.fg",
                            icon: P.IssueOpenedIcon,
                            description: "Open issue",
                        },
                        CLOSED: {
                            color: "done.fg",
                            icon: P.IssueClosedIcon,
                            description: "Closed issue (completed)",
                        },
                        NOT_PLANNED: {
                            color: "fg.muted",
                            icon: P.SkipIcon,
                            description: "Closed issue (not planned)",
                        },
                    },
                    serviceOwners: {
                        notification: "github/notifications",
                        pullRequests: "github/pull_requests",
                        hyperlist: "github/hyperlist_web",
                    },
                    pullRequestIcons: {
                        MERGED: { color: "done.fg", icon: P.GitMergeIcon },
                        IN_MERGE_QUEUE: {
                            color: "attention.fg",
                            icon: P.GitMergeQueueIcon,
                        },
                        OPEN: { color: "open.fg", icon: P.GitPullRequestIcon },
                        CLOSED: {
                            color: "closed.fg",
                            icon: P.GitPullRequestClosedIcon,
                        },
                        DRAFT: {
                            color: "fg.muted",
                            icon: P.GitPullRequestDraftIcon,
                        },
                    },
                };
            function q(e) {
                return B[e] ? B[e] : $[e] ? $[e] : $[E.defaultViewIcon];
            }
            function O(e) {
                return $[e] ? $[e] : $[E.defaultViewIcon];
            }
            let B = {
                    PEOPLE: P.PeopleIcon,
                    SMILEY: P.SmileyIcon,
                    MENTION: P.MentionIcon,
                    CLOCK: P.ClockIcon,
                    GIT_PULL_REQUEST: P.GitPullRequestIcon,
                },
                $ = {
                    ZAP: P.ZapIcon,
                    ISSUE_OPENED: P.IssueOpenedIcon,
                    PERSON: P.PersonIcon,
                    GIT_PULL_REQUEST: P.GitPullRequestIcon,
                    COMMENT_DISCUSSION: P.CommentDiscussionIcon,
                    ORGANIZATION: P.OrganizationIcon,
                    PEOPLE: P.PeopleIcon,
                    BRIEFCASE: P.BriefcaseIcon,
                    FILE_DIFF: P.FileDiffIcon,
                    CODE_REVIEW: P.CodeReviewIcon,
                    CODESCAN: P.CodescanIcon,
                    TERMINAL: P.TerminalIcon,
                    TOOLS: P.ToolsIcon,
                    BEAKER: P.BeakerIcon,
                    ALERT: P.AlertIcon,
                    EYE: P.EyeIcon,
                    TELESCOPE: P.TelescopeIcon,
                    BOOKMARK: P.BookmarkIcon,
                    CALENDAR: P.CalendarIcon,
                    METER: P.MeterIcon,
                    MOON: P.MoonIcon,
                    SUN: P.SunIcon,
                    FLAME: P.FlameIcon,
                    BUG: P.BugIcon,
                    NORTH_STAR: P.NorthStarIcon,
                    ROCKET: P.RocketIcon,
                    SQUIRREL: P.SquirrelIcon,
                    HUBOT: P.HubotIcon,
                    DEPENDABOT: P.DependabotIcon,
                    SMILEY: P.SmileyIcon,
                    MENTION: P.MentionIcon,
                    CLOCK: P.ClockIcon,
                },
                Q = (e) => Math.abs(e).toLocaleString(),
                U = {
                    numberOfResults: (e) =>
                        `${Q(e)} ${1 === e ? "result" : "results"}`,
                    documentTitleForView: (e) =>
                        e ? `${e} \xb7 Issues` : "Issues",
                    documentTitleForRepository: (e, a) =>
                        `Issues \xb7 ${e}/${a}`,
                    beta: "Beta",
                    preview: "Preview",
                    allViews: "All views",
                    defaultViews: "Default views",
                    loadingQueryResults: ".. loading results",
                    issueEditingSearchInputAriaLabel: "Query",
                    issueSearchInputAriaLabel: "Search Issues",
                    issueSearchInputPlaceholder: "Search Issues",
                    viewSidebarPaneAriaLabel: "Navigation sidebar",
                    issueCreatePaneTitle: "Create new issue",
                    appHeader: "Issues",
                    searchResults: "Search results",
                    singularUnits: (e) =>
                        e.has("Issue") && e.has("PullRequest")
                            ? "issue or pull request"
                            : e.has("Issue")
                              ? "issue"
                              : e.has("PullRequest")
                                ? "pull request"
                                : void 0,
                    pluralUnits: (e) =>
                        e.has("Issue") && e.has("PullRequest")
                            ? "issues and pull requests"
                            : e.has("Issue")
                              ? "issues"
                              : e.has("PullRequest")
                                ? "pull requests"
                                : void 0,
                    updatingIssues: "Updating issues",
                    viewsTitle: "Views",
                    views: {
                        createLink: "Create view",
                        defaultName: "Untitled view",
                        edit: "Edit view",
                        editButtonAriaLabel: "Saved views menu",
                        saveChangesToView: "Save changes to view",
                        createError: "Could not create a new view",
                        updateError: "Could not update the view",
                        iconAndColorAnchorAriaLabel: "Change icon and color",
                        deleteTitle: "Delete view",
                        deleteContent: (e) =>
                            `Are you sure you want to delete view ${e}?`,
                        deleteConfirmationButton: "Delete",
                        deleteError: "Could not delete view",
                        duplicate: "Duplicate",
                        delete: "Delete",
                        duplicateError: "Could not duplicate view",
                        editViewTitleAriaLabel: (e) => `Edit ${e} title`,
                        editViewDescriptionAriaLabel: (e) =>
                            `Edit ${e} description`,
                        editViewAriaLabel: (e) => `Edit ${e}`,
                        maxViewsReached:
                            "You have reached the maximum number of saved views",
                        maxViewsTooltip: "Maximum number of views reached",
                        maxViewsDescription:
                            "Please remove an existing view before creating a new one.",
                        teams: "Teams",
                        icon: "Icon",
                        color: "Color",
                        noTeamsSelectedHeading: "No teams selected.",
                        noTeamsSelectedDescription:
                            "Choose teams that show up in your sidebar.",
                        manageTeamsDescription:
                            "Choose teams that show up in your sidebar.",
                        loadingSelectedTeams: "Loading selected teams",
                        selectedTeams: "Currently selected",
                        unsavedChangesTitle: "You have unsaved changes",
                        unsavedChangesContent:
                            "Are you sure you want to discard them?",
                    },
                    filters: {
                        author: "Author",
                        authorLabel: "Filter by author",
                        labels: "Labels",
                        labelsLabel: "Filter by label",
                        projects: "Projects",
                        projectsLabel: "Filter by project",
                        milestones: "Milestones",
                        milestonesLabel: "Filter by milestone",
                        assignees: "Assignees",
                        assigneesLabel: "Filter by assignees",
                        issueType: "Types",
                        issueTypeLabel: "Filter by issue type",
                    },
                    bulkActions: "Bulk actions",
                    announcePage: (e, a, l) =>
                        `Page ${e} of ${a} loaded with ${l} items`,
                    sidePanelTooltip: "View issue",
                    viewProfile: (e) => `View ${e}'s profile`,
                },
                H = Object.values(F),
                z = {
                    color: E.defaultViewColor,
                    description: "",
                    scopingRepository: null,
                },
                W = {
                    id: F.assignedToMe,
                    name: "Assigned to me",
                    query: L.Ds.assignedToMe,
                    icon: "PEOPLE",
                    hidden: !1,
                    ...z,
                },
                G = {
                    id: F.repository,
                    name: "Issues",
                    query: "is:issue state:open",
                    icon: "PEOPLE",
                    hidden: !0,
                    ...z,
                },
                Z = {
                    id: F.pullsAssignedToMe,
                    name: "Assigned to me",
                    query: L.Ds.pullsAssignedToMe,
                    icon: "PEOPLE",
                    hidden: !0,
                    ...z,
                },
                X = {
                    id: F.mentioned,
                    name: "Mentioned",
                    query: L.Ds.mentioned,
                    icon: "MENTION",
                    hidden: !1,
                    ...z,
                },
                J = {
                    id: F.created,
                    name: "Created by me",
                    query: L.Ds.createdByMe,
                    icon: "SMILEY",
                    ...z,
                },
                Y = {
                    id: F.recent,
                    name: "Recent activity",
                    query: L.Ds.recentActivity,
                    icon: "CLOCK",
                    ...z,
                },
                ee = {
                    id: F.empty,
                    name: "Issues",
                    query: "is:issue state:open",
                    icon: "ISSUE_OPENED",
                    hidden: !0,
                    ...z,
                },
                ea = {
                    id: F.new,
                    name: "New",
                    query: "is:issue state:open",
                    icon: "ISSUE_OPENED",
                    hidden: !0,
                    ...z,
                },
                el = ["created_by", "assigned", "mentioned"],
                en = {
                    defaultQuery: "is:issue state:open",
                    query: (e) =>
                        e.author
                            ? e.createdByApp
                                ? `author:app/${e.author}`
                                : `author:${e.author}`
                            : e.assignee
                              ? `assignee:${e.assignee}`
                              : e.mentioned
                                ? `mentions:${e.mentioned}`
                                : e.label
                                  ? `label:${e.label}`
                                  : void 0,
                },
                et = [W, J, X, Y, G];
            function ei() {
                return (0, f.useMemo)(() => {
                    let e = [...et];
                    (e.push(ee), e.push(Z));
                    let a = e.map((e, a) => ({
                        id: e.id,
                        name: e.name,
                        query: e.query,
                        position: a + 1,
                        url: e.url,
                    }));
                    return { knownViews: e, knownViewRoutes: a };
                }, []);
            }
            let es = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "query",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "icon",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "scopingRepository",
                        plural: !1,
                        selections: [
                            n,
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "login",
                                        storageKey: null,
                                    },
                                    l,
                                ],
                                storageKey: null,
                            },
                            l,
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "createUserViewMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType:
                                    "CreateDashboardSearchShortcutPayload",
                                kind: "LinkedField",
                                name: "createDashboardSearchShortcut",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "UserDashboard",
                                        kind: "LinkedField",
                                        name: "dashboard",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "SavedViewsShortcutsFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "SearchShortcut",
                                        kind: "LinkedField",
                                        name: "shortcut",
                                        plural: !1,
                                        selections: [
                                            l,
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ListCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueDetailCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ViewOptionsButtonCurrentViewFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "createUserViewMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType:
                                    "CreateDashboardSearchShortcutPayload",
                                kind: "LinkedField",
                                name: "createDashboardSearchShortcut",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "UserDashboard",
                                        kind: "LinkedField",
                                        name: "dashboard",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 25,
                                                    },
                                                ],
                                                concreteType:
                                                    "SearchShortcutConnection",
                                                kind: "LinkedField",
                                                name: "shortcuts",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "totalCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchShortcut",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            l,
                                                            n,
                                                            t,
                                                            i,
                                                            s,
                                                            r,
                                                            o,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "shortcuts(first:25)",
                                            },
                                            l,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "SearchShortcut",
                                        kind: "LinkedField",
                                        name: "shortcut",
                                        plural: !1,
                                        selections: [
                                            l,
                                            {
                                                kind: "InlineFragment",
                                                selections: [n, t, o, r, i, s],
                                                type: "Shortcutable",
                                                abstractKey: "__isShortcutable",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "9c69ef5db2b7a6ba9b7a43beb107c0a7",
                        metadata: {},
                        name: "createUserViewMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            es.hash = "978a652c70807df3e50daa5d8647aa7a";
            var er = l(18312);
            let eo = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "updateUserViewMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType:
                                    "UpdateDashboardSearchShortcutPayload",
                                kind: "LinkedField",
                                name: "updateDashboardSearchShortcut",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "SearchShortcut",
                                        kind: "LinkedField",
                                        name: "shortcut",
                                        plural: !1,
                                        selections: [
                                            l,
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "SavedViewRow",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ListCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueDetailCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ViewOptionsButtonCurrentViewFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "updateUserViewMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType:
                                    "UpdateDashboardSearchShortcutPayload",
                                kind: "LinkedField",
                                name: "updateDashboardSearchShortcut",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "SearchShortcut",
                                        kind: "LinkedField",
                                        name: "shortcut",
                                        plural: !1,
                                        selections: [
                                            l,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "icon",
                                                storageKey: null,
                                            },
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "color",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "query",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "scopingRepository",
                                                plural: !1,
                                                selections: [
                                                    n,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "__typename",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "login",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            l,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    l,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                kind: "TypeDiscriminator",
                                                abstractKey: "__isShortcutable",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "379dbe4cf68c3485e48df2f699f5ae75",
                        metadata: {},
                        name: "updateUserViewMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            eo.hash = "282efc7d24d57d889c4696570696b677";
            var eu = l(23224);
            let ed = /\/(?<owner>.*)\/(?<repo>.*)\/issues\/(?<number>\d+)/,
                ec = /issues(\/\d+|\/new(\/choose)*|\/)*/g,
                em = (e) => eg(e) || ep(e),
                eg = (e) => "/issues/new" === e,
                ep = (e) => e.indexOf("/issues/new") > 0,
                ey = (e) => /^\/[^/]+\/[^/]+\/labels\/[^/?#]+/.test(e),
                eh = (e) => el.some((a) => e.indexOf(`/issues/${a}`) > 0),
                ek = (e) => e.includes("/issues/created_by/app/"),
                ef = (e, a, l) =>
                    !!e.startsWith(window.location.origin) &&
                    e.indexOf(`/${a}/${l}/issues`) > -1,
                eb = (e) => e.includes(L.Ds.open),
                eC = (e) => e.includes(L.Ds.closed),
                eS = (e) => e.includes(`-${L.Ds.open}`),
                eF = (e) => e.includes(`-${L.Ds.closed}`),
                ev = (e) => {
                    let a;
                    if (
                        !(e = e.trim()) ||
                        ((a = e),
                        [
                            L.Ds.defaultRepoLevelOpen,
                            L.Ds.defaultRepoLevelClosed,
                        ].includes(
                            a
                                .split(" ")
                                .filter((e) => e && " " !== e)
                                .sort((e) => ("is:issue" === e ? -1 : 1))
                                .join(" ")
                        ))
                    )
                        return "";
                    let l = eb((e = eL(e))),
                        n = eC(e),
                        t = eS(e),
                        i = eF(e);
                    return t && !i
                        ? e.replaceAll(`-${L.Ds.open}`, `-${L.Ds.closed}`)
                        : !n || l || i
                          ? l || i
                              ? e.trim()
                              : (e = e.trim()).length > 0
                                ? `${e.trim()} ${L.Ds.open}`
                                : L.Ds.open
                          : e.replaceAll(L.Ds.closed, L.Ds.open);
                },
                eL = (e) =>
                    e.replace(/(^|\s)is:(open|closed)(\s|$)/g, "$1state:$2$3"),
                eI = (e, a) =>
                    null === e.match(/(\?|&)page=-?\d+/)
                        ? -1 === e.indexOf("?")
                            ? `${e}?page=${a}`
                            : `${e}&page=${a}`
                        : e.replace(/(\?|&)page=-?\d+/, `$1page=${a}`),
                e_ = (e, a) => {
                    let l = NaN,
                        n = e.get("pageSize");
                    n &&
                        (l = Math.min(
                            (l =
                                (l = parseInt(n)) &&
                                Number.isInteger(l) &&
                                l >= 0
                                    ? l
                                    : NaN),
                            E.issuesPageSizeMax
                        )) &&
                        (a.first = l);
                    let t = e.get("page"),
                        i = t ? parseInt(t) : void 0;
                    i && Number.isInteger(i) && i > 1
                        ? (a.skip = (i - 1) * (l || E.issuesPageSizeDefault))
                        : (a.skip = 0);
                },
                ex = (e) =>
                    RegExp(
                        `\\b${e}:("([^"]*)"|[^,\\s\\)]+)(\\s*,\\s*("(?:\\"|.)*?"|[^,\\s]+))*`,
                        "gim"
                    ),
                eK = (e, a) => {
                    let l,
                        n = ex(a),
                        t = [];
                    for (; null !== (l = n.exec(e)); ) t.push(l[0]);
                    let i = [];
                    if (t && t.length) {
                        for (l of t) {
                            let e = l.slice(`${a}:`.length).split(",");
                            if (e) for (let a of e) i.push(a.trim());
                        }
                        return i;
                    }
                    return [];
                };
            function ew(e) {
                let a = !1,
                    l = "",
                    n = "";
                for (let t of e)
                    ('"' === t && "\\" !== n && (a = !a),
                        (" " !== t || a || " " !== n) && (l += t),
                        (n = t));
                return l.trim();
            }
            let eN = (e, a, l) => {
                    let n = eK(e, l);
                    e.includes(`no:${l}`) && (e = e.replace(`no:${l}`, ""));
                    let t = a.filter((e) => !n.includes(e)),
                        i = n.filter((e) => !a.includes(e)),
                        s = e.slice();
                    for (let e of i) {
                        let a = (0, eu.A)(e);
                        s = s.replace(RegExp(`-?${l}:${a}`, "g"), "");
                    }
                    for (let e of t) {
                        if (e === `no:${l}`) {
                            s = `${s} ${e} `;
                            continue;
                        }
                        let a =
                            e.indexOf(" ") > -1 && !e.match(/".+"/)
                                ? `"${e}"`
                                : e;
                        s = `${s} ${l}:${a}`;
                    }
                    return ew(s);
                },
                ej = (e, a, l, n) => {
                    let t = ex(l),
                        i = e.replace(t, "").replace(`no:${l}`, "").trim();
                    if (!a.length) return ew(i);
                    let s = a.map((e) => (e.includes(" ") ? `"${e}"` : e)),
                        r = n ? `no:${l}` : `${l}:${s.join(",")}`;
                    return ew(`${i} ${r}`);
                },
                eR = (e, a, l) => {
                    let n = e.match(RegExp(`${a}:([^\\s]+)`));
                    if (n) {
                        let [a, t] = n;
                        if (!l.includes(t || ""))
                            return e.replace(a, "").replace(/\s+/g, " ").trim();
                    }
                    return e;
                },
                eT = (0, f.createContext)({
                    viewPosition: void 0,
                    setViewPosition: v.l,
                    isCustomView: (e) => "" === e,
                    isEditing: !1,
                    setIsEditing: v.l,
                    isQueryLoading: !1,
                    setIsQueryLoading: v.l,
                    saveViewsConnectionId: void 0,
                    setSaveViewsConnectionId: v.l,
                    activeSearchQuery: "",
                    setActiveSearchQuery: v.l,
                    canEditView: !1,
                    setCanEditView: v.l,
                    isNewView: !1,
                    setIsNewView: v.l,
                    executeQuery: void 0,
                    setExecuteQuery: v.l,
                    dirtyViewId: void 0,
                    setDirtyViewId: v.l,
                    currentViewId: F.empty,
                    setCurrentViewId: v.l,
                    currentPage: void 0,
                    setCurrentPage: v.l,
                    savedViewsCount: 0,
                    setSavedViewsCount: v.l,
                }),
                eP = (0, f.createContext)({
                    commitUserViewCreate: v.l,
                    commitUserViewEdit: v.l,
                    commitUserViewDuplicate: v.l,
                    dirtySearchQuery: "",
                    debouncedDirtySearchQuery: null,
                    setDirtySearchQuery: v.l,
                    dirtyTitle: "",
                    setDirtyTitle: v.l,
                    dirtyDescription: "",
                    setDirtyDescription: v.l,
                    dirtyViewIcon: null,
                    setDirtyViewIcon: v.l,
                    dirtyViewColor: null,
                    setDirtyViewColor: v.l,
                    bulkJobId: null,
                    setBulkJobId: v.l,
                    clearSavedViewEditState: v.l,
                    shouldFocusSearchOnNav: !1,
                    setShouldFocusSearchOnNav: v.l,
                });
            function eA({ children: e }) {
                let {
                        initial_view_content: { can_edit_view: a },
                    } = (0, I.X)(),
                    { addToast: l } = (0, x.Y6)(),
                    { search: n } = (0, _.zy)(),
                    t = new URLSearchParams(n).get("q"),
                    i = t && "" !== t ? t : L.Ds.defaultRepoLevelOpen,
                    [s, r] = (0, f.useState)(a),
                    [o, u] = (0, f.useState)(null),
                    [d, c] = (0, f.useState)(i),
                    [m, g] = (0, f.useState)(void 0),
                    [p, h] = (0, f.useState)(void 0),
                    [k, b] = (0, f.useState)(null),
                    [C, S] = (0, f.useState)(null),
                    [v, N] = (0, f.useState)(null),
                    [j, R] = (0, f.useState)(null),
                    [P, A] = (0, f.useState)(void 0),
                    M = (() => {
                        let { scoped_repository: e } = (0, I.X)(),
                            { pathname: a } = (0, _.zy)();
                        if (a.match(ed))
                            return e ? F.repository : F.assignedToMe;
                        let l = a.split("/").pop() || "";
                        return e && a.match(ec)
                            ? F.repository
                            : "issues" !== l && l
                              ? l
                              : F.empty;
                    })(),
                    [D, V] = (0, f.useState)(M),
                    [q, O] = (0, f.useState)(!1),
                    [B, Q] = (0, f.useState)(!1),
                    [H, z] = (0, f.useState)(!1),
                    { knownViews: W } = ei(),
                    [G, Z] = (0, f.useState)(),
                    [X, J] = (0, f.useState)(),
                    [Y, ee] = (0, f.useState)(!1),
                    [ea, el] = (0, f.useState)(0),
                    [en, et] = (0, f.useState)(null),
                    eu = (0, K.d)(et, 500);
                (0, f.useEffect)(() => {
                    eu(o);
                }, [eu, o]);
                let [em, eg] = (0, w.M)(
                        E.localStorageKeyBulkUpdateIssues,
                        null
                    ),
                    ep = (0, f.useCallback)(
                        (e) => !!e && -1 === W.findIndex((a) => a.id === e),
                        [W]
                    ),
                    ey = (0, f.useCallback)(() => {
                        (u(null),
                            b(null),
                            S(null),
                            N(null),
                            R(null),
                            A(void 0),
                            ee(!1));
                    }, []),
                    eh = (0, f.useCallback)(
                        ({
                            viewId: e,
                            viewName: a,
                            viewIcon: n,
                            viewColor: t,
                            viewDescription: i,
                            viewQuery: s,
                            onSuccess: r,
                            onError: o,
                            relayEnvironment: u,
                        }) => {
                            ep(e) &&
                                (function ({
                                    environment: e,
                                    input: a,
                                    onCompleted: l,
                                    onError: n,
                                }) {
                                    ((a.scopingRepository = null),
                                        (0, er.commitMutation)(e, {
                                            mutation: eo,
                                            optimisticResponse: {
                                                updateDashboardSearchShortcut: {
                                                    shortcut: {
                                                        __isShortcutable:
                                                            "SearchShortcut",
                                                        id: a.shortcutId,
                                                        name: a.name,
                                                        icon: a.icon,
                                                        color: a.color,
                                                        description:
                                                            a.description,
                                                        query: a.query,
                                                        scopingRepository: null,
                                                    },
                                                },
                                            },
                                            variables: { input: a },
                                            onCompleted: (e) => l && l(e),
                                            onError: (e) => n && n(e),
                                        }));
                                })({
                                    environment: u,
                                    input: {
                                        shortcutId: e,
                                        query: s,
                                        name: a,
                                        description: i,
                                        icon: n,
                                        color: t,
                                    },
                                    onError: () => {
                                        (l({
                                            type: "error",
                                            message: U.views.updateError,
                                        }),
                                            o?.());
                                    },
                                    onCompleted: (e) => {
                                        r?.(e);
                                    },
                                });
                        },
                        [ep, l]
                    ),
                    ek = (0, f.useCallback)(
                        ({
                            input: e,
                            onSuccess: a,
                            onError: n,
                            relayEnvironment: t,
                        }) => (
                            (e.name = e.name || U.views.defaultName),
                            (e.query =
                                null === e.query || void 0 === e.query
                                    ? o
                                    : e.query),
                            (function ({
                                environment: e,
                                input: a,
                                onError: l,
                                onCompleted: n,
                            }) {
                                return (0, er.commitMutation)(e, {
                                    mutation: es,
                                    variables: { input: a },
                                    onError: (e) => l && l(e),
                                    onCompleted: (e) => {
                                        n?.(e);
                                    },
                                });
                            })({
                                environment: t,
                                input: e,
                                onError: () => {
                                    (l({
                                        type: "error",
                                        message: U.views.createError,
                                    }),
                                        n?.());
                                },
                                onCompleted: (e) => {
                                    a?.(e);
                                },
                            })
                        ),
                        [o, l]
                    ),
                    ef = (0, f.useCallback)(
                        ({ onSuccess: e, onError: a, relayEnvironment: l }) =>
                            ek({
                                input: {
                                    query: E.defaultQueryForNewView,
                                    name: U.views.defaultName,
                                    searchType: "ISSUES",
                                    icon: E.defaultViewIcon,
                                    color: E.defaultViewColor,
                                },
                                onSuccess: e,
                                onError: a,
                                relayEnvironment: l,
                            }),
                        [ek]
                    ),
                    eb = (0, f.useCallback)(
                        ({
                            onSuccess: e,
                            onError: a,
                            viewName: l,
                            viewIcon: n,
                            viewColor: t,
                            viewDescription: i,
                            viewQuery: s,
                            relayEnvironment: r,
                        }) =>
                            ek({
                                input: {
                                    query: s,
                                    name: `${l} copy`,
                                    description: i,
                                    color: T[t] ? t : E.defaultViewColor,
                                    icon: $[n] ? n : E.defaultViewIcon,
                                    searchType: "ISSUES",
                                },
                                onSuccess: e,
                                onError: a,
                                relayEnvironment: r,
                            }),
                        [ek]
                    ),
                    eC = (0, f.useMemo)(
                        () => ({
                            isEditing: q,
                            setIsEditing: O,
                            isQueryLoading: B,
                            setIsQueryLoading: Q,
                            viewPosition: m,
                            setViewPosition: g,
                            isCustomView: ep,
                            saveViewsConnectionId: p,
                            setSaveViewsConnectionId: h,
                            activeSearchQuery: d,
                            setActiveSearchQuery: c,
                            canEditView: s,
                            setCanEditView: r,
                            isNewView: H,
                            setIsNewView: z,
                            executeQuery: X,
                            setExecuteQuery: J,
                            dirtyViewId: P,
                            setDirtyViewId: A,
                            currentViewId: D,
                            setCurrentViewId: V,
                            currentPage: G,
                            setCurrentPage: Z,
                            savedViewsCount: ea,
                            setSavedViewsCount: el,
                        }),
                        [q, B, m, ep, p, d, s, H, X, P, D, G, ea]
                    ),
                    eS = (0, f.useMemo)(
                        () => ({
                            commitUserViewCreate: ef,
                            commitUserViewDuplicate: eb,
                            commitUserViewEdit: eh,
                            dirtySearchQuery: o,
                            setDirtySearchQuery: u,
                            debouncedDirtySearchQuery: en,
                            dirtyDescription: C,
                            setDirtyDescription: S,
                            dirtyViewIcon: v,
                            setDirtyViewIcon: N,
                            dirtyTitle: k,
                            setDirtyTitle: b,
                            dirtyViewColor: j,
                            setDirtyViewColor: R,
                            dirtyViewId: P,
                            setDirtyViewId: A,
                            bulkJobId: em,
                            setBulkJobId: eg,
                            clearSavedViewEditState: ey,
                            shouldFocusSearchOnNav: Y,
                            setShouldFocusSearchOnNav: ee,
                        }),
                        [ef, eb, eh, o, en, C, v, k, j, P, em, eg, ey, Y]
                    );
                return (0, y.jsx)(eT.Provider, {
                    value: eC,
                    children: (0, y.jsx)(eP.Provider, {
                        value: eS,
                        children: e,
                    }),
                });
            }
            function eM() {
                return (0, f.useContext)(eT);
            }
            function eD() {
                return (0, f.useContext)(eP);
            }
            try {
                eT.displayName || (eT.displayName = "QueryContext");
            } catch {}
            try {
                eP.displayName || (eP.displayName = "QueryEditContext");
            } catch {}
            try {
                eA.displayName || (eA.displayName = "QueryContextProvider");
            } catch {}
            function eV({ children: e }) {
                return (0, y.jsx)(C, {
                    children: (0, y.jsx)(eA, {
                        children: (0, y.jsxs)(k.e, {
                            children: [
                                (0, h.G7)("primer_react_unified_portal_root")
                                    ? null
                                    : (0, y.jsx)("div", {
                                          role: "region",
                                          id: "__primerPortalRoot__",
                                          style: {
                                              zIndex: 15,
                                              position: "absolute",
                                              width: "100%",
                                          },
                                      }),
                                (0, y.jsx)(f.Suspense, {
                                    fallback: (0, y.jsx)("span", {
                                        children: "Loading...",
                                    }),
                                    children: e,
                                }),
                            ],
                        }),
                    }),
                });
            }
            try {
                eV.displayName || (eV.displayName = "App");
            } catch {}
            let eE = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [],
                        kind: "Fragment",
                        metadata: null,
                        name: "SavedViewsQuery",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "viewer",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "UserDashboard",
                                        kind: "LinkedField",
                                        name: "dashboard",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "SavedViewsShortcutsFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [],
                        kind: "Operation",
                        name: "SavedViewsQuery",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "viewer",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "UserDashboard",
                                        kind: "LinkedField",
                                        name: "dashboard",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 25,
                                                    },
                                                ],
                                                concreteType:
                                                    "SearchShortcutConnection",
                                                kind: "LinkedField",
                                                name: "shortcuts",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "totalCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchShortcut",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            e,
                                                            a,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "query",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "icon",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "color",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "description",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "scopingRepository",
                                                                plural: !1,
                                                                selections: [
                                                                    a,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "owner",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "__typename",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "login",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                e,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    e,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "shortcuts(first:25)",
                                            },
                                            e,
                                        ],
                                        storageKey: null,
                                    },
                                    e,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "17e97e226c53190b027f4463ad14930c",
                        metadata: {},
                        name: "SavedViewsQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eE.hash = "932ef79751b6703da678e9566282bebd";
            let eq = (function () {
                var e = [
                        {
                            defaultValue: "assigned",
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    a = [{ kind: "Variable", name: "id", variableName: "id" }],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ClientSideRelayDataGeneratorViewQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ListCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueDetailCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ViewOptionsButtonCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "DashboardSearchCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueDashboardCustomViewPageCurrentViewFragment",
                                            },
                                        ],
                                        type: "Shortcutable",
                                        abstractKey: "__isShortcutable",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ClientSideRelayDataGeneratorViewQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    l,
                                    n,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            t,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "query",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "scopingRepository",
                                                plural: !1,
                                                selections: [
                                                    t,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [
                                                            l,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "login",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            n,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    n,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "icon",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "color",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Shortcutable",
                                        abstractKey: "__isShortcutable",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "7f3619bf561a2557f3f66ac4573a1484",
                        metadata: {},
                        name: "ClientSideRelayDataGeneratorViewQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eq.hash = "e6f9adaa490e46c90c0c67c9a654141d";
            let eO = (function () {
                var e = {
                        defaultValue: 25,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    a = {
                        defaultValue: 20,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    l = {
                        defaultValue:
                            "state:open archived:false assignee:@me sort:updated-desc",
                        kind: "LocalArgument",
                        name: "query",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    t = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    i = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    s = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    r = [
                        t,
                        i,
                        s,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            m,
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [o, p, u],
                                storageKey: null,
                            },
                            u,
                        ],
                        storageKey: null,
                    },
                    h = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "labelPageSize",
                        },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "endCursor",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: h,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            u,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            g,
                                            m,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            o,
                                        ],
                                        storageKey: null,
                                    },
                                    k,
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [f, b],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: h,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            p,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            o,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                            u,
                        ],
                        storageKey: null,
                    },
                    x = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                c,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                                u,
                            ],
                            storageKey: null,
                        },
                    ],
                    K = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    },
                    w = {
                        kind: "InlineFragment",
                        selections: [
                            C,
                            S,
                            F,
                            v,
                            L,
                            I,
                            _,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                            K,
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    N = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    j = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    R = {
                        kind: "InlineFragment",
                        selections: [u],
                        type: "Node",
                        abstractKey: "__isNode",
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueDashboardCustomViewPageQuery",
                        selections: [
                            {
                                args: [
                                    {
                                        kind: "Literal",
                                        name: "fetchRepository",
                                        value: !0,
                                    },
                                    t,
                                    {
                                        kind: "Variable",
                                        name: "labelPageSize",
                                        variableName: "labelPageSize",
                                    },
                                    i,
                                    s,
                                ],
                                kind: "FragmentSpread",
                                name: "IssueDashboardCustomViewPageSearchListFragment",
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, e, a, n],
                        kind: "Operation",
                        name: "IssueDashboardCustomViewPageQuery",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: r,
                                        concreteType:
                                            "SearchResultItemConnection",
                                        kind: "LinkedField",
                                        name: "search",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueCount",
                                                storageKey: null,
                                            },
                                            {
                                                if: null,
                                                kind: "Stream",
                                                label: "ListItemsPaginated_results$stream$Query_search",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchResultItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    o,
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                d,
                                                                                c,
                                                                                {
                                                                                    alias: "titleHtml",
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "IssueType",
                                                                                    kind: "LinkedField",
                                                                                    name: "issueType",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            u,
                                                                                            m,
                                                                                            g,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                y,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            w,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        C,
                                                                                                        S,
                                                                                                        F,
                                                                                                        v,
                                                                                                        L,
                                                                                                        I,
                                                                                                        _,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "reviewDecision",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        N,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "isInMergeQueue",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        j,
                                                                                                        K,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "Issue",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                d,
                                                                                y,
                                                                                c,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            w,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        C,
                                                                                                        S,
                                                                                                        F,
                                                                                                        v,
                                                                                                        L,
                                                                                                        I,
                                                                                                        _,
                                                                                                        N,
                                                                                                        j,
                                                                                                        K,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "PullRequest",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    R,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            k,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                            {
                                                if: null,
                                                kind: "Defer",
                                                label: "ListItemsPaginated_results$defer$Query_search$pageInfo",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "startCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            f,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasPreviousPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            b,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: r,
                                        filters: ["query", "type", "skip"],
                                        handle: "connection",
                                        key: "Query_search",
                                        kind: "LinkedHandle",
                                        name: "search",
                                    },
                                    R,
                                ],
                                type: "Searchable",
                                abstractKey: "__isSearchable",
                            },
                        ],
                    },
                    params: {
                        id: "0904c58cfdb7c1617a06071564c75fef",
                        metadata: {},
                        name: "IssueDashboardCustomViewPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eO.hash = "18c3535d4511710ecc3e0c92c3536268";
            let eB = (function () {
                var e = {
                        defaultValue: 25,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    a = {
                        defaultValue: 20,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    l = {
                        defaultValue:
                            "state:open archived:false assignee:@me sort:updated-desc",
                        kind: "LocalArgument",
                        name: "query",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    t = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    i = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    s = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    r = [
                        t,
                        i,
                        s,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            m,
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [o, p, u],
                                storageKey: null,
                            },
                            u,
                        ],
                        storageKey: null,
                    },
                    h = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "labelPageSize",
                        },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "endCursor",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: h,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            u,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            g,
                                            m,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            o,
                                        ],
                                        storageKey: null,
                                    },
                                    k,
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [f, b],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: h,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            p,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            o,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                            u,
                        ],
                        storageKey: null,
                    },
                    x = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                c,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                                u,
                            ],
                            storageKey: null,
                        },
                    ],
                    K = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    },
                    w = {
                        kind: "InlineFragment",
                        selections: [
                            C,
                            S,
                            F,
                            v,
                            L,
                            I,
                            _,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                            K,
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    N = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    j = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    R = {
                        kind: "InlineFragment",
                        selections: [u],
                        type: "Node",
                        abstractKey: "__isNode",
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueDashboardKnownViewPageQuery",
                        selections: [
                            {
                                args: [
                                    {
                                        kind: "Literal",
                                        name: "fetchRepository",
                                        value: !0,
                                    },
                                    t,
                                    {
                                        kind: "Variable",
                                        name: "labelPageSize",
                                        variableName: "labelPageSize",
                                    },
                                    i,
                                    s,
                                ],
                                kind: "FragmentSpread",
                                name: "ListQuery",
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, e, a, n],
                        kind: "Operation",
                        name: "IssueDashboardKnownViewPageQuery",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: r,
                                        concreteType:
                                            "SearchResultItemConnection",
                                        kind: "LinkedField",
                                        name: "search",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueCount",
                                                storageKey: null,
                                            },
                                            {
                                                if: null,
                                                kind: "Stream",
                                                label: "ListItemsPaginated_results$stream$Query_search",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchResultItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    o,
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                d,
                                                                                c,
                                                                                {
                                                                                    alias: "titleHtml",
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "IssueType",
                                                                                    kind: "LinkedField",
                                                                                    name: "issueType",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            u,
                                                                                            m,
                                                                                            g,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                y,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            w,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        C,
                                                                                                        S,
                                                                                                        F,
                                                                                                        v,
                                                                                                        L,
                                                                                                        I,
                                                                                                        _,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "reviewDecision",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        N,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "isInMergeQueue",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        j,
                                                                                                        K,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "Issue",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                d,
                                                                                y,
                                                                                c,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            w,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        C,
                                                                                                        S,
                                                                                                        F,
                                                                                                        v,
                                                                                                        L,
                                                                                                        I,
                                                                                                        _,
                                                                                                        N,
                                                                                                        j,
                                                                                                        K,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "PullRequest",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    R,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            k,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                            {
                                                if: null,
                                                kind: "Defer",
                                                label: "ListItemsPaginated_results$defer$Query_search$pageInfo",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "startCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            f,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasPreviousPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            b,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: r,
                                        filters: ["query", "type", "skip"],
                                        handle: "connection",
                                        key: "Query_search",
                                        kind: "LinkedHandle",
                                        name: "search",
                                    },
                                    R,
                                ],
                                type: "Searchable",
                                abstractKey: "__isSearchable",
                            },
                        ],
                    },
                    params: {
                        id: "1ccdc9637e9fd1120cb0684d5e967f3e",
                        metadata: {},
                        name: "IssueDashboardKnownViewPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eB.hash = "d2885256150d2e97f35fa8cf05ee801d";
            let e$ = (function () {
                var e = {
                        defaultValue: 25,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    a = {
                        defaultValue: 20,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    l = {
                        defaultValue:
                            "state:open archived:false assignee:@me sort:updated-desc",
                        kind: "LocalArgument",
                        name: "query",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    t = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    i = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    s = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    r = [
                        t,
                        i,
                        s,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            m,
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [o, p, u],
                                storageKey: null,
                            },
                            u,
                        ],
                        storageKey: null,
                    },
                    h = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "labelPageSize",
                        },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "endCursor",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: h,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            u,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            g,
                                            m,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            o,
                                        ],
                                        storageKey: null,
                                    },
                                    k,
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [f, b],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: h,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            p,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            o,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                            u,
                        ],
                        storageKey: null,
                    },
                    x = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                c,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                                u,
                            ],
                            storageKey: null,
                        },
                    ],
                    K = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    },
                    w = {
                        kind: "InlineFragment",
                        selections: [
                            C,
                            S,
                            F,
                            v,
                            L,
                            I,
                            _,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                            K,
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    N = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    j = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    R = {
                        kind: "InlineFragment",
                        selections: [u],
                        type: "Node",
                        abstractKey: "__isNode",
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueDashboardPageQuery",
                        selections: [
                            {
                                args: [
                                    {
                                        kind: "Literal",
                                        name: "fetchRepository",
                                        value: !0,
                                    },
                                    t,
                                    {
                                        kind: "Variable",
                                        name: "labelPageSize",
                                        variableName: "labelPageSize",
                                    },
                                    i,
                                    s,
                                ],
                                kind: "FragmentSpread",
                                name: "ListQuery",
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, e, a, n],
                        kind: "Operation",
                        name: "IssueDashboardPageQuery",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: r,
                                        concreteType:
                                            "SearchResultItemConnection",
                                        kind: "LinkedField",
                                        name: "search",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueCount",
                                                storageKey: null,
                                            },
                                            {
                                                if: null,
                                                kind: "Stream",
                                                label: "ListItemsPaginated_results$stream$Query_search",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchResultItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    o,
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                d,
                                                                                c,
                                                                                {
                                                                                    alias: "titleHtml",
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "IssueType",
                                                                                    kind: "LinkedField",
                                                                                    name: "issueType",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            u,
                                                                                            m,
                                                                                            g,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                y,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            w,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        C,
                                                                                                        S,
                                                                                                        F,
                                                                                                        v,
                                                                                                        L,
                                                                                                        I,
                                                                                                        _,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "reviewDecision",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        N,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "isInMergeQueue",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        j,
                                                                                                        K,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "Issue",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                d,
                                                                                y,
                                                                                c,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            w,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        C,
                                                                                                        S,
                                                                                                        F,
                                                                                                        v,
                                                                                                        L,
                                                                                                        I,
                                                                                                        _,
                                                                                                        N,
                                                                                                        j,
                                                                                                        K,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "PullRequest",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    R,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            k,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                            {
                                                if: null,
                                                kind: "Defer",
                                                label: "ListItemsPaginated_results$defer$Query_search$pageInfo",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "startCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            f,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasPreviousPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            b,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: r,
                                        filters: ["query", "type", "skip"],
                                        handle: "connection",
                                        key: "Query_search",
                                        kind: "LinkedHandle",
                                        name: "search",
                                    },
                                    R,
                                ],
                                type: "Searchable",
                                abstractKey: "__isSearchable",
                            },
                        ],
                    },
                    params: {
                        id: "cc3009bc008dca588e719d46e548ef69",
                        metadata: {},
                        name: "IssueDashboardPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            e$.hash = "74ccd4931dd56a81cc098302b098ba21";
            let eQ = (function () {
                var e = {
                        defaultValue: 25,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    a = {
                        defaultValue: 20,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    t = {
                        defaultValue:
                            "state:open archived:false assignee:@me sort:updated-desc",
                        kind: "LocalArgument",
                        name: "query",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    s = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    r = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    o = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    u = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    h = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPinIssues",
                        storageKey: null,
                    },
                    I = [
                        r,
                        o,
                        u,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    x = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "labelPageSize",
                        },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    w = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "endCursor",
                        storageKey: null,
                    },
                    N = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    j = {
                        alias: null,
                        args: x,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            c,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            _,
                                            g,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            d,
                                        ],
                                        storageKey: null,
                                    },
                                    K,
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [w, N],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    R = {
                        alias: null,
                        args: x,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    T = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    P = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    A = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    M = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            m,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            d,
                            h,
                            c,
                        ],
                        storageKey: null,
                    },
                    D = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [k, b, c],
                            storageKey: null,
                        },
                    ],
                    V = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: D,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: D,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    },
                    E = {
                        kind: "InlineFragment",
                        selections: [j, R, C, T, P, A, M, F, S, V],
                        type: "Issue",
                        abstractKey: null,
                    },
                    q = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    O = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l, n, t, i],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueIndexPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: s,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "PinnedIssues",
                                    },
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "ListRepositoryFragment",
                                    },
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "FirstTimeContributionBanner",
                                    },
                                    {
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "fetchRepository",
                                                value: !1,
                                            },
                                            r,
                                            {
                                                kind: "Variable",
                                                name: "labelPageSize",
                                                variableName: "labelPageSize",
                                            },
                                            o,
                                            u,
                                        ],
                                        kind: "FragmentSpread",
                                        name: "ListQuery",
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "safeViewer",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineDataFragmentSpread",
                                        name: "AssigneePickerAssignee",
                                        selections: [
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    d,
                                                    c,
                                                    m,
                                                    g,
                                                    p,
                                                    y,
                                                    h,
                                                ],
                                                type: "Actor",
                                                abstractKey: "__isActor",
                                            },
                                        ],
                                        args: null,
                                        argumentDefinitions: [],
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [t, e, a, i, l, n],
                        kind: "Operation",
                        name: "IssueIndexPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: s,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    c,
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "first",
                                                value: 3,
                                            },
                                        ],
                                        concreteType: "PinnedIssueConnection",
                                        kind: "LinkedField",
                                        name: "pinnedIssues",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "PinnedIssue",
                                                kind: "LinkedField",
                                                name: "nodes",
                                                plural: !0,
                                                selections: [
                                                    c,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Issue",
                                                        kind: "LinkedField",
                                                        name: "issue",
                                                        plural: !1,
                                                        selections: [
                                                            c,
                                                            k,
                                                            f,
                                                            b,
                                                            C,
                                                            S,
                                                            F,
                                                            v,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "author",
                                                                plural: !1,
                                                                selections: [
                                                                    d,
                                                                    m,
                                                                    b,
                                                                    c,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "totalCommentsCount",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "repository",
                                                                plural: !1,
                                                                selections: [
                                                                    L,
                                                                    c,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "totalCount",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: "pinnedIssues(first:3)",
                                    },
                                    L,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isDisabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isLocked",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isArchived",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInOrganization",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isOwnerEnterpriseManaged",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "isPullRequests",
                                                value: !1,
                                            },
                                        ],
                                        kind: "ScalarField",
                                        name: "showFirstTimeContributorBanner",
                                        storageKey:
                                            "showFirstTimeContributorBanner(isPullRequests:false)",
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "CommunityProfile",
                                        kind: "LinkedField",
                                        name: "communityProfile",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "goodFirstIssueIssuesCount",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    b,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: I,
                                                concreteType:
                                                    "SearchResultItemConnection",
                                                kind: "LinkedField",
                                                name: "search",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "issueCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        if: null,
                                                        kind: "Stream",
                                                        label: "ListItemsPaginated_results$stream$Query_search",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "SearchResultItemEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                d,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            c,
                                                                                            v,
                                                                                            k,
                                                                                            {
                                                                                                alias: "titleHtml",
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "titleHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "IssueType",
                                                                                                kind: "LinkedField",
                                                                                                name: "issueType",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        c,
                                                                                                        g,
                                                                                                        _,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        E,
                                                                                                        {
                                                                                                            kind: "InlineFragment",
                                                                                                            selections:
                                                                                                                [
                                                                                                                    j,
                                                                                                                    R,
                                                                                                                    C,
                                                                                                                    T,
                                                                                                                    P,
                                                                                                                    A,
                                                                                                                    M,
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        kind: "ScalarField",
                                                                                                                        name: "reviewDecision",
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                    q,
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        kind: "ScalarField",
                                                                                                                        name: "isInMergeQueue",
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                    O,
                                                                                                                    V,
                                                                                                                ],
                                                                                                            type: "PullRequest",
                                                                                                            abstractKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                type: "IssueOrPullRequest",
                                                                                                abstractKey:
                                                                                                    "__isIssueOrPullRequest",
                                                                                            },
                                                                                        ],
                                                                                    type: "Issue",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            c,
                                                                                            v,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "Repository",
                                                                                                kind: "LinkedField",
                                                                                                name: "repository",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        g,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                null,
                                                                                                            kind: "LinkedField",
                                                                                                            name: "owner",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    d,
                                                                                                                    m,
                                                                                                                    c,
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        c,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            k,
                                                                                            f,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        E,
                                                                                                        {
                                                                                                            kind: "InlineFragment",
                                                                                                            selections:
                                                                                                                [
                                                                                                                    j,
                                                                                                                    R,
                                                                                                                    C,
                                                                                                                    T,
                                                                                                                    P,
                                                                                                                    A,
                                                                                                                    M,
                                                                                                                    q,
                                                                                                                    O,
                                                                                                                    V,
                                                                                                                ],
                                                                                                            type: "PullRequest",
                                                                                                            abstractKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                type: "IssueOrPullRequest",
                                                                                                abstractKey:
                                                                                                    "__isIssueOrPullRequest",
                                                                                            },
                                                                                        ],
                                                                                    type: "PullRequest",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            c,
                                                                                        ],
                                                                                    type: "Node",
                                                                                    abstractKey:
                                                                                        "__isNode",
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    K,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                    },
                                                    {
                                                        if: null,
                                                        kind: "Defer",
                                                        label: "ListItemsPaginated_results$defer$Query_search$pageInfo",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "PageInfo",
                                                                kind: "LinkedField",
                                                                name: "pageInfo",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "startCursor",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    w,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "hasPreviousPage",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    N,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: I,
                                                filters: [
                                                    "query",
                                                    "type",
                                                    "skip",
                                                ],
                                                handle: "connection",
                                                key: "Query_search",
                                                kind: "LinkedHandle",
                                                name: "search",
                                            },
                                            {
                                                kind: "TypeDiscriminator",
                                                abstractKey: "__isNode",
                                            },
                                        ],
                                        type: "Searchable",
                                        abstractKey: "__isSearchable",
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "safeViewer",
                                plural: !1,
                                selections: [
                                    c,
                                    {
                                        kind: "InlineFragment",
                                        selections: [d, m, g, p, y, h],
                                        type: "Actor",
                                        abstractKey: "__isActor",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "22d008b451590c967cc8d672452db3f9",
                        metadata: {},
                        name: "IssueIndexPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eQ.hash = "b59a0f9f85c49e982e1834713e262af6";
            let eU = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    l = {
                        defaultValue: "ASC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    n = {
                        defaultValue: "NAME",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    t = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    r = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    o = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    u = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    d = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    m = [
                        o,
                        {
                            fields: [
                                {
                                    kind: "Variable",
                                    name: "direction",
                                    variableName: "orderDirection",
                                },
                                {
                                    kind: "Variable",
                                    name: "field",
                                    variableName: "orderField",
                                },
                            ],
                            kind: "ObjectValue",
                            name: "orderBy",
                        },
                        u,
                        d,
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l, n, t, i, s],
                        kind: "Fragment",
                        metadata: null,
                        name: "RepositoryLabelIndexPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: r,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            o,
                                            {
                                                kind: "Variable",
                                                name: "orderDirection",
                                                variableName: "orderDirection",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "orderField",
                                                variableName: "orderField",
                                            },
                                            u,
                                            d,
                                        ],
                                        kind: "FragmentSpread",
                                        name: "RepositoryLabelIndexPageContentInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [a, t, e, n, l, s, i],
                        kind: "Operation",
                        name: "RepositoryLabelIndexPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: r,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    c,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: m,
                                        concreteType: "LabelConnection",
                                        kind: "LinkedField",
                                        name: "labels",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "LabelEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Label",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [
                                                            c,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "name",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "nameHTML",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "color",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "description",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "__typename",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "cursor",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "totalCount",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "PageInfo",
                                                kind: "LinkedField",
                                                name: "pageInfo",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "endCursor",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "hasNextPage",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: m,
                                        filters: ["query", "orderBy", "skip"],
                                        handle: "connection",
                                        key: "LabelList_labels",
                                        kind: "LinkedHandle",
                                        name: "labels",
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isWritable",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "a18878441a869b0aa0cc371c1b84cdca",
                        metadata: {},
                        name: "RepositoryLabelIndexPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eU.hash = "edd5cb2905962ab9ba31b6731ba75bec";
            let eH = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    a = {
                        defaultValue: "DESC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    l = {
                        defaultValue: "CREATED_AT",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    t = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "state",
                    },
                    i = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    s = [
                        { kind: "Literal", name: "first", value: 50 },
                        {
                            fields: [
                                {
                                    kind: "Variable",
                                    name: "direction",
                                    variableName: "orderDirection",
                                },
                                {
                                    kind: "Variable",
                                    name: "field",
                                    variableName: "orderField",
                                },
                            ],
                            kind: "ObjectValue",
                            name: "orderBy",
                        },
                        {
                            items: [
                                {
                                    kind: "Variable",
                                    name: "states.0",
                                    variableName: "state",
                                },
                            ],
                            kind: "ListValue",
                            name: "states",
                        },
                    ],
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    o = { kind: "Literal", name: "first", value: 0 },
                    u = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l, n, t],
                        kind: "Fragment",
                        metadata: null,
                        name: "RepositoryMilestoneIndexPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "orderDirection",
                                                variableName: "orderDirection",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "orderField",
                                                variableName: "orderField",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "state",
                                                variableName: "state",
                                            },
                                        ],
                                        kind: "FragmentSpread",
                                        name: "RepositoryMilestoneIndexPageContentInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, n, t, l, a],
                        kind: "Operation",
                        name: "RepositoryMilestoneIndexPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: s,
                                        concreteType: "MilestoneConnection",
                                        kind: "LinkedField",
                                        name: "milestones",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "MilestoneEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "Milestone",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [
                                                            r,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "description",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "title",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "url",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "state",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "repository",
                                                                plural: !1,
                                                                selections: [r],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "progressPercentage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "openIssueCount",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "closedIssueCount",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "closed",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "dueOn",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "__typename",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "cursor",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "PageInfo",
                                                kind: "LinkedField",
                                                name: "pageInfo",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "endCursor",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "hasNextPage",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: s,
                                        filters: ["states", "orderBy"],
                                        handle: "connection",
                                        key: "MilestoneList_milestones",
                                        kind: "LinkedHandle",
                                        name: "milestones",
                                    },
                                    {
                                        alias: "open",
                                        args: [
                                            o,
                                            {
                                                kind: "Literal",
                                                name: "states",
                                                value: "OPEN",
                                            },
                                        ],
                                        concreteType: "MilestoneConnection",
                                        kind: "LinkedField",
                                        name: "milestones",
                                        plural: !1,
                                        selections: u,
                                        storageKey:
                                            'milestones(first:0,states:"OPEN")',
                                    },
                                    {
                                        alias: "closed",
                                        args: [
                                            o,
                                            {
                                                kind: "Literal",
                                                name: "states",
                                                value: "CLOSED",
                                            },
                                        ],
                                        concreteType: "MilestoneConnection",
                                        kind: "LinkedField",
                                        name: "milestones",
                                        plural: !1,
                                        selections: u,
                                        storageKey:
                                            'milestones(first:0,states:"CLOSED")',
                                    },
                                    r,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "b30a6800da644ea67eaa34c3be0d8e62",
                        metadata: {},
                        name: "RepositoryMilestoneIndexPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eH.hash = "4c594d6cda7c822ae3a150e0d07f1cbf";
            let ez = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    t = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    i = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    s = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    r = {
                        kind: "Variable",
                        name: "number",
                        variableName: "number",
                    },
                    o = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [h, k, d],
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    C = [
                        { kind: "Literal", name: "aggregations", value: !0 },
                        s,
                        o,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    F = [
                        { kind: "Literal", name: "first", value: 10 },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: null,
                        concreteType: "PageInfo",
                        kind: "LinkedField",
                        name: "pageInfo",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "endCursor",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "hasNextPage",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: F,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            d,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            S,
                                            b,
                                            y,
                                            h,
                                        ],
                                        storageKey: null,
                                    },
                                    v,
                                ],
                                storageKey: null,
                            },
                            L,
                        ],
                        storageKey:
                            'labels(first:10,orderBy:{"direction":"ASC","field":"NAME"})',
                    },
                    _ = {
                        alias: null,
                        args: F,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    x = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    w = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            k,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            h,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                            d,
                        ],
                        storageKey: null,
                    },
                    N = {
                        kind: "InlineFragment",
                        selections: [
                            I,
                            _,
                            x,
                            p,
                            c,
                            K,
                            w,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    j = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    R = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l, n, t],
                        kind: "Fragment",
                        metadata: null,
                        name: "RepositoryMilestonePageQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: [s, r, o],
                                        kind: "FragmentSpread",
                                        name: "RepositoryMilestonePageContentInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [a, n, l, e, t],
                        kind: "Operation",
                        name: "RepositoryMilestonePageQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    u,
                                    {
                                        alias: null,
                                        args: [r],
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            d,
                                            c,
                                            m,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [u, d],
                                                storageKey: null,
                                            },
                                            g,
                                            p,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "openIssueCount",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "closedIssueCount",
                                                storageKey: null,
                                            },
                                            y,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "descriptionHTML",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "progressPercentage",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "dueOn",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                    f,
                                    b,
                                    {
                                        alias: null,
                                        args: C,
                                        concreteType:
                                            "SearchResultItemConnection",
                                        kind: "LinkedField",
                                        name: "search",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueCount",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "SearchResultItemEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [
                                                            h,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    d,
                                                                    g,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "state",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    m,
                                                                    {
                                                                        alias: "titleHtml",
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "titleHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "IssueType",
                                                                        kind: "LinkedField",
                                                                        name: "issueType",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                d,
                                                                                b,
                                                                                S,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                N,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            I,
                                                                                            _,
                                                                                            x,
                                                                                            p,
                                                                                            c,
                                                                                            K,
                                                                                            w,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "reviewDecision",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            j,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isInMergeQueue",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            R,
                                                                                        ],
                                                                                    type: "PullRequest",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "IssueOrPullRequest",
                                                                        abstractKey:
                                                                            "__isIssueOrPullRequest",
                                                                    },
                                                                ],
                                                                type: "Issue",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    d,
                                                                    g,
                                                                    c,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                b,
                                                                                f,
                                                                                d,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    m,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "titleHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                N,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            I,
                                                                                            _,
                                                                                            x,
                                                                                            p,
                                                                                            K,
                                                                                            w,
                                                                                            j,
                                                                                            R,
                                                                                        ],
                                                                                    type: "PullRequest",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "IssueOrPullRequest",
                                                                        abstractKey:
                                                                            "__isIssueOrPullRequest",
                                                                    },
                                                                ],
                                                                type: "PullRequest",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [d],
                                                                type: "Node",
                                                                abstractKey:
                                                                    "__isNode",
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    v,
                                                ],
                                                storageKey: null,
                                            },
                                            L,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: C,
                                        filters: [
                                            "query",
                                            "type",
                                            "aggregations",
                                        ],
                                        handle: "connection",
                                        key: "MilestoneIssuesList_search",
                                        kind: "LinkedHandle",
                                        name: "search",
                                    },
                                    d,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isArchived",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isDisabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isLocked",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInOrganization",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "89cc468d7122d931bbade6e34486ea5c",
                        metadata: {},
                        name: "RepositoryMilestonePageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            ez.hash = "07927d93bdf92cdd0e2ca99757fa9a70";
            let eW = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    a = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ClientSideRelayDataGeneratorQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ListCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueDetailCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ViewOptionsButtonCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "DashboardSearchCurrentViewFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueDashboardCustomViewPageCurrentViewFragment",
                                            },
                                        ],
                                        type: "Shortcutable",
                                        abstractKey: "__isShortcutable",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ClientSideRelayDataGeneratorQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    l,
                                    n,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            t,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "query",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "scopingRepository",
                                                plural: !1,
                                                selections: [
                                                    t,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [
                                                            l,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "login",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            n,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    n,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "icon",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "color",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Shortcutable",
                                        abstractKey: "__isShortcutable",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "d174fccd26c72c8f6cfa7e08b08f1e0f",
                        metadata: {},
                        name: "ClientSideRelayDataGeneratorQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eW.hash = "6e8de1e443c2c18d9ec8c0ab909308fe";
            var eG = l(69487);
            let eZ = (function () {
                var e = {
                        defaultValue: "",
                        kind: "LocalArgument",
                        name: "assigneeLogins",
                    },
                    a = {
                        defaultValue: 0,
                        kind: "LocalArgument",
                        name: "discussionNumber",
                    },
                    l = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "includeDiscussion",
                    },
                    n = {
                        defaultValue: "",
                        kind: "LocalArgument",
                        name: "labelNames",
                    },
                    t = {
                        defaultValue: "",
                        kind: "LocalArgument",
                        name: "milestoneTitle",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    r = {
                        defaultValue: [],
                        kind: "LocalArgument",
                        name: "projectNumbers",
                    },
                    o = {
                        defaultValue: "",
                        kind: "LocalArgument",
                        name: "templateFilter",
                    },
                    u = {
                        defaultValue: "",
                        kind: "LocalArgument",
                        name: "type",
                    },
                    d = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withAssignees",
                    },
                    c = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withLabels",
                    },
                    m = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withMilestone",
                    },
                    g = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withProjects",
                    },
                    p = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withTemplate",
                    },
                    y = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withTriagePermission",
                    },
                    h = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "withType",
                    },
                    k = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    L = { kind: "Literal", name: "first", value: 20 },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    x = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    K = [
                        f,
                        I,
                        _,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        x,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanUpdate",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "hasReachedItemsLimit",
                            storageKey: null,
                        },
                        S,
                    ],
                    w = [
                        {
                            kind: "Variable",
                            name: "filename",
                            variableName: "templateFilter",
                        },
                    ],
                    N = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "filename",
                        storageKey: null,
                    },
                    j = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    R = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    T = [
                        f,
                        j,
                        C,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameHTML",
                            storageKey: null,
                        },
                        R,
                        x,
                    ],
                    P = {
                        alias: null,
                        args: [
                            L,
                            {
                                kind: "Literal",
                                name: "orderBy",
                                value: { direction: "ASC", field: "NAME" },
                            },
                        ],
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: T,
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey:
                            'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                    },
                    A = { kind: "Literal", name: "first", value: 10 },
                    M = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    D = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                    V = {
                        alias: null,
                        args: [A],
                        concreteType: "UserConnection",
                        kind: "LinkedField",
                        name: "assignees",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "UserEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "User",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            f,
                                            {
                                                kind: "InlineFragment",
                                                selections: [S, F, C, M, v, D],
                                                type: "Actor",
                                                abstractKey: "__isActor",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: "assignees(first:10)",
                    },
                    E = [
                        f,
                        C,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isEnabled",
                            storageKey: null,
                        },
                        R,
                        j,
                    ],
                    q = {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "type",
                        plural: !1,
                        selections: E,
                        storageKey: null,
                    },
                    O = {
                        kind: "ClientExtension",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__id",
                                storageKey: null,
                            },
                        ],
                    },
                    B = {
                        alias: "itemId",
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    $ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "label",
                        storageKey: null,
                    },
                    Q = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "descriptionHTML",
                        storageKey: null,
                    },
                    U = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "placeholder",
                        storageKey: null,
                    },
                    H = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "value",
                        storageKey: null,
                    },
                    z = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "required",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [
                            e,
                            a,
                            l,
                            n,
                            t,
                            i,
                            s,
                            r,
                            o,
                            u,
                            d,
                            c,
                            m,
                            g,
                            p,
                            y,
                            h,
                        ],
                        kind: "Fragment",
                        metadata: null,
                        name: "InternalIssueNewPageUrlArgumentsMetadataQuery",
                        selections: [
                            {
                                alias: null,
                                args: k,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "assigneeLogins",
                                                variableName: "assigneeLogins",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "discussionNumber",
                                                variableName:
                                                    "discussionNumber",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "includeDiscussion",
                                                variableName:
                                                    "includeDiscussion",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "labelNames",
                                                variableName: "labelNames",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "milestoneTitle",
                                                variableName: "milestoneTitle",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "projectNumbers",
                                                variableName: "projectNumbers",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "templateFilter",
                                                variableName: "templateFilter",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "type",
                                                variableName: "type",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withAssignees",
                                                variableName: "withAssignees",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withLabels",
                                                variableName: "withLabels",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withMilestone",
                                                variableName: "withMilestone",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withProjects",
                                                variableName: "withProjects",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withTemplate",
                                                variableName: "withTemplate",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withTriagePermission",
                                                variableName:
                                                    "withTriagePermission",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "withType",
                                                variableName: "withType",
                                            },
                                        ],
                                        kind: "FragmentSpread",
                                        name: "InternalIssueNewPageUrlArgumentsMetadata",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [
                            s,
                            i,
                            d,
                            e,
                            c,
                            n,
                            m,
                            t,
                            u,
                            h,
                            g,
                            r,
                            y,
                            a,
                            l,
                            o,
                            p,
                        ],
                        kind: "Operation",
                        name: "InternalIssueNewPageUrlArgumentsMetadataQuery",
                        selections: [
                            {
                                alias: null,
                                args: k,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    f,
                                    b,
                                    C,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "owner",
                                        plural: !1,
                                        selections: [
                                            S,
                                            b,
                                            F,
                                            v,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueTypesEnabled",
                                                storageKey: null,
                                            },
                                            f,
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        condition:
                                                            "withProjects",
                                                        kind: "Condition",
                                                        passingValue: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: [
                                                                    L,
                                                                    {
                                                                        kind: "Variable",
                                                                        name: "numbers",
                                                                        variableName:
                                                                            "projectNumbers",
                                                                    },
                                                                ],
                                                                concreteType:
                                                                    "ProjectV2Connection",
                                                                kind: "LinkedField",
                                                                name: "projectsV2ByNumber",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "ProjectV2",
                                                                        kind: "LinkedField",
                                                                        name: "nodes",
                                                                        plural: !0,
                                                                        selections:
                                                                            K,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                    },
                                                ],
                                                type: "ProjectV2Owner",
                                                abstractKey:
                                                    "__isProjectV2Owner",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isPrivate",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "visibility",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isArchived",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInOrganization",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasIssuesEnabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasAnyTemplates",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "slashCommandsEnabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isBlankIssuesEnabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "action",
                                                value: "create an issue",
                                            },
                                        ],
                                        kind: "ScalarField",
                                        name: "viewerInteractionLimitReasonHTML",
                                        storageKey:
                                            'viewerInteractionLimitReasonHTML(action:"create an issue")',
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType:
                                            "IssueCreationPermissions",
                                        kind: "LinkedField",
                                        name: "viewerIssueCreationPermissions",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "labelable",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "milestoneable",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "assignable",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "triageable",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "typeable",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "canSetIssueFields",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "securityPolicyUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "contributingFileUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "codeOfConductFileUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "supportFileUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "shortDescriptionHTML",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "RepositoryPlanFeatures",
                                        kind: "LinkedField",
                                        name: "planFeatures",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "maximumAssignees",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        condition: "withTemplate",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: w,
                                                concreteType: "IssueTemplate",
                                                kind: "LinkedField",
                                                name: "issueTemplate",
                                                plural: !1,
                                                selections: [
                                                    S,
                                                    C,
                                                    N,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "body",
                                                        storageKey: null,
                                                    },
                                                    I,
                                                    P,
                                                    V,
                                                    q,
                                                    O,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: w,
                                                concreteType: "IssueForm",
                                                kind: "LinkedField",
                                                name: "issueForm",
                                                plural: !1,
                                                selections: [
                                                    S,
                                                    C,
                                                    N,
                                                    I,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "elements",
                                                        plural: !0,
                                                        selections: [
                                                            S,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    B,
                                                                    $,
                                                                    Q,
                                                                    U,
                                                                    H,
                                                                    z,
                                                                    O,
                                                                ],
                                                                type: "IssueFormElementInput",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    B,
                                                                    $,
                                                                    Q,
                                                                    U,
                                                                    H,
                                                                    z,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "render",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    O,
                                                                ],
                                                                type: "IssueFormElementTextarea",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "contentHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "IssueFormElementMarkdown",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    B,
                                                                    $,
                                                                    Q,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "options",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    z,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "multiple",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: "defaultOptionIndex",
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "default",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    O,
                                                                ],
                                                                type: "IssueFormElementDropdown",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    B,
                                                                    $,
                                                                    Q,
                                                                    {
                                                                        alias: "checkboxOptions",
                                                                        args: null,
                                                                        concreteType:
                                                                            "IssueFormElementCheckboxOption",
                                                                        kind: "LinkedField",
                                                                        name: "options",
                                                                        plural: !0,
                                                                        selections:
                                                                            [
                                                                                $,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "labelHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                z,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    O,
                                                                ],
                                                                type: "IssueFormElementCheckboxes",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    P,
                                                    V,
                                                    {
                                                        alias: null,
                                                        args: [L],
                                                        concreteType:
                                                            "ProjectV2Connection",
                                                        kind: "LinkedField",
                                                        name: "projects",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "ProjectV2Edge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "ProjectV2",
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            K,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey:
                                                            "projects(first:20)",
                                                    },
                                                    q,
                                                    O,
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                    {
                                        condition: "withAssignees",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "capabilities",
                                                        value: [
                                                            "CAN_BE_ASSIGNED",
                                                        ],
                                                    },
                                                    A,
                                                    {
                                                        kind: "Variable",
                                                        name: "loginNames",
                                                        variableName:
                                                            "assigneeLogins",
                                                    },
                                                ],
                                                concreteType: "ActorConnection",
                                                kind: "LinkedField",
                                                name: "suggestedActors",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            S,
                                                            {
                                                                kind: "TypeDiscriminator",
                                                                abstractKey:
                                                                    "__isActor",
                                                            },
                                                            f,
                                                            F,
                                                            C,
                                                            M,
                                                            v,
                                                            D,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                    {
                                        condition: "withLabels",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    L,
                                                    {
                                                        kind: "Variable",
                                                        name: "names",
                                                        variableName:
                                                            "labelNames",
                                                    },
                                                ],
                                                concreteType: "LabelConnection",
                                                kind: "LinkedField",
                                                name: "labels",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Label",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: T,
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                    {
                                        condition: "includeDiscussion",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Variable",
                                                        name: "number",
                                                        variableName:
                                                            "discussionNumber",
                                                    },
                                                ],
                                                concreteType: "Discussion",
                                                kind: "LinkedField",
                                                name: "discussion",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "formattedBody",
                                                        storageKey: null,
                                                    },
                                                    I,
                                                    P,
                                                    f,
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                    {
                                        condition: "withMilestone",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Variable",
                                                        name: "title",
                                                        variableName:
                                                            "milestoneTitle",
                                                    },
                                                ],
                                                concreteType: "Milestone",
                                                kind: "LinkedField",
                                                name: "milestoneByTitle",
                                                plural: !1,
                                                selections: [
                                                    f,
                                                    I,
                                                    _,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "dueOn",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "progressPercentage",
                                                        storageKey: null,
                                                    },
                                                    x,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "closedAt",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                    {
                                        condition: "withType",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Variable",
                                                        name: "name",
                                                        variableName: "type",
                                                    },
                                                ],
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: E,
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "084721999d4af222feecedc28a01c034",
                        metadata: {},
                        name: "InternalIssueNewPageUrlArgumentsMetadataQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eZ.hash = "0e2b0b1f573d6b277c23946014ca42d6";
            let eX = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "name",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "owner",
                        },
                    ],
                    a = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "filename",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "about",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueRepoNewChoosePageQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "IssueRepoNewChoosePageContentInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "IssueRepoNewChoosePageQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasIssuesEnabled",
                                        storageKey: null,
                                    },
                                    l,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueForm",
                                        kind: "LinkedField",
                                        name: "issueForms",
                                        plural: !0,
                                        selections: [
                                            n,
                                            t,
                                            i,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueTemplate",
                                        kind: "LinkedField",
                                        name: "issueTemplates",
                                        plural: !0,
                                        selections: [n, t, i, s],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isBlankIssuesEnabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isSecurityPolicyEnabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "securityPolicyUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "RepositoryContactLink",
                                        kind: "LinkedField",
                                        name: "contactLinks",
                                        plural: !0,
                                        selections: [
                                            i,
                                            s,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "url",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasAnyTemplates",
                                        storageKey: null,
                                    },
                                    i,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "owner",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "login",
                                                storageKey: null,
                                            },
                                            l,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "55090b23b3e86feda13b50a8ad6418f2",
                        metadata: {},
                        name: "IssueRepoNewChoosePageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eX.hash = "9eaefb1a635f0e0876360de04a93ab88";
            let eJ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueRepoNewChoosePageContentInternal",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "TemplateListPane",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "login",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            eJ.hash = "023af4405071cc40d83803475a49a94f";
            var eY = l(22353),
                e1 = l(39459),
                e2 = l(53499),
                e0 = l(83831),
                e3 = l(83987),
                e4 = l(2613),
                e5 = l(96235),
                e7 = l(26807),
                e6 = l(59159),
                e9 = l(34614),
                e8 = l(84217),
                ae = l(75177);
            let aa = (e, a) => {
                let [l, n, t] = (0, er.useQueryLoader)(a, e);
                return { queryRef: l, loadQuery: n, disposeQuery: t };
            };
            var al = l(26033),
                an = l(66871);
            let at = { issue: "issue" },
                ai = () => {
                    let {
                            owner: e,
                            repo: a,
                            number: l,
                            viewId: n,
                        } = (0, _.g)(),
                        [t, i] = (0, f.useState)(null),
                        s = (0, f.useCallback)((e) => {
                            let a = new URL(
                                window.location.href,
                                window.location.origin
                            );
                            (e
                                ? a.searchParams.set(
                                      at.issue,
                                      `${e.owner}|${e.repo}|${e.number}`
                                  )
                                : a.searchParams.delete(at.issue),
                                i(e),
                                (0, an.kd)(a.toString()));
                        }, []);
                    (0, f.useEffect)(() => {
                        let e = new URL(
                            window.location.href,
                            window.location.origin
                        ).searchParams.get(at.issue);
                        if (!e) return;
                        let [a, l, n] = e.split("|");
                        if (!(a && l && n)) return;
                        let t = isNaN(parseInt(n)) ? void 0 : parseInt(n);
                        t && i({ number: t, owner: a, repo: l, type: "Issue" });
                    }, []);
                    let r = t ? `/${t.owner}/${t.repo}/issues/${t.number}` : "",
                        o = (0, f.useMemo)(() => {
                            let n = l ? parseInt(l, 10) : void 0;
                            return (
                                n && n < 1 && (n = void 0),
                                e && a && n
                                    ? { owner: e, repo: a, number: n }
                                    : void 0
                            );
                        }, [l, e, a]),
                        u = (0, f.useCallback)(() => {
                            s(null);
                        }, [s]),
                        d = (0, f.useCallback)(
                            (e, a) =>
                                !!o &&
                                a.owner === o.owner &&
                                a.repo === o.repo &&
                                a.number === o.number &&
                                (e.preventDefault(), u(), !0),
                            [o, u]
                        );
                    return (
                        (0, f.useEffect)(() => {
                            function e() {
                                let e = new URL(
                                    window.location.href,
                                    window.location.origin
                                ).searchParams.get(at.issue);
                                if (!e) return void i(null);
                                let [a, l, n] = e.split("|");
                                if (!(a && l && n)) return;
                                let t = isNaN(parseInt(n))
                                    ? void 0
                                    : parseInt(n);
                                t &&
                                    (a !== o?.owner ||
                                        l !== o?.repo ||
                                        t !== o?.number) &&
                                    i({
                                        number: t,
                                        owner: a,
                                        repo: l,
                                        type: "Issue",
                                    });
                            }
                            return (
                                window.addEventListener("popstate", e),
                                () => window.removeEventListener("popstate", e)
                            );
                        }, [o]),
                        {
                            itemIdentifier: o,
                            viewId: n,
                            sidePanelItemIdentifier: t,
                            setSidePanelItemIdentifier: s,
                            sidePanelItemURL: r,
                            onCloseSidePanel: u,
                            onParentIssueActivate: d,
                        }
                    );
                };
            function as({ children: e, category: a }) {
                let { activeSearchQuery: l } = eM(),
                    { viewId: n } = ai(),
                    t = (0, f.useMemo)(
                        () => ({ viewQuery: l, viewId: n || "" }),
                        [l, n]
                    );
                return (0, y.jsx)(al.y, {
                    appName: "issues-react",
                    category: a,
                    metadata: t,
                    children: e,
                });
            }
            try {
                as.displayName || (as.displayName = "AnalyticsWrapper");
            } catch {}
            let ar = {
                    createPane: "IssueCreatePane-module__createPane--fEgsh",
                    createPaneContainer:
                        "IssueCreatePane-module__createPaneContainer--QVEpz",
                    header: "IssueCreatePane-module__header--Tzost",
                    avatarLink: "IssueCreatePane-module__avatarLink--m0ZCS",
                    avatar: "IssueCreatePane-module__avatar--tbGlo",
                },
                ao = ({ queries: { pageQuery: e } }) => {
                    let { queryRef: a } = aa(e, eX);
                    return a
                        ? (0, y.jsx)(as, {
                              category: "Repository Issue Create",
                              children: (0, y.jsx)(au, { pageQueryRef: a }),
                          })
                        : null;
                };
            function au({ pageQueryRef: e }) {
                let a = (0, er.usePreloadedQuery)(eX, e);
                return a.repository
                    ? (0, y.jsx)(ad, { repository: a.repository })
                    : ((0, eY.N7)(
                          Error(
                              `Could not find repository when loading TemplateList for ${A.fV?.href.toString()}`
                          )
                      ),
                      (0, y.jsx)("div", { children: "Repository not found" }));
            }
            function ad({ repository: e }) {
                let { currentUser: a } = (0, e6.J)(),
                    l = (0, e7.Z)(),
                    n = (0, er.useFragment)(eJ, e),
                    t = (0, e0.S)({
                        defaultDisplayMode: e2.q.TemplatePicker,
                        insidePortal: !1,
                        canBypassTemplateSelection: !0,
                        navigate: l,
                        issueCreateArguments: {
                            repository: { owner: n.owner.login, name: n.name },
                        },
                    });
                if (!a)
                    return (0, y.jsx)("div", {
                        children: "Current user not found",
                    });
                let { avatarUrl: i, login: s } = a;
                return (0, y.jsx)(e3.S, {
                    optionConfig: t,
                    preselectedData: void 0,
                    children: (0, y.jsxs)("div", {
                        className: ar.createPane,
                        children: [
                            (0, y.jsxs)(e9.A, {
                                href: `/${s}`,
                                className: ar.avatarLink,
                                children: [
                                    (0, y.jsx)("span", {
                                        className: "sr-only",
                                        children: U.viewProfile(s),
                                    }),
                                    (0, y.jsx)(e1.r, {
                                        src: i,
                                        size: 32,
                                        alt: "",
                                        "data-hovercard-url": (0, e5.dCN)({
                                            owner: s,
                                        }),
                                        className: ar.avatar,
                                    }),
                                ],
                            }),
                            (0, y.jsxs)("div", {
                                className: ar.createPaneContainer,
                                "data-testid": "issue-create-pane-container",
                                "data-hpc": !0,
                                children: [
                                    (0, y.jsx)(e8.A, {
                                        as: "h1",
                                        className: ar.header,
                                        children: U.issueCreatePaneTitle,
                                    }),
                                    (0, y.jsx)(ae.A, {
                                        sx: {
                                            display: "flex",
                                            flexDirection: "column",
                                            alignItems: "stretch",
                                            gap: 2,
                                        },
                                        tabIndex: -1,
                                        "data-hpc": !0,
                                        children: (0, y.jsx)(e4.e, {
                                            repository: n,
                                        }),
                                    }),
                                ],
                            }),
                        ],
                    }),
                });
            }
            try {
                au.displayName ||
                    (au.displayName = "IssueRepoNewChoosePageContent");
            } catch {}
            try {
                ad.displayName ||
                    (ad.displayName = "IssueRepoNewChoosePageContentInternal");
            } catch {}
            let ac = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    n = { kind: "Literal", name: "first", value: 20 },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    r = [
                        {
                            kind: "InlineDataFragmentSpread",
                            name: "LabelPickerLabel",
                            selections: [
                                a,
                                t,
                                l,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameHTML",
                                    storageKey: null,
                                },
                                i,
                                s,
                            ],
                            args: null,
                            argumentDefinitions: [],
                        },
                    ],
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: "",
                            kind: "LocalArgument",
                            name: "assigneeLogins",
                        },
                        {
                            defaultValue: 0,
                            kind: "LocalArgument",
                            name: "discussionNumber",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "includeDiscussion",
                        },
                        {
                            defaultValue: "",
                            kind: "LocalArgument",
                            name: "labelNames",
                        },
                        {
                            defaultValue: "",
                            kind: "LocalArgument",
                            name: "milestoneTitle",
                        },
                        {
                            defaultValue: [],
                            kind: "LocalArgument",
                            name: "projectNumbers",
                        },
                        {
                            defaultValue: "",
                            kind: "LocalArgument",
                            name: "templateFilter",
                        },
                        {
                            defaultValue: "",
                            kind: "LocalArgument",
                            name: "type",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withAssignees",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withLabels",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withMilestone",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withProjects",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withTemplate",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withTriagePermission",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withType",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "InternalIssueNewPageUrlArgumentsMetadata",
                    selections: [
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "templateFilter",
                                    variableName: "templateFilter",
                                },
                                {
                                    kind: "Variable",
                                    name: "withTemplate",
                                    variableName: "withTemplate",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "IssueCreatePage",
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "IssueCreationPermissions",
                            kind: "LinkedField",
                            name: "viewerIssueCreationPermissions",
                            plural: !1,
                            selections: [
                                {
                                    condition: "withAssignees",
                                    kind: "Condition",
                                    passingValue: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "assignable",
                                            storageKey: null,
                                        },
                                    ],
                                },
                                {
                                    condition: "withLabels",
                                    kind: "Condition",
                                    passingValue: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "labelable",
                                            storageKey: null,
                                        },
                                    ],
                                },
                                {
                                    condition: "withMilestone",
                                    kind: "Condition",
                                    passingValue: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "milestoneable",
                                            storageKey: null,
                                        },
                                    ],
                                },
                                {
                                    condition: "withTriagePermission",
                                    kind: "Condition",
                                    passingValue: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "triageable",
                                            storageKey: null,
                                        },
                                    ],
                                },
                                {
                                    condition: "withType",
                                    kind: "Condition",
                                    passingValue: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "typeable",
                                            storageKey: null,
                                        },
                                    ],
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            condition: "withAssignees",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Literal",
                                            name: "capabilities",
                                            value: ["CAN_BE_ASSIGNED"],
                                        },
                                        {
                                            kind: "Literal",
                                            name: "first",
                                            value: 10,
                                        },
                                        {
                                            kind: "Variable",
                                            name: "loginNames",
                                            variableName: "assigneeLogins",
                                        },
                                    ],
                                    concreteType: "ActorConnection",
                                    kind: "LinkedField",
                                    name: "suggestedActors",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "nodes",
                                            plural: !0,
                                            selections: [
                                                {
                                                    kind: "InlineDataFragmentSpread",
                                                    name: "AssigneePickerAssignee",
                                                    selections: [
                                                        e,
                                                        a,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "login",
                                                            storageKey: null,
                                                        },
                                                        l,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "profileResourcePath",
                                                            storageKey: null,
                                                        },
                                                        {
                                                            alias: null,
                                                            args: [
                                                                {
                                                                    kind: "Literal",
                                                                    name: "size",
                                                                    value: 64,
                                                                },
                                                            ],
                                                            kind: "ScalarField",
                                                            name: "avatarUrl",
                                                            storageKey:
                                                                "avatarUrl(size:64)",
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "isCopilot",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "Bot",
                                                            abstractKey: null,
                                                        },
                                                    ],
                                                    args: null,
                                                    argumentDefinitions: [],
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            condition: "withLabels",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: [
                                        n,
                                        {
                                            kind: "Variable",
                                            name: "names",
                                            variableName: "labelNames",
                                        },
                                    ],
                                    concreteType: "LabelConnection",
                                    kind: "LinkedField",
                                    name: "labels",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Label",
                                            kind: "LinkedField",
                                            name: "nodes",
                                            plural: !0,
                                            selections: r,
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            condition: "includeDiscussion",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Variable",
                                            name: "number",
                                            variableName: "discussionNumber",
                                        },
                                    ],
                                    concreteType: "Discussion",
                                    kind: "LinkedField",
                                    name: "discussion",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "formattedBody",
                                            storageKey: null,
                                        },
                                        o,
                                        {
                                            alias: null,
                                            args: [
                                                n,
                                                {
                                                    kind: "Literal",
                                                    name: "orderBy",
                                                    value: {
                                                        direction: "ASC",
                                                        field: "NAME",
                                                    },
                                                },
                                            ],
                                            concreteType: "LabelConnection",
                                            kind: "LinkedField",
                                            name: "labels",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "LabelEdge",
                                                    kind: "LinkedField",
                                                    name: "edges",
                                                    plural: !0,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "Label",
                                                            kind: "LinkedField",
                                                            name: "node",
                                                            plural: !1,
                                                            selections: r,
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey:
                                                'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            condition: "withMilestone",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Variable",
                                            name: "title",
                                            variableName: "milestoneTitle",
                                        },
                                    ],
                                    concreteType: "Milestone",
                                    kind: "LinkedField",
                                    name: "milestoneByTitle",
                                    plural: !1,
                                    selections: [
                                        {
                                            kind: "InlineDataFragmentSpread",
                                            name: "MilestonePickerMilestone",
                                            selections: [
                                                a,
                                                o,
                                                u,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "dueOn",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "progressPercentage",
                                                    storageKey: null,
                                                },
                                                s,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "closedAt",
                                                    storageKey: null,
                                                },
                                            ],
                                            args: null,
                                            argumentDefinitions: [],
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            condition: "withType",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Variable",
                                            name: "name",
                                            variableName: "type",
                                        },
                                    ],
                                    concreteType: "IssueType",
                                    kind: "LinkedField",
                                    name: "issueType",
                                    plural: !1,
                                    selections: [
                                        {
                                            kind: "InlineDataFragmentSpread",
                                            name: "IssueTypePickerIssueType",
                                            selections: [
                                                a,
                                                l,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "isEnabled",
                                                    storageKey: null,
                                                },
                                                i,
                                                t,
                                            ],
                                            args: null,
                                            argumentDefinitions: [],
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "owner",
                            plural: !1,
                            selections: [
                                {
                                    kind: "InlineFragment",
                                    selections: [
                                        {
                                            condition: "withProjects",
                                            kind: "Condition",
                                            passingValue: !0,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: [
                                                        n,
                                                        {
                                                            kind: "Variable",
                                                            name: "numbers",
                                                            variableName:
                                                                "projectNumbers",
                                                        },
                                                    ],
                                                    concreteType:
                                                        "ProjectV2Connection",
                                                    kind: "LinkedField",
                                                    name: "projectsV2ByNumber",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "ProjectV2",
                                                            kind: "LinkedField",
                                                            name: "nodes",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    kind: "InlineDataFragmentSpread",
                                                                    name: "ProjectPickerProject",
                                                                    selections:
                                                                        [
                                                                            a,
                                                                            o,
                                                                            u,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "number",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            s,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "viewerCanUpdate",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "hasReachedItemsLimit",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            e,
                                                                        ],
                                                                    args: null,
                                                                    argumentDefinitions:
                                                                        [],
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                            ],
                                        },
                                    ],
                                    type: "ProjectV2Owner",
                                    abstractKey: "__isProjectV2Owner",
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            ac.hash = "dac38b907bfbe6c2a2a8f9965ee260a2";
            let am = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasAnyTemplates",
                        storageKey: null,
                    },
                    s = [
                        {
                            kind: "Variable",
                            name: "filename",
                            variableName: "filename",
                        },
                    ],
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "filename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    d = { kind: "Literal", name: "first", value: 20 },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: [
                            d,
                            {
                                kind: "Literal",
                                name: "orderBy",
                                value: { direction: "ASC", field: "NAME" },
                            },
                        ],
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            {
                                                kind: "InlineDataFragmentSpread",
                                                name: "LabelPickerLabel",
                                                selections: [
                                                    e,
                                                    c,
                                                    l,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "nameHTML",
                                                        storageKey: null,
                                                    },
                                                    m,
                                                    g,
                                                ],
                                                args: null,
                                                argumentDefinitions: [],
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey:
                            'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                    },
                    y = {
                        alias: null,
                        args: [{ kind: "Literal", name: "first", value: 10 }],
                        concreteType: "UserConnection",
                        kind: "LinkedField",
                        name: "assignees",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "UserEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "User",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            {
                                                kind: "InlineDataFragmentSpread",
                                                name: "AssigneePickerAssignee",
                                                selections: [
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            r,
                                                            e,
                                                            n,
                                                            l,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "profileResourcePath",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            t,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "isCopilot",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "Bot",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                        ],
                                                        type: "Actor",
                                                        abstractKey:
                                                            "__isActor",
                                                    },
                                                ],
                                                args: null,
                                                argumentDefinitions: [],
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: "assignees(first:10)",
                    },
                    h = {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "type",
                        plural: !1,
                        selections: [
                            {
                                kind: "InlineDataFragmentSpread",
                                name: "IssueTypePickerIssueType",
                                selections: [
                                    e,
                                    l,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isEnabled",
                                        storageKey: null,
                                    },
                                    m,
                                    c,
                                ],
                                args: null,
                                argumentDefinitions: [],
                            },
                        ],
                        storageKey: null,
                    },
                    k = {
                        kind: "ClientExtension",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__id",
                                storageKey: null,
                            },
                        ],
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: "",
                            kind: "LocalArgument",
                            name: "templateFilter",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "withTemplate",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueCreatePage",
                    selections: [
                        {
                            kind: "InlineDataFragmentSpread",
                            name: "RepositoryPickerRepository",
                            selections: [
                                e,
                                a,
                                l,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        a,
                                        n,
                                        t,
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "issueTypesEnabled",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isPrivate",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "visibility",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isArchived",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isInOrganization",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "hasIssuesEnabled",
                                    storageKey: null,
                                },
                                i,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "slashCommandsEnabled",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "viewerCanPush",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isBlankIssuesEnabled",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Literal",
                                            name: "action",
                                            value: "create an issue",
                                        },
                                    ],
                                    kind: "ScalarField",
                                    name: "viewerInteractionLimitReasonHTML",
                                    storageKey:
                                        'viewerInteractionLimitReasonHTML(action:"create an issue")',
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "IssueCreationPermissions",
                                    kind: "LinkedField",
                                    name: "viewerIssueCreationPermissions",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "labelable",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "milestoneable",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "assignable",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "triageable",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "typeable",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "canSetIssueFields",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "securityPolicyUrl",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "contributingFileUrl",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "codeOfConductFileUrl",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "supportFileUrl",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "shortDescriptionHTML",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "RepositoryPlanFeatures",
                                    kind: "LinkedField",
                                    name: "planFeatures",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "maximumAssignees",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            args: null,
                            argumentDefinitions: [],
                        },
                        l,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "owner",
                            plural: !1,
                            selections: [n],
                            storageKey: null,
                        },
                        i,
                        {
                            condition: "withTemplate",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    kind: "InlineDataFragmentSpread",
                                    name: "useHandleTemplateChange",
                                    selections: [
                                        {
                                            alias: null,
                                            args: s,
                                            concreteType: "IssueTemplate",
                                            kind: "LinkedField",
                                            name: "issueTemplate",
                                            plural: !1,
                                            selections: [
                                                {
                                                    kind: "InlineDataFragmentSpread",
                                                    name: "useHandleTemplateChangeIssueTemplate",
                                                    selections: [
                                                        r,
                                                        l,
                                                        o,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "body",
                                                            storageKey: null,
                                                        },
                                                        u,
                                                        p,
                                                        y,
                                                        h,
                                                        k,
                                                    ],
                                                    args: null,
                                                    argumentDefinitions: [],
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: s,
                                            concreteType: "IssueForm",
                                            kind: "LinkedField",
                                            name: "issueForm",
                                            plural: !1,
                                            selections: [
                                                {
                                                    kind: "InlineDataFragmentSpread",
                                                    name: "useHandleTemplateChangeIssueForm",
                                                    selections: [
                                                        r,
                                                        l,
                                                        o,
                                                        u,
                                                        {
                                                            kind: "InlineDataFragmentSpread",
                                                            name: "IssueFormElements_templateElements",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "elements",
                                                                    plural: !0,
                                                                    selections:
                                                                        [
                                                                            r,
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            args: null,
                                                                                            kind: "FragmentSpread",
                                                                                            name: "TextInputElement_input",
                                                                                        },
                                                                                    ],
                                                                                type: "IssueFormElementInput",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            args: null,
                                                                                            kind: "FragmentSpread",
                                                                                            name: "TextAreaElement_input",
                                                                                        },
                                                                                    ],
                                                                                type: "IssueFormElementTextarea",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            args: null,
                                                                                            kind: "FragmentSpread",
                                                                                            name: "MarkdownElement_input",
                                                                                        },
                                                                                    ],
                                                                                type: "IssueFormElementMarkdown",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            args: null,
                                                                                            kind: "FragmentSpread",
                                                                                            name: "DropdownElement_input",
                                                                                        },
                                                                                    ],
                                                                                type: "IssueFormElementDropdown",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            args: null,
                                                                                            kind: "FragmentSpread",
                                                                                            name: "CheckboxesElement_input",
                                                                                        },
                                                                                    ],
                                                                                type: "IssueFormElementCheckboxes",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            args: null,
                                                            argumentDefinitions:
                                                                [],
                                                        },
                                                        p,
                                                        y,
                                                        {
                                                            alias: null,
                                                            args: [d],
                                                            concreteType:
                                                                "ProjectV2Connection",
                                                            kind: "LinkedField",
                                                            name: "projects",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "ProjectV2Edge",
                                                                    kind: "LinkedField",
                                                                    name: "edges",
                                                                    plural: !0,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    "ProjectV2",
                                                                                kind: "LinkedField",
                                                                                name: "node",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            kind: "InlineDataFragmentSpread",
                                                                                            name: "ProjectPickerProject",
                                                                                            selections:
                                                                                                [
                                                                                                    e,
                                                                                                    u,
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "closed",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "number",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    g,
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "viewerCanUpdate",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "hasReachedItemsLimit",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    r,
                                                                                                ],
                                                                                            args: null,
                                                                                            argumentDefinitions:
                                                                                                [],
                                                                                        },
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey:
                                                                "projects(first:20)",
                                                        },
                                                        h,
                                                        k,
                                                    ],
                                                    args: null,
                                                    argumentDefinitions: [],
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    args: [
                                        {
                                            kind: "Variable",
                                            name: "filename",
                                            variableName: "templateFilter",
                                        },
                                    ],
                                    argumentDefinitions: [
                                        {
                                            defaultValue: "",
                                            kind: "LocalArgument",
                                            name: "filename",
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            am.hash = "22ff6992a96ef2cde9444260d48f9173";
            var ag = l(60439),
                ap = l(90486),
                ay = l(39409),
                ah = l(21059);
            let ak = (0, f.createContext)(null);
            try {
                ak.displayName ||
                    (ak.displayName = "IssueCreateInitialValuesContext");
            } catch {}
            try {
                (n = function ({
                    title: e,
                    body: a,
                    repository: l,
                    owner: n,
                    template: t,
                    labels: i,
                    assignees: s,
                    projects: r,
                    milestone: o,
                    issueType: u,
                    children: d,
                }) {
                    let c = (0, f.useMemo)(
                        () => ({
                            title: e,
                            body: a,
                            repository: l,
                            owner: n,
                            template: t,
                            labels: i,
                            assignees: s,
                            projects: r,
                            milestone: o,
                            issueType: u,
                        }),
                        [e, a, l, n, t, i, s, r, o, u]
                    );
                    return (0, y.jsx)(ak.Provider, { value: c, children: d });
                }).displayName ||
                    (n.displayName = "IssueCreateInitialValuesContextProvider");
            } catch {}
            var af = l(653),
                ab = l(43201),
                aC = l(80268);
            let aS = {
                createPane: "IssueCreatePage-module__createPane--uenN0",
                createPaneContainer:
                    "IssueCreatePage-module__createPaneContainer--mvacO",
                avatarLink: "IssueCreatePage-module__avatarLink--SY9F4",
                avatar: "IssueCreatePage-module__avatar--aWCai",
                chooseTemplateLink:
                    "IssueCreatePage-module__chooseTemplateLink--PdhXZ",
                IssueCreatePageHeading:
                    "IssueCreatePage-module__IssueCreatePageHeading--G76FC",
                IssueCreatePageContainer:
                    "IssueCreatePage-module__IssueCreatePageContainer--QjxkT",
            };
            var aF = l(14979);
            let av = ({
                templateName: e,
                nameWithOwner: a,
                issueFormRef: l,
            }) => {
                let n = (0, e7.Z)(),
                    { usedStorageKeyPrefix: t } = (0, ah.u)(),
                    { onSafeClose: i } = (0, aC.Z)({
                        storageKeyPrefix: t,
                        issueFormRef: l,
                        onCancel: () => {
                            n((0, aF.TV)(a));
                        },
                    });
                return (0, y.jsxs)("div", {
                    style: {
                        display: "flex",
                        flexDirection: "row",
                        alignItems: "center",
                        gap: 2,
                        marginBottom: 2,
                    },
                    children: [
                        (0, y.jsx)("span", {
                            className: "fgColor-muted",
                            children: e || ap.k.blankIssueName,
                        }),
                        " \xb7",
                        (0, y.jsx)(e9.A, {
                            inline: !1,
                            onClick: i,
                            className: aS.chooseTemplateLink,
                            children: ap.k.issueCreateChooseDiffTemplate,
                        }),
                    ],
                });
            };
            try {
                av.displayName || (av.displayName = "DifferentTemplateLink");
            } catch {}
            var aL = l(36376),
                aI = l(40616),
                a_ = l(46201);
            let ax = ({
                    initialMetadataValues: e,
                    currentRepository: a,
                    storageKeyPrefix: l,
                    pasteUrlsAsPlainText: n,
                    useMonospaceFont: t,
                    emojiSkinTonePreference: i,
                    singleKeyShortcutsEnabled: s,
                    copilotShowFunctionality: r,
                }) => {
                    let o = (0, er.useFragment)(am, a),
                        [u] = (0, _.ok)(),
                        d = !!u.get("template"),
                        c = (0, ag.Jo)(o),
                        { currentUser: m } = (0, e6.J)(),
                        g = (() => {
                            let e = (0, f.useContext)(ak);
                            return e || {};
                        })(),
                        p = {
                            storageKeyPrefix: l,
                            singleKeyShortcutsEnabled: s,
                            pasteUrlsAsPlainText: n,
                            useMonospaceFont: t,
                            emojiSkinTonePreference: i,
                            copilotShowFunctionality: r,
                            issueCreateArguments: {
                                ...(0, a_.mZ)(u, e, g),
                                repository: {
                                    owner: o.owner.login,
                                    name: o.name,
                                },
                            },
                            insidePortal: !1,
                        },
                        h = (0, e0.S)(p),
                        k = d ? (0, aI.EV)(o) : void 0,
                        b = (0, f.useRef)(null),
                        C = (0, f.useMemo)(
                            () =>
                                !!c.viewerInteractionLimitReasonHTML &&
                                c.viewerInteractionLimitReasonHTML.length > 0,
                            [c.viewerInteractionLimitReasonHTML]
                        );
                    if (!m)
                        return (
                            reportError(
                                Error(
                                    `Could not find the current user when loading IssueCreatePage for ${A.fV?.href.toString()}`
                                )
                            ),
                            (0, y.jsx)("div", {
                                children: "Current user not found",
                            })
                        );
                    let { avatarUrl: S, login: F } = m;
                    return (0, y.jsx)(e3.S, {
                        optionConfig: h,
                        preselectedData: { repository: c, template: k },
                        children: (0, y.jsxs)("div", {
                            className: aS.createPane,
                            children: [
                                (0, y.jsxs)(e9.A, {
                                    href: `/${F}`,
                                    className: aS.avatarLink,
                                    children: [
                                        (0, y.jsx)("span", {
                                            className: "sr-only",
                                            children: ap.k.viewProfile(F),
                                        }),
                                        (0, y.jsx)(e1.r, {
                                            src: S,
                                            size: 32,
                                            alt: "",
                                            "data-hovercard-url": (0, e5.dCN)({
                                                owner: F,
                                            }),
                                            className: aS.avatar,
                                        }),
                                    ],
                                }),
                                (0, y.jsxs)("div", {
                                    className: aS.createPaneContainer,
                                    "data-testid":
                                        "issue-create-pane-container",
                                    children: [
                                        (0, y.jsxs)("div", {
                                            style: {
                                                display: "flex",
                                                flexDirection: "column",
                                                alignItems: "flexStart",
                                                marginBottom: k ? 4 : 12,
                                                position: "relative",
                                                top: k ? "-10px" : 0,
                                            },
                                            children: [
                                                (0, y.jsx)(e8.A, {
                                                    as: "h2",
                                                    id: "issue-create-pane-title",
                                                    className:
                                                        aS.IssueCreatePageHeading,
                                                    children:
                                                        ap.k
                                                            .issueCreateDialogTitleTemplatePane,
                                                }),
                                                o.hasAnyTemplates &&
                                                    !C &&
                                                    (0, y.jsx)(av, {
                                                        nameWithOwner:
                                                            c.nameWithOwner,
                                                        templateName: k?.name,
                                                        issueFormRef: b,
                                                    }),
                                            ],
                                        }),
                                        (0, y.jsx)("div", {
                                            tabIndex: -1,
                                            className:
                                                aS.IssueCreatePageContainer,
                                            children: (0, y.jsx)(aK, {
                                                template: k,
                                                repository: c,
                                                optionConfig: h,
                                                issueFormRef: b,
                                                showUserRestrictedView: C,
                                            }),
                                        }),
                                    ],
                                }),
                            ],
                        }),
                    });
                },
                aK = ({
                    template: e,
                    issueFormRef: a,
                    repository: l,
                    optionConfig: n,
                    showUserRestrictedView: t,
                }) => {
                    let i = (0, _.Zp)(),
                        s = n.navigate || i,
                        { setDisplayMode: r, setCreateMoreCreatedPath: o } = (0,
                        ay.a)(),
                        {
                            title: u,
                            setTitle: d,
                            body: c,
                            setBody: m,
                            clearSessionData: g,
                            usedStorageKeyPrefix: p,
                        } = (0, ah.u)(),
                        h = (0, aI.wT)({
                            optionConfig: n,
                            repository: l,
                            navigate: s,
                            setDisplayMode: r,
                        }),
                        k = (0, aL.K)({
                            issueFormRef: a,
                            handleTemplateChange: h,
                            navigate: s,
                            template: e,
                        }),
                        { onSafeClose: b } = (0, aC.Z)({
                            storageKeyPrefix: p || "",
                            issueFormRef: a,
                            onCancel: () => {
                                (0, an.OE)();
                            },
                        });
                    return (
                        (0, f.useEffect)(() => {
                            o({
                                owner: l.owner.login,
                                repo: l.name,
                                number: void 0,
                            });
                        }, [l, o]),
                        (0, y.jsx)(ab.e, {
                            issueFormRef: a,
                            onCreateSuccess: k,
                            onCreateError: v.l,
                            onCancel: b,
                            selectedTemplate: e,
                            repository: l,
                            title: u,
                            setTitle: d,
                            body: c,
                            setBody: m,
                            clearOnCreate: g,
                            focusTitleInput: !0,
                            footer: (0, y.jsx)(af.l, { onClose: b }),
                            showUserRestrictedView: t,
                        })
                    );
                };
            try {
                ax.displayName || (ax.displayName = "IssueCreatePage");
            } catch {}
            try {
                aK.displayName || (aK.displayName = "IssueCreatePageInternal");
            } catch {}
            var aw = l(52374),
                aN = l(3213),
                aj = l(62110),
                aR = l(47943),
                aT = l(90189);
            let aP = ({ urlParameterQueryData: e }) => {
                    let a = (0, er.usePreloadedQuery)(eZ, e)?.repository;
                    return a
                        ? (0, y.jsx)(aA, { repository: a })
                        : (0, y.jsx)("div", {
                              children: "Repository not found",
                          });
                },
                aA = ({ repository: e }) => {
                    let a = (0, I.X)(),
                        l = (0, er.useFragment)(ac, e),
                        n = l?.suggestedActors?.nodes,
                        t =
                            n && l.viewerIssueCreationPermissions?.assignable
                                ? n.flatMap((e) => (e ? [(0, aw.uX)(e)] : []))
                                : void 0,
                        i = l?.labels?.nodes,
                        s =
                            i && l.viewerIssueCreationPermissions?.labelable
                                ? i.flatMap((e) => (e ? [(0, aj.P5)(e)] : []))
                                : void 0,
                        r = l?.owner?.projectsV2ByNumber?.nodes,
                        o =
                            r && l.viewerIssueCreationPermissions?.triageable
                                ? r.flatMap((e) => (e ? [(0, aT.Kx)(e)] : []))
                                : void 0,
                        u =
                            l?.milestoneByTitle &&
                            l.viewerIssueCreationPermissions?.milestoneable
                                ? (0, aR.Hf)(l?.milestoneByTitle)
                                : void 0,
                        d =
                            l?.issueType &&
                            l.viewerIssueCreationPermissions?.triageable &&
                            l.viewerIssueCreationPermissions?.typeable
                                ? (0, aN.iO)(l?.issueType)
                                : void 0,
                        c = l?.discussion
                            ? {
                                  title: l.discussion.title,
                                  formattedBody: l.discussion.formattedBody,
                                  labels: l.discussion.labels?.edges?.flatMap(
                                      (e) =>
                                          e?.node ? [(0, aj.P5)(e?.node)] : []
                                  ),
                              }
                            : void 0,
                        m = {
                            ...(void 0 !== t && { assignees: t }),
                            ...(void 0 !== s && { labels: s }),
                            ...(void 0 !== u && { milestone: u }),
                            ...(void 0 !== o && { projects: o }),
                            ...(void 0 !== d && { type: d }),
                            ...(void 0 !== c && { discussion: c }),
                        },
                        g = E.storageKeyPrefix(a),
                        p =
                            a?.current_user_settings
                                ?.paste_url_link_as_plain_text || !1,
                        h = a?.current_user_settings?.use_monospace_font || !1,
                        k = a?.current_user_settings?.preferred_emoji_skin_tone,
                        f =
                            a?.current_user_settings?.use_single_key_shortcut ||
                            !1,
                        b =
                            a?.current_user_settings
                                ?.copilot_show_functionality || !1;
                    return (0, y.jsx)(ax, {
                        initialMetadataValues: m,
                        storageKeyPrefix: g,
                        pasteUrlsAsPlainText: p,
                        useMonospaceFont: h,
                        emojiSkinTonePreference: k,
                        singleKeyShortcutsEnabled: f,
                        copilotShowFunctionality: b,
                        currentRepository: l,
                    });
                };
            try {
                aP.displayName ||
                    (aP.displayName = "InternalIssueNewPageWithUrlParams");
            } catch {}
            try {
                aA.displayName ||
                    (aA.displayName =
                        "InternalIssueNewPageWithUrlParamsInternal");
            } catch {}
            let aM = ({ queries: { pageQuery: e } }) => {
                    let { queryRef: a } = aa(e, eZ);
                    return a
                        ? (0, y.jsx)(as, {
                              category: "Repository Issue Create",
                              children: (0, y.jsx)(aP, {
                                  urlParameterQueryData: a,
                              }),
                          })
                        : null;
                },
                aD = {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "fetchRepository",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "labelPageSize",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "query",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "skip",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueDashboardCustomViewPageSearchListFragment",
                    selections: [
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "fetchRepository",
                                    variableName: "fetchRepository",
                                },
                                {
                                    kind: "Variable",
                                    name: "first",
                                    variableName: "first",
                                },
                                {
                                    kind: "Variable",
                                    name: "labelPageSize",
                                    variableName: "labelPageSize",
                                },
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "query",
                                },
                                {
                                    kind: "Variable",
                                    name: "skip",
                                    variableName: "skip",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "DashboardSearchFragment",
                        },
                    ],
                    type: "Searchable",
                    abstractKey: "__isSearchable",
                };
            aD.hash = "8ffa7642e54448af5beab6dd8d9e3bcf";
            let aV = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueDashboardCustomViewPageCurrentViewFragment",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "HeaderCurrentViewFragment",
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            aV.hash = "a93246eb19a6ce78ccda6b3c1177859f";
            var aE = l(3607),
                aq = l(48975),
                aO = l(58087),
                aB = l(54175);
            let a$ = {
                ThreePanesLayout:
                    "ThreePanesLayout-module__ThreePanesLayout--fbTAb",
                ThreePanesLayoutLeftPane:
                    "ThreePanesLayout-module__ThreePanesLayoutLeftPane--NUU8n",
                ThreePanesLayoutNested:
                    "ThreePanesLayout-module__ThreePanesLayoutNested--ZcB4O",
                ThreePanesLayoutMiddlePane:
                    "ThreePanesLayout-module__ThreePanesLayoutMiddlePane--voRZh",
                ThreePanesLayoutMiddleOnlyPane:
                    "ThreePanesLayout-module__ThreePanesLayoutMiddleOnlyPane--OBqSv",
            };
            function aQ({
                leftPane: e,
                middlePane: a,
                contentAs: l,
                rightPane: n,
                rightPanePadding: t = !0,
                rightPaneAs: i,
                resizeable: s = !0,
                leftPaneWidth: r = "large",
            }) {
                return (0, y.jsxs)(aB.M, {
                    containerWidth: "full",
                    columnGap: "none",
                    className: a$.ThreePanesLayout,
                    children: [
                        e &&
                            (0, y.jsx)(aB.M.Pane, {
                                width: r,
                                position: "start",
                                divider: "line",
                                padding: "none",
                                resizable: s,
                                widthStorageKey: "hyperlist.pane-sidewidth",
                                "aria-label": e.ariaLabel,
                                className: a$.ThreePanesLayoutLeftPane,
                                children: e.element,
                            }),
                        (0, y.jsx)(aB.M.Content, {
                            as: l,
                            children: n
                                ? (0, y.jsxs)(aB.M, {
                                      containerWidth: "full",
                                      columnGap: "none",
                                      className: a$.ThreePanesLayoutNested,
                                      children: [
                                          a &&
                                              (0, y.jsx)(aB.M.Pane, {
                                                  width: "large",
                                                  divider: "line",
                                                  resizable: s,
                                                  widthStorageKey:
                                                      "hyperlist.pane-details-width",
                                                  padding: "condensed",
                                                  position: "start",
                                                  "aria-label": n.ariaLabel,
                                                  className:
                                                      a$.ThreePanesLayoutMiddlePane,
                                                  children: a,
                                              }),
                                          n &&
                                              (0, y.jsx)(aB.M.Content, {
                                                  as: i,
                                                  padding: t
                                                      ? "normal"
                                                      : "none",
                                                  children: n.element,
                                              }),
                                      ],
                                  })
                                : a
                                  ? (0, y.jsx)("div", {
                                        className:
                                            a$.ThreePanesLayoutMiddleOnlyPane,
                                        children: a,
                                    })
                                  : null,
                        }),
                    ],
                });
            }
            try {
                aQ.displayName || (aQ.displayName = "ThreePanesLayout");
            } catch {}
            var aU = l(87330);
            let aH = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchRepository",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "DashboardSearchFragment",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "fetchRepository",
                                variableName: "fetchRepository",
                            },
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "labelPageSize",
                                variableName: "labelPageSize",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "SearchList",
                    },
                ],
                type: "Searchable",
                abstractKey: "__isSearchable",
            };
            aH.hash = "c798fd569d54187c387a94dbb72d8826";
            let az = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "DashboardSearchCurrentViewFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "query",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "DashboardSearchBarActionsFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "DashboardEditViewActionsFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchBarCurrentViewFragment",
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            az.hash = "a8438ebbf35da2ba8c7c5360a65efc1f";
            var aW = l(87517),
                aG = l(40319);
            let aZ = {
                NewViewExperienceContainer:
                    "NewViewExperience-module__NewViewExperienceContainer--q5HzD",
                textContent: "NewViewExperience-module__textContent--cQahs",
                Heading: "NewViewExperience-module__Heading--TX719",
                descriptionText:
                    "NewViewExperience-module__descriptionText--p7Bq1",
            };
            var aX = l(30391);
            let aJ = {
                    NewViewGraphicContainer:
                        "NewViewGraphic-module__NewViewGraphicContainer--cZboB",
                },
                aY = () =>
                    (0, y.jsxs)("svg", {
                        role: "presentation",
                        width: "100%",
                        height: "100%",
                        viewBox: "0 0 364 160",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [
                            (0, y.jsxs)("g", {
                                clipPath: "url(#clip0)",
                                children: [
                                    (0, y.jsx)("path", {
                                        d: "M363.754 134.158H228.676V135.078H363.754V134.158Z",
                                        fill: "#E1E4E8",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M0 135.999L12.1543 105.061L13.2592 114.499L22.1908 98.5694L24.2625 104.647L28.4521 93.9655L33.1481 108.836L40.5143 86.4152L46.039 104.969L53.7275 93.9655C53.7275 93.9655 45.4405 97.0041 45.4405 96.1754C45.4405 95.3467 56.6279 80.6142 56.6279 80.6142C56.6279 80.6142 46.3152 84.4815 46.3152 83.6528C46.3152 82.8702 55.0626 74.7673 58.0551 69.657C61.0477 64.5466 66.3882 46.9137 66.3882 46.9137C66.3882 46.9137 74.9515 68.6441 79.5093 70.9921C80.9826 67.4931 85.6785 57.5948 85.6785 57.5948L76.3787 61.6922C76.3787 61.6922 90.3745 32.1812 92.124 25.5516C93.8274 18.876 93.4131 21.1779 96.4977 26.9788C98.6155 31.905 101.148 48.0647 108.928 57.2725C116.294 64.1783 103.634 59.2522 103.634 59.2522L115.051 81.1207L125.088 61.6922L131.027 76.793L139.912 57.2725L129.876 64.3164C129.876 64.3164 138.808 51.1493 140.741 40.7905C142.629 30.3857 145.023 13.8577 145.023 13.8577L157.637 37.9361C157.637 37.9361 169.7 4.51182 170.16 0C171.587 15.9755 190.693 54.0498 190.693 54.0498C190.693 54.0498 198.106 38.2584 198.796 32.4114C201.098 38.2123 231.162 134.756 231.162 134.756C231.162 134.756 146.358 140.281 113.302 140.373C80.2459 140.465 19.0601 138.255 11.0033 137.564C6.03111 137.15 0 135.999 0 135.999Z",
                                        fill: "#E3E9EC",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M229.182 159.847C254.609 159.847 275.221 156.529 275.221 152.435C275.221 148.341 254.609 145.023 229.182 145.023C203.755 145.023 183.143 148.341 183.143 152.435C183.143 156.529 203.755 159.847 229.182 159.847Z",
                                        fill: "#CACFD6",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M265.967 117.399C265.783 116.617 302.292 74.6291 305.423 71.7747C308.553 68.9203 336.591 35.8643 338.617 34.7134C339.86 31.951 335.762 29.603 333.921 30.8921C332.217 34.253 302.66 69.1505 299.99 72.0049C297.32 74.8593 275.912 98.0169 266.566 105.429C264.54 111.046 262.652 112.013 261.225 113.624C260.995 114.499 261.271 115.696 262.975 116.801C264.678 117.906 265.967 117.399 265.967 117.399Z",
                                        fill: "#F9C513",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M328.856 42.6321C326.186 45.2563 316.15 57.0883 313.525 60.1729C307.909 66.8486 284.659 93.1829 278.72 99.8125C275.958 102.943 265.415 113.716 262.652 116.571C262.744 116.663 262.883 116.755 263.021 116.801C264.724 117.952 266.013 117.399 266.013 117.399C265.829 116.617 302.338 74.6292 305.469 71.7747C308.599 68.9203 336.637 35.8643 338.663 34.7134C338.985 33.9767 338.939 33.148 338.525 32.4575C335.578 36.0945 332.171 39.3633 328.856 42.6321Z",
                                        fill: "#FFDF5D",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M261.962 112.841C261.685 113.072 261.455 113.348 261.225 113.624C260.995 114.499 261.271 115.696 262.975 116.801C264.678 117.906 265.967 117.399 265.967 117.399C266.059 117.123 266.243 116.893 266.427 116.663C265.415 114.913 263.849 113.578 261.962 112.841Z",
                                        fill: "#DBAB09",
                                    }),
                                    (0, y.jsx)("path", {
                                        fillRule: "evenodd",
                                        clipRule: "evenodd",
                                        d: "M269.903 37.559C269.43 36.814 268.614 35.6822 267.348 34.3911C265.277 32.2733 261.547 29.2347 255.516 26.9328C248.61 24.3086 240.784 24.5848 234.062 27.6694L233.832 27.7615L233.602 27.6694C226.756 25.2197 222.846 26.7814 221.211 27.8082C223.453 28.5857 227.608 31.0674 229.182 36.5549L228.077 36.8772C226.512 31.3525 221.954 29.1427 220.296 28.7283L222.506 36.8312L222.368 37.0614C222.341 37.0889 220.765 39.2906 219.503 42.4153C219.552 42.3787 219.601 42.3435 219.652 42.3098C220.481 41.7573 221.493 41.6192 222.552 41.9875C224.899 42.7699 226.602 45.3462 228.397 48.0613L228.399 48.0647C230.149 50.7349 231.944 53.4512 234.2 54.0497C235.772 54.4539 238.921 54.0696 242.578 53.6232L242.856 53.5894L242.936 53.5795C250.058 52.7064 258.893 51.6234 263.067 55.2468C266.151 57.871 269.098 62.5209 265.507 69.6109C264.705 71.2148 262.681 74.5298 261.654 76.2104C261.502 76.4595 261.372 76.6726 261.271 76.839C261.732 77.3915 262.422 78.5425 262.1 79.9697C262.006 80.406 261.829 80.8235 261.567 81.2223C262.73 80.6407 263.85 80.0017 264.916 79.3099C265 79.1554 265.158 79.0618 265.329 79.0377C265.421 78.9757 265.513 78.9134 265.605 78.8506L265.553 78.7727C265.591 78.7499 265.692 78.7196 265.846 78.6839C266.01 78.5691 266.172 78.453 266.334 78.3356C265.613 78.107 264.984 77.9548 264.494 77.8979L264.632 76.747C265.353 76.8335 266.327 77.0966 267.44 77.4907C269.254 76.0382 270.845 74.4143 272.136 72.6495C276.008 67.3764 276.032 59.4905 275.736 55.4982C275.414 56.2611 275.103 56.8299 274.853 57.1344L273.932 56.3977C274.761 55.3388 276.878 49.63 276.28 44.5197C275.958 41.9415 275.037 40.0079 273.425 38.7188C267.775 37.5973 261.154 42.861 260.266 43.5675L260.265 43.5677C260.206 43.6152 260.172 43.642 260.166 43.6449L259.43 42.7702C259.689 42.5478 264.573 38.4167 269.903 37.559ZM266.582 79.6766C267.125 79.5771 268.003 79.4611 269.018 79.3544C270.113 79.8256 271.274 80.384 272.41 80.9914C271.544 81.3602 270.574 81.7564 269.537 82.1667C268.508 81.1776 267.475 80.3106 266.582 79.6766ZM268.367 82.6241C267.324 81.6531 266.299 80.8343 265.467 80.3067C261.369 82.9482 256.514 84.8399 251.502 85.737C254.204 85.7906 257.621 85.6746 261.554 85.1457L261.547 85.126C263.852 84.3243 266.218 83.4558 268.367 82.6241ZM268.522 83.7884C268.769 83.6912 269.017 83.5927 269.266 83.4934C269.291 83.5181 269.315 83.5428 269.34 83.5676C269.066 83.6433 268.793 83.717 268.522 83.7884ZM270.409 83.0369C271.716 82.5098 272.777 82.0599 273.639 81.6742C273.845 81.7929 274.048 81.9128 274.249 82.0337C273.029 82.4538 271.799 82.8511 270.578 83.2126C270.522 83.1538 270.466 83.0952 270.409 83.0369ZM274.922 81.0782C275.172 81.2293 275.419 81.3821 275.661 81.5362C278.483 80.5198 281.217 79.406 283.637 78.3576C282.88 78.4568 282.245 78.4964 281.712 78.4964C279.779 78.4964 279.134 77.944 278.95 77.5757C278.812 77.2994 278.858 76.9311 279.088 76.5628C280.074 74.8608 285.765 70.8058 290.143 70.587C291.77 68.1135 295.931 63.2178 307.725 61.8303L307.863 62.9813C296.399 64.3164 292.532 68.7822 290.598 72.0049C290.184 72.6955 290.184 73.1099 290.276 73.202C290.506 73.4782 291.519 73.4322 292.44 73.0178L293.176 72.6495L293.268 73.4782C293.775 79.6474 300.266 79.3251 300.542 79.2791C306.758 79.2791 311.039 75.1816 313.019 72.7416C315.321 69.9332 317.715 62.7511 314.676 59.4823C311.878 56.4091 306.658 58.0429 300.655 59.9218L300.588 59.9427C300.036 60.1268 299.438 60.3108 298.84 60.4949L298.839 60.4952C292.586 62.4359 275.909 71.2444 273.673 72.4267C273.479 72.7374 273.274 73.0422 273.057 73.3401C271.831 75.0082 270.349 76.5551 268.671 77.9565C268.845 78.0263 269.02 78.0984 269.198 78.1728C272.269 77.8153 276.294 77.5759 277.201 78.3123C277.523 78.5425 277.615 78.9568 277.477 79.2791C277.386 79.5516 277.216 79.9636 274.922 81.0782ZM273.758 80.4016C274.913 79.88 275.768 79.443 276.188 79.141C275.361 78.9502 273.363 79.0034 271.353 79.1479C272.157 79.5373 272.967 79.959 273.758 80.4016ZM275.492 82.8166C274.149 83.2905 272.789 83.7402 271.436 84.1489C272.847 85.751 274.057 87.4648 274.622 88.9473C274.715 89.2235 274.576 89.5918 274.3 89.6839C274.254 89.7299 274.162 89.7299 274.116 89.7299C273.886 89.7299 273.656 89.5918 273.564 89.3616C272.994 87.8859 271.701 86.1205 270.228 84.5032C268.476 85.0007 266.747 85.4202 265.092 85.7246C260.212 86.6453 255.977 86.9216 252.616 86.9216C248.885 86.9216 246.284 86.5718 245.184 86.3864L248.099 90.7787C250.138 90.2687 252.055 89.8298 253.721 89.5918C257.174 89.0854 260.581 90.0522 263.067 92.2621C265.737 94.6561 267.164 98.2011 267.072 102.299C266.842 110.401 262.008 113.486 259.66 114.867C259.625 115.702 259.511 116.616 259.08 117.351C259.167 117.533 259.302 117.818 259.479 118.191C260.873 121.138 264.842 129.522 267.811 135.032C270.802 131.224 278.358 131.742 280.101 132.178C280.124 132.178 280.147 132.166 280.17 132.155C280.193 132.143 280.216 132.132 280.239 132.132C281.068 131.81 282.863 131.119 284.106 133.099C285.488 135.309 281.989 140.879 280.654 142.629C276.556 148.061 267.026 151.514 261.732 151.929C261.593 151.975 261.455 151.975 261.271 151.975C256.391 151.975 253.537 146.036 253.445 145.759L253.399 145.667L249.07 130.991C249.054 130.959 249.039 130.926 249.025 130.889L249.039 130.885L243.646 112.601C243.234 112.639 242.821 112.671 242.409 112.697C240.348 118.643 237.537 124.319 234.062 129.554C229.137 136.845 222.513 141.163 220.354 142.453C222.697 145.035 223.111 148.681 222.902 150.466C223.809 150.214 224.302 150.226 224.624 150.501C224.946 150.778 225.085 151.1 225.085 151.514C225.038 152.159 224.532 153.218 220.987 155.243C219.192 156.348 216.153 156.809 212.93 156.809C208.833 156.809 204.505 156.026 201.927 154.737C198.106 152.803 195.62 149.949 194.469 146.312C193.18 142.076 194.146 137.887 195.113 136.045C195.896 134.618 201.374 131.441 209.017 127.114C211.227 125.871 213.345 124.674 214.68 123.845C218.814 121.31 225.558 113.423 227.579 111.014C225.38 110.327 223.575 109.492 222.368 108.606C218.662 105.858 217.35 103.31 218.326 99.807C213.153 102.526 196.521 111.195 190.187 113.992C186.964 115.374 170.713 121.865 163.761 121.865C162.84 121.865 162.057 121.727 161.551 121.497C160.86 121.175 160.63 120.714 160.538 120.346C160.308 119.517 159.755 117.307 173.843 108.468C181.301 103.772 190.463 98.7996 196.218 95.9452C205.993 91.0978 226.121 85.1 231.335 83.5939C225.974 81.337 221.395 77.4318 218.317 72.4653C216.489 69.6507 215.735 66.3136 216.17 63.0303C214.586 60.6611 210.614 59.1592 208.326 59.022C208.004 59.022 207.774 58.7457 207.774 58.4235C207.774 58.1012 208.05 57.871 208.372 57.871C210.537 58.0344 214.332 59.2847 216.447 61.5578C216.51 61.3013 216.58 61.0457 216.658 60.7912L216.654 60.7862C216.195 60.0773 212.714 54.7045 208.142 52.8067C207.866 52.6686 207.728 52.3463 207.82 52.0701C207.958 51.7938 208.28 51.6557 208.557 51.7478C212.57 53.4025 215.668 57.3725 216.986 59.2521C217.048 58.4751 217.009 57.5419 216.957 56.3191C216.95 56.1513 216.943 55.9782 216.936 55.7992C216.844 54.1879 216.751 52.2082 216.751 49.5379L216.752 49.4459L216.751 49.4459L216.752 49.4293C216.795 43.3934 220.394 37.7909 221.217 36.601L219.146 28.9125C219.099 28.7744 219.099 28.5902 219.146 28.4521C219.187 28.2039 219.34 27.9928 219.537 27.8189L219.422 27.7154L219.434 27.7026C219.748 27.3822 223.962 23.0774 233.74 26.4724C240.692 23.3417 248.749 23.1116 255.885 25.8279C266.149 29.7065 270.113 35.5854 271.151 37.4218C272.035 37.3715 272.922 37.4248 273.794 37.6138L273.932 37.6599L274.024 37.7519C275.912 39.2252 277.063 41.4351 277.385 44.3816C277.76 47.3367 277.292 50.4689 276.615 52.9186L276.63 53.0264V53.0264C276.74 53.8138 277.129 56.5938 276.97 60.1269C276.862 63.1323 276.326 67.0775 274.669 70.5962C279.54 68.0379 292.877 61.1432 298.517 59.3903C298.816 59.2983 299.103 59.2063 299.39 59.1144L299.391 59.114L299.393 59.1137C299.68 59.0217 299.967 58.9297 300.266 58.8378L300.359 58.8088C306.493 56.8859 312.253 55.0805 315.551 58.6536C319.142 62.567 316.38 70.4857 313.94 73.4321C311.822 76.0103 307.264 80.384 300.588 80.384C300.588 80.4761 300.496 80.4761 300.312 80.4761C299.071 80.4761 293.969 80.1975 292.482 75.4964C290.411 76.5493 283.988 79.7045 276.847 82.3286C277.324 82.6647 277.773 83.0035 278.183 83.3411C278.241 83.3599 278.298 83.3869 278.352 83.4226C278.95 83.929 279.457 84.4355 279.917 85.034C280.101 85.2642 280.055 85.6325 279.825 85.8627C279.733 86.0008 279.595 86.0468 279.457 86.0468C279.272 86.0468 279.134 85.9548 278.996 85.8166C278.948 85.7525 278.899 85.6896 278.85 85.6277C278.131 84.7377 276.924 83.7641 275.492 82.8166ZM250.509 131.772L254.503 145.299C254.559 145.421 254.763 145.824 255.098 146.359C255.537 145.816 255.834 143.051 254.227 137.518C253.103 133.689 251.55 132.326 250.509 131.772ZM255.756 147.321C255.786 147.294 255.814 147.264 255.839 147.233C257.036 146.128 256.805 142.26 255.332 137.196C253.7 131.664 251.04 130.687 250.124 130.351L250.085 130.337L248.618 125.371C248.809 125.453 249.008 125.502 249.209 125.502C249.347 125.502 249.439 125.502 249.485 125.548C249.761 125.456 249.946 125.272 250.084 124.996C250.774 123.661 250.82 118.919 249.9 116.11C249.35 114.463 248.593 113.068 247.898 112.187L253.951 111.598C254.227 111.737 254.411 111.967 254.503 112.289C254.503 112.381 254.457 112.657 254.411 112.842C254.135 114.177 253.721 116.387 254.596 117.676C254.964 118.182 255.424 118.458 256.069 118.55C256.345 118.596 256.575 118.596 256.805 118.596C257.377 118.596 257.85 118.474 258.207 118.264C259.65 121.343 265.799 134.369 268.822 139.13L269.788 138.485C269.388 137.851 268.928 137.061 268.428 136.161C270.821 132.238 279.005 132.964 279.963 133.329L280.147 133.421L280.331 133.329C280.377 133.306 280.435 133.283 280.492 133.26L280.493 133.26C280.55 133.237 280.608 133.214 280.654 133.191C281.712 132.776 282.449 132.592 283.14 133.697C283.876 134.894 281.943 138.992 279.733 141.938C275.912 147.048 266.612 150.409 261.639 150.778C259.04 150.98 256.984 148.971 255.756 147.321ZM292.149 74.371C291.551 74.6771 290.416 75.246 288.896 75.9687L288.895 75.9643C284.797 77.1613 280.792 77.6677 280.055 77.1153C280.645 76.0623 285.396 72.4279 289.408 71.8164C288.861 72.9457 289.117 73.6132 289.447 73.9846C289.989 74.6169 291.107 74.6732 292.149 74.371ZM255.562 83.5607L255.573 83.5939C252.167 84.6162 248.591 85.1721 245.065 85.1721C243.916 85.1721 242.767 85.1262 241.664 84.9886C240.933 83.695 239.631 82.38 237.561 82.2256C236.469 82.1443 235.104 82.5233 233.615 83.2272C227.703 81.2273 222.659 77.2024 219.376 71.9129C217.212 68.6441 216.705 64.6387 217.902 60.9096C218.358 59.6333 218.273 58.1765 218.137 55.869L218.133 55.7992C218.041 54.1879 217.948 52.2542 217.948 49.584C217.948 49.3508 217.954 49.118 217.966 48.8858C218.17 47.2159 218.815 44.2313 220.296 43.2306C220.849 42.8623 221.447 42.8162 222.184 43.0464C224.11 43.6288 225.732 46.0856 227.302 48.4656L227.433 48.6632L227.577 48.8822C229.417 51.6668 231.277 54.4817 233.924 55.1547C235.671 55.6027 238.901 55.2223 242.68 54.7773L242.994 54.7403L243.135 54.7234C250.017 53.8974 258.535 52.875 262.33 56.1215C266.381 59.5744 267.118 63.9481 264.494 69.1045C263.435 71.2223 260.12 76.5628 260.074 76.6088L259.844 77.0232L260.166 77.3455C260.166 77.3455 261.271 78.4504 260.995 79.7395C260.765 80.7524 259.66 82.2256 255.562 83.5607ZM243.747 86.3032C243.228 86.2859 242.716 86.2563 242.204 86.2105C242.266 86.3987 242.314 86.5761 242.349 86.7374L241.244 86.9676C241.243 86.9639 241.241 86.9579 241.239 86.9497L241.232 86.9229C241.117 86.5045 240.311 83.5513 237.515 83.3766C235.953 83.2564 232.986 84.6165 229.871 86.9132L229.873 86.9216L229.856 86.9242C229.049 87.5201 228.232 88.1788 227.427 88.8909L227.433 88.9013L227.392 88.9224C225.37 90.7161 223.426 92.8462 221.908 95.1625C220.996 96.5725 220.307 97.8068 219.845 98.9152L219.882 98.9838C219.875 98.9881 219.846 99.0036 219.798 99.0298C218.322 102.668 219.341 104.95 223.059 107.685C226.42 110.171 235.351 112.289 243.868 111.414L254.089 110.401L254.227 110.447C254.964 110.724 255.47 111.368 255.608 112.105V112.197C255.608 112.381 255.562 112.611 255.47 113.026C255.454 113.114 255.436 113.209 255.417 113.311L255.417 113.312C255.214 114.383 254.882 116.14 255.47 116.939C255.608 117.169 255.839 117.307 256.161 117.353C256.897 117.445 257.45 117.353 257.772 117.077C258.371 116.525 258.463 115.374 258.463 114.499V114.177L258.785 113.992C260.995 112.703 265.645 109.987 265.829 102.253C265.921 98.5234 264.632 95.3007 262.238 93.1368C259.982 91.1111 256.99 90.2824 253.813 90.7428C251.864 91.0269 249.558 91.5974 247.115 92.2017L247.113 92.2021C246.786 92.2831 246.456 92.3647 246.124 92.4462C240.323 93.9195 233.786 95.5769 229.458 94.6101L229.734 93.5051C231.181 93.8339 232.927 93.8399 234.834 93.6445C235.182 90.7865 237.96 87.3394 238.421 86.7673C238.453 86.7282 238.474 86.7025 238.482 86.6914L239.357 87.428C239.314 87.4703 236.513 90.8151 236.022 93.5006C238.204 93.1983 240.55 92.6788 242.87 92.1083L242.112 88.3183L243.24 88.0926L243.988 91.8293C244.629 91.6673 245.266 91.5035 245.894 91.3413C246.237 91.2528 246.578 91.1649 246.917 91.0783L243.747 86.3032ZM226.727 87.9902C226.956 87.7874 227.186 87.5873 227.418 87.3905C225.686 87.7758 223.983 88.2745 222.322 88.9013C219.284 90.0062 217.074 91.0651 215.969 91.7096C217.212 91.5255 219.606 90.8809 222.644 89.776C223.507 89.474 225.664 88.5252 226.727 87.9902ZM229.4 85.8173C226.872 86.2359 224.349 86.9093 221.954 87.7963C219.836 88.5329 217.902 89.3616 216.475 90.0983C214.542 91.1111 213.943 91.7096 214.173 92.3542C214.265 92.7225 214.634 92.9066 215.278 92.9066C215.785 92.9066 216.429 92.8146 217.35 92.5844C218.869 92.2161 220.895 91.6175 223.013 90.8349C223.331 90.7137 223.803 90.5229 224.332 90.3016C223.001 91.698 221.828 93.1427 220.941 94.518C220.07 95.8568 219.392 97.0699 218.909 98.1864C218.575 98.3596 218.053 98.6314 217.38 98.9825L217.354 98.9961C211.763 101.911 195.851 110.208 189.681 112.934C182.038 116.294 165.372 122.049 162.057 120.438C161.774 120.317 161.704 120.16 161.66 120.061C161.654 120.047 161.648 120.035 161.643 120.024C161.551 119.655 161.735 117.399 174.442 109.435C181.9 104.739 191.016 99.8125 196.725 96.9581C205.788 92.464 223.899 86.995 230.464 85.0615C230.11 85.3024 229.755 85.5548 229.4 85.8173ZM246.506 112.322L246.629 112.31L246.631 112.335C246.583 112.335 246.54 112.33 246.506 112.322ZM244.813 112.487L246.457 112.327C246.769 112.568 247.94 113.827 248.795 116.433C249.761 119.287 249.531 123.523 249.117 124.351C248.898 124.264 248.43 123.885 248.028 123.374L244.813 112.487ZM241.15 112.756C236.674 112.899 232.313 112.321 228.777 111.363L228.772 111.369C227.24 113.204 219.859 122.042 215.278 124.858C213.897 125.686 211.779 126.883 209.569 128.126C204.459 131.027 196.771 135.401 196.08 136.598C195.205 138.255 194.284 142.076 195.528 145.944C196.54 149.258 198.842 151.837 202.387 153.678C203.63 154.323 205.334 154.829 207.221 155.151C209.938 155.52 215.002 153.494 218.685 152.021L218.685 152.021L218.685 152.021C219.913 151.535 220.888 151.152 221.669 150.87C221.956 149.977 221.923 145.373 218.961 142.721C214.956 139.13 205.288 140.327 204.505 140.649C204.505 140.649 204.551 140.603 204.643 140.557L203.815 139.728C204.492 139.05 214.797 137.796 219.487 141.626C221.188 140.626 228.127 136.253 233.049 128.909C236.394 123.848 239.108 118.45 241.15 112.756ZM222.23 151.929L222.223 151.907C221.298 152.237 220.179 152.685 219.192 153.079L219.192 153.079L219.192 153.08C217.028 154 214.542 155.013 212.194 155.658C215.462 155.75 218.639 155.335 220.481 154.231C223.703 152.389 223.98 151.56 223.98 151.422C223.704 151.422 223.127 151.59 222.412 151.84C222.358 151.876 222.298 151.906 222.23 151.929ZM272.321 52.9908L271.17 52.8067C271.768 48.9855 271.952 42.2638 270.985 41.2049C270.571 40.7445 267.855 41.7113 265.277 43.2306L264.678 42.2638C269.788 39.2252 271.354 39.9618 271.814 40.4222C273.564 42.2177 272.551 51.3795 272.321 52.9908ZM230.241 76.2405C231.116 76.747 232.128 77.0692 232.911 77.0692C233.51 77.0692 234.016 76.8851 234.292 76.5168C234.891 75.4579 233.648 73.9846 232.082 73.1099C231.3 72.6495 230.517 72.3733 229.827 72.2812C228.676 72.097 228.215 72.6035 228.031 72.8797C227.847 73.1559 227.709 73.8005 228.399 74.7212C228.814 75.2737 229.458 75.7801 230.241 76.2405ZM230.793 75.2737C229.458 74.491 228.952 73.6163 228.998 73.4322C229.182 73.294 230.149 73.294 231.484 74.1227C232.865 74.9054 233.326 75.7341 233.279 75.9183C233.141 76.0564 232.175 76.0564 230.793 75.2737ZM168.226 115.788C168.411 116.11 168.779 116.294 169.377 116.294C170.022 116.294 170.943 116.064 172.14 115.65C174.027 114.959 176.329 113.854 178.723 112.473C181.117 111.092 183.235 109.665 184.754 108.376C186.596 106.81 187.24 105.798 186.826 105.061C186.412 104.324 185.215 104.37 182.913 105.199C181.025 105.89 178.723 106.995 176.329 108.376C173.935 109.757 171.817 111.184 170.298 112.473C168.457 114.039 167.812 115.051 168.226 115.788ZM178.125 111.46C173.245 114.269 170.114 115.19 169.285 115.143C169.608 114.407 172.002 112.105 176.882 109.297C181.762 106.488 184.893 105.567 185.721 105.613C185.399 106.396 183.005 108.652 178.125 111.46ZM193.133 102.068C192.535 102.068 192.213 101.884 192.075 101.562C191.752 100.871 192.397 100.135 194.331 98.8457C195.804 97.8788 197.876 96.7739 200.085 95.715C202.341 94.6561 204.505 93.8274 206.163 93.321C208.372 92.6764 209.339 92.6764 209.661 93.367C209.984 94.0576 209.339 94.7942 207.406 96.0833C205.932 97.0501 203.861 98.1551 201.651 99.214C199.395 100.273 197.231 101.102 195.574 101.608C194.469 101.93 193.686 102.068 193.133 102.068ZM208.28 94.0576C207.175 94.1957 204.505 94.9784 200.592 96.8199C196.632 98.6615 194.331 100.181 193.502 100.917C194.607 100.779 197.277 99.9966 201.19 98.1551C205.104 96.3135 207.452 94.7942 208.28 94.0576Z",
                                        fill: "#0366D6",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M319.188 146.864C319.188 146.864 321.352 124.766 320.523 121.635C320.017 123.431 311.131 137.795 311.131 137.795V123.799C311.131 123.799 309.152 130.244 308.507 132.224C307.863 129.231 303.213 120.346 303.903 121.359C304.594 122.372 304.732 131.718 303.903 131.718C303.259 131.533 300.773 122.97 298.287 120.162C299.253 121.129 299.944 128.403 300.773 132.04C300.45 130.705 293.775 126.101 290.552 125.456C290.874 127.574 295.662 131.533 296.629 134.342C297.596 137.15 295.985 140.281 295.985 140.281L302.062 144.839L319.188 146.864Z",
                                        fill: "#88929C",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M307.771 146.634C307.632 146.174 311.177 134.664 311.177 134.664C311.177 134.664 321.72 128.173 323.608 127.068C325.496 125.963 328.12 126.147 328.12 126.147L333.875 123.983C333.875 123.983 349.712 128.173 350.172 128.311C350.633 128.449 353.441 133.605 354.684 135.309C355.927 137.012 356.526 138.117 356.71 140.879L356.848 143.688L348.469 152.665H338.847C338.847 152.665 332.033 155.289 330.468 154.829C328.902 154.369 323.332 152.988 321.306 151.238C319.28 149.489 307.771 146.634 307.771 146.634Z",
                                        fill: "#B1B7BB",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M328.212 128.173C328.166 127.85 327.429 119.885 334.98 111.23L335.67 111.829C331.849 116.156 330.284 120.346 329.639 123.108C328.948 126.101 329.133 128.034 329.133 128.08L328.212 128.173Z",
                                        fill: "#959DA5",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M335.808 112.473C334.98 112.473 334.289 111.783 334.289 110.954C334.289 110.125 334.98 109.435 335.808 109.435C336.637 109.435 337.328 110.125 337.328 110.954C337.328 111.783 336.637 112.473 335.808 112.473ZM335.808 110.355C335.486 110.355 335.21 110.632 335.21 110.954C335.21 111.276 335.486 111.552 335.808 111.552C336.131 111.552 336.407 111.276 336.407 110.954C336.407 110.632 336.131 110.355 335.808 110.355Z",
                                        fill: "#959DA5",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M340.044 115.097C339.261 115.097 338.617 114.453 338.617 113.67C338.617 112.888 339.261 112.243 340.044 112.243C340.827 112.243 341.471 112.888 341.471 113.67C341.471 114.453 340.827 115.097 340.044 115.097ZM340.044 113.164C339.768 113.164 339.537 113.394 339.537 113.67C339.537 113.946 339.768 114.177 340.044 114.177C340.32 114.177 340.55 113.946 340.55 113.67C340.55 113.394 340.32 113.164 340.044 113.164Z",
                                        fill: "#959DA5",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M333.829 117.584C332.539 117.584 331.527 117.031 331.481 116.985L331.941 116.202C332.033 116.248 333.829 117.261 335.44 116.202C336.683 115.42 337.88 114.499 338.985 113.578L339.583 114.269C338.432 115.236 337.189 116.156 335.946 116.985C335.256 117.445 334.519 117.584 333.829 117.584Z",
                                        fill: "#959DA5",
                                    }),
                                    (0, y.jsx)("g", {
                                        opacity: "0.5",
                                        children: (0, y.jsx)("path", {
                                            opacity: "0.5",
                                            d: "M321.168 120.162C320.8 119.011 320.661 117.768 320.846 116.525C320.984 115.972 321.352 115.328 321.905 115.328C322.181 115.374 322.411 115.466 322.641 115.65C323.102 116.064 323.562 116.479 323.93 116.985C326.923 120.53 329.133 124.674 330.56 129.093C330.376 126.883 331.573 124.766 333.23 123.292C334.887 121.819 337.005 121.036 339.169 120.484C339.952 120.254 340.919 120.162 341.517 120.714C341.885 121.129 342.024 121.727 341.839 122.28C341.655 122.786 341.333 123.246 340.919 123.615C339.952 124.443 338.847 125.134 337.742 125.686C335.348 127.022 333.092 128.587 330.974 130.336C330.79 130.521 330.56 130.659 330.33 130.705C330.192 130.705 330.007 130.705 329.869 130.659C325.265 129.6 322.319 124.305 321.168 120.162Z",
                                            fill: "#959DA5",
                                        }),
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M325.403 142.629C327.797 140.373 330.468 138.347 333.276 136.598C335.256 137.012 337.097 136.69 338.617 136.92C341.839 134.065 345.615 130.751 348.929 128.034C345.154 127.022 333.829 124.029 333.829 124.029L328.074 126.193C328.074 126.193 325.449 126.055 323.562 127.114C322.089 127.988 315.045 132.316 312.282 134.019C314.078 136.644 322.641 140.557 325.403 142.629Z",
                                        fill: "#CACFD3",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M312.42 134.111L312.282 133.927C314.907 132.316 322.043 127.896 323.562 127.021C325.357 126.009 327.797 126.055 328.12 126.101L333.875 123.937H333.921C334.013 123.983 345.246 126.929 349.021 127.942L348.975 128.172C345.338 127.206 334.657 124.351 333.921 124.167L328.212 126.331H328.166C328.12 126.331 325.542 126.193 323.746 127.252C322.181 128.08 315.045 132.5 312.42 134.111Z",
                                        fill: "#E1E4E8",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M56.4898 157.776C78.6618 157.776 96.6358 156.003 96.6358 153.816C96.6358 151.63 78.6618 149.857 56.4898 149.857C34.3178 149.857 16.3438 151.63 16.3438 153.816C16.3438 156.003 34.3178 157.776 56.4898 157.776Z",
                                        fill: "#CACFD6",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M78.3123 141.156C78.3123 141.156 79.095 147.141 80.6603 148.752C82.2256 150.363 88.625 154.829 88.9473 154C85.8167 150.087 82.5019 140.419 82.5019 140.419L78.3123 141.156Z",
                                        fill: "#FF7000",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M57.7789 141.57C57.6868 141.616 57.6408 141.662 57.5948 141.708C57.5027 141.8 57.5948 141.984 57.6408 142.076C58.3774 143.319 58.9299 144.7 59.3442 146.082C59.6205 147.094 60.1729 148.476 61.0937 148.015C62.7051 147.141 61.37 145.023 61.0937 143.227C61.2779 144.332 64.8689 143.043 66.0199 141.386C67.4931 139.268 63.9481 138.946 62.659 139.268C61.0016 139.682 59.3442 140.833 57.7789 141.57Z",
                                        fill: "#FF7000",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M71.4525 128.633C69.2887 128.403 67.0788 128.449 65.0991 129.323C63.2115 130.152 61.6922 131.671 60.3111 133.191C59.8967 133.697 59.4363 134.112 58.8839 134.48C58.3314 134.756 57.7329 134.894 57.1344 134.894C54.2339 134.986 51.5176 133.375 49.584 131.257C47.6503 129.139 46.2692 126.561 44.7959 124.075C42.4479 120.116 39.5935 116.156 35.5421 113.992C29.9253 110.954 22.5591 111.875 17.4027 115.742C12.2464 119.563 9.25384 125.917 8.79345 132.27C8.70137 133.697 8.9776 135.493 10.3588 135.815L12.4766 131.717C13.5355 129.692 14.6404 127.62 16.4359 126.193C18.2314 124.766 20.9017 124.259 22.7893 125.548C24.2625 126.561 24.861 128.449 25.0452 130.244C25.2294 132.04 25.0912 133.835 25.5056 135.585C26.5185 139.82 30.662 142.767 34.8975 143.596C37.9822 144.194 41.2049 143.918 44.1514 142.767C49.0315 140.833 53.2671 136.598 58.4695 136.92C59.1601 138.761 60.9556 140.005 62.8432 140.557C64.7308 141.109 66.7565 140.971 68.6901 140.879L66.112 143.964C67.4471 146.68 69.2887 149.12 71.4525 151.192C72.5114 148.522 71.6366 145.805 69.9792 143.457C70.3936 142.629 71.0842 141.938 71.9129 141.57C73.8465 142.583 78.9108 142.306 81.0746 142.03C80.9826 143.596 81.3048 147.187 82.3177 148.706C83.3305 150.225 86.5533 153.494 88.3948 154.461C89.5458 155.105 93.0908 155.934 93.6433 154.875C89.2696 153.034 84.9419 148.568 84.988 143.826C84.988 141.524 87.0137 140.005 86.8755 138.071C86.7835 136.367 84.0211 134.388 82.8241 133.421C79.6014 130.797 75.642 129.139 71.4525 128.633Z",
                                        fill: "#FF9C57",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M47.236 136.46C45.5326 136.46 43.737 136.828 42.494 135.447C42.0796 134.894 41.7113 134.296 41.3891 133.697C40.3762 132.132 39.1331 131.948 37.3376 132.086C35.1738 132.224 34.3911 131.395 33.5164 129.416C31.0303 123.891 24.769 119.563 18.7379 122.786C14.134 125.272 11.3256 130.705 10.0365 135.585C10.0365 135.631 9.99048 135.677 9.99048 135.723C10.0826 135.769 10.1746 135.815 10.3128 135.861L12.4766 131.764C13.5355 129.738 14.6404 127.666 16.4359 126.239C18.2315 124.812 20.9017 124.305 22.7893 125.594C24.2626 126.607 24.8611 128.495 25.0452 130.29C25.2294 132.086 25.0913 133.881 25.5056 135.631C26.5185 139.866 30.662 142.813 34.8976 143.642C37.9822 144.24 41.2049 143.964 44.1514 142.813C47.6043 141.432 50.781 138.9 54.1879 137.657C52.0701 136.736 49.7681 136.46 47.236 136.46Z",
                                        fill: "#FF7000",
                                    }),
                                    (0, y.jsx)("g", {
                                        opacity: "0.6",
                                        children: (0, y.jsx)("path", {
                                            opacity: "0.6",
                                            d: "M70.4857 134.618C70.5777 134.618 74.6292 137.334 74.5831 138.623C74.5371 139.912 70.9 141.846 70.9 141.846C70.9 141.846 72.6955 139.59 72.2812 138.209C71.8668 136.828 70.4857 134.618 70.4857 134.618Z",
                                            fill: "#FFD1AC",
                                        }),
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M85.6785 135.815C85.2642 137.196 84.4815 138.485 84.1592 139.959C83.6989 141.754 84.0672 143.688 85.1721 145.161C85.08 144.747 85.08 144.286 85.08 143.872C85.08 141.57 87.1057 140.051 86.9676 138.117C86.8755 137.334 86.3691 136.552 85.6785 135.815Z",
                                        fill: "#FB8532",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M88.4409 133.007C89.4998 132.592 90.3745 133.697 89.6379 136.229L90.973 136.275C90.7428 135.585 90.6507 134.848 90.7428 134.112C90.7889 133.467 91.3413 133.007 91.9859 133.053H92.0319C92.7685 133.099 92.9987 133.697 93.0448 134.434C93.0448 135.124 92.9067 135.815 92.5844 136.46C94.1957 137.611 95.0705 139.59 94.8403 141.57C94.7022 142.26 94.5641 142.951 94.518 143.642C94.472 144.378 94.8403 145.023 95.4388 145.391C95.8071 145.529 96.2215 145.575 96.5898 145.667C96.9581 145.759 97.3724 146.082 97.3264 146.496C97.2803 146.818 96.9581 147.002 96.6818 147.187C94.4259 148.292 91.8017 148.292 89.5918 147.187C87.6582 146.22 86.0929 144.378 85.8166 142.26C85.6325 140.833 86.0468 139.452 86.9676 138.347C87.2899 137.979 88.3028 137.472 88.4409 137.012C87.8424 136.275 87.0137 133.559 88.4409 133.007Z",
                                        fill: "#FF9C57",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M96.6358 146.818C96.9663 146.818 97.2343 146.55 97.2343 146.22C97.2343 145.889 96.9663 145.621 96.6358 145.621C96.3052 145.621 96.0373 145.889 96.0373 146.22C96.0373 146.55 96.3052 146.818 96.6358 146.818Z",
                                        fill: "#2F363D",
                                    }),
                                    (0, y.jsx)("g", {
                                        opacity: "0.6",
                                        children: (0, y.jsx)("path", {
                                            opacity: "0.6",
                                            d: "M38.8569 121.451C41.297 124.213 43.1846 127.39 45.4865 130.244C47.7885 133.099 50.9652 135.17 54.5562 136.045C54.8324 135.999 55.0626 135.953 55.3389 135.907C52.8067 135.677 50.4587 134.204 48.7093 132.316C46.7296 130.198 45.3945 127.62 43.9212 125.134C41.5732 121.175 38.7188 117.215 34.6674 115.051C31.859 113.578 28.6823 112.98 25.5056 113.348C30.662 114.315 35.4961 117.63 38.8569 121.451Z",
                                            fill: "#FFD1AC",
                                        }),
                                    }),
                                    (0, y.jsx)("g", {
                                        opacity: "0.6",
                                        children: (0, y.jsx)("path", {
                                            opacity: "0.6",
                                            d: "M78.9108 132.915C81.1667 134.204 82.9162 136.045 84.4815 138.071C84.5736 137.518 84.7578 136.966 84.9419 136.46C83.7909 135.124 82.4098 133.927 80.9365 132.961C77.5296 130.751 73.6163 130.106 69.703 129.416L71.0381 130.06C73.6624 131.027 76.4707 131.487 78.9108 132.915Z",
                                            fill: "#FFD1AC",
                                        }),
                                    }),
                                    (0, y.jsx)("g", {
                                        opacity: "0.6",
                                        children: (0, y.jsx)("path", {
                                            opacity: "0.6",
                                            d: "M88.0265 134.71C89.3616 134.618 88.625 136.966 89.3617 137.242C89.9602 137.472 90.6968 137.012 91.3874 137.288C92.124 137.657 92.6765 138.209 93.0448 138.946C93.5512 139.959 93.5512 140.879 93.4591 141.984C93.4131 143.411 93.5052 144.885 95.1626 145.299C94.6561 144.885 94.3799 144.286 94.4259 143.642C94.472 142.951 94.6101 142.26 94.7482 141.57C94.9784 139.59 94.1037 137.611 92.4923 136.46C92.8146 135.815 92.9527 135.124 92.9527 134.434C92.9066 133.697 92.6765 133.099 91.9398 133.053C91.2953 132.961 90.7428 133.421 90.6507 134.066V134.112C90.5587 134.848 90.6507 135.585 90.8809 136.275L89.5458 136.229C90.2824 133.651 89.4077 132.546 88.3488 133.007C87.6582 133.283 87.5201 134.019 87.5661 134.848C87.7503 134.802 87.8884 134.756 88.0265 134.71Z",
                                            fill: "#FFD1AC",
                                        }),
                                    }),
                                ],
                            }),
                            (0, y.jsx)("defs", {
                                children: (0, y.jsx)("clipPath", {
                                    id: "clip0",
                                    children: (0, y.jsx)("rect", {
                                        width: "363.8",
                                        height: "159.847",
                                        fill: "white",
                                    }),
                                }),
                            }),
                        ],
                    }),
                a1 = () =>
                    (0, y.jsxs)("svg", {
                        role: "presentation",
                        width: "100%",
                        height: "100%",
                        viewBox: "0 0 364 160",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [
                            (0, y.jsx)("mask", {
                                id: "mask0",
                                "mask-type": "alpha",
                                maskUnits: "userSpaceOnUse",
                                x: "250",
                                y: "76",
                                width: "59",
                                height: "50",
                                children: (0, y.jsx)("rect", {
                                    x: "250.419",
                                    y: "76.665",
                                    width: "57.6723",
                                    height: "48.5798",
                                    fill: "#C4C4C4",
                                }),
                            }),
                            (0, y.jsxs)("g", {
                                mask: "url(#mask0)",
                                children: [
                                    (0, y.jsx)("path", {
                                        d: "M266.147 117.512C265.963 116.729 302.496 74.7009 305.629 71.8438C308.762 68.9866 336.819 35.899 338.846 34.747C340.09 31.982 335.989 29.6317 334.147 30.9221C332.442 34.2862 302.865 69.2171 300.193 72.0742C297.521 74.9313 276.099 98.1111 266.746 105.53C264.719 111.153 262.83 112.121 261.402 113.733C261.171 114.609 261.448 115.807 263.153 116.913C264.857 118.019 266.147 117.512 266.147 117.512Z",
                                        fill: "#6E7681",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M329.078 42.6726C326.407 45.2993 316.364 57.1426 313.737 60.2302C308.117 66.9123 284.851 93.2718 278.908 99.9077C276.145 103.041 265.594 113.825 262.83 116.682C262.922 116.774 263.061 116.866 263.199 116.912C264.903 118.065 266.193 117.511 266.193 117.511C266.009 116.728 302.542 74.7003 305.676 71.8431C308.808 68.986 336.865 35.8983 338.892 34.7463C339.214 34.0089 339.168 33.1794 338.754 32.4883C335.805 36.1288 332.396 39.4007 329.078 42.6726Z",
                                        fill: "#484F58",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M262.139 112.948C261.862 113.179 261.632 113.456 261.402 113.732C261.171 114.608 261.448 115.806 263.153 116.912C264.857 118.018 266.147 117.511 266.147 117.511C266.239 117.234 266.423 117.004 266.607 116.774C265.594 115.022 264.027 113.686 262.139 112.948Z",
                                        fill: "#30363D",
                                    }),
                                ],
                            }),
                            (0, y.jsx)("path", {
                                d: "M364 134.286H228.831V135.207H364V134.286Z",
                                fill: "#161B22",
                            }),
                            (0, y.jsx)("path", {
                                d: "M0 136.129L12.1625 105.161L13.2682 114.609L22.2058 98.6637L24.2789 104.747L28.4713 94.0554L33.1705 108.94L40.5417 86.4978L46.0701 105.069L53.7638 94.0554C53.7638 94.0554 45.4712 97.0969 45.4712 96.2674C45.4712 95.4379 56.6662 80.6913 56.6662 80.6913C56.6662 80.6913 46.3465 84.5623 46.3465 83.7328C46.3465 82.9495 55.0998 74.8388 58.0944 69.7236C61.089 64.6083 66.4331 46.9586 66.4331 46.9586C66.4331 46.9586 75.0022 68.7098 79.5631 71.06C81.0374 67.5577 85.7364 57.6499 85.7364 57.6499L76.4304 61.7512C76.4304 61.7512 90.4356 32.212 92.1863 25.576C93.8909 18.8941 93.4763 21.1982 96.563 27.0046C98.6822 31.9355 101.216 48.1107 109.002 57.3273C116.373 64.2397 103.704 59.3089 103.704 59.3089L115.129 81.1983L125.173 61.7512L131.116 76.8664L140.007 57.3273L129.964 64.3779C129.964 64.3779 138.902 51.1982 140.836 40.8295C142.725 30.4148 145.121 13.871 145.121 13.871L157.744 37.9724C157.744 37.9724 169.815 4.51614 170.275 0C171.703 15.9908 190.822 54.1015 190.822 54.1015C190.822 54.1015 198.24 38.295 198.93 32.4424C201.234 38.2488 231.318 134.885 231.318 134.885C231.318 134.885 146.457 140.415 113.379 140.507C80.3002 140.599 19.073 138.387 11.0107 137.696C6.03519 137.281 0 136.129 0 136.129Z",
                                fill: "#161B22",
                            }),
                            (0, y.jsx)("path", {
                                d: "M194.471 140.634L196.004 135.829L204.485 130.719L216.339 123.87L222.061 118.147L228.601 110.889L223.492 108.845L218.689 103.939L219.098 99.1349L188.647 114.569L172.399 119.782L163.407 121.622L160.853 119.621L166.166 114.467L176.895 107.414L191.304 98.9304L208.675 91.2644L225.535 86.1538L233.199 83.9051L224.309 79.3055L218.383 72.2528L216.748 64.1779L217.769 59.2717L217.463 51.0946L218.996 42.8153L222.163 37.2958L220.222 28.9143L220.835 27.2789L227.17 25.8479L234.119 27.1767L237.798 25.3368L249.753 24.5186L260.687 28.1991L267.942 34.1272L270.701 37.9088L273.971 38.2155L276.73 41.8951L277.139 47.3123L276.321 52.9339L276.934 57.3291L276.423 65.1995L273.46 71.7412L280.204 69.1858L290.321 63.8707L299.824 59.4756L311.371 57.1249L316.378 60.0888L317.297 62.9513L315.356 71.1279L309.123 77.5674L302.685 80.0205L297.882 79.8161L294.101 77.6696L293.182 74.911L287.766 77.6696L275.81 82.3712L263.753 85.5405L255.169 86.7671L244.848 86.1535L247.914 91.3664L254.454 90.0375L260.687 90.9581L265.081 95.046L266.716 103.939L263.957 111.605L259.563 114.058L258.746 118.248L268.044 136.238L271.11 133.683L278.672 132.456L282.861 132.354L283.985 135.625L280.613 142.473L275.095 146.868L267.84 150.343L260.176 151.57L257.213 149.832L254.147 145.642L244.235 112.525L241.987 112.627L239.841 118.965L234.834 128.368L228.601 136.034L220.631 141.962L220.12 142.984L222.163 146.664L222.572 150.753L224.411 151.264L224.207 152.49L220.324 155.25L215.215 156.681L205.609 155.659L198.865 152.184L194.88 145.949L194.471 140.634Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                d: "M229.337 160C254.781 160 275.407 156.679 275.407 152.581C275.407 148.483 254.781 145.162 229.337 145.162C203.893 145.162 183.267 148.483 183.267 152.581C183.267 156.679 203.893 160 229.337 160Z",
                                fill: "#161B22",
                                fillOpacity: "0.5",
                            }),
                            (0, y.jsx)("path", {
                                d: "M297.468 79.8266C296.557 79.5229 295.065 78.435 294.432 77.9289L293.673 76.7905C297.973 70.465 305.356 61.2544 307.333 62.2428C308.85 63.0018 311.127 64.0852 314.921 61.8633C315.791 62.5389 317.04 63.7903 316.818 65.784C316.059 72.6155 311.506 75.2722 308.091 77.9289C304.677 80.5856 298.606 80.2061 297.468 79.8266Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                d: "M203.748 107.271L219.072 99.8261L224.757 91.1499L229.28 86.8487L234.025 84.4756L223.868 86.8487L202.589 93.9684L186.891 101.904L169.448 112.509L162.033 118.813L161.366 120.889L164.48 121.928L171.129 120.41L186.891 115.155L203.748 107.271Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                d: "M217.528 156.364H210.332L204.907 155.478L199.924 153.041L195.717 147.504L194.721 140.195L196.381 136.097L203.91 131.445L214.761 125.244L219.743 121.146L226.497 113.836L237.901 123.361L232.143 132.331L227.161 137.315L219.743 142.852L221.957 146.95L222.621 151.38H223.397L225.168 151.934L221.957 154.813L217.528 156.364Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                d: "M251.881 137.302L250.528 133.669L266.127 132.742L268.263 136.875L251.881 137.302Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                d: "M263.171 145.446L254.094 146.491L258.512 151.232L262.368 151.875L271.847 149.223L263.171 145.446Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                d: "M269.711 134.167L273.767 132.742H277.305H282.656L283.95 134.167V136.713L267.985 136.195L269.711 134.167Z",
                                fill: "#0D1117",
                            }),
                            (0, y.jsx)("path", {
                                fillRule: "evenodd",
                                clipRule: "evenodd",
                                d: "M270.086 37.5955C269.612 36.8498 268.796 35.7169 267.529 34.4246C265.456 32.3048 261.724 29.2632 255.689 26.9591C248.778 24.3324 240.947 24.6089 234.22 27.6964L233.99 27.7886L233.76 27.6964C226.909 25.2444 222.997 26.8076 221.361 27.8354C223.604 28.6136 227.762 31.0977 229.337 36.5904L228.231 36.9131C226.665 31.3831 222.104 29.1712 220.445 28.7564L222.657 36.867L222.518 37.0974C222.491 37.125 220.914 39.3288 219.652 42.4565C219.701 42.4198 219.75 42.3846 219.801 42.3509C220.63 41.7978 221.643 41.6596 222.703 42.0282C225.051 42.8114 226.755 45.3902 228.552 48.1079L228.554 48.1113C230.305 50.784 232.101 53.5029 234.358 54.102C235.932 54.5066 239.083 54.1219 242.742 53.6751L243.02 53.6412L243.1 53.6313C250.227 52.7574 259.068 51.6734 263.245 55.3002C266.331 57.9269 269.28 62.5813 265.687 69.6781C264.884 71.2835 262.859 74.6017 261.831 76.2839C261.679 76.5332 261.549 76.7465 261.448 76.9131C261.909 77.4661 262.6 78.6182 262.277 80.0468C262.183 80.4835 262.006 80.9014 261.744 81.3006C262.908 80.7184 264.029 80.0788 265.095 79.3863C265.179 79.2317 265.337 79.138 265.509 79.1139C265.601 79.0518 265.693 78.9895 265.785 78.9266L265.733 78.8486C265.771 78.8258 265.872 78.7955 266.026 78.7597C266.19 78.6448 266.352 78.5286 266.514 78.4111C265.793 78.1823 265.163 78.03 264.673 77.973L264.811 76.821C265.533 76.9076 266.507 77.1709 267.621 77.5654C269.436 76.1115 271.028 74.4861 272.32 72.7196C276.195 67.4414 276.219 59.548 275.923 55.5519C275.6 56.3155 275.289 56.8848 275.039 57.1896L274.117 56.4522C274.947 55.3923 277.065 49.6781 276.467 44.5629C276.145 41.9822 275.223 40.0468 273.61 38.7564C267.956 37.6338 261.331 42.9026 260.442 43.6098L260.441 43.61C260.382 43.6575 260.348 43.6843 260.342 43.6872L259.606 42.8117C259.865 42.5891 264.752 38.454 270.086 37.5955ZM266.762 79.7534C267.306 79.6538 268.184 79.5377 269.2 79.4309C270.296 79.9025 271.458 80.4615 272.594 81.0695C271.728 81.4386 270.757 81.8352 269.719 82.2459C268.69 81.2558 267.656 80.388 266.762 79.7534ZM268.549 82.7037C267.505 81.7318 266.479 80.9122 265.647 80.3841C261.546 83.0281 256.688 84.9216 251.672 85.8196C254.376 85.8732 257.795 85.7571 261.731 85.2277L261.724 85.208C264.031 84.4055 266.398 83.5362 268.549 82.7037ZM268.704 83.8691C268.951 83.7718 269.199 83.6732 269.448 83.5738C269.473 83.5986 269.497 83.6233 269.522 83.6481C269.248 83.7239 268.975 83.7977 268.704 83.8691ZM270.592 83.1169C271.9 82.5893 272.962 82.139 273.824 81.7529C274.03 81.8717 274.233 81.9917 274.435 82.1127C273.214 82.5333 271.983 82.9309 270.761 83.2928C270.705 83.2339 270.649 83.1753 270.592 83.1169ZM275.108 81.1563C275.358 81.3076 275.605 81.4605 275.848 81.6148C278.671 80.5974 281.407 79.4825 283.829 78.4331C283.071 78.5324 282.436 78.5721 281.903 78.5721C279.968 78.5721 279.323 78.0191 279.139 77.6505C279.001 77.3739 279.047 77.0053 279.277 76.6366C280.264 74.933 285.958 70.8741 290.339 70.6551C291.967 68.1792 296.131 63.2789 307.933 61.89L308.071 63.0421C296.6 64.3785 292.73 68.8486 290.795 72.0744C290.38 72.7656 290.38 73.1804 290.472 73.2726C290.703 73.5491 291.716 73.503 292.638 73.0882L293.374 72.7196L293.466 73.5491C293.974 79.7242 300.469 79.4016 300.745 79.3555C306.966 79.3555 311.249 75.2541 313.231 72.8118C315.534 70.0007 317.93 62.8117 314.889 59.5398C312.089 56.4636 306.865 58.099 300.858 59.9797L300.791 60.0006C300.239 60.1849 299.641 60.3691 299.042 60.5533L299.041 60.5536C292.784 62.4962 276.096 71.3131 273.858 72.4966C273.664 72.8076 273.459 73.1127 273.242 73.4108C272.015 75.0805 270.532 76.6289 268.853 78.0316C269.027 78.1015 269.202 78.1737 269.38 78.2482C272.453 77.8903 276.481 77.6507 277.389 78.3878C277.711 78.6182 277.803 79.0329 277.665 79.3555C277.574 79.6283 277.404 80.0407 275.108 81.1563ZM273.943 80.4791C275.099 79.957 275.955 79.5196 276.375 79.2173C275.547 79.0263 273.548 79.0796 271.537 79.2242C272.341 79.614 273.152 80.0361 273.943 80.4791ZM275.678 82.8964C274.335 83.3707 272.974 83.8209 271.62 84.23C273.032 85.8336 274.242 87.5491 274.808 89.033C274.901 89.3094 274.762 89.6781 274.486 89.7703C274.44 89.8163 274.348 89.8163 274.301 89.8163C274.071 89.8163 273.841 89.6781 273.749 89.4477C273.179 87.9706 271.885 86.2035 270.411 84.5846C268.658 85.0826 266.928 85.5025 265.271 85.8072C260.388 86.7288 256.15 87.0053 252.787 87.0053C249.053 87.0053 246.451 86.6552 245.35 86.4696L248.267 90.8661C250.307 90.3556 252.226 89.9163 253.893 89.6781C257.348 89.1712 260.757 90.1389 263.245 92.3509C265.917 94.7472 267.345 98.2956 267.253 102.397C267.023 110.507 262.185 113.595 259.836 114.977C259.801 115.813 259.687 116.728 259.255 117.464C259.342 117.646 259.477 117.931 259.655 118.305C261.05 121.254 265.021 129.646 267.992 135.162C270.985 131.35 278.546 131.869 280.291 132.305C280.314 132.305 280.337 132.293 280.36 132.282C280.383 132.27 280.406 132.259 280.429 132.259C281.258 131.937 283.054 131.245 284.298 133.227C285.681 135.439 282.18 141.014 280.844 142.766C276.743 148.203 267.207 151.66 261.909 152.075C261.77 152.121 261.632 152.121 261.448 152.121C256.564 152.121 253.709 146.176 253.617 145.899L253.57 145.807L249.239 131.117C249.223 131.085 249.208 131.052 249.194 131.015L249.208 131.011L243.811 112.709C243.399 112.747 242.985 112.779 242.573 112.805C240.511 118.757 237.698 124.439 234.22 129.679C229.292 136.976 222.664 141.299 220.503 142.59C222.848 145.174 223.262 148.824 223.053 150.611C223.96 150.358 224.454 150.37 224.776 150.646C225.098 150.923 225.237 151.245 225.237 151.66C225.19 152.305 224.684 153.365 221.137 155.392C219.34 156.498 216.299 156.96 213.074 156.96C208.974 156.96 204.643 156.176 202.064 154.886C198.24 152.95 195.752 150.093 194.601 146.453C193.311 142.212 194.277 138.019 195.245 136.176C196.029 134.747 201.51 131.567 209.158 127.236C211.37 125.992 213.489 124.794 214.825 123.964C218.962 121.427 225.711 113.532 227.733 111.121C225.533 110.433 223.726 109.597 222.518 108.71C218.81 105.96 217.497 103.409 218.474 99.9031C213.297 102.625 196.654 111.302 190.316 114.102C187.091 115.485 170.829 121.982 163.872 121.982C162.95 121.982 162.167 121.844 161.66 121.614C160.969 121.291 160.739 120.83 160.647 120.462C160.417 119.632 159.863 117.42 173.961 108.572C181.424 103.872 190.592 98.8947 196.351 96.0376C206.132 91.1855 226.274 85.182 231.492 83.6744C226.127 81.4154 221.545 77.5065 218.465 72.5352C216.636 69.7179 215.881 66.3776 216.316 63.0912C214.731 60.7197 210.757 59.2164 208.467 59.079C208.145 59.079 207.915 58.8025 207.915 58.48C207.915 58.1574 208.191 57.9269 208.513 57.9269C210.679 58.0905 214.477 59.342 216.593 61.6173C216.657 61.3605 216.727 61.1047 216.805 60.8499L216.801 60.8449C216.341 60.1354 212.858 54.7574 208.283 52.8578C208.007 52.7196 207.869 52.397 207.961 52.1205C208.099 51.8439 208.421 51.7057 208.698 51.7979C212.714 53.4542 215.814 57.428 217.133 59.3094C217.195 58.5316 217.156 57.5975 217.104 56.3736C217.097 56.2056 217.09 56.0323 217.083 55.8532C216.991 54.2403 216.898 52.2587 216.898 49.5859L216.899 49.4938H216.898L216.899 49.4772C216.942 43.4355 220.543 37.8276 221.367 36.6366L219.294 28.9407C219.247 28.8025 219.247 28.6181 219.294 28.4799C219.335 28.2315 219.488 28.0202 219.686 27.8461L219.57 27.7425L219.583 27.7297C219.897 27.409 224.114 23.1001 233.898 26.4983C240.855 23.3646 248.917 23.1343 256.058 25.8532C266.329 29.7355 270.296 35.62 271.334 37.4582C272.219 37.4078 273.107 37.4612 273.979 37.6504L274.117 37.6965L274.209 37.7886C276.099 39.2633 277.25 41.4753 277.573 44.4246C277.948 47.3826 277.48 50.5178 276.802 52.9698L276.817 53.0777C276.927 53.8659 277.317 56.6485 277.157 60.185C277.049 63.1933 276.513 67.1422 274.855 70.6643C279.729 68.1036 293.075 61.2023 298.719 59.4477C299.018 59.3556 299.305 59.2635 299.593 59.1715L299.594 59.1711L299.596 59.1708C299.883 59.0787 300.17 58.9867 300.469 58.8947L300.562 58.8656C306.7 56.9409 312.464 55.1338 315.764 58.7103C319.358 62.6274 316.594 70.5537 314.152 73.5029C312.033 76.0836 307.472 80.4615 300.791 80.4615C300.791 80.5537 300.699 80.5537 300.515 80.5537C299.273 80.5537 294.168 80.2748 292.68 75.5692C290.607 76.6231 284.18 79.7813 277.034 82.4079C277.512 82.7444 277.961 83.0835 278.371 83.4214C278.429 83.4402 278.486 83.4672 278.54 83.503C279.139 84.0099 279.646 84.5168 280.106 85.1159C280.291 85.3463 280.245 85.715 280.014 85.9454C279.922 86.0836 279.784 86.1297 279.646 86.1297C279.461 86.1297 279.323 86.0376 279.185 85.8993C279.137 85.8351 279.088 85.7721 279.039 85.7102C278.319 84.8193 277.111 83.8448 275.678 82.8964ZM250.679 131.899L254.675 145.439C254.731 145.561 254.935 145.964 255.271 146.5C255.71 145.956 256.007 143.188 254.399 137.65C253.274 133.817 251.72 132.453 250.679 131.899ZM255.929 147.463C255.959 147.435 255.987 147.405 256.012 147.374C257.21 146.268 256.979 142.397 255.505 137.328C253.872 131.791 251.21 130.813 250.293 130.476L250.254 130.462L248.786 125.492C248.977 125.574 249.176 125.623 249.378 125.623C249.516 125.623 249.608 125.623 249.654 125.669C249.93 125.577 250.115 125.392 250.253 125.116C250.944 123.78 250.99 119.033 250.069 116.222C249.519 114.573 248.761 113.177 248.066 112.295L254.123 111.705C254.399 111.844 254.583 112.075 254.675 112.397C254.675 112.489 254.629 112.765 254.583 112.951C254.307 114.287 253.893 116.499 254.768 117.789C255.137 118.296 255.597 118.572 256.242 118.664C256.518 118.71 256.749 118.71 256.979 118.71C257.551 118.71 258.024 118.588 258.382 118.378C259.826 121.46 265.979 134.498 269.004 139.264L269.971 138.618C269.57 137.983 269.11 137.193 268.61 136.292C271.004 132.365 279.194 133.092 280.152 133.457L280.337 133.549L280.521 133.457C280.567 133.434 280.625 133.411 280.682 133.388H280.683C280.74 133.365 280.798 133.342 280.844 133.319C281.903 132.904 282.64 132.719 283.332 133.825C284.068 135.024 282.134 139.126 279.922 142.074C276.099 147.189 266.792 150.553 261.816 150.923C259.215 151.125 257.158 149.114 255.929 147.463ZM292.347 74.4427C291.748 74.7491 290.612 75.3186 289.091 76.0419L289.09 76.0375C284.99 77.2357 280.982 77.7426 280.244 77.1896C280.835 76.1356 285.589 72.4978 289.604 71.8857C289.056 73.0161 289.313 73.6842 289.643 74.0559C290.185 74.6889 291.304 74.7452 292.347 74.4427ZM255.735 83.6412L255.746 83.6744C252.338 84.6977 248.759 85.2541 245.231 85.2541C244.081 85.2541 242.931 85.2082 241.828 85.0705C241.096 83.7756 239.793 82.4594 237.722 82.3048C236.629 82.2235 235.263 82.6028 233.773 83.3074C227.857 81.3056 222.81 77.2768 219.524 71.9823C217.359 68.7103 216.852 64.7011 218.049 60.9684C218.506 59.6909 218.421 58.2327 218.285 55.923L218.281 55.8532C218.189 54.2403 218.095 52.3048 218.095 49.632C218.095 49.3986 218.102 49.1656 218.114 48.9331C218.318 47.2616 218.963 44.2742 220.445 43.2725C220.998 42.9039 221.597 42.8577 222.334 43.0882C224.262 43.6711 225.885 46.1303 227.456 48.5125L227.587 48.7103L227.731 48.9295C229.572 51.7168 231.434 54.5344 234.082 55.208C235.83 55.6565 239.063 55.2757 242.844 54.8303L243.158 54.7932L243.3 54.7763C250.186 53.9495 258.71 52.9262 262.507 56.1758C266.561 59.632 267.299 64.0099 264.673 69.1712C263.613 71.291 260.296 76.6366 260.25 76.6827L260.02 77.0975L260.342 77.4201C260.342 77.4201 261.448 78.526 261.172 79.8164C260.941 80.8302 259.836 82.3048 255.735 83.6412ZM243.912 86.3863C243.393 86.369 242.88 86.3394 242.368 86.2935C242.43 86.4819 242.478 86.6595 242.513 86.8209L241.407 87.0514C241.406 87.0477 241.404 87.0417 241.402 87.0335L241.395 87.0066C241.28 86.5878 240.474 83.6318 237.676 83.4569C236.113 83.3366 233.144 84.698 230.027 86.9969L230.029 87.0053L230.012 87.0079C229.204 87.6044 228.386 88.2637 227.581 88.9765L227.587 88.9869L227.546 89.008C225.523 90.8035 223.577 92.9356 222.058 95.2541C221.146 96.6655 220.456 97.9009 219.994 99.0104L220.031 99.0791C220.024 99.0834 219.995 99.0989 219.947 99.1251C218.47 102.767 219.489 105.051 223.21 107.789C226.573 110.277 235.51 112.397 244.033 111.521L254.261 110.507L254.399 110.553C255.137 110.83 255.643 111.475 255.781 112.213V112.305C255.781 112.489 255.735 112.719 255.643 113.135C255.627 113.223 255.609 113.318 255.59 113.42V113.421C255.387 114.493 255.054 116.252 255.643 117.051C255.781 117.282 256.012 117.42 256.334 117.466C257.071 117.558 257.624 117.466 257.946 117.19C258.546 116.637 258.638 115.485 258.638 114.609V114.287L258.96 114.102C261.172 112.811 265.825 110.093 266.009 102.351C266.101 98.6182 264.811 95.3924 262.415 93.2265C260.158 91.1988 257.164 90.3693 253.985 90.8302C252.034 91.1146 249.727 91.6856 247.282 92.2905L247.28 92.2909C246.953 92.372 246.623 92.4536 246.291 92.5352C240.486 94.0099 233.944 95.6689 229.613 94.7012L229.889 93.5951C231.337 93.9242 233.085 93.9302 234.993 93.7347C235.341 90.8739 238.121 87.4235 238.582 86.8509C238.614 86.8117 238.635 86.786 238.643 86.7749L239.519 87.5122C239.476 87.5546 236.673 90.9026 236.182 93.5906C238.365 93.288 240.713 92.768 243.034 92.197L242.276 88.4034L243.405 88.1774L244.153 91.9177C244.795 91.7556 245.432 91.5916 246.06 91.4293C246.404 91.3407 246.745 91.2527 247.084 91.166L243.912 86.3863ZM226.88 88.0749C227.11 87.872 227.34 87.6717 227.572 87.4747C225.839 87.8603 224.135 88.3595 222.472 88.9869C219.432 90.0929 217.221 91.1528 216.115 91.7979C217.359 91.6136 219.755 90.9684 222.795 89.8625C223.658 89.5602 225.817 88.6105 226.88 88.0749ZM229.555 85.9C227.026 86.319 224.501 86.993 222.104 87.8809C219.985 88.6182 218.049 89.4477 216.622 90.1851C214.687 91.1988 214.088 91.7979 214.318 92.4431C214.41 92.8118 214.779 92.9961 215.424 92.9961C215.931 92.9961 216.575 92.904 217.497 92.6735C219.017 92.3049 221.044 91.7057 223.164 90.9224C223.482 90.8011 223.954 90.6101 224.484 90.3886C223.152 91.7863 221.978 93.2324 221.091 94.609C220.219 95.9491 219.54 97.1633 219.057 98.2809C218.723 98.4543 218.201 98.7263 217.527 99.0778L217.501 99.0914C211.906 102.009 195.984 110.314 189.809 113.043C182.161 116.406 165.484 122.166 162.167 120.554C161.884 120.433 161.813 120.276 161.769 120.176C161.763 120.162 161.757 120.15 161.752 120.139C161.66 119.77 161.844 117.512 174.56 109.54C182.023 104.84 191.145 99.9086 196.858 97.0514C205.927 92.553 224.051 87.0788 230.62 85.1434C230.266 85.3846 229.91 85.6372 229.555 85.9ZM246.673 112.43L246.796 112.418L246.798 112.443C246.75 112.443 246.707 112.438 246.673 112.43ZM244.979 112.595L246.624 112.435C246.936 112.676 248.108 113.936 248.963 116.545C249.93 119.402 249.7 123.642 249.286 124.471C249.066 124.383 248.598 124.004 248.196 123.493L244.979 112.595ZM241.313 112.864C236.834 113.008 232.47 112.429 228.932 111.47L228.927 111.476C227.394 113.313 220.008 122.159 215.424 124.978C214.042 125.807 211.922 127.005 209.711 128.249C204.597 131.153 196.904 135.531 196.213 136.729C195.337 138.388 194.415 142.212 195.66 146.084C196.673 149.401 198.977 151.983 202.524 153.826C203.768 154.471 205.473 154.978 207.361 155.3C210.08 155.669 215.148 153.641 218.833 152.167C220.062 151.681 221.037 151.297 221.819 151.015C222.106 150.121 222.073 145.513 219.109 142.858C215.101 139.264 205.427 140.462 204.643 140.784C204.643 140.784 204.689 140.738 204.782 140.692L203.953 139.862C204.63 139.184 214.942 137.928 219.636 141.762C221.338 140.761 228.281 136.384 233.207 129.033C236.554 123.967 239.27 118.564 241.313 112.864ZM222.38 152.075L222.373 152.053C221.448 152.383 220.328 152.832 219.34 153.226V153.227C217.175 154.148 214.687 155.162 212.338 155.807C215.608 155.9 218.787 155.484 220.63 154.379C223.854 152.535 224.132 151.706 224.132 151.567C223.855 151.567 223.278 151.736 222.563 151.986C222.508 152.022 222.448 152.052 222.38 152.075ZM272.505 53.0421L271.354 52.8578C271.952 49.0329 272.136 42.3048 271.168 41.2449C270.754 40.7841 268.036 41.7518 265.457 43.2725L264.857 42.3048C269.971 39.2633 271.538 40.0006 271.998 40.4614C273.749 42.2587 272.735 51.4292 272.505 53.0421ZM230.397 76.314C231.272 76.821 232.285 77.1435 233.069 77.1435C233.668 77.1435 234.174 76.9592 234.451 76.5906C235.05 75.5307 233.806 74.056 232.239 73.1804C231.457 72.7196 230.673 72.4431 229.983 72.3509C228.831 72.1665 228.369 72.6735 228.185 72.95C228.001 73.2265 227.863 73.8717 228.554 74.7933C228.969 75.3463 229.613 75.8532 230.397 76.314ZM230.949 75.3463C229.613 74.5628 229.107 73.6873 229.153 73.503C229.337 73.3647 230.305 73.3647 231.641 74.1942C233.023 74.9776 233.484 75.8071 233.437 75.9915C233.299 76.1297 232.332 76.1297 230.949 75.3463ZM168.34 115.899C168.525 116.222 168.893 116.406 169.492 116.406C170.137 116.406 171.059 116.176 172.257 115.761C174.145 115.07 176.448 113.963 178.844 112.581C181.24 111.199 183.359 109.77 184.879 108.48C186.722 106.913 187.367 105.9 186.952 105.162C186.538 104.424 185.34 104.47 183.037 105.3C181.148 105.992 178.844 107.098 176.448 108.48C174.053 109.863 171.933 111.291 170.413 112.581C168.571 114.149 167.926 115.162 168.34 115.899ZM178.246 111.567C173.362 114.379 170.229 115.301 169.4 115.254C169.723 114.517 172.118 112.213 177.002 109.402C181.885 106.59 185.018 105.669 185.847 105.715C185.524 106.498 183.129 108.757 178.246 111.567ZM193.264 102.166C192.665 102.166 192.343 101.982 192.205 101.66C191.882 100.968 192.527 100.231 194.463 98.9408C195.937 97.973 198.01 96.8671 200.22 95.8071C202.478 94.7472 204.643 93.9177 206.303 93.4109C208.513 92.7656 209.481 92.7656 209.803 93.4569C210.126 94.1482 209.481 94.8855 207.546 96.1758C206.071 97.1435 203.999 98.2496 201.787 99.3095C199.53 100.369 197.364 101.199 195.706 101.706C194.601 102.028 193.817 102.166 193.264 102.166ZM208.421 94.1482C207.315 94.2864 204.643 95.0698 200.728 96.9131C196.765 98.7565 194.463 100.277 193.633 101.014C194.739 100.876 197.411 100.093 201.326 98.2496C205.243 96.4062 207.592 94.8855 208.421 94.1482Z",
                                fill: "#1F6FEB",
                            }),
                            (0, y.jsx)("path", {
                                d: "M319.404 147.004C319.404 147.004 321.569 124.885 320.74 121.751C320.233 123.548 311.341 137.926 311.341 137.926V123.917C311.341 123.917 309.361 130.368 308.716 132.35C308.071 129.354 303.418 120.461 304.109 121.475C304.8 122.488 304.938 131.843 304.109 131.843C303.464 131.658 300.976 123.087 298.489 120.276C299.455 121.244 300.147 128.525 300.976 132.166C300.653 130.829 293.974 126.221 290.749 125.575C291.071 127.695 295.862 131.658 296.83 134.47C297.797 137.281 296.185 140.415 296.185 140.415L302.266 144.977L319.404 147.004Z",
                                fill: "#161B22",
                            }),
                            (0, y.jsx)("mask", {
                                id: "mask1",
                                "mask-type": "alpha",
                                maskUnits: "userSpaceOnUse",
                                x: "296",
                                y: "25",
                                width: "59",
                                height: "49",
                                children: (0, y.jsx)("path", {
                                    fillRule: "evenodd",
                                    clipRule: "evenodd",
                                    d: "M354.381 25.0488H296.709V72.8309C301.537 67.0583 308.191 60.8881 308.191 62.6719C308.191 64.5762 311.601 65.439 314.773 61.7546C315.643 62.4302 317.04 63.7908 316.818 65.7844C316.424 69.3284 315.01 71.7488 313.262 73.6286H354.381V25.0488Z",
                                    fill: "#C4C4C4",
                                }),
                            }),
                            (0, y.jsxs)("g", {
                                mask: "url(#mask1)",
                                children: [
                                    (0, y.jsx)("path", {
                                        d: "M266.147 117.512C265.963 116.729 302.496 74.7009 305.629 71.8438C308.762 68.9866 336.819 35.899 338.846 34.747C340.09 31.982 335.989 29.6317 334.147 30.9221C332.442 34.2862 302.865 69.2171 300.193 72.0742C297.521 74.9313 276.099 98.1111 266.746 105.53C264.719 111.153 262.83 112.121 261.402 113.733C261.171 114.609 261.448 115.807 263.153 116.913C264.857 118.019 266.147 117.512 266.147 117.512Z",
                                        fill: "#6E7681",
                                    }),
                                    (0, y.jsx)("path", {
                                        d: "M329.078 42.6726C326.407 45.2993 316.364 57.1426 313.737 60.2302C308.117 66.9123 284.851 93.2718 278.908 99.9077C276.145 103.041 265.594 113.825 262.83 116.682C262.922 116.774 263.061 116.866 263.199 116.912C264.903 118.065 266.193 117.511 266.193 117.511C266.009 116.728 302.542 74.7003 305.676 71.8431C308.808 68.986 336.865 35.8983 338.892 34.7463C339.214 34.0089 339.168 33.1794 338.754 32.4883C335.805 36.1288 332.396 39.4007 329.078 42.6726Z",
                                        fill: "#484F58",
                                    }),
                                ],
                            }),
                            (0, y.jsx)("g", {
                                opacity: "0.5",
                                children: (0, y.jsx)("path", {
                                    d: "M321.385 120.277C321.017 119.125 320.878 117.881 321.063 116.637C321.201 116.083 321.569 115.438 322.123 115.438C322.399 115.485 322.629 115.577 322.859 115.761C323.321 116.175 323.781 116.591 324.149 117.097C327.144 120.645 329.356 124.793 330.784 129.217C330.6 127.005 331.797 124.886 333.455 123.41C335.114 121.936 337.233 121.152 339.398 120.599C340.182 120.369 341.15 120.277 341.748 120.83C342.116 121.245 342.255 121.844 342.07 122.397C341.886 122.904 341.564 123.364 341.15 123.733C340.182 124.562 339.076 125.254 337.971 125.806C335.575 127.144 333.317 128.71 331.198 130.461C331.014 130.646 330.784 130.784 330.553 130.83C330.415 130.83 330.23 130.83 330.092 130.784C325.485 129.724 322.537 124.424 321.385 120.277Z",
                                    fill: "#30363D",
                                }),
                            }),
                            (0, y.jsx)("path", {
                                d: "M307.979 146.775C307.84 146.315 311.387 134.794 311.387 134.794C311.387 134.794 321.938 128.297 323.827 127.19C325.716 126.084 328.342 126.269 328.342 126.269L334.101 124.103C334.101 124.103 349.948 128.297 350.409 128.435C350.87 128.573 353.68 133.734 354.924 135.439C356.168 137.144 356.767 138.25 356.951 141.015L357.089 143.826L348.705 152.812H339.076C339.076 152.812 332.257 155.438 330.691 154.978C329.124 154.518 323.551 153.135 321.523 151.384C319.496 149.633 307.979 146.775 307.979 146.775Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M328.434 128.295C328.388 127.972 327.651 119.999 335.207 111.336L335.897 111.936C332.074 116.267 330.508 120.461 329.862 123.225C329.171 126.221 329.356 128.156 329.356 128.202L328.434 128.295Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M336.035 112.579C335.207 112.579 334.515 111.889 334.515 111.059C334.515 110.23 335.207 109.539 336.035 109.539C336.865 109.539 337.556 110.23 337.556 111.059C337.556 111.889 336.865 112.579 336.035 112.579ZM336.035 110.46C335.713 110.46 335.437 110.737 335.437 111.059C335.437 111.381 335.713 111.657 336.035 111.657C336.358 111.657 336.635 111.381 336.635 111.059C336.635 110.737 336.358 110.46 336.035 110.46Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M340.274 115.207C339.49 115.207 338.846 114.562 338.846 113.779C338.846 112.996 339.49 112.351 340.274 112.351C341.057 112.351 341.702 112.996 341.702 113.779C341.702 114.562 341.057 115.207 340.274 115.207ZM340.274 113.272C339.997 113.272 339.766 113.502 339.766 113.779C339.766 114.055 339.997 114.286 340.274 114.286C340.55 114.286 340.78 114.055 340.78 113.779C340.78 113.502 340.55 113.272 340.274 113.272Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M334.055 117.697C332.764 117.697 331.751 117.144 331.705 117.098L332.165 116.314C332.257 116.36 334.055 117.374 335.667 116.314C336.911 115.531 338.108 114.609 339.214 113.688L339.813 114.379C338.661 115.347 337.417 116.268 336.173 117.098C335.483 117.558 334.745 117.697 334.055 117.697Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M325.623 142.766C328.019 140.508 330.691 138.48 333.501 136.729C335.483 137.144 337.325 136.822 338.846 137.052C342.07 134.194 345.849 130.877 349.165 128.157C345.387 127.144 334.055 124.148 334.055 124.148L328.296 126.315C328.296 126.315 325.669 126.176 323.781 127.236C322.307 128.111 315.258 132.443 312.493 134.148C314.29 136.776 322.859 140.692 325.623 142.766Z",
                                fill: "#6E7681",
                            }),
                            (0, y.jsx)("path", {
                                d: "M312.631 134.239L312.493 134.055C315.12 132.443 322.261 128.018 323.781 127.143C325.577 126.13 328.019 126.176 328.342 126.222L334.101 124.056H334.147C334.239 124.102 345.479 127.051 349.257 128.064L349.211 128.295C345.572 127.328 334.883 124.47 334.147 124.286L328.434 126.452H328.388C328.342 126.452 325.762 126.314 323.965 127.374C322.399 128.203 315.258 132.627 312.631 134.239Z",
                                fill: "#6E7681",
                            }),
                            (0, y.jsx)("path", {
                                d: "M56.5281 157.927C78.7151 157.927 96.7013 156.152 96.7013 153.963C96.7013 151.775 78.7151 150 56.5281 150C34.3411 150 16.355 151.775 16.355 153.963C16.355 156.152 34.3411 157.927 56.5281 157.927Z",
                                fill: "#161B22",
                                fillOpacity: "0.5",
                            }),
                            (0, y.jsx)("path", {
                                d: "M78.3652 141.29C78.3652 141.29 79.1485 147.281 80.7148 148.894C82.2812 150.506 88.6849 154.977 89.0074 154.147C85.8747 150.23 82.5577 140.553 82.5577 140.553L78.3652 141.29Z",
                                fill: "#30363D",
                            }),
                            (0, y.jsx)("path", {
                                d: "M57.8184 141.705C57.7262 141.751 57.6802 141.797 57.6342 141.843C57.542 141.935 57.6342 142.12 57.6802 142.212C58.4173 143.456 58.9702 144.838 59.3847 146.222C59.6612 147.235 60.214 148.618 61.1354 148.156C62.7479 147.282 61.4119 145.162 61.1354 143.364C61.3198 144.47 64.9132 143.18 66.065 141.521C67.5392 139.401 63.9918 139.079 62.7018 139.401C61.0433 139.815 59.3847 140.968 57.8184 141.705Z",
                                fill: "#30363D",
                            }),
                            (0, y.jsx)("path", {
                                d: "M71.5007 128.756C69.3354 128.526 67.124 128.572 65.143 129.447C63.2541 130.277 61.7338 131.797 60.3517 133.318C59.9371 133.825 59.4764 134.24 58.9236 134.609C58.3707 134.885 57.7718 135.023 57.1729 135.023C54.2704 135.115 51.5523 133.503 49.6174 131.383C47.6824 129.263 46.3004 126.682 44.8261 124.194C42.4765 120.231 39.6201 116.267 35.566 114.101C29.9454 111.06 22.5742 111.982 17.4143 115.853C12.2545 119.677 9.25996 126.038 8.79926 132.397C8.70712 133.825 8.98353 135.623 10.3657 135.945L12.4849 131.843C13.5445 129.816 14.6502 127.742 16.4469 126.314C18.2436 124.885 20.9157 124.378 22.8046 125.668C24.2788 126.682 24.8777 128.572 25.062 130.369C25.2463 132.166 25.108 133.963 25.5227 135.715C26.5363 139.954 30.6826 142.904 34.921 143.733C38.0077 144.332 41.2326 144.056 44.1811 142.904C49.0645 140.968 53.303 136.729 58.5089 137.051C59.2 138.894 60.9967 140.139 62.8856 140.692C64.7744 141.244 66.8015 141.106 68.7364 141.014L66.1566 144.102C67.4926 146.82 69.3354 149.263 71.5007 151.337C72.5603 148.664 71.6849 145.945 70.0264 143.594C70.4411 142.766 71.1321 142.074 71.9614 141.706C73.8963 142.719 78.964 142.442 81.1293 142.166C81.0372 143.733 81.3597 147.328 82.3732 148.848C83.3867 150.369 86.6117 153.641 88.4544 154.609C89.6062 155.253 93.1536 156.083 93.7065 155.023C89.3298 153.18 84.9992 148.71 85.0453 143.964C85.0453 141.659 87.0724 140.139 86.9341 138.203C86.8421 136.498 84.0778 134.517 82.88 133.549C79.6551 130.922 75.693 129.263 71.5007 128.756Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M47.2678 136.591C45.5632 136.591 43.7664 136.959 42.5226 135.577C42.1079 135.023 41.7393 134.425 41.4169 133.825C40.4033 132.259 39.1594 132.074 37.3627 132.213C35.1974 132.351 34.4142 131.521 33.5389 129.54C31.0511 124.01 24.7856 119.678 18.7504 122.904C14.1434 125.392 11.3331 130.83 10.0431 135.715C10.0431 135.761 9.99707 135.807 9.99707 135.853C10.0893 135.899 10.1813 135.945 10.3196 135.991L12.4849 131.89C13.5445 129.862 14.6501 127.788 16.4468 126.36C18.2437 124.932 20.9157 124.424 22.8045 125.714C24.2788 126.728 24.8777 128.618 25.062 130.415C25.2463 132.213 25.1081 134.009 25.5227 135.761C26.5363 140 30.6826 142.95 34.921 143.78C38.0077 144.378 41.2326 144.102 44.1811 142.95C47.6363 141.567 50.8152 139.033 54.2244 137.789C52.1051 136.867 49.8016 136.591 47.2678 136.591Z",
                                fill: "#30363D",
                            }),
                            (0, y.jsx)("g", {
                                opacity: "0.6",
                                children: (0, y.jsx)("path", {
                                    opacity: "0.8",
                                    d: "M70.5332 134.747C70.6253 134.747 74.6795 137.466 74.6334 138.756C74.5873 140.046 70.9478 141.982 70.9478 141.982C70.9478 141.982 72.7445 139.724 72.3299 138.342C71.9152 136.959 70.5332 134.747 70.5332 134.747Z",
                                    fill: "#8B949E",
                                }),
                            }),
                            (0, y.jsx)("path", {
                                d: "M85.7362 135.945C85.3216 137.328 84.5384 138.618 84.2159 140.093C83.7553 141.89 84.1238 143.826 85.2295 145.3C85.1373 144.886 85.1373 144.424 85.1373 144.01C85.1373 141.706 87.1644 140.185 87.0262 138.25C86.934 137.466 86.4273 136.683 85.7362 135.945Z",
                                fill: "#30363D",
                            }),
                            (0, y.jsx)("path", {
                                d: "M88.501 133.134C89.5606 132.719 90.4359 133.825 89.6988 136.359L91.0348 136.405C90.8044 135.715 90.7122 134.977 90.8044 134.24C90.8505 133.595 91.4033 133.134 92.0484 133.18H92.0944C92.8315 133.226 93.0618 133.825 93.108 134.562C93.108 135.253 92.9698 135.945 92.6473 136.59C94.2596 137.743 95.135 139.723 94.9047 141.705C94.7665 142.396 94.6283 143.088 94.5822 143.779C94.5361 144.516 94.9047 145.162 95.5036 145.53C95.8721 145.668 96.2868 145.714 96.6554 145.806C97.0239 145.898 97.4385 146.222 97.3925 146.636C97.3463 146.958 97.0239 147.142 96.7474 147.328C94.49 148.434 91.864 148.434 89.6526 147.328C87.7177 146.36 86.1514 144.516 85.8749 142.396C85.6907 140.968 86.1052 139.585 87.0267 138.479C87.3492 138.111 88.3628 137.603 88.501 137.143C87.9021 136.405 87.0728 133.687 88.501 133.134Z",
                                fill: "#484F58",
                            }),
                            (0, y.jsx)("path", {
                                d: "M96.701 146.958C97.0317 146.958 97.2999 146.689 97.2999 146.359C97.2999 146.028 97.0317 145.76 96.701 145.76C96.3701 145.76 96.1021 146.028 96.1021 146.359C96.1021 146.689 96.3701 146.958 96.701 146.958Z",
                                fill: "#30363D",
                            }),
                            (0, y.jsx)("g", {
                                opacity: "0.6",
                                children: (0, y.jsx)("path", {
                                    opacity: "0.8",
                                    d: "M38.8833 121.566C41.325 124.331 43.2139 127.511 45.5174 130.368C47.8209 133.225 50.9998 135.298 54.5932 136.174C54.8696 136.128 55.0999 136.082 55.3764 136.036C52.8425 135.806 50.4929 134.331 48.7423 132.442C46.7613 130.322 45.4253 127.741 43.951 125.253C41.6014 121.29 38.7451 117.326 34.6909 115.16C31.8806 113.686 28.7018 113.087 25.5229 113.455C30.6828 114.423 35.5202 117.742 38.8833 121.566Z",
                                    fill: "#8B949E",
                                }),
                            }),
                            (0, y.jsx)("g", {
                                opacity: "0.6",
                                children: (0, y.jsx)("path", {
                                    opacity: "0.8",
                                    d: "M78.964 133.041C81.2214 134.332 82.9721 136.174 84.5385 138.202C84.6307 137.649 84.815 137.096 84.9992 136.59C83.8474 135.253 82.4654 134.054 80.9911 133.087C77.5819 130.875 73.6659 130.23 69.75 129.539L71.086 130.184C73.7121 131.152 76.5223 131.612 78.964 133.041Z",
                                    fill: "#8B949E",
                                }),
                            }),
                            (0, y.jsx)("g", {
                                opacity: "0.6",
                                children: (0, y.jsx)("path", {
                                    opacity: "0.8",
                                    d: "M88.0864 134.839C89.4224 134.747 88.6853 137.097 89.4225 137.373C90.0214 137.604 90.7585 137.143 91.4496 137.419C92.1867 137.789 92.7396 138.341 93.1081 139.079C93.6148 140.093 93.6148 141.014 93.5227 142.12C93.4766 143.548 93.5688 145.024 95.2273 145.438C94.7205 145.024 94.4441 144.424 94.4901 143.78C94.5363 143.088 94.6745 142.396 94.8127 141.706C95.043 139.724 94.1677 137.743 92.5552 136.591C92.8777 135.945 93.0159 135.253 93.0159 134.563C92.9698 133.825 92.7395 133.226 92.0023 133.18C91.3574 133.088 90.8045 133.549 90.7124 134.194V134.24C90.6203 134.977 90.7124 135.715 90.9427 136.406L89.6067 136.359C90.3438 133.779 89.4685 132.673 88.4089 133.134C87.7179 133.411 87.5797 134.147 87.6257 134.977C87.81 134.931 87.9482 134.885 88.0864 134.839Z",
                                    fill: "#8B949E",
                                }),
                            }),
                        ],
                    }),
                a2 = () => {
                    let { resolvedColorMode: e } = (0, aX.DP)();
                    switch (e) {
                        case "day":
                        case "light":
                            return (0, y.jsx)(aY, {});
                        case "night":
                        case "dark":
                            return (0, y.jsx)(a1, {});
                        default:
                            return null;
                    }
                },
                a0 = () =>
                    (0, y.jsx)("div", {
                        className: aJ.NewViewGraphicContainer,
                        children: (0, y.jsx)(a2, {}),
                    });
            try {
                aY.displayName || (aY.displayName = "InboxZeroLightGraphic");
            } catch {}
            try {
                a1.displayName || (a1.displayName = "InboxZeroDarkGraphic");
            } catch {}
            try {
                a2.displayName || (a2.displayName = "InboxZeroGraphic");
            } catch {}
            try {
                a0.displayName || (a0.displayName = "InboxZeroGraphicWrapper");
            } catch {}
            function a3() {
                return (0, y.jsxs)("div", {
                    className: aZ.NewViewExperienceContainer,
                    children: [
                        (0, y.jsx)(a0, {}),
                        (0, y.jsxs)("div", {
                            className: aZ.textContent,
                            children: [
                                (0, y.jsx)(e8.A, {
                                    as: "h2",
                                    className: aZ.Heading,
                                    children:
                                        "Build powerful views to keep track of work",
                                }),
                                (0, y.jsx)("span", {
                                    className: aZ.descriptionText,
                                    children:
                                        "Create your own views to quickly find and access your work.",
                                }),
                            ],
                        }),
                    ],
                });
            }
            try {
                a3.displayName || (a3.displayName = "NewViewExperience");
            } catch {}
            let a4 = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "name",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "SearchBarCurrentViewFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "query",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "scopingRepository",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Shortcutable",
                    abstractKey: "__isShortcutable",
                };
            })();
            a4.hash = "9c50d63e7c8b908e123ab49c4f0f99ed";
            let a5 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SearchBarRepo",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInOrganization",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchBarActionsRepositoryFragment",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            a5.hash = "20967928041ea84ed8abbdc0d7c33927";
            var a7 = l(40811);
            let a6 = {
                    assigned: "assigned",
                    pullsAssignedToMe: "assigned",
                    mentioned: "mentioned",
                    createdByMe: "created",
                    recentActivity: "recent",
                },
                a9 = RegExp(
                    "^\\/([a-zA-Z0-9]+(-[a-zA-Z0-9]+|-)*)\\/(([\\-_\\.a-zA-Z0-9])*)\\/issues"
                ),
                a8 = RegExp(
                    "^\\/([a-zA-Z0-9]+(-[a-zA-Z0-9]+|-)*)\\/(([\\-_\\.a-zA-Z0-9])*)\\/labels"
                ),
                le = RegExp(
                    "^\\/([a-zA-Z0-9]+(-[a-zA-Z0-9]+|-)*)\\/(([\\-_\\.a-zA-Z0-9])*)\\/labels\\/([\\-_\\.a-zA-Z0-9]+)"
                ),
                la = RegExp(
                    "^\\/([a-zA-Z0-9]+(-[a-zA-Z0-9]+|-)*)\\/(([\\-_\\.a-zA-Z0-9])*)\\/milestone\\/([0-9]+)"
                ),
                ll = ({ viewId: e, query: a }) => {
                    let l = "";
                    if (e !== F.repository) {
                        if (e && e !== F.empty)
                            l = a6[e] ? `/${a6[e]}` : `/${e}`;
                        else if (a === L.Ds.assignedToMe)
                            return `/issues/${a6.assigned}`;
                        else if (a === L.Ds.mentioned)
                            return `/issues/${a6.mentioned}`;
                        else if (a === L.Ds.createdByMe)
                            return `/issues/${a6.createdByMe}`;
                        else if (a === L.Ds.recentActivity)
                            return `/issues/${a6.recentActivity}`;
                    }
                    if (
                        (void 0 !== a &&
                            "" !== a.trim() &&
                            (l = `${l}?q=${encodeURIComponent(a)}`),
                        e === F.repository)
                    ) {
                        let e = A.fV?.pathname,
                            a = e.match(a9);
                        if (a) return e + l;
                        if ((a = e.match(a8) || e.match(le) || e.match(la)))
                            return `/${a[1]}/${a[3]}/issues${l}`;
                    }
                    return `/issues${l}`;
                };
            function ln(e) {
                return e.indexOf(" ") > -1 ? `"${e}"` : e;
            }
            let lt = (e, a, l, n, t = !1) =>
                    ll({
                        viewId: a ? F.repository : void 0,
                        query: (t
                            ? function (e, a, l) {
                                  if (!e) return `${a}:${l}`;
                                  let n = ln(l).replace(
                                          /[.*+?^${}()|[\]\\]/g,
                                          "\\$&"
                                      ),
                                      t = RegExp(
                                          `(?:^|\\s)(${a}:${n})(?=\\s|$)`,
                                          "g"
                                      ),
                                      i = e
                                          .replaceAll(t, "")
                                          .replace(/^\s+/, ""),
                                      s = ln(l);
                                  return `${i.trim()} ${a}:${s}`;
                              }
                            : function (e, a, l) {
                                  if (!e) return;
                                  let n = RegExp(
                                          `(?:^|\\s)${a}:(?:\\"[^\\"]*\\"|\\S+)`,
                                          "g"
                                      ),
                                      t = e
                                          .replaceAll(n, "")
                                          .replace(/^\s+/, ""),
                                      i = ln(l);
                                  return `${t.trim()} ${a}:${i}`;
                              })(e, l, n),
                    }),
                li = (e, a, l, n) => lt(e, a, l, n, !1),
                ls = (e, a, l, n) => lt(e, a, l, n, !0),
                lr = { down: "ArrowDown", focusSearch: "/", up: "ArrowUp" };
            var lo = l(75367),
                lu = l(10375),
                ld = l(73451);
            let lc = {
                confirmLeave:
                    "Are you sure you want to leave? You have unsaved changes.",
                errorLoadingIssues:
                    "We encountered an error trying to load issues.",
                failedToLoadIssues: "Failed to load issues.",
                title: "Title",
                icon: "Icon",
                description: "Description",
                query: "Query",
                moreItemsAvailableTitle: (e) => `More ${e} available`,
                moreItemsAvailableDescription: (e, a) =>
                    `Showing the first ${e} ${a}. To view additional ${a.toLocaleString()}, please refine your search.`,
            };
            var lm = l(93067),
                lg = l(16768),
                lp = l(70170),
                ly = l(34784);
            let lh = (e, a, l, n) =>
                (0, ly.fetchQuery)(
                    e,
                    aq.k5,
                    { owner: a, repo: l, number: n, count: 15 },
                    { fetchPolicy: "store-or-network" }
                ).toPromise();
            (0, lp.s)(lh, 500);
            var lk = l(65741),
                lf = l(60183),
                lb = l(97396);
            let lC =
                    /https?:\/\/(?<hostname>github\.(com|localhost|localhost:\d+))\/(?<owner>.*)\/(?<repo>.*)\/issues\/(?<number>\d+)/,
                lS = () => {
                    let {
                            setCanEditView: e,
                            activeSearchQuery: a,
                            setIsEditing: n,
                            setIsNewView: t,
                        } = eM(),
                        { scoped_repository: i, multi_tenant: s } = (0, I.X)(),
                        { isAnyInputElementActive: r } = (0, lg.B)(),
                        { isCommentEditActive: o, cancelAllCommentEdits: u } =
                            (0, lm.N)(),
                        d = (0, f.useRef)(null),
                        c = (0, e7.Z)(),
                        m = (0, ly.useRelayEnvironment)(),
                        { issues_react_force_turbo_nav: g } = (0, lf.h)(),
                        p = (0, f.useCallback)(
                            async (e, a, n) => {
                                if (r) return;
                                if (o()) {
                                    if (!confirm(lc.confirmLeave)) return;
                                    u();
                                }
                                let t = new URL(e.toString(), A.fV.origin),
                                    i = t.pathname,
                                    p = i.match(ed),
                                    y = i.match(a9);
                                if (p && p.groups) {
                                    let {
                                        owner: l,
                                        repo: t,
                                        number: s,
                                    } = p.groups;
                                    if (l && t && s) {
                                        let r = parseInt(s);
                                        ((d.current = i),
                                            (0, lb.SC)("react"),
                                            await lh(m, l, t, r),
                                            d.current === i &&
                                                i !== A.cg?.location.pathname &&
                                                ((d.current = null),
                                                n && window.scrollTo(0, 0),
                                                c(e, a)));
                                    }
                                } else
                                    y && s && g
                                        ? (async () => {
                                              let { softNavigate: e } =
                                                  await Promise.all([
                                                      l.e(
                                                          "vendors-node_modules_github_turbo_dist_turbo_es2017-esm_js"
                                                      ),
                                                      l.e(
                                                          "ui_packages_soft-navigate_soft-navigate_ts"
                                                      ),
                                                  ]).then(l.bind(l, 59519));
                                              e(t);
                                          })()
                                        : (n && window.scrollTo(0, 0), c(e, a));
                            },
                            [u, m, r, o, g, s, c]
                        ),
                        y = (0, f.useCallback)(
                            (e) => {
                                if (
                                    e.metaKey ||
                                    e.shiftKey ||
                                    e.ctrlKey ||
                                    1 === e.button ||
                                    !(e.target instanceof HTMLElement)
                                )
                                    return;
                                let a = "";
                                if (
                                    ((a =
                                        e.currentTarget instanceof
                                        HTMLAnchorElement
                                            ? e.currentTarget.href
                                            : e.target instanceof
                                                HTMLAnchorElement
                                              ? e.target.href
                                              : (e.target.closest("a")?.href ??
                                                "")),
                                    a?.length > 0)
                                ) {
                                    let l = a.match(lC);
                                    if (l && l.groups) {
                                        let {
                                            hostname: n,
                                            owner: t,
                                            repo: i,
                                            number: s,
                                        } = l.groups;
                                        if (n !== window.location.hostname)
                                            return;
                                        if (t && i && s) {
                                            e.preventDefault();
                                            let l = (0, lk.$9)({
                                                    owner: t,
                                                    repo: i,
                                                    number: parseInt(s),
                                                }),
                                                n = ((e, a) =>
                                                    2 === a.split("#").length &&
                                                    a.split("#")[1]
                                                        ? `${e}#${a.split("#")[1]}`
                                                        : e)(l, a);
                                            ef(window.location.href, t, i) &&
                                            !window.location.href.includes(l)
                                                ? (e.preventDefault(), p(n))
                                                : window.location.assign(n);
                                        }
                                    }
                                }
                            },
                            [p]
                        ),
                        h = (0, f.useCallback)(
                            (e, l) => li(a, !!i, e, l),
                            [a, i]
                        ),
                        k = (0, f.useCallback)(
                            (e, l) => ls(a, !!i, e, l),
                            [a, i]
                        ),
                        b = (0, f.useCallback)(
                            ({
                                viewId: a,
                                canEditView: l,
                                isEditing: i = !1,
                                navigateOptions: s,
                                isNewView: r = !1,
                            }) => {
                                (c(ll({ viewId: a }), s), e(l), n(i), t(r));
                            },
                            [c, e, n, t]
                        ),
                        C = (0, f.useCallback)(
                            (e, a = {}) => {
                                let { isEditing: l = !0, isNewView: n = !1 } =
                                    a;
                                b({
                                    viewId: e,
                                    canEditView: !0,
                                    isEditing: l,
                                    isNewView: n,
                                });
                            },
                            [b]
                        ),
                        S = (0, f.useCallback)(
                            (e, a) => {
                                c(ll({ viewId: e, query: a }));
                            },
                            [c]
                        ),
                        F = (0, f.useCallback)(
                            (e, l) => {
                                if (i) p(`/${i.owner}/${i.name}/issues`);
                                else if (e === ee.id) S(void 0, a);
                                else {
                                    let n = l !== a ? a : void 0;
                                    S(n ? void 0 : e, n);
                                }
                            },
                            [a, S, p, i]
                        );
                    return {
                        onIssueHrefLinkClick: y,
                        navigateToUrl: p,
                        navigateToView: b,
                        navigateToSavedView: C,
                        navigateToSearch: S,
                        navigateToRoot: F,
                        getQueryFieldUrl: h,
                        getAdditiveQueryFieldUrl: k,
                    };
                };
            var lF = l(50348),
                lv = l(57124);
            function lL(e) {
                return "Type" === e.displayName;
            }
            function lI(e) {
                return null != e;
            }
            let l_ = class CopilotUserFilterProvider extends lF.Qh {
                async getSuggestions(e, a, l, n) {
                    return (
                        this.copilotQueryParamKey &&
                            e.addQueryParam(this.copilotQueryParamKey, "1"),
                        super.getSuggestions(e, a, l, n)
                    );
                }
                validateFilterValue(e, a, l) {
                    let n = new URLSearchParams(a);
                    return (
                        this.copilotQueryParamKey &&
                            n.append(this.copilotQueryParamKey, "1"),
                        super.validateFilterValue(e, n, l)
                    );
                }
                processSuggestion(e, a) {
                    let { login: l, avatarUrl: n, isCopilot: t } = e;
                    if (t)
                        return {
                            type: a7.ak.Value,
                            value: lF.RY,
                            ariaLabel: `${lF.RY}, Your AI pair programmer`,
                            displayName: l,
                            description: "Your AI pair programmer",
                            inlineDescription: !0,
                            priority: 1,
                            icon: P.CopilotIcon,
                            avatarUrl: n
                                ? { url: n, type: a7.uW.User }
                                : void 0,
                            iconColor:
                                "var(--fgColor-done, var(--color-done-fg))",
                        };
                    return super.processSuggestion(e, a);
                }
                constructor(e, a, l) {
                    (super(e, a, l),
                        (function (e, a, l) {
                            a in e
                                ? Object.defineProperty(e, a, {
                                      value: l,
                                      enumerable: !0,
                                      configurable: !0,
                                      writable: !0,
                                  })
                                : (e[a] = l);
                        })(this, "copilotQueryParamKey", void 0));
                }
            };
            let AssigneeFilterProviderWithCopilotSupport = class AssigneeFilterProviderWithCopilotSupport extends l_ {
                constructor(e, a) {
                    (super(e, a7.yV.assignee, a),
                        (this.copilotQueryParamKey = e.showAtCopilot
                            ? "show_assignee_copilot"
                            : void 0));
                }
            };
            let AuthorFilterProviderWithCopilotSupport = class AuthorFilterProviderWithCopilotSupport extends l_ {
                constructor(e, a) {
                    (super(e, a7.yV.author, a),
                        (this.copilotQueryParamKey = e.showAtCopilot
                            ? "show_author_copilot"
                            : void 0));
                }
            };
            let ReviewedByFilterProviderWithCopilotSupport = class ReviewedByFilterProviderWithCopilotSupport extends l_ {
                constructor(e, a) {
                    (super(e, a7.yV.reviewedBy, a),
                        (this.copilotQueryParamKey = e.showAtCopilot
                            ? "show_pull_request_reviewer_copilot"
                            : void 0));
                }
            };
            let ReviewRequestedFilterProviderWithCopilotSupport = class ReviewRequestedFilterProviderWithCopilotSupport extends l_ {
                constructor(e, a) {
                    (super(e, a7.yV.reviewRequested, a),
                        (this.copilotQueryParamKey = e.showAtCopilot
                            ? "show_pull_request_reviewer_copilot"
                            : void 0));
                }
            };
            let InvolvesFilterProviderWithCopilotSupport = class InvolvesFilterProviderWithCopilotSupport extends l_ {
                constructor(e, a) {
                    (super(e, a7.yV.involves, a),
                        (this.copilotQueryParamKey = e.showAtCopilot
                            ? "show_involves_copilot"
                            : void 0));
                }
            };
            var lx = l(18991),
                lK = l(71073);
            let SubIssueFilterProvider = class SubIssueFilterProvider extends lF.uy {
                getSuggestions(e, a, l, n) {
                    let t = (0, lK.DS)(a, n),
                        i = a.provider.key,
                        s = [];
                    if (
                        ((0, lK.uT)(a) &&
                            a.raw !== `-${i}:` &&
                            (s.push((0, lK.jL)(this.displayName, this.icon)),
                            s.push((0, lK.Ms)(this.displayName, this.icon))),
                        "" === t && (0, lK.aK)(a) && a.raw !== `-${i}:`)
                    ) {
                        let e = (0, lK.m1)(i);
                        s.unshift(e);
                    }
                    return s;
                }
                validateFilterBlockValues(e, a, l) {
                    let n = RegExp(
                        '^"?(?<owner>[a-zA-Z0-9-_.]+)/(?<repo>[a-zA-Z0-9-_.]+)#(?<number>[0-9]+)"?$'
                    );
                    return Promise.resolve(
                        l.map((e) => {
                            let a = (0, lK.q5)((0, lK.I8)(e.value));
                            return l.length < 1 || !a
                                ? {
                                      ...e,
                                      valid: !1,
                                      validations: [
                                          {
                                              type: a7.b.EmptyValue,
                                              message: lx.D.filterValueEmpty(
                                                  this.key
                                              ),
                                          },
                                      ],
                                  }
                                : n.test(a)
                                  ? { ...e, valid: !0 }
                                  : {
                                        ...e,
                                        valid: !1,
                                        validations: [
                                            {
                                                type: a7.b.InvalidValue,
                                                message: `${lx.D.filterInvalidValue(this.key, a)}. Use the format <pre>&lt;owner&gt;/&lt;repo&gt;#&lt;number&gt;</pre>.`,
                                            },
                                        ],
                                    };
                        })
                    );
                }
                constructor() {
                    super(
                        {
                            key: "sub-issue",
                            displayName: "Sub-issue",
                            icon: P.IssueTracksIcon,
                            priority: 5,
                            type: a7.CH.Text,
                        },
                        [],
                        { filterTypes: { ...a7.dQ?.filterTypes, hasValue: !0 } }
                    );
                }
            };
            let lw = (e, a) => (e ? [a] : []),
                lN = {
                    gap8: "SearchBar-module__gap8--lQIE5",
                    filterContainer: "SearchBar-module__filterContainer--QBpfA",
                    validation: "SearchBar-module__validation--FKMwS",
                    filter: "SearchBar-module__filter--TbH52",
                    FormControl: "SearchBar-module__FormControl--C3NBA",
                },
                lj = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "SearchBarActionsRepositoryFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isOwnerEnterpriseManaged",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameWithOwner",
                            storageKey: null,
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            lj.hash = "a797e54d6a4d9410241158e79db7ba3d";
            var lR = l(79345),
                lT = l(55847);
            let lP = {
                    cancel: "Cancel",
                    apply: "Apply",
                    issues: "Issues",
                    newIssue: "New issue",
                    saveView: "Save view",
                    returnToList: "Return to list",
                    setIssueType: "Issue type",
                },
                lA = {
                    gap8: "SearchBarActions-module__gap8--htEVL",
                    buttons: "SearchBarActions-module__buttons--N7M2V",
                };
            function lM({ currentRepository: e }) {
                let a = (0, e7.Z)(),
                    { currentUser: l } = (0, e6.J)(),
                    { scoped_repository: n, current_user_settings: t } = (0,
                    I.X)(),
                    i = (0, er.useFragment)(lj, e),
                    s =
                        n?.is_archived ||
                        (null != l &&
                            !!l?.is_emu &&
                            (!i || !i.isOwnerEnterpriseManaged));
                return (0, y.jsxs)("div", {
                    className: `${lA.buttons} ${lA.gap8} d-flex flex-wrap`,
                    children: [
                        (0, y.jsx)(lT.Q, {
                            as: "a",
                            href: `/${i?.nameWithOwner}/labels`,
                            leadingVisual: P.TagIcon,
                            children: "Labels",
                        }),
                        (0, y.jsx)(lT.Q, {
                            as: "a",
                            href: `/${i?.nameWithOwner}/milestones`,
                            leadingVisual: P.MilestoneIcon,
                            children: "Milestones",
                        }),
                        !s &&
                            (0, y.jsx)(lR.a, {
                                label: lP.newIssue,
                                navigate: a,
                                optionConfig: {
                                    issueCreateArguments: {
                                        repository: n
                                            ? { owner: n.owner, name: n.name }
                                            : void 0,
                                    },
                                    showRepositoryPicker: null === n,
                                    useMonospaceFont:
                                        t?.use_monospace_font || !1,
                                    emojiSkinTonePreference:
                                        t?.preferred_emoji_skin_tone,
                                    singleKeyShortcutsEnabled:
                                        t?.use_single_key_shortcut || !1,
                                    pasteUrlsAsPlainText:
                                        t?.paste_url_link_as_plain_text,
                                    showFullScreenButton: !0,
                                    canBypassTemplateSelection: !0,
                                    navigate: a,
                                },
                            }),
                    ],
                });
            }
            try {
                lM.displayName || (lM.displayName = "SearchBarActions");
            } catch {}
            let lD = ({ editing: e, children: a }) =>
                e
                    ? (0, y.jsx)(ld.A, {
                          className: lN.FormControl,
                          children: a,
                      })
                    : (0, y.jsx)(y.Fragment, { children: a });
            function lV({
                currentViewKey: e,
                currentRepository: a,
                queryFromCustomView: l,
                children: n,
            }) {
                let t = (0, f.useRef)(null),
                    {
                        setActiveSearchQuery: i,
                        isCustomView: s,
                        isEditing: r,
                        setCurrentPage: o,
                    } = eM(),
                    [u, d] = (0, f.useState)([]),
                    { search: c, pathname: m } = (0, _.zy)(),
                    g = new URLSearchParams(c).get("q"),
                    { scoped_repository: p, current_user_settings: k } = (0,
                    I.X)(),
                    { navigateToUrl: b } = lS(),
                    {
                        id: C,
                        scopingRepository: S,
                        query: F,
                    } = (0, er.useFragment)(a4, e),
                    v = (0, er.useFragment)(a5, a),
                    {
                        author: L,
                        assignee: x,
                        mentioned: K,
                        label: w,
                    } = (0, _.g)(),
                    N = `${en.defaultQuery} ${en.query({ author: L, assignee: x, mentioned: K, label: w, createdByApp: ek(m) })}`,
                    j = F;
                eh(m)
                    ? (j = N)
                    : ey(m) && w && (j = eN("state:open", [w], "label"));
                let R = S ? `repo:${S.owner.login}/${S.name} ${j}` : j,
                    {
                        dirtySearchQuery: T,
                        setDirtySearchQuery: P,
                        setShouldFocusSearchOnNav: A,
                        shouldFocusSearchOnNav: E,
                    } = eD(),
                    q = (0, f.useCallback)(
                        (e) => {
                            (i(e), P(null));
                        },
                        [i, P]
                    );
                (0, f.useEffect)(() => {
                    em(m) || (i(g || R || ""), P(g));
                }, [q, g, m, R, i, P]);
                let { sendAnalyticsEvent: O } = (0, lo.s)(),
                    B = ((e) => {
                        let { isOrgScope: a = !1 } = e,
                            { currentUser: l } = (0, e6.J)(),
                            n = (0, er.useRelayEnvironment)(),
                            { scoped_repository: t } = (0, I.X)(),
                            i = !!t,
                            s = (0, h.G7)("copilot_swe_agent"),
                            { issue_dependencies: r } = (0, lf.h)(),
                            o = i ? `${t.owner}/${t.name}` : void 0,
                            u = i ? M : D,
                            d = (0, f.useMemo)(() => {
                                let e = {
                                        showAtMe: !!l,
                                        currentUserLogin: l?.login,
                                        currentUserAvatarUrl: l?.avatarUrl,
                                        repositoryScope: o,
                                    },
                                    t = { filterTypes: { valueless: !1 } },
                                    d = { filterTypes: { hasValue: !0 } };
                                return [
                                    ...lw(
                                        !i,
                                        new lF.pH({
                                            ...t,
                                            filterTypes: { multiKey: !0 },
                                        })
                                    ),
                                    ...lw(!i, new lF.E({ ...t })),
                                    new lF.I4(u, t, r),
                                    new lF.PT("mixed", t),
                                    new lF.aF(d),
                                    ...lw(a || !i, new lv.B(d, !0, n, o)),
                                    new lF.FG(d),
                                    new lF.Qq(d),
                                    new AssigneeFilterProviderWithCopilotSupport(
                                        {
                                            ...e,
                                            showHasValue: !0,
                                            showAtCopilot: s,
                                        },
                                        d
                                    ),
                                    new AuthorFilterProviderWithCopilotSupport(
                                        { ...e, showAtCopilot: s },
                                        t
                                    ),
                                    new InvolvesFilterProviderWithCopilotSupport(
                                        { ...e, showAtCopilot: !0 },
                                        t
                                    ),
                                    new lF.Pd(e, t),
                                    new lF.$q(a7._i.parentIssue, d),
                                    ...lw(r ?? !1, new lF.tQ()),
                                    ...lw(r ?? !1, new lF.rL()),
                                    new SubIssueFilterProvider(),
                                    new lF.pv(t),
                                    new lF._O(t),
                                    new lF.ws(t),
                                    new lF.Or(t),
                                    new ReviewRequestedFilterProviderWithCopilotSupport(
                                        { ...e, showAtCopilot: !0 },
                                        t
                                    ),
                                    new lF.HD(),
                                    new lF._N(e, t),
                                    new lF.Dv(e, t),
                                    new lF.LB(e, t),
                                    new ReviewedByFilterProviderWithCopilotSupport(
                                        { ...e, showAtCopilot: !0 },
                                        t
                                    ),
                                    new lF.Ge(t),
                                    new lF.NT(t),
                                    new lF.Ag(t),
                                    new lF.d$(["issue", "pr"], t),
                                    new lF.AR(t),
                                    new lF.WE(t),
                                    new lF.FZ(t),
                                    new lF.A6(t),
                                    new lF.a2(t),
                                    new lF.KX(t),
                                    new lF.dR(t),
                                    new lF.Ws(t),
                                    new lF.C2(t),
                                    new lF.NN(o, t),
                                    new lF.X_(o, t),
                                    new lF.uB(
                                        [
                                            "created",
                                            "updated",
                                            "reactions",
                                            "comments",
                                            "relevance",
                                        ],
                                        t
                                    ),
                                ];
                            }, [s, l, u, a, o, n, i, r]);
                        for (let e of ((0, f.useEffect)(
                            () => () => {
                                let e = d.find(lL);
                                e && e.requestDisposable?.dispose();
                            },
                            [d]
                        ),
                        d))
                            e.priority = a7.$D;
                        return d;
                    })({ isOrgScope: !!v?.isInOrganization }),
                    $ = (0, f.useCallback)(
                        (e, a) => {
                            let l = e.raw;
                            a === a7.FT.Clear && ((l = R), q(R));
                            let n = (l || "is:issue").trim();
                            (e.config.groupAndKeywordSupport ||
                                (n = ((e) => {
                                    let a = eR(e, "is", M);
                                    return eR(a, "state", V);
                                })(l)),
                                O("search.execute", "FILTER_BAR_INPUT", {
                                    new_query: n,
                                }),
                                b(ll({ viewId: C, query: n }), {
                                    preventAutofocus: !0,
                                }),
                                o(1));
                        },
                        [O, b, o, R, q, C]
                    ),
                    Q = (0, f.useCallback)(
                        (e) => {
                            if (k?.use_single_key_shortcut && t && t.current) {
                                t.current.focus();
                                let a = t.current.value?.length || 0;
                                (t.current.setSelectionRange(a, a),
                                    e.preventDefault());
                            }
                        },
                        [k?.use_single_key_shortcut]
                    ),
                    H = (0, f.useCallback)(
                        (e) => {
                            P(e.trim());
                        },
                        [P]
                    ),
                    z = (0, f.useCallback)((e) => d(e), [d]);
                ((0, lu._N)([lr.focusSearch], Q, { [lu.AR.metaKey]: !0 }),
                    (0, lu._N)([lr.focusSearch], Q, { [lu.AR.ctrlKey]: !0 }));
                let W = r && s(C);
                ((0, f.useEffect)(() => {
                    if (!t.current || !W) return;
                    let e = t.current;
                    function a() {
                        A(!0);
                    }
                    return (
                        e.addEventListener("focus", a),
                        () => e.removeEventListener("focus", a)
                    );
                }, [W, A]),
                    (0, f.useEffect)(() => {
                        W &&
                            t.current &&
                            E &&
                            requestAnimationFrame(() => {
                                if (t.current) {
                                    t.current.focus();
                                    let e = t.current.value?.length || 0;
                                    t.current.setSelectionRange(e, e);
                                }
                            });
                    }, [W, E]));
                let Z =
                        eh(m) || ey(m)
                            ? j
                            : [...et, ee].find((e) => e.id === C)?.query,
                    X = (0, f.useMemo)(
                        () => (C === G.id ? (g ?? Z) : (Z ?? g)),
                        [Z, g, C]
                    ),
                    J = (0, f.useMemo)(() => T ?? X ?? l ?? "", [T, X, l]),
                    Y = p ? `${p.owner}/${p.name}` : void 0,
                    ea = !1;
                return (
                    (ea = s(C)
                        ? T?.trim() !== l?.trim()
                        : C === G.id
                          ? T?.trim() !== Z?.trim()
                          : T?.trim() !== X?.trim()),
                    (0, y.jsxs)(lD, {
                        editing: W,
                        children: [
                            W &&
                                (0, y.jsx)(ld.A.Label, {
                                    visuallyHidden: !0,
                                    children: lc.query,
                                }),
                            (0, y.jsx)("div", {
                                className: `${lN.gap8} px-0 ${W ? "d-flex" : "d-block"} flex-row flex-justify-between`,
                                children: (0, y.jsxs)("div", {
                                    className: `${lN.filterContainer} ${lN.gap8} d-flex flex-row flex-1 flexWrap min-width-0`,
                                    children: [
                                        (0, y.jsx)("div", {
                                            className: `${lN.filter} d-flex flex-1 flex-column`,
                                            children: (0, y.jsx)(a7.dJ, {
                                                id: C ?? "search",
                                                context: Y
                                                    ? { repo: Y }
                                                    : void 0,
                                                label: W
                                                    ? U.issueEditingSearchInputAriaLabel
                                                    : U.issueSearchInputAriaLabel,
                                                visuallyHideLabel: !W,
                                                placeholder:
                                                    U.issueSearchInputPlaceholder,
                                                onSubmit: $,
                                                onChange: H,
                                                providers: B,
                                                inputRef: t,
                                                filterValue: J
                                                    ? `${J.trim()} `
                                                    : "",
                                                variant: "input",
                                                settings: {
                                                    aliasMatching: !0,
                                                    groupAndKeywordSupport: !0,
                                                },
                                                showValidationMessage: !1,
                                                onValidation: z,
                                                showClearButton:
                                                    null !== T && ea,
                                            }),
                                        }),
                                        n,
                                        p &&
                                            !em(m) &&
                                            (0, y.jsx)(lM, {
                                                currentRepository: v,
                                            }),
                                        u.length > 0 &&
                                            (0, y.jsx)("div", {
                                                className: `${lN.validation} mt-1`,
                                                children: (0, y.jsx)(a7.Xl, {
                                                    messages: u,
                                                    id: "repository-validation-message",
                                                }),
                                            }),
                                    ],
                                }),
                            }),
                        ],
                    })
                );
            }
            try {
                lD.displayName || (lD.displayName = "DynamicWrapper");
            } catch {}
            try {
                lV.displayName || (lV.displayName = "SearchBar");
            } catch {}
            let lE = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchRepository",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "SearchList",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "fetchRepository",
                                variableName: "fetchRepository",
                            },
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "labelPageSize",
                                variableName: "labelPageSize",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "ListItemsPaginated_results",
                    },
                ],
                type: "Searchable",
                abstractKey: "__isSearchable",
            };
            lE.hash = "eba993ac639526f6caaf137566bcdb58";
            let lq = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SearchListRepo",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDisabled",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isLocked",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isArchived",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInOrganization",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            lq.hash = "f65187d282f8f58f706a2eabbfe6075b";
            var lO = l(15845);
            let lB = {
                    "+1": "Thumbs up",
                    "-1": "Thumbs down",
                    rocket: "Rocket",
                    tada: "Hooray",
                    eyes: "Eyes",
                    heart: "Heart",
                    smile: "Laugh",
                    thinking_face: "Confused",
                },
                l$ = {
                    sort: "Sort",
                    Newest: "Newest",
                    Oldest: "Oldest",
                    RecentlyUpdated: "Recently updated",
                    sortDropdownOptionDisplayValues: {
                        created: "Created on",
                        updated: "Last updated",
                        comments: "Total comments",
                        relevance: "Best match",
                    },
                    sortDropdownMenuButtonLabels: {
                        created: { asc: "Oldest", desc: "Newest" },
                        comments: "Comments",
                        updated: "Updated",
                        relevance: "Best match",
                        reactions: "Reactions",
                        ...lB,
                    },
                    sortDropdownReactionLabels: lB,
                    sortKeyToQuery: {
                        created: "sort:created",
                        comments: "sort:comments",
                        updated: "sort:updated",
                        reactions: "sort:reactions",
                        relevance: "sort:relevance",
                        "+1": "sort:reactions-+1",
                        "-1": "sort:reactions--1",
                        rocket: "sort:reactions-rocket",
                        tada: "sort:reactions-tada",
                        eyes: "sort:reactions-eyes",
                        heart: "sort:reactions-heart",
                        smile: "sort:reactions-smile",
                        thinking_face: "sort:reactions-thinking_face",
                    },
                    reactions: "Reactions",
                    Compact: "Compact",
                    noResultsTitle: "No results",
                    noResultsDescription: "Try adjusting your search filters.",
                    ascending: "Ascending",
                    descending: "Descending",
                    totalReactions: "Total reactions",
                };
            var lQ = l(15385),
                lU = l(94232);
            let lH = {
                    rowLoadingContainer:
                        "RowLoading-module__rowLoadingContainer--q3al0",
                    rowLoadingContent:
                        "RowLoading-module__rowLoadingContent--MXUen",
                    LoadingSkeleton:
                        "RowLoading-module__LoadingSkeleton--HhXtV",
                },
                lz = ({ width: e = "random", showCompactDensity: a = !1 }) =>
                    (0, y.jsx)(lQ.l.Item, {
                        children: (0, y.jsxs)(ae.A, {
                            sx: {
                                alignItems: a ? "center" : "flex-start",
                                height: a ? "20px" : "40px",
                            },
                            className: lH.rowLoadingContainer,
                            children: [
                                (0, y.jsx)(lU.O, {
                                    variant: "elliptical",
                                    height: "md",
                                    width: "md",
                                }),
                                (0, y.jsxs)("div", {
                                    className: lH.rowLoadingContent,
                                    children: [
                                        (0, y.jsx)(lU.O, {
                                            variant: "rounded",
                                            height: "sm",
                                            width: e,
                                        }),
                                        !a &&
                                            (0, y.jsx)(lU.O, {
                                                variant: "rounded",
                                                height: "12px",
                                                width: e,
                                                className: lH.LoadingSkeleton,
                                            }),
                                    ],
                                }),
                            ],
                        }),
                    });
            try {
                lz.displayName || (lz.displayName = "RowLoading");
            } catch {}
            let lW = ({ numberOfRows: e, isCompact: a }) =>
                (0, y.jsx)(lQ.l, {
                    children: [...Array(e)].map((e, l) =>
                        (0, y.jsx)(lz, { showCompactDensity: a }, l)
                    ),
                });
            try {
                lW.displayName || (lW.displayName = "ActionListLoading");
            } catch {}
            let lG = {
                    ListLoadingHeader:
                        "ListLoading-module__ListLoadingHeader--sskDH",
                },
                lZ = ({
                    pageSize: e,
                    showBorder: a = !0,
                    headerTitle: l,
                    sectionFilters: n,
                    isCompactRows: t,
                }) =>
                    (0, y.jsxs)(ae.A, {
                        sx: a
                            ? {
                                  border: "1px solid",
                                  borderColor: "border.muted",
                                  borderRadius: 2,
                              }
                            : {},
                        children: [
                            a &&
                                (0, y.jsxs)("div", {
                                    className: lG.ListLoadingHeader,
                                    children: [
                                        l,
                                        n?.map((e, a) =>
                                            (0, y.jsx)(
                                                f.Fragment,
                                                { children: e },
                                                `section-filter-link-${a}`
                                            )
                                        ),
                                    ],
                                }),
                            (0, y.jsx)(lW, { numberOfRows: e, isCompact: t }),
                        ],
                    });
            try {
                lZ.displayName || (lZ.displayName = "ListLoading");
            } catch {}
            let lX = ({ layoutDensity: e, ...a }) => {
                let l = e === l$.Compact.toLowerCase();
                return (0, y.jsx)(lZ, { isCompactRows: l, ...a });
            };
            try {
                lX.displayName || (lX.displayName = "ListLoading");
            } catch {}
            (l(61885), l(70056));
            let lJ = /(?:^|\s)reason:"?(completed|not(\s|-)planned)"?(?:$|\s)/g;
            function lY(e, a) {
                var l;
                let n = l1(
                    ((l = e),
                    a?.is_archived ? l : `${"" === l ? "archived:false" : l}`)
                );
                if (!a) return n;
                let t = "",
                    i = l2(n),
                    s = (function (e) {
                        let a = new Map(e),
                            l = a.get("is") || [],
                            n = a.get("type") || [],
                            t = {
                                issue: l.includes("issue"),
                                pr: l.includes("pr"),
                            };
                        l.length || a.delete("is");
                        let i = n.filter((e) => !t[e]);
                        return (
                            i.length > 0 ? a.set("type", i) : a.delete("type"),
                            a
                        );
                    })(i),
                    r = i.has("sort") ? "" : L.ZM;
                for (let [e, a] of ((t = n),
                (function (e, a) {
                    let l = new Map();
                    for (let [n, t] of e) a.has(n) || l.set(n, t);
                    return l;
                })(i, s))) {
                    let l = `${e}:${a}`;
                    t = t.replace(l, "");
                }
                return [
                    (t = (t = (t = (function (e) {
                        let a = e.match(/(".*?"|[^"\s]+)+/g) ?? [],
                            l = /^(repo:|org:|user:|@)/;
                        return a.filter((e) => !l.test(e)).join(" ");
                    })(t))
                        .replace(/("[^"]*")|[ \t\r\n]+/g, (e, a) => a || " ")
                        .trim()).trim()),
                    `repo:${a.owner}/${a.name}`,
                    r,
                ]
                    .join(" ")
                    .trim();
            }
            function l1(e) {
                let a = (function (e) {
                    let a = [],
                        l = e.indexOf(L.A);
                    if (-1 === l) return a;
                    for (; l < e.length; ) {
                        for (let n in L.FR) {
                            let t = L.FR[n];
                            if (e.startsWith(t, l)) {
                                (a.push({ token: t, pos: l }), (l += t.length));
                                break;
                            }
                        }
                        if (-1 === (l = e.indexOf(L.A, l + 1))) break;
                    }
                    return a;
                })(e);
                if (0 === a.length) return e;
                let l = (function (e, a) {
                    let l = new Date(),
                        n = [];
                    for (let t of a) {
                        let a = t.token === L.FR.today ? l.getTime() : void 0;
                        if (!a) continue;
                        let i = (function (e, a, l) {
                            let n = a.token.length,
                                t = e.substring(a.pos + n, a.pos + n + 1);
                            if ("" === t || " " === t)
                                return {
                                    newValue: l.toISOString().substring(0, 10),
                                    length: n,
                                };
                            if ("-" === t || "+" === t) {
                                let r = e.substring(
                                    a.pos + a.token.length + t.length
                                );
                                var i = L.EU.exec(r),
                                    s = n;
                                if (!i) return null;
                                let o = parseInt(i[1], 10),
                                    u = i[2];
                                s += t.length + i[0].length;
                                let d = (function (e, a, l, n) {
                                    let t = new Date(e.getTime()),
                                        i = "-" === n ? -1 : 1;
                                    switch (l) {
                                        case L.Ad.day:
                                            t.setDate(e.getDate() + i * a);
                                            break;
                                        case L.Ad.week:
                                            t.setDate(e.getDate() + i * a * 7);
                                            break;
                                        case L.Ad.month:
                                            (t.setMonth(e.getMonth() + i * a),
                                                1 === t.getDate() &&
                                                    1 !== e.getDate() &&
                                                    t.setDate(t.getDate() - 1));
                                            break;
                                        case L.Ad.year:
                                            t.setFullYear(
                                                e.getFullYear() + i * a
                                            );
                                            break;
                                        default:
                                            return null;
                                    }
                                    return t;
                                })(l, o, u, t);
                                return d
                                    ? {
                                          newValue: d
                                              .toISOString()
                                              .substring(0, 10),
                                          length: s,
                                      }
                                    : null;
                            }
                            return null;
                        })(e, t, new Date(a));
                        i && n.push({ tokenPosition: t, replacement: i });
                    }
                    return n;
                })(e, a);
                return 0 === l.length
                    ? e
                    : (function (e, a) {
                          let l = e;
                          for (let e of a.reverse())
                              l =
                                  l.substring(0, e.tokenPosition.pos) +
                                  e.replacement.newValue +
                                  l.substring(
                                      e.tokenPosition.pos + e.replacement.length
                                  );
                          return l;
                      })(e, l);
            }
            function l2(e) {
                let a = new Map();
                for (let l of (a.set("searchTerms", []),
                e
                    .trim()
                    .split(/((?:[^\s"]+|"[^"]*")+)/g)
                    .filter((e) => "" !== e.trim()))) {
                    let [e, n] = l.split(/:(.*)/s);
                    if (e && n) {
                        if (!a.has(e)) {
                            a.set(e, [n]);
                            continue;
                        }
                        a.set(e, [...a.get(e), n]);
                        continue;
                    }
                    a.set("searchTerms", [...a.get("searchTerms"), l]);
                }
                return a;
            }
            function l0(e) {
                if (!e) return !1;
                let a = l2(e).get("sort");
                return (
                    (a && 1 === a.length && a[0].startsWith("reactions-")) || !1
                );
            }
            var l3 = l(6294),
                l4 = l(23086),
                l5 = l(53110),
                l7 = l(34164);
            let l6 = {
                    errorIcon: "ListError-module__errorIcon--I_jd2",
                    errorMessage: "ListError-module__errorMessage--vCu3v",
                    retryLink: "ListError-module__retryLink--j9317",
                },
                l9 = ({
                    retry: e,
                    icon: a,
                    title: l,
                    message: n,
                    retryText: t,
                    testid: i,
                }) =>
                    (0, y.jsxs)("div", {
                        className: "blankslate",
                        "data-testid": i,
                        children: [
                            (0, y.jsx)(l5.A, {
                                className: (0, l7.$)(
                                    "blankslate-icon",
                                    l6.errorIcon
                                ),
                                icon: a ?? P.AlertFillIcon,
                            }),
                            (0, y.jsx)("h3", {
                                className: "blankslate-heading",
                                children: l,
                            }),
                            (0, y.jsx)("p", {
                                className: l6.errorMessage,
                                children: n,
                            }),
                            e &&
                                (0, y.jsx)(e9.A, {
                                    as: "button",
                                    underline: !0,
                                    onClick: e,
                                    className: l6.retryLink,
                                    children: t ?? l4.l.tryAgain,
                                }),
                        ],
                    });
            try {
                l9.displayName || (l9.displayName = "ListError");
            } catch {}
            let l8 = {
                    list: "list",
                    listHeader: "list-header",
                    issueRowItem: (e) => `issue-row-${e}`,
                    pullRequestRowItem: (e) => `pull-request-row-${e}`,
                    headerLoading: "header-loading",
                    issueViewerContainer: "issue-viewer-container",
                    fallback: "list-error-fallback",
                    milestoneAnchorFilter: "milestones-anchor-button",
                    issueTypeAnchorFilter: "issue-types-anchor-button",
                    ftcBannerContributingGuidelinesLink:
                        "contributing-guidelines",
                },
                ne = (e) =>
                    (0, y.jsx)(l9, {
                        retry: e,
                        title: lc.failedToLoadIssues,
                        message: lc.errorLoadingIssues,
                        testid: l8.fallback,
                    });
            try {
                ne.displayName || (ne.displayName = "ListError");
            } catch {}
            let na = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "cursor",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchRepository",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    t = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "includeGitData",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    r = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    o = [{ kind: "Variable", name: "id", variableName: "id" }],
                    u = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    d = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    c = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    p = [
                        {
                            kind: "Variable",
                            name: "after",
                            variableName: "cursor",
                        },
                        u,
                        d,
                        c,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    b = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "labelPageSize",
                        },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "endCursor",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: b,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            g,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            f,
                                            k,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            m,
                                        ],
                                        storageKey: null,
                                    },
                                    C,
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [S, F],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: b,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    x = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    w = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    N = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            w,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            m,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                            g,
                        ],
                        storageKey: null,
                    },
                    j = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    R = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                h,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                                g,
                            ],
                            storageKey: null,
                        },
                    ],
                    T = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: R,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: R,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    },
                    P = {
                        kind: "InlineFragment",
                        selections: [
                            v,
                            L,
                            I,
                            _,
                            x,
                            K,
                            N,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                            j,
                            T,
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    A = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "reviewDecision",
                        storageKey: null,
                    },
                    M = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    D = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInMergeQueue",
                        storageKey: null,
                    },
                    V = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    E = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            k,
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [m, w, g],
                                storageKey: null,
                            },
                            g,
                        ],
                        storageKey: null,
                    },
                    q = {
                        alias: null,
                        args: null,
                        concreteType: "StatusCheckRollup",
                        kind: "LinkedField",
                        name: "statusCheckRollup",
                        plural: !1,
                        selections: [
                            j,
                            {
                                alias: null,
                                args: null,
                                concreteType:
                                    "StatusCheckRollupContextConnection",
                                kind: "LinkedField",
                                name: "contexts",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "checkRunCount",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "CheckRunStateCount",
                                        kind: "LinkedField",
                                        name: "checkRunCountsByState",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "count",
                                                storageKey: null,
                                            },
                                            j,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            g,
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l, n, t, i, s, r],
                        kind: "Fragment",
                        metadata: null,
                        name: "SearchPaginatedQuery",
                        selections: [
                            {
                                alias: null,
                                args: o,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "fetchRepository",
                                                variableName: "fetchRepository",
                                            },
                                            u,
                                            {
                                                kind: "Variable",
                                                name: "includeGitData",
                                                variableName: "includeGitData",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "labelPageSize",
                                                variableName: "labelPageSize",
                                            },
                                            d,
                                            c,
                                        ],
                                        kind: "FragmentSpread",
                                        name: "ListItemsPaginated_results",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, a, l, t, i, s, r, n],
                        kind: "Operation",
                        name: "SearchPaginatedQuery",
                        selections: [
                            {
                                alias: null,
                                args: o,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    m,
                                    g,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: p,
                                                concreteType:
                                                    "SearchResultItemConnection",
                                                kind: "LinkedField",
                                                name: "search",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "issueCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        if: null,
                                                        kind: "Stream",
                                                        label: "ListItemsPaginated_results$stream$Query_search",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "SearchResultItemEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                m,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            g,
                                                                                            y,
                                                                                            h,
                                                                                            {
                                                                                                alias: "titleHtml",
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "titleHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "IssueType",
                                                                                                kind: "LinkedField",
                                                                                                name: "issueType",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        g,
                                                                                                        k,
                                                                                                        f,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        P,
                                                                                                        {
                                                                                                            kind: "InlineFragment",
                                                                                                            selections:
                                                                                                                [
                                                                                                                    v,
                                                                                                                    L,
                                                                                                                    I,
                                                                                                                    _,
                                                                                                                    x,
                                                                                                                    K,
                                                                                                                    N,
                                                                                                                    A,
                                                                                                                    M,
                                                                                                                    D,
                                                                                                                    V,
                                                                                                                    T,
                                                                                                                ],
                                                                                                            type: "PullRequest",
                                                                                                            abstractKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                type: "IssueOrPullRequest",
                                                                                                abstractKey:
                                                                                                    "__isIssueOrPullRequest",
                                                                                            },
                                                                                            {
                                                                                                condition:
                                                                                                    "fetchRepository",
                                                                                                kind: "Condition",
                                                                                                passingValue:
                                                                                                    !0,
                                                                                                selections:
                                                                                                    [
                                                                                                        E,
                                                                                                    ],
                                                                                            },
                                                                                        ],
                                                                                    type: "Issue",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            g,
                                                                                            y,
                                                                                            E,
                                                                                            h,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "titleHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                condition:
                                                                                                    "includeGitData",
                                                                                                kind: "Condition",
                                                                                                passingValue:
                                                                                                    !0,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                "PullRequestCommit",
                                                                                                            kind: "LinkedField",
                                                                                                            name: "headCommit",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        concreteType:
                                                                                                                            "Commit",
                                                                                                                        kind: "LinkedField",
                                                                                                                        name: "commit",
                                                                                                                        plural: !1,
                                                                                                                        selections:
                                                                                                                            [
                                                                                                                                g,
                                                                                                                                q,
                                                                                                                            ],
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                    g,
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        q,
                                                                                                    ],
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        P,
                                                                                                        {
                                                                                                            kind: "InlineFragment",
                                                                                                            selections:
                                                                                                                [
                                                                                                                    v,
                                                                                                                    L,
                                                                                                                    I,
                                                                                                                    _,
                                                                                                                    x,
                                                                                                                    K,
                                                                                                                    N,
                                                                                                                    M,
                                                                                                                    V,
                                                                                                                    T,
                                                                                                                    {
                                                                                                                        condition:
                                                                                                                            "includeGitData",
                                                                                                                        kind: "Condition",
                                                                                                                        passingValue:
                                                                                                                            !0,
                                                                                                                        selections:
                                                                                                                            [
                                                                                                                                A,
                                                                                                                                D,
                                                                                                                            ],
                                                                                                                    },
                                                                                                                ],
                                                                                                            type: "PullRequest",
                                                                                                            abstractKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                type: "IssueOrPullRequest",
                                                                                                abstractKey:
                                                                                                    "__isIssueOrPullRequest",
                                                                                            },
                                                                                        ],
                                                                                    type: "PullRequest",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            g,
                                                                                        ],
                                                                                    type: "Node",
                                                                                    abstractKey:
                                                                                        "__isNode",
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    C,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                    },
                                                    {
                                                        if: null,
                                                        kind: "Defer",
                                                        label: "ListItemsPaginated_results$defer$Query_search$pageInfo",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "PageInfo",
                                                                kind: "LinkedField",
                                                                name: "pageInfo",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "startCursor",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    S,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "hasPreviousPage",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    F,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: p,
                                                filters: [
                                                    "query",
                                                    "type",
                                                    "skip",
                                                ],
                                                handle: "connection",
                                                key: "Query_search",
                                                kind: "LinkedHandle",
                                                name: "search",
                                            },
                                            {
                                                kind: "TypeDiscriminator",
                                                abstractKey: "__isNode",
                                            },
                                        ],
                                        type: "Searchable",
                                        abstractKey: "__isSearchable",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "1ca759613fd9455885151204a39c8508",
                        metadata: {},
                        name: "SearchPaginatedQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            na.hash = "7048a8fa4213ea495d3a363ede290f47";
            let nl = (function () {
                var e = ["search"],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    n = {
                        kind: "Variable",
                        name: "labelPageSize",
                        variableName: "labelPageSize",
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "fetchRepository",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "includeGitData",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "labelPageSize",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "query",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "skip",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "first",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                                stream: !0,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: { count: "first", cursor: "cursor" },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: na,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "ListItemsPaginated_results",
                    selections: [
                        {
                            kind: "CatchField",
                            field: {
                                alias: "search",
                                args: [
                                    {
                                        kind: "Variable",
                                        name: "query",
                                        variableName: "query",
                                    },
                                    {
                                        kind: "Variable",
                                        name: "skip",
                                        variableName: "skip",
                                    },
                                    {
                                        kind: "Literal",
                                        name: "type",
                                        value: "ISSUE_ADVANCED",
                                    },
                                ],
                                concreteType: "SearchResultItemConnection",
                                kind: "LinkedField",
                                name: "__Query_search_connection",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "issueCount",
                                        storageKey: null,
                                    },
                                    {
                                        kind: "Stream",
                                        selections: [
                                            {
                                                kind: "RequiredField",
                                                field: {
                                                    alias: null,
                                                    args: null,
                                                    concreteType:
                                                        "SearchResultItemEdge",
                                                    kind: "LinkedField",
                                                    name: "edges",
                                                    plural: !0,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType: null,
                                                            kind: "LinkedField",
                                                            name: "node",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "__typename",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    kind: "InlineFragment",
                                                                    selections:
                                                                        [
                                                                            a,
                                                                            l,
                                                                            {
                                                                                args: [
                                                                                    {
                                                                                        kind: "Variable",
                                                                                        name: "fetchRepository",
                                                                                        variableName:
                                                                                            "fetchRepository",
                                                                                    },
                                                                                    n,
                                                                                ],
                                                                                kind: "FragmentSpread",
                                                                                name: "IssueRow",
                                                                            },
                                                                        ],
                                                                    type: "Issue",
                                                                    abstractKey:
                                                                        null,
                                                                },
                                                                {
                                                                    kind: "InlineFragment",
                                                                    selections:
                                                                        [
                                                                            a,
                                                                            l,
                                                                            {
                                                                                args: [
                                                                                    {
                                                                                        kind: "Variable",
                                                                                        name: "includeGitData",
                                                                                        variableName:
                                                                                            "includeGitData",
                                                                                    },
                                                                                    n,
                                                                                ],
                                                                                kind: "FragmentSpread",
                                                                                name: "PullRequestRow_pullRequest",
                                                                            },
                                                                        ],
                                                                    type: "PullRequest",
                                                                    abstractKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "cursor",
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                                action: "THROW",
                                            },
                                        ],
                                    },
                                    {
                                        kind: "Defer",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "PageInfo",
                                                kind: "LinkedField",
                                                name: "pageInfo",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "startCursor",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "endCursor",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "hasPreviousPage",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "hasNextPage",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                ],
                                storageKey: null,
                            },
                            to: "RESULT",
                        },
                        {
                            kind: "InlineFragment",
                            selections: [a],
                            type: "Node",
                            abstractKey: "__isNode",
                        },
                    ],
                    type: "Searchable",
                    abstractKey: "__isSearchable",
                };
            })();
            nl.hash = "7048a8fa4213ea495d3a363ede290f47";
            var nn = l(52811),
                nt = l(84905);
            let ni = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchRepository",
                    },
                    {
                        defaultValue: !0,
                        kind: "LocalArgument",
                        name: "includeMilestone",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "IssueRow",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "includeMilestone",
                                variableName: "includeMilestone",
                            },
                            {
                                kind: "Variable",
                                name: "labelPageSize",
                                variableName: "labelPageSize",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "IssueItem",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    {
                        condition: "fetchRepository",
                        kind: "Condition",
                        passingValue: !0,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "name",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "owner",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "login",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            ni.hash = "21fd35aed4bf06bc46c2c5f43e336427";
            var ns = l(7799),
                nr = l(42080);
            let no = {
                argumentDefinitions: [
                    {
                        defaultValue: !0,
                        kind: "LocalArgument",
                        name: "includeMilestone",
                    },
                    {
                        defaultValue: 10,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "IssueItem",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    {
                        alias: "titleHtml",
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "labelPageSize",
                                variableName: "labelPageSize",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "IssuePullRequestTitle",
                    },
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "includeMilestone",
                                variableName: "includeMilestone",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "IssuePullRequestDescription",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssuePullRequestStateIcon",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueTypeIndicator",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            no.hash = "0117efdfcd4f84d5eb84fd080781921a";
            var nu = l(4122),
                nd = l(78168),
                nc = l(93715),
                nm = l(42265),
                ng = l(81346);
            let np = {
                label: "label",
                assignee: "assignee",
                "parent-issue": "parent-issue",
                is: "is",
            };
            RegExp(
                `^(\\d+)(${Object.values({ day: "d", week: "w", month: "m", year: "y" }).join("|")})`
            );
            let ny = {
                    ListItem_0: "IssueItem-module__ListItem_0--feI3m",
                    leadingContent: "IssueItem-module__leadingContent--EZ8h4",
                    commentCountContainer:
                        "IssueItem-module__commentCountContainer--zhndm",
                    defaultRepoContainer:
                        "IssueItem-module__defaultRepoContainer--CWzyp",
                    timestampContainer:
                        "IssueItem-module__timestampContainer--j5XA_",
                    authorCreatedLink:
                        "IssueItem-module__authorCreatedLink--BNURo",
                    defaultNumberDescription:
                        "IssueItem-module__defaultNumberDescription--tATCW",
                    compactNameWithOwnerLabel:
                        "IssueItem-module__compactNameWithOwnerLabel--hMW4z",
                    token: "IssueItem-module__token--p8scu",
                },
                nh = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueItemBlockedBy",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "IssueDependenciesSummary",
                            kind: "LinkedField",
                            name: "issueDependenciesSummary",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "blockedBy",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            nh.hash = "9c625883c1ab2a710b78eb3d2e69cda8";
            var nk = l(98386),
                nf = l(13922);
            function nb({ metadataRef: e, issueId: a, href: l }) {
                return e
                    ? (0, y.jsx)(f.Suspense, {
                          fallback: null,
                          children: (0, y.jsx)(nC, {
                              issueId: a,
                              metadataRef: e,
                              href: l,
                          }),
                      })
                    : null;
            }
            function nC({ metadataRef: e, issueId: a, href: l }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(im, e),
                    t = n?.find((e) => e?.id === a);
                return t ? (0, y.jsx)(nS, { blockedByKey: t, href: l }) : null;
            }
            function nS({ blockedByKey: e, href: a }) {
                let l = (0, er.useFragment)(nh, e);
                if (l?.state === "CLOSED" || !l?.issueDependenciesSummary)
                    return null;
                let { blockedBy: n } = l.issueDependenciesSummary;
                return 0 === n
                    ? null
                    : (0, y.jsx)(nf.A, {
                          text: "Blocked",
                          leadingVisual: () =>
                              (0, y.jsx)(P.BlockedIcon, {
                                  className: "fgColor-danger",
                                  size: 14,
                              }),
                          className: ny.token,
                          ...(a ? { as: "a", href: a } : {}),
                          ...(0, nk.G)("blocked-by-token"),
                      });
            }
            try {
                nb.displayName || (nb.displayName = "IssueItemBlockedBy");
            } catch {}
            try {
                nC.displayName ||
                    (nC.displayName = "IssueItemBlockedByFetched");
            } catch {}
            try {
                nS.displayName ||
                    (nS.displayName = "IssueItemBlockedByInternal");
            } catch {}
            let nF = {
                argumentDefinitions: [
                    {
                        defaultValue: 10,
                        kind: "LocalArgument",
                        name: "assigneePageSize",
                    },
                    {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "includeReactions",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "IssueItemMetadata",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        condition: "includeReactions",
                        kind: "Condition",
                        passingValue: !0,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "ReactionGroup",
                                kind: "LinkedField",
                                name: "reactionGroups",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        condition: "includeReactions",
                                        kind: "Condition",
                                        passingValue: !0,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "Reactions",
                                            },
                                        ],
                                    },
                                ],
                                type: "Reactable",
                                abstractKey: "__isReactable",
                            },
                        ],
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCommentsCount",
                        storageKey: null,
                    },
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "assigneePageSize",
                                variableName: "assigneePageSize",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "Assignees",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "ClosedByPullRequestsReferences",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            nF.hash = "40031c7706e02f95b7bde55bd32d1463";
            var nv = l(52369),
                nL = l(78563);
            let nI = {
                    listRowRepoNameAndNumber: "list-row-repo-name-and-number",
                    listRowStateIcon: "list-row-state-icon",
                    listRowComments: "list-row-comments",
                    listRowAssignees: "list-row-assignees",
                    listRowLinkedPullRequests: "list-row-linked-pull-requests",
                },
                n_ = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "assigneePageSize",
                            },
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "cursor",
                            },
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "id",
                            },
                        ],
                        a = [
                            {
                                kind: "Variable",
                                name: "id",
                                variableName: "id",
                            },
                        ],
                        l = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        t = [
                            {
                                kind: "Variable",
                                name: "after",
                                variableName: "cursor",
                            },
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "assigneePageSize",
                            },
                        ],
                        i = [n];
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "IssueAssigneePaginatedQuery",
                            selections: [
                                {
                                    alias: null,
                                    args: a,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "node",
                                    plural: !1,
                                    selections: [
                                        {
                                            args: [
                                                {
                                                    kind: "Variable",
                                                    name: "assigneePageSize",
                                                    variableName:
                                                        "assigneePageSize",
                                                },
                                                {
                                                    kind: "Variable",
                                                    name: "cursor",
                                                    variableName: "cursor",
                                                },
                                            ],
                                            kind: "FragmentSpread",
                                            name: "Assignees",
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "Query",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "IssueAssigneePaginatedQuery",
                            selections: [
                                {
                                    alias: null,
                                    args: a,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "node",
                                    plural: !1,
                                    selections: [
                                        l,
                                        n,
                                        {
                                            kind: "InlineFragment",
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: t,
                                                    concreteType:
                                                        "AssigneeConnection",
                                                    kind: "LinkedField",
                                                    name: "assignedActors",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "AssigneeEdge",
                                                            kind: "LinkedField",
                                                            name: "edges",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "node",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            l,
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    i,
                                                                                type: "User",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    i,
                                                                                type: "Bot",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "login",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: [
                                                                                                {
                                                                                                    kind: "Literal",
                                                                                                    name: "size",
                                                                                                    value: 64,
                                                                                                },
                                                                                            ],
                                                                                            kind: "ScalarField",
                                                                                            name: "avatarUrl",
                                                                                            storageKey:
                                                                                                "avatarUrl(size:64)",
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                [
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "isCopilot",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                ],
                                                                                            type: "Bot",
                                                                                            abstractKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                type: "Actor",
                                                                                abstractKey:
                                                                                    "__isActor",
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    i,
                                                                                type: "Node",
                                                                                abstractKey:
                                                                                    "__isNode",
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "cursor",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "PageInfo",
                                                            kind: "LinkedField",
                                                            name: "pageInfo",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "endCursor",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "hasNextPage",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: t,
                                                    filters: null,
                                                    handle: "connection",
                                                    key: "IssueAssignees_assignedActors",
                                                    kind: "LinkedHandle",
                                                    name: "assignedActors",
                                                },
                                                {
                                                    kind: "TypeDiscriminator",
                                                    abstractKey: "__isNode",
                                                },
                                            ],
                                            type: "Assignable",
                                            abstractKey: "__isAssignable",
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "cd6195d2574e8fd2e46055cd654680f6",
                            metadata: {},
                            name: "IssueAssigneePaginatedQuery",
                            operationKind: "query",
                            text: null,
                        },
                    };
                })();
            n_.hash = "6430a51068d73c42eaf731eae13d2c00";
            let nx = (function () {
                var e = ["assignedActors"],
                    a = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                    ];
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "assigneePageSize",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "assigneePageSize",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: {
                                    count: "assigneePageSize",
                                    cursor: "cursor",
                                },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: n_,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "Assignees",
                    selections: [
                        {
                            alias: "assignedActors",
                            args: null,
                            concreteType: "AssigneeConnection",
                            kind: "LinkedField",
                            name: "__IssueAssignees_assignedActors_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "AssigneeEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                {
                                                    kind: "InlineFragment",
                                                    selections: a,
                                                    type: "User",
                                                    abstractKey: null,
                                                },
                                                {
                                                    kind: "InlineFragment",
                                                    selections: a,
                                                    type: "Bot",
                                                    abstractKey: null,
                                                },
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "Assignee",
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            kind: "InlineFragment",
                            selections: a,
                            type: "Node",
                            abstractKey: "__isNode",
                        },
                    ],
                    type: "Assignable",
                    abstractKey: "__isAssignable",
                };
            })();
            nx.hash = "6430a51068d73c42eaf731eae13d2c00";
            var nK = l(70892);
            let nw = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "Assignee",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                ],
                type: "Actor",
                abstractKey: "__isActor",
            };
            nw.hash = "42bd9fa660c90cbfea3449aa2b1d2c2c";
            var nN = l(91560),
                nj = l(50879);
            let nR = {
                    AssigneeAvatar: "Assignee-module__AssigneeAvatar--ATit0",
                },
                nT = {
                    noAssigneeContainer:
                        "Assignees-module__noAssigneeContainer--mMEYh",
                    assigneeIconLink:
                        "Assignees-module__assigneeIconLink--UliM6",
                    AssigneesAvatarStack:
                        "Assignees-module__AssigneesAvatarStack--XM7LS",
                    noAssigneePersonIcon:
                        "Assignees-module__noAssigneePersonIcon--at_Ww",
                    noAssigneeBackgroundIcon:
                        "Assignees-module__noAssigneeBackgroundIcon--dhhfQ",
                };
            function nP({ assignee: e, getAssigneeHref: a, className: l }) {
                let {
                        login: n,
                        avatarUrl: t,
                        isCopilot: i,
                    } = (0, er.useFragment)(nw, e),
                    s = i ? "Copilot" : n,
                    r = (0, nj.S)(n, { isCopilot: i });
                return (0, y.jsx)(e9.A, {
                    "aria-label": `${s} is assigned`,
                    href: a(n),
                    ...r,
                    className: (0, l7.$)(
                        l,
                        "pc-AvatarItem",
                        nT.assigneeIconLink
                    ),
                    children: i
                        ? (0, y.jsx)(nN.C, { size: "small" }, n)
                        : (0, y.jsx)(
                              e1.r,
                              { alt: s, src: t, className: nR.AssigneeAvatar },
                              n
                          ),
                });
            }
            try {
                nP.displayName || (nP.displayName = "Assignee");
            } catch {}
            function nA({
                assigneeskey: e,
                getAssigneeHref: a,
                showPlaceholder: l = !0,
            }) {
                let { data: n } = (0, er.usePaginationFragment)(nx, e),
                    t = (n.assignedActors?.edges || []).flatMap((e) =>
                        e && e.node ? e.node : []
                    );
                return t.length
                    ? (0, y.jsx)(nK.A, {
                          alignRight: !0,
                          className: nT.AssigneesAvatarStack,
                          children: t.map((e) =>
                              (0, y.jsx)(
                                  nP,
                                  { assignee: e, getAssigneeHref: a },
                                  e.id
                              )
                          ),
                      })
                    : l
                      ? (0, y.jsxs)("div", {
                            className: nT.noAssigneeContainer,
                            children: [
                                (0, y.jsx)(l5.A, {
                                    icon: P.PersonIcon,
                                    className: nT.noAssigneePersonIcon,
                                }),
                                (0, y.jsx)(l5.A, {
                                    size: 24,
                                    icon: P.CircleIcon,
                                    className: nT.noAssigneeBackgroundIcon,
                                }),
                            ],
                        })
                      : null;
            }
            try {
                nA.displayName || (nA.displayName = "Assignees");
            } catch {}
            var nM = l(69403);
            let nD = {
                    ListItemMetadata_0:
                        "IssueItemMetadata-module__ListItemMetadata_0--RUUfu",
                },
                nV = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "Reactions",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "ReactionGroup",
                            kind: "LinkedField",
                            name: "reactionGroups",
                            plural: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "content",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "ReactorConnection",
                                    kind: "LinkedField",
                                    name: "reactors",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "totalCount",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Reactable",
                    abstractKey: "__isReactable",
                };
            nV.hash = "74f8d34cc7d8c1ceb397b94750030f0d";
            let nE = {
                    reactionsContainer:
                        "Reactions-module__reactionsContainer--II9mB",
                },
                nq = ({
                    dataKey: e,
                    reactionEmojiToDisplay: a,
                    showCompactDensity: l = !1,
                }) => {
                    let n = (0, er.useFragment)(nV, e),
                        t =
                            n.reactionGroups?.filter(
                                (e) => e.content === a.reaction
                            )[0]?.reactors.totalCount || 0;
                    return a?.reactionEmoji && 0 !== t
                        ? (0, y.jsx)(ae.A, {
                              sx: { minWidth: l ? 0 : "45px", ml: 3 * !l },
                              className: nE.reactionsContainer,
                              children:
                                  t > 0 &&
                                  (0, y.jsxs)(y.Fragment, {
                                      children: [
                                          (0, y.jsx)("span", {
                                              children: a.reactionEmoji,
                                          }),
                                          (0, y.jsx)("span", { children: t }),
                                      ],
                                  }),
                          })
                        : null;
                };
            try {
                nq.displayName || (nq.displayName = "Reactions");
            } catch {}
            function nO({ metadataRef: e, ...a }) {
                return null === e
                    ? null
                    : e
                      ? (0, y.jsx)(f.Suspense, {
                            fallback: (0, y.jsx)(nB, { ...a }),
                            children: (0, y.jsx)(n$, { ...a, metadataRef: e }),
                        })
                      : (0, y.jsx)(nB, { ...a });
            }
            function nB({
                showAssignees: e,
                showCommentCount: a = !0,
                reactionEmojiToDisplay: l,
                showLinkedPullRequests: n = !1,
            }) {
                let t = !!l?.reaction;
                return (0, y.jsxs)(y.Fragment, {
                    children: [
                        n &&
                            (0, y.jsx)(nv.V, {
                                "data-testid": nI.listRowLinkedPullRequests,
                                className: nD.ListItemMetadata_0,
                                children: (0, y.jsx)(lU.O, {
                                    variant: "pill",
                                    width: "xl",
                                }),
                            }),
                        (0, y.jsx)(nv.V, {
                            "data-testid": nI.listRowComments,
                            className: nD.ListItemMetadata_0,
                            children:
                                a &&
                                (0, y.jsx)(lU.O, {
                                    variant: "pill",
                                    width: "xl",
                                }),
                        }),
                        t &&
                            (0, y.jsx)(nv.V, {
                                className: nD.ListItemMetadata_0,
                                children: (0, y.jsx)(lU.O, {
                                    variant: "pill",
                                    width: "xl",
                                }),
                            }),
                        e &&
                            (0, y.jsx)(nv.V, {
                                "data-testid": nI.listRowAssignees,
                                alignment: "right",
                                className: nD.ListItemMetadata_0,
                                children: (0, y.jsx)(lU.O, {
                                    variant: "pill",
                                    width: "lg",
                                }),
                            }),
                    ],
                });
            }
            function n$({ issueId: e, metadataRef: a, ...l }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(im, a),
                    t = n?.find((a) => a?.id === e);
                return t
                    ? (0, y.jsx)(nQ, { itemKey: t, ...l })
                    : (0, y.jsx)(nB, { ...l });
            }
            let nQ = ({
                itemKey: e,
                getMetadataHref: a,
                reactionEmojiToDisplay: l,
                showAssignees: n,
                showCommentCount: t = !0,
                showCommentZeroCount: i = !1,
                showLinkedPullRequests: s = !1,
            }) => {
                let r,
                    o,
                    { variant: u } = (0, nL.e)(),
                    d = (0, er.useFragment)(nF, e),
                    c = !!l?.reaction,
                    m = (0, h.G7)("issues_react_remove_placeholders");
                if (void 0 === d.totalCommentsCount)
                    return (0, y.jsx)(nB, {
                        reactionEmojiToDisplay: l,
                        showCommentCount: !0,
                        showLinkedPullRequests: !0,
                        showAssignees: !0,
                    });
                let g =
                    d?.totalCommentsCount && d.totalCommentsCount > 0
                        ? ` ${d.totalCommentsCount} comment${d.totalCommentsCount > 1 ? "s" : ""};`
                        : "";
                return (
                    m
                        ? ((o = d.totalCommentsCount ?? 0),
                          (r = t && (i || o > 0)))
                        : (o =
                              (r = t || i) && d.totalCommentsCount
                                  ? d.totalCommentsCount
                                  : 0),
                    (0, y.jsxs)(y.Fragment, {
                        children: [
                            d &&
                                s &&
                                (0, y.jsx)(nv.V, {
                                    "data-testid": nI.listRowLinkedPullRequests,
                                    className: nD.ListItemMetadata_0,
                                    children: (0, y.jsx)(nM.d, {
                                        issueId: d.id,
                                        closedByPullRequestsReferencesKey: d,
                                    }),
                                }),
                            (0, y.jsx)(nv.V, {
                                "aria-label": g,
                                "data-testid": nI.listRowComments,
                                className: nD.ListItemMetadata_0,
                                children:
                                    r &&
                                    (0, y.jsxs)("div", {
                                        className: ny.commentCountContainer,
                                        children: [
                                            (0, y.jsx)(P.CommentIcon, {
                                                size: 16,
                                            }),
                                            " ",
                                            (0, y.jsx)("span", {
                                                className: "ml-1",
                                                children: o,
                                            }),
                                            (0, y.jsx)("span", {
                                                className: "sr-only",
                                                children:
                                                    1 === o
                                                        ? " comment"
                                                        : " comments",
                                            }),
                                        ],
                                    }),
                            }),
                            c &&
                                (0, y.jsx)(nv.V, {
                                    className: nD.ListItemMetadata_0,
                                    children:
                                        d.reactionGroups &&
                                        (0, y.jsx)(nq, {
                                            dataKey: d,
                                            reactionEmojiToDisplay: l,
                                            showCompactDensity: "compact" === u,
                                        }),
                                }),
                            n &&
                                d &&
                                (0, y.jsx)(nv.V, {
                                    "data-testid": nI.listRowAssignees,
                                    alignment: "right",
                                    className: nD.ListItemMetadata_0,
                                    children: (0, y.jsx)(nA, {
                                        showPlaceholder: !m,
                                        assigneeskey: d,
                                        getAssigneeHref: (e) =>
                                            a(np.assignee, e),
                                    }),
                                }),
                        ],
                    })
                );
            };
            try {
                nO.displayName || (nO.displayName = "LazyIssueItemMetadata");
            } catch {}
            try {
                nB.displayName || (nB.displayName = "LoadingMetadata");
            } catch {}
            try {
                n$.displayName || (n$.displayName = "LazyIssueMetadataFetched");
            } catch {}
            try {
                nQ.displayName || (nQ.displayName = "IssueItemMetadata");
            } catch {}
            let nU = (function () {
                var e = [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isReadByViewer",
                        storageKey: null,
                    },
                ];
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueOrPullRequestUnreadIndicator",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        {
                            kind: "InlineFragment",
                            selections: e,
                            type: "Issue",
                            abstractKey: null,
                        },
                        {
                            kind: "InlineFragment",
                            selections: e,
                            type: "PullRequest",
                            abstractKey: null,
                        },
                    ],
                    type: "IssueOrPullRequest",
                    abstractKey: "__isIssueOrPullRequest",
                };
            })();
            nU.hash = "691d1fd40629826d5b45aaffeb927341";
            let nH = { unread: "UnreadIndicator-module__unread--rNL5I" };
            function nz({ unread: e }) {
                return e
                    ? (0, y.jsx)("div", {
                          className: nH.unread,
                          children: (0, y.jsx)("span", {
                              className: "sr-only",
                              children: "New activity.",
                          }),
                      })
                    : null;
            }
            try {
                nz.displayName || (nz.displayName = "UnreadIndicator");
            } catch {}
            function nW({ issueId: e, metadataRef: a }) {
                return a
                    ? (0, y.jsx)(f.Suspense, {
                          fallback: null,
                          children: (0, y.jsx)(nG, {
                              issueId: e,
                              metadataRef: a,
                          }),
                      })
                    : null;
            }
            function nG({ issueId: e, metadataRef: a }) {
                let { nodes: l } = (0, er.usePreloadedQuery)(im, a),
                    n = l?.find((a) => a?.id === e);
                return n ? (0, y.jsx)(nZ, { notificationKey: n }) : null;
            }
            function nZ({ notificationKey: e }) {
                let a = (0, er.useFragment)(nU, e),
                    l = !!a && "isReadByViewer" in a && a.isReadByViewer;
                return (0, y.jsx)(nz, { unread: !l });
            }
            try {
                nW.displayName ||
                    (nW.displayName = "IssueOrPullRequestUnreadIndicator");
            } catch {}
            try {
                nG.displayName ||
                    (nG.displayName =
                        "IssueOrPullRequestUnreadIndicatorFetched");
            } catch {}
            try {
                nZ.displayName ||
                    (nZ.displayName =
                        "IssueOrPullRequestUnreadIndicatorInternal");
            } catch {}
            let nX = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "login",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__typename",
                                storageKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    s = {
                        args: [
                            {
                                kind: "Variable",
                                name: "includeMilestone",
                                variableName: "includeMilestone",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "MilestoneMetadata",
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: !0,
                            kind: "LocalArgument",
                            name: "includeGitData",
                        },
                        {
                            defaultValue: !0,
                            kind: "LocalArgument",
                            name: "includeMilestone",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssuePullRequestDescription",
                    selections: [
                        {
                            kind: "InlineFragment",
                            selections: [
                                e,
                                a,
                                l,
                                n,
                                t,
                                i,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "stateReason",
                                    storageKey: null,
                                },
                                s,
                            ],
                            type: "Issue",
                            abstractKey: null,
                        },
                        {
                            kind: "InlineFragment",
                            selections: [
                                e,
                                a,
                                l,
                                n,
                                t,
                                i,
                                s,
                                {
                                    condition: "includeGitData",
                                    kind: "Condition",
                                    passingValue: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "reviewDecision",
                                            storageKey: null,
                                        },
                                    ],
                                },
                            ],
                            type: "PullRequest",
                            abstractKey: null,
                        },
                    ],
                    type: "IssueOrPullRequest",
                    abstractKey: "__isIssueOrPullRequest",
                };
            })();
            nX.hash = "fa9824330990dabf19a484ca8d78a275";
            var nJ = l(46404),
                nY = l(58569),
                n1 = l(89169),
                n2 = l(19413);
            let n0 = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "state",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "CheckRunStatus",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "StatusCheckRollup",
                            kind: "LinkedField",
                            name: "statusCheckRollup",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType:
                                        "StatusCheckRollupContextConnection",
                                    kind: "LinkedField",
                                    name: "contexts",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "checkRunCount",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "CheckRunStateCount",
                                            kind: "LinkedField",
                                            name: "checkRunCountsByState",
                                            plural: !0,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "count",
                                                    storageKey: null,
                                                },
                                                e,
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Commit",
                    abstractKey: null,
                };
            })();
            n0.hash = "6dc5ad338ebeeb78e4452c83673b4bec";
            let n3 = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "state",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "CheckRunStatusFromPullRequest",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "StatusCheckRollup",
                            kind: "LinkedField",
                            name: "statusCheckRollup",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType:
                                        "StatusCheckRollupContextConnection",
                                    kind: "LinkedField",
                                    name: "contexts",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "checkRunCount",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "CheckRunStateCount",
                                            kind: "LinkedField",
                                            name: "checkRunCountsByState",
                                            plural: !0,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "count",
                                                    storageKey: null,
                                                },
                                                e,
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "PullRequest",
                    abstractKey: null,
                };
            })();
            n3.hash = "d75a7a69f99bfff558b671bcd7aeb083";
            var n4 = l(44237);
            let n5 = {
                    checkRunStatusContainer:
                        "CheckRunStatus-module__checkRunStatusContainer--eKPo9",
                },
                n7 = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "PullRequestItemHeadCommit",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "PullRequestCommit",
                            kind: "LinkedField",
                            name: "headCommit",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Commit",
                                    kind: "LinkedField",
                                    name: "commit",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "id",
                                            storageKey: null,
                                        },
                                        {
                                            args: null,
                                            kind: "FragmentSpread",
                                            name: "CheckRunStatus",
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "PullRequest",
                    abstractKey: null,
                };
            n7.hash = "fd277c6401a8f4dcc071cc6026716196";
            let n6 = (function () {
                var e = {
                    kind: "Variable",
                    name: "includeGitData",
                    variableName: "includeGitData",
                };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: !0,
                            kind: "LocalArgument",
                            name: "includeGitData",
                        },
                        {
                            defaultValue: !0,
                            kind: "LocalArgument",
                            name: "includeMilestone",
                        },
                        {
                            defaultValue: 10,
                            kind: "LocalArgument",
                            name: "labelPageSize",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "PullRequestItem",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        {
                            condition: "includeGitData",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "PullRequestItemHeadCommit",
                                },
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "CheckRunStatusFromPullRequest",
                                },
                            ],
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "name",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "titleHTML",
                            storageKey: null,
                        },
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "labelPageSize",
                                    variableName: "labelPageSize",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "IssuePullRequestTitle",
                        },
                        {
                            args: [
                                e,
                                {
                                    kind: "Variable",
                                    name: "includeMilestone",
                                    variableName: "includeMilestone",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "IssuePullRequestDescription",
                        },
                        {
                            args: [e],
                            kind: "FragmentSpread",
                            name: "IssuePullRequestStateIcon",
                        },
                    ],
                    type: "PullRequest",
                    abstractKey: null,
                };
            })();
            n6.hash = "6141a029801edc1d0f101b336064cb62";
            let n9 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssuePullRequestStateIconSecondary",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInMergeQueue",
                        storageKey: null,
                    },
                ],
                type: "PullRequest",
                abstractKey: null,
            };
            n9.hash = "d466f881ba7ae18b784921131fd14a79";
            let n8 = {
                argumentDefinitions: [
                    {
                        defaultValue: !0,
                        kind: "LocalArgument",
                        name: "includeGitData",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "IssuePullRequestStateIcon",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isDraft",
                                storageKey: null,
                            },
                            {
                                condition: "includeGitData",
                                kind: "Condition",
                                passingValue: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInMergeQueue",
                                        storageKey: null,
                                    },
                                ],
                            },
                            {
                                alias: "pullRequestState",
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                        ],
                        type: "PullRequest",
                        abstractKey: null,
                    },
                ],
                type: "IssueOrPullRequest",
                abstractKey: "__isIssueOrPullRequest",
            };
            n8.hash = "bad896aa98ad487f05ec49c3434b03aa";
            var te = l(67307),
                ta = l(77755);
            let tl = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "PullRequestRowSecondary",
                selections: [
                    {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestCommit",
                        kind: "LinkedField",
                        name: "headCommit",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "Commit",
                                kind: "LinkedField",
                                name: "commit",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssuePullRequestStateIconSecondary",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "ReviewDecision",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "CheckRunStatusFromPullRequest",
                    },
                ],
                type: "PullRequest",
                abstractKey: null,
            };
            tl.hash = "e97d88728742c8b65cc52759a9e77b36";
            let tn = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    a = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "id",
                                    variableName: "id",
                                },
                            ],
                            concreteType: "PullRequest",
                            kind: "LinkedField",
                            name: "pullRequestStatusUpdated",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "id",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "state",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isDraft",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "PullRequestRowStatusUpdatedSubscription",
                        selections: a,
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "PullRequestRowStatusUpdatedSubscription",
                        selections: a,
                    },
                    params: {
                        id: "62f0856d23072df832d99c11f2061ca2",
                        metadata: {},
                        name: "PullRequestRowStatusUpdatedSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            tn.hash = "2c6fa54e180c24a3939b45f4ed793005";
            let tt = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    a = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "id",
                                    variableName: "id",
                                },
                            ],
                            concreteType: "PullRequest",
                            kind: "LinkedField",
                            name: "pullRequestTitleUpdated",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "id",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "title",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "titleHTML",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "PullRequestRowTitleUpdatedSubscription",
                        selections: a,
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "PullRequestRowTitleUpdatedSubscription",
                        selections: a,
                    },
                    params: {
                        id: "a94c38f511b0bf82679e4034de7dcaae",
                        metadata: {},
                        name: "PullRequestRowTitleUpdatedSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            tt.hash = "a2fdd16da7a5dc39dd035c3334c00473";
            let ti = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    a = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "id",
                                    variableName: "id",
                                },
                            ],
                            concreteType: "PullRequest",
                            kind: "LinkedField",
                            name: "pullRequestCommentsUpdated",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "id",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "totalCommentsCount",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "PullRequestRowCommentsSubscription",
                        selections: a,
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "PullRequestRowCommentsSubscription",
                        selections: a,
                    },
                    params: {
                        id: "9fd211e9ada999fbd9d0193e7eaff36e",
                        metadata: {},
                        name: "PullRequestRowCommentsSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            ti.hash = "c07750a7baf2631bfdee073a48c7ec32";
            let ts = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    a = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "id",
                                    variableName: "id",
                                },
                            ],
                            concreteType: "PullRequest",
                            kind: "LinkedField",
                            name: "pullRequestReviewDecisionUpdated",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "id",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "reviewDecision",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "PullRequestRowReviewSubscription",
                        selections: a,
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "PullRequestRowReviewSubscription",
                        selections: a,
                    },
                    params: {
                        id: "f7a0455deeee4e2cb604d181c34d2419",
                        metadata: {},
                        name: "PullRequestRowReviewSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            ts.hash = "25171224ff286ab953decc6e4bf6938a";
            let tr = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    a = [{ kind: "Variable", name: "id", variableName: "id" }],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        concreteType: "StatusCheckRollupContextConnection",
                        kind: "LinkedField",
                        name: "contexts",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "checkRunCount",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "CheckRunStateCount",
                                kind: "LinkedField",
                                name: "checkRunCountsByState",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "count",
                                        storageKey: null,
                                    },
                                    n,
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "PullRequestRowCommitChecksSubscription",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Commit",
                                kind: "LinkedField",
                                name: "commitChecksUpdated",
                                plural: !1,
                                selections: [
                                    l,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "StatusCheckRollup",
                                        kind: "LinkedField",
                                        name: "statusCheckRollup",
                                        plural: !1,
                                        selections: [n, t],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "PullRequestRowCommitChecksSubscription",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Commit",
                                kind: "LinkedField",
                                name: "commitChecksUpdated",
                                plural: !1,
                                selections: [
                                    l,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "StatusCheckRollup",
                                        kind: "LinkedField",
                                        name: "statusCheckRollup",
                                        plural: !1,
                                        selections: [n, t, l],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "3326b1e4b960cfe7156499d6f7aa9f47",
                        metadata: {},
                        name: "PullRequestRowCommitChecksSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            tr.hash = "5dee87e2713acc6cc0a5df4aebd42df6";
            let to = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: !0,
                            kind: "LocalArgument",
                            name: "includeGitData",
                        },
                        {
                            defaultValue: !0,
                            kind: "LocalArgument",
                            name: "includeMilestone",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "labelPageSize",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "PullRequestRow_pullRequest",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        e,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "name",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "includeGitData",
                                    variableName: "includeGitData",
                                },
                                {
                                    kind: "Variable",
                                    name: "includeMilestone",
                                    variableName: "includeMilestone",
                                },
                                {
                                    kind: "Variable",
                                    name: "labelPageSize",
                                    variableName: "labelPageSize",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "PullRequestItem",
                        },
                        {
                            condition: "includeGitData",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PullRequestCommit",
                                    kind: "LinkedField",
                                    name: "headCommit",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Commit",
                                            kind: "LinkedField",
                                            name: "commit",
                                            plural: !1,
                                            selections: [e],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                    ],
                    type: "PullRequest",
                    abstractKey: null,
                };
            })();
            to.hash = "341904fa888e7deff66a0c98b01b7491";
            let tu = { row: "PullRequestRow-module__row--ogYMh" },
                td = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "pullRequestId",
                            },
                        ],
                        a = [
                            {
                                kind: "Variable",
                                name: "id",
                                variableName: "pullRequestId",
                            },
                        ],
                        l = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "titleHTML",
                            storageKey: null,
                        },
                        t = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        i = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isDraft",
                            storageKey: null,
                        },
                        s = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        r = [{ kind: "Literal", name: "first", value: 10 }],
                        o = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        u = [s],
                        d = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "login",
                            storageKey: null,
                        },
                        c = {
                            kind: "InlineFragment",
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isCopilot",
                                    storageKey: null,
                                },
                            ],
                            type: "Bot",
                            abstractKey: null,
                        },
                        m = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        g = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "updatedAt",
                            storageKey: null,
                        },
                        p = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closed",
                            storageKey: null,
                        },
                        y = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closedAt",
                            storageKey: null,
                        },
                        h = {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "author",
                            plural: !1,
                            selections: [
                                d,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "resourcePath",
                                    storageKey: null,
                                },
                                o,
                                c,
                                s,
                            ],
                            storageKey: null,
                        },
                        k = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        f = [
                            {
                                alias: null,
                                args: null,
                                concreteType: "Milestone",
                                kind: "LinkedField",
                                name: "milestone",
                                plural: !1,
                                selections: [
                                    l,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "url",
                                        storageKey: null,
                                    },
                                    s,
                                ],
                                storageKey: null,
                            },
                        ],
                        b = {
                            kind: "InlineFragment",
                            selections: [
                                {
                                    kind: "InlineFragment",
                                    selections: f,
                                    type: "Issue",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: f,
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                            ],
                            type: "IssueOrPullRequest",
                            abstractKey: "__isIssueOrPullRequest",
                        };
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "PullRequestRowSubscription",
                            selections: [
                                {
                                    alias: null,
                                    args: a,
                                    concreteType:
                                        "PullRequestInfoForListViewUpdatedPayload",
                                    kind: "LinkedField",
                                    name: "pullRequestInfoForListViewUpdated",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "titleUpdated",
                                            plural: !1,
                                            selections: [l, n],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "statusUpdated",
                                            plural: !1,
                                            selections: [t, i],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "commentsUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "PullRequestItemMetadata",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "reviewDecisionUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "IssuePullRequestDescription",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "commitChecksUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "CheckRunStatusFromPullRequest",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "EventSubscription",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "PullRequestRowSubscription",
                            selections: [
                                {
                                    alias: null,
                                    args: a,
                                    concreteType:
                                        "PullRequestInfoForListViewUpdatedPayload",
                                    kind: "LinkedField",
                                    name: "pullRequestInfoForListViewUpdated",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "titleUpdated",
                                            plural: !1,
                                            selections: [l, n, s],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "statusUpdated",
                                            plural: !1,
                                            selections: [t, i, s],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "commentsUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "totalCommentsCount",
                                                    storageKey: null,
                                                },
                                                s,
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: r,
                                                            concreteType:
                                                                "AssigneeConnection",
                                                            kind: "LinkedField",
                                                            name: "assignedActors",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "AssigneeEdge",
                                                                    kind: "LinkedField",
                                                                    name: "edges",
                                                                    plural: !0,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    null,
                                                                                kind: "LinkedField",
                                                                                name: "node",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        o,
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                u,
                                                                                            type: "User",
                                                                                            abstractKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                u,
                                                                                            type: "Bot",
                                                                                            abstractKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                [
                                                                                                    d,
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: [
                                                                                                            {
                                                                                                                kind: "Literal",
                                                                                                                name: "size",
                                                                                                                value: 64,
                                                                                                            },
                                                                                                        ],
                                                                                                        kind: "ScalarField",
                                                                                                        name: "avatarUrl",
                                                                                                        storageKey:
                                                                                                            "avatarUrl(size:64)",
                                                                                                    },
                                                                                                    c,
                                                                                                ],
                                                                                            type: "Actor",
                                                                                            abstractKey:
                                                                                                "__isActor",
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                u,
                                                                                            type: "Node",
                                                                                            abstractKey:
                                                                                                "__isNode",
                                                                                        },
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "cursor",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "PageInfo",
                                                                    kind: "LinkedField",
                                                                    name: "pageInfo",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "endCursor",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "hasNextPage",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey:
                                                                "assignedActors(first:10)",
                                                        },
                                                        {
                                                            alias: null,
                                                            args: r,
                                                            filters: null,
                                                            handle: "connection",
                                                            key: "IssueAssignees_assignedActors",
                                                            kind: "LinkedHandle",
                                                            name: "assignedActors",
                                                        },
                                                        {
                                                            kind: "TypeDiscriminator",
                                                            abstractKey:
                                                                "__isNode",
                                                        },
                                                    ],
                                                    type: "Assignable",
                                                    abstractKey:
                                                        "__isAssignable",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "reviewDecisionUpdated",
                                            plural: !1,
                                            selections: [
                                                s,
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                m,
                                                                g,
                                                                p,
                                                                y,
                                                                h,
                                                                k,
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "stateReason",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                b,
                                                            ],
                                                            type: "Issue",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                m,
                                                                g,
                                                                p,
                                                                y,
                                                                h,
                                                                k,
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "reviewDecision",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                b,
                                                            ],
                                                            type: "PullRequest",
                                                            abstractKey: null,
                                                        },
                                                    ],
                                                    type: "IssueOrPullRequest",
                                                    abstractKey:
                                                        "__isIssueOrPullRequest",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "PullRequest",
                                            kind: "LinkedField",
                                            name: "commitChecksUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType:
                                                        "StatusCheckRollup",
                                                    kind: "LinkedField",
                                                    name: "statusCheckRollup",
                                                    plural: !1,
                                                    selections: [
                                                        t,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "StatusCheckRollupContextConnection",
                                                            kind: "LinkedField",
                                                            name: "contexts",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "checkRunCount",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "CheckRunStateCount",
                                                                    kind: "LinkedField",
                                                                    name: "checkRunCountsByState",
                                                                    plural: !0,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "count",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            t,
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                        s,
                                                    ],
                                                    storageKey: null,
                                                },
                                                s,
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "05ab1c9819b53a5a7097836efab3d26d",
                            metadata: {},
                            name: "PullRequestRowSubscription",
                            operationKind: "subscription",
                            text: null,
                        },
                    };
                })();
            function tc({ secondaryDataKey: e }) {
                let a = (0, ly.useFragment)(tl, e);
                return a && a.headCommit
                    ? (0, y.jsx)(tp, { commitId: a.headCommit.commit.id })
                    : null;
            }
            function tm({ id: e, secondaryQueryRef: a }) {
                let { nodes: l } = (0, ly.usePreloadedQuery)(im, a),
                    n = l?.find((a) => a?.id === e);
                return n ? (0, y.jsx)(tc, { secondaryDataKey: n }) : null;
            }
            function tg({ id: e, secondaryQueryRef: a }) {
                return a
                    ? (0, y.jsx)(f.Suspense, {
                          fallback: null,
                          children: (0, y.jsx)(tm, {
                              id: e,
                              secondaryQueryRef: a,
                          }),
                      })
                    : null;
            }
            function tp({ commitId: e }) {
                let a = (0, f.useMemo)(
                    () => ({ subscription: tr, variables: { id: e } }),
                    [e]
                );
                return ((0, er.useSubscription)(a), (0, y.jsx)(y.Fragment, {}));
            }
            td.hash = "7997810aa9b64cc2931eccffac774bc1";
            let ty = (0, f.forwardRef)(
                (
                    {
                        pullRequestKey: e,
                        metadataRef: a,
                        reactionEmojiToDisplay: l,
                        getMetadataHref: n,
                        onSelect: t,
                        onSelectRow: i,
                        isActive: s,
                        isSelected: r,
                        sortingItemSelected: o,
                        additionalAnalyticsContext: u = {},
                        onNavigate: d,
                        ...c
                    },
                    m
                ) => {
                    let {
                            use_pull_request_subscriptions_enabled: g,
                            pull_request_single_subscription: p,
                        } = (0, lf.h)(),
                        h = (0, ly.useFragment)(to, e);
                    g &&
                        (0, ns.M3)() &&
                        (p
                            ? ((e) => {
                                  let a = (0, f.useMemo)(
                                      () => ({
                                          subscription: td,
                                          variables: { pullRequestId: e },
                                      }),
                                      [e]
                                  );
                                  (0, er.useSubscription)(a);
                              })(h.id)
                            : (function (e) {
                                  let a = (0, f.useMemo)(
                                          () => ({
                                              subscription: tn,
                                              variables: { id: e },
                                          }),
                                          [e]
                                      ),
                                      l = (0, f.useMemo)(
                                          () => ({
                                              subscription: tt,
                                              variables: { id: e },
                                          }),
                                          [e]
                                      ),
                                      n = (0, f.useMemo)(
                                          () => ({
                                              subscription: ti,
                                              variables: { id: e },
                                          }),
                                          [e]
                                      ),
                                      t = (0, f.useMemo)(
                                          () => ({
                                              subscription: ts,
                                              variables: { id: e },
                                          }),
                                          [e]
                                      );
                                  ((0, er.useSubscription)(a),
                                      (0, er.useSubscription)(l),
                                      (0, er.useSubscription)(n),
                                      (0, er.useSubscription)(t));
                              })(h.id));
                    let k = h.repository.owner.login,
                        b = (0, lk.ET)({
                            owner: k,
                            repo: h.repository.name,
                            number: h.number,
                        }),
                        C = (0, f.useCallback)(() => {
                            d(b);
                        }, [b, d]),
                        S = (0, f.useCallback)(
                            (e) => {
                                (i({ type: h.__typename, ...u }),
                                    e.stopPropagation(),
                                    e.preventDefault(),
                                    C());
                            },
                            [u, i, h.__typename, C]
                        ),
                        F = (0, f.useCallback)(() => {
                            t?.(!r);
                        }, [t, r]);
                    return (0, y.jsxs)(y.Fragment, {
                        children: [
                            g &&
                                !p &&
                                (h.headCommit
                                    ? (0, y.jsx)(tp, {
                                          commitId: h.headCommit.commit.id,
                                      })
                                    : (0, y.jsx)(tg, {
                                          id: h.id,
                                          secondaryQueryRef: a,
                                      })),
                            (0, y.jsx)(nr.tL, {
                                commands: {
                                    "list-view-items-issues-prs:open-focused-item":
                                        C,
                                    "list-view-items-issues-prs:toggle-focused-item-selection":
                                        F,
                                },
                                className: tu.row,
                                children: (0, y.jsx)(tz, {
                                    itemKey: h,
                                    metadataRef: a,
                                    isActive: s,
                                    isSelected: r,
                                    reactionEmojiToDisplay: l,
                                    showCommentCount: !0,
                                    showRepository: !0,
                                    showAssignees: !0,
                                    showLeadingRightSideContent: !1,
                                    sortingItemSelected: o,
                                    getMetadataHref: n,
                                    onSelect: t,
                                    onClick: S,
                                    href: b,
                                    ref: m,
                                    ...c,
                                }),
                            }),
                        ],
                    });
                }
            );
            ty.displayName = "PullRequestRow";
            let th = f.memo(ty);
            try {
                tc.displayName ||
                    (tc.displayName =
                        "LazyCommitChecksUpdateSubscriptionWrapperInternal");
            } catch {}
            try {
                tm.displayName ||
                    (tm.displayName =
                        "LazyCommitChecksUpdateSubscriptionWrapperFetched");
            } catch {}
            try {
                tg.displayName ||
                    (tg.displayName =
                        "LazyCommitChecksUpdateSubscriptionWrapper");
            } catch {}
            try {
                tp.displayName ||
                    (tp.displayName = "CommitChecksUpdateSubscriptionWrapper");
            } catch {}
            try {
                th.displayName || (th.displayName = "PullRequestRow");
            } catch {}
            function tk({ id: e, dataKey: a, metadataRef: l }) {
                let n = (0, er.useFragment)(n8, a);
                return "PullRequest" === n.__typename
                    ? void 0 === n.isInMergeQueue
                        ? (0, y.jsx)(tb, { id: e, data: n, metadataRef: l })
                        : (0, y.jsx)(tf, {
                              data: n,
                              isInMergeQueue: n.isInMergeQueue,
                          })
                    : (0, y.jsx)(tf, { data: n, isInMergeQueue: !1 });
            }
            function tf({ data: e, isInMergeQueue: a }) {
                let {
                    icon: l,
                    color: n,
                    description: t,
                } = (0, f.useMemo)(() => (0, ta.q)(null), []);
                if ("PullRequest" === e.__typename) {
                    let i = (function (e, a, l) {
                            if (a) return "IN_MERGE_QUEUE";
                            if ("OPEN" === l && e) return "DRAFT";
                            if (l in n2.g.pullRequestIcons) return l;
                            throw Error(`Invalid pull request state: ${l}`);
                        })(e.isDraft, a, e.pullRequestState),
                        s = (0, ta.V)(i);
                    ((l = s.icon), (n = s.color), (t = s.description));
                }
                if ("Issue" === e.__typename) {
                    let a =
                            "CLOSED" === e.state &&
                            ("NOT_PLANNED" === e.stateReason ||
                                "DUPLICATE" === e.stateReason)
                                ? e.stateReason
                                : e.state,
                        i = (0, ta.q)(a);
                    ((l = i.icon), (n = i.color), (t = i.description));
                }
                return (0, y.jsx)(te.e, {
                    icon: l,
                    color: n,
                    description: t,
                    "data-testid": nI.listRowStateIcon,
                });
            }
            function tb({ data: e, metadataRef: a, id: l }) {
                return "PullRequest" === e.__typename && a
                    ? (0, y.jsx)(f.Suspense, {
                          fallback: (0, y.jsx)(tf, {
                              data: e,
                              isInMergeQueue: !1,
                          }),
                          children: (0, y.jsx)(tC, {
                              id: l,
                              data: e,
                              metadataRef: a,
                          }),
                      })
                    : (0, y.jsx)(tf, { data: e, isInMergeQueue: !1 });
            }
            function tC({ id: e, data: a, metadataRef: l }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(im, l),
                    t = n?.find((a) => a?.id === e);
                return (0, y.jsx)(tS, { data: a, secondaryDataKey: t });
            }
            function tS({ data: e, secondaryDataKey: a }) {
                let l = (0, er.useFragment)(tl, a),
                    n = (0, er.useFragment)(n9, l);
                return (0, y.jsx)(tf, {
                    data: e,
                    isInMergeQueue: !!n?.isInMergeQueue,
                });
            }
            try {
                tk.displayName ||
                    (tk.displayName = "IssuePullRequestStateIcon");
            } catch {}
            try {
                tf.displayName ||
                    (tf.displayName = "IssuePullRequestStateIconInternal");
            } catch {}
            try {
                tb.displayName ||
                    (tb.displayName = "LazyIssuePullRequestStateIcon");
            } catch {}
            try {
                tC.displayName ||
                    (tC.displayName = "LazyIssuePullRequestStateIconFetched");
            } catch {}
            try {
                tS.displayName ||
                    (tS.displayName = "LazyIssuePullRequestStateIconInternal");
            } catch {}
            let tF = (function () {
                var e = {
                        count: "labelPageSize",
                        cursor: null,
                        direction: "forward",
                        path: ["labels"],
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    t = {
                        alias: "labels",
                        args: [
                            {
                                kind: "Literal",
                                name: "orderBy",
                                value: { direction: "ASC", field: "NAME" },
                            },
                        ],
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "__Labels_labels_connection",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "Label",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "name",
                                                storageKey: null,
                                            },
                                            l,
                                            a,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "cursor",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "endCursor",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasNextPage",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey:
                            '__Labels_labels_connection(orderBy:{"direction":"ASC","field":"NAME"})',
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: 10,
                            kind: "LocalArgument",
                            name: "labelPageSize",
                        },
                    ],
                    kind: "Fragment",
                    metadata: { connection: [e, e] },
                    name: "IssuePullRequestTitle",
                    selections: [
                        a,
                        {
                            kind: "InlineFragment",
                            selections: [l, n, t],
                            type: "Issue",
                            abstractKey: null,
                        },
                        {
                            kind: "InlineFragment",
                            selections: [n, t],
                            type: "PullRequest",
                            abstractKey: null,
                        },
                    ],
                    type: "IssueOrPullRequest",
                    abstractKey: "__isIssueOrPullRequest",
                };
            })();
            tF.hash = "a24e25f6c540b1b24c68cfd21c14e1a2";
            var tv = l(81584),
                tL = l(20161),
                tI = l(80663),
                t_ = l(65848);
            let tx = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueItemSubIssuesSummary",
                selections: [
                    {
                        alias: null,
                        args: null,
                        concreteType: "SubIssuesSummary",
                        kind: "LinkedField",
                        name: "subIssuesSummary",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "completed",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "percentCompleted",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "total",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            tx.hash = "69d927a8cc29fe0a0e03b982885c9f3a";
            var tK = l(57643),
                tw = l(18828);
            let tN = {
                progressCircle:
                    "IssueItemSubIssuesSummary-module__progressCircle--iCRm9",
                token: "IssueItemSubIssuesSummary-module__token--B0jbG",
            };
            function tj({ metadataRef: e, issueId: a, link: l }) {
                return e
                    ? (0, y.jsx)(f.Suspense, {
                          fallback: null,
                          children: (0, y.jsx)(tR, {
                              issueId: a,
                              metadataRef: e,
                              link: l,
                          }),
                      })
                    : null;
            }
            function tR({ metadataRef: e, issueId: a, link: l }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(im, e),
                    t = n?.find((e) => e?.id === a);
                return t ? (0, y.jsx)(tT, { summaryKey: t, link: l }) : null;
            }
            function tT({ summaryKey: e, link: a }) {
                let l = (0, er.useFragment)(tx, e);
                if (!l?.subIssuesSummary) return null;
                let {
                    total: n,
                    completed: t,
                    percentCompleted: i,
                } = l.subIssuesSummary;
                return 0 === n
                    ? null
                    : (0, y.jsx)(tL.r, {
                          title: "sub-issues summary",
                          children: (0, y.jsx)(tw.m, {
                              text: `${i}% completed`,
                              type: "description",
                              children: (0, y.jsx)(e9.A, {
                                  href: a,
                                  onKeyDown: (e) => e.stopPropagation(),
                                  children: (0, y.jsx)(nf.A, {
                                      className: tN.token,
                                      leadingVisual: () =>
                                          (0, y.jsx)(tK.a, {
                                              percentCompleted: i,
                                              size: 14,
                                              svgClassName: tN.progressCircle,
                                          }),
                                      text: (0, y.jsx)("span", {
                                          children: `${t} / ${n}`,
                                      }),
                                  }),
                              }),
                          }),
                      });
            }
            try {
                tj.displayName ||
                    (tj.displayName = "IssueItemSubIssuesSummary");
            } catch {}
            try {
                tR.displayName || (tR.displayName = "SubIssuesSummaryFetched");
            } catch {}
            try {
                tT.displayName || (tT.displayName = "SubIssuesSummaryInternal");
            } catch {}
            let tP = {
                    ListItemTitle_0:
                        "IssuePullRequestTitle-module__ListItemTitle_0--UQ3gh",
                    ListItemTitle_1:
                        "IssuePullRequestTitle-module__ListItemTitle_1--_xOfg",
                },
                tA = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "Label",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameHTML",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                    ],
                    type: "Label",
                    abstractKey: null,
                };
            tA.hash = "df87cd3d5d39328fcca137f7bf3b8c12";
            var tM = l(59434),
                tD = l(45968);
            let tV = { LabelTooltip: "Label-module__LabelTooltip--UEaqx" };
            function tE({
                label: e,
                hidden: a = !1,
                getLabelHref: l,
                fontWeight: n,
            }) {
                let {
                    nameHTML: t,
                    color: i,
                    id: s,
                    name: r,
                    description: o,
                } = (0, ly.useFragment)(tA, e);
                return (0, y.jsx)(tw.m, {
                    text: o ?? "",
                    type: "description",
                    "aria-label": o ?? "",
                    sx: { visibility: o ? "visible" : "hidden" },
                    className: tV.LabelTooltip,
                    children: (0, y.jsxs)(e9.A, {
                        href: l(r),
                        className: (0, l7.$)({ "sr-only": a }),
                        "aria-describedby": `${s}-tooltip`,
                        sx: { visibility: a ? "hidden" : null },
                        children: [
                            (0, y.jsx)(
                                tM.a,
                                {
                                    interactive: !0,
                                    text: (0, y.jsx)(tD.JR, { html: t }),
                                    fillColor: `#${i}`,
                                    fontWeight: n,
                                },
                                s
                            ),
                            (0, y.jsx)("span", {
                                className: "sr-only",
                                id: `${s}-tooltip`,
                                children: o ?? "",
                            }),
                        ],
                    }),
                });
            }
            try {
                tE.displayName || (tE.displayName = "Label");
            } catch {}
            function tq({
                dataKey: e,
                metadataRef: a,
                ref: l,
                href: n,
                target: t,
                onClick: i,
                value: s,
                leadingBadge: r,
                getLabelHref: o,
                getSubIssuesHref: u,
                headerClassName: d,
                repositoryOwner: c,
                repositoryName: m,
            }) {
                let g = (0, er.useFragment)(tF, e),
                    { number: p, labels: h } =
                        "PullRequest" === g.__typename ||
                        "Issue" === g.__typename
                            ? g
                            : { number: void 0, labels: void 0 },
                    k = (0, f.useCallback)(
                        (e) => {
                            1 === e.button ||
                                e.shiftKey ||
                                e.ctrlKey ||
                                e.metaKey ||
                                i?.(e);
                        },
                        [i]
                    ),
                    b = [
                        ...(h?.edges || [])
                            .flatMap((e) => e?.node || [])
                            .map((e) =>
                                (0, y.jsx)(
                                    tL.r,
                                    {
                                        title: e.name,
                                        children: (0, y.jsx)(tE, {
                                            label: e,
                                            getLabelHref: o,
                                            fontWeight: 500,
                                        }),
                                    },
                                    e.id
                                )
                            ),
                    ];
                if ("Issue" === g.__typename) {
                    let e = (0, y.jsx)(
                        tj,
                        {
                            metadataRef: a,
                            issueId: g.id,
                            link: p && u ? u(c, m, p) : "",
                        },
                        "sub-issues-summary"
                    );
                    e && b.unshift(e);
                }
                let C = (0, f.useMemo)(
                        () =>
                            p
                                ? (function (e, a, l, n) {
                                      switch (e) {
                                          case "PullRequest":
                                              return (0, e5.i9S)({
                                                  owner: a,
                                                  repo: l,
                                                  pullRequestNumber: n,
                                              });
                                          case "Issue":
                                              return (0, e5.Nbg)({
                                                  owner: a,
                                                  repo: l,
                                                  issueNumber: n,
                                              });
                                          default:
                                              return "";
                                      }
                                  })(g.__typename, c, m, p)
                                : void 0,
                        [g.__typename, p, m, c]
                    ),
                    [S] = (0, tI.I)(() => !1, !0, []),
                    F = (0, f.useMemo)(() => {
                        let e = (0, y.jsx)("a", {
                            "data-hovercard-url": C,
                            "data-testid": "issue-pr-title-link",
                            className: (0, l7.$)(p && tP.ListItemTitle_1),
                            target: t,
                            ref: l,
                            href: n,
                            children: " ",
                        });
                        return (0, t_.F0)(e).replace(/ <\/a>$/, `${s}</a>`);
                    }, [C, n, p, l, t, s]);
                return S
                    ? (0, y.jsx)(tv.ao, {
                          value: s,
                          onClick: k,
                          leadingBadge: r,
                          trailingBadges: b,
                          headingClassName: (0, l7.$)(d, tP.ListItemTitle_0),
                          anchorRef: l,
                          anchorClassName: (0, l7.$)(p && tP.ListItemTitle_1),
                          href: n,
                          target: t,
                          linkProps: {
                              "data-hovercard-url": C,
                              "data-testid": "issue-pr-title-link",
                          },
                      })
                    : (0, y.jsx)(tv.kx, {
                          html: F,
                          onClick: k,
                          leadingBadge: r,
                          trailingBadges: b,
                          headingClassName: (0, l7.$)(d, tP.ListItemTitle_0),
                      });
            }
            try {
                tq.displayName || (tq.displayName = "IssuePullRequestTitle");
            } catch {}
            let tO = {
                    ListItem_0: "PullRequestItem-module__ListItem_0--II6nP",
                },
                tB = {
                    argumentDefinitions: [
                        {
                            defaultValue: 10,
                            kind: "LocalArgument",
                            name: "assigneePageSize",
                        },
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "includeReactions",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "PullRequestItemMetadata",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCommentsCount",
                            storageKey: null,
                        },
                        {
                            condition: "includeReactions",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "ReactionGroup",
                                    kind: "LinkedField",
                                    name: "reactionGroups",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "__typename",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: [
                                        {
                                            condition: "includeReactions",
                                            kind: "Condition",
                                            passingValue: !0,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "Reactions",
                                                },
                                            ],
                                        },
                                    ],
                                    type: "Reactable",
                                    abstractKey: "__isReactable",
                                },
                            ],
                        },
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "assigneePageSize",
                                    variableName: "assigneePageSize",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "Assignees",
                        },
                    ],
                    type: "PullRequest",
                    abstractKey: null,
                };
            tB.hash = "54e17665aafa06d00fcfbe5073208c99";
            let t$ = {
                    ListItemMetadata_0:
                        "PullRequestItemMetadata-module__ListItemMetadata_0--Y2G3w",
                },
                tQ = ({ metadataRef: e, ...a }) =>
                    e
                        ? (0, y.jsx)(f.Suspense, {
                              fallback: (0, y.jsx)(nB, { ...a }),
                              children: (0, y.jsx)(tU, {
                                  ...a,
                                  metadataRef: e,
                              }),
                          })
                        : (0, y.jsx)(nB, { ...a });
            function tU({ pullId: e, metadataRef: a, ...l }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(im, a),
                    t = n?.find((a) => a?.id === e);
                return t ? (0, y.jsx)(tH, { itemKey: t, ...l }) : null;
            }
            let tH = ({
                itemKey: e,
                getMetadataHref: a,
                reactionEmojiToDisplay: l,
                showAssignees: n = !0,
                showCommentCount: t = !0,
                showCommentZeroCount: i = !1,
            }) => {
                let { variant: s } = (0, nL.e)(),
                    r = (0, er.useFragment)(tB, e),
                    o = (0, h.G7)("issues_react_remove_placeholders"),
                    u =
                        r?.totalCommentsCount && r.totalCommentsCount > 0
                            ? ` ${r.totalCommentsCount} comment${r.totalCommentsCount > 1 ? "s" : ""};`
                            : "",
                    d = !!l?.reaction,
                    c = (t && !!r.totalCommentsCount) || (t && i);
                return (0, y.jsxs)(y.Fragment, {
                    children: [
                        (0, y.jsx)(nv.V, {
                            "aria-label": u,
                            "data-testid": nI.listRowComments,
                            className: t$.ListItemMetadata_0,
                            children:
                                c &&
                                (0, y.jsxs)(y.Fragment, {
                                    children: [
                                        (0, y.jsx)(P.CommentIcon, { size: 16 }),
                                        " ",
                                        r.totalCommentsCount
                                            ? r.totalCommentsCount
                                            : 0,
                                    ],
                                }),
                        }),
                        d &&
                            (0, y.jsx)(nv.V, {
                                className: t$.ListItemMetadata_0,
                                children:
                                    r.reactionGroups &&
                                    (0, y.jsx)(nq, {
                                        dataKey: r,
                                        reactionEmojiToDisplay: l,
                                        showCompactDensity: "compact" === s,
                                    }),
                            }),
                        (0, y.jsx)(nv.V, {
                            alignment: "right",
                            className: t$.ListItemMetadata_0,
                            children:
                                n &&
                                r &&
                                (0, y.jsx)(nA, {
                                    showPlaceholder: !o,
                                    assigneeskey: r,
                                    getAssigneeHref: (e) => a(np.assignee, e),
                                }),
                        }),
                    ],
                });
            };
            try {
                tQ.displayName ||
                    (tQ.displayName = "LazyPullRequestItemMetadata");
            } catch {}
            try {
                tU.displayName || (tU.displayName = "LazyPullMetadataFetched");
            } catch {}
            try {
                tH.displayName || (tH.displayName = "PullRequestItemMetadata");
            } catch {}
            let tz = ({
                itemKey: e,
                metadataRef: a,
                isActive: l = !1,
                isSelected: n,
                ref: t,
                href: i,
                showCommentCount: s,
                showCommentZeroCount: r,
                showAssignees: o,
                showRepository: u = !0,
                onSelect: d = v.l,
                onClick: c = v.l,
                getMetadataHref: m,
                reactionEmojiToDisplay: g,
                sortingItemSelected: p,
                includeGitDataFromMainQuery: h,
                as: k,
                role: f,
            }) => {
                let b = (0, er.useFragment)(n6, e),
                    C = b && (0, nu.us)(b.title, b.titleHTML),
                    { pull_request_single_subscription: S } = (0, lf.h)(),
                    F = (0, er.useFragment)(n7, !S && h ? b : null),
                    L = (0, er.useFragment)(
                        tW,
                        S ? null : F?.headCommit?.commit
                    ),
                    I = (0, y.jsx)(tq, {
                        value: C,
                        dataKey: b,
                        href: i,
                        ref: t,
                        repositoryOwner: b.repository.owner.login,
                        repositoryName: b.repository.name,
                        onClick: c,
                        getLabelHref: (e) => m(np.label, e),
                    }),
                    _ = (0, y.jsx)(ie, {
                        repositoryOwner: b.repository.owner.login,
                        repositoryName: b.repository.name,
                        statusCheckRollup: L?.statusCheckRollup || void 0,
                        dataKey: b,
                        showRepository: u,
                        sortingItemSelected: p,
                        getAuthorHref: (e) => m("author", e),
                        id: b.id,
                        metadataRef: a,
                        includeGitDataFromMainQuery: h,
                    }),
                    x = (0, y.jsx)(tQ, {
                        pullId: b.id,
                        metadataRef: a,
                        getMetadataHref: m,
                        reactionEmojiToDisplay: g,
                        showAssignees: o,
                        showCommentCount: s,
                        showCommentZeroCount: r,
                    });
                return (0, y.jsxs)(
                    nd.c,
                    {
                        title: I,
                        isActive: l,
                        isSelected: n,
                        onSelect: d,
                        metadata: x,
                        metadataContainerClassName: tO.ListItem_0,
                        role: f || "listitem",
                        as: k,
                        children: [
                            (0, y.jsx)(nW, { metadataRef: a, issueId: b.id }),
                            (0, y.jsx)(nm.B, {
                                children: (0, y.jsx)(tk, {
                                    id: b.id,
                                    dataKey: b,
                                    metadataRef: a,
                                }),
                            }),
                            (0, y.jsx)(ng.Q, {
                                children: (0, y.jsx)(nc.U, { children: _ }),
                            }),
                        ],
                    },
                    b.id
                );
            };
            tz.nodeType = "pullRequest";
            try {
                tz.displayName || (tz.displayName = "PullRequestItem");
            } catch {}
            let tW = n0;
            function tG({ statusCheckRollup: e, variant: a }) {
                if (!e) return null;
                let l = e.contexts?.checkRunCount,
                    n = e.contexts?.checkRunCountsByState?.find(
                        (e) => "SUCCESS" === e.state
                    )?.count,
                    t = `${n}/${l}`,
                    i = e.state.toLowerCase() || "";
                return (0, y.jsxs)("span", {
                    className: n5.checkRunStatusContainer,
                    children: [
                        " ",
                        "\xb7 ",
                        (0, y.jsx)(n4.B6, {
                            disablePopover: !0,
                            statusRollup: i,
                        }),
                        (0, y.jsx)("span", { children: "default" === a && t }),
                    ],
                });
            }
            function tZ({
                id: e,
                primaryQueryRef: a,
                secondaryQueryRef: l,
                variant: n,
            }) {
                return l || a
                    ? a
                        ? (0, y.jsx)(tY, { dataKey: a, variant: n })
                        : l
                          ? (0, y.jsx)(f.Suspense, {
                                fallback: null,
                                children: (0, y.jsx)(tX, {
                                    id: e,
                                    secondaryQueryRef: l,
                                    variant: n,
                                }),
                            })
                          : null
                    : null;
            }
            function tX({ id: e, secondaryQueryRef: a, variant: l }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(im, a),
                    t = n?.find((a) => a?.id === e),
                    { pull_request_single_subscription: i } = (0, lf.h)();
                return t
                    ? i
                        ? (0, y.jsx)(tY, { dataKey: t, variant: l })
                        : (0, y.jsx)(tJ, { secondaryDataKey: t, variant: l })
                    : null;
            }
            function tJ({ secondaryDataKey: e, variant: a }) {
                let l = (0, er.useFragment)(n7, e),
                    n = (0, er.useFragment)(tW, l.headCommit?.commit);
                return n?.statusCheckRollup
                    ? (0, y.jsx)(tG, {
                          statusCheckRollup: n.statusCheckRollup,
                          variant: a,
                      })
                    : null;
            }
            function tY({ dataKey: e, variant: a }) {
                let l = (0, er.useFragment)(n3, e);
                return l?.statusCheckRollup
                    ? (0, y.jsx)(tG, {
                          statusCheckRollup: l.statusCheckRollup,
                          variant: a,
                      })
                    : null;
            }
            try {
                tG.displayName || (tG.displayName = "CheckRunStatus");
            } catch {}
            try {
                tZ.displayName || (tZ.displayName = "LazyCheckRunStatus");
            } catch {}
            try {
                tX.displayName ||
                    (tX.displayName = "LazyCheckRunStatusFetched");
            } catch {}
            try {
                tJ.displayName ||
                    (tJ.displayName = "LazyCheckRunStatusInternal");
            } catch {}
            try {
                tY.displayName ||
                    (tY.displayName = "LazyCheckRunStatusFromPRInternal");
            } catch {}
            let t1 = {
                    repositoryNameTruncate:
                        "IssuePullRequestDescription-module__repositoryNameTruncate--MZZas",
                    RelativeTime:
                        "IssuePullRequestDescription-module__RelativeTime--C5F2W",
                },
                t2 = (function () {
                    var e = [
                        {
                            condition: "includeMilestone",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Milestone",
                                    kind: "LinkedField",
                                    name: "milestone",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "title",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "url",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                    ];
                    return {
                        argumentDefinitions: [
                            {
                                defaultValue: !0,
                                kind: "LocalArgument",
                                name: "includeMilestone",
                            },
                        ],
                        kind: "Fragment",
                        metadata: null,
                        name: "MilestoneMetadata",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: e,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: e,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    };
                })();
            t2.hash = "42e2c9b063aef2dbe465b822a97ed4da";
            let t0 = {
                    milestoneLink:
                        "MilestoneMetadata-module__milestoneLink--LYihJ",
                    milestoneTitleTruncate:
                        "MilestoneMetadata-module__milestoneTitleTruncate--me4W1",
                },
                t3 = ({ data: e }) => {
                    let { milestone: a } = (0, er.useFragment)(t2, e);
                    return a
                        ? (0, y.jsxs)(y.Fragment, {
                              children: [
                                  "\xb7",
                                  (0, y.jsxs)(e9.A, {
                                      href: a.url,
                                      muted: !0,
                                      "aria-label": a.title,
                                      className: t0.milestoneLink,
                                      children: [
                                          (0, y.jsx)(l5.A, {
                                              icon: P.MilestoneIcon,
                                              size: 16,
                                          }),
                                          "\xa0",
                                          (0, y.jsx)(nY.A, {
                                              title: a.title,
                                              className:
                                                  t0.milestoneTitleTruncate,
                                              children: a.title,
                                          }),
                                      ],
                                  }),
                              ],
                          })
                        : null;
                };
            try {
                t3.displayName || (t3.displayName = "MilestoneMetadata");
            } catch {}
            let t4 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ReviewDecision",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "reviewDecision",
                        storageKey: null,
                    },
                ],
                type: "PullRequest",
                abstractKey: null,
            };
            t4.hash = "1c213dcaa975bc9ffa4c8aaaba1c8aec";
            let t5 = {
                reviewDecisionContainer:
                    "ReviewDecision-module__reviewDecisionContainer--kD4cR",
                reviewDecisionContent:
                    "ReviewDecision-module__reviewDecisionContent--x8JBm",
                approvedIcon: "ReviewDecision-module__approvedIcon--UbiG7",
                statusText: "ReviewDecision-module__statusText--wnYu6",
                changesRequestedIcon:
                    "ReviewDecision-module__changesRequestedIcon--JqLCo",
                reviewRequiredIcon:
                    "ReviewDecision-module__reviewRequiredIcon--Q7nD6",
            };
            function t7({ decision: e, variant: a = "default" }) {
                let l = (function (e) {
                    switch (e) {
                        case "APPROVED":
                            return (0, y.jsxs)(y.Fragment, {
                                children: [
                                    (0, y.jsx)(l5.A, {
                                        icon: P.CheckCircleFillIcon,
                                        size: 12,
                                        className: t5.approvedIcon,
                                    }),
                                    " ",
                                    (0, y.jsx)("span", {
                                        className: t5.statusText,
                                        children: "Approved",
                                    }),
                                ],
                            });
                        case "CHANGES_REQUESTED":
                            return (0, y.jsxs)(y.Fragment, {
                                children: [
                                    (0, y.jsx)(l5.A, {
                                        icon: P.XCircleFillIcon,
                                        size: 12,
                                        className: t5.changesRequestedIcon,
                                    }),
                                    " ",
                                    (0, y.jsx)("span", {
                                        className: t5.statusText,
                                        children: "Changes requested",
                                    }),
                                ],
                            });
                        case "REVIEW_REQUIRED":
                            return (0, y.jsxs)(y.Fragment, {
                                children: [
                                    (0, y.jsx)(l5.A, {
                                        icon: P.NoEntryFillIcon,
                                        size: 12,
                                        className: t5.reviewRequiredIcon,
                                    }),
                                    " ",
                                    (0, y.jsx)("span", {
                                        className: t5.statusText,
                                        children: "Review required",
                                    }),
                                ],
                            });
                        default:
                            return null;
                    }
                })(e);
                return l
                    ? "default" === a
                        ? (0, y.jsxs)("div", {
                              className: t5.reviewDecisionContainer,
                              children: [
                                  " ",
                                  "\xb7",
                                  (0, y.jsx)("span", {
                                      className: t5.reviewDecisionContent,
                                      children: l,
                                  }),
                              ],
                          })
                        : (0, y.jsxs)("div", {
                              className: t5.reviewDecisionContainer,
                              children: [
                                  (0, y.jsx)("span", { children: "\xb7" }),
                                  l,
                              ],
                          })
                    : null;
            }
            function t6({ id: e, secondaryQueryRef: a, variant: l }) {
                return a
                    ? (0, y.jsx)(f.Suspense, {
                          fallback: null,
                          children: (0, y.jsx)(t9, {
                              id: e,
                              secondaryQueryRef: a,
                              variant: l,
                          }),
                      })
                    : null;
            }
            function t9({ id: e, secondaryQueryRef: a, variant: l }) {
                let { nodes: n } = (0, er.usePreloadedQuery)(im, a),
                    t = n?.find((a) => a?.id === e);
                return t
                    ? (0, y.jsx)(t8, { secondaryDataKey: t, variant: l })
                    : null;
            }
            function t8({ secondaryDataKey: e, variant: a }) {
                let l = (0, er.useFragment)(tl, e),
                    n = (0, er.useFragment)(t4, l);
                return n?.reviewDecision
                    ? (0, y.jsx)(t7, { decision: n.reviewDecision, variant: a })
                    : null;
            }
            try {
                t7.displayName || (t7.displayName = "ReviewDecision");
            } catch {}
            try {
                t6.displayName || (t6.displayName = "LazyReviewDecision");
            } catch {}
            try {
                t9.displayName ||
                    (t9.displayName = "LazyReviewDecisionFetched");
            } catch {}
            try {
                t8.displayName ||
                    (t8.displayName = "LazyReviewDecisionInternal");
            } catch {}
            function ie({
                dataKey: e,
                repositoryOwner: a,
                repositoryName: l,
                ...n
            }) {
                let { number: t } = (0, er.useFragment)(nX, e),
                    i = `${a}/${l}`,
                    s = { number: `number ${t} `, repo: `In ${i};` },
                    r = (0, y.jsxs)("div", {
                        className: ny.defaultRepoContainer,
                        children: [
                            (0, y.jsx)("span", {
                                children: n.showRepository ? i : "",
                            }),
                            (0, y.jsx)("span", {
                                className: "sr-only",
                                children: s.number,
                            }),
                        ],
                    }),
                    o = (0, y.jsxs)("span", {
                        className: ny.defaultNumberDescription,
                        children: [
                            (0, y.jsxs)("span", { children: ["#", t] }),
                            "\xa0",
                            (0, y.jsx)("span", {
                                className: "sr-only",
                                children: s.repo,
                            }),
                        ],
                    });
                return (0, y.jsx)(ia, {
                    dataKey: e,
                    defaultRepositoryRender: r,
                    defaultMetaRender: o,
                    nameWithOwner: i,
                    repositoryOwner: a,
                    repositoryName: l,
                    ariaLabels: s,
                    ...n,
                });
            }
            let ia = ({
                    dataKey: e,
                    metadataRef: a,
                    showRepository: l = !0,
                    sortingItemSelected: n,
                    statusCheckRollup: t,
                    defaultRepositoryRender: i,
                    defaultMetaRender: s,
                    nameWithOwner: r,
                    ariaLabels: o,
                    getAuthorHref: u,
                    id: d,
                    includeGitDataFromMainQuery: c,
                }) => {
                    let m = (0, er.useFragment)(nX, e),
                        { pull_request_single_subscription: g } = (0, lf.h)(),
                        { variant: p } = (0, nL.e)(),
                        {
                            author: h,
                            reviewDecision: k,
                            closed: f,
                            closedAt: b,
                            createdAt: C,
                            updatedAt: S,
                            stateReason: F,
                        } = m,
                        v = h?.__typename,
                        L = h?.login || n2.t.ghostUserLogin,
                        I = "Bot" === v ? `app/${L}` : L,
                        _ = h?.isCopilot,
                        x = _ ? n2.t.copilotDisplayName : L,
                        K = h?.resourcePath || "",
                        w = (0, nj.S)(L, { isCopilot: _ }),
                        N = C ? new Date(C) : void 0,
                        j = S ? new Date(S) : void 0,
                        R = b ? new Date(b) : void 0;
                    return (0, y.jsxs)(nJ.z, {
                        "data-testid": nI.listRowRepoNameAndNumber,
                        children: [
                            "compact" === p
                                ? l &&
                                  (0, y.jsxs)(y.Fragment, {
                                      children: [
                                          (0, y.jsx)(nY.A, {
                                              title: r,
                                              className:
                                                  t1.repositoryNameTruncate,
                                              children: (0, y.jsx)("span", {
                                                  className:
                                                      ny.compactNameWithOwnerLabel,
                                                  children: r,
                                              }),
                                          }),
                                          (0, y.jsx)("span", {
                                              className: "sr-only",
                                              children: o.number,
                                          }),
                                      ],
                                  })
                                : l && i,
                            s,
                            "default" === p &&
                                (0, y.jsxs)(y.Fragment, {
                                    children: [
                                        f
                                            ? (0, y.jsx)(it, {
                                                  displayName: x,
                                                  authorFullLogin: I,
                                                  resourcePath: K,
                                                  getAuthorHref: u,
                                                  hovercardAttributes: w,
                                                  timestamp: R,
                                                  testId: "closed-at",
                                                  action: il.Closed,
                                              })
                                            : (0, y.jsx)(it, {
                                                  displayName: x,
                                                  authorFullLogin: I,
                                                  resourcePath: K,
                                                  getAuthorHref: u,
                                                  hovercardAttributes: w,
                                                  timestamp: N,
                                                  testId: "created-at",
                                                  action: il.Opened,
                                              }),
                                        (n === l$.RecentlyUpdated ||
                                            "updated" === n) &&
                                            j &&
                                            (0, y.jsxs)("div", {
                                                "data-testid": "updated-at",
                                                className:
                                                    ny.timestampContainer,
                                                children: [
                                                    " ",
                                                    "\xb7 Updated",
                                                    " ",
                                                    (0, y.jsxs)(n1.A, {
                                                        date: j,
                                                        className:
                                                            t1.RelativeTime,
                                                        children: [
                                                            "on ",
                                                            j.toLocaleDateString(
                                                                "en-US",
                                                                {
                                                                    month: "short",
                                                                    day: "numeric",
                                                                    year: "numeric",
                                                                }
                                                            ),
                                                        ],
                                                    }),
                                                ],
                                            }),
                                    ],
                                }),
                            F?.toLowerCase() === "duplicate" &&
                                (0, y.jsxs)("span", {
                                    "data-testid": "state-reason",
                                    children: [" \xb7", " Duplicate"],
                                }),
                            k
                                ? (0, y.jsx)(t7, { decision: k, variant: p })
                                : (0, y.jsx)(t6, {
                                      id: d,
                                      variant: p,
                                      secondaryQueryRef: a,
                                  }),
                            (0, y.jsx)(t3, { data: m }),
                            t
                                ? (0, y.jsx)(tG, {
                                      variant: p,
                                      statusCheckRollup: t,
                                  })
                                : (0, y.jsx)(tZ, {
                                      id: d,
                                      variant: p,
                                      primaryQueryRef: g && c ? e : void 0,
                                      secondaryQueryRef: a,
                                  }),
                        ],
                    });
                },
                il = { Opened: "opened", Closed: "closed" },
                it = ({
                    displayName: e,
                    authorFullLogin: a,
                    resourcePath: l,
                    getAuthorHref: n,
                    hovercardAttributes: t,
                    timestamp: i,
                    testId: s,
                    action: r,
                }) =>
                    (0, y.jsxs)("div", {
                        "data-testid": s,
                        className: ny.timestampContainer,
                        children: [
                            (0, y.jsx)("span", { children: "\xb7 " }),
                            (0, y.jsx)("span", {
                                children: r === il.Closed && " by ",
                            }),
                            (0, y.jsx)(e9.A, {
                                href: n ? n(a) : l,
                                className: ny.authorCreatedLink,
                                ...t,
                                children: e,
                            }),
                            " ",
                            (0, y.jsx)("span", {
                                children:
                                    r === il.Opened
                                        ? " opened "
                                        : " was closed ",
                            }),
                            i &&
                                (0, y.jsxs)(n1.A, {
                                    date: i,
                                    children: [
                                        "on ",
                                        i.toLocaleDateString("en-US", {
                                            month: "short",
                                            day: "numeric",
                                            year: "numeric",
                                        }),
                                    ],
                                }),
                        ],
                    });
            try {
                ie.displayName ||
                    (ie.displayName = "IssuePullRequestDescription");
            } catch {}
            try {
                ia.displayName ||
                    (ia.displayName = "IssuePullRequestDescriptionItem");
            } catch {}
            try {
                it.displayName || (it.displayName = "TimestampContainer");
            } catch {}
            let ii = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueTypeIndicator",
                selections: [
                    {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "issueType",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "id",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "color",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            ii.hash = "dad417bd99b3d4b49eae2364363cde61";
            var is = l(94672);
            let ir = {
                    container: "IssueTypeIndicator-module__container--SSkfA",
                },
                io = ({ dataKey: e, getIssueTypeHref: a }) => {
                    let { issueType: l } = (0, er.useFragment)(ii, e);
                    return l?.id && l?.name
                        ? (0, y.jsx)("div", {
                              className: ir.container,
                              children: (0, y.jsx)(is.n, {
                                  name: l.name,
                                  color: l.color,
                                  href: a(l.name),
                                  getTooltipText: (e) => (e ? l.name : void 0),
                              }),
                          })
                        : null;
                };
            try {
                io.displayName || (io.displayName = "IssueTypeIndicator");
            } catch {}
            let iu = ({
                itemKey: e,
                metadataRef: a,
                isSelected: l,
                isActive: n = !1,
                showCommentCount: t,
                showCommentZeroCount: i,
                showAssignees: s = !0,
                showRepository: r = !0,
                onSelect: o = v.l,
                onFocus: u = v.l,
                onClick: d = v.l,
                getMetadataHref: c,
                getAdditiveMetadataHref: m,
                reactionEmojiToDisplay: g,
                sortingItemSelected: p,
                ref: k,
                href: f,
                repositoryOwner: b,
                repositoryName: C,
                as: S,
                role: F,
            }) => {
                let L = (0, er.useFragment)(no, e),
                    I = L && (0, nu.us)(L.title, L.titleHtml),
                    _ = (0, y.jsx)(tq, {
                        value: I,
                        dataKey: L,
                        metadataRef: a,
                        repositoryOwner: b,
                        repositoryName: C,
                        ref: k,
                        href: f,
                        onClick: d,
                        getLabelHref: (e) => c(np.label, e),
                        getSubIssuesHref: (e, a, l) =>
                            c(np["parent-issue"], `${e}/${a}#${l}`),
                    }),
                    x = (0, y.jsx)(ie, {
                        repositoryOwner: b,
                        repositoryName: C,
                        dataKey: L,
                        showRepository: r,
                        sortingItemSelected: p,
                        getAuthorHref: (e) => c("author", e),
                        id: L.id,
                    }),
                    K = (0, y.jsx)(nO, {
                        issueId: L.id,
                        metadataRef: a,
                        getMetadataHref: c,
                        showAssignees: s,
                        reactionEmojiToDisplay: g,
                        showCommentCount: t,
                        showCommentZeroCount: i,
                        showLinkedPullRequests: !0,
                    }),
                    w = (0, h.G7)("issue_dependencies_issue_index_pill_click")
                        ? m(np.is, "blocked")
                        : void 0;
                return (0, y.jsxs)(
                    nd.c,
                    {
                        title: _,
                        isSelected: l,
                        isActive: n,
                        onSelect: o,
                        onFocus: u,
                        metadata: K,
                        metadataContainerClassName: ny.ListItem_0,
                        role: F || "listitem",
                        as: S,
                        children: [
                            (0, y.jsx)(nW, { metadataRef: a, issueId: L.id }),
                            (0, y.jsx)(nm.B, {
                                className: ny.leadingContent,
                                children: (0, y.jsx)(tk, { dataKey: L }),
                            }),
                            (0, y.jsx)(ng.Q, {
                                children: (0, y.jsxs)(nc.U, {
                                    children: [
                                        (0, y.jsx)(io, {
                                            dataKey: L,
                                            getIssueTypeHref: (e) =>
                                                c("type", e),
                                        }),
                                        (0, y.jsx)(nb, {
                                            metadataRef: a,
                                            issueId: L.id,
                                            href: w,
                                        }),
                                        x,
                                    ],
                                }),
                            }),
                        ],
                    },
                    L.id
                );
            };
            iu.nodeType = "issue";
            try {
                iu.displayName || (iu.displayName = "IssueItem");
            } catch {}
            let id = { row: "IssueRow-module__row--XmR1f" },
                ic = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "issueId",
                            },
                        ],
                        a = [
                            {
                                kind: "Variable",
                                name: "id",
                                variableName: "issueId",
                            },
                        ],
                        l = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "titleHTML",
                            storageKey: null,
                        },
                        t = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        i = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "stateReason",
                            storageKey: null,
                        },
                        s = [{ kind: "Literal", name: "first", value: 10 }],
                        r = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        o = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closed",
                            storageKey: null,
                        },
                        u = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        d = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        c = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        m = [
                            r,
                            l,
                            o,
                            u,
                            d,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "viewerCanUpdate",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "hasReachedItemsLimit",
                                storageKey: null,
                            },
                            c,
                        ],
                        g = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        p = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        y = [
                            { kind: "Literal", name: "first", value: 20 },
                            {
                                kind: "Literal",
                                name: "orderBy",
                                value: { direction: "ASC", field: "NAME" },
                            },
                        ],
                        h = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "cursor",
                            storageKey: null,
                        },
                        k = {
                            alias: null,
                            args: null,
                            concreteType: "PageInfo",
                            kind: "LinkedField",
                            name: "pageInfo",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "endCursor",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "hasNextPage",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        f = [
                            u,
                            {
                                alias: null,
                                args: y,
                                concreteType: "LabelConnection",
                                kind: "LinkedField",
                                name: "labels",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "LabelEdge",
                                        kind: "LinkedField",
                                        name: "edges",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Label",
                                                kind: "LinkedField",
                                                name: "node",
                                                plural: !1,
                                                selections: [
                                                    r,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "nameHTML",
                                                        storageKey: null,
                                                    },
                                                    p,
                                                    g,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "description",
                                                        storageKey: null,
                                                    },
                                                    c,
                                                ],
                                                storageKey: null,
                                            },
                                            h,
                                        ],
                                        storageKey: null,
                                    },
                                    k,
                                ],
                                storageKey:
                                    'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                            },
                            {
                                alias: null,
                                args: y,
                                filters: ["orderBy"],
                                handle: "connection",
                                key: "Labels_labels",
                                kind: "LinkedHandle",
                                name: "labels",
                            },
                        ],
                        b = [r];
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "IssueRowSubscription",
                            selections: [
                                {
                                    alias: null,
                                    args: a,
                                    concreteType: "IssueUpdatedPayload",
                                    kind: "LinkedField",
                                    name: "issueUpdated",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueTitleUpdated",
                                            plural: !1,
                                            selections: [l, n],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueStateUpdated",
                                            plural: !1,
                                            selections: [t, i],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueTypeUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "IssueTypeIndicator",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueMetadataUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: [
                                                        {
                                                            kind: "Literal",
                                                            name: "labelPageSize",
                                                            value: 20,
                                                        },
                                                    ],
                                                    kind: "FragmentSpread",
                                                    name: "IssuePullRequestTitle",
                                                },
                                                {
                                                    args: [
                                                        {
                                                            kind: "Literal",
                                                            name: "assigneePageSize",
                                                            value: 10,
                                                        },
                                                    ],
                                                    kind: "FragmentSpread",
                                                    name: "Assignees",
                                                },
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "MilestonesSectionMilestone",
                                                },
                                                {
                                                    alias: null,
                                                    args: s,
                                                    concreteType:
                                                        "ProjectV2ItemConnection",
                                                    kind: "LinkedField",
                                                    name: "projectItemsNext",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "ProjectV2ItemEdge",
                                                            kind: "LinkedField",
                                                            name: "edges",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "ProjectV2Item",
                                                                    kind: "LinkedField",
                                                                    name: "node",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            r,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    "ProjectV2",
                                                                                kind: "LinkedField",
                                                                                name: "project",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            kind: "InlineDataFragmentSpread",
                                                                                            name: "ProjectPickerProject",
                                                                                            selections:
                                                                                                m,
                                                                                            args: null,
                                                                                            argumentDefinitions:
                                                                                                [],
                                                                                        },
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey:
                                                        "projectItemsNext(first:10)",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "EventSubscription",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "IssueRowSubscription",
                            selections: [
                                {
                                    alias: null,
                                    args: a,
                                    concreteType: "IssueUpdatedPayload",
                                    kind: "LinkedField",
                                    name: "issueUpdated",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueTitleUpdated",
                                            plural: !1,
                                            selections: [l, n, r],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueStateUpdated",
                                            plural: !1,
                                            selections: [t, i, r],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueTypeUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "IssueType",
                                                    kind: "LinkedField",
                                                    name: "issueType",
                                                    plural: !1,
                                                    selections: [r, g, p],
                                                    storageKey: null,
                                                },
                                                r,
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueMetadataUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "Milestone",
                                                    kind: "LinkedField",
                                                    name: "milestone",
                                                    plural: !1,
                                                    selections: [
                                                        r,
                                                        l,
                                                        o,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "dueOn",
                                                            storageKey: null,
                                                        },
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "progressPercentage",
                                                            storageKey: null,
                                                        },
                                                        d,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "closedAt",
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: s,
                                                    concreteType:
                                                        "ProjectV2ItemConnection",
                                                    kind: "LinkedField",
                                                    name: "projectItemsNext",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "ProjectV2ItemEdge",
                                                            kind: "LinkedField",
                                                            name: "edges",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "ProjectV2Item",
                                                                    kind: "LinkedField",
                                                                    name: "node",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            r,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    "ProjectV2",
                                                                                kind: "LinkedField",
                                                                                name: "project",
                                                                                plural: !1,
                                                                                selections:
                                                                                    m,
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey:
                                                        "projectItemsNext(first:10)",
                                                },
                                                r,
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [
                                                        c,
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: f,
                                                            type: "Issue",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: f,
                                                            type: "PullRequest",
                                                            abstractKey: null,
                                                        },
                                                    ],
                                                    type: "IssueOrPullRequest",
                                                    abstractKey:
                                                        "__isIssueOrPullRequest",
                                                },
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: s,
                                                            concreteType:
                                                                "AssigneeConnection",
                                                            kind: "LinkedField",
                                                            name: "assignedActors",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "AssigneeEdge",
                                                                    kind: "LinkedField",
                                                                    name: "edges",
                                                                    plural: !0,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    null,
                                                                                kind: "LinkedField",
                                                                                name: "node",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        c,
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                b,
                                                                                            type: "User",
                                                                                            abstractKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                b,
                                                                                            type: "Bot",
                                                                                            abstractKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                [
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "login",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: [
                                                                                                            {
                                                                                                                kind: "Literal",
                                                                                                                name: "size",
                                                                                                                value: 64,
                                                                                                            },
                                                                                                        ],
                                                                                                        kind: "ScalarField",
                                                                                                        name: "avatarUrl",
                                                                                                        storageKey:
                                                                                                            "avatarUrl(size:64)",
                                                                                                    },
                                                                                                    {
                                                                                                        kind: "InlineFragment",
                                                                                                        selections:
                                                                                                            [
                                                                                                                {
                                                                                                                    alias: null,
                                                                                                                    args: null,
                                                                                                                    kind: "ScalarField",
                                                                                                                    name: "isCopilot",
                                                                                                                    storageKey:
                                                                                                                        null,
                                                                                                                },
                                                                                                            ],
                                                                                                        type: "Bot",
                                                                                                        abstractKey:
                                                                                                            null,
                                                                                                    },
                                                                                                ],
                                                                                            type: "Actor",
                                                                                            abstractKey:
                                                                                                "__isActor",
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                b,
                                                                                            type: "Node",
                                                                                            abstractKey:
                                                                                                "__isNode",
                                                                                        },
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            h,
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                k,
                                                            ],
                                                            storageKey:
                                                                "assignedActors(first:10)",
                                                        },
                                                        {
                                                            alias: null,
                                                            args: s,
                                                            filters: null,
                                                            handle: "connection",
                                                            key: "IssueAssignees_assignedActors",
                                                            kind: "LinkedHandle",
                                                            name: "assignedActors",
                                                        },
                                                        {
                                                            kind: "TypeDiscriminator",
                                                            abstractKey:
                                                                "__isNode",
                                                        },
                                                    ],
                                                    type: "Assignable",
                                                    abstractKey:
                                                        "__isAssignable",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "b46bf2f7c5a5f21c6b4c88d84c3bc55f",
                            metadata: {},
                            name: "IssueRowSubscription",
                            operationKind: "subscription",
                            text: null,
                        },
                    };
                })();
            ic.hash = "7dcca82772307ea7652904e3c947800b";
            let im = c,
                ig = (0, f.forwardRef)(
                    (
                        {
                            isActive: e,
                            isSelected: a,
                            issueKey: l,
                            scopedRepository: n,
                            getMetadataHref: t,
                            getAdditiveMetadataHref: i,
                            onSelect: s,
                            onNavigate: r,
                            onSidePanelNavigate: o,
                            onSelectRow: u,
                            reactionEmojiToDisplay: d,
                            sortingItemSelected: c,
                            metadataRef: m,
                            ...g
                        },
                        p
                    ) => {
                        let h = (0, ly.useFragment)(ni, l),
                            k = (0, ly.useFragment)(no, h);
                        (0, ns.M3)() &&
                            ((e) => {
                                let a = (0, f.useMemo)(
                                    () => ({
                                        subscription: ic,
                                        variables: { issueId: e },
                                    }),
                                    [e]
                                );
                                (0, er.useSubscription)(a);
                            })(k.id);
                        let b = n ? n.owner : h.repository?.owner.login || "",
                            C = n ? n.name : h.repository?.name || "",
                            S = (0, lk.$9)({
                                owner: b,
                                repo: C,
                                number: h.number,
                            }),
                            F = (0, f.useCallback)(() => {
                                o
                                    ? o({
                                          number: h.number,
                                          repo: C,
                                          owner: b,
                                          type: "Issue",
                                      })
                                    : r(S);
                            }, [o, h.number, C, b, r, S]),
                            v = (0, f.useCallback)(
                                (e) => {
                                    (u({ type: k.__typename }),
                                        e.ctrlKey ||
                                            e.metaKey ||
                                            (e.stopPropagation(),
                                            e.preventDefault(),
                                            F()));
                                },
                                [k.__typename, F, u]
                            ),
                            L = (0, f.useCallback)(() => {
                                s?.(!a);
                            }, [s, a]);
                        return (0, y.jsx)(nr.tL, {
                            commands: {
                                "list-view-items-issues-prs:open-focused-item":
                                    F,
                                "list-view-items-issues-prs:toggle-focused-item-selection":
                                    L,
                            },
                            className: id.row,
                            children: (0, y.jsx)(iu, {
                                isActive: e,
                                itemKey: h,
                                metadataRef: m,
                                isSelected: a,
                                reactionEmojiToDisplay: d,
                                showCommentCount: !0,
                                showRepository: !n,
                                repositoryOwner: b,
                                repositoryName: C,
                                showAssignees: !0,
                                showLeadingRightSideContent: !1,
                                sortingItemSelected: c,
                                getMetadataHref: t,
                                getAdditiveMetadataHref: i,
                                onSelect: s,
                                onClick: v,
                                href: S,
                                ref: p,
                                ...g,
                            }),
                        });
                    }
                );
            ig.displayName = "IssueRowInternal";
            let ip = f.memo(ig);
            try {
                ip.displayName || (ip.displayName = "IssueRow");
            } catch {}
            let iy = ({ id: e, ariaLabel: a }) =>
                (0, y.jsxs)("div", {
                    id: e,
                    className: "blankslate",
                    role: "region",
                    "aria-label": a,
                    "aria-live": "polite",
                    "aria-atomic": "true",
                    children: [
                        (0, y.jsx)("h3", {
                            className: "blankslate-heading",
                            children: l$.noResultsTitle,
                        }),
                        (0, y.jsx)("p", { children: l$.noResultsDescription }),
                    ],
                });
            try {
                iy.displayName || (iy.displayName = "NoResults");
            } catch {}
            var ih = l(70179),
                ik = l(64334),
                ib = l(10569);
            let iC = {
                    sortingMenuButton:
                        "sorting-dropdown-module__sortingMenuButton--awYjR",
                },
                iS = /(created|updated|comments|reactions|relevance?)/,
                iF = { asc: P.SortAscIcon, desc: P.SortDescIcon },
                iv = {
                    ...l$.sortDropdownOptionDisplayValues,
                    ...l$.sortDropdownReactionLabels,
                    reactions: l$.totalReactions,
                };
            function iL({
                activeSearchQuery: e,
                dirtySearchQuery: a,
                setReactionEmojiToDisplay: l,
                setSortingItemSelected: n,
                searchUrl: t,
                setCurrentPage: i,
                nested: s = !1,
            }) {
                var r, o;
                let u = (0, f.useMemo)(() => l2(e).get("sort")?.[0] || "", [e]),
                    [d, c] = (0, f.useState)(() => ix(u)),
                    [m, g] = (0, f.useState)(() => iK(u)),
                    p = (0, e7.Z)(),
                    h = (0, f.useCallback)(
                        (e, l) => {
                            var n, s;
                            (p(
                                t(
                                    ((n = a || ""),
                                    (s = `${l$.sortKeyToQuery[e]}-${l}`),
                                    n
                                        .replace(/\bsort\S+/gi, "")
                                        .concat(` ${s}`)
                                        .replaceAll("  ", " "))
                                )
                            ),
                                i(1));
                        },
                        [a, p, t, i]
                    ),
                    k = (0, f.useCallback)(
                        (e) => {
                            let a = i_(e),
                                t = ik.qG[a || ""];
                            a &&
                                t &&
                                (n(e), l({ reaction: a, reactionEmoji: t }));
                        },
                        [l, n]
                    ),
                    b = (0, f.useCallback)(
                        (e, a) => {
                            (n(e),
                                "relevance" === a && "asc" === d
                                    ? (c("desc"), h(a, "desc"))
                                    : h(a, d));
                        },
                        [d, h, n]
                    ),
                    C = (0, f.useCallback)(
                        (e) => {
                            ("asc" === d && c("desc"), h(e, "desc"), k(e));
                        },
                        [d, h, k]
                    ),
                    S = (0, f.useCallback)(
                        (e) => {
                            m && (c(e), n(iv[m]), h(m, e));
                        },
                        [h, m, n]
                    );
                (0, f.useEffect)(() => {
                    (c(ix(u)), g(iK(u)));
                    let e = iI(u);
                    (n(e), k(e));
                }, [l, n, u, k]);
                let F = Object.entries(l$.sortDropdownOptionDisplayValues),
                    v = Object.entries(l$.sortDropdownReactionLabels),
                    L = iN(m) || "relevance" === m,
                    I = (0, y.jsxs)(y.Fragment, {
                        children: [
                            (0, y.jsx)(
                                lQ.l.Item,
                                {
                                    onSelect: () =>
                                        b(l$.totalReactions, "reactions"),
                                    selected: "reactions" === m,
                                    role: "menuitemradio",
                                    children: l$.totalReactions,
                                },
                                "reactions"
                            ),
                            (0, y.jsx)(lQ.l.Divider, {}),
                            v.map(([e, a]) =>
                                (0, y.jsxs)(
                                    lQ.l.Item,
                                    {
                                        onSelect: () => C(e),
                                        selected: m === e,
                                        role: "menuitemradio",
                                        children: [
                                            (0, y.jsx)(lQ.l.LeadingVisual, {
                                                children: ik.qG[i_(e) || ""],
                                            }),
                                            a,
                                        ],
                                    },
                                    e
                                )
                            ),
                        ],
                    }),
                    _ = (0, y.jsxs)(y.Fragment, {
                        children: [
                            (0, y.jsxs)(lQ.l.Group, {
                                children: [
                                    (0, y.jsx)(lQ.l.GroupHeading, {
                                        children: "Sort by",
                                    }),
                                    F.map(([e, a]) =>
                                        (0, y.jsx)(
                                            lQ.l.Item,
                                            {
                                                onSelect: () => b(a, e),
                                                selected: m === e,
                                                role: "menuitemradio",
                                                children: a,
                                            },
                                            e
                                        )
                                    ),
                                    (0, y.jsxs)(ib.W, {
                                        children: [
                                            (0, y.jsx)(ib.W.Anchor, {
                                                children: (0, y.jsx)(
                                                    lQ.l.Item,
                                                    {
                                                        selected:
                                                            iN(m) ||
                                                            "reactions" === m,
                                                        children: l$.reactions,
                                                    }
                                                ),
                                            }),
                                            (0, y.jsx)(ib.W.Overlay, {
                                                children: (0, y.jsx)(lQ.l, {
                                                    selectionVariant: "single",
                                                    children: I,
                                                }),
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                            (0, y.jsx)(lQ.l.Divider, {}),
                            (0, y.jsxs)(lQ.l.Group, {
                                children: [
                                    (0, y.jsx)(lQ.l.GroupHeading, {
                                        children: "Order",
                                    }),
                                    (0, y.jsxs)(
                                        lQ.l.Item,
                                        {
                                            disabled: L,
                                            selected: "asc" === d && null !== m,
                                            onSelect: () => S("asc"),
                                            children: [
                                                (0, y.jsx)(lQ.l.LeadingVisual, {
                                                    children: (0, y.jsx)(
                                                        P.SortAscIcon,
                                                        {}
                                                    ),
                                                }),
                                                iw(m, "asc"),
                                            ],
                                        },
                                        "ascending"
                                    ),
                                    (0, y.jsxs)(
                                        lQ.l.Item,
                                        {
                                            disabled: L,
                                            selected:
                                                "desc" === d && null !== m,
                                            onSelect: () => S("desc"),
                                            children: [
                                                (0, y.jsx)(lQ.l.LeadingVisual, {
                                                    children: (0, y.jsx)(
                                                        P.SortDescIcon,
                                                        {}
                                                    ),
                                                }),
                                                iw(m, "desc"),
                                            ],
                                        },
                                        "descending"
                                    ),
                                ],
                            }),
                        ],
                    });
                return s
                    ? (0, y.jsx)(ih.t, {
                          fallback: null,
                          children: (0, y.jsx)(lQ.l, {
                              selectionVariant: "single",
                              "aria-labelledby": "",
                              "aria-label": "Sort",
                              children: _,
                          }),
                      })
                    : (0, y.jsxs)(ib.W, {
                          children: [
                              (0, y.jsxs)(ib.W.Button, {
                                  variant: "invisible",
                                  className: iC.sortingMenuButton,
                                  leadingVisual: iF[d || "desc"],
                                  children: [
                                      ij(m ?? "")
                                          ? (0, y.jsx)("span", {
                                                className: "sr-only",
                                                children: "Sort by ",
                                            })
                                          : null,
                                      (0, y.jsx)(y.Fragment, {
                                          children: m
                                              ? ((r = m),
                                                (o = d || "desc"),
                                                "created" === r
                                                    ? l$
                                                          .sortDropdownMenuButtonLabels[
                                                          r
                                                      ][o]
                                                    : l$
                                                          .sortDropdownMenuButtonLabels[
                                                          r
                                                      ])
                                              : l$.sort,
                                      }),
                                      ij(m ?? "")
                                          ? (0, y.jsx)("span", {
                                                className: "sr-only",
                                                children:
                                                    "asc" === d
                                                        ? ", ascending"
                                                        : ", descending",
                                            })
                                          : null,
                                  ],
                              }),
                              (0, y.jsx)(ib.W.Overlay, {
                                  children: (0, y.jsx)(lQ.l, {
                                      selectionVariant: "single",
                                      children: _,
                                  }),
                              }),
                          ],
                      });
            }
            function iI(e) {
                let a = iK(e);
                return a || "relevance";
            }
            function i_(e) {
                var a;
                let l = iv[e]?.replace(" ", "_").toUpperCase();
                return ((a = l), Object.keys(ik.qG).includes(a)) ? l : void 0;
            }
            function ix(e) {
                let a = e.split("-")?.[1];
                return "asc" === a || "desc" === a ? a : "desc";
            }
            function iK(e) {
                if (!e) return "created";
                let a = e.match(iS)?.[0];
                return (
                    "reactions" === a &&
                        (a =
                            e
                                .split(/-asc|-desc/)?.[0]
                                ?.split("reactions-")?.[1] || "reactions"),
                    ij(a) ? a : null
                );
            }
            function iw(e, a) {
                return "created" === e || "updated" === e
                    ? "asc" === a
                        ? l$.Oldest
                        : l$.Newest
                    : "asc" === a
                      ? l$.ascending
                      : l$.descending;
            }
            function iN(e) {
                return !!e && l$.sortDropdownReactionLabels.hasOwnProperty(e);
            }
            function ij(e) {
                return !!e && Object.keys(iv).includes(e);
            }
            try {
                iS.displayName || (iS.displayName = "SORT_KEY_MATCHING_REGEX");
            } catch {}
            try {
                iL.displayName || (iL.displayName = "SortingDropdown");
            } catch {}
            var iR = l(27911),
                iT = l(33299),
                iP = l(23812),
                iA = l(63654),
                iM = l(89992);
            let iD = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    a = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = [{ kind: "Literal", name: "first", value: 10 }],
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    i = [
                        l,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closed",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanUpdate",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "hasReachedItemsLimit",
                            storageKey: null,
                        },
                        t,
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "AddToProjectsBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            l,
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType:
                                                    "ProjectV2ItemConnection",
                                                kind: "LinkedField",
                                                name: "projectItemsNext",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "ProjectV2ItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "ProjectV2Item",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    l,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "ProjectV2",
                                                                        kind: "LinkedField",
                                                                        name: "project",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    kind: "InlineDataFragmentSpread",
                                                                                    name: "ProjectPickerProject",
                                                                                    selections:
                                                                                        i,
                                                                                    args: null,
                                                                                    argumentDefinitions:
                                                                                        [],
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "projectItemsNext(first:10)",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "AddToProjectsBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    t,
                                    l,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType:
                                                    "ProjectV2ItemConnection",
                                                kind: "LinkedField",
                                                name: "projectItemsNext",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "ProjectV2ItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "ProjectV2Item",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    l,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "ProjectV2",
                                                                        kind: "LinkedField",
                                                                        name: "project",
                                                                        plural: !1,
                                                                        selections:
                                                                            i,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "projectItemsNext(first:10)",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "1cf21e5a3f96ff6db54ab38231a0c4a4",
                        metadata: {},
                        name: "AddToProjectsBulkActionQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            iD.hash = "1f38ee998f132ed1bd71d25024e0b71a";
            var iV = l(21728);
            let iE = (e) => {
                    let a,
                        l,
                        n,
                        t,
                        i,
                        s = (0, iV.c)(14);
                    s[0] !== e
                        ? (({ disabled: n, nested: a, ...l } = e),
                          (s[0] = e),
                          (s[1] = a),
                          (s[2] = l),
                          (s[3] = n))
                        : ((a = s[1]), (l = s[2]), (n = s[3]));
                    let r = void 0 !== n && n,
                        [o, u] = (0, f.useState)(!1);
                    s[4] !== r || s[5] !== a
                        ? ((t = (e) =>
                              a
                                  ? (0, y.jsxs)(lQ.l.Item, {
                                        disabled: r,
                                        ...e,
                                        role: "menuitem",
                                        children: [
                                            (0, y.jsx)(lQ.l.LeadingVisual, {
                                                children: (0, y.jsx)(
                                                    P.ProjectSymlinkIcon,
                                                    {}
                                                ),
                                            }),
                                            "Project",
                                        ],
                                    })
                                  : (0, y.jsx)(lT.Q, {
                                        "data-testid":
                                            "bulk-add-to-project-button",
                                        disabled: r,
                                        leadingVisual: P.ProjectSymlinkIcon,
                                        trailingVisual: P.TriangleDownIcon,
                                        ...e,
                                        children: "Project",
                                    })),
                          (s[4] = r),
                          (s[5] = a),
                          (s[6] = t))
                        : (t = s[6]);
                    let d = t;
                    if (!o) {
                        let e, a;
                        return (
                            s[7] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = () => {
                                      u(!0);
                                  }),
                                  (s[7] = e))
                                : (e = s[7]),
                            s[8] !== d
                                ? ((a = d({ onClick: e })),
                                  (s[8] = d),
                                  (s[9] = a))
                                : (a = s[9]),
                            a
                        );
                    }
                    return (
                        s[10] !== d || s[11] !== r || s[12] !== l
                            ? ((i = (0, y.jsx)(iq, {
                                  disabled: r,
                                  anchorElement: d,
                                  ...l,
                              })),
                              (s[10] = d),
                              (s[11] = r),
                              (s[12] = l),
                              (s[13] = i))
                            : (i = s[13]),
                        i
                    );
                },
                iq = (e) => {
                    let a,
                        l,
                        n,
                        t,
                        i,
                        s,
                        r,
                        o,
                        u,
                        d,
                        c,
                        m,
                        g = (0, iV.c)(35),
                        {
                            issuesToActOn: p,
                            repositoryId: h,
                            anchorElement: k,
                            useQueryForAction: f,
                            query: b,
                            onCompleted: C,
                            onError: S,
                            nested: F,
                            owner: v,
                            repo: L,
                        } = e;
                    (g[0] !== p
                        ? ((a = { ids: p }), (g[0] = p), (g[1] = a))
                        : (a = g[1]),
                        g[2] === Symbol.for("react.memo_cache_sentinel")
                            ? ((l = { fetchPolicy: "store-or-network" }),
                              (g[2] = l))
                            : (l = g[2]));
                    let { nodes: I } = (0, er.useLazyLoadQuery)(iD, a, l);
                    if (
                        g[3] !== p ||
                        g[4] !== b ||
                        g[5] !== h ||
                        g[6] !== I ||
                        g[7] !== f
                    ) {
                        let e,
                            a = new Map();
                        g[17] !== I
                            ? ((e = I || []), (g[17] = I), (g[18] = e))
                            : (e = g[18]);
                        let l = e.map((e) => {
                                let l = e?.id;
                                return l
                                    ? ((e.projectItemsNext?.edges || [])
                                          .flatMap(iO)
                                          .map((e) => {
                                              let n = a.get(l) || [];
                                              return (
                                                  n.push(e.id),
                                                  a.set(l, n),
                                                  {
                                                      issueId: l,
                                                      projectId: e.id,
                                                      projectNode: e,
                                                  }
                                              );
                                          }) ?? [])
                                    : [];
                            }),
                            m = {};
                        for (let e of l)
                            for (let a of e)
                                a.projectId in m ||
                                    (l.every((e) =>
                                        e.some(
                                            (e) => e.projectId === a.projectId
                                        )
                                    ) &&
                                        (m[a.projectId] = a.projectNode));
                        ((n = aT.k$),
                            (i = "add-to-projects-project-picker"),
                            (s = p),
                            (r = h),
                            (o = !1),
                            (u = !0),
                            (d = b),
                            (c = f),
                            (t = Object.values(m)),
                            (g[3] = p),
                            (g[4] = b),
                            (g[5] = h),
                            (g[6] = I),
                            (g[7] = f),
                            (g[8] = n),
                            (g[9] = t),
                            (g[10] = i),
                            (g[11] = s),
                            (g[12] = r),
                            (g[13] = o),
                            (g[14] = u),
                            (g[15] = d),
                            (g[16] = c));
                    } else
                        ((n = g[8]),
                            (t = g[9]),
                            (i = g[10]),
                            (s = g[11]),
                            (r = g[12]),
                            (o = g[13]),
                            (u = g[14]),
                            (d = g[15]),
                            (c = g[16]));
                    return (
                        g[19] !== n ||
                        g[20] !== k ||
                        g[21] !== F ||
                        g[22] !== C ||
                        g[23] !== S ||
                        g[24] !== v ||
                        g[25] !== L ||
                        g[26] !== t ||
                        g[27] !== i ||
                        g[28] !== s ||
                        g[29] !== r ||
                        g[30] !== o ||
                        g[31] !== u ||
                        g[32] !== d ||
                        g[33] !== c
                            ? ((m = (0, y.jsx)(n, {
                                  pickerId: i,
                                  issueIds: s,
                                  repositoryId: r,
                                  readonly: o,
                                  triggerOpen: u,
                                  query: d,
                                  useQueryForAction: c,
                                  selectedProjects: t,
                                  onCompleted: C,
                                  onError: S,
                                  nested: F,
                                  anchorElement: k,
                                  owner: v,
                                  repo: L,
                              })),
                              (g[19] = n),
                              (g[20] = k),
                              (g[21] = F),
                              (g[22] = C),
                              (g[23] = S),
                              (g[24] = v),
                              (g[25] = L),
                              (g[26] = t),
                              (g[27] = i),
                              (g[28] = s),
                              (g[29] = r),
                              (g[30] = o),
                              (g[31] = u),
                              (g[32] = d),
                              (g[33] = c),
                              (g[34] = m))
                            : (m = g[34]),
                        m
                    );
                };
            try {
                iE.displayName || (iE.displayName = "AddToProjectsBulkAction");
            } catch {}
            try {
                iq.displayName || (iq.displayName = "LazyBulkProjectPicker");
            } catch {}
            function iO(e) {
                return e?.node ? [(0, aT.Kx)(e?.node.project)] : [];
            }
            let iB = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    a = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = [{ kind: "Literal", name: "first", value: 10 }],
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    u = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        concreteType: "RepositoryPlanFeatures",
                        kind: "LinkedField",
                        name: "planFeatures",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "maximumAssignees",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ApplyAssigneesBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            l,
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType:
                                                    "AssigneeConnection",
                                                kind: "LinkedField",
                                                name: "assignedActors",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "AssigneeEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        kind: "InlineDataFragmentSpread",
                                                                        name: "AssigneePickerAssignee",
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            t,
                                                                                            l,
                                                                                            i,
                                                                                            s,
                                                                                            r,
                                                                                            o,
                                                                                            u,
                                                                                        ],
                                                                                    type: "Actor",
                                                                                    abstractKey:
                                                                                        "__isActor",
                                                                                },
                                                                            ],
                                                                        args: null,
                                                                        argumentDefinitions:
                                                                            [],
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "assignedActors(first:10)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [d],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ApplyAssigneesBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    t,
                                    l,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType:
                                                    "AssigneeConnection",
                                                kind: "LinkedField",
                                                name: "assignedActors",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "AssigneeEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    t,
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                l,
                                                                                i,
                                                                                s,
                                                                                r,
                                                                                o,
                                                                                u,
                                                                            ],
                                                                        type: "Actor",
                                                                        abstractKey:
                                                                            "__isActor",
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [l],
                                                                        type: "Node",
                                                                        abstractKey:
                                                                            "__isNode",
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "assignedActors(first:10)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [d, l],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "e835ff7d276ebe0103ec4af4b397442d",
                        metadata: {},
                        name: "ApplyAssigneesBulkActionQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            iB.hash = "aa3a29608e04e6c971477f59bd1a947c";
            let i$ = (e) => {
                    let a,
                        l,
                        n,
                        t,
                        i,
                        s,
                        r,
                        o,
                        u,
                        d,
                        c = (0, iV.c)(20);
                    (c[0] !== e
                        ? (({ issueIds: a, ...l } = e),
                          (c[0] = e),
                          (c[1] = a),
                          (c[2] = l))
                        : ((a = c[1]), (l = c[2])),
                        c[3] !== a
                            ? ((n = { ids: a }), (c[3] = a), (c[4] = n))
                            : (n = c[4]),
                        c[5] === Symbol.for("react.memo_cache_sentinel")
                            ? ((t = { fetchPolicy: "store-only" }), (c[5] = t))
                            : (t = c[5]));
                    let { nodes: m } = (0, er.useLazyLoadQuery)(iB, n, t);
                    if (c[6] !== m) {
                        let e = new Map(),
                            a = new Map(),
                            l = (m || []).map((l) => {
                                let n = l?.id;
                                return n
                                    ? ((l.assignedActors?.edges || [])
                                          .flatMap(iU)
                                          .map((l) => {
                                              a.set(l.id, l);
                                              let t = e.get(n) || [];
                                              return (
                                                  t.push(l.id),
                                                  e.set(n, t),
                                                  {
                                                      issueId: n,
                                                      assigneeId: l.id,
                                                      assigneeNode: l,
                                                  }
                                              );
                                          }) ?? [])
                                    : [];
                            }),
                            n = {},
                            t = {};
                        for (let e of l)
                            for (let a of e)
                                a.assigneeId in n ||
                                    (l.every((e) =>
                                        e.some(
                                            (e) => e.assigneeId === a.assigneeId
                                        )
                                    )
                                        ? (n[a.assigneeId] = a.assigneeNode)
                                        : (t[a.assigneeId] = a.assigneeNode));
                        ((i = iQ),
                            (s = e),
                            (r = [...a.values()]),
                            (o = Object.values(n)),
                            (u = Object.values(t)),
                            (c[6] = m),
                            (c[7] = i),
                            (c[8] = s),
                            (c[9] = r),
                            (c[10] = o),
                            (c[11] = u));
                    } else
                        ((i = c[7]),
                            (s = c[8]),
                            (r = c[9]),
                            (o = c[10]),
                            (u = c[11]));
                    let g =
                        m?.[0]?.repository?.planFeatures?.maximumAssignees ??
                        void 0;
                    return (
                        c[12] !== i ||
                        c[13] !== l ||
                        c[14] !== s ||
                        c[15] !== r ||
                        c[16] !== o ||
                        c[17] !== u ||
                        c[18] !== g
                            ? ((d = (0, y.jsx)(i, {
                                  existingIssueAssignees: s,
                                  suggestions: r,
                                  assigneesAppliedToAll: o,
                                  assigneesAppliedToSome: u,
                                  maximumAssignees: g,
                                  ...l,
                              })),
                              (c[12] = i),
                              (c[13] = l),
                              (c[14] = s),
                              (c[15] = r),
                              (c[16] = o),
                              (c[17] = u),
                              (c[18] = g),
                              (c[19] = d))
                            : (d = c[19]),
                        d
                    );
                },
                iQ = (e) => {
                    let a,
                        l,
                        n,
                        t,
                        i,
                        s,
                        r,
                        o,
                        u,
                        d,
                        c,
                        m = (0, iV.c)(24);
                    m[0] !== e
                        ? (({
                              issuesToActOn: a,
                              disabled: s,
                              nested: n,
                              singleKeyShortcutsEnabled: i,
                              maximumAssignees: l,
                              ...t
                          } = e),
                          (m[0] = e),
                          (m[1] = a),
                          (m[2] = l),
                          (m[3] = n),
                          (m[4] = t),
                          (m[5] = i),
                          (m[6] = s))
                        : ((a = m[1]),
                          (l = m[2]),
                          (n = m[3]),
                          (t = m[4]),
                          (i = m[5]),
                          (s = m[6]));
                    let g = void 0 !== s && s;
                    m[7] !== a
                        ? ((r = a.reduce(iH, {})), (m[7] = a), (m[8] = r))
                        : (r = m[8]);
                    let p = r;
                    m[9] !== g || m[10] !== n
                        ? ((o = (e) =>
                              n
                                  ? (0, y.jsxs)(lQ.l.Item, {
                                        disabled: g,
                                        ...e,
                                        role: "menuitem",
                                        children: [
                                            (0, y.jsx)(lQ.l.LeadingVisual, {
                                                children: (0, y.jsx)(
                                                    P.PeopleIcon,
                                                    {}
                                                ),
                                            }),
                                            "Assign",
                                        ],
                                    })
                                  : (0, y.jsx)(lT.Q, {
                                        "data-testid":
                                            "bulk-set-assignee-button",
                                        disabled: g,
                                        leadingVisual: P.PeopleIcon,
                                        trailingVisual: P.TriangleDownIcon,
                                        ...e,
                                        children: "Assign",
                                    })),
                          (m[9] = g),
                          (m[10] = n),
                          (m[11] = o))
                        : (o = m[11]);
                    let h = o;
                    (m[12] !== h
                        ? ((u = (e) => h(e)), (m[12] = h), (m[13] = u))
                        : (u = m[13]),
                        m[14] !== p ||
                        m[15] !== a ||
                        m[16] !== l ||
                        m[17] !== n ||
                        m[18] !== t ||
                        m[19] !== i ||
                        m[20] !== u
                            ? ((d = {
                                  issuesToActOn: a,
                                  readonly: !1,
                                  shortcutEnabled: i,
                                  connectionIds: p,
                                  anchorElement: u,
                                  nested: n,
                                  maximumAssignees: l,
                                  ...t,
                              }),
                              (m[14] = p),
                              (m[15] = a),
                              (m[16] = l),
                              (m[17] = n),
                              (m[18] = t),
                              (m[19] = i),
                              (m[20] = u),
                              (m[21] = d))
                            : (d = m[21]));
                    let k = d;
                    return (
                        m[22] !== k
                            ? ((c = (0, y.jsx)(aw.mK, { ...k })),
                              (m[22] = k),
                              (m[23] = c))
                            : (c = m[23]),
                        c
                    );
                };
            try {
                i$.displayName || (i$.displayName = "ApplyAssigneesBulkAction");
            } catch {}
            try {
                iQ.displayName ||
                    (iQ.displayName = "ApplyAssigneesActionInternal");
            } catch {}
            function iU(e) {
                return e?.node ? [(0, aw.uX)(e.node)] : [];
            }
            function iH(e, a) {
                return (
                    (e[a] = [
                        eG.ConnectionHandler.getConnectionID(
                            a,
                            "IssueAssignees_assignedActors"
                        ),
                        eG.ConnectionHandler.getConnectionID(
                            a,
                            "Assignees_actionAssignees"
                        ),
                    ]),
                    e
                );
            }
            let iz = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    a = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = [
                        l,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isEnabled",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ApplyIssueTypeBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            l,
                                            {
                                                alias: "actionIssueType",
                                                args: null,
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        kind: "InlineDataFragmentSpread",
                                                        name: "IssueTypePickerIssueType",
                                                        selections: n,
                                                        args: null,
                                                        argumentDefinitions: [],
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ApplyIssueTypeBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    l,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: "actionIssueType",
                                                args: null,
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: n,
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "e9870af145012f1ad3673754fd2cb5d3",
                        metadata: {},
                        name: "ApplyIssueTypeBulkActionQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            iz.hash = "8237e8072ffb2dff69d1f901270d1354";
            let iW = { markAs: "Mark as", setIssueType: "Issue type" },
                iG = (e) => {
                    let a,
                        l,
                        n,
                        t,
                        i,
                        s,
                        r,
                        o,
                        u,
                        d,
                        c,
                        m,
                        g = (0, iV.c)(24);
                    (g[0] !== e
                        ? (({
                              issueIds: l,
                              disabled: a,
                              useQueryForAction: s,
                              nested: n,
                              singleKeyShortcutsEnabled: i,
                              ...t
                          } = e),
                          (g[0] = e),
                          (g[1] = a),
                          (g[2] = l),
                          (g[3] = n),
                          (g[4] = t),
                          (g[5] = i),
                          (g[6] = s))
                        : ((a = g[1]),
                          (l = g[2]),
                          (n = g[3]),
                          (t = g[4]),
                          (i = g[5]),
                          (s = g[6])),
                        g[7] !== l
                            ? ((r = { ids: l }), (g[7] = l), (g[8] = r))
                            : (r = g[8]),
                        g[9] === Symbol.for("react.memo_cache_sentinel")
                            ? ((o = { fetchPolicy: "store-only" }), (g[9] = o))
                            : (o = g[9]));
                    let { nodes: p } = (0, er.useLazyLoadQuery)(iz, r, o);
                    if (
                        (g[10] !== p
                            ? ((u = p || []), (g[10] = p), (g[11] = u))
                            : (u = g[11]),
                        g[12] !== u)
                    ) {
                        let e = u.filter(iZ).map(iX);
                        ((d = (1 === new Set(e.map(iJ)).size && e[0]) || null),
                            (g[12] = u),
                            (g[13] = d));
                    } else d = g[13];
                    let h = d;
                    g[14] !== a || g[15] !== n
                        ? ((c = (e) =>
                              n
                                  ? (0, y.jsxs)(lQ.l.Item, {
                                        "data-testid":
                                            "bulk-set-issue-type-button",
                                        disabled: a,
                                        ...e,
                                        role: "menuitem",
                                        children: [
                                            (0, y.jsx)(lQ.l.LeadingVisual, {
                                                children: (0, y.jsx)(
                                                    P.IssueOpenedIcon,
                                                    {}
                                                ),
                                            }),
                                            iW.setIssueType,
                                        ],
                                    })
                                  : (0, y.jsx)(lT.Q, {
                                        "data-testid":
                                            "bulk-set-issue-type-button",
                                        disabled: a,
                                        leadingVisual: P.IssueOpenedIcon,
                                        trailingVisual: P.TriangleDownIcon,
                                        ...e,
                                        children: iW.setIssueType,
                                    })),
                          (g[14] = a),
                          (g[15] = n),
                          (g[16] = c))
                        : (c = g[16]);
                    let k = c;
                    return (
                        g[17] !== h ||
                        g[18] !== k ||
                        g[19] !== n ||
                        g[20] !== t ||
                        g[21] !== i ||
                        g[22] !== s
                            ? ((m = (0, y.jsx)(aN.$H, {
                                  readonly: !1,
                                  shortcutEnabled: i,
                                  activeIssueType: h,
                                  anchorElement: k,
                                  useQueryForAction: s,
                                  nested: n,
                                  ...t,
                              })),
                              (g[17] = h),
                              (g[18] = k),
                              (g[19] = n),
                              (g[20] = t),
                              (g[21] = i),
                              (g[22] = s),
                              (g[23] = m))
                            : (m = g[23]),
                        m
                    );
                };
            try {
                iG.displayName || (iG.displayName = "ApplyIssueTypeBulkAction");
            } catch {}
            function iZ(e) {
                return !!e;
            }
            function iX(e) {
                return e && e.actionIssueType
                    ? (0, aN.iO)(e.actionIssueType)
                    : null;
            }
            function iJ(e) {
                return e?.id;
            }
            let iY = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    a = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = [
                        { kind: "Literal", name: "first", value: 20 },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    t = [
                        l,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameHTML",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ApplyLabelsBulkActionLabelQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            l,
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType: "LabelConnection",
                                                kind: "LinkedField",
                                                name: "labels",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "LabelEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Label",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        kind: "InlineDataFragmentSpread",
                                                                        name: "LabelPickerLabel",
                                                                        selections:
                                                                            t,
                                                                        args: null,
                                                                        argumentDefinitions:
                                                                            [],
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ApplyLabelsBulkActionLabelQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    l,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType: "LabelConnection",
                                                kind: "LinkedField",
                                                name: "labels",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "LabelEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Label",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: t,
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "02815c0f1c7f68d3a5e520b675a5492b",
                        metadata: {},
                        name: "ApplyLabelsBulkActionLabelQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            iY.hash = "44889de9ad73a14e365e1011f491f2bf";
            let i1 = (e) => {
                    let a,
                        l,
                        n,
                        t,
                        i,
                        s,
                        r,
                        o,
                        u = (0, iV.c)(15);
                    (u[0] !== e
                        ? (({ issueIds: a, ...l } = e),
                          (u[0] = e),
                          (u[1] = a),
                          (u[2] = l))
                        : ((a = u[1]), (l = u[2])),
                        u[3] !== a
                            ? ((n = { ids: a }), (u[3] = a), (u[4] = n))
                            : (n = u[4]),
                        u[5] === Symbol.for("react.memo_cache_sentinel")
                            ? ((t = { fetchPolicy: "store-or-network" }),
                              (u[5] = t))
                            : (t = u[5]));
                    let { nodes: d } = (0, er.useLazyLoadQuery)(iY, n, t);
                    if (u[6] !== d) {
                        let e = new Map(),
                            a = (d || []).map((a) => {
                                let l = a?.id;
                                return l
                                    ? ((a.labels?.edges || [])
                                          .flatMap(i0)
                                          .map((a) => {
                                              let n = e.get(l) || [];
                                              return (
                                                  n.push(a.id),
                                                  e.set(l, n),
                                                  {
                                                      issueId: l,
                                                      labelName: a.name,
                                                      labelNode: a,
                                                  }
                                              );
                                          }) ?? [])
                                    : [];
                            }),
                            l = {};
                        for (let e of a)
                            for (let n of e) {
                                let e = n.labelName.toLowerCase();
                                e in l ||
                                    (a.every((a) =>
                                        a.some(
                                            (a) =>
                                                a.labelName.toLowerCase() === e
                                        )
                                    ) &&
                                        (l[e] = n.labelNode));
                            }
                        ((i = i2),
                            (s = e),
                            (r = Object.values(l)),
                            (u[6] = d),
                            (u[7] = i),
                            (u[8] = s),
                            (u[9] = r));
                    } else ((i = u[7]), (s = u[8]), (r = u[9]));
                    return (
                        u[10] !== i || u[11] !== l || u[12] !== s || u[13] !== r
                            ? ((o = (0, y.jsx)(i, {
                                  existingIssueLabels: s,
                                  labelAppliedToAll: r,
                                  ...l,
                              })),
                              (u[10] = i),
                              (u[11] = l),
                              (u[12] = s),
                              (u[13] = r),
                              (u[14] = o))
                            : (o = u[14]),
                        o
                    );
                },
                i2 = (e) => {
                    let a,
                        l,
                        n,
                        t,
                        i,
                        s,
                        r,
                        o,
                        u,
                        d = (0, iV.c)(20);
                    d[0] !== e
                        ? (({
                              issuesToActOn: a,
                              disabled: t,
                              nested: i,
                              singleKeyShortcutsEnabled: n,
                              ...l
                          } = e),
                          (d[0] = e),
                          (d[1] = a),
                          (d[2] = l),
                          (d[3] = n),
                          (d[4] = t),
                          (d[5] = i))
                        : ((a = d[1]),
                          (l = d[2]),
                          (n = d[3]),
                          (t = d[4]),
                          (i = d[5]));
                    let c = void 0 !== t && t,
                        m = void 0 !== i && i;
                    d[6] !== a
                        ? ((s = a.reduce(i3, {})), (d[6] = a), (d[7] = s))
                        : (s = d[7]);
                    let g = s;
                    d[8] !== c || d[9] !== m
                        ? ((r = (e) =>
                              m
                                  ? (0, y.jsxs)(lQ.l.Item, {
                                        disabled: c,
                                        ...e,
                                        role: "menuitem",
                                        children: [
                                            (0, y.jsx)(lQ.l.LeadingVisual, {
                                                children: (0, y.jsx)(
                                                    P.TagIcon,
                                                    {}
                                                ),
                                            }),
                                            "Label",
                                        ],
                                    })
                                  : (0, y.jsx)(lT.Q, {
                                        "data-testid": "bulk-set-label-button",
                                        disabled: c,
                                        leadingVisual: P.TagIcon,
                                        trailingVisual: P.TriangleDownIcon,
                                        ...e,
                                        children: "Label",
                                    })),
                          (d[8] = c),
                          (d[9] = m),
                          (d[10] = r))
                        : (r = d[10]);
                    let p = r;
                    return (
                        d[11] !== p
                            ? ((o = (e) => p(e)), (d[11] = p), (d[12] = o))
                            : (o = d[12]),
                        d[13] !== g ||
                        d[14] !== a ||
                        d[15] !== m ||
                        d[16] !== l ||
                        d[17] !== n ||
                        d[18] !== o
                            ? ((u = (0, y.jsx)(aj.ng, {
                                  issuesToActOn: a,
                                  readonly: !1,
                                  shortcutEnabled: n,
                                  connectionIds: g,
                                  anchorElement: o,
                                  nested: m,
                                  ...l,
                              })),
                              (d[13] = g),
                              (d[14] = a),
                              (d[15] = m),
                              (d[16] = l),
                              (d[17] = n),
                              (d[18] = o),
                              (d[19] = u))
                            : (u = d[19]),
                        u
                    );
                };
            try {
                i1.displayName || (i1.displayName = "ApplyLabelsBulkAction");
            } catch {}
            try {
                i2.displayName ||
                    (i2.displayName = "ApplyLabelsActionInternal");
            } catch {}
            function i0(e) {
                return e?.node ? [(0, aj.P5)(e.node)] : [];
            }
            function i3(e, a) {
                return (
                    (e[a] = [
                        eG.ConnectionHandler.getConnectionID(
                            a,
                            "Labels_labels",
                            { orderBy: { direction: "ASC", field: "NAME" } }
                        ),
                    ]),
                    e
                );
            }
            let i4 = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    a = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = [
                        l,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closed",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "dueOn",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "progressPercentage",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closedAt",
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ApplyMilestoneBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            l,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Milestone",
                                                kind: "LinkedField",
                                                name: "milestone",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        kind: "InlineDataFragmentSpread",
                                                        name: "MilestonePickerMilestone",
                                                        selections: n,
                                                        args: null,
                                                        argumentDefinitions: [],
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ApplyMilestoneBulkActionQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    l,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Milestone",
                                                kind: "LinkedField",
                                                name: "milestone",
                                                plural: !1,
                                                selections: n,
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "9b0134efd0e47c1bd1ee5acdf8e48346",
                        metadata: {},
                        name: "ApplyMilestoneBulkActionQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            i4.hash = "82aeab8762454708408f41e2ea965180";
            var i5 = l(97839);
            let i7 = (e) => {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p = (0, iV.c)(24);
                (p[0] !== e
                    ? (({
                          issueIds: l,
                          disabled: a,
                          useQueryForAction: s,
                          nested: n,
                          singleKeyShortcutsEnabled: i,
                          ...t
                      } = e),
                      (p[0] = e),
                      (p[1] = a),
                      (p[2] = l),
                      (p[3] = n),
                      (p[4] = t),
                      (p[5] = i),
                      (p[6] = s))
                    : ((a = p[1]),
                      (l = p[2]),
                      (n = p[3]),
                      (t = p[4]),
                      (i = p[5]),
                      (s = p[6])),
                    p[7] !== l
                        ? ((r = { ids: l }), (p[7] = l), (p[8] = r))
                        : (r = p[8]),
                    p[9] === Symbol.for("react.memo_cache_sentinel")
                        ? ((o = { fetchPolicy: "store-or-network" }),
                          (p[9] = o))
                        : (o = p[9]));
                let { nodes: h } = (0, er.useLazyLoadQuery)(i4, r, o);
                if (p[10] !== h) {
                    let e = (h || []).map(i6) ?? [];
                    ((u =
                        (e.length > 0 &&
                            e.every((a) => a?.id === e[0]?.id) &&
                            e[0]) ||
                        null),
                        (p[10] = h),
                        (p[11] = u));
                } else u = p[11];
                let k = u;
                p[12] !== a || p[13] !== n
                    ? ((d = (e) =>
                          n
                              ? (0, y.jsxs)(lQ.l.Item, {
                                    disabled: a,
                                    ...e,
                                    role: "menuitem",
                                    children: [
                                        (0, y.jsx)(lQ.l.LeadingVisual, {
                                            children: (0, y.jsx)(
                                                P.MilestoneIcon,
                                                {}
                                            ),
                                        }),
                                        "Milestone",
                                    ],
                                })
                              : (0, y.jsx)(lT.Q, {
                                    "data-testid": "bulk-set-milestone-button",
                                    disabled: a,
                                    leadingVisual: P.MilestoneIcon,
                                    trailingVisual: P.TriangleDownIcon,
                                    ...e,
                                    children: "Milestone",
                                })),
                      (p[12] = a),
                      (p[13] = n),
                      (p[14] = d))
                    : (d = p[14]);
                let f = d;
                (p[15] === Symbol.for("react.memo_cache_sentinel")
                    ? ((c = (0, y.jsx)(tD.JR, {
                          html: i5.v.noMilestoneData.title,
                      })),
                      (p[15] = c))
                    : (c = p[15]),
                    p[16] === Symbol.for("react.memo_cache_sentinel")
                        ? ((m = {
                              id: i5.v.noMilestoneData.id,
                              description: "",
                              descriptionVariant: "inline",
                              children: c,
                              source: i5.v.noMilestoneData,
                              groupId: "",
                              leadingVisual: i9,
                          }),
                          (p[16] = m))
                        : (m = p[16]));
                let b = m;
                return (
                    p[17] !== k ||
                    p[18] !== f ||
                    p[19] !== n ||
                    p[20] !== t ||
                    p[21] !== i ||
                    p[22] !== s
                        ? ((g = (0, y.jsx)(aR.C2, {
                              readonly: !1,
                              shortcutEnabled: i,
                              activeMilestone: k,
                              anchorElement: f,
                              useQueryForAction: s,
                              nested: n,
                              noMilestoneItem: b,
                              canCreateMilestone: !1,
                              ...t,
                          })),
                          (p[17] = k),
                          (p[18] = f),
                          (p[19] = n),
                          (p[20] = t),
                          (p[21] = i),
                          (p[22] = s),
                          (p[23] = g))
                        : (g = p[23]),
                    g
                );
            };
            try {
                i7.displayName || (i7.displayName = "ApplyMilestoneBulkAction");
            } catch {}
            function i6(e) {
                return e?.id && e.milestone ? (0, aR.Hf)(e.milestone) : null;
            }
            function i9() {
                return (0, y.jsx)(P.MilestoneIcon, {});
            }
            let i8 = {
                    issueIcons: {
                        OPEN: {
                            color: "open.fg",
                            icon: P.IssueOpenedIcon,
                            description: "Open issue",
                        },
                        CLOSED: {
                            color: "done.fg",
                            icon: P.IssueClosedIcon,
                            description: "Closed issue (completed)",
                        },
                        NOT_PLANNED: {
                            color: "fg.muted",
                            icon: P.SkipIcon,
                            description: "Closed issue (not planned)",
                        },
                    },
                },
                se = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "input",
                            },
                        ],
                        a = [
                            {
                                alias: null,
                                args: [
                                    {
                                        kind: "Variable",
                                        name: "input",
                                        variableName: "input",
                                    },
                                ],
                                concreteType: "UpdateIssuesBulkPayload",
                                kind: "LinkedField",
                                name: "updateIssuesBulk",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "jobId",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ];
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "updateIssuesBulkActionsMutation",
                            selections: a,
                            type: "Mutation",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "updateIssuesBulkActionsMutation",
                            selections: a,
                        },
                        params: {
                            id: "dfb2a4b140aa897b294cc6d1a17dbeae",
                            metadata: {},
                            name: "updateIssuesBulkActionsMutation",
                            operationKind: "mutation",
                            text: null,
                        },
                    };
                })();
            function sa(e, a, l) {
                for (let n of a) {
                    let a = e.get(n);
                    if (a)
                        for (let [e, n] of Object.entries(l)) a.setValue(n, e);
                }
            }
            se.hash = "2187d2996ee91c8c84510d55982245d5";
            let sl = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "UpdateIssuesBulkByQueryPayload",
                            kind: "LinkedField",
                            name: "updateIssuesBulkByQuery",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "jobId",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "updateIssuesBulkActionsByQueryMutation",
                        selections: a,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "updateIssuesBulkActionsByQueryMutation",
                        selections: a,
                    },
                    params: {
                        id: "35dfbb421568af196e7028fa0d6b61ed",
                        metadata: {},
                        name: "updateIssuesBulkActionsByQueryMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            sl.hash = "70f1e01b038fd680e1a06c05a1b9138c";
            let sn = [
                    {
                        name: "Open",
                        icon: i8.issueIcons.OPEN.icon,
                        value: { state: "OPEN" },
                    },
                    {
                        name: "Completed",
                        icon: i8.issueIcons.CLOSED.icon,
                        value: { state: "CLOSED", stateReason: "COMPLETED" },
                    },
                    {
                        name: "Not planned",
                        icon: i8.issueIcons.NOT_PLANNED.icon,
                        value: { state: "CLOSED", stateReason: "NOT_PLANNED" },
                    },
                ],
                st = (e) => {
                    let a,
                        l,
                        n,
                        t,
                        i,
                        s,
                        r,
                        o,
                        u,
                        d,
                        c,
                        m,
                        g,
                        p,
                        h,
                        k,
                        b = (0, iV.c)(32),
                        {
                            issuesToActOn: C,
                            query: S,
                            repositoryId: F,
                            disabled: v,
                            useQueryForAction: L,
                            onCompleted: I,
                            onError: _,
                            nested: x,
                        } = e,
                        K = (0, er.useRelayEnvironment)(),
                        [w, N] = (0, f.useState)(!1);
                    b[0] === Symbol.for("react.memo_cache_sentinel")
                        ? ((a = (e) => {
                              N(e);
                          }),
                          (b[0] = a))
                        : (a = b[0]);
                    let j = a;
                    (b[1] === Symbol.for("react.memo_cache_sentinel")
                        ? ((l = ["e"]),
                          (n = () => j(!0)),
                          (t = {
                              triggerWhenInputElementHasFocus: !1,
                              triggerWhenPortalIsActive: !1,
                          }),
                          (b[1] = l),
                          (b[2] = n),
                          (b[3] = t))
                        : ((l = b[1]), (n = b[2]), (t = b[3])),
                        (0, lu._N)(l, n, t),
                        b[4] === Symbol.for("react.memo_cache_sentinel")
                            ? ((i = ["Escape"]),
                              (s = () => j(!1)),
                              (r = {}),
                              (b[4] = i),
                              (b[5] = s),
                              (b[6] = r))
                            : ((i = b[4]), (s = b[5]), (r = b[6])),
                        (0, lu._N)(i, s, r),
                        b[7] !== C ||
                        b[8] !== I ||
                        b[9] !== _ ||
                        b[10] !== S ||
                        b[11] !== K ||
                        b[12] !== F ||
                        b[13] !== L
                            ? ((o = (e) => {
                                  L && F && S
                                      ? (function ({
                                            environment: e,
                                            optimisticUpdateIds: a,
                                            input: {
                                                query: l,
                                                repositoryId: n,
                                                state: t,
                                                stateReason: i,
                                            },
                                            onCompleted: s,
                                            onError: r,
                                        }) {
                                            let o = {
                                                    state: t,
                                                    stateReason: i,
                                                },
                                                u = {
                                                    query: l,
                                                    repositoryId: n,
                                                    ...o,
                                                };
                                            (0, er.commitMutation)(e, {
                                                mutation: sl,
                                                variables: { input: u },
                                                updater: (e) => sa(e, a, o),
                                                optimisticUpdater: (e) =>
                                                    sa(e, a, o),
                                                onCompleted: (e) => s && s(e),
                                                onError: (e) => r && r(e),
                                            });
                                        })({
                                            environment: K,
                                            optimisticUpdateIds: C,
                                            input: {
                                                query: S,
                                                repositoryId: F,
                                                ...e,
                                            },
                                            onCompleted: (e) => {
                                                let {
                                                    updateIssuesBulkByQuery: a,
                                                } = e;
                                                I?.(a?.jobId || void 0);
                                            },
                                            onError: (e) => {
                                                _?.(e);
                                            },
                                        })
                                      : (function ({
                                            environment: e,
                                            optimisticUpdateIds: a,
                                            input: {
                                                ids: l,
                                                state: n,
                                                stateReason: t,
                                            },
                                            onCompleted: i,
                                            onError: s,
                                        }) {
                                            let r = {
                                                    state: n,
                                                    stateReason: t,
                                                },
                                                o = { ids: l, ...r };
                                            (0, er.commitMutation)(e, {
                                                mutation: se,
                                                variables: { input: o },
                                                updater: (e) => sa(e, a, r),
                                                optimisticUpdater: (e) =>
                                                    sa(e, a, r),
                                                onCompleted: (e) => i && i(e),
                                                onError: (e) => s && s(e),
                                            });
                                        })({
                                            environment: K,
                                            optimisticUpdateIds: C,
                                            input: { ids: [...C], ...e },
                                            onCompleted: (e) => {
                                                let { updateIssuesBulk: a } = e;
                                                I?.(a?.jobId || void 0);
                                            },
                                            onError: (e) => {
                                                _?.(e);
                                            },
                                        });
                              }),
                              (b[7] = C),
                              (b[8] = I),
                              (b[9] = _),
                              (b[10] = S),
                              (b[11] = K),
                              (b[12] = F),
                              (b[13] = L),
                              (b[14] = o))
                            : (o = b[14]));
                    let R = o;
                    if (
                        (b[15] !== R
                            ? ((d = sn.map((e, a) =>
                                  (0, y.jsxs)(
                                      lQ.l.Item,
                                      {
                                          onSelect: () => R(e.value),
                                          children: [
                                              (0, y.jsx)(lQ.l.LeadingVisual, {
                                                  children: (0, y.jsx)(
                                                      e.icon,
                                                      {}
                                                  ),
                                              }),
                                              e.name,
                                          ],
                                      },
                                      a
                                  )
                              )),
                              (b[15] = R),
                              (b[16] = d))
                            : (d = b[16]),
                        b[17] !== d
                            ? ((c = (0, y.jsx)(y.Fragment, { children: d })),
                              (b[17] = d),
                              (b[18] = c))
                            : (c = b[18]),
                        (u = c),
                        void 0 !== x && x)
                    ) {
                        let e, a;
                        return (
                            b[19] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = (0, y.jsx)(ib.W.Anchor, {
                                      children: (0, y.jsxs)(lQ.l.Item, {
                                          children: [
                                              (0, y.jsx)(lQ.l.LeadingVisual, {
                                                  children: (0, y.jsx)(
                                                      i8.issueIcons.CLOSED.icon,
                                                      {}
                                                  ),
                                              }),
                                              "Mark as",
                                          ],
                                      }),
                                  })),
                                  (b[19] = e))
                                : (e = b[19]),
                            b[20] !== u
                                ? ((a = (0, y.jsxs)(ib.W, {
                                      children: [
                                          e,
                                          (0, y.jsx)(ib.W.Overlay, {
                                              children: (0, y.jsx)(lQ.l, {
                                                  children: u,
                                              }),
                                          }),
                                      ],
                                  })),
                                  (b[20] = u),
                                  (b[21] = a))
                                : (a = b[21]),
                            a
                        );
                    }
                    return (
                        b[22] === Symbol.for("react.memo_cache_sentinel")
                            ? ((m = (0, nk.G)("mark-as-action-menu-button")),
                              (b[22] = m))
                            : (m = b[22]),
                        b[23] !== v
                            ? ((g = (0, y.jsx)(ib.W.Anchor, {
                                  children: (0, y.jsx)(lT.Q, {
                                      disabled: v,
                                      leadingVisual: i8.issueIcons.CLOSED.icon,
                                      trailingVisual: P.TriangleDownIcon,
                                      ...m,
                                      children: iW.markAs,
                                  }),
                              })),
                              (b[23] = v),
                              (b[24] = g))
                            : (g = b[24]),
                        b[25] === Symbol.for("react.memo_cache_sentinel")
                            ? ((p = (0, nk.G)("mark-as-action-menu-list")),
                              (b[25] = p))
                            : (p = b[25]),
                        b[26] !== u
                            ? ((h = (0, y.jsx)(ib.W.Overlay, {
                                  children: (0, y.jsx)(lQ.l, {
                                      ...p,
                                      children: u,
                                  }),
                              })),
                              (b[26] = u),
                              (b[27] = h))
                            : (h = b[27]),
                        b[28] !== w || b[29] !== g || b[30] !== h
                            ? ((k = (0, y.jsxs)(ib.W, {
                                  open: w,
                                  onOpenChange: j,
                                  children: [g, h],
                              })),
                              (b[28] = w),
                              (b[29] = g),
                              (b[30] = h),
                              (b[31] = k))
                            : (k = b[31]),
                        k
                    );
                };
            try {
                st.displayName || (st.displayName = "BulkMarkAs");
            } catch {}
            var si = l(66197),
                ss = l(25654);
            function sr() {
                let e = (0, f.useCallback)(
                        (e, a, l) =>
                            e
                                ? (0, y.jsxs)(lQ.l.Item, {
                                      disabled: !0,
                                      children: [
                                          (0, y.jsx)(lQ.l.LeadingVisual, {
                                              children: (0, y.jsx)(a, {}),
                                          }),
                                          l,
                                          (0, y.jsx)(lQ.l.TrailingVisual, {
                                              children: (0, y.jsx)(
                                                  P.TriangleDownIcon,
                                                  {}
                                              ),
                                          }),
                                      ],
                                  })
                                : (0, y.jsx)(lT.Q, {
                                      disabled: !0,
                                      leadingVisual: a,
                                      trailingVisual: P.TriangleDownIcon,
                                      children: l,
                                  }),
                        []
                    ),
                    a = (0, f.useMemo)(
                        () => [
                            {
                                key: "mark-as",
                                render: (a) =>
                                    e(a, E.issueIcons.CLOSED.icon, "Mark as"),
                            },
                            {
                                key: "apply-labels",
                                render: (a) => e(a, P.TagIcon, "Label"),
                            },
                            {
                                key: "apply-assignees",
                                render: (a) => e(a, P.PeopleIcon, "Assign"),
                            },
                            {
                                key: "add-to-projects",
                                render: (a) =>
                                    e(a, P.ProjectSymlinkIcon, "Project"),
                            },
                            {
                                key: "apply-milestone",
                                render: (a) =>
                                    e(a, P.MilestoneIcon, "Milestone"),
                            },
                            {
                                key: "apply-issue-type",
                                render: (a) =>
                                    e(a, P.IssueOpenedIcon, lP.setIssueType),
                            },
                        ],
                        [e]
                    );
                return (0, y.jsx)(si.X, {
                    onToggleSelectAll: v.l,
                    actionsLabel: U.bulkActions,
                    actions: a,
                    density: "normal",
                });
            }
            function so({
                checkedItems: e,
                issueNodes: a,
                setCheckedItems: l,
                useBulkActions: n,
                listHasPRs: t,
                isInOrganization: i,
            }) {
                let { scoped_repository: s, current_user_settings: r } = (0,
                    I.X)(),
                    { addToast: o, addPersistedToast: u } = (0, x.Y6)(),
                    { setBulkJobId: d, bulkJobId: c } = eD(),
                    m = Array.from(e.values())
                        .filter((e) => null != e)
                        .filter((e) => "Issue" === e.__typename),
                    [g, p] = (0, f.useState)(null !== c),
                    { activeSearchQuery: h, isQueryLoading: k } = eM(),
                    { setMultiPageSelectionAllowed: b } = (0, ss.P)(),
                    C = (0, f.useCallback)(
                        (e) => {
                            (p(!1),
                                e &&
                                    (u({
                                        type: "info",
                                        message: U.updatingIssues,
                                        icon: (0, y.jsx)(P.RocketIcon, {}),
                                        role: "status",
                                    }),
                                    d(e)));
                        },
                        [u, d]
                    ),
                    S = (0, f.useCallback)(
                        (e) => {
                            (p(!1),
                                o({
                                    type: "error",
                                    message: `Could not update issues: ${e.message}`,
                                }));
                        },
                        [o]
                    ),
                    [F, v] = (0, f.useState)(!1),
                    L = (0, f.useMemo)(
                        () => ({
                            useQueryForAction: F,
                            onCompleted: C,
                            onError: S,
                            disabled: g,
                            issuesToActOn: F
                                ? a.filter((e) => null != e).map((e) => e.id)
                                : m.filter((e) => null != e).map((e) => e.id),
                            query: h,
                            singleKeyShortcutsEnabled:
                                r?.use_single_key_shortcut || !1,
                        }),
                        [F, C, S, g, a, m, h, r?.use_single_key_shortcut]
                    ),
                    { setSelectedCount: _ } = (0, iM.v)(),
                    K = (0, f.useCallback)(
                        (e) => {
                            e
                                ? l(
                                      a
                                          .filter((e) => null != e)
                                          .reduce(
                                              (e, a) => e.set(a.id, a),
                                              new Map()
                                          )
                                  )
                                : (l(new Map()), F && (v(!1), _(0), b?.(!1)));
                        },
                        [a, l, b, _, F]
                    ),
                    w = s && n && !t,
                    N = (0, f.useMemo)(
                        () => ({
                            owner: s?.owner ?? "",
                            repositoryName: s?.name ?? "",
                        }),
                        [s?.name, s?.owner]
                    ),
                    j = (0, f.useMemo)(() => {
                        if (!w) return;
                        let e = m.map((e) => e.id),
                            a = [
                                {
                                    key: "mark-as",
                                    render: (e) =>
                                        (0, y.jsx)(st, {
                                            ...L,
                                            nested: e,
                                            repositoryId: s.id,
                                        }),
                                },
                                {
                                    key: "apply-labels",
                                    render: (a) =>
                                        (0, y.jsx)(i1, {
                                            owner: s.owner,
                                            repo: s.name,
                                            nested: a,
                                            issueIds: e,
                                            ...L,
                                            repositoryId: s?.id,
                                        }),
                                },
                                {
                                    key: "apply-assignees",
                                    render: (a) =>
                                        (0, y.jsx)(i$, {
                                            nested: a,
                                            issueIds: e,
                                            ...L,
                                            repositoryId: s?.id,
                                            owner: s?.owner,
                                            repo: s?.name,
                                        }),
                                },
                                {
                                    key: "add-to-projects",
                                    render: (e) =>
                                        (0, y.jsx)(iE, {
                                            nested: e,
                                            issueIds: m.map((e) => e.id),
                                            repositoryId: s?.id,
                                            owner: s?.owner,
                                            repo: s?.name,
                                            ...L,
                                        }),
                                },
                                {
                                    key: "apply-milestone",
                                    render: (e) =>
                                        (0, y.jsx)(i7, {
                                            owner: s.owner,
                                            repo: s.name,
                                            nested: e,
                                            issueIds: m.map((e) => e.id),
                                            repositoryId: s.id,
                                            ...L,
                                        }),
                                },
                            ];
                        return (
                            i &&
                                a.push({
                                    key: "apply-issue-type",
                                    render: (a) =>
                                        (0, y.jsx)(al.y, {
                                            appName: "issue_types",
                                            category: "issues_index",
                                            metadata: N,
                                            children: (0, y.jsx)(iG, {
                                                owner: s.owner,
                                                repo: s.name,
                                                nested: a,
                                                issueIds: e,
                                                repositoryId: s?.id,
                                                ...L,
                                            }),
                                        }),
                                }),
                            a
                        );
                    }, [w, L, s?.id, s?.owner, s?.name, i, m, N]);
                return (0, y.jsx)(f.Suspense, {
                    fallback: (0, y.jsx)(sr, {}),
                    children: (0, y.jsx)(si.X, {
                        onToggleSelectAll: K,
                        actionsLabel: U.bulkActions,
                        actions: j,
                        density: "normal",
                        assistiveAnnouncement: k
                            ? U.loadingQueryResults
                            : void 0,
                    }),
                });
            }
            try {
                sr.displayName ||
                    (sr.displayName = "ListItemsHeaderBulkFallback");
            } catch {}
            try {
                so.displayName ||
                    (so.displayName = "ListItemsHeaderWithBulkActions");
            } catch {}
            var su = l(63867),
                sd = l(11057);
            let sc = {
                assigneeFilterButton:
                    "ListAssigneeFilter-module__assigneeFilterButton--mq5TL",
            };
            function sm({ repo: e, applySectionFilter: a, nested: l }) {
                let { name: n, owner: t } = e,
                    { activeSearchQuery: i, currentViewId: s } = eM(),
                    { debouncedDirtySearchQuery: r } = eD(),
                    { current_user_settings: o } = (0, I.X)(),
                    u = r ?? i,
                    d = (0, f.useMemo)(() => eK(u, "assignee").slice(-1), [u]),
                    c = (0, f.useMemo)(
                        () => ({
                            id: i5.v.noAssigneeData.id,
                            description: "",
                            descriptionVariant: "inline",
                            children: (0, y.jsx)(tD.JR, {
                                html: i5.v.noAssigneeData.login,
                            }),
                            source: i5.v.noAssigneeData,
                            selected: u.includes("no:assignee"),
                            leadingVisual: () => (0, y.jsx)(P.PersonIcon, {}),
                        }),
                        [u]
                    ),
                    m = (0, f.useCallback)(
                        (e) => {
                            let l = eN(
                                    u,
                                    e.map((e) =>
                                        e.id === i5.v.noAssigneeData.id
                                            ? "no:assignee"
                                            : (0, sd.i)(e)
                                    ),
                                    "assignee"
                                ),
                                n = ll({ viewId: s, query: l });
                            a(l, n);
                        },
                        [u, a, s]
                    ),
                    g = {
                        readonly: !1,
                        title: U.filters.assigneesLabel,
                        assigneeTokens: d,
                        assignees: [],
                        repo: n,
                        owner: t,
                        onSelectionChange: m,
                        shortcutEnabled: o?.use_single_key_shortcut || !1,
                        noAssigneeOption: c,
                        anchorElement: l ? sg : sp,
                        showNoMatchItem: !0,
                    };
                return (0, y.jsx)(aw._g, {
                    ...g,
                    name: "assignee",
                    selectionVariant: "single",
                    includeAuthorableBots: !1,
                    includeAssignableBots: !0,
                });
            }
            function sg(e) {
                return (0, y.jsxs)(lQ.l.Item, {
                    ...e,
                    "aria-label": U.filters.assigneesLabel,
                    role: "menuitem",
                    children: [
                        (0, y.jsx)(lQ.l.LeadingVisual, {
                            children: (0, y.jsx)(P.MentionIcon, {}),
                        }),
                        U.filters.assignees,
                        "...",
                    ],
                });
            }
            function sp(e) {
                return (0, y.jsx)(lT.Q, {
                    variant: "invisible",
                    "data-testid": "assignees-anchor-button",
                    trailingVisual: P.TriangleDownIcon,
                    "aria-label": U.filters.assigneesLabel,
                    className: sc.assigneeFilterButton,
                    ...e,
                    children: U.filters.assignees,
                });
            }
            try {
                sm.displayName || (sm.displayName = "ListAssigneeFilter");
            } catch {}
            try {
                sg.displayName || (sg.displayName = "NestedAssigneesAnchor");
            } catch {}
            try {
                sp.displayName || (sp.displayName = "AssigneesAnchor");
            } catch {}
            let sy = {
                authorFilterButton:
                    "ListAuthorFilter-module__authorFilterButton--VTo2Y",
            };
            function sh({ repo: e, applySectionFilter: a, nested: l }) {
                let { name: n, owner: t } = e,
                    { activeSearchQuery: i, currentViewId: s } = eM(),
                    { debouncedDirtySearchQuery: r } = eD(),
                    { current_user_settings: o } = (0, I.X)(),
                    u = (0, h.G7)("issues_react_include_bots_in_pickers"),
                    d = r ?? i,
                    c = (0, f.useMemo)(() => eK(d, "author"), [d]),
                    m = (0, f.useCallback)(
                        (e) => {
                            let l = ej(d, e.map(sd.i), "author"),
                                n = ll({ viewId: s, query: l });
                            a(l, n);
                        },
                        [d, a, s]
                    ),
                    g = {
                        readonly: !1,
                        title: U.filters.authorLabel,
                        assigneeTokens: c,
                        assignees: [],
                        repo: n,
                        owner: t,
                        onSelectionChange: m,
                        shortcutEnabled: o?.use_single_key_shortcut || !1,
                        anchorElement: l ? sk : sf,
                        showNoMatchItem: !0,
                    };
                return (0, y.jsx)(aw._g, {
                    name: "author",
                    selectionVariant: "single",
                    ...g,
                    includeAuthorableBots: u,
                    includeAssignableBots: !1,
                });
            }
            function sk(e) {
                return (0, y.jsxs)(lQ.l.Item, {
                    ...e,
                    "aria-label": U.filters.authorLabel,
                    role: "menuitem",
                    children: [
                        (0, y.jsx)(lQ.l.LeadingVisual, {
                            children: (0, y.jsx)(P.PersonIcon, {}),
                        }),
                        U.filters.author,
                        "...",
                    ],
                });
            }
            function sf(e) {
                return (0, y.jsx)(lT.Q, {
                    variant: "invisible",
                    "data-testid": "authors-anchor-button",
                    trailingVisual: P.TriangleDownIcon,
                    "aria-label": U.filters.authorLabel,
                    className: sy.authorFilterButton,
                    ...e,
                    children: U.filters.author,
                });
            }
            try {
                sh.displayName || (sh.displayName = "ListAuthorFilter");
            } catch {}
            try {
                sk.displayName || (sk.displayName = "NestedAuthorsAnchor");
            } catch {}
            try {
                sf.displayName || (sf.displayName = "AuthorsAnchor");
            } catch {}
            let sb = {
                issueTypeFilterButton:
                    "ListIssueTypeFilter-module__issueTypeFilterButton--JrA_2",
            };
            function sC({ repo: e, applySectionFilter: a, nested: l }) {
                let { name: n, owner: t } = e,
                    { activeSearchQuery: i, currentViewId: s } = eM(),
                    { debouncedDirtySearchQuery: r } = eD(),
                    { current_user_settings: o } = (0, I.X)(),
                    u = r ?? i,
                    d = (0, f.useMemo)(() => sv(u), [u]),
                    c = (0, f.useCallback)(
                        (e) => {
                            let l = eN(
                                    u,
                                    e?.map((e) =>
                                        e.id === i5.v.noTypeData.id
                                            ? "no:type"
                                            : e.name
                                    ) || [],
                                    "type"
                                ),
                                n = ll({ viewId: s, query: l });
                            a(l, n);
                        },
                        [u, a, s]
                    ),
                    m = (0, f.useMemo)(() => eK(u, "type").at(-1), [u]);
                return (0, y.jsx)(aN.uF, {
                    title: U.filters.issueTypeLabel,
                    repo: n,
                    owner: t,
                    readonly: !1,
                    activeIssueType: null,
                    issueTypeToken: m,
                    onSelectionChange: c,
                    shortcutEnabled: o?.use_single_key_shortcut || !1,
                    anchorElement: l ? sS : sF,
                    width: "medium",
                    noTypeItem: d,
                });
            }
            function sS(e) {
                return (0, y.jsxs)(lQ.l.Item, {
                    ...e,
                    "aria-label": U.filters.issueTypeLabel,
                    role: "menuitem",
                    children: [
                        (0, y.jsx)(lQ.l.LeadingVisual, {
                            children: (0, y.jsx)(P.IssueOpenedIcon, {}),
                        }),
                        U.filters.issueType,
                        "...",
                    ],
                });
            }
            function sF(e) {
                return (0, y.jsx)(lT.Q, {
                    variant: "invisible",
                    "data-testid": l8.issueTypeAnchorFilter,
                    trailingVisual: P.TriangleDownIcon,
                    "aria-label": U.filters.issueTypeLabel,
                    className: sb.issueTypeFilterButton,
                    ...e,
                    children: U.filters.issueType,
                });
            }
            let sv = (e) => ({
                id: i5.v.noTypeData.id,
                description: "",
                descriptionVariant: "inline",
                children: (0, y.jsx)(tD.JR, { html: i5.v.noTypeData.name }),
                source: i5.v.noTypeData,
                groupId: "",
                selected: e.includes("no:type"),
            });
            try {
                sC.displayName || (sC.displayName = "ListIssueTypeFilter");
            } catch {}
            try {
                (t = NoIssueTypeItem).displayName ||
                    (t.displayName = "NoIssueTypeItem");
            } catch {}
            try {
                sS.displayName || (sS.displayName = "NestedIssueTypeAnchor");
            } catch {}
            try {
                sF.displayName || (sF.displayName = "IssueTypeAnchor");
            } catch {}
            let sL = {
                    ListViewMetadata_0:
                        "ListItemsHeaderWithoutBulkActions-module__ListViewMetadata_0--x0baS",
                },
                sI = {
                    labelColorIndicator:
                        "ListLabelFilter-module__labelColorIndicator--Kp5TE",
                    labelFilterButton:
                        "ListLabelFilter-module__labelFilterButton--_hamy",
                };
            function s_({ nested: e, repo: a, applySectionFilter: l }) {
                let { activeSearchQuery: n, currentViewId: t } = eM(),
                    { debouncedDirtySearchQuery: i } = eD(),
                    { current_user_settings: s } = (0, I.X)(),
                    r = i ?? n,
                    o = (0, f.useMemo)(
                        () => ({
                            id: i5.v.noLabelsData.id,
                            description: "",
                            descriptionVariant: "inline",
                            children: (0, y.jsx)(tD.JR, {
                                html: i5.v.noLabelsData.name,
                                title: i5.v.noLabelsData.description,
                            }),
                            source: i5.v.noLabelsData,
                            selected: r.includes("no:label"),
                            groupId: "",
                            leadingVisual: () =>
                                (0, y.jsx)(ae.A, {
                                    sx: {
                                        bg: "transparent",
                                        borderColor: "border.muted",
                                    },
                                    className: sI.labelColorIndicator,
                                }),
                        }),
                        [r]
                    ),
                    u = (0, f.useCallback)(
                        (e) => {
                            let a = eN(
                                    r,
                                    e.map((e) =>
                                        e.id === i5.v.noLabelsData.id
                                            ? "no:label"
                                            : e.name
                                    ),
                                    "label"
                                ),
                                n = ll({ viewId: t, query: a });
                            l(a, n);
                        },
                        [r, l, t]
                    ),
                    d = (0, f.useMemo)(() => {
                        let e = eK(r, "label");
                        return e.length > 0 ? e : void 0;
                    }, [r]);
                return (0, y.jsx)(aj.tJ, {
                    anchorElement: e ? sx : sK,
                    title: U.filters.labelsLabel,
                    showEditLabelsButton: !1,
                    repo: a.name,
                    owner: a.owner,
                    readonly: !1,
                    shortcutEnabled: s?.use_single_key_shortcut || !1,
                    onSelectionChanged: u,
                    noLabelOption: o,
                    labels: [],
                    labelNames: d,
                });
            }
            function sx(e) {
                return (0, y.jsxs)(lQ.l.Item, {
                    ...e,
                    "aria-label": U.filters.labelsLabel,
                    role: "menuitem",
                    children: [
                        (0, y.jsx)(lQ.l.LeadingVisual, {
                            children: (0, y.jsx)(P.TagIcon, {}),
                        }),
                        U.filters.labels,
                        "...",
                    ],
                });
            }
            function sK(e) {
                return (0, y.jsx)(lT.Q, {
                    variant: "invisible",
                    "data-testid": "labels-anchor-button",
                    trailingVisual: P.TriangleDownIcon,
                    "aria-label": U.filters.labelsLabel,
                    className: sI.labelFilterButton,
                    ...e,
                    children: U.filters.labels,
                });
            }
            try {
                s_.displayName || (s_.displayName = "ListLabelFilter");
            } catch {}
            try {
                (i = NoLabelItem).displayName ||
                    (i.displayName = "NoLabelItem");
            } catch {}
            try {
                sx.displayName || (sx.displayName = "NestedLabelsAnchor");
            } catch {}
            try {
                sK.displayName || (sK.displayName = "LabelsAnchor");
            } catch {}
            let sw = {
                    milestoneFilterButton:
                        "ListMilestoneFilter-module__milestoneFilterButton--yIRAN",
                },
                sN = ({ nested: e, repo: a, applySectionFilter: l }) => {
                    let { activeSearchQuery: n, currentViewId: t } = eM(),
                        { debouncedDirtySearchQuery: i } = eD(),
                        { current_user_settings: s } = (0, I.X)(),
                        [r, o] = (0, f.useState)(null),
                        u = i ?? n,
                        d = (0, f.useMemo)(
                            () => ({
                                id: i5.v.noMilestoneData.id,
                                description: "",
                                descriptionVariant: "inline",
                                children: (0, y.jsx)(tD.JR, {
                                    html: i5.v.noMilestoneData.title,
                                }),
                                source: i5.v.noMilestoneData,
                                groupId: "",
                                selected: u.includes("no:milestone"),
                                leadingVisual: () =>
                                    (0, y.jsx)(P.MilestoneIcon, {}),
                            }),
                            [u]
                        ),
                        c = (0, f.useMemo)(() => eK(u, "milestone"), [u]);
                    (0, f.useEffect)(() => {
                        c.length <= 0 && o(null);
                    }, [c]);
                    let m = (0, f.useCallback)(
                        (e) => {
                            let a = e[0]?.id === i5.v.noMilestoneData.id,
                                n = e.map((e) => e.title);
                            e[0] && o(e[0]);
                            let i = ej(u, n, "milestone", a),
                                s = ll({ viewId: t, query: i });
                            l(i, s);
                        },
                        [u, l, t]
                    );
                    return (0, y.jsx)(aR.De, {
                        repo: a.name,
                        activeMilestone: r,
                        anchorElement: e ? sj : sR,
                        shortcutEnabled: s?.use_single_key_shortcut || !1,
                        owner: a.owner,
                        onSelectionChanged: m,
                        noMilestoneItem: d,
                        title: U.filters.milestonesLabel,
                        canCreateMilestone: !1,
                    });
                };
            function sj(e) {
                return (0, y.jsxs)(lQ.l.Item, {
                    ...e,
                    "aria-label": U.filters.milestonesLabel,
                    role: "menuitem",
                    children: [
                        (0, y.jsx)(lQ.l.LeadingVisual, {
                            children: (0, y.jsx)(P.MilestoneIcon, {}),
                        }),
                        U.filters.milestones,
                        "...",
                    ],
                });
            }
            function sR(e) {
                return (0, y.jsx)(lT.Q, {
                    variant: "invisible",
                    "data-testid": l8.milestoneAnchorFilter,
                    trailingVisual: P.TriangleDownIcon,
                    "aria-label": U.filters.milestonesLabel,
                    className: sw.milestoneFilterButton,
                    ...e,
                    children: U.filters.milestones,
                });
            }
            try {
                sN.displayName || (sN.displayName = "ListMilestoneFilter");
            } catch {}
            try {
                (s = NoMilestoneItem).displayName ||
                    (s.displayName = "NoMilestoneItem");
            } catch {}
            try {
                sj.displayName || (sj.displayName = "NestedMilestonesAnchor");
            } catch {}
            try {
                sR.displayName || (sR.displayName = "MilestonesAnchor");
            } catch {}
            let sT = {
                projectFilterButton:
                    "ListProjectFilter-module__projectFilterButton--w71x1",
            };
            function sP({ repo: e, applySectionFilter: a, nested: l }) {
                let { activeSearchQuery: n, currentViewId: t } = eM(),
                    { debouncedDirtySearchQuery: i } = eD(),
                    s = i ?? n,
                    r = (0, f.useMemo)(() => eK(s, "project"), [s]),
                    o = (0, f.useCallback)(
                        (l) => {
                            let n = eN(
                                s,
                                l.map((a) => `${e.owner}/${a.number}`),
                                "project"
                            );
                            if (n !== s) {
                                let e = ll({ viewId: t, query: n });
                                a(n, e);
                            }
                        },
                        [s, a, t, e.owner]
                    ),
                    u = (0, f.useCallback)(
                        (e) => {
                            let a = [];
                            return (
                                r?.map((l) => {
                                    let n = e.find((e) => {
                                        let [a, n] = l.split("/");
                                        return e.url.endsWith(
                                            `/${a}/projects/${n}`
                                        );
                                    });
                                    n && n.id && !a.includes(n) && a.push(n);
                                }),
                                a
                            );
                        },
                        [r]
                    );
                return (0, y.jsx)(aT.wX, {
                    pickerId: "list-project-filter",
                    anchorElement: l ? sA : sM,
                    repo: e.name,
                    owner: e.owner,
                    onSave: o,
                    selectedProjects: [],
                    readonly: !0,
                    firstSelectedProjectTitle: "",
                    getSelectedProjects: u,
                    title: U.filters.projectsLabel,
                });
            }
            function sA(e) {
                return (0, y.jsxs)(lQ.l.Item, {
                    ...e,
                    "aria-label": U.filters.projectsLabel,
                    role: "menuitem",
                    children: [
                        (0, y.jsx)(lQ.l.LeadingVisual, {
                            children: (0, y.jsx)(P.ProjectIcon, {}),
                        }),
                        U.filters.projects,
                        "...",
                    ],
                });
            }
            function sM(e) {
                return (0, y.jsx)(lT.Q, {
                    variant: "invisible",
                    "data-testid": "projects-anchor-button",
                    trailingVisual: P.TriangleDownIcon,
                    "aria-label": U.filters.projectsLabel,
                    className: sT.projectFilterButton,
                    ...e,
                    children: U.filters.projects,
                });
            }
            try {
                sP.displayName || (sP.displayName = "ListProjectFilter");
            } catch {}
            try {
                sA.displayName || (sA.displayName = "NestedProjectsAnchor");
            } catch {}
            try {
                sM.displayName || (sM.displayName = "ProjectsAnchor");
            } catch {}
            let sD = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    l = {
                        defaultValue:
                            "archived:false assignee:@me sort:updated-desc",
                        kind: "LocalArgument",
                        name: "query",
                    },
                    n = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    t = {
                        alias: null,
                        args: [
                            {
                                kind: "Literal",
                                name: "aggregations",
                                value: !0,
                            },
                            { kind: "Literal", name: "first", value: 0 },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Literal",
                                name: "type",
                                value: "ISSUE_ADVANCED",
                            },
                        ],
                        concreteType: "SearchResultItemConnection",
                        kind: "LinkedField",
                        name: "search",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "closedIssueCount",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "openIssueCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l],
                        kind: "Fragment",
                        metadata: null,
                        name: "OpenClosedTabsQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [t],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, e, a],
                        kind: "Operation",
                        name: "OpenClosedTabsQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    t,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "29746fd23262d23f528e1f5b9b427437",
                        metadata: {},
                        name: "OpenClosedTabsQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            sD.hash = "92e6e2f7f4ef23316cc497dae63fde6e";
            let sV = {
                    listScopedCommand:
                        "ListItems-module__listScopedCommand--yfPc2",
                    tabsContainer: "ListItems-module__tabsContainer--qrUH2",
                    loading: "ListItems-module__loading--jvxma",
                    listItem: "ListItems-module__listItem--Blv7W",
                    progressBar: "ListItems-module__progressBar--I9uRx",
                    listContainer: "ListItems-module__listContainer--PtWye",
                },
                sE = ({ isClosedTabActive: e, isOpenTabActive: a }) =>
                    (0, y.jsxs)("div", {
                        className: `${(0, l7.$)(sV.tabsContainer, sV.loading)}`,
                        children: [
                            (0, y.jsx)(
                                lO.L,
                                {
                                    title: "Open",
                                    isSelected: a,
                                    isLoading: !0,
                                    href: "",
                                },
                                "open"
                            ),
                            (0, y.jsx)(
                                lO.L,
                                {
                                    title: "Closed",
                                    isSelected: e,
                                    isLoading: !0,
                                    href: "",
                                },
                                "closed"
                            ),
                        ],
                    });
            function sq(e) {
                let { activeSearchQuery: a } = eM(),
                    l = eb(a),
                    n = eC(a),
                    t = eS(a),
                    i = eF(a);
                return (0, y.jsx)(f.Suspense, {
                    fallback: (0, y.jsx)(sE, {
                        isOpenTabActive: (l && !t) || i,
                        isClosedTabActive: (n && !i) || t,
                    }),
                    children: (0, y.jsx)(sO, { ...e }),
                });
            }
            function sO({ applySectionFilter: e, scopedRepository: a }) {
                let { activeSearchQuery: l } = eM(),
                    n = A.fV.pathname,
                    t = (0, f.useMemo)(() => ev(l), [l]),
                    i = t ? `?q=${encodeURIComponent(t)}` : "",
                    s = `${n}${i}`,
                    r = (0, f.useMemo)(
                        () =>
                            ((e, a) => {
                                if (!(e = e.trim())) return "";
                                if (
                                    ((e = eL(e)),
                                    void 0 === a && (a = ev(e)),
                                    !a)
                                )
                                    return L.Ds.defaultRepoLevelClosed;
                                let l = eb(a);
                                return eF(a)
                                    ? a.replaceAll(
                                          `-${L.Ds.closed}`,
                                          `-${L.Ds.open}`
                                      )
                                    : l
                                      ? a.replaceAll(L.Ds.open, L.Ds.closed)
                                      : "";
                            })(l),
                        [l]
                    ),
                    o = r ? `${n}?q=${encodeURIComponent(r)}` : n,
                    u = (0, iT.X)(["mac"]),
                    d = (0, f.useCallback)(
                        (a, n) => {
                            if (!l || !e || (u ? a.metaKey : a.ctrlKey)) return;
                            a.preventDefault();
                            let i = a.currentTarget.href;
                            e(n ? t || L.Ds.defaultRepoLevelOpen : r, i);
                        },
                        [l, e, r, u, t]
                    ),
                    c = eb(l),
                    m = eC(l),
                    g = eS(l),
                    p = eF(l),
                    h = (c && !g) || p,
                    k = (m && !p) || g,
                    b = (0, f.useMemo)(() => {
                        let e = t.match(lJ) ? r : t;
                        return ((e = lY(e, a)), t) ? e : `is:issue ${e}`;
                    }, [r, t, a]),
                    C = (0, er.useLazyLoadQuery)(
                        sD,
                        { query: b, owner: a.owner, name: a.name },
                        { fetchPolicy: "store-or-network" }
                    ),
                    S = C.repository?.search?.closedIssueCount || 0,
                    F = C.repository?.search?.openIssueCount || 0;
                return (0, y.jsx)("div", {
                    ...(0, nk.G)("list-view-section-filters"),
                    children: (0, y.jsxs)("ul", {
                        className: `list-style-none ${(0, l7.$)(sV.tabsContainer)}`,
                        children: [
                            (0, y.jsx)(
                                "li",
                                {
                                    ...(0, nk.G)("list-view-section-filter-0"),
                                    children: (0, y.jsx)(
                                        lO.L,
                                        {
                                            title: "Open",
                                            isSelected: h && !k,
                                            count: Q(F),
                                            href: s,
                                            onClick: (e) => d(e, !0),
                                        },
                                        "open"
                                    ),
                                },
                                "section-filter-0"
                            ),
                            (0, y.jsx)(
                                "li",
                                {
                                    ...(0, nk.G)("list-view-section-filter-1"),
                                    children: (0, y.jsx)(
                                        lO.L,
                                        {
                                            title: "Closed",
                                            isSelected: k && !h,
                                            count: Q(S),
                                            href: o,
                                            onClick: (e) => d(e, !1),
                                        },
                                        "closed"
                                    ),
                                },
                                "section-filter-1"
                            ),
                        ],
                    }),
                });
            }
            try {
                sE.displayName || (sE.displayName = "SuspendedFilterLinks");
            } catch {}
            try {
                sq.displayName || (sq.displayName = "OpenClosedTabs");
            } catch {}
            try {
                sO.displayName || (sO.displayName = "OpenClosedTabsInternal");
            } catch {}
            function sB({
                issueCount: e,
                issueNodes: a,
                setCheckedItems: l,
                setReactionEmojiToDisplay: n,
                setSortingItemSelected: t,
                setCurrentPage: i,
                updateListHasPRs: s,
                isInOrganization: r,
                ...o
            }) {
                let { scoped_repository: u } = (0, I.X)(),
                    { dirtySearchQuery: d, setDirtySearchQuery: c } = eD(),
                    {
                        activeSearchQuery: m,
                        isQueryLoading: g,
                        currentViewId: p,
                    } = eM(),
                    { navigateToUrl: h } = lS(),
                    k = (0, f.useMemo)(() => U.numberOfResults(e), [e]),
                    b = (0, f.useCallback)(
                        (e, a) => {
                            (c(e), h(a), i(1));
                        },
                        [h, i, c]
                    ),
                    [C, S] = (0, f.useState)(!1),
                    { setSelectedCount: F } = (0, iM.v)(),
                    { setMultiPageSelectionAllowed: v } = (0, ss.P)(),
                    L = (0, f.useCallback)(
                        (e) => {
                            e
                                ? (l(
                                      a
                                          .filter((e) => null != e)
                                          .reduce(
                                              (e, a) => e.set(a.id, a),
                                              new Map()
                                          )
                                  ),
                                  s(
                                      a
                                          .filter((e) => null != e)
                                          .reduce(
                                              (e, a) => e.set(a.id, a),
                                              new Map()
                                          )
                                  ))
                                : (l(new Map()), C && (S(!1), F(0), v?.(!1)));
                        },
                        [a, F, l, C, v, s]
                    ),
                    _ = (0, f.useCallback)(
                        (e) => ll({ viewId: p, query: e }),
                        [p]
                    ),
                    x = (0, f.useMemo)(
                        () => ({
                            key: "sort-by",
                            render: (e) =>
                                (0, y.jsx)(iL, {
                                    activeSearchQuery: m,
                                    dirtySearchQuery: d || m,
                                    setReactionEmojiToDisplay: n,
                                    setSortingItemSelected: t,
                                    searchUrl: _,
                                    nested: e,
                                    setCurrentPage: i,
                                }),
                        }),
                        [m, d, _, i, n, t]
                    ),
                    K = (0, f.useMemo)(
                        () => ({
                            key: "spinner",
                            render: () =>
                                g
                                    ? (0, y.jsx)(su.A, { size: "small" })
                                    : (0, y.jsx)(y.Fragment, {}),
                        }),
                        [g]
                    ),
                    w = (0, f.useMemo)(() => {
                        if (!u) return [];
                        let e = [
                            {
                                key: "authors",
                                render: (e) =>
                                    (0, y.jsx)(sh, {
                                        nested: e,
                                        repo: u,
                                        applySectionFilter: b,
                                    }),
                            },
                            {
                                key: "labels",
                                render: (e) =>
                                    (0, y.jsx)(s_, {
                                        nested: e,
                                        repo: u,
                                        applySectionFilter: b,
                                    }),
                            },
                            {
                                key: "projects",
                                render: (e) =>
                                    (0, y.jsx)(sP, {
                                        nested: e,
                                        repo: u,
                                        applySectionFilter: b,
                                    }),
                            },
                            {
                                key: "milestones",
                                render: (e) =>
                                    (0, y.jsx)(sN, {
                                        nested: e,
                                        repo: u,
                                        applySectionFilter: b,
                                    }),
                            },
                            {
                                key: "assignees",
                                render: (e) =>
                                    (0, y.jsx)(sm, {
                                        nested: e,
                                        repo: u,
                                        applySectionFilter: b,
                                    }),
                            },
                        ];
                        return (
                            r &&
                                e.push({
                                    key: "issue-types",
                                    render: (e) =>
                                        (0, y.jsx)(sC, {
                                            nested: e,
                                            repo: u,
                                            applySectionFilter: b,
                                        }),
                                }),
                            e
                        );
                    }, [b, u, r]),
                    N = (0, f.useMemo)(
                        () => (A.KJ ? [K, ...w, x] : []),
                        [w, x, K]
                    );
                return (0, y.jsx)(si.X, {
                    title: !u && k,
                    sectionFilters:
                        u &&
                        (0, y.jsx)(sq, {
                            applySectionFilter: b,
                            scopedRepository: u,
                        }),
                    onToggleSelectAll: L,
                    density: "condensed",
                    assistiveAnnouncement: g ? U.loadingQueryResults : void 0,
                    actionsLabel: "Actions",
                    actions: N,
                    className: sL.ListViewMetadata_0,
                    ...o,
                });
            }
            try {
                sB.displayName ||
                    (sB.displayName = "ListItemsHeaderWithoutBulkActions");
            } catch {}
            function s$({ ...e }) {
                let { anyItemsSelected: a } = (0, iM.v)();
                return a ? (0, y.jsx)(so, { ...e }) : (0, y.jsx)(sB, { ...e });
            }
            try {
                s$.displayName || (s$.displayName = "ListItemsHeader");
            } catch {}
            var sQ = l(38911);
            let sU = ({ itemsLabel: e }) => {
                let { activeSearchQuery: a } = eM(),
                    { currentUser: l } = (0, e6.J)(),
                    n = (0, f.useMemo)(() => (0, iR.ws)(a), [a]),
                    t = (0, lf.u)("issues_react_bypass_es_limits");
                return (0, y.jsx)("div", {
                    className: "p-2",
                    children: (0, y.jsx)(sQ.l, {
                        description: lc.moreItemsAvailableDescription(
                            E.maxIssuesListItems(t, n, !!l),
                            e
                        ),
                        hideTitle: !0,
                        title: lc.moreItemsAvailableTitle(e),
                    }),
                });
            };
            try {
                sU.displayName ||
                    (sU.displayName = "MoreResultsAvailableBanner");
            } catch {}
            function sH({ key: e }) {
                let { data: a, refetch: l } = (0, er.usePaginationFragment)(
                    nl,
                    e
                );
                return { data: a, refetch: l };
            }
            function sz({
                search: e,
                queryFromCustomView: a,
                listRef: l,
                isBulkSupported: n,
                includeGitDataFromMainQuery: t = !1,
                isInOrganization: i,
                onSidePanelNavigate: s,
            }) {
                let r = `${A.fV.pathname}${A.fV.search}`,
                    { scoped_repository: o } = (0, I.X)(),
                    { currentUser: u } = (0, e6.J)(),
                    {
                        activeSearchQuery: d,
                        currentPage: c,
                        setCurrentPage: m,
                    } = eM(),
                    [g, p] = (0, f.useState)(!1),
                    h = (0, e7.Z)(),
                    k = (0, iT.X)(["mac"]),
                    [b, C] = (0, f.useState)(),
                    { shiftKeyPressedRef: S } = (function () {
                        let e = (0, f.useRef)(!1);
                        return (
                            (0, f.useEffect)(() => {
                                let a = (a) => (e.current = a.shiftKey),
                                    l = () => (e.current = !1);
                                return (
                                    window.addEventListener("keydown", a),
                                    window.addEventListener("keyup", l),
                                    () => {
                                        (window.removeEventListener(
                                            "keydown",
                                            a
                                        ),
                                            window.removeEventListener(
                                                "keyup",
                                                l
                                            ));
                                    }
                                );
                            }, []),
                            { shiftKeyPressedRef: e }
                        );
                    })(),
                    { issues_react_bypass_es_limits: F } = (0, lf.h)(),
                    [L, _] = (0, ly.useQueryLoader)(im),
                    { data: x, refetch: K } = sH({ key: e }),
                    w = null === x.search || void 0 === x.search,
                    N = x.search?.ok ? null : x.search?.errors;
                if (!x.search.ok) {
                    let e = N?.some(
                            (e) =>
                                e &&
                                "object" == typeof e &&
                                "type" in e &&
                                "SERVICE_UNAVAILABLE" === e.type
                        ),
                        a = Error(
                            `ListItemsPaginated: pageData.search.value.edges is errored. Errors: ${JSON.stringify(N)}`
                        );
                    throw ((a.shouldSkipReport = e ?? !1), a);
                }
                let { ok: j, value: { edges: R, issueCount: T } = {} } =
                        x.search,
                    P = null != R,
                    M = !w && j && P,
                    [D, V] = (0, f.useState)(!1),
                    q = (0, f.useMemo)(() => {
                        let e = x.id && "RootQueryObject" !== x.id;
                        return !D && w && e;
                    }, [D, w, x]);
                ((0, f.useEffect)(() => {
                    (0, nn.i)(U.numberOfResults(T || 0), { assertive: !0 });
                }, [T]),
                    (0, f.useEffect)(() => {
                        if (q)
                            return K(
                                {},
                                {
                                    fetchPolicy: "network-only",
                                    onComplete: () => V(!0),
                                }
                            ).dispose;
                    }, [d, K, w, q]));
                let O = (0, f.useMemo)(
                        () =>
                            R
                                ? R.map((e) =>
                                      e?.node &&
                                      ("PullRequest" === e.node.__typename ||
                                          "Issue" === e.node.__typename)
                                          ? e.node
                                          : null
                                  ).filter((e) => null != e)
                                : [],
                        [R]
                    ),
                    B = (0, f.useRef)(null),
                    $ = (0, f.useMemo)(() => (0, iR.ws)(d), [d]),
                    Q = E.maxIssuesListItems(F || !1, $, !!u),
                    H = (0, f.useMemo)(
                        () =>
                            T
                                ? Math.ceil(Math.min(Q, T) / E.issuesPageSize())
                                : 0,
                        [T, Q]
                    ),
                    {
                        getQueryFieldUrl: z,
                        getAdditiveQueryFieldUrl: W,
                        navigateToUrl: G,
                    } = lS(),
                    Z = (0, f.useCallback)(
                        (e, a) => {
                            if ((k ? e.metaKey : e.ctrlKey) || e.shiftKey)
                                return;
                            e.preventDefault();
                            let l = eI(r, a);
                            (m(a), G(l));
                        },
                        [k, r, m, G]
                    ),
                    X = (0, f.useCallback)((e) => eI(r, e), [r]),
                    {
                        initialSortingItem: J,
                        initialReactionEmojiToDisplay: Y,
                    } = (0, f.useMemo)(() => {
                        let e = (0, iR.mA)(a || d).get("sort"),
                            l = iI(e?.[0] || ""),
                            n = i_(l),
                            t = ik.qG[n || ""];
                        return {
                            initialSortingItem: l || "created",
                            initialReactionEmojiToDisplay: t
                                ? { reaction: n || "", reactionEmoji: t }
                                : void 0,
                        };
                    }, [d, a]),
                    [ee, ea] = (0, f.useState)(Y),
                    [el, en] = (0, f.useState)(J),
                    [et, ei] = (0, f.useState)(!1),
                    { sendAnalyticsEvent: es } = (0, lo.s)(),
                    er = (0, f.useMemo)(
                        () =>
                            n &&
                            !(function (e) {
                                let a = l2(e),
                                    l = new Set([
                                        ...(a.get("is") || []),
                                        ...(a.get("type") || []),
                                    ]);
                                return (
                                    0 === l.size ||
                                    !l.has("issue") ||
                                    l.has("pr") ||
                                    l.has("pull-request")
                                );
                            })(d),
                        [d, n]
                    ),
                    [eo, eu] = (0, f.useState)(() => new Map()),
                    ed = (e) => {
                        ei(
                            Array.from(e.values()).some(
                                (e) => "PullRequest" === e.__typename
                            )
                        );
                    },
                    ec = (0, f.useCallback)(
                        (e, a, l, n) => {
                            let t = O.findIndex((e) => e.id === a),
                                i = O.findIndex((e) => e.id === l);
                            for (
                                let a = Math.min(t, i);
                                a <= Math.max(t, i);
                                a++
                            ) {
                                let l = O[a];
                                (n ? e.set(l.id, l) : e.delete(l.id), ed(e));
                            }
                        },
                        [O]
                    ),
                    em = (0, f.useCallback)(
                        (e, a, l) => {
                            let n = new Map(eo);
                            (S.current && b
                                ? ec(n, b.id, e, l)
                                : (l ? n.set(e, a) : n.delete(e), ed(n)),
                                eu(n),
                                C({ id: e, node: a }));
                        },
                        [ec, eo, b, S]
                    );
                ((0, f.useEffect)(() => {
                    Array.from(eo.values()).find(
                        (e) => !O.find((a) => a === e)
                    ) &&
                        eu(
                            O.reduce(
                                (e, a) => (
                                    a && eo.has(a.id) && e.set(a.id, a),
                                    e
                                ),
                                new Map()
                            )
                        );
                }, [eo, O]),
                    (0, f.useEffect)(() => {
                        let e = ((e) => {
                            let a = new URLSearchParams(e).get("page");
                            return a ? parseInt(a, 10) : 1;
                        })(A.fV.search);
                        (m(e > 1 ? e : 1), eu(new Map()));
                    }, [m, r]));
                let eg = (0, y.jsx)(s$, {
                        checkedItems: eo,
                        issueCount: T || 0,
                        issueNodes: O.filter((e) => null != e).reduce(
                            (e, a) => (a && e.push(a), e),
                            []
                        ),
                        sortingItemSelected: el,
                        setCheckedItems: eu,
                        setReactionEmojiToDisplay: ea,
                        setSortingItemSelected: en,
                        useBulkActions: er,
                        setCurrentPage: m,
                        listHasPRs: et,
                        updateListHasPRs: ed,
                        isInOrganization: i,
                    }),
                    ep = (0, f.useCallback)(
                        (e) => {
                            es(
                                "search_results.select_row",
                                "SEARCH_RESULT_ROW",
                                { ...e }
                            );
                        },
                        [es]
                    ),
                    ey = new Set(O?.map((e) => e?.__typename) || []),
                    eh = (0, f.useCallback)((e, a = {}) => G(e, a, !0), [G]),
                    [ek] = (0, iP.Fo)(
                        `${o?.owner}-${o?.name}-deletedRecordId`,
                        ""
                    ),
                    ef = (0, f.useMemo)(
                        () =>
                            O.map((e) => e?.id)
                                .filter((e) => e !== ek)
                                .filter(Boolean),
                        [O, ek]
                    ),
                    eb = null !== L;
                (0, f.useEffect)(() => {
                    A.X3 || _({ nodes: ef, includeReactions: !!Y });
                }, [Y, _, ef, eb]);
                let eC = O?.map((e) => {
                    let a = {
                        isActive: !1,
                        isSelected: !!(e && eo.has(e.id)),
                        getMetadataHref: z,
                        onSelect: (a) => e && em(e.id, e, a),
                        onSelectRow: ep,
                        reactionEmojiToDisplay: ee,
                        sortingItemSelected: el,
                        scopedRepository: o,
                    };
                    return null == e || e.id === ek
                        ? null
                        : (0, y.jsxs)(
                              "div",
                              {
                                  className: sV.listItem,
                                  children: [
                                      "Issue" === e.__typename &&
                                          (0, y.jsx)(
                                              ip,
                                              {
                                                  issueKey: e,
                                                  metadataRef: L,
                                                  ...a,
                                                  "data-testid":
                                                      l8.issueRowItem(
                                                          e?.number || "-1"
                                                      ),
                                                  onNavigate: (e, a) =>
                                                      eh(e, a),
                                                  onSidePanelNavigate: s,
                                                  getMetadataHref: z,
                                                  getAdditiveMetadataHref: W,
                                              },
                                              e.id
                                          ),
                                      "PullRequest" === e.__typename &&
                                          (0, y.jsx)(
                                              th,
                                              {
                                                  pullRequestKey: e,
                                                  metadataRef: L,
                                                  onNavigate: h,
                                                  ...a,
                                                  "data-testid":
                                                      l8.pullRequestRowItem(
                                                          e?.number || "-1"
                                                      ),
                                                  getMetadataHref: z,
                                                  includeGitDataFromMainQuery:
                                                      t,
                                              },
                                              e.id
                                          ),
                                  ],
                              },
                              e.id
                          );
                });
                (0, f.useEffect)(() => {
                    g &&
                        c &&
                        ((0, nn.i)(U.announcePage(c, H, eC.length)), p(!1));
                }, [c, g, eC.length, H]);
                let eS = void 0 !== c && H === c && void 0 !== T && T > Q,
                    eF = () => {
                        if (l.current) {
                            let e = l.current.querySelector('[tabindex="0"]');
                            e && e instanceof HTMLElement && e.focus();
                        }
                    },
                    ev = (0, y.jsxs)(y.Fragment, {
                        children: [
                            (0, y.jsx)(nr.ak, {
                                commands: {
                                    "issues-react:focus-next-issue": eF,
                                    "issues-react:focus-previous-issue": eF,
                                },
                            }),
                            (0, y.jsx)("div", {
                                "data-testid": "list-load-progress-bar",
                                ref: B,
                                className: (0, l7.$)(
                                    "turbo-progress-bar",
                                    sV.progressBar
                                ),
                            }),
                            (0, y.jsx)(nr.tL, {
                                commands: {
                                    "issues-react:focus-next-issue": v.l,
                                    "issues-react:focus-previous-issue": v.l,
                                },
                                className: sV.listScopedCommand,
                                children: (0, y.jsxs)(nt.u, {
                                    ...(0, nk.G)(l8.list),
                                    title: U.searchResults,
                                    totalCount: T || 0,
                                    selectedCount: eo.size,
                                    titleHeaderTag: "h2",
                                    isSelectable: er,
                                    metadata: eg,
                                    singularUnits: U.singularUnits(ey),
                                    pluralUnits: U.pluralUnits(ey),
                                    listRef: l,
                                    children: [
                                        eC,
                                        0 === eC.length &&
                                            M &&
                                            (0, y.jsx)(iy, {}),
                                        eS &&
                                            (0, y.jsx)(sU, {
                                                itemsLabel:
                                                    U.pluralUnits(ey) ??
                                                    "issues",
                                            }),
                                    ],
                                }),
                            }),
                        ],
                    });
                return (0, y.jsxs)("div", {
                    children: [
                        (0, y.jsx)("div", {
                            "data-hpc": !0,
                            className: sV.listContainer,
                            children: ev,
                        }),
                        c && H > 1
                            ? (0, y.jsx)(iA.A, {
                                  pageCount: H,
                                  currentPage: c,
                                  onPageChange: Z,
                                  hrefBuilder: X,
                                  marginPageCount: 2,
                                  surroundingPageCount: 2,
                              })
                            : null,
                    ],
                });
            }
            try {
                sH.displayName || (sH.displayName = "SearchFunction");
            } catch {}
            try {
                sz.displayName || (sz.displayName = "ListItems");
            } catch {}
            function sW({
                itemIdentifier: e,
                query: a,
                search: l,
                repository: n,
                loadSearchQuery: t,
                queryFromCustomView: i,
                listRef: s,
                onSidePanelNavigate: r,
            }) {
                let o = (0, er.useFragment)(lE, l),
                    { scoped_repository: u } = (0, I.X)(),
                    { pathname: d } = (0, _.zy)(),
                    c = e?.number === void 0 && "/issues/new" !== d,
                    m = (0, er.useFragment)(lq, n),
                    g =
                        m &&
                        m.viewerCanPush &&
                        !(m.isDisabled || m.isLocked || m.isArchived),
                    p = [
                        (0, y.jsx)(
                            lO.L,
                            { title: "Open", isLoading: !0, href: "" },
                            "open"
                        ),
                        (0, y.jsx)(
                            lO.L,
                            { title: "Closed", isLoading: !0, href: "" },
                            "closed"
                        ),
                    ];
                return (0, y.jsx)(f.Suspense, {
                    fallback: (0, y.jsx)(lX, {
                        sectionFilters: p,
                        showBorder: c,
                        layoutDensity: "default",
                        pageSize: E.issuesPageSize(),
                    }),
                    children: (0, y.jsx)(l3.A, {
                        critical: !0,
                        fallback: ne,
                        onRetry: () => {
                            a &&
                                t &&
                                t(
                                    {
                                        query: lY(a, u),
                                        owner: u ? u.owner : "",
                                        name: u ? u.name : "",
                                    },
                                    { fetchPolicy: "network-only" }
                                );
                        },
                        children: (0, y.jsx)(sz, {
                            search: o,
                            queryFromCustomView: i,
                            listRef: s,
                            isBulkSupported: g ?? !1,
                            onSidePanelNavigate: r,
                            isInOrganization: m?.isInOrganization ?? !1,
                        }),
                    }),
                });
            }
            try {
                sW.displayName || (sW.displayName = "SearchList");
            } catch {}
            let sG = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "name",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "DashboardEditViewActionsFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "icon",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "query",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "scopingRepository",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Shortcutable",
                    abstractKey: "__isShortcutable",
                };
            })();
            sG.hash = "3b84c25573420783a2b736065a76b8a7";
            let sZ = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "removeUserViewMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType:
                                    "RemoveDashboardSearchShortcutPayload",
                                kind: "LinkedField",
                                name: "removeDashboardSearchShortcut",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "UserDashboard",
                                        kind: "LinkedField",
                                        name: "dashboard",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "SavedViewsShortcutsFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "SearchShortcut",
                                        kind: "LinkedField",
                                        name: "shortcut",
                                        plural: !1,
                                        selections: [l],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "removeUserViewMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType:
                                    "RemoveDashboardSearchShortcutPayload",
                                kind: "LinkedField",
                                name: "removeDashboardSearchShortcut",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "UserDashboard",
                                        kind: "LinkedField",
                                        name: "dashboard",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 25,
                                                    },
                                                ],
                                                concreteType:
                                                    "SearchShortcutConnection",
                                                kind: "LinkedField",
                                                name: "shortcuts",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "totalCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchShortcut",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            l,
                                                            n,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "query",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "icon",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "color",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "description",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "scopingRepository",
                                                                plural: !1,
                                                                selections: [
                                                                    n,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "owner",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "__typename",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "login",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                l,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    l,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "shortcuts(first:25)",
                                            },
                                            l,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "SearchShortcut",
                                        kind: "LinkedField",
                                        name: "shortcut",
                                        plural: !1,
                                        selections: [
                                            l,
                                            {
                                                alias: null,
                                                args: null,
                                                filters: null,
                                                handle: "deleteRecord",
                                                key: "",
                                                kind: "ScalarHandle",
                                                name: "id",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "04e470162ffcd70b1897b4670789bad9",
                        metadata: {},
                        name: "removeUserViewMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function sX({
                environment: e,
                input: { shortcutId: a },
                onCompleted: l,
                onError: n,
            }) {
                return (0, er.commitMutation)(e, {
                    mutation: sZ,
                    variables: { input: { shortcutId: a } },
                    onCompleted: (e) => l && l(e),
                    onError: (e) => n && n(e),
                });
            }
            sZ.hash = "245da169b3f76a221246bc00c4db41b4";
            let sJ = { gap8: "DashboardEditViewActions-module__gap8--lh6te" };
            function sY({ currentView: e }) {
                let {
                        id: a,
                        color: l,
                        name: n,
                        description: t,
                        icon: i,
                        scopingRepository: s,
                        query: r,
                    } = (0, er.useFragment)(sG, e),
                    o = (0, er.useRelayEnvironment)(),
                    { pathname: u } = (0, _.zy)(),
                    { navigateToView: d } = lS(),
                    {
                        setIsEditing: c,
                        setIsNewView: m,
                        dirtyViewId: g,
                        isNewView: p,
                    } = eM(),
                    {
                        dirtyTitle: h,
                        dirtyDescription: k,
                        commitUserViewEdit: b,
                        dirtySearchQuery: C,
                        dirtyViewIcon: S,
                        dirtyViewColor: F,
                        clearSavedViewEditState: L,
                    } = eD(),
                    { sendAnalyticsEvent: I } = (0, lo.s)(),
                    { author: x, assignee: K, mentioned: w } = (0, _.g)(),
                    N = `${en.defaultQuery} ${en.query({ author: x, assignee: K, mentioned: w, createdByApp: ek(u) })}`,
                    j = eh(u) ? N : r,
                    R = s ? `repo:${s.owner.login}/${s.name} ${j}` : `${j}`,
                    T = (0, f.useCallback)(() => {
                        let e = {
                            viewName: lI(h) ? h : n,
                            viewDescription: lI(k) ? k : t,
                            viewIcon: lI(S) ? S : i,
                            viewColor: lI(F) ? F : l,
                            viewQuery: lI(C) ? C : R,
                        };
                        "" !== e.viewName.trim() &&
                            (I("search.save", "FILTER_BAR_SAVE_BUTTON", {
                                new_color: e.viewColor,
                                new_icon: e.viewIcon,
                                new_query: e.viewQuery,
                                new_view_description: e.viewDescription,
                                new_view_name: e.viewName,
                                prev_color: l,
                                prev_icon: i,
                                prev_query: R,
                                prev_view_description: t,
                                prev_view_name: n,
                            }),
                            b({
                                viewId: a,
                                ...e,
                                onSuccess: () => {
                                    let e = ll({ viewId: a });
                                    ((0, an.bj)(e), c(!1));
                                },
                                relayEnvironment: o,
                            }),
                            m(!1),
                            L());
                    }, [h, I, F, S, C, k, l, i, R, t, n, a, o, b, m, L, c]),
                    P = (0, f.useCallback)(() => {
                        void 0 !== g &&
                            sX({
                                environment: o,
                                input: { shortcutId: g },
                                onError: () => v.l,
                                onCompleted: () => {
                                    d({ viewId: W.id, canEditView: !0 });
                                },
                            });
                    }, [g, d, o]),
                    A = (0, f.useCallback)(() => {
                        (c(!1),
                            p && P(),
                            m(!1),
                            L(),
                            d({ viewId: a, canEditView: !0 }));
                    }, [c, p, m, L, d, a, P]);
                return (0, y.jsxs)("div", {
                    className: `${sJ.gap8} d-flex flex-row`,
                    children: [
                        (0, y.jsx)(lT.Q, { onClick: A, children: lP.cancel }),
                        (0, y.jsx)(lT.Q, {
                            variant: "primary",
                            onClick: T,
                            children: lP.saveView,
                        }),
                    ],
                });
            }
            try {
                sY.displayName || (sY.displayName = "DashboardEditViewActions");
            } catch {}
            let s1 = {
                    searchContainer:
                        "DashboardSearch-module__searchContainer--lF_IA",
                    actions: "DashboardSearch-module__actions--FG79W",
                },
                s2 = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "DashboardSearchBarActionsFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "icon",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "query",
                            storageKey: null,
                        },
                    ],
                    type: "Shortcutable",
                    abstractKey: "__isShortcutable",
                };
            s2.hash = "682b1e8a44de9aaf4d1a1b28c4aa0972";
            let s0 = {
                searchBarContainer:
                    "DashboardSearchBarActions-module__searchBarContainer--DXH6Q",
                menuOverlay:
                    "DashboardSearchBarActions-module__menuOverlay--aTe9Y",
                warning: "DashboardSearchBarActions-module__warning--JCw50",
            };
            function s3({ currentView: e }) {
                let {
                        id: a,
                        name: l,
                        query: n,
                        description: t,
                        color: i,
                        icon: s,
                    } = (0, er.useFragment)(s2, e),
                    r = (0, er.useRelayEnvironment)(),
                    { addToast: o } = (0, x.Y6)(),
                    {
                        isCustomView: u,
                        canEditView: d,
                        savedViewsCount: c,
                    } = eM(),
                    { navigateToSavedView: m, navigateToUrl: g } = lS(),
                    {
                        commitUserViewDuplicate: p,
                        commitUserViewEdit: h,
                        dirtySearchQuery: k,
                    } = eD(),
                    b = a !== F.repository && (d || !u),
                    C = u(a) && d,
                    S = null !== k && n?.trim() !== k?.trim(),
                    v = c >= E.viewsPageSize,
                    L = (0, f.useCallback)(() => {
                        p({
                            viewName: l,
                            viewIcon: s,
                            viewColor: i,
                            viewDescription: t,
                            viewQuery: null === k ? n : k,
                            onError: () =>
                                o({
                                    type: "error",
                                    message: U.views.duplicateError,
                                }),
                            relayEnvironment: r,
                            onSuccess: ({
                                createDashboardSearchShortcut: e,
                            }) => {
                                e?.shortcut &&
                                    m(e.shortcut.id, { isEditing: !1 });
                            },
                        });
                    }, [k, n, l, s, i, t, r, p, o, m]),
                    I = (0, f.useCallback)(() => {
                        h({
                            viewId: a,
                            viewQuery: null === k ? n : k,
                            viewName: l,
                            viewIcon: s,
                            viewColor: i,
                            viewDescription: t,
                            onSuccess: () => {
                                g(ll({ viewId: a }));
                            },
                            relayEnvironment: r,
                        });
                    }, [k, n, a, l, s, i, t, r, h, g]),
                    _ = [
                        {
                            icon: (0, y.jsx)(P.BookmarkIcon, {}),
                            text: "Save changes",
                            onSelect: I,
                            enabled: C,
                        },
                        {
                            icon: (0, y.jsx)(P.DuplicateIcon, {}),
                            text: "Save changes to new view",
                            onSelect: L,
                            enabled: b && !v,
                            showDescription: !!(b && v),
                            description: U.views.maxViewsReached,
                        },
                    ];
                return (0, y.jsx)("div", {
                    className: s0.searchBarContainer,
                    children: (0, y.jsxs)(ib.W, {
                        children: [
                            (0, y.jsx)(ib.W.Button, {
                                disabled: !S || !C,
                                children: "Save",
                            }),
                            (0, y.jsx)(ib.W.Overlay, {
                                className: s0.menuOverlay,
                                children: (0, y.jsx)(lQ.l, {
                                    children: _.map((e) =>
                                        (0, y.jsxs)(
                                            lQ.l.Item,
                                            {
                                                onSelect: e.onSelect,
                                                disabled: !e.enabled,
                                                children: [
                                                    (0, y.jsx)(
                                                        lQ.l.LeadingVisual,
                                                        { children: e.icon }
                                                    ),
                                                    e.text,
                                                    e.showDescription &&
                                                        (0, y.jsx)(
                                                            lQ.l.Description,
                                                            {
                                                                variant:
                                                                    "block",
                                                                children: (0,
                                                                y.jsx)("span", {
                                                                    className:
                                                                        s0.warning,
                                                                    children:
                                                                        e.description,
                                                                }),
                                                            }
                                                        ),
                                                ],
                                            },
                                            e.text
                                        )
                                    ),
                                }),
                            }),
                        ],
                    }),
                });
            }
            try {
                s3.displayName ||
                    (s3.displayName = "DashboardSearchBarActions");
            } catch {}
            function s4({
                itemIdentifier: e,
                currentView: a,
                search: l,
                loadSearchQuery: n,
                onSidePanelNavigate: t,
                showSsoBanner: i = !0,
            }) {
                let { ssoOrgs: s } = (0, aG.N)(),
                    r = s.map((e) => e.login).filter((e) => void 0 !== e),
                    o = (0, er.useFragment)(aH, l),
                    u = (0, er.useFragment)(az, a),
                    { activeSearchQuery: d, isNewView: c, isEditing: m } = eM(),
                    g = (0, f.useRef)(void 0),
                    p = c && !d,
                    h = m
                        ? (0, y.jsx)(sY, { currentView: u })
                        : (0, y.jsx)(s3, { currentView: u });
                return (0, y.jsxs)("div", {
                    className: s1.searchContainer,
                    children: [
                        (0, y.jsx)(lV, {
                            currentViewKey: u,
                            currentRepository: null,
                            queryFromCustomView: u.query,
                            children: (0, y.jsx)("div", {
                                className: s1.actions,
                                children: h,
                            }),
                        }),
                        p
                            ? (0, y.jsx)(a3, {})
                            : (0, y.jsxs)(y.Fragment, {
                                  children: [
                                      i &&
                                          (0, y.jsx)(aW.x, {
                                              protectedOrgs: r,
                                          }),
                                      (0, y.jsx)(sW, {
                                          itemIdentifier: e,
                                          search: o,
                                          repository: null,
                                          loadSearchQuery: n,
                                          query: d,
                                          listRef: g,
                                          onSidePanelNavigate: t,
                                      }),
                                  ],
                              }),
                    ],
                });
            }
            try {
                s4.displayName || (s4.displayName = "DashboardSearch");
            } catch {}
            let s5 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "HeaderCurrentViewFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "query",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "HeaderContentCurrentViewFragment",
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            s5.hash = "3bfaf6f707910045da8c4fd0f5829990";
            var s7 = l(39627),
                s6 = l(85466);
            let s9 = {
                    HeaderCreateIssueContainer:
                        "Header-module__HeaderCreateIssueContainer--ytbKZ",
                    leftSideContent: "Header-module__leftSideContent--IswrG",
                    Button: "Header-module__Button--BE12X",
                    Truncate: "Header-module__Truncate--EwifB",
                    HeaderListContainer:
                        "Header-module__HeaderListContainer--tO0uj",
                    mobileNavigationContainer:
                        "Header-module__mobileNavigationContainer--YuujR",
                    allViewsButton: "Header-module__allViewsButton--HbKXP",
                    actionButtonsContainer:
                        "Header-module__actionButtonsContainer--fnlog",
                },
                s8 = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "HeaderContentCurrentViewFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IconAndColorPickerViewFragment",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "ViewOptionsButtonCurrentViewFragment",
                        },
                    ],
                    type: "Shortcutable",
                    abstractKey: "__isShortcutable",
                };
            s8.hash = "f305cee1d125371a31f8f260f6725199";
            var re = l(50363),
                ra = l(66268),
                rl = l(9591);
            let rn = {
                    HeaderContentContainer:
                        "HeaderContent-module__HeaderContentContainer--Zzgvp",
                    editingModeContainer:
                        "HeaderContent-module__editingModeContainer--qaT61",
                    iconTitleInputRow:
                        "HeaderContent-module__iconTitleInputRow--mrZAv",
                    FormControl: "HeaderContent-module__FormControl--yb1p7",
                    TextInput: "HeaderContent-module__TextInput--VemZS",
                    displayModeContainer:
                        "HeaderContent-module__displayModeContainer--SLH22",
                    titleOptionsRow:
                        "HeaderContent-module__titleOptionsRow--hWzIH",
                    Heading: "HeaderContent-module__Heading--L4_WE",
                    descriptionText:
                        "HeaderContent-module__descriptionText--jtBr4",
                },
                rt = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IconAndColorPickerViewFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "icon",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                    ],
                    type: "Shortcutable",
                    abstractKey: "__isShortcutable",
                };
            rt.hash = "1c65d9cf28b7c9542ac14b219f1610b8";
            var ri = l(3971);
            let rs = {
                anchoredOverlay:
                    "IconAndColorPicker-module__anchoredOverlay--YlETW",
                iconDisplayContainer:
                    "IconAndColorPicker-module__iconDisplayContainer--ptmWB",
                overlayContent:
                    "IconAndColorPicker-module__overlayContent--veD3B",
                sectionLabel: "IconAndColorPicker-module__sectionLabel--OEx_G",
                colorSelectionGrid:
                    "IconAndColorPicker-module__colorSelectionGrid--KBoc4",
                iconSelectionGrid:
                    "IconAndColorPicker-module__iconSelectionGrid--Ph4NU",
                actionButtonsContainer:
                    "IconAndColorPicker-module__actionButtonsContainer--AKHsO",
            };
            function rr({ readOnly: e, currentView: a }) {
                let { isEditing: l, isNewView: n } = eM(),
                    { icon: t, color: i } = (0, er.useFragment)(rt, a),
                    {
                        dirtyViewIcon: s,
                        setDirtyViewIcon: r,
                        dirtyViewColor: o,
                        setDirtyViewColor: u,
                    } = eD(),
                    d = (0, f.useCallback)((e) => {
                        m(e);
                    }, []),
                    [c, m] = (0, f.useState)(!1),
                    g = (0, f.useCallback)(() => {
                        d(!1);
                    }, [d]),
                    p = (0, f.useCallback)(
                        (e) => {
                            r(e);
                        },
                        [r]
                    ),
                    h = (0, f.useCallback)(
                        (e) => {
                            u(e);
                        },
                        [u]
                    ),
                    k = (0, f.useCallback)(() => {
                        (d(!1), r(null), u(null));
                    }, [d, r, u]),
                    b = s || (n ? E.defaultViewIcon : t),
                    C = o || (n ? E.defaultViewColor : i),
                    S = O(b),
                    F = R[C],
                    v = T[C];
                return e || !l
                    ? (0, y.jsx)(ae.A, {
                          sx: { backgroundColor: F, color: v },
                          className: rs.iconDisplayContainer,
                          children: (0, y.jsx)(l5.A, { icon: O(t) }),
                      })
                    : (0, y.jsx)(ri.T, {
                          renderAnchor: (e) =>
                              (0, y.jsx)("div", {
                                  ...e,
                                  children: (0, y.jsx)(aU.K, {
                                      ...e,
                                      "aria-labelledby": void 0,
                                      "aria-label":
                                          U.views.iconAndColorAnchorAriaLabel,
                                      icon: S,
                                      size: "medium",
                                      variant: "invisible",
                                      onClick: () => d(!c),
                                      id: "edit-view-icon-button",
                                      sx: { backgroundColor: F, color: v },
                                  }),
                              }),
                          focusZoneSettings: { disabled: !0 },
                          focusTrapSettings: { restoreFocusOnCleanUp: !0 },
                          open: c,
                          onOpen: () => d(!0),
                          onClose: k,
                          className: rs.anchoredOverlay,
                          children: (0, y.jsxs)("div", {
                              className: rs.overlayContent,
                              children: [
                                  (0, y.jsx)("span", {
                                      className: rs.sectionLabel,
                                      children: U.views.color,
                                  }),
                                  (0, y.jsx)("div", {
                                      className: rs.colorSelectionGrid,
                                      "data-testid": "color-selection-grid",
                                      children: N.map((e) => {
                                          let a = T[e],
                                              l = R[e],
                                              n = e === C,
                                              t = j[e] ?? e;
                                          return (0, y.jsx)(
                                              aU.K,
                                              {
                                                  icon: n
                                                      ? P.CheckCircleFillIcon
                                                      : P.CircleIcon,
                                                  "aria-label": t,
                                                  "aria-checked": n,
                                                  role: "radio",
                                                  variant: "invisible",
                                                  sx: {
                                                      "&:hover:not([aria-disabled])":
                                                          {
                                                              backgroundColor: n
                                                                  ? a
                                                                  : l,
                                                              color: n
                                                                  ? "fg.onEmphasis"
                                                                  : a,
                                                          },
                                                      backgroundColor: n
                                                          ? a
                                                          : "transparent",
                                                  },
                                                  onClick: () => h(e),
                                              },
                                              e
                                          );
                                      }),
                                  }),
                                  (0, y.jsx)("span", {
                                      className: rs.sectionLabel,
                                      children: U.views.icon,
                                  }),
                                  (0, y.jsx)("div", {
                                      className: rs.iconSelectionGrid,
                                      "data-testid": "icon-selection-grid",
                                      children: Object.keys($).map((e) => {
                                          let a = e === b;
                                          return (0, y.jsx)(
                                              aU.K,
                                              {
                                                  unsafeDisableTooltip: !0,
                                                  icon: O(e),
                                                  "aria-label": e,
                                                  "aria-checked": a,
                                                  role: "radio",
                                                  variant: "invisible",
                                                  sx: {
                                                      "&:hover:not([aria-disabled])":
                                                          {
                                                              backgroundColor:
                                                                  F,
                                                          },
                                                      "&:focus:not([aria-disabled])":
                                                          {
                                                              backgroundColor: a
                                                                  ? v
                                                                  : "transparent",
                                                          },
                                                      backgroundColor: a
                                                          ? v
                                                          : "transparent",
                                                  },
                                                  onClick: () => p(e),
                                              },
                                              e
                                          );
                                      }),
                                  }),
                                  (0, y.jsxs)("div", {
                                      className: rs.actionButtonsContainer,
                                      children: [
                                          (0, y.jsx)(lT.Q, {
                                              onClick: k,
                                              children: lP.cancel,
                                          }),
                                          (0, y.jsx)(lT.Q, {
                                              variant: "primary",
                                              onClick: g,
                                              children: lP.apply,
                                          }),
                                      ],
                                  }),
                              ],
                          }),
                      });
            }
            try {
                rr.displayName || (rr.displayName = "IconAndColorPicker");
            } catch {}
            let ro = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ViewOptionsButtonCurrentViewFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "icon",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "query",
                        storageKey: null,
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            ro.hash = "62dca5895718c106a2f717dbe6980390";
            var ru = l(90851),
                rd = l(53526);
            let rc = { warning: "ViewOptionsButton-module__warning--_mS9K" },
                rm = ({ currentView: e }) => {
                    let {
                            id: a,
                            name: l,
                            query: n,
                            description: t,
                            color: i,
                            icon: s,
                        } = (0, er.useFragment)(ro, e),
                        {
                            isCustomView: r,
                            setIsEditing: o,
                            canEditView: u,
                            savedViewsCount: d,
                        } = eM(),
                        { commitUserViewDuplicate: c } = eD(),
                        m = (0, er.useRelayEnvironment)(),
                        g = d >= E.viewsPageSize,
                        p = (0, f.useRef)(null),
                        [h, k] = (0, f.useState)(!1),
                        b = (0, ru.M)(h),
                        { addToast: C } = (0, x.Y6)(),
                        { navigateToSavedView: S, navigateToView: v } = lS(),
                        L = (0, rd.S)(),
                        I = (0, f.useCallback)(() => {
                            o(!0);
                        }, [o]),
                        _ = (0, f.useCallback)(() => {
                            c({
                                viewName: l,
                                viewIcon: s,
                                viewColor: i,
                                viewDescription: t,
                                viewQuery: n,
                                onError: () =>
                                    C({
                                        type: "error",
                                        message: U.views.duplicateError,
                                    }),
                                relayEnvironment: m,
                                onSuccess: ({
                                    createDashboardSearchShortcut: e,
                                }) => {
                                    e?.shortcut &&
                                        S(e.shortcut.id, { isEditing: !1 });
                                },
                            });
                        }, [l, s, i, t, n, m, C, c, S]);
                    (0, f.useEffect)(() => {
                        b.current && !h && p.current?.focus();
                    }, [h, b]);
                    let K = (0, f.useCallback)(async () => {
                            if (a) {
                                if (
                                    (k(!0),
                                    !(await L({
                                        title: U.views.deleteTitle,
                                        content: U.views.deleteContent(l),
                                        confirmButtonContent:
                                            U.views.deleteConfirmationButton,
                                        confirmButtonType: "danger",
                                    })))
                                )
                                    return void k(!1);
                                (sX({
                                    environment: m,
                                    input: { shortcutId: a },
                                    onError: () =>
                                        C({
                                            type: "error",
                                            message: U.views.deleteError,
                                        }),
                                    onCompleted: () => {
                                        v({ viewId: W.id, canEditView: !0 });
                                    },
                                }),
                                    k(!1));
                            }
                        }, [C, L, v, m, a, l]),
                        w = a !== F.repository && (u || !r),
                        N = r(a) && u;
                    return N || w
                        ? (0, y.jsxs)(ib.W, {
                              children: [
                                  (0, y.jsx)(ib.W.Anchor, {
                                      children: (0, y.jsx)(aU.K, {
                                          icon: P.KebabHorizontalIcon,
                                          "aria-label":
                                              U.views.editButtonAriaLabel,
                                          variant: "invisible",
                                          ref: p,
                                      }),
                                  }),
                                  (0, y.jsx)(ib.W.Overlay, {
                                      width: "small",
                                      children: (0, y.jsxs)(lQ.l, {
                                          children: [
                                              N &&
                                                  (0, y.jsxs)(lQ.l.Item, {
                                                      onSelect: I,
                                                      children: [
                                                          (0, y.jsx)(
                                                              lQ.l
                                                                  .LeadingVisual,
                                                              {
                                                                  children: (0,
                                                                  y.jsx)(
                                                                      P.PencilIcon,
                                                                      {}
                                                                  ),
                                                              }
                                                          ),
                                                          U.views.edit,
                                                      ],
                                                  }),
                                              w &&
                                                  (0, y.jsxs)(lQ.l.Item, {
                                                      onSelect: _,
                                                      disabled: g,
                                                      children: [
                                                          (0, y.jsx)(
                                                              lQ.l
                                                                  .LeadingVisual,
                                                              {
                                                                  children: (0,
                                                                  y.jsx)(
                                                                      P.DuplicateIcon,
                                                                      {}
                                                                  ),
                                                              }
                                                          ),
                                                          U.views.duplicate,
                                                          g &&
                                                              (0, y.jsx)(
                                                                  lQ.l
                                                                      .Description,
                                                                  {
                                                                      variant:
                                                                          "block",
                                                                      children:
                                                                          (0,
                                                                          y.jsx)(
                                                                              "span",
                                                                              {
                                                                                  className:
                                                                                      rc.warning,
                                                                                  children:
                                                                                      U
                                                                                          .views
                                                                                          .maxViewsReached,
                                                                              }
                                                                          ),
                                                                  }
                                                              ),
                                                      ],
                                                  }),
                                              N &&
                                                  (0, y.jsxs)(y.Fragment, {
                                                      children: [
                                                          (0, y.jsx)(
                                                              lQ.l.Divider,
                                                              {}
                                                          ),
                                                          (0, y.jsxs)(
                                                              lQ.l.Item,
                                                              {
                                                                  variant:
                                                                      "danger",
                                                                  onSelect: K,
                                                                  children: [
                                                                      (0,
                                                                      y.jsx)(
                                                                          lQ.l
                                                                              .LeadingVisual,
                                                                          {
                                                                              children:
                                                                                  (0,
                                                                                  y.jsx)(
                                                                                      P.TrashIcon,
                                                                                      {}
                                                                                  ),
                                                                          }
                                                                      ),
                                                                      U.views
                                                                          .delete,
                                                                  ],
                                                              }
                                                          ),
                                                      ],
                                                  }),
                                          ],
                                      }),
                                  }),
                              ],
                          })
                        : null;
                };
            try {
                rm.displayName || (rm.displayName = "ViewOptionsButton");
            } catch {}
            function rg({ readOnly: e = !1, currentViewKey: a }) {
                let { isCustomView: l, isEditing: n } = eM(),
                    { scoped_repository: t } = (0, I.X)(),
                    i = (0, er.useFragment)(s8, a),
                    { name: s, description: r, id: o } = i,
                    {
                        dirtyTitle: u,
                        setDirtyTitle: d,
                        dirtyDescription: c,
                        setDirtyDescription: m,
                        shouldFocusSearchOnNav: g,
                    } = eD(),
                    [p, h] = (0, f.useState)(void 0),
                    k = (0, f.useRef)(null);
                return (
                    (0, f.useEffect)(() => {
                        n &&
                            k.current &&
                            A.KJ &&
                            !g &&
                            requestAnimationFrame(() => {
                                k.current && k.current.focus();
                            });
                    }, [n, g]),
                    (0, y.jsx)("div", {
                        className: rn.HeaderContentContainer,
                        children: n
                            ? (0, y.jsxs)("div", {
                                  className: rn.editingModeContainer,
                                  children: [
                                      (0, y.jsxs)("div", {
                                          className: rn.iconTitleInputRow,
                                          children: [
                                              (0, y.jsxs)(ld.A, {
                                                  children: [
                                                      (0, y.jsx)(ld.A.Label, {
                                                          htmlFor:
                                                              "edit-view-icon-button",
                                                          children: lc.icon,
                                                      }),
                                                      l(o) &&
                                                          (0, y.jsx)(rr, {
                                                              readOnly: e,
                                                              currentView: i,
                                                          }),
                                                  ],
                                              }),
                                              (0, y.jsxs)(ld.A, {
                                                  className: rn.FormControl,
                                                  children: [
                                                      (0, y.jsx)(ld.A.Label, {
                                                          children: lc.title,
                                                      }),
                                                      (0, y.jsx)(rl.A, {
                                                          ref: k,
                                                          onChange: (e) => {
                                                              let a =
                                                                  e.target
                                                                      .value;
                                                              (h(
                                                                  (0, re.iy)(a)
                                                                      .errorMessage
                                                              ),
                                                                  d(a));
                                                          },
                                                          value: lI(u) ? u : s,
                                                          placeholder:
                                                              ra.k
                                                                  .viewTitlePlaceholder,
                                                          className:
                                                              rn.TextInput,
                                                      }),
                                                      p &&
                                                          (0, y.jsx)(
                                                              ld.A.Validation,
                                                              {
                                                                  variant:
                                                                      "error",
                                                                  children: p,
                                                              }
                                                          ),
                                                  ],
                                              }),
                                          ],
                                      }),
                                      (0, y.jsxs)(ld.A, {
                                          className: rn.FormControl,
                                          children: [
                                              (0, y.jsx)(ld.A.Label, {
                                                  children: lc.description,
                                              }),
                                              (0, y.jsx)(rl.A, {
                                                  onChange: (e) => {
                                                      m(e.target.value);
                                                  },
                                                  value: lI(c) ? c : r,
                                                  placeholder:
                                                      ra.k
                                                          .viewDescriptionPlaceholder,
                                                  className: rn.TextInput,
                                              }),
                                          ],
                                      }),
                                  ],
                              })
                            : (0, y.jsxs)("div", {
                                  className: rn.displayModeContainer,
                                  children: [
                                      (0, y.jsxs)("span", {
                                          className: rn.titleOptionsRow,
                                          children: [
                                              l(o) &&
                                                  (0, y.jsx)(rr, {
                                                      readOnly: e,
                                                      currentView: i,
                                                  }),
                                              (0, y.jsx)(e8.A, {
                                                  as: "h1",
                                                  className: (0, l7.$)(
                                                      t ? "sr-only" : "",
                                                      rn.Heading
                                                  ),
                                                  children: s,
                                              }),
                                              l(o) &&
                                                  !e &&
                                                  (0, y.jsx)(rm, {
                                                      currentView: i,
                                                  }),
                                          ],
                                      }),
                                      r &&
                                          (0, y.jsx)("span", {
                                              className: rn.descriptionText,
                                              children: r,
                                          }),
                                  ],
                              }),
                    })
                );
            }
            try {
                rg.displayName || (rg.displayName = "HeaderContent");
            } catch {}
            function rp({
                currentViewKey: e,
                onCollapse: a,
                setSafeDocumentTitle: l,
            }) {
                let { pathname: n } = (0, _.zy)(),
                    t = em(n),
                    { navigateToRoot: i, navigateToUrl: s } = lS(),
                    { isEditing: r, canEditView: o } = eM(),
                    u = (0, er.useFragment)(s5, e),
                    { id: d, name: c, query: m } = u,
                    { openNavigation: g } = S(),
                    { scoped_repository: p, current_user_settings: h } = (0,
                    I.X)(),
                    { activeSearchQuery: k } = eM(),
                    b = (0, f.useCallback)(() => {
                        d === F.repository && k !== m
                            ? s(
                                  (function ({ query: e } = {}) {
                                      let a = A.fV?.pathname,
                                          l = a.match(ec),
                                          n =
                                              e &&
                                              e.length > 0 &&
                                              e !== L.Ds.defaultRepoLevelOpen
                                                  ? `?${E.searchUrlParameterName}=${encodeURIComponent(e)}`
                                                  : "";
                                      if (l) {
                                          let e = a.substring(
                                              0,
                                              a.length - l[l.length - 1].length
                                          );
                                          return `${e}issues${n}`;
                                      }
                                      return `${a}${n}`;
                                  })({ query: k })
                              )
                            : i(d, m);
                    }, [k, i, s, d, m]),
                    C = U.documentTitleForView();
                (p
                    ? (C = U.documentTitleForRepository(p.owner, p.name))
                    : c && (C = U.documentTitleForView(c)),
                    A.XC &&
                        C !== A.XC.title &&
                        (l ? (0, s7.D)(A.XC.title) : (0, s7.D)(C)));
                let v = (0, e7.Z)(),
                    x = (0, f.useCallback)(
                        (e) => {
                            v(e, { reloadDocument: !0 });
                        },
                        [v]
                    );
                return (0, y.jsx)("div", {
                    "data-testid": l8.listHeader,
                    children: t
                        ? (0, y.jsx)("div", {
                              className: s9.HeaderCreateIssueContainer,
                              children: (0, y.jsxs)("div", {
                                  className: s9.leftSideContent,
                                  children: [
                                      a &&
                                          (0, y.jsx)(s6.v, {
                                              variant: "invisible",
                                              icon: P.SidebarExpandIcon,
                                              onClick: a,
                                              label: "Collapse",
                                              shortcut: "Mod+B",
                                              tooltipDirection: "e",
                                          }),
                                      (0, y.jsx)(lT.Q, {
                                          variant: "invisible",
                                          onClick: b,
                                          leadingVisual: P.ArrowLeftIcon,
                                          size: "small",
                                          title: lP.returnToList,
                                          className: s9.Button,
                                          children: (0, y.jsx)(nY.A, {
                                              id: "view-title",
                                              title: c,
                                              className: s9.Truncate,
                                              children: c,
                                          }),
                                      }),
                                  ],
                              }),
                          })
                        : (0, y.jsxs)("div", {
                              className: s9.HeaderListContainer,
                              children: [
                                  !p &&
                                      (0, y.jsx)("div", {
                                          className:
                                              s9.mobileNavigationContainer,
                                          children: (0, y.jsx)(lT.Q, {
                                              variant: "invisible",
                                              size: "small",
                                              onClick: g,
                                              trailingVisual:
                                                  P.TriangleDownIcon,
                                              className: s9.allViewsButton,
                                              children: U.allViews,
                                          }),
                                      }),
                                  (0, y.jsx)(rg, {
                                      readOnly: !o,
                                      currentViewKey: u,
                                  }),
                                  !r &&
                                      (0, y.jsx)("div", {
                                          className: s9.actionButtonsContainer,
                                          children:
                                              !p &&
                                              (0, y.jsx)(lR.a, {
                                                  label: lP.newIssue,
                                                  navigate: x,
                                                  optionConfig: {
                                                      showRepositoryPicker:
                                                          null === p,
                                                      useMonospaceFont:
                                                          h?.use_monospace_font ||
                                                          !1,
                                                      singleKeyShortcutsEnabled:
                                                          h?.use_single_key_shortcut ||
                                                          !1,
                                                      emojiSkinTonePreference:
                                                          h?.preferred_emoji_skin_tone,
                                                      pasteUrlsAsPlainText:
                                                          h?.paste_url_link_as_plain_text,
                                                      showFullScreenButton: !0,
                                                  },
                                              }),
                                      }),
                              ],
                          }),
                });
            }
            try {
                rp.displayName || (rp.displayName = "Header");
            } catch {}
            var ry = l(48824);
            let rh = {
                    HeaderLoadingContainer:
                        "HeaderLoading-module__HeaderLoadingContainer--UquhY",
                    headingContainer:
                        "HeaderLoading-module__headingContainer--rkSmj",
                    Heading: "HeaderLoading-module__Heading--eX8hI",
                },
                rk = () =>
                    (0, y.jsxs)("div", {
                        "data-testid": l8.headerLoading,
                        className: rh.HeaderLoadingContainer,
                        children: [
                            (0, y.jsx)("div", {
                                className: rh.headingContainer,
                                children: (0, y.jsx)(e8.A, {
                                    as: "h1",
                                    className: rh.Heading,
                                    children: lP.issues,
                                }),
                            }),
                            (0, y.jsx)(ry.Q, { height: "xl", width: "150px" }),
                        ],
                    });
            try {
                rk.displayName || (rk.displayName = "HeaderLoading");
            } catch {}
            var rf = l(21877),
                rb = l(26062);
            function rC(e) {
                let a = (0, f.useRef)(0),
                    l = (0, f.useCallback)(
                        (a) => {
                            if (!e) return () => void 0;
                            let l = new ResizeObserver(a);
                            return (
                                l.observe(e),
                                () => {
                                    (l.unobserve(e), l.disconnect());
                                }
                            );
                        },
                        [e]
                    );
                return (0, f.useSyncExternalStore)(l, () => {
                    if (!e) return a.current;
                    let l = e.getBoundingClientRect().bottom;
                    return l === a.current ? a.current : ((a.current = l), l);
                });
            }
            let rS = {
                    IssueSidePanelContent:
                        "IssueSidePanel-module__IssueSidePanelContent--Jw4UY",
                },
                rF = ({ onClose: e, children: a }) => {
                    let l = (0, f.useRef)(null),
                        n = (0, f.useRef)(null),
                        t = (() => {
                            let e = rC(document.querySelector(".AppHeader")),
                                a = rC(
                                    document.querySelector(
                                        ".primary-viewer .js-notification-shelf-offset-top"
                                    )
                                ),
                                l = document.querySelector(
                                    ".notification-shelf"
                                ),
                                n = l ? l.getBoundingClientRect().height : 0;
                            return e > a ? e + n : a;
                        })(),
                        { disableFocusTrap: i } = (0, rb.V)();
                    return (0, y.jsx)(rf.w, {
                        open: !0,
                        defaultCloseElement: "overlay",
                        onClose: e,
                        initialFocusRef: n,
                        returnFocusRef: l,
                        "aria-labelledby": "issue-side-panel",
                        width: "min(90%, 1280px)",
                        topOffset: t,
                        externalFocusTrapDisabled: i,
                        children: (0, y.jsxs)("div", {
                            id: "issue-viewer-side-panel",
                            className: rS.IssueSidePanelContent,
                            children: [
                                (0, y.jsx)("span", {
                                    tabIndex: -1,
                                    ref: n,
                                    ...(0, nk.G)("side-panel-focus-target"),
                                }),
                                a,
                            ],
                        }),
                    });
                },
                rv = ({ onClose: e, children: a }) =>
                    (0, y.jsx)(rb.R, {
                        children: (0, y.jsx)(rF, { onClose: e, children: a }),
                    });
            try {
                rF.displayName || (rF.displayName = "IssueSidePanelInternal");
            } catch {}
            try {
                rv.displayName || (rv.displayName = "IssueSidePanel");
            } catch {}
            var rL = l(9852),
                rI = l(19509);
            let r_ = (e, a, l = 0) => {
                let n = (0, e7.Z)(),
                    {
                        viewPosition: t,
                        setViewPosition: i,
                        activeSearchQuery: s,
                        setIsNewView: r,
                    } = eM(),
                    { viewId: o } = ai(),
                    { knownViewRoutes: u } = ei(),
                    d = (0, f.useCallback)(() => {
                        let a = e.findIndex((e) => e.id === o);
                        return (
                            t || -1 === a || i(e[a].position),
                            -1 === a && (a = e.findIndex((e) => e.query === s)),
                            a
                        );
                    }, [e, t, o, i, s]),
                    c = (0, f.useCallback)(
                        (e) => {
                            (r(!1),
                                e.query
                                    ? n(ll({ viewId: e.id, query: void 0 }))
                                    : e.url && n(e.url),
                                i(e.position));
                        },
                        [n, r, i]
                    ),
                    m = (0, f.useCallback)(
                        (a) => {
                            !isNaN(a) && a >= 0 && a < e.length && c(e[a]);
                        },
                        [c, e]
                    ),
                    g = (0, f.useCallback)(
                        (e) => {
                            e.altKey &&
                                e.shiftKey &&
                                m(
                                    parseInt(
                                        e.code.substring(e.code.length - 1),
                                        10
                                    ) -
                                        l -
                                        1
                                );
                        },
                        [l, m]
                    ),
                    p = (0, f.useCallback)(
                        (a) => {
                            if (a.altKey && a.shiftKey) {
                                let l = d();
                                -1 === l
                                    ? t === u.length + 1 && "ArrowUp" === a.key
                                        ? m(e.length - 1)
                                        : t === u.length &&
                                          "ArrowDown" === a.key &&
                                          m(0)
                                    : l >= 1 && "ArrowUp" === a.key
                                      ? m(l - 1)
                                      : l + 1 < e.length &&
                                        "ArrowDown" === a.key &&
                                        m(l + 1);
                            }
                        },
                        [d, e.length, t, u.length, m]
                    );
                ((0, lu._N)([lr.up, lr.down], p), (0, lu._N)(a, g));
            };
            var rx = l(34700);
            let rK = { wrapper: "CallToActionItem-module__wrapper--VzZaW" };
            function rw({ showBetaPill: e }) {
                let a = (0, h.G7)("lifecycle_label_name_updates");
                return (0, y.jsx)("div", {
                    className: rK.wrapper,
                    children:
                        e &&
                        (0, y.jsx)(rx.X, { children: a ? U.preview : U.beta }),
                });
            }
            try {
                rw.displayName || (rw.displayName = "CallToActionItem");
            } catch {}
            let rN = {
                AppTitleContainer: "AppTitle-module__AppTitleContainer--Nw6zi",
                Heading: "AppTitle-module__Heading--xDXN6",
            };
            function rj() {
                return (0, y.jsx)("div", {
                    className: rN.AppTitleContainer,
                    children: (0, y.jsx)(e8.A, {
                        id: "sidebar-title",
                        as: "h2",
                        className: rN.Heading,
                        children: (0, y.jsx)("span", { children: U.appHeader }),
                    }),
                });
            }
            try {
                rj.displayName || (rj.displayName = "AppTitle");
            } catch {}
            let rR = {
                navItem: "SavedViewItem-module__navItem--GMGIQ",
                itemText: "SavedViewItem-module__itemText--P6U4z",
                truncatedItemText:
                    "SavedViewItem-module__truncatedItemText--mRa3l",
                icon: "SavedViewItem-module__icon--POC_c",
            };
            function rT({
                id: e,
                icon: a,
                Icon: l,
                color: n,
                title: t,
                position: i,
                query: s,
            }) {
                let {
                        setViewPosition: r,
                        setCanEditView: o,
                        isNewView: u,
                        setIsNewView: d,
                        setCurrentPage: c,
                        currentViewId: m,
                        setIsEditing: g,
                        dirtyViewId: p,
                    } = eM(),
                    {
                        dirtyDescription: h,
                        dirtySearchQuery: k,
                        dirtyTitle: b,
                        clearSavedViewEditState: C,
                    } = eD(),
                    { closeNavigation: L } = S(),
                    { navigateToUrl: I } = lS(),
                    x = (0, er.useRelayEnvironment)(),
                    K = (0, e7.Z)(),
                    w = (0, rd.S)(),
                    N = e === m,
                    j = ll({ viewId: e, query: s }),
                    R = (0, f.useCallback)(async () => {
                        (I(j), c(1));
                    }, [I, j, c]),
                    T = (0, f.useCallback)(() => {
                        void 0 !== p &&
                            sX({
                                environment: x,
                                input: { shortcutId: p },
                                onError: v.l,
                                onCompleted: v.l,
                            });
                    }, [p, x]),
                    P = (0, f.useCallback)(async () => {
                        if (e === F.repository) return R();
                        if (
                            u &&
                            (b !== U.views.defaultName || "" !== k || "" !== h)
                        ) {
                            if (
                                !(await w({
                                    title: U.views.unsavedChangesTitle,
                                    content: U.views.unsavedChangesContent,
                                    confirmButtonType: "danger",
                                }))
                            )
                                return;
                            T();
                        }
                        (g(!1), d(!1), K(j), C(), r(i), o(!0), L());
                    }, [e, u, b, k, h, g, d, K, j, C, r, i, o, L, R, w, T]),
                    A = (0, f.useCallback)(
                        (e) => {
                            (P(), e.preventDefault(), e.stopPropagation());
                        },
                        [P]
                    );
                return (0, y.jsx)(rI.c.Item, {
                    to: j,
                    as: _.N_,
                    "aria-current": N ? "page" : void 0,
                    onClick: A,
                    className: rR.navItem,
                    children: (0, y.jsxs)("div", {
                        className: rR.itemText,
                        children: [
                            (0, y.jsx)("div", {
                                className: rR.icon,
                                "data-color": n.toLowerCase(),
                                children: l
                                    ? (0, y.jsx)(l, {})
                                    : a
                                      ? (0, y.jsx)(l5.A, { icon: q(a) })
                                      : null,
                            }),
                            (0, y.jsx)("span", {
                                className: rR.truncatedItemText,
                                children: t,
                            }),
                        ],
                    }),
                });
            }
            try {
                rT.displayName || (rT.displayName = "SavedViewItem");
            } catch {}
            let rP = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SavedViewsShortcutsFragment",
                selections: [
                    {
                        alias: null,
                        args: [{ kind: "Literal", name: "first", value: 25 }],
                        concreteType: "SearchShortcutConnection",
                        kind: "LinkedField",
                        name: "shortcuts",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "SearchShortcut",
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "name",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "query",
                                        storageKey: null,
                                    },
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "SavedViewRow",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: "shortcuts(first:25)",
                    },
                ],
                type: "UserDashboard",
                abstractKey: null,
            };
            rP.hash = "9a49a46a5715f6ebf02954f58883658b";
            let rA = { disabled: "CreateSavedView-module__disabled--E98Ih" };
            function rM({ disabled: e }) {
                let {
                        commitUserViewCreate: a,
                        dirtyDescription: l,
                        dirtySearchQuery: n,
                        dirtyTitle: t,
                    } = eD(),
                    { dirtyViewId: i, setDirtyViewId: s, isNewView: r } = eM(),
                    o = (0, er.useRelayEnvironment)(),
                    u = (0, rd.S)(),
                    [d, c] = (0, f.useState)(!1),
                    { navigateToSavedView: m } = lS(),
                    g = (0, f.useCallback)(() => {
                        c(!0);
                    }, [c]),
                    p = (0, f.useCallback)(() => {
                        void 0 !== i &&
                            sX({
                                environment: o,
                                input: { shortcutId: i },
                                onError: v.l,
                                onCompleted: v.l,
                            });
                    }, [i, o]),
                    h = (0, f.useCallback)(async () => {
                        if (
                            r &&
                            (t !== U.views.defaultName || "" !== n || "" !== l)
                        ) {
                            if (
                                !(await u({
                                    title: U.views.unsavedChangesTitle,
                                    content: U.views.unsavedChangesContent,
                                    confirmButtonType: "danger",
                                }))
                            )
                                return;
                            p();
                        }
                        a({
                            onSuccess: ({
                                createDashboardSearchShortcut: e,
                            }) => {
                                e?.shortcut &&
                                    (s(e.shortcut.id),
                                    m(e.shortcut.id, { isNewView: !0 }));
                            },
                            relayEnvironment: o,
                        });
                    }, [a, u, p, l, n, t, r, m, o, s]);
                return (0, y.jsxs)(y.Fragment, {
                    children: [
                        (0, y.jsx)(aU.K, {
                            icon: P.PlusIcon,
                            size: "small",
                            variant: "invisible",
                            "aria-label": e
                                ? U.views.maxViewsTooltip
                                : U.views.createLink,
                            onClick: e ? g : h,
                            className: e ? rA.disabled : "",
                            inactive: e,
                        }),
                        e &&
                            d &&
                            (0, y.jsx)(rL.l, {
                                title: `${U.views.maxViewsTooltip} (${E.viewsPageSize})`,
                                onClose: () => c(!1),
                                children: U.views.maxViewsDescription,
                            }),
                    ],
                });
            }
            try {
                rM.displayName || (rM.displayName = "CreateSavedView");
            } catch {}
            let rD = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "name",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "SavedViewRow",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "icon",
                            storageKey: null,
                        },
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "description",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "query",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "scopingRepository",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "SearchShortcut",
                    abstractKey: null,
                };
            })();
            function rV({ savedView: e, position: a }) {
                let l = (0, ly.useFragment)(rD, e);
                return (
                    l &&
                    (0, y.jsx)(
                        rT,
                        {
                            id: l.id,
                            position: a,
                            icon: l.icon,
                            color: l.color,
                            title: l.name,
                            description: l.description,
                            query: ((e) => {
                                let a = e.query,
                                    l = e.scopingRepository;
                                return l
                                    ? `repo:${l.owner.login}/${l.name} ${a}`
                                    : a;
                            })(l),
                        },
                        l.id
                    )
                );
            }
            rD.hash = "ccf64a6e8946f133ba890e4c61f6e60e";
            try {
                rV.displayName || (rV.displayName = "SavedViewRow");
            } catch {}
            let rE = {
                headerRow: "SavedViews-module__headerRow--jnjtg",
                savedViewsList: "SavedViews-module__savedViewsList--LrdhJ",
            };
            function rq({ savedViewsRef: e }) {
                let a = (0, er.usePreloadedQuery)(eE, e);
                return a.viewer.dashboard
                    ? (0, y.jsx)(rO, { savedViewsRef: a.viewer.dashboard })
                    : null;
            }
            function rO({ savedViewsRef: e }) {
                let { knownViews: a } = ei(),
                    { setSavedViewsCount: l } = eM(),
                    n = (0, er.useFragment)(rP, e),
                    t = (0, f.useMemo)(
                        () => n.shortcuts.nodes || [],
                        [n.shortcuts.nodes]
                    );
                (0, f.useEffect)(() => {
                    l(n.shortcuts.totalCount);
                }, [n, l]);
                let i = (0, f.useMemo)(
                        () =>
                            t
                                .filter(rB)
                                .map((e, l) => ({
                                    id: e.id,
                                    name: e.name,
                                    query: e.query,
                                    position: l + a.length + 1,
                                })),
                        [a.length, t]
                    ),
                    s = (0, f.useMemo)(
                        () => i?.map((e) => e.position.toString()),
                        [i]
                    );
                return (
                    r_(i, s, a.length),
                    (0, y.jsxs)(y.Fragment, {
                        children: [
                            (0, y.jsxs)("div", {
                                className: `d-flex flex-items-center ${rE.headerRow}`,
                                children: [
                                    (0, y.jsx)("span", {
                                        className: "flex-1",
                                        children: U.viewsTitle,
                                    }),
                                    (0, y.jsx)(rM, {
                                        disabled: t.length >= E.viewsPageSize,
                                    }),
                                ],
                            }),
                            (0, y.jsx)(rI.c, {
                                "aria-label": U.viewsTitle,
                                className: rE.savedViewsList,
                                children:
                                    t.length > 0 &&
                                    t
                                        .filter(rB)
                                        .map((e, a) =>
                                            (0, y.jsx)(
                                                rV,
                                                {
                                                    savedView: e,
                                                    position: a + 1,
                                                },
                                                e.id
                                            )
                                        ),
                            }),
                        ],
                    })
                );
            }
            function rB(e) {
                return null != e;
            }
            try {
                rq.displayName || (rq.displayName = "SavedViews");
            } catch {}
            try {
                rO.displayName || (rO.displayName = "SavedViewsInternal");
            } catch {}
            let r$ = {
                    SavedViewsList: "Sidebar-module__SavedViewsList--MySAE",
                    SidebarContainer: "Sidebar-module__SidebarContainer--dwykM",
                    sidebarFooter: "Sidebar-module__sidebarFooter--fiUwg",
                },
                rQ = {
                    SavedViewsList:
                        "SidebarLoading-module__SavedViewsList--N0QWP",
                    LoadingViewsList:
                        "SidebarLoading-module__LoadingViewsList--xhYOf",
                    SidebarLoadingContainer:
                        "SidebarLoading-module__SidebarLoadingContainer--pSi8z",
                    sidebarLoadingFooter:
                        "SidebarLoading-module__sidebarLoadingFooter--D71UF",
                    ctaContainer: "SidebarLoading-module__ctaContainer--UkmyA",
                };
            var rU = l(28391),
                rH = l(94977);
            function rz({
                icon: e,
                title: a,
                id: l,
                path: n,
                tooltip: t,
                onClick: i,
            }) {
                let s = (() => {
                    let e = (A.fV?.pathname).split("/");
                    return 0 === e.length ? "" : e[e.length - 1];
                })();
                return (0, y.jsxs)(rI.c.Item, {
                    as: rU.N,
                    "aria-current": s === l ? "page" : void 0,
                    to: n,
                    onClick: i,
                    children: [
                        (0, y.jsx)(rI.c.LeadingVisual, {
                            children: (0, y.jsx)(l5.A, { icon: e }),
                        }),
                        (0, y.jsx)(rH.A, { "aria-label": t, children: a }),
                    ],
                });
            }
            try {
                rz.displayName || (rz.displayName = "SidebarRow");
            } catch {}
            function rW() {
                let { knownViews: e } = ei(),
                    a = e
                        .filter((e) => !e.hidden)
                        .map((e, a) =>
                            e.url
                                ? (0, y.jsx)(
                                      rz,
                                      {
                                          icon: q(e.icon),
                                          id: e.id,
                                          path: e.url,
                                          title: e.name,
                                          tooltip: "",
                                      },
                                      e.id
                                  )
                                : (0, y.jsx)(
                                      rT,
                                      {
                                          id: e.id,
                                          icon: e.icon,
                                          color: E.defaultViewColor,
                                          title: e.name,
                                          query: e.query,
                                          position: a + 1,
                                      },
                                      e.id
                                  )
                        );
                return (0, y.jsxs)("nav", {
                    "aria-labelledby": "sidebar-title",
                    className: rQ.SidebarLoadingContainer,
                    children: [
                        (0, y.jsx)("div", {
                            className: "sr-only",
                            "aria-hidden": "true",
                            children: (0, y.jsx)(rj, {}),
                        }),
                        (0, y.jsx)(rI.c, {
                            "aria-label": U.defaultViews,
                            className: rQ.SavedViewsList,
                            children: a,
                        }),
                        (0, y.jsx)(rI.c, {
                            className: rQ.LoadingViewsList,
                            children: [...Array(E.viewLoadingSize)].map(
                                (e, a) =>
                                    (0, y.jsxs)(
                                        rI.c.Item,
                                        {
                                            children: [
                                                (0, y.jsx)(rI.c.LeadingVisual, {
                                                    children: (0, y.jsx)(ry.Q, {
                                                        borderRadius:
                                                            "elliptical",
                                                        height: "md",
                                                        width: "md",
                                                    }),
                                                }),
                                                (0, y.jsx)(ry.Q, {
                                                    height: "sm",
                                                    width: "random",
                                                }),
                                            ],
                                        },
                                        a
                                    )
                            ),
                        }),
                        (0, y.jsx)("div", {
                            className: rQ.sidebarLoadingFooter,
                            children: (0, y.jsx)("div", {
                                className: rQ.ctaContainer,
                                children: (0, y.jsx)(rw, {}),
                            }),
                        }),
                    ],
                });
            }
            try {
                rW.displayName || (rW.displayName = "SidebarLoading");
            } catch {}
            let rG = ({ customViewsRef: e, isFullHeight: a }) =>
                e
                    ? (0, y.jsx)(f.Suspense, {
                          fallback: (0, y.jsx)(rW, {}),
                          children: (0, y.jsx)(rZ, {
                              customViewsRef: e,
                              isFullHeight: a,
                          }),
                      })
                    : (0, y.jsx)(rW, {});
            function rZ({ customViewsRef: e, isFullHeight: a }) {
                let { knownViews: l, knownViewRoutes: n } = ei(),
                    { isNavigationOpen: t } = S();
                r_(
                    n,
                    (0, f.useMemo)(
                        () => l.map((e, a) => (a + 1).toString()),
                        [l]
                    )
                );
                let i = l
                    .filter((e) => !e.hidden)
                    .map((e, a) =>
                        e.url
                            ? (0, y.jsx)(
                                  rz,
                                  {
                                      title: e.name,
                                      icon: q(e.icon),
                                      id: e.id,
                                      path: e.url,
                                      tooltip: e.name,
                                  },
                                  e.id
                              )
                            : (0, y.jsx)(
                                  rT,
                                  {
                                      id: e.id,
                                      position: a + 1,
                                      icon: e.icon,
                                      color: E.defaultViewColor,
                                      title: e.name,
                                  },
                                  e.id
                              )
                    );
                return (0, y.jsxs)(ae.A, {
                    as: t ? "div" : "nav",
                    "aria-labelledby": "sidebar-title",
                    sx: { height: a ? "calc(100vh - 64px)" : "auto" },
                    className: r$.SidebarContainer,
                    children: [
                        (0, y.jsx)("div", {
                            className: "sr-only",
                            "aria-hidden": "true",
                            children: (0, y.jsx)(rj, {}),
                        }),
                        (0, y.jsx)(rI.c, {
                            "aria-label": U.defaultViews,
                            className: r$.SavedViewsList,
                            children: i,
                        }),
                        (0, y.jsx)(rq, { savedViewsRef: e }),
                        (0, y.jsx)("div", {
                            className: r$.sidebarFooter,
                            children: (0, y.jsx)(rw, {}),
                        }),
                    ],
                });
            }
            try {
                rG.displayName || (rG.displayName = "Sidebar");
            } catch {}
            try {
                rZ.displayName || (rZ.displayName = "SidebarInternal");
            } catch {}
            function rX({ customViewsRef: e }) {
                let { isNavigationOpen: a, closeNavigation: l } = S();
                return a
                    ? (0, y.jsx)(rL.l, {
                          width: "large",
                          title: U.allViews,
                          onClose: l,
                          children: (0, y.jsx)(rG, { customViewsRef: e }),
                      })
                    : null;
            }
            try {
                rX.displayName || (rX.displayName = "MobileNavigation");
            } catch {}
            let rJ = {
                    searchListContainer:
                        "IssueDashboardCustomViewPage-module__searchListContainer--zNdz7",
                },
                rY = ({
                    queries: {
                        pageQuery: e,
                        currentViewQuery: a,
                        customViewsQuery: l,
                    },
                }) => {
                    let n = (0, I.X)(),
                        t =
                            n?.current_user_settings?.use_single_key_shortcut ||
                            !1,
                        {
                            sidePanelItemIdentifier: i,
                            setSidePanelItemIdentifier: s,
                            sidePanelItemURL: r,
                            onCloseSidePanel: o,
                            onParentIssueActivate: u,
                        } = ai(),
                        { queryRef: d } = aa(e, eO),
                        { queryRef: c } = aa(a, eq),
                        { queryRef: m } = aa(l, eE),
                        { setCurrentViewId: g } = eM(),
                        { pathname: p } = (0, _.zy)(),
                        h = p.split("/").pop();
                    (0, f.useEffect)(() => {
                        g(h || F.empty);
                    }, [h, e, g]);
                    let k = (0, f.useCallback)(
                        (e) => {
                            let { owner: a, repo: l, number: n } = e;
                            s({ owner: a, repo: l, number: n, type: "Issue" });
                        },
                        [s]
                    );
                    return c && d && m
                        ? (0, y.jsxs)(y.Fragment, {
                              children: [
                                  (0, y.jsx)(r1, {
                                      pageQueryRef: d,
                                      currentViewQueryRef: c,
                                      savedViewsQueryRef: m,
                                      onSidePanelNavigate: s,
                                  }),
                                  i &&
                                      (0, y.jsx)(rv, {
                                          onClose: o,
                                          children: (0, y.jsx)(aq.cI, {
                                              itemIdentifier: i,
                                              optionConfig: Object.assign(
                                                  {},
                                                  aO.C,
                                                  {
                                                      shouldSkipSetDocumentTitle:
                                                          !0,
                                                      onClose: o,
                                                      insideSidePanel: !0,
                                                      showRepositoryPill: !0,
                                                      singleKeyShortcutsEnabled:
                                                          t,
                                                      onSubIssueClick: k,
                                                      onParentIssueActivate: u,
                                                      navigateBack: o,
                                                      additionalHeaderActions:
                                                          (0, y.jsx)(aU.K, {
                                                              as: "a",
                                                              role: "link",
                                                              variant:
                                                                  "invisible",
                                                              icon: P.ScreenFullIcon,
                                                              "aria-label":
                                                                  U.sidePanelTooltip,
                                                              href: r,
                                                          }),
                                                  }
                                              ),
                                          }),
                                      }),
                              ],
                          })
                        : null;
                };
            function r1({
                pageQueryRef: e,
                currentViewQueryRef: a,
                savedViewsQueryRef: l,
                onSidePanelNavigate: n,
            }) {
                let { itemIdentifier: t } = ai(),
                    i = (0, er.usePreloadedQuery)(eO, e),
                    s = (0, er.usePreloadedQuery)(eq, a),
                    r = (0, er.useFragment)(aD, i),
                    o = (0, er.useFragment)(aV, s.node);
                if (!s.node || !o || !l) return null;
                let u = (0, h.G7)("global_sso_banner");
                return (0, y.jsxs)(as, {
                    category: "Issues Dashboard",
                    children: [
                        u && (0, y.jsx)(aE.Y0, {}),
                        (0, y.jsx)(aQ, {
                            leftPaneWidth: "small",
                            leftPane: {
                                element: (0, y.jsx)(rG, {
                                    customViewsRef: l,
                                    isFullHeight: !0,
                                }),
                                ariaLabel: U.viewSidebarPaneAriaLabel,
                            },
                            middlePane: (0, y.jsxs)("div", {
                                className: rJ.searchListContainer,
                                children: [
                                    (0, y.jsx)(f.Suspense, {
                                        fallback: (0, y.jsx)(rk, {}),
                                        children: (0, y.jsx)(rp, {
                                            setSafeDocumentTitle: !!t?.number,
                                            currentViewKey: o,
                                        }),
                                    }),
                                    (0, y.jsx)(s4, {
                                        currentView: s.node,
                                        onSidePanelNavigate: n,
                                        itemIdentifier: t,
                                        search: r,
                                        showSsoBanner: !u,
                                    }),
                                ],
                            }),
                        }),
                        (0, y.jsx)(rX, { customViewsRef: l }),
                    ],
                });
            }
            try {
                r1.displayName ||
                    (r1.displayName = "IssueDashboardCustomViewPageContent");
            } catch {}
            let r2 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ListCurrentViewFragment",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchCurrentViewFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "HeaderCurrentViewFragment",
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            r2.hash = "05ee3fdaa319a2a74e5b5a03a864a22f";
            let r0 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ListRepositoryFragment",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchRepositoryFragment",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            r0.hash = "43412226b117b1577ed7fcaed18f763d";
            let r3 = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchRepository",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "ListQuery",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "fetchRepository",
                                variableName: "fetchRepository",
                            },
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "labelPageSize",
                                variableName: "labelPageSize",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "SearchRootFragment",
                    },
                ],
                type: "Searchable",
                abstractKey: "__isSearchable",
            };
            r3.hash = "fffb2a7f82c540775dec16181b7de01e";
            let r4 = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchRepository",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "labelPageSize",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "SearchRootFragment",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "fetchRepository",
                                variableName: "fetchRepository",
                            },
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "labelPageSize",
                                variableName: "labelPageSize",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "SearchList",
                    },
                ],
                type: "Searchable",
                abstractKey: "__isSearchable",
            };
            r4.hash = "a60cb5e484347caebc0f83a2894c42e9";
            let r5 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SearchRepositoryFragment",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchListRepo",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchBarRepo",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            r5.hash = "106cc34171464a5987f090b0f9c7ff7e";
            let r7 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SearchCurrentViewFragment",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SearchBarCurrentViewFragment",
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            r7.hash = "866bc486e7c985c0348b2a2761417fad";
            let r6 = {
                SearchContainer: "Search-module__SearchContainer--bKqAd",
            };
            function r9({
                itemIdentifier: e,
                currentViewKey: a,
                currentRepository: l,
                search: n,
                loadSearchQuery: t,
                queryFromCustomView: i,
                onSidePanelNavigate: s,
                showSsoBanner: r,
            }) {
                let { ssoOrgs: o } = (0, aG.N)(),
                    u = o.map((e) => e.login).filter((e) => void 0 !== e),
                    d = (0, er.useFragment)(r4, n),
                    c = (0, er.useFragment)(r5, l),
                    m = (0, er.useFragment)(r7, a),
                    { activeSearchQuery: g, isNewView: p } = eM(),
                    h = (0, f.useRef)(void 0);
                return (0, y.jsxs)("div", {
                    className: r6.SearchContainer,
                    children: [
                        (0, y.jsx)(lV, {
                            currentViewKey: m,
                            currentRepository: c ?? null,
                            queryFromCustomView: i,
                        }),
                        p && !g
                            ? (0, y.jsx)(a3, {})
                            : (0, y.jsxs)(y.Fragment, {
                                  children: [
                                      r &&
                                          (0, y.jsx)(aW.x, {
                                              protectedOrgs: u,
                                          }),
                                      (0, y.jsx)(sW, {
                                          itemIdentifier: e,
                                          search: d,
                                          repository: c ?? null,
                                          loadSearchQuery: t,
                                          query: g,
                                          queryFromCustomView: i,
                                          listRef: h,
                                          onSidePanelNavigate: s,
                                      }),
                                  ],
                              }),
                    ],
                });
            }
            try {
                r9.displayName || (r9.displayName = "Search");
            } catch {}
            let r8 = ({
                    fetchedView: e,
                    fetchedRepository: a,
                    search: l,
                    loadSearchQuery: n,
                    queryFromCustomView: t,
                    onCollapse: i,
                    onSidePanelNavigate: s,
                    showSsoBanner: r,
                }) => {
                    let o = (0, er.useFragment)(r2, e),
                        u = (0, er.useFragment)(r0, a || null),
                        d = (0, er.useFragment)(r3, l),
                        { itemIdentifier: c } = ai();
                    return (0, y.jsxs)(ae.A, {
                        sx: {
                            display: "flex",
                            flexDirection: "column",
                            gap: 2,
                            maxWidth: "100%",
                        },
                        children: [
                            o &&
                                (0, y.jsx)(f.Suspense, {
                                    fallback: (0, y.jsx)(rk, {}),
                                    children: (0, y.jsx)(rp, {
                                        setSafeDocumentTitle: !!c?.number,
                                        currentViewKey: o,
                                        onCollapse: i,
                                    }),
                                }),
                            o &&
                                d &&
                                (0, y.jsx)(r9, {
                                    itemIdentifier: c,
                                    currentViewKey: o,
                                    currentRepository: u ?? null,
                                    search: d,
                                    loadSearchQuery: n,
                                    queryFromCustomView: t,
                                    onSidePanelNavigate: s,
                                    showSsoBanner: r,
                                }),
                        ],
                    });
                },
                oe = (0, f.memo)(r8);
            try {
                r8.displayName || (r8.displayName = "ListInternal");
            } catch {}
            try {
                oe.displayName || (oe.displayName = "List");
            } catch {}
            let oa = ({ queries: { pageQuery: e, customViewsQuery: a } }) => {
                let l = (0, I.X)(),
                    n = l?.current_user_settings?.use_single_key_shortcut || !1,
                    {
                        sidePanelItemIdentifier: t,
                        setSidePanelItemIdentifier: i,
                        sidePanelItemURL: s,
                        onCloseSidePanel: r,
                        onParentIssueActivate: o,
                    } = ai(),
                    { queryRef: u, loadQuery: d } = aa(e, eB),
                    { queryRef: c } = aa(a, eE),
                    { setCurrentViewId: m } = eM(),
                    { pathname: g } = (0, _.zy)(),
                    p = g.split("/").pop();
                (0, f.useEffect)(() => {
                    m(p || F.empty);
                }, [p, e, m]);
                let h = (0, f.useCallback)(
                    (e) => {
                        let { owner: a, repo: l, number: n } = e;
                        i({ owner: a, repo: l, number: n, type: "Issue" });
                    },
                    [i]
                );
                return u && c
                    ? (0, y.jsxs)(y.Fragment, {
                          children: [
                              (0, y.jsx)(ol, {
                                  id: p,
                                  pageQueryRef: u,
                                  loadQuery: d,
                                  savedViewsQueryRef: c,
                                  onSidePanelNavigate: i,
                              }),
                              t &&
                                  (0, y.jsx)(rv, {
                                      onClose: r,
                                      children: (0, y.jsx)(aq.cI, {
                                          itemIdentifier: t,
                                          optionConfig: Object.assign(
                                              {},
                                              aO.C,
                                              {
                                                  shouldSkipSetDocumentTitle:
                                                      !0,
                                                  onClose: r,
                                                  insideSidePanel: !0,
                                                  showRepositoryPill: !0,
                                                  singleKeyShortcutsEnabled: n,
                                                  onSubIssueClick: h,
                                                  onParentIssueActivate: o,
                                                  navigateBack: r,
                                                  additionalHeaderActions: (0,
                                                  y.jsx)(aU.K, {
                                                      as: "a",
                                                      role: "link",
                                                      variant: "invisible",
                                                      icon: P.ScreenFullIcon,
                                                      "aria-label":
                                                          U.sidePanelTooltip,
                                                      href: s,
                                                  }),
                                              }
                                          ),
                                      }),
                                  }),
                          ],
                      })
                    : null;
            };
            function ol({
                id: e,
                pageQueryRef: a,
                loadQuery: l,
                savedViewsQueryRef: n,
                onSidePanelNavigate: t,
            }) {
                let i = (0, er.usePreloadedQuery)(eB, a),
                    s = (0, er.useLazyLoadQuery)(
                        eq,
                        { id: e },
                        { fetchPolicy: "store-only" }
                    ),
                    r = (0, h.G7)("global_sso_banner");
                return (0, y.jsxs)(as, {
                    category: "Issues Dashboard",
                    children: [
                        r && (0, y.jsx)(aE.Y0, {}),
                        (0, y.jsx)(aQ, {
                            leftPaneWidth: "small",
                            leftPane: {
                                element: (0, y.jsx)(rG, {
                                    customViewsRef: n,
                                    isFullHeight: !0,
                                }),
                                ariaLabel: U.viewSidebarPaneAriaLabel,
                            },
                            middlePane: s.node
                                ? (0, y.jsx)(oe, {
                                      fetchedView: s.node,
                                      search: i,
                                      fetchedRepository: null,
                                      loadSearchQuery: l,
                                      onSidePanelNavigate: t,
                                      showSsoBanner: !r,
                                  })
                                : void 0,
                        }),
                        (0, y.jsx)(rX, { customViewsRef: n }),
                    ],
                });
            }
            try {
                ol.displayName ||
                    (ol.displayName = "IssueDashboardKnownViewPageContent");
            } catch {}
            let on = ({ queries: { pageQuery: e, customViewsQuery: a } }) => {
                let l = (0, I.X)(),
                    n = l?.current_user_settings?.use_single_key_shortcut || !1,
                    {
                        sidePanelItemIdentifier: t,
                        setSidePanelItemIdentifier: i,
                        sidePanelItemURL: s,
                        onCloseSidePanel: r,
                        onParentIssueActivate: o,
                    } = ai(),
                    { queryRef: u, loadQuery: d } = aa(e, e$),
                    { queryRef: c } = aa(a, eE),
                    { navigateToView: m } = lS(),
                    { search: g } = (0, _.zy)(),
                    p = (0, f.useCallback)(
                        (e) => {
                            let { owner: a, repo: l, number: n } = e;
                            i({ owner: a, repo: l, number: n, type: "Issue" });
                        },
                        [i]
                    );
                return u && c
                    ? new URLSearchParams(g).get("q")
                        ? (0, y.jsxs)(y.Fragment, {
                              children: [
                                  (0, y.jsx)(ot, {
                                      pageQueryRef: u,
                                      loadQuery: d,
                                      savedViewsQueryRef: c,
                                      onSidePanelNavigate: i,
                                  }),
                                  t &&
                                      (0, y.jsx)(rv, {
                                          onClose: r,
                                          children: (0, y.jsx)(aq.cI, {
                                              itemIdentifier: t,
                                              optionConfig: Object.assign(
                                                  {},
                                                  aO.C,
                                                  {
                                                      shouldSkipSetDocumentTitle:
                                                          !0,
                                                      onClose: r,
                                                      insideSidePanel: !0,
                                                      showRepositoryPill: !0,
                                                      singleKeyShortcutsEnabled:
                                                          n,
                                                      onSubIssueClick: p,
                                                      onParentIssueActivate: o,
                                                      navigateBack: r,
                                                      additionalHeaderActions:
                                                          (0, y.jsx)(aU.K, {
                                                              as: "a",
                                                              role: "link",
                                                              variant:
                                                                  "invisible",
                                                              icon: P.ScreenFullIcon,
                                                              "aria-label":
                                                                  U.sidePanelTooltip,
                                                              href: s,
                                                          }),
                                                  }
                                              ),
                                          }),
                                      }),
                              ],
                          })
                        : (m({ viewId: W.id, canEditView: !0 }), null)
                    : null;
            };
            function ot({
                pageQueryRef: e,
                loadQuery: a,
                savedViewsQueryRef: l,
                onSidePanelNavigate: n,
            }) {
                let { setCurrentViewId: t } = eM();
                (0, f.useEffect)(() => {
                    t(ee.id);
                }, [t]);
                let i = (0, er.useLazyLoadQuery)(
                        eq,
                        { id: ee.id },
                        { fetchPolicy: "store-only" }
                    ),
                    s = (0, er.usePreloadedQuery)(e$, e);
                if (!i || !i.node) return null;
                let r = (0, h.G7)("global_sso_banner");
                return (0, y.jsxs)(as, {
                    category: "Issues Dashboard",
                    children: [
                        r && (0, y.jsx)(aE.Y0, {}),
                        (0, y.jsx)(aQ, {
                            leftPaneWidth: "small",
                            leftPane: {
                                element: (0, y.jsx)(rG, { customViewsRef: l }),
                                ariaLabel: U.viewSidebarPaneAriaLabel,
                            },
                            middlePane: (0, y.jsx)(oe, {
                                fetchedView: i.node,
                                fetchedRepository: null,
                                search: s,
                                loadSearchQuery: a,
                                onSidePanelNavigate: n,
                                showSsoBanner: !r,
                            }),
                        }),
                        (0, y.jsx)(rX, { customViewsRef: l }),
                    ],
                });
            }
            try {
                ot.displayName ||
                    (ot.displayName = "IssueDashboardPageContent");
            } catch {}
            let oi = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    a = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "id",
                                    variableName: "id",
                                },
                            ],
                            concreteType: "JobStatusUpdatedPayload",
                            kind: "LinkedField",
                            name: "jobStatusUpdated",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "JobStatus",
                                    kind: "LinkedField",
                                    name: "jobStatus",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "percentage",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "updatedAt",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "jobId",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "state",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "JobError",
                                            kind: "LinkedField",
                                            name: "executionErrors",
                                            plural: !0,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "message",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "nodeId",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "JobInfoWrapperStatusSubscription",
                        selections: a,
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "JobInfoWrapperStatusSubscription",
                        selections: a,
                    },
                    params: {
                        id: "c6c7ea78576b613fb09a4ef07b376577",
                        metadata: {},
                        name: "JobInfoWrapperStatusSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            oi.hash = "47f9aec1c876c707ac0b7a218fd72209";
            let os = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    a = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    o = [
                        { kind: "Literal", name: "first", value: 20 },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    u = {
                        alias: null,
                        args: o,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            s,
                                            i,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            l,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "cursor",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "endCursor",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasNextPage",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey:
                            'labels(first:20,orderBy:{"direction":"ASC","field":"NAME"})',
                    },
                    d = {
                        alias: null,
                        args: o,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            r,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            l,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                            n,
                        ],
                        storageKey: null,
                    },
                    h = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                t,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                                n,
                            ],
                            storageKey: null,
                        },
                    ],
                    k = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: h,
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: h,
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "IssueOrPullRequest",
                        abstractKey: "__isIssueOrPullRequest",
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "JobInfoWrapperQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "fetchRepository",
                                                        value: !0,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "labelPageSize",
                                                        value: 20,
                                                    },
                                                ],
                                                kind: "FragmentSpread",
                                                name: "IssueRow",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "JobInfoWrapperQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    l,
                                    n,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            t,
                                            {
                                                alias: "titleHtml",
                                                args: null,
                                                kind: "ScalarField",
                                                name: "titleHTML",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: [n, i, s],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "number",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    i,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [l, r, n],
                                                        storageKey: null,
                                                    },
                                                    n,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            u,
                                                            d,
                                                            c,
                                                            m,
                                                            g,
                                                            p,
                                                            y,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "stateReason",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "state",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            k,
                                                        ],
                                                        type: "Issue",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            u,
                                                            d,
                                                            c,
                                                            m,
                                                            g,
                                                            p,
                                                            y,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "reviewDecision",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "isDraft",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "isInMergeQueue",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: "pullRequestState",
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "state",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            k,
                                                        ],
                                                        type: "PullRequest",
                                                        abstractKey: null,
                                                    },
                                                ],
                                                type: "IssueOrPullRequest",
                                                abstractKey:
                                                    "__isIssueOrPullRequest",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "c9d36c58474c6e66db301b7aefbb00d6",
                        metadata: {},
                        name: "JobInfoWrapperQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            os.hash = "7309db0a39dad5a48c29b0b0bbc14f85";
            var or = l(41181);
            function oo(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o = (0, iV.c)(22),
                    { children: u, bulkJobId: d, setBulkJobId: c } = e,
                    {
                        addPersistedToast: m,
                        addToast: g,
                        clearPersistedToast: p,
                    } = (0, x.Y6)(),
                    [h, k] = (0, f.useState)(null),
                    b = (0, er.useRelayEnvironment)(),
                    C = (0, f.useRef)(0),
                    [S, F] = (0, f.useState)(void 0),
                    v = (0, f.useRef)(null),
                    L = (0, f.useRef)(null),
                    I = (0, f.useRef)(!1);
                (o[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = () => () => {
                          v.current && clearTimeout(v.current);
                      }),
                      (l = []),
                      (o[0] = a),
                      (o[1] = l))
                    : ((a = o[0]), (l = o[1])),
                    (0, f.useEffect)(a, l),
                    o[2] !== p || o[3] !== c || o[4] !== h
                        ? ((n = () => {
                              (c(null),
                                  (C.current = 0),
                                  p(),
                                  h?.dispose(),
                                  k(null));
                          }),
                          (o[2] = p),
                          (o[3] = c),
                          (o[4] = h),
                          (o[5] = n))
                        : (n = o[5]));
                let _ = n;
                o[6] !== m ||
                o[7] !== g ||
                o[8] !== d ||
                o[9] !== b ||
                o[10] !== _
                    ? ((t = (e) => ({
                          subscription: oi,
                          variables: { id: e },
                          onNext: (e) => {
                              let a;
                              if (
                                  !e ||
                                  !e.jobStatusUpdated ||
                                  !e.jobStatusUpdated.jobStatus
                              )
                                  return void _();
                              let { jobStatusUpdated: l } = e,
                                  n = l?.jobStatus,
                                  t =
                                      l?.jobStatus?.executionErrors?.length ??
                                      0;
                              if (!n) {
                                  (g({
                                      type: "error",
                                      message: "Bulk update had an error",
                                  }),
                                      _());
                                  return;
                              }
                              let i = new Date(n.updatedAt),
                                  s = Date.now() - i.getTime();
                              switch (n.state) {
                                  case "ERROR":
                                      (g({
                                          type: "error",
                                          message: "Bulk update had an error",
                                      }),
                                          _());
                                      break;
                                  case "PENDING":
                                  case "QUEUED":
                                      n.jobId
                                          ? m({
                                                message:
                                                    "Bulk update is pending",
                                                icon: (0, y.jsx)(
                                                    P.ClockIcon,
                                                    {}
                                                ),
                                                type: "info",
                                                role: "status",
                                            })
                                          : (g({
                                                type: "error",
                                                message:
                                                    "Bulk update could not be started, please try again later.",
                                            }),
                                            (0, eY.N7)(
                                                Error(
                                                    "Issue bulk edit job mutation did not create a job (no job id)"
                                                )
                                            ),
                                            _());
                                      break;
                                  case "STARTED":
                                      if (100 === C.current) break;
                                      if (
                                          (n.percentage &&
                                              n.percentage > C.current &&
                                              (C.current = n.percentage),
                                          (a = C.current),
                                          s > 3e5)
                                      ) {
                                          (_(),
                                              g({
                                                  type: "error",
                                                  message:
                                                      "The update operation has timed out but your changes might have been applied. Please check the items and, if needed, attempt the update again in a few minutes and contact us if the error persists.",
                                              }),
                                              (0, eY.N7)(
                                                  Error(
                                                      `Issue bulk edit job(${n.jobId}) did not advance after 5 minutes`
                                                  )
                                              ));
                                          break;
                                      }
                                      (v.current && clearTimeout(v.current),
                                          (v.current = setTimeout(() => {
                                              F(Date.now());
                                          }, 6e4)),
                                          d &&
                                              m({
                                                  message: `Bulk update is in progress ${a} % ${t > 0 ? `(${t} issues failing to update)` : ""}`,
                                                  icon: (0, y.jsx)(or.d, {
                                                      progress: a / 100,
                                                  }),
                                                  type: "info",
                                                  role: "status",
                                              }));
                                      break;
                                  case "SUCCESS":
                                      if (
                                          ((C.current = 100),
                                          g({
                                              type: "success",
                                              message: `Bulk update completed ${t > 0 ? "with errors" : "successfully"}`,
                                          }),
                                          n.jobId &&
                                              n.jobId !== L.current &&
                                              (I.current = !1),
                                          n.jobId === L.current ||
                                              I.current ||
                                              ((0, nn.i)(
                                                  `Bulk update completed ${t > 0 ? "with errors" : "successfully"}`
                                              ),
                                              (I.current = !0),
                                              (L.current = n.jobId)),
                                          _(),
                                          t > 0)
                                      ) {
                                          let e = n.executionErrors.map(ou),
                                              a = b.getStore().getSource();
                                          ((e = e.filter((e) => a.has(e))),
                                              (0, er.fetchQuery)(
                                                  b,
                                                  os,
                                                  { ids: e },
                                                  {
                                                      fetchPolicy:
                                                          "network-only",
                                                  }
                                              ).subscribe({}));
                                      }
                                      break;
                                  default:
                                      throw (
                                          _(),
                                          Error(
                                              `Unexpected job status: ${n.state}`
                                          )
                                      );
                              }
                          },
                      })),
                      (o[6] = m),
                      (o[7] = g),
                      (o[8] = d),
                      (o[9] = b),
                      (o[10] = _),
                      (o[11] = t))
                    : (t = o[11]);
                let K = t;
                return (
                    o[12] !== d ||
                    o[13] !== p ||
                    o[14] !== K ||
                    o[15] !== b ||
                    o[16] !== S ||
                    o[17] !== h
                        ? ((i = () => {
                              d
                                  ? (!h || S) &&
                                    (k((0, er.requestSubscription)(b, K(d))),
                                    S &&
                                        (0, eY.N7)(
                                            Error(
                                                `Issue bulk edit job(${d}) did not send an update after 1 minute (subscription msg not received)`
                                            )
                                        ),
                                    F(void 0))
                                  : p();
                          }),
                          (s = [K, b, d, k, S, h, p]),
                          (o[12] = d),
                          (o[13] = p),
                          (o[14] = K),
                          (o[15] = b),
                          (o[16] = S),
                          (o[17] = h),
                          (o[18] = i),
                          (o[19] = s))
                        : ((i = o[18]), (s = o[19])),
                    (0, f.useEffect)(i, s),
                    o[20] !== u
                        ? ((r = (0, y.jsx)(y.Fragment, { children: u })),
                          (o[20] = u),
                          (o[21] = r))
                        : (r = o[21]),
                    r
                );
            }
            function ou(e) {
                return e.nodeId;
            }
            try {
                oo.displayName || (oo.displayName = "JobInfoWithSubscription");
            } catch {}
            let od = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "node",
                        },
                    ],
                    a = [
                        { kind: "Variable", name: "id", variableName: "node" },
                    ],
                    l = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "ContributingGuidelines",
                                kind: "LinkedField",
                                name: "contributingGuidelines",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "firstTimeContributionLink",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Repository",
                        abstractKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "FirstTimeContributionBannerContributingGuidelinesQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [l],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "FirstTimeContributionBannerContributingGuidelinesQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    l,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "7adec652ef8f517f484da9e58d7a0b8b",
                        metadata: {},
                        name: "FirstTimeContributionBannerContributingGuidelinesQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            od.hash = "a3f69364d9a035e3974c1bbe5362d35c";
            let oc = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "FirstTimeContributionBanner",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: [
                            {
                                kind: "Literal",
                                name: "isPullRequests",
                                value: !1,
                            },
                        ],
                        kind: "ScalarField",
                        name: "showFirstTimeContributorBanner",
                        storageKey:
                            "showFirstTimeContributorBanner(isPullRequests:false)",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "CommunityProfile",
                        kind: "LinkedField",
                        name: "communityProfile",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "goodFirstIssueIssuesCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            oc.hash = "70d7c59b6eb3bd2d43672a5457a4bf4f";
            let om = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "DismissRepositoryNoticePayload",
                            kind: "LinkedField",
                            name: "dismissRepositoryNotice",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "clientMutationId",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "dismissFirstTimeContributionBannerForRepoMutation",
                        selections: a,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "dismissFirstTimeContributionBannerForRepoMutation",
                        selections: a,
                    },
                    params: {
                        id: "da3ddd34bd75926d4b320abbf42dba8b",
                        metadata: {},
                        name: "dismissFirstTimeContributionBannerForRepoMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            om.hash = "a7ab55b350a1a7ea25ac34d44f953470";
            let og = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "DismissNoticePayload",
                            kind: "LinkedField",
                            name: "dismissNotice",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "clientMutationId",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "dismissFirstTimeContributionBannerMutation",
                        selections: a,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "dismissFirstTimeContributionBannerMutation",
                        selections: a,
                    },
                    params: {
                        id: "0ec27968d3caa9566cce5b4c519eaf3f",
                        metadata: {},
                        name: "dismissFirstTimeContributionBannerMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            og.hash = "627f89c848988611d395dde7073ca948";
            let op = ({
                repoNameWithOwner: e,
                contributingGuidelinesUrl: a,
                hasGoodFirstIssueIssues: l,
                contributeUrl: n,
                dismissForAllRepos: t,
                dismissForThisRepo: i,
            }) =>
                (0, y.jsxs)("div", {
                    className:
                        "p-4 text-center rounded-2 border color-border-muted",
                    children: [
                        (0, y.jsx)("div", {
                            className: "float-right",
                            children: (0, y.jsxs)(ib.W, {
                                children: [
                                    (0, y.jsx)(ib.W.Button, {
                                        children: "Dismiss",
                                    }),
                                    (0, y.jsx)(ib.W.Overlay, {
                                        width: "medium",
                                        children: (0, y.jsxs)(lQ.l, {
                                            children: [
                                                (0, y.jsx)(lQ.l.Item, {
                                                    onSelect: i,
                                                    children:
                                                        "Dismiss for this repository only",
                                                }),
                                                (0, y.jsx)(lQ.l.Item, {
                                                    onSelect: t,
                                                    children:
                                                        "Dismiss for all repositories",
                                                }),
                                            ],
                                        }),
                                    }),
                                ],
                            }),
                        }),
                        (0, y.jsxs)("div", {
                            className: "col-8 mx-auto",
                            children: [
                                (0, y.jsxs)("h4", {
                                    className: "mb-2",
                                    children: [
                                        "\u{1F44B} Want to contribute to ",
                                        e,
                                        "?",
                                    ],
                                }),
                                (0, y.jsxs)("span", {
                                    children: [
                                        (0, y.jsx)("span", {
                                            children:
                                                "If you have a bug or an idea, read the ",
                                        }),
                                        (0, y.jsx)(e9.A, {
                                            href:
                                                a ??
                                                "https://opensource.guide/",
                                            target: "_blank",
                                            "data-testid":
                                                l8.ftcBannerContributingGuidelinesLink,
                                            children: "contributing guidelines",
                                        }),
                                        (0, y.jsx)("span", {
                                            children:
                                                " before opening an issue. ",
                                        }),
                                    ],
                                }),
                                l &&
                                    (0, y.jsxs)(y.Fragment, {
                                        children: [
                                            (0, y.jsx)("br", {}),
                                            (0, y.jsxs)("span", {
                                                children: [
                                                    (0, y.jsx)("span", {
                                                        children:
                                                            "If you're ready to tackle some open issues, ",
                                                    }),
                                                    (0, y.jsx)(e9.A, {
                                                        href: n,
                                                        target: "_blank",
                                                        "data-testid":
                                                            "repo-good-first-issues",
                                                        children:
                                                            "we've collected some good first issues for you.",
                                                    }),
                                                ],
                                            }),
                                        ],
                                    }),
                            ],
                        }),
                    ],
                });
            try {
                op.displayName ||
                    (op.displayName = "FirstTimeContributionBannerDisplay");
            } catch {}
            let oy = ({ repository: e }) => {
                    let a = (0, er.useRelayEnvironment)(),
                        [l, n] = (0, er.useQueryLoader)(od),
                        t = (0, er.useFragment)(oc, e),
                        i = (0, f.useCallback)(() => {
                            !(function ({ environment: e, repositoryId: a }) {
                                (0, er.commitMutation)(e, {
                                    mutation: om,
                                    variables: {
                                        input: {
                                            notice: "first_time_contributor_issues_banner",
                                            repositoryId: a,
                                        },
                                    },
                                    updater: (e) => {
                                        let l = e.get(a);
                                        l &&
                                            l.setValue(
                                                !1,
                                                "showFirstTimeContributorBanner(isPullRequests:false)"
                                            );
                                    },
                                });
                            })({ environment: a, repositoryId: t.id });
                        }, [a, t.id]),
                        s = (0, f.useCallback)(() => {
                            !(function ({ environment: e, repositoryId: a }) {
                                (0, er.commitMutation)(e, {
                                    mutation: og,
                                    variables: {
                                        input: {
                                            notice: "first_time_contributor_issues_banner",
                                        },
                                    },
                                    updater: (e) => {
                                        let l = e.get(a);
                                        l &&
                                            l.setValue(
                                                !1,
                                                "showFirstTimeContributorBanner(isPullRequests:false)"
                                            );
                                    },
                                });
                            })({ environment: a, repositoryId: t.id });
                        }, [a, t.id]);
                    (0, f.useEffect)(() => {
                        t.showFirstTimeContributorBanner && n({ node: t.id });
                    }, [n, t]);
                    let r = (0, f.useMemo)(
                        () =>
                            (0, y.jsx)(op, {
                                repoNameWithOwner: t.nameWithOwner,
                                contributingGuidelinesUrl: void 0,
                                hasGoodFirstIssueIssues:
                                    !!t.communityProfile
                                        ?.goodFirstIssueIssuesCount,
                                contributeUrl: `${t.url}/contribute`,
                                dismissForThisRepo: i,
                                dismissForAllRepos: s,
                            }),
                        [
                            t.nameWithOwner,
                            t.communityProfile?.goodFirstIssueIssuesCount,
                            t.url,
                            i,
                            s,
                        ]
                    );
                    return t.showFirstTimeContributorBanner
                        ? l
                            ? (0, y.jsx)(f.Suspense, {
                                  fallback: r,
                                  children: (0, y.jsx)(oh, {
                                      queryRef: l,
                                      data: t,
                                      dismissForThisRepo: i,
                                      dismissForAllRepos: s,
                                  }),
                              })
                            : r
                        : null;
                },
                oh = ({
                    data: e,
                    queryRef: a,
                    dismissForAllRepos: l,
                    dismissForThisRepo: n,
                }) => {
                    let { node: t } = (0, er.usePreloadedQuery)(od, a);
                    return (0, y.jsx)(op, {
                        repoNameWithOwner: e.nameWithOwner,
                        contributingGuidelinesUrl:
                            t?.contributingGuidelines
                                ?.firstTimeContributionLink ?? void 0,
                        hasGoodFirstIssueIssues:
                            !!e.communityProfile?.goodFirstIssueIssuesCount,
                        contributeUrl: `${e.url}/contribute`,
                        dismissForThisRepo: n,
                        dismissForAllRepos: l,
                    });
                };
            try {
                oy.displayName ||
                    (oy.displayName = "FirstTimeContributionBanner");
            } catch {}
            try {
                oh.displayName ||
                    (oh.displayName = "FirstTimeContributionBannerInternal");
            } catch {}
            let ok = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "PinnedIssues",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: [
                                { kind: "Literal", name: "first", value: 3 },
                            ],
                            concreteType: "PinnedIssueConnection",
                            kind: "LinkedField",
                            name: "pinnedIssues",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PinnedIssue",
                                    kind: "LinkedField",
                                    name: "nodes",
                                    plural: !0,
                                    selections: [
                                        e,
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issue",
                                            plural: !1,
                                            selections: [
                                                e,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "title",
                                                    storageKey: null,
                                                },
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "PinnedIssueIssue",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "totalCount",
                                    storageKey: null,
                                },
                            ],
                            storageKey: "pinnedIssues(first:3)",
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanPinIssues",
                            storageKey: null,
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            ok.hash = "6f99e78aa98c45e24d83e282f516fea3";
            var of = l(96222),
                ob = l(27945);
            let oC = {
                    couldNotUnpinIssue: "Could not unpin issue",
                    couldNotReorderPinnedIssues:
                        "Could not reorder pinned issues",
                },
                oS = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "input",
                            },
                        ],
                        a = [
                            {
                                kind: "Variable",
                                name: "input",
                                variableName: "input",
                            },
                        ],
                        l = [{ kind: "Literal", name: "first", value: 3 }],
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        t = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        i = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        };
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "prioritizePinnedIssuesMutation",
                            selections: [
                                {
                                    alias: null,
                                    args: a,
                                    concreteType:
                                        "PrioritizePinnedIssuesPayload",
                                    kind: "LinkedField",
                                    name: "prioritizePinnedIssues",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Repository",
                                            kind: "LinkedField",
                                            name: "repository",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: l,
                                                    concreteType:
                                                        "PinnedIssueConnection",
                                                    kind: "LinkedField",
                                                    name: "pinnedIssues",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "PinnedIssue",
                                                            kind: "LinkedField",
                                                            name: "nodes",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "Issue",
                                                                    kind: "LinkedField",
                                                                    name: "issue",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            n,
                                                                            t,
                                                                            {
                                                                                args: null,
                                                                                kind: "FragmentSpread",
                                                                                name: "PinnedIssueIssue",
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey:
                                                        "pinnedIssues(first:3)",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "Mutation",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "prioritizePinnedIssuesMutation",
                            selections: [
                                {
                                    alias: null,
                                    args: a,
                                    concreteType:
                                        "PrioritizePinnedIssuesPayload",
                                    kind: "LinkedField",
                                    name: "prioritizePinnedIssues",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Repository",
                                            kind: "LinkedField",
                                            name: "repository",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: l,
                                                    concreteType:
                                                        "PinnedIssueConnection",
                                                    kind: "LinkedField",
                                                    name: "pinnedIssues",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "PinnedIssue",
                                                            kind: "LinkedField",
                                                            name: "nodes",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "Issue",
                                                                    kind: "LinkedField",
                                                                    name: "issue",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            n,
                                                                            t,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "titleHTML",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            i,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "createdAt",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "state",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "stateReason",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "number",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    null,
                                                                                kind: "LinkedField",
                                                                                name: "author",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "__typename",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "login",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        i,
                                                                                        n,
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "totalCommentsCount",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    "Repository",
                                                                                kind: "LinkedField",
                                                                                name: "repository",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "viewerCanPinIssues",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        n,
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                n,
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey:
                                                        "pinnedIssues(first:3)",
                                                },
                                                n,
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "25e2e16efc92a0f22e68aa3e80cd0ae4",
                            metadata: {},
                            name: "prioritizePinnedIssuesMutation",
                            operationKind: "mutation",
                            text: null,
                        },
                    };
                })();
            oS.hash = "8d81d4322538bb0f6ee082e437422283";
            let oF = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "url",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "PinnedIssueIssue",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "titleHTML",
                            storageKey: null,
                        },
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "stateReason",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "author",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "login",
                                    storageKey: null,
                                },
                                e,
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCommentsCount",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "viewerCanPinIssues",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            oF.hash = "3fcb5899d4e1abb96acfe94dc8129a7e";
            var ov = l(8341);
            let oL = {
                PinnedIssueContainer:
                    "PinnedIssue-module__PinnedIssueContainer--k5How",
                contentContainer: "PinnedIssue-module__contentContainer--PLL4E",
                titleOptionsContainer:
                    "PinnedIssue-module__titleOptionsContainer--ofFRp",
                Link: "PinnedIssue-module__Link--yd2ZP",
                Octicon: "PinnedIssue-module__Octicon--idveC",
                IconButton: "PinnedIssue-module__IconButton--CjwMC",
                metadataContainer:
                    "PinnedIssue-module__metadataContainer--CcI54",
                issueMetadata: "PinnedIssue-module__issueMetadata--rSCZN",
                commentCountContainer:
                    "PinnedIssue-module__commentCountContainer--z9G6s",
                commentIcon: "PinnedIssue-module__commentIcon--b5Jg2",
                commentCountText: "PinnedIssue-module__commentCountText--k9mxc",
            };
            function oI({ issue: e }) {
                let a = (0, er.useFragment)(oF, e),
                    l = (0, er.useRelayEnvironment)(),
                    { addToast: n } = (0, x.Y6)(),
                    t = (0, f.useCallback)(() => {
                        a &&
                            (0, ov.e)({
                                environment: l,
                                input: { issueId: a.id },
                                onCompleted: () => {},
                                onError: () => {
                                    n({
                                        type: "error",
                                        message: oC.couldNotUnpinIssue,
                                    });
                                },
                            });
                    }, [n, a, l]),
                    i = (0, f.useRef)(null);
                if (!a) return (0, y.jsx)(y.Fragment, {});
                let s =
                        "CLOSED" === a.state && "NOT_PLANNED" === a.stateReason
                            ? "NOT_PLANNED"
                            : a.state,
                    r = (0, ta.q)(s),
                    o = a.totalCommentsCount ?? 0,
                    u = new Date(a.createdAt);
                return (0, y.jsx)("div", {
                    className: oL.PinnedIssueContainer,
                    children: (0, y.jsxs)("div", {
                        className: oL.contentContainer,
                        children: [
                            (0, y.jsxs)("div", {
                                className: oL.titleOptionsContainer,
                                children: [
                                    (0, y.jsxs)(e9.A, {
                                        "aria-label": `View ${a.title}`,
                                        className: (0, l7.$)(
                                            "css-truncate",
                                            oL.Link
                                        ),
                                        href: a.url,
                                        muted: !0,
                                        children: [
                                            (0, y.jsx)(l5.A, {
                                                sx: { color: r.color },
                                                icon: r.icon,
                                                "aria-label": r.description,
                                                className: oL.Octicon,
                                            }),
                                            (0, y.jsx)(tD.JR, {
                                                html: a.titleHTML,
                                            }),
                                        ],
                                    }),
                                    a.repository.viewerCanPinIssues &&
                                        (0, y.jsxs)(ib.W, {
                                            anchorRef: i,
                                            children: [
                                                (0, y.jsx)(ib.W.Anchor, {
                                                    children: (0, y.jsx)(aU.K, {
                                                        size: "small",
                                                        icon: P.KebabHorizontalIcon,
                                                        variant: "invisible",
                                                        "aria-label":
                                                            "Pinned issue options",
                                                        className:
                                                            oL.IconButton,
                                                    }),
                                                }),
                                                (0, y.jsx)(ib.W.Overlay, {
                                                    width: "medium",
                                                    children: (0, y.jsxs)(
                                                        lQ.l,
                                                        {
                                                            children: [
                                                                a &&
                                                                    (0, y.jsxs)(
                                                                        lQ.l
                                                                            .Item,
                                                                        {
                                                                            onSelect:
                                                                                t,
                                                                            "aria-label": `Unpin issue #${a.number}, ${a.title}`,
                                                                            children:
                                                                                [
                                                                                    (0,
                                                                                    y.jsx)(
                                                                                        lQ
                                                                                            .l
                                                                                            .LeadingVisual,
                                                                                        {
                                                                                            children:
                                                                                                (0,
                                                                                                y.jsx)(
                                                                                                    l5.A,
                                                                                                    {
                                                                                                        icon: P.PinSlashIcon,
                                                                                                    }
                                                                                                ),
                                                                                        }
                                                                                    ),
                                                                                    "Unpin",
                                                                                ],
                                                                        }
                                                                    ),
                                                                (0, y.jsx)(
                                                                    of.sH,
                                                                    {
                                                                        Component:
                                                                            o_,
                                                                        returnFocusRef:
                                                                            i,
                                                                    }
                                                                ),
                                                            ],
                                                        }
                                                    ),
                                                }),
                                            ],
                                        }),
                                ],
                            }),
                            (0, y.jsxs)("div", {
                                className: oL.metadataContainer,
                                children: [
                                    (0, y.jsxs)("span", {
                                        className: oL.issueMetadata,
                                        children: [
                                            "#",
                                            a.number,
                                            " \xb7",
                                            " ",
                                            a.author &&
                                                (0, y.jsx)(e9.A, {
                                                    "aria-label": `View ${a.author.login} profile`,
                                                    href: a.author.url,
                                                    "data-hovercard-url": (0,
                                                    e5.dCN)({
                                                        owner: a.author.login,
                                                    }),
                                                    muted: !0,
                                                    children: a.author.login,
                                                }),
                                            " ",
                                            (0, y.jsx)("span", {
                                                children: "opened ",
                                            }),
                                            (0, y.jsxs)(n1.A, {
                                                date: u,
                                                children: [
                                                    "on ",
                                                    u.toLocaleDateString(
                                                        "en-US",
                                                        {
                                                            month: "short",
                                                            day: "numeric",
                                                            year: "numeric",
                                                        }
                                                    ),
                                                ],
                                            }),
                                        ],
                                    }),
                                    o > 0 &&
                                        (0, y.jsxs)("div", {
                                            className: oL.commentCountContainer,
                                            children: [
                                                (0, y.jsx)(l5.A, {
                                                    icon: P.CommentIcon,
                                                    "aria-label": `${o} comments`,
                                                    className: oL.commentIcon,
                                                }),
                                                (0, y.jsx)("span", {
                                                    className:
                                                        oL.commentCountText,
                                                    children: o,
                                                }),
                                            ],
                                        }),
                                ],
                            }),
                        ],
                    }),
                });
            }
            function o_({ onClick: e }) {
                return (0, y.jsxs)(lQ.l.Item, {
                    onSelect: e,
                    children: [
                        (0, y.jsx)(lQ.l.LeadingVisual, {
                            children: (0, y.jsx)(l5.A, { icon: P.GrabberIcon }),
                        }),
                        "Advanced move...",
                    ],
                });
            }
            try {
                oI.displayName || (oI.displayName = "PinnedIssue");
            } catch {}
            try {
                o_.displayName || (o_.displayName = "ActionListItemReorder");
            } catch {}
            let ox = {
                container: "PinnedIssues-module__container--qvnXj",
                area: "PinnedIssues-module__area--pgH8Q",
            };
            function oK({ repository: e }) {
                let a = (0, er.useFragment)(ok, e),
                    l = (0, f.useCallback)(
                        (e) =>
                            (e?.nodes || [])
                                .flatMap((e) => (e?.issue ? e : []))
                                .map((e) => ({
                                    title: e.issue.title,
                                    id: e.issue.id,
                                    data: e,
                                })),
                        []
                    ),
                    [n, t] = (0, f.useState)(() => l(a.pinnedIssues));
                (0, f.useEffect)(() => {
                    a.pinnedIssues && t(() => l(a.pinnedIssues));
                }, [a.pinnedIssues, l]);
                let i = (0, er.useRelayEnvironment)(),
                    { addToast: s } = (0, x.Y6)(),
                    r = (0, f.useCallback)(
                        ({ dragMetadata: e, dropMetadata: l, isBefore: r }) => {
                            if (e.id === l?.id) return;
                            let o = n.find((a) => a.id === e.id);
                            if (!o) return;
                            let u = n.reduce(
                                (e, a) => (
                                    o.id === a.id ||
                                        (a.id !== l?.id
                                            ? e.push(a)
                                            : r
                                              ? e.push(o, a)
                                              : e.push(a, o)),
                                    e
                                ),
                                []
                            );
                            t(u);
                            let d = u.map((e) => e.id);
                            !(function ({
                                environment: e,
                                input: a,
                                onCompleted: l,
                                onError: n,
                            }) {
                                (0, er.commitMutation)(e, {
                                    mutation: oS,
                                    variables: { input: a },
                                    onCompleted: () => l?.(),
                                    onError: (e) => n?.(e),
                                });
                            })({
                                environment: i,
                                input: { repositoryId: a.id, issueIds: d },
                                onCompleted: () => {},
                                onError: () => {
                                    (t(n),
                                        s({
                                            type: "error",
                                            message:
                                                oC.couldNotReorderPinnedIssues,
                                        }));
                                },
                            });
                        },
                        [s, a.id, i, n]
                    ),
                    o = (0, f.useRef)(null),
                    u = (0, ob.w)(o.current);
                if (1 > (a.pinnedIssues?.totalCount || 0)) return null;
                let d = 1 === n.length;
                return (0, y.jsx)("div", {
                    ref: o,
                    children: (0, y.jsx)(of.BS, {
                        items: n,
                        onDrop: r,
                        className: ox.area,
                        direction: u(["vertical", "vertical", "horizontal"]),
                        "aria-label": "Drag and drop pinned issues list.",
                        renderOverlay: (e, l) =>
                            (0, y.jsx)(
                                of.BS.Item,
                                {
                                    index: l,
                                    id: e.id,
                                    title: e.title,
                                    hideTrigger: !a.viewerCanPinIssues,
                                    className: ox.container,
                                    style: {
                                        display: a.viewerCanPinIssues
                                            ? "grid"
                                            : void 0,
                                        alignItems: "start",
                                        gridTemplateColumns: d
                                            ? "0px 1fr"
                                            : "24px 1fr",
                                        gap: 16,
                                        paddingLeft: a.viewerCanPinIssues
                                            ? "var(--base-size-8)"
                                            : "var(--base-size-12)",
                                    },
                                    isDragOverlay: !0,
                                    children: (0, y.jsx)(oI, {
                                        issue: e.data.issue,
                                    }),
                                },
                                e.id
                            ),
                        children: n.map((e, l) =>
                            (0, y.jsx)(
                                of.BS.Item,
                                {
                                    index: l,
                                    id: e.id,
                                    title: e.title,
                                    hideTrigger: !a.viewerCanPinIssues,
                                    className: ox.container,
                                    style: {
                                        display: a.viewerCanPinIssues
                                            ? "grid"
                                            : void 0,
                                        alignItems: "start",
                                        gridTemplateColumns: d
                                            ? "0px 1fr"
                                            : "24px 1fr",
                                        gap: 16,
                                        paddingLeft: a.viewerCanPinIssues
                                            ? "var(--base-size-8)"
                                            : "var(--base-size-12)",
                                    },
                                    children: (0, y.jsx)(oI, {
                                        issue: e.data.issue,
                                    }),
                                },
                                e.id
                            )
                        ),
                    }),
                });
            }
            try {
                oK.displayName || (oK.displayName = "PinnedIssues");
            } catch {}
            let ow = {
                    middlePaneGrid:
                        "IssueIndexPage-module__middlePaneGrid--hXFwX",
                },
                oN = ({ queries: { pageQuery: e } }) => {
                    let { queryRef: a, loadQuery: l } = aa(e, eQ),
                        { setCurrentViewId: n } = eM();
                    return ((0, f.useEffect)(() => {
                        n(F.repository);
                    }, [e, n]),
                    a)
                        ? (0, y.jsx)(oj, { pageQueryRef: a, loadQuery: l })
                        : null;
                };
            function oj({ pageQueryRef: e, loadQuery: a }) {
                let l = (0, er.useLazyLoadQuery)(
                        eq,
                        { id: F.repository },
                        { fetchPolicy: "store-only" }
                    ),
                    { bulkJobId: n, setBulkJobId: t } = eD(),
                    i = (0, er.usePreloadedQuery)(eQ, e);
                return i.repository
                    ? (0, y.jsx)(as, {
                          category: "Issues Index",
                          children: (0, y.jsxs)(oo, {
                              bulkJobId: n,
                              setBulkJobId: t,
                              children: [
                                  (0, y.jsx)(aQ, {
                                      contentAs: "div",
                                      resizeable: !1,
                                      leftPaneWidth: "small",
                                      middlePane: (0, y.jsx)(y.Fragment, {
                                          children: (0, y.jsxs)("div", {
                                              className: ow.middlePaneGrid,
                                              children: [
                                                  (0, y.jsx)(rw, {}),
                                                  (0, y.jsx)(oy, {
                                                      repository: i.repository,
                                                  }),
                                                  (0, y.jsx)(oK, {
                                                      repository: i.repository,
                                                  }),
                                                  l.node
                                                      ? (0, y.jsx)(oe, {
                                                            fetchedView: l.node,
                                                            fetchedRepository:
                                                                i.repository,
                                                            search: i.repository,
                                                            loadSearchQuery: a,
                                                        })
                                                      : null,
                                              ],
                                          }),
                                      }),
                                  }),
                                  (0, y.jsx)(rX, {}),
                              ],
                          }),
                      })
                    : null;
            }
            try {
                oN.displayName || (oN.displayName = "IssueIndexPage");
            } catch {}
            try {
                oj.displayName || (oj.displayName = "IssueIndexPageContent");
            } catch {}
            var oR = l(50855);
            let oT = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueDetailCurrentViewFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "query",
                        storageKey: null,
                    },
                ],
                type: "Shortcutable",
                abstractKey: "__isShortcutable",
            };
            function oP(e) {
                return e.target instanceof HTMLElement
                    ? e.target.closest(".js-hovercard-content")
                    : null;
            }
            oT.hash = "2c8ca9d1a4c7011b9735fb27e282abab";
            let oA = {
                    IssueDetailContainer:
                        "IssueDetail-module__IssueDetailContainer--w0tUF",
                },
                oM = ({ fetchedView: e, preloadedQueries: a }) => {
                    var l;
                    let {
                            itemIdentifier: n,
                            viewId: t,
                            sidePanelItemIdentifier: i,
                            setSidePanelItemIdentifier: s,
                            sidePanelItemURL: r,
                        } = ai(),
                        { onIssueHrefLinkClick: o, navigateToRoot: u } = lS(),
                        { query: d } = (0, er.useFragment)(oT, e),
                        c = (0, I.X)(),
                        m =
                            c?.current_user_settings?.use_single_key_shortcut ||
                            !1,
                        g = c?.current_user_settings?.preferred_emoji_skin_tone,
                        p = !c.scoped_repository,
                        h = (0, f.useCallback)(() => {
                            u(t ?? ee.id, d);
                        }, [t, d, u]),
                        { navigateToUrl: k } = lS(),
                        b = (0, f.useCallback)(
                            (e) => {
                                let { owner: a, repo: l, number: n } = e;
                                s({
                                    owner: a,
                                    repo: l,
                                    number: n,
                                    type: "Issue",
                                });
                            },
                            [s]
                        ),
                        C = (0, f.useCallback)(() => {
                            s(null);
                        }, [s]),
                        [S, F] = (0, iP.Fo)(
                            `${c.scoped_repository?.owner}-${c.scoped_repository?.name}-deletedRecordId`,
                            ""
                        ),
                        v = (0, f.useCallback)(
                            (e) => {
                                F(e);
                            },
                            [F]
                        ),
                        L = (0, f.useCallback)(
                            (e, a) =>
                                !!n &&
                                a.owner === n.owner &&
                                a.repo === n.repo &&
                                a.number === n.number &&
                                (e.preventDefault(), C(), !0),
                            [n, C]
                        );
                    return (
                        (l = (e, a) => {
                            if (ef(e, n?.owner || "", n?.repo || "")) return;
                            let l = a.target.closest("a");
                            l && k(l);
                        }),
                        (0, f.useEffect)(() => {
                            let e = (e) => {
                                    oP(e) && e.stopPropagation();
                                },
                                a = (e) => {
                                    let a = oP(e);
                                    if (!a) return;
                                    let n = a.getAttribute(
                                        "data-hovercard-target-url"
                                    );
                                    n && l(n, e);
                                };
                            return (
                                window.addEventListener("focus", e, !0),
                                window.addEventListener("click", a),
                                () => {
                                    (window.removeEventListener("focus", e, !0),
                                        window.removeEventListener("click", a));
                                }
                            );
                        }),
                        (0, y.jsxs)(y.Fragment, {
                            children: [
                                (0, y.jsx)("div", {
                                    className: (0, l7.$)(
                                        "primary-viewer",
                                        oA.IssueDetailContainer
                                    ),
                                    "data-testid": l8.issueViewerContainer,
                                    children: (0, y.jsx)(f.Suspense, {
                                        fallback: (0, y.jsx)("span", {
                                            children: "Loading Issue...",
                                        }),
                                        children:
                                            n &&
                                            (0, y.jsx)(aq.cI, {
                                                itemIdentifier: n,
                                                optionConfig: {
                                                    withLiveUpdates: !0,
                                                    singleKeyShortcutsEnabled:
                                                        m,
                                                    emojiSkinTonePreference: g,
                                                    showRepositoryPill: p,
                                                    showIssueCreateButton: !0,
                                                    onLinkClick: o,
                                                    navigateBack: h,
                                                    onIssueDelete: v,
                                                    navigate: k,
                                                    preloadedQueries: a,
                                                    timelineEventBaseUrl: ((
                                                        e,
                                                        a
                                                    ) =>
                                                        a
                                                            ? `/${a}/${e}/issues`
                                                            : "/issues")(
                                                        c?.scoped_repository
                                                            ?.name,
                                                        c?.scoped_repository
                                                            ?.owner
                                                    ),
                                                    titleAs: "h1",
                                                    scrollToTopOnClick: !0,
                                                    onSubIssueClick: b,
                                                    useViewportQueries: !0,
                                                    insideSidePanel:
                                                        !i && void 0,
                                                },
                                            }),
                                    }),
                                }),
                                i &&
                                    (0, y.jsx)(rv, {
                                        onClose: C,
                                        children: (0, y.jsx)(aq.cI, {
                                            itemIdentifier: i,
                                            optionConfig: Object.assign(
                                                {},
                                                aO.C,
                                                {
                                                    shouldSkipSetDocumentTitle:
                                                        !0,
                                                    onClose: C,
                                                    insideSidePanel: !0,
                                                    singleKeyShortcutsEnabled:
                                                        m,
                                                    onSubIssueClick: b,
                                                    onParentIssueActivate: L,
                                                    onIssueDelete: v,
                                                    navigateBack: C,
                                                    additionalHeaderActions: (0,
                                                    y.jsx)(aU.K, {
                                                        as: "a",
                                                        role: "link",
                                                        variant: "invisible",
                                                        icon: P.ScreenFullIcon,
                                                        "aria-label":
                                                            U.sidePanelTooltip,
                                                        href: r,
                                                    }),
                                                }
                                            ),
                                        }),
                                    }),
                            ],
                        })
                    );
                };
            try {
                oM.displayName || (oM.displayName = "IssueDetail");
            } catch {}
            let oD = ({ queries: { ...e } }) => {
                let { scoped_repository: a } = (0, I.X)(),
                    { currentViewId: l, setCurrentViewId: n } = eM(),
                    { bulkJobId: t, setBulkJobId: i } = eD(),
                    s = l || (a ? F.repository : F.assignedToMe);
                a && !l && n(s);
                let r = (0, er.useLazyLoadQuery)(
                    eq,
                    { id: s },
                    { fetchPolicy: "store-only" }
                );
                return (((0, oR.N)().title = ""), r && r.node)
                    ? (0, y.jsx)(as, {
                          category: "Issue Show",
                          children: (0, y.jsx)(oo, {
                              bulkJobId: t,
                              setBulkJobId: i,
                              children: (0, y.jsx)(ae.A, {
                                  sx: {
                                      display: "flex",
                                      height: "100%",
                                      justifyContent: "stretch",
                                      "> *": { width: "100%" },
                                  },
                                  children: (0, y.jsx)(oM, {
                                      fetchedView: r.node,
                                      preloadedQueries: e,
                                  }),
                              }),
                          }),
                      })
                    : null;
            };
            try {
                oD.displayName || (oD.displayName = "IssueShowPage");
            } catch {}
            let oV = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    n = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    t = [
                        {
                            kind: "Variable",
                            name: "number",
                            variableName: "number",
                        },
                    ],
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l],
                        kind: "Fragment",
                        metadata: null,
                        name: "RepositoryMilestoneEditPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: t,
                                        kind: "FragmentSpread",
                                        name: "RepositoryMilestoneEditPageContentInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, l, a],
                        kind: "Operation",
                        name: "RepositoryMilestoneEditPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: t,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            i,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "number",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "title",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "dueOn",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "state",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    i,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "1dd2279633d96fb745325e7da3dc9180",
                        metadata: {},
                        name: "RepositoryMilestoneEditPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            oV.hash = "5fdd29f09a481802c9943f6d95d436ea";
            let oE = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryMilestoneEditPageContentInternal",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "number",
                                variableName: "number",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "MilestoneEditFormRepositoryQuery",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            oE.hash = "ff932bfcc382dda2e87c2a3243a08062";
            let oq = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneEditFormRepositoryQuery",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: [
                            {
                                kind: "Variable",
                                name: "number",
                                variableName: "number",
                            },
                        ],
                        concreteType: "Milestone",
                        kind: "LinkedField",
                        name: "milestone",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "id",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "number",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "title",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "description",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "dueOn",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneFormRepositoryQueryInternal",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            oq.hash = "c18b08b3c57d1ae0743ce04f3c39f1ce";
            let oO = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneFormRepositoryQueryInternal",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            oO.hash = "bb188885dcd6b84a291913e4a172557f";
            var oB = l(47594),
                o$ = l(19647);
            let oQ = {
                    editMilestone: "Edit",
                    newMilestone: "New milestone",
                    newIssue: "New issue",
                    milestoneClosed: "Closed ",
                    milestoneOpen: "Open",
                    milestoneOverdue: "Overdue by",
                    separator: "\u2022",
                    milestoneLastUpdated: "Last updated ",
                    noDueDate: "No due date",
                    dueBy: "Due by",
                    milestoneError: "Milestone cannot be loaded.",
                    milestonesError: "Milestones cannot be loaded.",
                    milestoneErrorMessage:
                        "This milestone cannot be loaded due to a system error.",
                    milestonesErrorMessage:
                        "Milestones cannot be loaded due to a system error.",
                    milestoneIssuesError: "Failed to load issues.",
                    milestoneIssuesErrorMessage:
                        "This milestone's issues can not be loaded due to a system error.",
                    milestoneCreateError: "Could not create milestone",
                    milestonePageError: "Could not load page",
                    milestonePageErrorMessage:
                        "This page cannot be loaded due to a system error.",
                    milestoneCreatePermissionError:
                        "You do not have permission to create milestones in this repository.",
                    titleRequired: "Title cannot be empty",
                    bulkActions: "Bulk actions",
                    markAs: "Mark as",
                    label: "Label",
                    assign: "Assign",
                    project: "Project",
                    milestone: "Milestone",
                    noCreatedMilestones:
                        "You haven\u2019t created any Milestones.",
                    noCreatedMilestonesDescription:
                        "Use Milestones to create collections of Issues and Pull Requests for a particular release or project.",
                    createAMilestone: "Create a milestone",
                    weCouldntFindMilestones: "We couldn\u2019t find anything!",
                    weCouldntFindMilestonesDescription:
                        "There aren't any milestones that match. Give it another shot above.",
                    setIssueType: "Issue type",
                    emptyStateOpenIssues:
                        "There are no open issues in this milestone",
                    emptyStateClosedIssues:
                        "There are no closed issues in this milestone",
                    title: "Title",
                    description: "Description (optional)",
                    dueDate: "Due date (optional)",
                    createMilestone: "Create milestone",
                    cancel: "Cancel",
                    createMilestoneDescription:
                        "Create a new milestone to help organize your issues and pull requests. ",
                    learnMorePrefix: "Learn more about ",
                    milestonesAndIssues: "milestones and issues",
                    datePlaceholder: "Choose date...",
                    titlePlaceholder: "Milestone name",
                    descriptionPlaceholder: "Describe your milestone",
                    saveChanges: "Save changes",
                    closeMilestone: "Close milestone",
                    reopenMilestone: "Reopen milestone",
                    editMilestoneTitle: "Edit milestone",
                    milestoneEditPermissionError:
                        "You do not have permission to edit milestones in this repository.",
                    milestoneEditError: "Could not edit milestone",
                    deleteMilestoneConfirmationTitle:
                        "Permanently delete milestone",
                    deleteMilestoneWarningPermanent:
                        "Once you delete this milestone you will not be able to see it again.",
                    deleteMilestoneAssociatedIssuesNote:
                        "Deleting this milestone will not delete or close the associated issues.",
                    deleteMilestoneConfirmationButton: "Delete milestone",
                    deleteMilestoneError:
                        "Could not delete this milestone. Please try again.",
                },
                oU = {
                    milestonePageTitle:
                        "MilestoneForm-module__milestonePageTitle--yaqmo",
                    errorBanner: "MilestoneForm-module__errorBanner--ODAih",
                    formWrapper: "MilestoneForm-module__formWrapper--YdGtF",
                    formContainer: "MilestoneForm-module__formContainer--_9cWJ",
                    formControl: "MilestoneForm-module__formControl--sj6KS",
                    datePickerAnchor:
                        "MilestoneForm-module__datePickerAnchor--VqRQk",
                    buttonGroup: "MilestoneForm-module__buttonGroup--dKjxJ",
                    buttonRow: "MilestoneForm-module__buttonRow--jjlWC",
                };
            function oH(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p,
                    h,
                    k,
                    b,
                    C,
                    S,
                    F,
                    v,
                    L,
                    I,
                    _,
                    x,
                    K,
                    w = (0, iV.c)(68),
                    {
                        repository: N,
                        onCancel: j,
                        formTitle: R,
                        formDescription: T,
                        formSubmitLabel: P,
                        onSubmit: A,
                        submissionErrors: M,
                        initialValues: D,
                        onToggleMilestoneState: V,
                        toggleStateLabel: E,
                    } = e,
                    q = void 0 === P ? oQ.createMilestone : P,
                    [O, B] = (0, f.useState)(D?.title || ""),
                    [$, Q] = (0, f.useState)(D?.description || "");
                w[0] !== D
                    ? ((a = () => {
                          if (D?.dueOn) {
                              let e = new Date(D.dueOn);
                              return new Date(
                                  e.getUTCFullYear(),
                                  e.getUTCMonth(),
                                  e.getUTCDate()
                              );
                          }
                          return null;
                      }),
                      (w[0] = D),
                      (w[1] = a))
                    : (a = w[1]);
                let [U, H] = (0, f.useState)(a),
                    [z, W] = (0, f.useState)(!1),
                    [G, Z] = (0, f.useState)(null),
                    X = (0, f.useRef)(null);
                w[2] === Symbol.for("react.memo_cache_sentinel")
                    ? ((l = oO), (w[2] = l))
                    : (l = w[2]);
                let J = (0, er.useFragment)(l, N);
                w[3] !== $ ||
                w[4] !== U ||
                w[5] !== z ||
                w[6] !== A ||
                w[7] !== J ||
                w[8] !== O
                    ? ((n = async (e) => {
                          if (z) return;
                          if ((e.preventDefault(), W(!0), Z(null), !O.trim())) {
                              (Z(oQ.titleRequired), X.current?.focus(), W(!1));
                              return;
                          }
                          let a = null;
                          if (U) {
                              let e = U.getFullYear();
                              a = new Date(
                                  Date.UTC(e, U.getMonth(), U.getDate())
                              ).toISOString();
                          }
                          A(
                              {
                                  repositoryId: J.id,
                                  title: O.trim(),
                                  description: $?.trim(),
                                  dueOn: a,
                              },
                              W
                          );
                      }),
                      (w[3] = $),
                      (w[4] = U),
                      (w[5] = z),
                      (w[6] = A),
                      (w[7] = J),
                      (w[8] = O),
                      (w[9] = n))
                    : (n = w[9]);
                let Y = n;
                w[10] === Symbol.for("react.memo_cache_sentinel")
                    ? ((t = (e) => {
                          H(e);
                      }),
                      (w[10] = t))
                    : (t = w[10]);
                let ee = t;
                w[11] !== G
                    ? ((i = (e) => {
                          (B(e.target.value), G && Z(null));
                      }),
                      (w[11] = G),
                      (w[12] = i))
                    : (i = w[12]);
                let ea = i;
                (w[13] !== M
                    ? ((s =
                          M &&
                          (0, y.jsx)(sQ.l, {
                              "aria-label": "Error",
                              title: "Error",
                              description: M,
                              variant: "critical",
                              className: oU.errorBanner,
                          })),
                      (w[13] = M),
                      (w[14] = s))
                    : (s = w[14]),
                    w[15] !== R
                        ? ((r =
                              R &&
                              (0, y.jsx)(e8.A, {
                                  as: "h1",
                                  variant: "medium",
                                  className: oU.milestonePageTitle,
                                  children: R,
                              })),
                          (w[15] = R),
                          (w[16] = r))
                        : (r = w[16]),
                    w[17] !== T || w[18] !== r
                        ? ((o = (0, y.jsxs)("div", { children: [r, T] })),
                          (w[17] = T),
                          (w[18] = r),
                          (w[19] = o))
                        : (o = w[19]),
                    w[20] === Symbol.for("react.memo_cache_sentinel")
                        ? ((u = (0, y.jsx)(ld.A.Label, {
                              htmlFor: "milestone-title",
                              children: oQ.title,
                          })),
                          (w[20] = u))
                        : (u = w[20]),
                    w[21] !== ea || w[22] !== O
                        ? ((d = (0, y.jsx)(rl.A, {
                              block: !0,
                              value: O,
                              onChange: ea,
                              placeholder: oQ.titlePlaceholder,
                              ref: X,
                          })),
                          (w[21] = ea),
                          (w[22] = O),
                          (w[23] = d))
                        : (d = w[23]),
                    w[24] !== G
                        ? ((c =
                              G &&
                              (0, y.jsx)(ld.A.Validation, {
                                  variant: "error",
                                  children: G,
                              })),
                          (w[24] = G),
                          (w[25] = c))
                        : (c = w[25]),
                    w[26] !== z || w[27] !== d || w[28] !== c
                        ? ((m = (0, y.jsxs)(ld.A, {
                              className: oU.formControl,
                              id: "milestone-title",
                              disabled: z,
                              required: !0,
                              children: [u, d, c],
                          })),
                          (w[26] = z),
                          (w[27] = d),
                          (w[28] = c),
                          (w[29] = m))
                        : (m = w[29]),
                    w[30] === Symbol.for("react.memo_cache_sentinel")
                        ? ((g = (0, y.jsx)(ld.A.Label, {
                              htmlFor: "milestone-due-on",
                              children: oQ.dueDate,
                          })),
                          (w[30] = g))
                        : (g = w[30]),
                    w[31] !== U || w[32] !== z
                        ? ((p = (0, y.jsxs)(ld.A, {
                              className: oU.formControl,
                              id: "milestone-due-on",
                              children: [
                                  g,
                                  (0, y.jsx)(oB.DatePicker, {
                                      variant: "single",
                                      showClearButton: !0,
                                      value: U,
                                      onChange: ee,
                                      disabled: z,
                                      dateFormat: "MMM d, yyyy",
                                      placeholder: oQ.datePlaceholder,
                                      anchorClassName: oU.datePickerAnchor,
                                      fieldName: oQ.dueDate,
                                  }),
                              ],
                          })),
                          (w[31] = U),
                          (w[32] = z),
                          (w[33] = p))
                        : (p = w[33]),
                    w[34] === Symbol.for("react.memo_cache_sentinel")
                        ? ((h = (0, y.jsx)(ld.A.Label, {
                              htmlFor: "milestone-description",
                              children: oQ.description,
                          })),
                          (w[34] = h))
                        : (h = w[34]),
                    w[35] === Symbol.for("react.memo_cache_sentinel")
                        ? ((k = (e) => Q(e.target.value)), (w[35] = k))
                        : (k = w[35]),
                    w[36] !== $
                        ? ((b = (0, y.jsx)(o$.Ay, {
                              value: $,
                              onChange: k,
                              rows: 5,
                              placeholder: oQ.descriptionPlaceholder,
                              block: !0,
                          })),
                          (w[36] = $),
                          (w[37] = b))
                        : (b = w[37]),
                    w[38] !== z || w[39] !== b
                        ? ((C = (0, y.jsxs)(ld.A, {
                              className: oU.formControl,
                              id: "milestone-description",
                              disabled: z,
                              children: [h, b],
                          })),
                          (w[38] = z),
                          (w[39] = b),
                          (w[40] = C))
                        : (C = w[40]),
                    w[41] !== m || w[42] !== p || w[43] !== C
                        ? ((S = (0, y.jsxs)("div", {
                              className: oU.formWrapper,
                              children: [m, p, C],
                          })),
                          (w[41] = m),
                          (w[42] = p),
                          (w[43] = C),
                          (w[44] = S))
                        : (S = w[44]));
                let el = `${oU.buttonRow} ${V ? "flex-justify-between" : "flex-justify-end"}`;
                return (
                    w[45] !== V || w[46] !== E
                        ? ((F =
                              V &&
                              E &&
                              (0, y.jsx)(lT.Q, {
                                  onClick: (e) => V?.(e, W),
                                  children: E,
                              })),
                          (w[45] = V),
                          (w[46] = E),
                          (w[47] = F))
                        : (F = w[47]),
                    w[48] !== j
                        ? ((v = (0, y.jsx)(lT.Q, {
                              onClick: j,
                              children: oQ.cancel,
                          })),
                          (w[48] = j),
                          (w[49] = v))
                        : (v = w[49]),
                    w[50] !== q || w[51] !== z
                        ? ((L = (0, y.jsx)(lT.Q, {
                              type: "submit",
                              variant: "primary",
                              loading: z,
                              children: q,
                          })),
                          (w[50] = q),
                          (w[51] = z),
                          (w[52] = L))
                        : (L = w[52]),
                    w[53] !== v || w[54] !== L
                        ? ((I = (0, y.jsxs)("div", {
                              className: oU.buttonGroup,
                              children: [v, L],
                          })),
                          (w[53] = v),
                          (w[54] = L),
                          (w[55] = I))
                        : (I = w[55]),
                    w[56] !== el || w[57] !== F || w[58] !== I
                        ? ((_ = (0, y.jsxs)("div", {
                              className: el,
                              children: [F, I],
                          })),
                          (w[56] = el),
                          (w[57] = F),
                          (w[58] = I),
                          (w[59] = _))
                        : (_ = w[59]),
                    w[60] !== Y || w[61] !== S || w[62] !== _
                        ? ((x = (0, y.jsxs)("form", {
                              onSubmit: Y,
                              children: [S, _],
                          })),
                          (w[60] = Y),
                          (w[61] = S),
                          (w[62] = _),
                          (w[63] = x))
                        : (x = w[63]),
                    w[64] !== x || w[65] !== s || w[66] !== o
                        ? ((K = (0, y.jsxs)("div", {
                              className: oU.formContainer,
                              id: "milestone-create-form",
                              "data-hpc": !0,
                              children: [s, o, x],
                          })),
                          (w[64] = x),
                          (w[65] = s),
                          (w[66] = o),
                          (w[67] = K))
                        : (K = w[67]),
                    K
                );
            }
            try {
                oH.displayName || (oH.displayName = "MilestoneForm");
            } catch {}
            let oz = {
                middlePaneWrapper:
                    "MilestoneCreateEdit-module__middlePaneWrapper--gmwp5",
                milestonePageDescription:
                    "MilestoneCreateEdit-module__milestonePageDescription--mGCls",
            };
            var oW = l(32647);
            let oG = {
                    middlePaneWrapper:
                        "RepositoryMilestone-module__middlePaneWrapper--VBdKn",
                    middlePaneGrid:
                        "RepositoryMilestone-module__middlePaneGrid--WmGQt",
                    milestoneDetailsWrapper:
                        "RepositoryMilestone-module__milestoneDetailsWrapper--il8vQ",
                    status: "RepositoryMilestone-module__status--I42Sx",
                    metadataWrapper:
                        "RepositoryMilestone-module__metadataWrapper--YtF8Z",
                    listMetadataContainer:
                        "RepositoryMilestone-module__listMetadataContainer--Gv4AB",
                    listMetadata:
                        "RepositoryMilestone-module__listMetadata--bFJOV",
                    listProgressSection:
                        "RepositoryMilestone-module__listProgressSection--sIwlB",
                    progressBar:
                        "RepositoryMilestone-module__progressBar--a5roB",
                    progress: "RepositoryMilestone-module__progress--cie9z",
                    menuButton: "RepositoryMilestone-module__menuButton--Z7OJF",
                    progressSection:
                        "RepositoryMilestone-module__progressSection--P3HiV",
                    progressPercentage:
                        "RepositoryMilestone-module__progressPercentage--fJ104",
                    overDue: "RepositoryMilestone-module__overDue--bGddO",
                    tabsContainer:
                        "RepositoryMilestone-module__tabsContainer--BGbpC",
                    buttonGrp: "RepositoryMilestone-module__buttonGrp--b_2i1",
                    header: "RepositoryMilestone-module__header--HA_c7",
                    actionsGrp: "RepositoryMilestone-module__actionsGrp--SSUft",
                    milestoneListWrapper:
                        "RepositoryMilestone-module__milestoneListWrapper--Q9iOR",
                    milestoneDataContainer:
                        "RepositoryMilestone-module__milestoneDataContainer--efcg_",
                    middot: "RepositoryMilestone-module__middot--Q3Xim",
                    milestoneIssueCount:
                        "RepositoryMilestone-module__milestoneIssueCount--nrOxX",
                    milestoneRow:
                        "RepositoryMilestone-module__milestoneRow--NlpRQ",
                    listItemContent:
                        "RepositoryMilestone-module__listItemContent--CF1E8",
                    listDescription:
                        "RepositoryMilestone-module__listDescription--kZEti",
                    listDateContainer:
                        "RepositoryMilestone-module__listDateContainer--VI15t",
                    milestoneData:
                        "RepositoryMilestone-module__milestoneData--F9vIx",
                    milestoneStatus:
                        "RepositoryMilestone-module__milestoneStatus--nw5OQ",
                    milestoneDescription:
                        "RepositoryMilestone-module__milestoneDescription--OJy1H",
                    mdViewer: "RepositoryMilestone-module__mdViewer--D23DO",
                    collapsed: "RepositoryMilestone-module__collapsed--cDpqq",
                    expanded: "RepositoryMilestone-module__expanded--RylBC",
                    showMoreButtonContainer:
                        "RepositoryMilestone-module__showMoreButtonContainer--cLu9F",
                    button: "RepositoryMilestone-module__button--HJiGz",
                    dialogTitle:
                        "RepositoryMilestone-module__dialogTitle--eQqaq",
                    dialogDescriptionContainer:
                        "RepositoryMilestone-module__dialogDescriptionContainer--tfSea",
                    dialogDescription:
                        "RepositoryMilestone-module__dialogDescription--g3kcF",
                    errorFallbackContainer:
                        "RepositoryMilestone-module__errorFallbackContainer--QWk1R",
                    loadMoreButton:
                        "RepositoryMilestone-module__loadMoreButton--mpixq",
                    loadMoreButtonWrapper:
                        "RepositoryMilestone-module__loadMoreButtonWrapper--nb7Oy",
                    dndList: "RepositoryMilestone-module__dndList--c7FXB",
                    deleteMilestoneButton:
                        "RepositoryMilestone-module__deleteMilestoneButton--Rq8du",
                    dragAndDropItem:
                        "RepositoryMilestone-module__dragAndDropItem--xZ1i2",
                    link: "RepositoryMilestone-module__link--q0A_2",
                    heading: "RepositoryMilestone-module__heading--Fqnhv",
                    milestoneTitleWrapper:
                        "RepositoryMilestone-module__milestoneTitleWrapper--Iz5b7",
                    title: "RepositoryMilestone-module__title--_e7Jh",
                },
                oZ = (e) => {
                    let a,
                        l,
                        n,
                        t,
                        i,
                        s,
                        r,
                        o = (0, iV.c)(12),
                        { title: u, message: d } = e;
                    return (
                        o[0] === Symbol.for("react.memo_cache_sentinel")
                            ? ((a = (0, y.jsx)(oW.E.Visual, {
                                  children: (0, y.jsx)(P.AlertIcon, {
                                      size: "medium",
                                  }),
                              })),
                              (o[0] = a))
                            : (a = o[0]),
                        o[1] !== u
                            ? ((l = (0, y.jsx)(oW.E.Heading, { children: u })),
                              (o[1] = u),
                              (o[2] = l))
                            : (l = o[2]),
                        o[3] === Symbol.for("react.memo_cache_sentinel")
                            ? ((n = (0, y.jsx)(e9.A, {
                                  href: "https://support.github.com/",
                                  inline: !0,
                                  children: "contact support",
                              })),
                              (o[3] = n))
                            : (n = o[3]),
                        o[4] !== d
                            ? ((t = (0, y.jsxs)(oW.E.Description, {
                                  children: [
                                      d,
                                      " Try reloading the page, or if the problem persists",
                                      " ",
                                      n,
                                  ],
                              })),
                              (o[4] = d),
                              (o[5] = t))
                            : (t = o[5]),
                        o[6] !== l || o[7] !== t
                            ? ((i = (0, y.jsxs)(oW.E, { children: [a, l, t] })),
                              (o[6] = l),
                              (o[7] = t),
                              (o[8] = i))
                            : (i = o[8]),
                        o[9] === Symbol.for("react.memo_cache_sentinel")
                            ? ((s = (0, y.jsx)(e9.A, {
                                  href: "https://www.githubstatus.com/",
                                  children: "GitHub Status",
                              })),
                              (o[9] = s))
                            : (s = o[9]),
                        o[10] !== i
                            ? ((r = (0, y.jsxs)("div", {
                                  className: oG.errorFallbackContainer,
                                  children: [i, s],
                              })),
                              (o[10] = i),
                              (o[11] = r))
                            : (r = o[11]),
                        r
                    );
                };
            try {
                oZ.displayName || (oZ.displayName = "MilestoneError");
            } catch {}
            let oX = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "message",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "updateMilestoneDetailsMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "UpdateMilestonePayload",
                                kind: "LinkedField",
                                name: "updateMilestone",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "MilestoneDetail",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [l],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "updateMilestoneDetailsMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "UpdateMilestonePayload",
                                kind: "LinkedField",
                                name: "updateMilestone",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "closed",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "updatedAt",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "descriptionHTML",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "progressPercentage",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "dueOn",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "id",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                            l,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "9e2070837146ea7b194fdf07aad0ba86",
                        metadata: {},
                        name: "updateMilestoneDetailsMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            oX.hash = "64505a94b96eb0c14b201becddec86a0";
            let oJ = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "UpdateMilestonePayload",
                            kind: "LinkedField",
                            name: "updateMilestone",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Milestone",
                                    kind: "LinkedField",
                                    name: "milestone",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "id",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "closed",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "updateMilestoneMutation",
                        selections: a,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "updateMilestoneMutation",
                        selections: a,
                    },
                    params: {
                        id: "1d5567fef295bc7769be0ec14110d3aa",
                        metadata: {},
                        name: "updateMilestoneMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function oY({
                environment: e,
                input: a,
                onError: l,
                onCompleted: n,
            }) {
                return (0, er.commitMutation)(e, {
                    mutation: oJ,
                    variables: { input: a },
                    onError: (e) => l && l(e),
                    optimisticResponse: {
                        updateMilestone: {
                            milestone: {
                                id: a.id,
                                closed: "CLOSED" === a.state,
                            },
                        },
                    },
                    onCompleted: (e) => n && n(e),
                });
            }
            function o1(e) {
                return e
                    .map((e) => e.message)
                    .filter(Boolean)
                    .join(", ");
            }
            function o2(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r = (0, iV.c)(28),
                    [o, u] = (0, f.useState)(null),
                    d = (0, e7.Z)(),
                    c = (0, er.useRelayEnvironment)(),
                    { repository: m } = e;
                r[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = oq), (r[0] = a))
                    : (a = r[0]);
                let g = (0, er.useFragment)(a, m);
                r[1] !== c ||
                r[2] !== d ||
                r[3] !== g.milestone ||
                r[4] !== g.nameWithOwner ||
                r[5] !== g.viewerCanPush
                    ? ((l = (e, a) => {
                          if ((u(null), !g.milestone)) {
                              (u(oQ.milestoneErrorMessage), a(!1));
                              return;
                          }
                          if (!g?.viewerCanPush) {
                              (u(oQ.milestoneEditPermissionError), a(!1));
                              return;
                          }
                          !(function ({
                              environment: e,
                              input: a,
                              onError: l,
                              onCompleted: n,
                          }) {
                              (0, eG.commitMutation)(e, {
                                  mutation: oX,
                                  variables: { input: a },
                                  onError: (e) => l && l(e),
                                  onCompleted: (e) => n && n(e),
                              });
                          })({
                              environment: c,
                              input: {
                                  id: g.milestone.id,
                                  title: e.title,
                                  description: e.description,
                                  dueOn: e.dueOn,
                              },
                              onError: (e) => {
                                  (a(!1),
                                      e.cause && Array.isArray(e.cause)
                                          ? u(o1(e.cause))
                                          : u(oQ.milestoneEditError));
                              },
                              onCompleted: (e) => {
                                  if (
                                      !e.updateMilestone?.milestone ||
                                      e?.updateMilestone?.errors?.length > 0
                                  ) {
                                      (u(oQ.milestoneEditError), a(!1));
                                      return;
                                  }
                                  g.milestone &&
                                      d(
                                          `/${g.nameWithOwner}/milestone/${g.milestone.number}`
                                      );
                              },
                          });
                      }),
                      (r[1] = c),
                      (r[2] = d),
                      (r[3] = g.milestone),
                      (r[4] = g.nameWithOwner),
                      (r[5] = g.viewerCanPush),
                      (r[6] = l))
                    : (l = r[6]);
                let p = l;
                r[7] !== c ||
                r[8] !== d ||
                r[9] !== g.milestone ||
                r[10] !== g.nameWithOwner ||
                r[11] !== g.viewerCanPush
                    ? ((n = (e, a) => {
                          if (
                              (e.preventDefault(),
                              a(!0),
                              u(null),
                              !g?.milestone)
                          ) {
                              (u(oQ.milestoneErrorMessage), a(!1));
                              return;
                          }
                          if (!g?.viewerCanPush) {
                              (u(oQ.milestoneEditPermissionError), a(!1));
                              return;
                          }
                          let l = g?.milestone?.state;
                          oY({
                              environment: c,
                              input: {
                                  id: g.milestone.id,
                                  state: "CLOSED" === l ? "OPEN" : "CLOSED",
                              },
                              onError: (e) => {
                                  (a(!1),
                                      e.cause && Array.isArray(e.cause)
                                          ? u(o1(e.cause))
                                          : u(oQ.milestoneEditError));
                              },
                              onCompleted: (e) => {
                                  if (!e.updateMilestone?.milestone) {
                                      (u(oQ.milestoneEditError), a(!1));
                                      return;
                                  }
                                  d(
                                      `/${g.nameWithOwner}/milestone/${g?.milestone?.number}`
                                  );
                              },
                          });
                      }),
                      (r[7] = c),
                      (r[8] = d),
                      (r[9] = g.milestone),
                      (r[10] = g.nameWithOwner),
                      (r[11] = g.viewerCanPush),
                      (r[12] = n))
                    : (n = r[12]);
                let h = n;
                if (!g?.milestone) {
                    let e;
                    return (
                        r[13] === Symbol.for("react.memo_cache_sentinel")
                            ? ((e = (0, y.jsx)("div", {
                                  className: oz.middlePaneWrapper,
                                  children: (0, y.jsx)(oZ, {
                                      title: oQ.milestoneError,
                                      message: oQ.milestoneErrorMessage,
                                  }),
                              })),
                              (r[13] = e))
                            : (e = r[13]),
                        e
                    );
                }
                r[14] !== g.milestone.description ||
                r[15] !== g.milestone.dueOn ||
                r[16] !== g.milestone.id ||
                r[17] !== g.milestone.title
                    ? ((t = {
                          id: g.milestone.id,
                          title: g.milestone.title,
                          description: g.milestone.description,
                          dueOn: g.milestone.dueOn,
                      }),
                      (r[14] = g.milestone.description),
                      (r[15] = g.milestone.dueOn),
                      (r[16] = g.milestone.id),
                      (r[17] = g.milestone.title),
                      (r[18] = t))
                    : (t = r[18]);
                let k = t;
                r[19] === Symbol.for("react.memo_cache_sentinel")
                    ? ((i = (0, y.jsx)(oZ, {
                          title: oQ.milestonePageError,
                          message: oQ.milestonePageErrorMessage,
                      })),
                      (r[19] = i))
                    : (i = r[19]);
                let b =
                    "OPEN" === g.milestone.state
                        ? oQ.closeMilestone
                        : oQ.reopenMilestone;
                return (
                    r[20] !== p ||
                    r[21] !== h ||
                    r[22] !== k ||
                    r[23] !== e.optionConfig ||
                    r[24] !== g ||
                    r[25] !== o ||
                    r[26] !== b
                        ? ((s = (0, y.jsx)("div", {
                              className: oz.middlePaneWrapper,
                              "data-testid": "milestone-edit",
                              children: (0, y.jsx)(ih.t, {
                                  fallback: i,
                                  children: (0, y.jsx)(oH, {
                                      repository: g,
                                      optionConfig: e.optionConfig,
                                      formTitle: oQ.editMilestoneTitle,
                                      formSubmitLabel: oQ.saveChanges,
                                      onSubmit: p,
                                      onCancel: o0,
                                      submissionErrors: o,
                                      initialValues: k,
                                      onToggleMilestoneState: h,
                                      toggleStateLabel: b,
                                  }),
                              }),
                          })),
                          (r[20] = p),
                          (r[21] = h),
                          (r[22] = k),
                          (r[23] = e.optionConfig),
                          (r[24] = g),
                          (r[25] = o),
                          (r[26] = b),
                          (r[27] = s))
                        : (s = r[27]),
                    s
                );
            }
            function o0() {
                (0, an.OE)();
            }
            oJ.hash = "7de82b3f406a20a1bcff83a3b90caa3f";
            try {
                o2.displayName || (o2.displayName = "MilestoneEdit");
            } catch {}
            let o3 = ({ queries: { pageQuery: e } }) => {
                let { queryRef: a } = aa(e, oV);
                return a
                    ? (0, y.jsx)(as, {
                          category: "Repository Milestone Edit",
                          children: (0, y.jsx)(o4, { pageQueryRef: a }),
                      })
                    : null;
            };
            function o4({ pageQueryRef: e }) {
                let a = (0, er.usePreloadedQuery)(oV, e),
                    { setCurrentViewId: l } = eM();
                return ((0, f.useEffect)(() => {
                    l(F.repository);
                }, [e, l]),
                a.repository)
                    ? (0, y.jsx)(o5, { repository: a.repository })
                    : (reportError(
                          Error(
                              `Could not find repository when loading milestone edit page for ${A.fV?.href.toString()}`
                          )
                      ),
                      (0, y.jsx)("div", { children: "Repository not found" }));
            }
            function o5({ repository: e }) {
                let a = (0, er.useFragment)(oE, e),
                    { current_user_settings: l } = (0, I.X)(),
                    n = {
                        useMonospaceFont: l.use_monospace_font,
                        pasteUrlsAsPlainText: l.paste_url_link_as_plain_text,
                        singleKeyShortcutsEnabled: l.use_single_key_shortcut,
                    };
                return (0, y.jsx)(o2, { repository: a, optionConfig: n });
            }
            try {
                o4.displayName ||
                    (o4.displayName = "RepositoryMilestoneEditPageContent");
            } catch {}
            try {
                o5.displayName ||
                    (o5.displayName =
                        "RepositoryMilestoneEditPageContentInternal");
            } catch {}
            let o7 = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "name",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "owner",
                        },
                    ],
                    a = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "RepositoryMilestoneNewPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "RepositoryMilestoneNewPageContentInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "RepositoryMilestoneNewPageQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "464458f0f148c3968c73a7a1705e4e57",
                        metadata: {},
                        name: "RepositoryMilestoneNewPageQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            o7.hash = "749c7099d42326fd01bc6fe04b11e359";
            let o6 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryMilestoneNewPageContentInternal",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneCreateFormRepositoryQuery",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            o6.hash = "47febff47eae9f5d9f892373fe759979";
            let o9 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneCreateFormRepositoryQuery",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneFormRepositoryQueryInternal",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            o9.hash = "4436584437a09ba2611e78aa4dba1852";
            let o8 = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "message",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "createRepositoryMilestoneMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "CreateMilestonePayload",
                                kind: "LinkedField",
                                name: "createMilestone",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [l],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [n],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "createRepositoryMilestoneMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "CreateMilestonePayload",
                                kind: "LinkedField",
                                name: "createMilestone",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            l,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "id",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                            n,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "3bbed252fba522eb614bc7d07f407808",
                        metadata: {},
                        name: "createRepositoryMilestoneMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function ue(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s = (0, iV.c)(12),
                    r = (0, e7.Z)(),
                    o = (0, er.useRelayEnvironment)(),
                    [u, d] = (0, f.useState)(null);
                s[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = o9), (s[0] = a))
                    : (a = s[0]);
                let c = (0, er.useFragment)(a, e.repository);
                s[1] !== o || s[2] !== r || s[3] !== c
                    ? ((l = (e, a) => {
                          if ((d(null), !c?.viewerCanPush)) {
                              (d(oQ.milestoneCreatePermissionError), a(!1));
                              return;
                          }
                          !(function ({
                              environment: e,
                              input: a,
                              onError: l,
                              onCompleted: n,
                          }) {
                              (0, eG.commitMutation)(e, {
                                  mutation: o8,
                                  variables: { input: a },
                                  onError: (e) => l && l(e),
                                  onCompleted: (e) => n && n(e),
                              });
                          })({
                              environment: o,
                              input: e,
                              onError: (e) => {
                                  (a(!1),
                                      e.cause && Array.isArray(e.cause)
                                          ? d(o1(e.cause))
                                          : d(oQ.milestoneCreateError));
                              },
                              onCompleted: (e) => {
                                  if (
                                      !e.createMilestone?.milestone ||
                                      e?.createMilestone?.errors?.length > 0
                                  ) {
                                      (d(oQ.milestoneCreateError), a(!1));
                                      return;
                                  }
                                  r(
                                      `/${c.nameWithOwner}/milestone/${e.createMilestone?.milestone.number}`
                                  );
                              },
                          });
                      }),
                      (s[1] = o),
                      (s[2] = r),
                      (s[3] = c),
                      (s[4] = l))
                    : (l = s[4]);
                let m = l;
                s[5] === Symbol.for("react.memo_cache_sentinel")
                    ? ((n = (0, y.jsxs)("p", {
                          className: oz.milestonePageDescription,
                          children: [
                              oQ.createMilestoneDescription,
                              " ",
                              oQ.learnMorePrefix,
                              " ",
                              (0, y.jsx)(e9.A, {
                                  href: "https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues",
                                  inline: !0,
                                  children: oQ.milestonesAndIssues,
                              }),
                              ".",
                          ],
                      })),
                      (s[5] = n))
                    : (n = s[5]);
                let g = n;
                return (
                    s[6] === Symbol.for("react.memo_cache_sentinel")
                        ? ((t = (0, y.jsx)(oZ, {
                              title: oQ.milestonePageError,
                              message: oQ.milestonePageErrorMessage,
                          })),
                          (s[6] = t))
                        : (t = s[6]),
                    s[7] !== m ||
                    s[8] !== e.optionConfig ||
                    s[9] !== c ||
                    s[10] !== u
                        ? ((i = (0, y.jsx)("div", {
                              className: oz.middlePaneWrapper,
                              "data-hpc": !0,
                              "data-testid": "milestone-create",
                              children: (0, y.jsx)(ih.t, {
                                  fallback: t,
                                  children: (0, y.jsx)(oH, {
                                      repository: c,
                                      optionConfig: e.optionConfig,
                                      formTitle: oQ.createMilestone,
                                      formDescription: g,
                                      formSubmitLabel: oQ.createMilestone,
                                      onSubmit: m,
                                      onCancel: ua,
                                      submissionErrors: u,
                                  }),
                              }),
                          })),
                          (s[7] = m),
                          (s[8] = e.optionConfig),
                          (s[9] = c),
                          (s[10] = u),
                          (s[11] = i))
                        : (i = s[11]),
                    i
                );
            }
            function ua() {
                (0, an.OE)();
            }
            o8.hash = "0125b820c8c6a0ed165bd9e3da6cf56e";
            try {
                ue.displayName || (ue.displayName = "MilestoneCreate");
            } catch {}
            let ul = ({ queries: { pageQuery: e } }) => {
                let { queryRef: a } = aa(e, o7);
                return a
                    ? (0, y.jsx)(as, {
                          category: "Repository Milestone New",
                          children: (0, y.jsx)(un, { pageQueryRef: a }),
                      })
                    : null;
            };
            function un({ pageQueryRef: e }) {
                let a = (0, er.usePreloadedQuery)(o7, e),
                    { setCurrentViewId: l } = eM();
                return ((0, f.useEffect)(() => {
                    l(F.repository);
                }, [e, l]),
                a.repository)
                    ? (0, y.jsx)(ut, { repository: a.repository })
                    : (reportError(
                          Error(
                              `Could not find repository when loading milestone new page for ${A.fV?.href.toString()}`
                          )
                      ),
                      (0, y.jsx)("div", { children: "Repository not found" }));
            }
            function ut({ repository: e }) {
                let a = (0, er.useFragment)(o6, e),
                    { current_user_settings: l } = (0, I.X)(),
                    n = {
                        useMonospaceFont: l.use_monospace_font,
                        pasteUrlsAsPlainText: l.paste_url_link_as_plain_text,
                        singleKeyShortcutsEnabled: l.use_single_key_shortcut,
                    };
                return (0, y.jsx)(ue, { repository: a, optionConfig: n });
            }
            try {
                un.displayName ||
                    (un.displayName = "RepositoryMilestoneNewPageContent");
            } catch {}
            try {
                ut.displayName ||
                    (ut.displayName =
                        "RepositoryMilestoneNewPageContentInternal");
            } catch {}
            let ui = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    {
                        defaultValue: "ASC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    {
                        defaultValue: "NAME",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryLabelIndexPageContentInternal",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "orderDirection",
                                variableName: "orderDirection",
                            },
                            {
                                kind: "Variable",
                                name: "orderField",
                                variableName: "orderField",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "RepositoryLabelsInternal",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            ui.hash = "2605942908ff38ddc04349e54bb1baeb";
            let us = {
                argumentDefinitions: [
                    { defaultValue: 30, kind: "LocalArgument", name: "first" },
                    {
                        defaultValue: "ASC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    {
                        defaultValue: "NAME",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryLabelsInternal",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "orderDirection",
                                variableName: "orderDirection",
                            },
                            {
                                kind: "Variable",
                                name: "orderField",
                                variableName: "orderField",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "LabelList",
                    },
                    { args: null, kind: "FragmentSpread", name: "LabelCreate" },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            us.hash = "4eb551169f8543de2632cb8a1ac8b95d";
            let ur = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "LabelCreate",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            ur.hash = "8fb54c2ec326eaca63b8336f3a43368d";
            let uo = {
                cancelButtonText: "Cancel",
                clearSearch: "Clear search",
                color: "Color",
                createButtonText: "Create label",
                deleteButtonText: "Delete",
                deleteLabelAssociatedIssuesNote:
                    "Deleting this label will remove it from all issues and pull requests.",
                deleteLabelButtonText: "Delete this label",
                deleteLabelError:
                    "There was an error deleting the label. Please try again.",
                deleteLabelWarningPermanent:
                    "Once you delete this label, you will not be able to see it again.",
                description: "Description",
                editLabel: "Edit label",
                editLabelError: "Could not update label",
                invalidColor: "Color is invalid",
                labelCreateError: "Could not create label",
                labelCreatePermissionError:
                    "You do not have permission to create labels in this repository",
                labelDeleteDialogTitle: "Permanently delete label",
                labelDescriptionPlaceholder: "Optionally add a description",
                labelNamePlaceholder: "Label name",
                labelPreview: "Label preview",
                name: "Name",
                nameRequired: "Name is required",
                newLabel: "New label",
                noLabelsCreatedDescription:
                    'Start creating labels using the "New Label" button.',
                noLabelsCreatedTitle: "There are no labels in this repository",
                noMatchingLabelsDescription:
                    "We couldn\u2019t find any labels that match your filter. Please try again.",
                noMatchingLabelsTitle: "No matching labels",
                saveChanges: "Save changes",
                search: "Search",
                searchAll: "Search all labels",
                updateLabelError: "There was an error updating this label",
            };
            var uu = l(80249),
                ud = l(47990);
            let uc = {
                    container: "LabelColorPicker-module__container--jaiwn",
                    inputContainer:
                        "LabelColorPicker-module__inputContainer--dUhdw",
                    popup: "LabelColorPicker-module__popup--wOxZR",
                    text: "LabelColorPicker-module__text--Cl7Om",
                    colors: "LabelColorPicker-module__colors--MZMA2",
                    color: "LabelColorPicker-module__color--SYuTX",
                },
                um = [
                    "#b60205",
                    "#d93f0b",
                    "#fbca04",
                    "#0e8a16",
                    "#006b75",
                    "#1d76db",
                    "#0052cc",
                    "#5319e7",
                ],
                ug = [
                    "#e99695",
                    "#f9d0c4",
                    "#fef2c0",
                    "#c2e0c6",
                    "#bfdadc",
                    "#c5def5",
                    "#bfd4f2",
                    "#d4c5f9",
                ],
                up = {
                    "#b60205": "Red",
                    "#d93f0b": "Orange",
                    "#fbca04": "Yellow",
                    "#0e8a16": "Green",
                    "#006b75": "Teal",
                    "#1d76db": "Blue",
                    "#0052cc": "Navy",
                    "#5319e7": "Purple",
                    "#e99695": "Pink",
                    "#f9d0c4": "Light Pink",
                    "#fef2c0": "Light Yellow",
                    "#c2e0c6": "Light Green",
                    "#bfdadc": "Light Teal",
                    "#c5def5": "Light Blue",
                    "#bfd4f2": "Light Indigo",
                    "#d4c5f9": "Lavender",
                };
            function uy() {
                let e = () => Math.floor(256 * Math.random());
                return `#${[e(), e(), e()].map((e) => e.toString(16).padStart(2, "0")).join("")}`;
            }
            function uh(e) {
                return /^#([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})$/.test(e);
            }
            let uk = (0, f.forwardRef)((e, a) => {
                let l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p,
                    h,
                    k,
                    b,
                    C,
                    S = (0, iV.c)(39),
                    { color: F, onChangeCallback: v } = e,
                    [L, I] = (0, f.useState)(F),
                    [_, x] = (0, f.useState)(F),
                    [K, w] = (0, f.useState)(!1),
                    N = ((e = 1, a) => {
                        let { colorScheme: l } = (0, aX.DP)(),
                            n = (0, f.useMemo)(
                                () => l?.includes("high_contrast"),
                                [l]
                            ),
                            t = (0, f.useMemo)(
                                () => ({
                                    "--lightness-threshold": "0.453",
                                    "--border-threshold": "0.96",
                                    "--background-alpha": "0.20",
                                    "--border-alpha":
                                        "max(0, min(calc((var(--perceived-lightness) - var(--border-threshold)) * 100), 1))",
                                    background:
                                        "rgb(var(--label-r), var(--label-g), var(--label-b))",
                                    color: "hsl(0deg, 0%, calc(var(--lightness-switch) * 100%))",
                                    borderWidth: e,
                                    borderStyle: "solid",
                                    borderColor:
                                        "hsla(var(--label-h), calc(var(--label-s) * 1%), calc((var(--label-l) - 25) * 1%), var(--border-alpha))",
                                }),
                                [e]
                            ),
                            i = (0, f.useMemo)(
                                () => ({
                                    "--lightness-threshold": "0.6",
                                    "--background-alpha": "0.18",
                                    "--border-alpha": n ? "0.9" : "0.3",
                                    "--lighten-by":
                                        "calc(((var(--lightness-threshold) - var(--perceived-lightness)) * 100) * var(--lightness-switch))",
                                    borderWidth: e,
                                    borderStyle: "solid",
                                    background:
                                        "rgba(var(--label-r), var(--label-g), var(--label-b), var(--background-alpha))",
                                    color: "hsl(var(--label-h), calc(var(--label-s) * 1%), calc((var(--label-l) + var(--lighten-by)) * 1%))",
                                    borderColor:
                                        "hsla(var(--label-h), calc(var(--label-s) * 1%), calc((var(--label-l) + var(--lighten-by)) * 1%), var(--border-alpha))",
                                }),
                                [n, e]
                            );
                        return (0, f.useMemo)(() => {
                            let [e, n, s] = (0, ud.Du)(a),
                                [r, o, u] = (0, ud.BT)(a);
                            return {
                                "--label-r": String(e),
                                "--label-g": String(n),
                                "--label-b": String(s),
                                "--label-h": String(Math.round(r)),
                                "--label-s": String(Math.round(100 * o)),
                                "--label-l": String(Math.round(100 * u)),
                                "--perceived-lightness":
                                    "calc(((var(--label-r) * 0.2126) + (var(--label-g) * 0.7152) + (var(--label-b) * 0.0722)) / 255)",
                                "--lightness-switch":
                                    "max(0, min(calc((var(--perceived-lightness) - var(--lightness-threshold)) * -1000), 1))",
                                "--border-color":
                                    "var(--borderColor-muted, var(--color-border-subtle))",
                                ...(l?.includes("light") ? t : i),
                            };
                        }, [a, l, t, i]);
                    })(1, _);
                S[0] !== v
                    ? ((l = (e) => {
                          (I(e), uh(e) && x(e), v?.(e));
                      }),
                      (S[0] = v),
                      (S[1] = l))
                    : (l = S[1]);
                let j = l;
                S[2] !== j
                    ? ((n = () => j(uy())), (S[2] = j), (S[3] = n))
                    : (n = S[3]);
                let R = n;
                S[4] !== j
                    ? ((t = (e) => j(e.target.value)), (S[4] = j), (S[5] = t))
                    : (t = S[5]);
                let T = t;
                S[6] !== j
                    ? ((i = (e) => {
                          (j(e), w(!1));
                      }),
                      (S[6] = j),
                      (S[7] = i))
                    : (i = S[7]);
                let A = i;
                S[8] !== A
                    ? ((s = (e, a) =>
                          (0, y.jsx)(
                              lT.Q,
                              {
                                  variant: "invisible",
                                  className: uc.color,
                                  style: { backgroundColor: e },
                                  "aria-label": `${up[e] ?? "Color:"} (${e})`,
                                  onClick: () => {
                                      A(e);
                                  },
                                  tabIndex: 0,
                              },
                              a
                          )),
                      (S[8] = A),
                      (S[9] = s))
                    : (s = S[9]);
                let M = s;
                (S[10] === Symbol.for("react.memo_cache_sentinel")
                    ? ((r = (0, y.jsx)(ld.A.Label, { children: "Color" })),
                      (S[10] = r))
                    : (r = S[10]),
                    S[11] !== _ || S[12] !== N
                        ? ((o = { ...N, backgroundColor: _ }),
                          (S[11] = _),
                          (S[12] = N),
                          (S[13] = o))
                        : (o = S[13]),
                    S[14] !== R || S[15] !== o
                        ? ((u = (0, y.jsx)(aU.K, {
                              style: o,
                              icon: P.SyncIcon,
                              "aria-label": "Choose random color",
                              title: "Choose random color",
                              onClick: R,
                          })),
                          (S[14] = R),
                          (S[15] = o),
                          (S[16] = u))
                        : (u = S[16]));
                let D = `${up[_] ?? "Color:"} (${_})`;
                (S[17] !== D
                    ? ((d = (0, y.jsx)(ld.A.Label, {
                          visuallyHidden: !0,
                          children: D,
                      })),
                      (S[17] = D),
                      (S[18] = d))
                    : (d = S[18]),
                    S[19] === Symbol.for("react.memo_cache_sentinel")
                        ? ((c = (0, nk.G)("color-input")), (S[19] = c))
                        : (c = S[19]),
                    S[20] === Symbol.for("react.memo_cache_sentinel")
                        ? ((m = () => w(!0)),
                          (g = (e) => {
                              (e.relatedTarget &&
                                  e.relatedTarget.closest(`.${uc.popup}`)) ||
                                  w(!1);
                          }),
                          (S[20] = m),
                          (S[21] = g))
                        : ((m = S[20]), (g = S[21])));
                let V = uh(L) ? "success" : "error";
                return (
                    S[22] !== L || S[23] !== T || S[24] !== a || S[25] !== V
                        ? ((p = (0, y.jsx)(rl.A, {
                              ...c,
                              value: L,
                              onChange: T,
                              onFocus: m,
                              onBlur: g,
                              validationStatus: V,
                              ref: a,
                          })),
                          (S[22] = L),
                          (S[23] = T),
                          (S[24] = a),
                          (S[25] = V),
                          (S[26] = p))
                        : (p = S[26]),
                    S[27] !== d || S[28] !== p
                        ? ((h = (0, y.jsxs)(ld.A, { children: [d, p] })),
                          (S[27] = d),
                          (S[28] = p),
                          (S[29] = h))
                        : (h = S[29]),
                    S[30] !== M || S[31] !== K
                        ? ((k =
                              K &&
                              (0, y.jsxs)("div", {
                                  className: uc.popup,
                                  tabIndex: -1,
                                  children: [
                                      (0, y.jsx)("span", {
                                          className: uc.text,
                                          children:
                                              "Choose from default colors",
                                      }),
                                      (0, y.jsx)("div", {
                                          className: uc.colors,
                                          children: um.map(M),
                                      }),
                                      (0, y.jsx)("div", {
                                          className: uc.colors,
                                          children: ug.map(M),
                                      }),
                                  ],
                              })),
                          (S[30] = M),
                          (S[31] = K),
                          (S[32] = k))
                        : (k = S[32]),
                    S[33] !== h || S[34] !== k
                        ? ((b = (0, y.jsxs)("div", {
                              className: uc.inputContainer,
                              children: [h, k],
                          })),
                          (S[33] = h),
                          (S[34] = k),
                          (S[35] = b))
                        : (b = S[35]),
                    S[36] !== b || S[37] !== u
                        ? ((C = (0, y.jsxs)(ld.A, {
                              children: [
                                  r,
                                  (0, y.jsxs)("div", {
                                      className: uc.container,
                                      children: [u, b],
                                  }),
                              ],
                          })),
                          (S[36] = b),
                          (S[37] = u),
                          (S[38] = C))
                        : (C = S[38]),
                    C
                );
            });
            uk.displayName = "LabelColorPicker";
            let uf = { container: "LabelPreview-module__container--pSt10" };
            function ub(e) {
                let a,
                    l,
                    n,
                    t = (0, iV.c)(8),
                    { nameHTML: i, name: s, color: r } = e;
                t[0] !== s || t[1] !== i
                    ? ((a = i ? (0, y.jsx)(tD.JR, { html: i }) : s || ""),
                      (t[0] = s),
                      (t[1] = i),
                      (t[2] = a))
                    : (a = t[2]);
                let o = a,
                    u = `#${r}`;
                return (
                    t[3] === Symbol.for("react.memo_cache_sentinel")
                        ? ((l = {
                              overflow: "hidden",
                              textOverflow: "ellipsis",
                              cursor: "pointer",
                              maxWidth: "100%",
                          }),
                          (t[3] = l))
                        : (l = t[3]),
                    t[4] !== o || t[5] !== s || t[6] !== u
                        ? ((n = (0, y.jsx)("div", {
                              className: uf.container,
                              children: (0, y.jsx)(tM.a, {
                                  text: o,
                                  fillColor: u,
                                  "aria-label": s,
                                  style: l,
                              }),
                          })),
                          (t[4] = o),
                          (t[5] = s),
                          (t[6] = u),
                          (t[7] = n))
                        : (n = t[7]),
                    n
                );
            }
            try {
                ub.displayName || (ub.displayName = "LabelPreview");
            } catch {}
            let uC = {
                middlePaneWrapper:
                    "RepositoryLabel-module__middlePaneWrapper--AubQN",
                labelListWrapper:
                    "RepositoryLabel-module__labelListWrapper--LLFcJ",
                labelRowDescriptionItemDescription:
                    "RepositoryLabel-module__labelRowDescriptionItemDescription--dXS7A",
                labelRowIssuesAndPrsCount:
                    "RepositoryLabel-module__labelRowIssuesAndPrsCount--nY8Px",
                labelRowDescription:
                    "RepositoryLabel-module__labelRowDescription--k9bUa",
                empty: "RepositoryLabel-module__empty--bpUCz",
                noActionBar: "RepositoryLabel-module__noActionBar--er8N_",
                loadingIssueAndPullRequestCount:
                    "RepositoryLabel-module__loadingIssueAndPullRequestCount--bmzG1",
                header: "RepositoryLabel-module__header--srykm",
                heading: "RepositoryLabel-module__heading--1fg7S",
                dialogForm: "RepositoryLabel-module__dialogForm--TRoZz",
                dialogFormBody: "RepositoryLabel-module__dialogFormBody--on45F",
                dialogFormButtonGroup:
                    "RepositoryLabel-module__dialogFormButtonGroup--bMXvB",
                dialogFormInput:
                    "RepositoryLabel-module__dialogFormInput--UKl7o",
                dialogFormPreviewContainer:
                    "RepositoryLabel-module__dialogFormPreviewContainer--bdJ31",
                countContainer: "RepositoryLabel-module__countContainer--AVpX2",
                countItem: "RepositoryLabel-module__countItem--B5nNu",
            };
            function uS(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p,
                    h,
                    k,
                    b,
                    C,
                    S,
                    F,
                    v,
                    L,
                    I,
                    _,
                    x,
                    K,
                    w,
                    N = (0, iV.c)(68),
                    {
                        onDialogClose: j,
                        onDialogSubmit: R,
                        formTitle: T,
                        submissionErrors: P,
                        submitButtonText: A,
                        namePlaceholder: M,
                        descriptionPlaceholder: D,
                        initialValues: V,
                    } = e,
                    E = void 0 === T ? uo.newLabel : T,
                    q = void 0 === P ? "" : P,
                    O = void 0 === A ? uo.createButtonText : A,
                    [B, $] = (0, f.useState)(V?.name ?? ""),
                    [Q, U] = (0, f.useState)(V?.description ?? "");
                N[0] !== V
                    ? ((a = () => (V?.color ? `#${V.color}` : uy())),
                      (N[0] = V),
                      (N[1] = a))
                    : (a = N[1]);
                let [H, z] = (0, f.useState)(a),
                    [W, G] = (0, f.useState)(H),
                    [Z, X] = (0, f.useState)(!1),
                    [J, Y] = (0, f.useState)(null),
                    [ee, ea] = (0, f.useState)(null),
                    el = (0, f.useRef)(null),
                    en = (0, f.useRef)(null),
                    et = (0, f.useRef)(null);
                N[2] !== H ||
                N[3] !== W ||
                N[4] !== Q ||
                N[5] !== Z ||
                N[6] !== B ||
                N[7] !== R
                    ? ((l = () => {
                          if (!Z) {
                              if ((X(!0), Y(null), ea(null), !B)) {
                                  (Y(uo.nameRequired),
                                      X(!1),
                                      en.current?.focus());
                                  return;
                              }
                              if (!uh(W)) {
                                  (ea(uo.invalidColor),
                                      X(!1),
                                      et.current?.focus());
                                  return;
                              }
                              R(
                                  {
                                      name: B.trim(),
                                      description: Q.trim(),
                                      color: H.replace("#", ""),
                                  },
                                  X
                              );
                          }
                      }),
                      (N[2] = H),
                      (N[3] = W),
                      (N[4] = Q),
                      (N[5] = Z),
                      (N[6] = B),
                      (N[7] = R),
                      (N[8] = l))
                    : (l = N[8]);
                let ei = l;
                N[9] === Symbol.for("react.memo_cache_sentinel")
                    ? ((n = (e) => {
                          (G(e), uh(e) && (z(e), ea(null)));
                      }),
                      (N[9] = n))
                    : (n = N[9]);
                let es = n;
                (N[10] !== q
                    ? ((t = () => {
                          q &&
                              q.length > 0 &&
                              el?.current &&
                              el.current.focus();
                      }),
                      (i = [el, q]),
                      (N[10] = q),
                      (N[11] = t),
                      (N[12] = i))
                    : ((t = N[11]), (i = N[12])),
                    (0, f.useEffect)(t, i),
                    N[13] !== ei || N[14] !== j
                        ? ((s = {
                              "repository-label:save-label-submit": ei,
                              "repository-label:cancel-save-label": j,
                          }),
                          (N[13] = ei),
                          (N[14] = j),
                          (N[15] = s))
                        : (s = N[15]),
                    N[16] !== q
                        ? ((r =
                              q?.length > 0
                                  ? (0, y.jsx)(sQ.l, {
                                        ref: el,
                                        title: "Error",
                                        description: (0, y.jsx)(uu.o, {
                                            children: q,
                                        }),
                                        variant: "critical",
                                        role: "alert",
                                    })
                                  : null),
                          (N[16] = q),
                          (N[17] = r))
                        : (r = N[17]));
                let er = B || uo.labelPreview;
                return (
                    N[18] !== H
                        ? ((o = H?.replace("#", "")), (N[18] = H), (N[19] = o))
                        : (o = N[19]),
                    N[20] !== er || N[21] !== o
                        ? ((u = (0, y.jsx)("div", {
                              className: uC.dialogFormPreviewContainer,
                              children: (0, y.jsx)(ub, { name: er, color: o }),
                          })),
                          (N[20] = er),
                          (N[21] = o),
                          (N[22] = u))
                        : (u = N[22]),
                    N[23] === Symbol.for("react.memo_cache_sentinel")
                        ? ((d = (0, y.jsx)(ld.A.Label, {
                              htmlFor: "label-form-name",
                              children: uo.name,
                          })),
                          (N[23] = d))
                        : (d = N[23]),
                    N[24] === Symbol.for("react.memo_cache_sentinel")
                        ? ((c = (e) => $(e.target.value)), (N[24] = c))
                        : (c = N[24]),
                    N[25] !== B || N[26] !== M
                        ? ((m = (0, y.jsx)(rl.A, {
                              value: B,
                              onChange: c,
                              className: uC.dialogFormInput,
                              ref: en,
                              maxLength: 50,
                              placeholder: M,
                          })),
                          (N[25] = B),
                          (N[26] = M),
                          (N[27] = m))
                        : (m = N[27]),
                    N[28] !== J
                        ? ((g =
                              J &&
                              (0, y.jsx)(ld.A.Validation, {
                                  variant: "error",
                                  children: J,
                              })),
                          (N[28] = J),
                          (N[29] = g))
                        : (g = N[29]),
                    N[30] !== m || N[31] !== g
                        ? ((p = (0, y.jsxs)(ld.A, {
                              className: uC.dialogFormInput,
                              id: "label-form-name",
                              children: [d, m, g],
                          })),
                          (N[30] = m),
                          (N[31] = g),
                          (N[32] = p))
                        : (p = N[32]),
                    N[33] === Symbol.for("react.memo_cache_sentinel")
                        ? ((h = (0, y.jsx)(ld.A.Label, {
                              htmlFor: "label-form-description",
                              children: uo.description,
                          })),
                          (N[33] = h))
                        : (h = N[33]),
                    N[34] === Symbol.for("react.memo_cache_sentinel")
                        ? ((k = (e) => U(e.target.value)), (N[34] = k))
                        : (k = N[34]),
                    N[35] !== Q || N[36] !== D
                        ? ((b = (0, y.jsxs)(ld.A, {
                              className: uC.dialogFormInput,
                              id: "label-form-description",
                              children: [
                                  h,
                                  (0, y.jsx)(o$.Ay, {
                                      value: Q,
                                      onChange: k,
                                      rows: 3,
                                      className: uC.dialogFormInput,
                                      placeholder: D,
                                  }),
                              ],
                          })),
                          (N[35] = Q),
                          (N[36] = D),
                          (N[37] = b))
                        : (b = N[37]),
                    N[38] !== H
                        ? ((C = (0, y.jsx)(uk, {
                              color: H,
                              onChangeCallback: es,
                              ref: et,
                          })),
                          (N[38] = H),
                          (N[39] = C))
                        : (C = N[39]),
                    N[40] === Symbol.for("react.memo_cache_sentinel")
                        ? ((S = (0, y.jsx)(ld.A.Label, {
                              visuallyHidden: !0,
                              children: uo.color,
                          })),
                          (N[40] = S))
                        : (S = N[40]),
                    N[41] !== ee
                        ? ((F =
                              ee &&
                              (0, y.jsx)(ld.A.Validation, {
                                  variant: "error",
                                  children: ee,
                              })),
                          (N[41] = ee),
                          (N[42] = F))
                        : (F = N[42]),
                    N[43] !== C || N[44] !== F
                        ? ((v = (0, y.jsxs)(ld.A, {
                              className: uC.dialogFormInput,
                              id: "label-form-color",
                              children: [C, S, F],
                          })),
                          (N[43] = C),
                          (N[44] = F),
                          (N[45] = v))
                        : (v = N[45]),
                    N[46] !== r ||
                    N[47] !== u ||
                    N[48] !== p ||
                    N[49] !== b ||
                    N[50] !== v
                        ? ((L = (0, y.jsxs)(rL.l.Body, {
                              className: uC.dialogFormBody,
                              children: [r, u, p, b, v],
                          })),
                          (N[46] = r),
                          (N[47] = u),
                          (N[48] = p),
                          (N[49] = b),
                          (N[50] = v),
                          (N[51] = L))
                        : (L = N[51]),
                    N[52] !== Z
                        ? ((I = (0, y.jsx)(nr.cQ, {
                              commandId: "repository-label:cancel-save-label",
                              disabled: Z,
                              children: uo.cancelButtonText,
                          })),
                          (N[52] = Z),
                          (N[53] = I))
                        : (I = N[53]),
                    N[54] !== Z || N[55] !== O
                        ? ((_ = (0, y.jsx)(nr.cQ, {
                              commandId: "repository-label:save-label-submit",
                              variant: "primary",
                              loading: Z,
                              showKeybindingHint: !0,
                              children: O,
                          })),
                          (N[54] = Z),
                          (N[55] = O),
                          (N[56] = _))
                        : (_ = N[56]),
                    N[57] !== I || N[58] !== _
                        ? ((x = (0, y.jsxs)(rL.l.Footer, {
                              className: uC.dialogFormButtonGroup,
                              children: [I, _],
                          })),
                          (N[57] = I),
                          (N[58] = _),
                          (N[59] = x))
                        : (x = N[59]),
                    N[60] !== E || N[61] !== j || N[62] !== L || N[63] !== x
                        ? ((K = (0, y.jsxs)(rL.l, {
                              title: E,
                              onClose: j,
                              className: uC.dialogForm,
                              children: [L, x],
                          })),
                          (N[60] = E),
                          (N[61] = j),
                          (N[62] = L),
                          (N[63] = x),
                          (N[64] = K))
                        : (K = N[64]),
                    N[65] !== K || N[66] !== s
                        ? ((w = (0, y.jsx)(nr.tL, {
                              commands: s,
                              children: K,
                          })),
                          (N[65] = K),
                          (N[66] = s),
                          (N[67] = w))
                        : (w = N[67]),
                    w
                );
            }
            try {
                uS.displayName || (uS.displayName = "DialogForm");
            } catch {}
            let uF = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "connection",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "input",
                    },
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "message",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, a],
                        kind: "Fragment",
                        metadata: null,
                        name: "createRepositoryLabelMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "CreateLabelPayload",
                                kind: "LinkedField",
                                name: "createLabel",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "label",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "LabelRow",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [t],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [a, e],
                        kind: "Operation",
                        name: "createRepositoryLabelMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "CreateLabelPayload",
                                kind: "LinkedField",
                                name: "createLabel",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "label",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "name",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "color",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        filters: null,
                                        handle: "prependNode",
                                        key: "",
                                        kind: "LinkedHandle",
                                        name: "label",
                                        handleArgs: [
                                            {
                                                items: [
                                                    {
                                                        kind: "Variable",
                                                        name: "connections.0",
                                                        variableName:
                                                            "connection",
                                                    },
                                                ],
                                                kind: "ListValue",
                                                name: "connections",
                                            },
                                            {
                                                kind: "Literal",
                                                name: "edgeTypeName",
                                                value: "LabelEdge",
                                            },
                                        ],
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                            t,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "400a790ec793657e416efe2cb1edd649",
                        metadata: {},
                        name: "createRepositoryLabelMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            uF.hash = "f147fb55ba80b3d234ad6dbd8c038076";
            let uv = { name: "NAME", count: "ISSUE_COUNT" },
                uL = Object.keys(uv),
                uI = ["asc", "desc"];
            function u_(e) {
                return e
                    .map((e) => e.message.trim())
                    .filter(Boolean)
                    .join(", ");
            }
            function ux(e) {
                let a,
                    l,
                    n,
                    t,
                    i = (0, iV.c)(12),
                    { repository: s, isOpen: r, onClose: o } = e,
                    u = (0, er.useRelayEnvironment)(),
                    [d, c] = (0, f.useState)(""),
                    [m] = (0, e7.o)();
                i[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = ur), (i[0] = a))
                    : (a = i[0]);
                let g = (0, er.useFragment)(a, r ? s : null);
                i[1] !== u || i[2] !== o || i[3] !== g || i[4] !== m
                    ? ((l = (e, a) => {
                          if ((c(""), !g?.viewerCanPush)) {
                              (c(uo.labelCreatePermissionError), a(!1));
                              return;
                          }
                          let l = (function (e) {
                                  let [a, l = "asc"] = (
                                          e.get("sort") ?? "name-asc"
                                      ).split("-"),
                                      n = uv[a] ?? uv.name;
                                  return {
                                      orderBy: {
                                          direction: (uI.includes(l)
                                              ? l
                                              : "asc"
                                          ).toUpperCase(),
                                          field: n,
                                      },
                                      skip: 0,
                                      ...(e.get("q") && { query: e.get("q") }),
                                  };
                              })(m),
                              n = er.ConnectionHandler.getConnectionID(
                                  g.id,
                                  "LabelList_labels",
                                  l
                              );
                          !(function ({
                              environment: e,
                              input: a,
                              connectionId: l,
                              onError: n,
                              onCompleted: t,
                          }) {
                              (0, er.commitMutation)(e, {
                                  mutation: uF,
                                  variables: { input: a, connection: l },
                                  onError: (e) => n?.(e),
                                  onCompleted: (e) => t?.(e),
                                  updater: (e) => {
                                      if (!l) return;
                                      let a = e.get(l);
                                      if (!a) return;
                                      let n = a.getValue("totalCount") ?? 0;
                                      a.setValue(n + 1, "totalCount");
                                  },
                              });
                          })({
                              environment: u,
                              input: {
                                  repositoryId: g.id,
                                  name: e.name,
                                  color: e.color,
                                  description: e.description,
                              },
                              connectionId: n,
                              onError: (e) => {
                                  (a(!1),
                                      e.cause && Array.isArray(e.cause)
                                          ? c(u_(e.cause))
                                          : c(uo.labelCreateError));
                              },
                              onCompleted: (e) => {
                                  (a(!1),
                                      e.createLabel?.errors &&
                                      e.createLabel.errors.length > 0
                                          ? c(u_(e.createLabel.errors))
                                          : o());
                              },
                          });
                      }),
                      (i[1] = u),
                      (i[2] = o),
                      (i[3] = g),
                      (i[4] = m),
                      (i[5] = l))
                    : (l = i[5]);
                let p = l;
                i[6] !== o
                    ? ((n = () => {
                          (c(""), o());
                      }),
                      (i[6] = o),
                      (i[7] = n))
                    : (n = i[7]);
                let h = n;
                return r
                    ? (i[8] !== h || i[9] !== p || i[10] !== d
                          ? ((t = (0, y.jsx)(uS, {
                                onDialogClose: h,
                                formTitle: uo.newLabel,
                                namePlaceholder: uo.labelNamePlaceholder,
                                descriptionPlaceholder:
                                    uo.labelDescriptionPlaceholder,
                                submissionErrors: d,
                                submitButtonText: uo.createButtonText,
                                onDialogSubmit: p,
                            })),
                            (i[8] = h),
                            (i[9] = p),
                            (i[10] = d),
                            (i[11] = t))
                          : (t = i[11]),
                      t)
                    : null;
            }
            try {
                ux.displayName || (ux.displayName = "LabelCreate");
            } catch {}
            let uK = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "cursor",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    n = {
                        defaultValue: "DESC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    t = {
                        defaultValue: "NAME",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    r = [{ kind: "Variable", name: "id", variableName: "id" }],
                    o = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    u = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    d = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    g = [
                        {
                            kind: "Variable",
                            name: "after",
                            variableName: "cursor",
                        },
                        o,
                        {
                            fields: [
                                {
                                    kind: "Variable",
                                    name: "direction",
                                    variableName: "orderDirection",
                                },
                                {
                                    kind: "Variable",
                                    name: "field",
                                    variableName: "orderField",
                                },
                            ],
                            kind: "ObjectValue",
                            name: "orderBy",
                        },
                        u,
                        d,
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l, n, t, i, s],
                        kind: "Fragment",
                        metadata: null,
                        name: "LabelListQuery",
                        selections: [
                            {
                                alias: null,
                                args: r,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                            o,
                                            {
                                                kind: "Variable",
                                                name: "orderDirection",
                                                variableName: "orderDirection",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "orderField",
                                                variableName: "orderField",
                                            },
                                            u,
                                            d,
                                        ],
                                        kind: "FragmentSpread",
                                        name: "LabelList",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, a, n, t, i, s, l],
                        kind: "Operation",
                        name: "LabelListQuery",
                        selections: [
                            {
                                alias: null,
                                args: r,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    c,
                                    m,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameWithOwner",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: g,
                                                concreteType: "LabelConnection",
                                                kind: "LinkedField",
                                                name: "labels",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "LabelEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Label",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    m,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "name",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "nameHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "color",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "description",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    c,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "totalCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "endCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasNextPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: g,
                                                filters: [
                                                    "query",
                                                    "orderBy",
                                                    "skip",
                                                ],
                                                handle: "connection",
                                                key: "LabelList_labels",
                                                kind: "LinkedHandle",
                                                name: "labels",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isWritable",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanPush",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Repository",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "52535aabb06ed2be85721b28cdf4ddf3",
                        metadata: {},
                        name: "LabelListQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            uK.hash = "877381f6a4d0225be11b63a26d9ca9c5";
            let uw = (function () {
                var e = ["labels"],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: "DESC",
                            kind: "LocalArgument",
                            name: "orderDirection",
                        },
                        {
                            defaultValue: "NAME",
                            kind: "LocalArgument",
                            name: "orderField",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "query",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "skip",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "first",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: { count: "first", cursor: "cursor" },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: uK,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "LabelList",
                    selections: [
                        a,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameWithOwner",
                            storageKey: null,
                        },
                        {
                            alias: "labels",
                            args: [
                                {
                                    fields: [
                                        {
                                            kind: "Variable",
                                            name: "direction",
                                            variableName: "orderDirection",
                                        },
                                        {
                                            kind: "Variable",
                                            name: "field",
                                            variableName: "orderField",
                                        },
                                    ],
                                    kind: "ObjectValue",
                                    name: "orderBy",
                                },
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "query",
                                },
                                {
                                    kind: "Variable",
                                    name: "skip",
                                    variableName: "skip",
                                },
                            ],
                            concreteType: "LabelConnection",
                            kind: "LinkedField",
                            name: "__LabelList_labels_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "LabelEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Label",
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                a,
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "LabelRow",
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "totalCount",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isWritable",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanPush",
                            storageKey: null,
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            uw.hash = "877381f6a4d0225be11b63a26d9ca9c5";
            let uN = (e) => {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s = (0, iV.c)(13),
                    {
                        noLabelsCreated: r,
                        viewerCanPush: o,
                        onCreateLabel: u,
                    } = e,
                    d = r ? uo.noLabelsCreatedTitle : uo.noMatchingLabelsTitle,
                    c =
                        r && o
                            ? uo.noLabelsCreatedDescription
                            : uo.noMatchingLabelsDescription;
                return (
                    s[0] === Symbol.for("react.memo_cache_sentinel")
                        ? ((a = (0, y.jsx)(oW.E.Visual, {
                              children: (0, y.jsx)(P.TagIcon, {
                                  size: "medium",
                              }),
                          })),
                          (s[0] = a))
                        : (a = s[0]),
                    s[1] !== d
                        ? ((l = (0, y.jsx)(oW.E.Heading, {
                              as: "h3",
                              children: d,
                          })),
                          (s[1] = d),
                          (s[2] = l))
                        : (l = s[2]),
                    s[3] !== c
                        ? ((n = (0, y.jsx)(oW.E.Description, { children: c })),
                          (s[3] = c),
                          (s[4] = n))
                        : (n = s[4]),
                    s[5] !== r || s[6] !== u || s[7] !== o
                        ? ((t =
                              r &&
                              o &&
                              (0, y.jsx)(oW.E.PrimaryAction, {
                                  onClick: u,
                                  children: uo.newLabel,
                              })),
                          (s[5] = r),
                          (s[6] = u),
                          (s[7] = o),
                          (s[8] = t))
                        : (t = s[8]),
                    s[9] !== l || s[10] !== n || s[11] !== t
                        ? ((i = (0, y.jsxs)(oW.E, { children: [a, l, n, t] })),
                          (s[9] = l),
                          (s[10] = n),
                          (s[11] = t),
                          (s[12] = i))
                        : (i = s[12]),
                    i
                );
            };
            try {
                uN.displayName || (uN.displayName = "EmptyState");
            } catch {}
            let uj = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "nodes",
                        },
                    ],
                    a = [
                        {
                            kind: "Variable",
                            name: "ids",
                            variableName: "nodes",
                        },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "IssuesAndPullRequestsCountSecondaryQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    l,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssuesAndPullRequestsCount",
                                            },
                                        ],
                                        type: "Label",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "IssuesAndPullRequestsCountSecondaryQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    l,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueCount",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "pullRequestCount",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Label",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "b314e1ada402f5a1ad5a80f5d3395c1d",
                        metadata: {},
                        name: "IssuesAndPullRequestsCountSecondaryQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            uj.hash = "5b29bf068c8fc22535058a3f1eba0c50";
            let uR = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssuesAndPullRequestsCount",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "issueCount",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "pullRequestCount",
                        storageKey: null,
                    },
                ],
                type: "Label",
                abstractKey: null,
            };
            uR.hash = "b68f025268eb8acb0882842361c6589b";
            var uT = l(52450),
                uP = l(6020);
            let uA = (e) => {
                    let a,
                        l,
                        n,
                        t = (0, iV.c)(7),
                        {
                            secondaryQueryRef: i,
                            labelName: s,
                            labelId: r,
                            repositoryNameWithOwner: o,
                        } = e;
                    return i
                        ? (t[0] === Symbol.for("react.memo_cache_sentinel")
                              ? ((a = (0, y.jsxs)(nJ.z, {
                                    className: uC.labelRowIssuesAndPrsCount,
                                    children: [
                                        (0, y.jsx)(P.AlertIcon, { size: 16 }),
                                        " Could not load data",
                                    ],
                                })),
                                (t[0] = a))
                              : (a = t[0]),
                          t[1] === Symbol.for("react.memo_cache_sentinel")
                              ? ((l = (0, y.jsx)(uM, {})), (t[1] = l))
                              : (l = t[1]),
                          t[2] !== r || t[3] !== s || t[4] !== o || t[5] !== i
                              ? ((n = (0, y.jsx)(ih.t, {
                                    fallback: a,
                                    children: (0, y.jsx)(f.Suspense, {
                                        fallback: l,
                                        children: (0, y.jsx)(uD, {
                                            labelName: s,
                                            labelId: r,
                                            secondaryQueryRef: i,
                                            repositoryNameWithOwner: o,
                                        }),
                                    }),
                                })),
                                (t[2] = r),
                                (t[3] = s),
                                (t[4] = o),
                                (t[5] = i),
                                (t[6] = n))
                              : (n = t[6]),
                          n)
                        : null;
                },
                uM = () => {
                    let e,
                        a = (0, iV.c)(1);
                    return (
                        a[0] === Symbol.for("react.memo_cache_sentinel")
                            ? ((e = (0, y.jsxs)(nJ.z, {
                                  className: uC.labelRowIssuesAndPrsCount,
                                  children: [
                                      (0, y.jsx)(uT.f, {
                                          className:
                                              uC.loadingIssueAndPullRequestCount,
                                      }),
                                      (0, y.jsx)(uT.f, {
                                          className:
                                              uC.loadingIssueAndPullRequestCount,
                                      }),
                                  ],
                              })),
                              (a[0] = e))
                            : (e = a[0]),
                        e
                    );
                },
                uD = (e) => {
                    let a,
                        l,
                        n = (0, iV.c)(7),
                        {
                            secondaryQueryRef: t,
                            labelName: i,
                            labelId: s,
                            repositoryNameWithOwner: r,
                        } = e,
                        { nodes: o } = (0, er.usePreloadedQuery)(uj, t);
                    n[0] !== s || n[1] !== o
                        ? ((a = o?.find((e) => e?.id === s)),
                          (n[0] = s),
                          (n[1] = o),
                          (n[2] = a))
                        : (a = n[2]);
                    let u = a;
                    return u
                        ? (n[3] !== i || n[4] !== u || n[5] !== r
                              ? ((l = (0, y.jsx)(uV, {
                                    repositoryNameWithOwner: r,
                                    labelName: i,
                                    labelNode: u,
                                })),
                                (n[3] = i),
                                (n[4] = u),
                                (n[5] = r),
                                (n[6] = l))
                              : (l = n[6]),
                          l)
                        : null;
                },
                uV = (e) => {
                    let a,
                        l,
                        n,
                        t,
                        i,
                        s,
                        r,
                        o,
                        u,
                        d = (0, iV.c)(25),
                        {
                            labelName: c,
                            labelNode: m,
                            repositoryNameWithOwner: g,
                        } = e;
                    d[0] === Symbol.for("react.memo_cache_sentinel")
                        ? ((a = uR), (d[0] = a))
                        : (a = d[0]);
                    let p = (0, er.useFragment)(a, m);
                    d[1] !== c || d[2] !== g
                        ? ((l = (e) => {
                              let a = `${encodeURIComponent(`is:open is:${e} label:"${c}"`)}`;
                              return `/${g}/issues?q=${a}`;
                          }),
                          (d[1] = c),
                          (d[2] = g),
                          (d[3] = l))
                        : (l = d[3]);
                    let h = l,
                        k = p.issueCount || 0,
                        f = p.pullRequestCount || 0,
                        b = f > 0,
                        C = k > 0,
                        S = !b && uC.empty;
                    (d[4] !== S
                        ? ((n = (0, l7.$)(uC.countContainer, S)),
                          (d[4] = S),
                          (d[5] = n))
                        : (n = d[5]),
                        d[6] !== h || d[7] !== b || d[8] !== f
                            ? ((t =
                                  b &&
                                  (0, y.jsx)(tw.m, {
                                      text: `${f} open pull requests`,
                                      direction: "n",
                                      children: (0, y.jsxs)(e9.A, {
                                          href: h("pr"),
                                          muted: !0,
                                          className: uC.countItem,
                                          children: [
                                              (0, y.jsx)(P.GitPullRequestIcon, {
                                                  size: 16,
                                              }),
                                              f,
                                              " ",
                                              (0, y.jsx)(uP.s, {
                                                  children:
                                                      "open pull requests",
                                              }),
                                          ],
                                      }),
                                  })),
                              (d[6] = h),
                              (d[7] = b),
                              (d[8] = f),
                              (d[9] = t))
                            : (t = d[9]),
                        d[10] !== n || d[11] !== t
                            ? ((i = (0, y.jsx)("div", {
                                  className: n,
                                  children: t,
                              })),
                              (d[10] = n),
                              (d[11] = t),
                              (d[12] = i))
                            : (i = d[12]));
                    let F = !C && uC.empty;
                    return (
                        d[13] !== F
                            ? ((s = (0, l7.$)(uC.countContainer, F)),
                              (d[13] = F),
                              (d[14] = s))
                            : (s = d[14]),
                        d[15] !== h || d[16] !== C || d[17] !== k
                            ? ((r =
                                  C &&
                                  (0, y.jsx)(tw.m, {
                                      text: `${k} open issues`,
                                      direction: "n",
                                      children: (0, y.jsxs)(e9.A, {
                                          href: h("issue"),
                                          muted: !0,
                                          className: uC.countItem,
                                          children: [
                                              (0, y.jsx)(P.IssueOpenedIcon, {
                                                  size: 16,
                                              }),
                                              k,
                                              " ",
                                              (0, y.jsx)(uP.s, {
                                                  children: "open issues",
                                              }),
                                          ],
                                      }),
                                  })),
                              (d[15] = h),
                              (d[16] = C),
                              (d[17] = k),
                              (d[18] = r))
                            : (r = d[18]),
                        d[19] !== s || d[20] !== r
                            ? ((o = (0, y.jsx)("div", {
                                  className: s,
                                  children: r,
                              })),
                              (d[19] = s),
                              (d[20] = r),
                              (d[21] = o))
                            : (o = d[21]),
                        d[22] !== o || d[23] !== i
                            ? ((u = (0, y.jsxs)(nJ.z, {
                                  className: uC.labelRowIssuesAndPrsCount,
                                  children: [i, o],
                              })),
                              (d[22] = o),
                              (d[23] = i),
                              (d[24] = u))
                            : (u = d[24]),
                        u
                    );
                };
            try {
                uA.displayName ||
                    (uA.displayName = "IssuesAndPullRequestsCount");
            } catch {}
            try {
                uM.displayName ||
                    (uM.displayName = "LoadingLabelSecondaryData");
            } catch {}
            try {
                uD.displayName ||
                    (uD.displayName = "IssuesAndPullRequestsCountFetched");
            } catch {}
            try {
                uV.displayName ||
                    (uV.displayName = "IssuesAndPullRequestsCountInternal");
            } catch {}
            let uE = { labelsPageSize: 30 },
                uq = (e) => {
                    let a,
                        l,
                        n,
                        t,
                        i = (0, iV.c)(13),
                        { dataCount: s } = e,
                        r = uE.labelsPageSize,
                        o = (0, e7.Z)(),
                        [u] = (0, e7.o)();
                    i[0] !== u
                        ? ((a = u.get("page")
                              ? parseInt(u.get("page"), 10)
                              : 1),
                          (i[0] = u),
                          (i[1] = a))
                        : (a = i[1]);
                    let d = a;
                    i[2] !== d || i[3] !== o || i[4] !== u
                        ? ((l = (e, a) => {
                              if ((e.preventDefault(), a === d)) return;
                              let l = new URLSearchParams(u);
                              (l.set("page", a.toString()),
                                  o(
                                      `${A.cg?.location.pathname}?${l.toString()}`
                                  ));
                          }),
                          (i[2] = d),
                          (i[3] = o),
                          (i[4] = u),
                          (i[5] = l))
                        : (l = i[5]);
                    let c = l;
                    i[6] !== u
                        ? ((n = (e) => {
                              let a = new URLSearchParams(u);
                              return (
                                  a.set("page", e.toString()),
                                  `${A.cg?.location.pathname}?${a.toString()}`
                              );
                          }),
                          (i[6] = u),
                          (i[7] = n))
                        : (n = i[7]);
                    let m = n,
                        g = Math.ceil(s / r);
                    return (
                        i[8] !== d || i[9] !== c || i[10] !== m || i[11] !== g
                            ? ((t = (0, y.jsx)(iA.A, {
                                  pageCount: g,
                                  hrefBuilder: m,
                                  currentPage: d,
                                  onPageChange: c,
                              })),
                              (i[8] = d),
                              (i[9] = c),
                              (i[10] = m),
                              (i[11] = g),
                              (i[12] = t))
                            : (t = i[12]),
                        t
                    );
                };
            try {
                uq.displayName || (uq.displayName = "LabelListPagination");
            } catch {}
            let uO = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "LabelRow",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameHTML",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                ],
                type: "Label",
                abstractKey: null,
            };
            uO.hash = "018d9a2a4921ee93f19396bdfd3a4d22";
            var uB = l(87854);
            let u$ = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "DeleteLabelPayload",
                            kind: "LinkedField",
                            name: "deleteLabel",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "clientMutationId",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "deleteLabelMutation",
                        selections: a,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "deleteLabelMutation",
                        selections: a,
                    },
                    params: {
                        id: "6a0d967e7c0851a17cc7be6b19d438b4",
                        metadata: {},
                        name: "deleteLabelMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            u$.hash = "c579787fb72c7a89c766b95d6330f372";
            let uQ = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "UpdateLabelPayload",
                            kind: "LinkedField",
                            name: "updateLabel",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Label",
                                    kind: "LinkedField",
                                    name: "label",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "id",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "name",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "nameHTML",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "description",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "color",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "updateLabelMutation",
                        selections: a,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "updateLabelMutation",
                        selections: a,
                    },
                    params: {
                        id: "01f658521cc6c78250b2636d2c75f846",
                        metadata: {},
                        name: "updateLabelMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            uQ.hash = "5bda9d6819d5f7a4b515c22a83f1c73c";
            var uU = l(99418);
            function uH(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p,
                    h,
                    k,
                    b,
                    C,
                    S = (0, iV.c)(56),
                    {
                        label: v,
                        isActionsAvailable: I,
                        viewerCanPush: _,
                        secondaryQueryRef: x,
                        repositoryId: K,
                        repositoryNameWithOwner: w,
                    } = e,
                    [N, j] = (0, f.useState)(!1),
                    [R, T] = (0, f.useState)(!1),
                    [P, A] = (0, f.useState)(!1),
                    [M, D] = (0, f.useState)(""),
                    V = (0, f.useRef)(null);
                S[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = uO), (S[0] = a))
                    : (a = S[0]);
                let E = (0, er.useFragment)(a, v),
                    q = (0, er.useRelayEnvironment)();
                S[1] !== E.id || S[2] !== q || S[3] !== K
                    ? ((l = async () => {
                          !(function ({
                              environment: e,
                              input: a,
                              onError: l,
                              onCompleted: n,
                          }) {
                              (0, er.commitMutation)(e, {
                                  mutation: u$,
                                  variables: { input: a },
                                  optimisticUpdater: (e) => {
                                      e.delete(a.id);
                                  },
                                  updater: (e) => {
                                      e.delete(a.id);
                                  },
                                  onError: (e) => l?.(e),
                                  onCompleted: (e) => n?.(e),
                              });
                          })({
                              environment: q,
                              input: { id: E.id },
                              onCompleted: () => {
                                  (j(!1),
                                      T(!1),
                                      q.commitUpdate((e) => {
                                          let a = `client:${K}:__LabelList_labels_connection(orderBy:{"direction":"ASC","field":"NAME"},skip:0)`,
                                              l = e.get(a);
                                          if (l) {
                                              let e = l.getValue("totalCount");
                                              l.setValue(
                                                  Math.max(e - 1, 0),
                                                  "totalCount"
                                              );
                                          }
                                      }));
                              },
                              onError: () => {
                                  j(!0);
                              },
                          });
                      }),
                      (S[1] = E.id),
                      (S[2] = q),
                      (S[3] = K),
                      (S[4] = l))
                    : (l = S[4]);
                let O = l;
                S[5] !== E.id || S[6] !== q
                    ? ((n = async (e, a) => {
                          (D(""),
                              (function ({
                                  environment: e,
                                  input: a,
                                  onError: l,
                                  onCompleted: n,
                              }) {
                                  (0, er.commitMutation)(e, {
                                      mutation: uQ,
                                      variables: { input: a },
                                      optimisticResponse: {
                                          updateLabel: {
                                              label: {
                                                  id: a.id,
                                                  name: a.name,
                                                  nameHTML: uU.default.sanitize(
                                                      a.name,
                                                      {
                                                          ALLOWED_TAGS: [],
                                                          ALLOWED_ATTR: [],
                                                          ALLOW_ARIA_ATTR: !1,
                                                      }
                                                  ),
                                                  description:
                                                      a.description ?? null,
                                                  color: a.color,
                                              },
                                          },
                                      },
                                      onError: (e) => l?.(e),
                                      onCompleted: (e) => n?.(e),
                                  });
                              })({
                                  environment: q,
                                  input: {
                                      id: E.id,
                                      name: e.name,
                                      description: e.description,
                                      color: e.color,
                                  },
                                  onCompleted: (e) => {
                                      if (!e.updateLabel?.label) {
                                          (D(uo.editLabelError), a(!1));
                                          return;
                                      }
                                      (a(!1), A(!1));
                                  },
                                  onError: (e) => {
                                      (e.cause && Array.isArray(e.cause)
                                          ? D(
                                                ((e) => {
                                                    let a = e
                                                        .map((e) => e?.message)
                                                        .filter(Boolean)
                                                        .join(", ");
                                                    return (
                                                        (a
                                                            ? a
                                                                  .charAt(0)
                                                                  .toUpperCase() +
                                                              a.slice(1)
                                                            : null) ??
                                                        uo.updateLabelError
                                                    );
                                                })(e.cause)
                                            )
                                          : D(uo.editLabelError),
                                          a(!1));
                                  },
                              }));
                      }),
                      (S[5] = E.id),
                      (S[6] = q),
                      (S[7] = n))
                    : (n = S[7]);
                let B = n;
                if (
                    (S[8] !== N
                        ? ((t = () => {
                              N && V?.current && V.current.focus();
                          }),
                          (i = [V, N]),
                          (S[8] = N),
                          (S[9] = t),
                          (S[10] = i))
                        : ((t = S[9]), (i = S[10])),
                    (0, f.useEffect)(t, i),
                    S[11] !== E.name)
                ) {
                    let e = eN(L.Ds.open, [E.name], "label");
                    ((s = ll({ viewId: F.repository, query: e })),
                        (S[11] = E.name),
                        (S[12] = s));
                } else s = S[12];
                let $ = s,
                    Q = E.id;
                (S[13] === Symbol.for("react.memo_cache_sentinel")
                    ? ((r = (0, y.jsx)(y.Fragment, {})), (S[13] = r))
                    : (r = S[13]),
                    S[14] !== I || S[15] !== _
                        ? ((o = I
                              ? (0, y.jsx)(uB.L, {
                                    staticMenuActions: [
                                        ...(_
                                            ? [
                                                  {
                                                      key: "edit",
                                                      render: () =>
                                                          (0, y.jsx)(
                                                              lQ.l.Item,
                                                              {
                                                                  onSelect:
                                                                      () =>
                                                                          A(!0),
                                                                  children:
                                                                      "Edit",
                                                              }
                                                          ),
                                                  },
                                              ]
                                            : []),
                                        ...(_
                                            ? [
                                                  {
                                                      key: "delete",
                                                      render: () =>
                                                          (0, y.jsxs)(
                                                              y.Fragment,
                                                              {
                                                                  children: [
                                                                      (0,
                                                                      y.jsx)(
                                                                          lQ.l
                                                                              .Divider,
                                                                          {}
                                                                      ),
                                                                      (0,
                                                                      y.jsx)(
                                                                          lQ.l
                                                                              .Item,
                                                                          {
                                                                              variant:
                                                                                  "danger",
                                                                              onSelect:
                                                                                  () =>
                                                                                      T(
                                                                                          !0
                                                                                      ),
                                                                              children:
                                                                                  uo.deleteButtonText,
                                                                          }
                                                                      ),
                                                                  ],
                                                              }
                                                          ),
                                                  },
                                              ]
                                            : []),
                                    ],
                                })
                              : void 0),
                          (S[14] = I),
                          (S[15] = _),
                          (S[16] = o))
                        : (o = S[16]));
                let U = !I && uC.noActionBar;
                S[17] !== U
                    ? ((u = (0, l7.$)(uC.labelRowDescription, U)),
                      (S[17] = U),
                      (S[18] = u))
                    : (u = S[18]);
                let H = E.nameHTML;
                S[19] !== H
                    ? ((d = (0, y.jsx)(tD.JR, { html: H })),
                      (S[19] = H),
                      (S[20] = d))
                    : (d = S[20]);
                let z = `#${E.color}`;
                return (
                    S[21] !== d || S[22] !== z
                        ? ((c = (0, y.jsx)(
                              tM.a,
                              { text: d, interactive: !0, fillColor: z },
                              0
                          )),
                          (S[21] = d),
                          (S[22] = z),
                          (S[23] = c))
                        : (c = S[23]),
                    S[24] !== $ || S[25] !== c
                        ? ((m = (0, y.jsxs)(nJ.z, {
                              children: [
                                  (0, y.jsx)(e9.A, {
                                      href: $,
                                      muted: !0,
                                      children: c,
                                  }),
                                  " ",
                              ],
                          })),
                          (S[24] = $),
                          (S[25] = c),
                          (S[26] = m))
                        : (m = S[26]),
                    S[27] !== E.description
                        ? ((g = (0, y.jsx)(nJ.z, {
                              className: uC.labelRowDescriptionItemDescription,
                              children: E.description,
                          })),
                          (S[27] = E.description),
                          (S[28] = g))
                        : (g = S[28]),
                    S[29] !== E.id ||
                    S[30] !== E.name ||
                    S[31] !== w ||
                    S[32] !== x
                        ? ((p = (0, y.jsx)(uA, {
                              repositoryNameWithOwner: w,
                              labelName: E.name,
                              labelId: E.id,
                              secondaryQueryRef: x,
                          })),
                          (S[29] = E.id),
                          (S[30] = E.name),
                          (S[31] = w),
                          (S[32] = x),
                          (S[33] = p))
                        : (p = S[33]),
                    S[34] !== u || S[35] !== m || S[36] !== g || S[37] !== p
                        ? ((h = (0, y.jsx)(ng.Q, {
                              children: (0, y.jsxs)(nc.U, {
                                  className: u,
                                  children: [m, g, p],
                              }),
                          })),
                          (S[34] = u),
                          (S[35] = m),
                          (S[36] = g),
                          (S[37] = p),
                          (S[38] = h))
                        : (h = S[38]),
                    S[39] !== N || S[40] !== O || S[41] !== R
                        ? ((k =
                              R &&
                              (0, y.jsx)(rd.K, {
                                  onClose: (e) => {
                                      "confirm" === e ? O() : (j(!1), T(!1));
                                  },
                                  title: (0, y.jsx)("p", {
                                      children: uo.labelDeleteDialogTitle,
                                  }),
                                  cancelButtonContent: uo.cancelButtonText,
                                  confirmButtonContent:
                                      uo.deleteLabelButtonText,
                                  confirmButtonType: "danger",
                                  children: (0, y.jsxs)("div", {
                                      children: [
                                          N &&
                                              (0, y.jsx)(sQ.l, {
                                                  ref: V,
                                                  className: "mb-3",
                                                  title: "Error",
                                                  description: (0, y.jsx)(
                                                      uu.o,
                                                      {
                                                          children:
                                                              uo.deleteLabelError,
                                                      }
                                                  ),
                                                  variant: "critical",
                                                  role: "alert",
                                              }),
                                          (0, y.jsx)("p", {
                                              children:
                                                  uo.deleteLabelWarningPermanent,
                                          }),
                                          (0, y.jsx)("p", {
                                              children:
                                                  uo.deleteLabelAssociatedIssuesNote,
                                          }),
                                      ],
                                  }),
                              })),
                          (S[39] = N),
                          (S[40] = O),
                          (S[41] = R),
                          (S[42] = k))
                        : (k = S[42]),
                    S[43] !== E.color ||
                    S[44] !== E.description ||
                    S[45] !== E.name ||
                    S[46] !== M ||
                    S[47] !== B ||
                    S[48] !== P
                        ? ((b =
                              P &&
                              (0, y.jsx)(uS, {
                                  onDialogClose: () => {
                                      (D(""), A(!1));
                                  },
                                  formTitle: uo.editLabel,
                                  descriptionPlaceholder:
                                      uo.labelDescriptionPlaceholder,
                                  submissionErrors: M,
                                  submitButtonText: uo.saveChanges,
                                  onDialogSubmit: B,
                                  initialValues: {
                                      name: E.name,
                                      description: E.description,
                                      color: E.color,
                                  },
                              })),
                          (S[43] = E.color),
                          (S[44] = E.description),
                          (S[45] = E.name),
                          (S[46] = M),
                          (S[47] = B),
                          (S[48] = P),
                          (S[49] = b))
                        : (b = S[49]),
                    S[50] !== E.id ||
                    S[51] !== h ||
                    S[52] !== k ||
                    S[53] !== b ||
                    S[54] !== o
                        ? ((C = (0, y.jsxs)(
                              nd.c,
                              {
                                  title: r,
                                  role: "listitem",
                                  secondaryActions: o,
                                  children: [h, k, b],
                              },
                              Q
                          )),
                          (S[50] = E.id),
                          (S[51] = h),
                          (S[52] = k),
                          (S[53] = b),
                          (S[54] = o),
                          (S[55] = C))
                        : (C = S[55]),
                    C
                );
            }
            try {
                uH.displayName || (uH.displayName = "LabelRow");
            } catch {}
            function uz() {
                let e,
                    a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p,
                    h,
                    k,
                    f,
                    b,
                    C,
                    S,
                    F = (0, iV.c)(50),
                    [v] = (0, e7.o)(),
                    L = (0, e7.Z)();
                if (F[0] !== v) {
                    let l = v.get("sort");
                    if (((a = "name"), (e = "asc"), l)) {
                        let [n, t] = l.split("-");
                        (uL.includes(n) && (a = n),
                            ("asc" === t || "desc" === t) && (e = t));
                    }
                    ((F[0] = v), (F[1] = e), (F[2] = a));
                } else ((e = F[1]), (a = F[2]));
                F[3] !== L || F[4] !== a || F[5] !== v
                    ? ((l = (e) => {
                          if (e === a) return;
                          let l = new URLSearchParams(v);
                          (l.set(
                              "sort",
                              `${e}-${"count" === e ? "desc" : "asc"}`
                          ),
                              L(`${A.cg?.location.pathname}?${l.toString()}`));
                      }),
                      (F[3] = L),
                      (F[4] = a),
                      (F[5] = v),
                      (F[6] = l))
                    : (l = F[6]);
                let I = l;
                F[7] !== e || F[8] !== L || F[9] !== a || F[10] !== v
                    ? ((n = (l) => {
                          if (l === e) return;
                          let n = new URLSearchParams(v);
                          (n.set("sort", `${a}-${l}`),
                              L(`${A.cg?.location.pathname}?${n.toString()}`));
                      }),
                      (F[7] = e),
                      (F[8] = L),
                      (F[9] = a),
                      (F[10] = v),
                      (F[11] = n))
                    : (n = F[11]);
                let _ = n,
                    x = "asc" === e ? P.SortAscIcon : P.SortDescIcon;
                (F[12] !== x
                    ? ((t = (0, y.jsx)(ib.W.Button, {
                          variant: "invisible",
                          leadingVisual: x,
                          children: "Sort",
                      })),
                      (F[12] = x),
                      (F[13] = t))
                    : (t = F[13]),
                    F[14] === Symbol.for("react.memo_cache_sentinel")
                        ? ((i = (0, y.jsx)(lQ.l.GroupHeading, {
                              children: "Sort by",
                          })),
                          (F[14] = i))
                        : (i = F[14]),
                    F[15] !== I
                        ? ((s = () => I("name")), (F[15] = I), (F[16] = s))
                        : (s = F[16]));
                let K = "name" === a;
                (F[17] !== s || F[18] !== K
                    ? ((r = (0, y.jsx)(lQ.l.Item, {
                          onSelect: s,
                          selected: K,
                          children: "Name",
                      })),
                      (F[17] = s),
                      (F[18] = K),
                      (F[19] = r))
                    : (r = F[19]),
                    F[20] !== I
                        ? ((o = () => I("count")), (F[20] = I), (F[21] = o))
                        : (o = F[21]));
                let w = "count" === a;
                (F[22] !== o || F[23] !== w
                    ? ((u = (0, y.jsx)(lQ.l.Item, {
                          onSelect: o,
                          selected: w,
                          children: "Total issue count",
                      })),
                      (F[22] = o),
                      (F[23] = w),
                      (F[24] = u))
                    : (u = F[24]),
                    F[25] !== u || F[26] !== r
                        ? ((d = (0, y.jsxs)(lQ.l.Group, {
                              children: [i, r, u],
                          })),
                          (F[25] = u),
                          (F[26] = r),
                          (F[27] = d))
                        : (d = F[27]),
                    F[28] === Symbol.for("react.memo_cache_sentinel")
                        ? ((c = (0, y.jsx)(lQ.l.GroupHeading, {
                              children: "Order",
                          })),
                          (F[28] = c))
                        : (c = F[28]));
                let N = "asc" === e;
                (F[29] !== _
                    ? ((m = () => _("asc")), (F[29] = _), (F[30] = m))
                    : (m = F[30]),
                    F[31] === Symbol.for("react.memo_cache_sentinel")
                        ? ((g = (0, y.jsx)(lQ.l.LeadingVisual, {
                              children: (0, y.jsx)(P.SortAscIcon, {}),
                          })),
                          (F[31] = g))
                        : (g = F[31]),
                    F[32] !== N || F[33] !== m
                        ? ((p = (0, y.jsxs)(
                              lQ.l.Item,
                              {
                                  selected: N,
                                  onSelect: m,
                                  children: [g, "Ascending"],
                              },
                              "ascending"
                          )),
                          (F[32] = N),
                          (F[33] = m),
                          (F[34] = p))
                        : (p = F[34]));
                let j = "desc" === e;
                return (
                    F[35] !== _
                        ? ((h = () => _("desc")), (F[35] = _), (F[36] = h))
                        : (h = F[36]),
                    F[37] === Symbol.for("react.memo_cache_sentinel")
                        ? ((k = (0, y.jsx)(lQ.l.LeadingVisual, {
                              children: (0, y.jsx)(P.SortDescIcon, {}),
                          })),
                          (F[37] = k))
                        : (k = F[37]),
                    F[38] !== j || F[39] !== h
                        ? ((f = (0, y.jsxs)(
                              lQ.l.Item,
                              {
                                  selected: j,
                                  onSelect: h,
                                  children: [k, "Descending"],
                              },
                              "descending"
                          )),
                          (F[38] = j),
                          (F[39] = h),
                          (F[40] = f))
                        : (f = F[40]),
                    F[41] !== p || F[42] !== f
                        ? ((b = (0, y.jsxs)(lQ.l.Group, {
                              children: [c, p, f],
                          })),
                          (F[41] = p),
                          (F[42] = f),
                          (F[43] = b))
                        : (b = F[43]),
                    F[44] !== d || F[45] !== b
                        ? ((C = (0, y.jsx)(ib.W.Overlay, {
                              children: (0, y.jsxs)(lQ.l, {
                                  selectionVariant: "single",
                                  children: [d, b],
                              }),
                          })),
                          (F[44] = d),
                          (F[45] = b),
                          (F[46] = C))
                        : (C = F[46]),
                    F[47] !== C || F[48] !== t
                        ? ((S = (0, y.jsxs)(ib.W, { children: [t, C] })),
                          (F[47] = C),
                          (F[48] = t),
                          (F[49] = S))
                        : (S = F[49]),
                    S
                );
            }
            try {
                uz.displayName || (uz.displayName = "LabelSortMenu");
            } catch {}
            function uW(e) {
                let a,
                    l,
                    n = (0, iV.c)(6),
                    { repositoryRef: t, onCreateLabel: i } = e;
                n[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = uw), (n[0] = a))
                    : (a = n[0]);
                let {
                    data: s,
                    loadNext: r,
                    hasNext: o,
                } = (0, er.usePaginationFragment)(a, t);
                if (!s.labels) throw Error("labels data is null or undefined");
                return (
                    n[1] !== s || n[2] !== o || n[3] !== r || n[4] !== i
                        ? ((l = (0, y.jsx)(uG, {
                              data: s,
                              loadNext: r,
                              hasNext: o,
                              onCreateLabel: i,
                          })),
                          (n[1] = s),
                          (n[2] = o),
                          (n[3] = r),
                          (n[4] = i),
                          (n[5] = l))
                        : (l = n[5]),
                    l
                );
            }
            function uG(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p = (0, iV.c)(38),
                    { data: h, onCreateLabel: k } = e;
                (p[0] !== h.labels?.edges
                    ? ((l = h.labels?.edges?.map(uY).filter(uJ) || []),
                      (p[0] = h.labels?.edges),
                      (p[1] = l))
                    : (l = p[1]),
                    (a = l));
                let [b] = (0, e7.o)(),
                    C = h.labels?.totalCount || 0,
                    S = 1 === C ? "1 label" : `${C} labels`;
                p[2] !== S
                    ? ((n = (0, y.jsx)("span", {
                          "aria-live": "polite",
                          children: S,
                      })),
                      (p[2] = S),
                      (p[3] = n))
                    : (n = p[3]);
                let F = n,
                    v = h.isWritable && h.viewerCanPush;
                if (0 === a.length || b.get("q")) {
                    let e;
                    (p[4] === Symbol.for("react.memo_cache_sentinel")
                        ? ((e = []), (p[4] = e))
                        : (e = p[4]),
                        (t = e));
                } else {
                    let e;
                    (p[5] === Symbol.for("react.memo_cache_sentinel")
                        ? ((e = [{ key: "label-sort-menu", render: uX }]),
                          (p[5] = e))
                        : (e = p[5]),
                        (t = e));
                }
                let L = t;
                p[6] !== L || p[7] !== F
                    ? ((i = (0, y.jsx)(si.X, {
                          title: F,
                          actions: L,
                          actionsLabel: "Label actions",
                      })),
                      (p[6] = L),
                      (p[7] = F),
                      (p[8] = i))
                    : (i = p[8]);
                let I = i,
                    [_, x] = (0, er.useQueryLoader)(uj);
                (p[9] !== x || p[10] !== a
                    ? ((s = () => {
                          A.X3 || x({ nodes: a.map(uZ) });
                      }),
                      (r = [a, x]),
                      (p[9] = x),
                      (p[10] = a),
                      (p[11] = s),
                      (p[12] = r))
                    : ((s = p[11]), (r = p[12])),
                    (0, f.useEffect)(s, r),
                    p[13] === Symbol.for("react.memo_cache_sentinel")
                        ? ((o = (0, nk.G)("repository-label-list-view")),
                          (p[13] = o))
                        : (o = p[13]));
                let K = a.length > 0 ? "ul" : "div",
                    w = a.length > 0 ? "list" : "status";
                return (
                    p[14] !== h.id ||
                    p[15] !== h.nameWithOwner ||
                    p[16] !== h.viewerCanPush ||
                    p[17] !== v ||
                    p[18] !== _ ||
                    p[19] !== a
                        ? ((u =
                              a.length > 0 &&
                              a.map((e) =>
                                  (0, y.jsx)(
                                      uH,
                                      {
                                          label: e,
                                          isActionsAvailable: v,
                                          viewerCanPush: h.viewerCanPush,
                                          secondaryQueryRef: _,
                                          repositoryId: h.id,
                                          repositoryNameWithOwner:
                                              h.nameWithOwner,
                                      },
                                      e.id
                                  )
                              )),
                          (p[14] = h.id),
                          (p[15] = h.nameWithOwner),
                          (p[16] = h.viewerCanPush),
                          (p[17] = v),
                          (p[18] = _),
                          (p[19] = a),
                          (p[20] = u))
                        : (u = p[20]),
                    p[21] !== h.viewerCanPush ||
                    p[22] !== C ||
                    p[23] !== a.length ||
                    p[24] !== k
                        ? ((d =
                              0 === a.length &&
                              (0, y.jsx)(uN, {
                                  noLabelsCreated: 0 === C,
                                  viewerCanPush: h.viewerCanPush,
                                  onCreateLabel: k,
                              })),
                          (p[21] = h.viewerCanPush),
                          (p[22] = C),
                          (p[23] = a.length),
                          (p[24] = k),
                          (p[25] = d))
                        : (d = p[25]),
                    p[26] !== I ||
                    p[27] !== K ||
                    p[28] !== w ||
                    p[29] !== u ||
                    p[30] !== d
                        ? ((c = (0, y.jsxs)(nt.u, {
                              ...o,
                              title: "Labels",
                              metadata: I,
                              titleHeaderTag: "h2",
                              as: K,
                              role: w,
                              children: [u, d],
                          })),
                          (p[26] = I),
                          (p[27] = K),
                          (p[28] = w),
                          (p[29] = u),
                          (p[30] = d),
                          (p[31] = c))
                        : (c = p[31]),
                    p[32] !== C || p[33] !== a.length
                        ? ((m =
                              a.length > 0 && (0, y.jsx)(uq, { dataCount: C })),
                          (p[32] = C),
                          (p[33] = a.length),
                          (p[34] = m))
                        : (m = p[34]),
                    p[35] !== c || p[36] !== m
                        ? ((g = (0, y.jsxs)("div", {
                              className: uC.labelListWrapper,
                              "data-hpc": !0,
                              children: [c, m],
                          })),
                          (p[35] = c),
                          (p[36] = m),
                          (p[37] = g))
                        : (g = p[37]),
                    g
                );
            }
            function uZ(e) {
                return e.id;
            }
            function uX() {
                return (0, y.jsx)(uz, {});
            }
            function uJ(e) {
                return !!e;
            }
            function uY(e) {
                return e?.node ? e.node : null;
            }
            try {
                uW.displayName || (uW.displayName = "LabelList");
            } catch {}
            try {
                uG.displayName || (uG.displayName = "LabelListInternal");
            } catch {}
            let u1 = {
                searchWrapper: "SearchBar-module__searchWrapper--PVpZY",
                searchInput: "SearchBar-module__searchInput--EMXzN",
                searchBtn: "SearchBar-module__searchBtn--onAKj",
                searchInputWrapper:
                    "SearchBar-module__searchInputWrapper--cma68",
            };
            function u2() {
                let e,
                    a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d = (0, iV.c)(25),
                    [c] = (0, _.ok)(),
                    m = (0, _.Zp)();
                d[0] !== c
                    ? ((e = c.get("q")), (d[0] = c), (d[1] = e))
                    : (e = d[1]);
                let g = e,
                    [p, h] = (0, f.useState)(g || "");
                d[2] !== m || d[3] !== c || d[4] !== p
                    ? ((a = () => {
                          let e = new URLSearchParams(c);
                          (e.set("q", p),
                              m(`${A.cg?.location.pathname}?${e.toString()}`));
                      }),
                      (d[2] = m),
                      (d[3] = c),
                      (d[4] = p),
                      (d[5] = a))
                    : (a = d[5]);
                let k = a;
                d[6] !== k
                    ? ((l = (e) => {
                          "Enter" === e.key && (e.preventDefault(), k());
                      }),
                      (d[6] = k),
                      (d[7] = l))
                    : (l = d[7]);
                let b = l;
                d[8] !== m || d[9] !== c
                    ? ((n = () => {
                          h("");
                          let e = new URLSearchParams(c);
                          (e.delete("q"),
                              m(`${A.cg?.location.pathname}?${e.toString()}`));
                      }),
                      (d[8] = m),
                      (d[9] = c),
                      (d[10] = n))
                    : (n = d[10]);
                let C = n;
                return (
                    d[11] === Symbol.for("react.memo_cache_sentinel")
                        ? ((t = (0, y.jsx)(ld.A.Label, {
                              htmlFor: "search-input",
                              visuallyHidden: !0,
                              children: uo.searchAll,
                          })),
                          (d[11] = t))
                        : (t = d[11]),
                    d[12] === Symbol.for("react.memo_cache_sentinel")
                        ? ((i = (e) => h(e.currentTarget.value)), (d[12] = i))
                        : (i = d[12]),
                    d[13] !== C || d[14] !== p
                        ? ((s =
                              "" !== p
                                  ? (0, y.jsx)(aU.K, {
                                        icon: P.XCircleFillIcon,
                                        onClick: C,
                                        "aria-label": uo.clearSearch,
                                        variant: "invisible",
                                    })
                                  : void 0),
                          (d[13] = C),
                          (d[14] = p),
                          (d[15] = s))
                        : (s = d[15]),
                    d[16] !== b || d[17] !== p || d[18] !== s
                        ? ((r = (0, y.jsxs)(ld.A, {
                              id: "search-input",
                              className: u1.searchInputWrapper,
                              children: [
                                  t,
                                  (0, y.jsx)(rl.A, {
                                      type: "text",
                                      className: u1.searchInput,
                                      placeholder: uo.searchAll,
                                      value: p,
                                      onKeyDown: b,
                                      onChange: i,
                                      trailingAction: s,
                                  }),
                              ],
                          })),
                          (d[16] = b),
                          (d[17] = p),
                          (d[18] = s),
                          (d[19] = r))
                        : (r = d[19]),
                    d[20] !== k
                        ? ((o = (0, y.jsx)(aU.K, {
                              "aria-label": uo.search,
                              size: "medium",
                              icon: P.SearchIcon,
                              variant: "default",
                              onClick: k,
                              className: u1.searchBtn,
                          })),
                          (d[20] = k),
                          (d[21] = o))
                        : (o = d[21]),
                    d[22] !== r || d[23] !== o
                        ? ((u = (0, y.jsxs)("form", {
                              role: "search",
                              "aria-labelledby": "search-input",
                              className: u1.searchWrapper,
                              onSubmit: u0,
                              children: [r, o],
                          })),
                          (d[22] = r),
                          (d[23] = o),
                          (d[24] = u))
                        : (u = d[24]),
                    u
                );
            }
            function u0(e) {
                return e.preventDefault();
            }
            try {
                u2.displayName || (u2.displayName = "SearchBar");
            } catch {}
            function u3(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g = (0, iV.c)(21),
                    { repository: p } = e,
                    [h, k] = (0, f.useState)(!1);
                g[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = us), (g[0] = a))
                    : (a = g[0]);
                let b = (0, er.useFragment)(a, p);
                return (
                    g[1] === Symbol.for("react.memo_cache_sentinel")
                        ? ((l = (0, y.jsx)(e8.A, {
                              as: "h2",
                              className: uC.heading,
                              children: "Labels",
                          })),
                          (g[1] = l))
                        : (l = g[1]),
                    g[2] !== b.viewerCanPush
                        ? ((n =
                              b.viewerCanPush &&
                              (0, y.jsx)(lT.Q, {
                                  variant: "primary",
                                  onClick: () => k(!0),
                                  children: "New label",
                              })),
                          (g[2] = b.viewerCanPush),
                          (g[3] = n))
                        : (n = g[3]),
                    g[4] !== n
                        ? ((t = (0, y.jsxs)("div", {
                              className: uC.header,
                              children: [l, n],
                          })),
                          (g[4] = n),
                          (g[5] = t))
                        : (t = g[5]),
                    g[6] === Symbol.for("react.memo_cache_sentinel")
                        ? ((i = (0, y.jsx)(u2, {})), (g[6] = i))
                        : (i = g[6]),
                    g[7] === Symbol.for("react.memo_cache_sentinel")
                        ? ((s = (0, y.jsx)("div", {
                              children: "Oops we could not load the labels",
                          })),
                          (g[7] = s))
                        : (s = g[7]),
                    g[8] === Symbol.for("react.memo_cache_sentinel")
                        ? ((r = () => k(!0)), (g[8] = r))
                        : (r = g[8]),
                    g[9] !== b
                        ? ((o = (0, y.jsx)(ih.t, {
                              fallback: s,
                              children: (0, y.jsx)(uW, {
                                  repositoryRef: b,
                                  onCreateLabel: r,
                              }),
                          })),
                          (g[9] = b),
                          (g[10] = o))
                        : (o = g[10]),
                    g[11] !== t || g[12] !== o
                        ? ((u = (0, y.jsx)(aQ, {
                              contentAs: "div",
                              resizeable: !1,
                              leftPaneWidth: "small",
                              middlePane: (0, y.jsxs)("div", {
                                  className: uC.middlePaneWrapper,
                                  children: [t, i, o],
                              }),
                          })),
                          (g[11] = t),
                          (g[12] = o),
                          (g[13] = u))
                        : (u = g[13]),
                    g[14] === Symbol.for("react.memo_cache_sentinel")
                        ? ((d = () => k(!1)), (g[14] = d))
                        : (d = g[14]),
                    g[15] !== b || g[16] !== h
                        ? ((c = (0, y.jsx)(ux, {
                              repository: b,
                              isOpen: h,
                              onClose: d,
                          })),
                          (g[15] = b),
                          (g[16] = h),
                          (g[17] = c))
                        : (c = g[17]),
                    g[18] !== c || g[19] !== u
                        ? ((m = (0, y.jsxs)(y.Fragment, { children: [u, c] })),
                          (g[18] = c),
                          (g[19] = u),
                          (g[20] = m))
                        : (m = g[20]),
                    m
                );
            }
            try {
                u3.displayName || (u3.displayName = "RepositoryLabelsInternal");
            } catch {}
            let u4 = ({ queries: { pageQuery: e } }) => {
                let { queryRef: a, loadQuery: l } = aa(e, eU);
                return a
                    ? (0, y.jsx)(as, {
                          category: "Repository Label Index",
                          children: (0, y.jsx)(u5, {
                              pageQueryRef: a,
                              loadQuery: l,
                          }),
                      })
                    : null;
            };
            function u5({ pageQueryRef: e }) {
                let a = (0, er.usePreloadedQuery)(eU, e),
                    { setCurrentViewId: l } = eM();
                return ((0, f.useEffect)(() => {
                    l(F.repository);
                }, [e, l]),
                a.repository)
                    ? (0, y.jsx)(u7, { repository: a.repository })
                    : (reportError(
                          Error(
                              `Could not find repository when loading labels index for ${A.fV?.href.toString()}`
                          )
                      ),
                      (0, y.jsx)("div", { children: "Repository not found" }));
            }
            function u7({ repository: e }) {
                let a = (0, er.useFragment)(ui, e);
                return (0, y.jsx)(u3, { repository: a });
            }
            try {
                u5.displayName ||
                    (u5.displayName = "RepositoryLabelIndexContent");
            } catch {}
            try {
                u7.displayName ||
                    (u7.displayName =
                        "RepositoryLabelIndexPageContentInternal");
            } catch {}
            let u6 = {
                argumentDefinitions: [
                    {
                        defaultValue: "DESC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    {
                        defaultValue: "CREATED_AT",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "state",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryMilestoneIndexPageContentInternal",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "orderDirection",
                                variableName: "orderDirection",
                            },
                            {
                                kind: "Variable",
                                name: "orderField",
                                variableName: "orderField",
                            },
                            {
                                kind: "Variable",
                                name: "state",
                                variableName: "state",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "RepositoryMilestonesInternal",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            u6.hash = "c3181e2da6a22e3d5d53fb3d15250df2";
            let u9 = {
                argumentDefinitions: [
                    {
                        defaultValue: "DESC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    {
                        defaultValue: "CREATED_AT",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "state",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryMilestonesInternal",
                selections: [
                    {
                        args: [
                            { kind: "Literal", name: "first", value: 50 },
                            {
                                kind: "Variable",
                                name: "orderDirection",
                                variableName: "orderDirection",
                            },
                            {
                                kind: "Variable",
                                name: "orderField",
                                variableName: "orderField",
                            },
                            {
                                kind: "Variable",
                                name: "state",
                                variableName: "state",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "MilestoneList",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestonesActions",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            u9.hash = "168c6c023dcd919ea76f3cc6fae4b49b";
            let u8 = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "cursor",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    n = {
                        defaultValue: "DESC",
                        kind: "LocalArgument",
                        name: "orderDirection",
                    },
                    t = {
                        defaultValue: "CREATED_AT",
                        kind: "LocalArgument",
                        name: "orderField",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "state",
                    },
                    s = [{ kind: "Variable", name: "id", variableName: "id" }],
                    r = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    d = [
                        {
                            kind: "Variable",
                            name: "after",
                            variableName: "cursor",
                        },
                        r,
                        {
                            fields: [
                                {
                                    kind: "Variable",
                                    name: "direction",
                                    variableName: "orderDirection",
                                },
                                {
                                    kind: "Variable",
                                    name: "field",
                                    variableName: "orderField",
                                },
                            ],
                            kind: "ObjectValue",
                            name: "orderBy",
                        },
                        {
                            items: [
                                {
                                    kind: "Variable",
                                    name: "states.0",
                                    variableName: "state",
                                },
                            ],
                            kind: "ListValue",
                            name: "states",
                        },
                    ],
                    c = { kind: "Literal", name: "first", value: 0 },
                    m = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l, n, t, i],
                        kind: "Fragment",
                        metadata: null,
                        name: "MilestoneListQuery",
                        selections: [
                            {
                                alias: null,
                                args: s,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                            r,
                                            {
                                                kind: "Variable",
                                                name: "orderDirection",
                                                variableName: "orderDirection",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "orderField",
                                                variableName: "orderField",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "state",
                                                variableName: "state",
                                            },
                                        ],
                                        kind: "FragmentSpread",
                                        name: "MilestoneList",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, a, n, t, i, l],
                        kind: "Operation",
                        name: "MilestoneListQuery",
                        selections: [
                            {
                                alias: null,
                                args: s,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    o,
                                    u,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameWithOwner",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: d,
                                                concreteType:
                                                    "MilestoneConnection",
                                                kind: "LinkedField",
                                                name: "milestones",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "MilestoneEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Milestone",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    u,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "description",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "title",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "url",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "state",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [u],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "progressPercentage",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "openIssueCount",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "closedIssueCount",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "closed",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "dueOn",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    o,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "endCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasNextPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: d,
                                                filters: ["states", "orderBy"],
                                                handle: "connection",
                                                key: "MilestoneList_milestones",
                                                kind: "LinkedHandle",
                                                name: "milestones",
                                            },
                                            {
                                                alias: "open",
                                                args: [
                                                    c,
                                                    {
                                                        kind: "Literal",
                                                        name: "states",
                                                        value: "OPEN",
                                                    },
                                                ],
                                                concreteType:
                                                    "MilestoneConnection",
                                                kind: "LinkedField",
                                                name: "milestones",
                                                plural: !1,
                                                selections: m,
                                                storageKey:
                                                    'milestones(first:0,states:"OPEN")',
                                            },
                                            {
                                                alias: "closed",
                                                args: [
                                                    c,
                                                    {
                                                        kind: "Literal",
                                                        name: "states",
                                                        value: "CLOSED",
                                                    },
                                                ],
                                                concreteType:
                                                    "MilestoneConnection",
                                                kind: "LinkedField",
                                                name: "milestones",
                                                plural: !1,
                                                selections: m,
                                                storageKey:
                                                    'milestones(first:0,states:"CLOSED")',
                                            },
                                        ],
                                        type: "Repository",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "0aadc9cef9f6d5447307200a57b3b63d",
                        metadata: {},
                        name: "MilestoneListQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            u8.hash = "3db42140a58f5e3d4d9a2b592ed1efb7";
            let de = (function () {
                var e = ["milestones"],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = { kind: "Literal", name: "first", value: 0 },
                    n = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                    ];
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: "DESC",
                            kind: "LocalArgument",
                            name: "orderDirection",
                        },
                        {
                            defaultValue: "CREATED_AT",
                            kind: "LocalArgument",
                            name: "orderField",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "state",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "first",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: { count: "first", cursor: "cursor" },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: u8,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "MilestoneList",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameWithOwner",
                            storageKey: null,
                        },
                        {
                            alias: "milestones",
                            args: [
                                {
                                    fields: [
                                        {
                                            kind: "Variable",
                                            name: "direction",
                                            variableName: "orderDirection",
                                        },
                                        {
                                            kind: "Variable",
                                            name: "field",
                                            variableName: "orderField",
                                        },
                                    ],
                                    kind: "ObjectValue",
                                    name: "orderBy",
                                },
                                {
                                    items: [
                                        {
                                            kind: "Variable",
                                            name: "states.0",
                                            variableName: "state",
                                        },
                                    ],
                                    kind: "ListValue",
                                    name: "states",
                                },
                            ],
                            concreteType: "MilestoneConnection",
                            kind: "LinkedField",
                            name: "__MilestoneList_milestones_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "MilestoneEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Milestone",
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                a,
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "MilestoneRow",
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: "open",
                            args: [
                                l,
                                {
                                    kind: "Literal",
                                    name: "states",
                                    value: "OPEN",
                                },
                            ],
                            concreteType: "MilestoneConnection",
                            kind: "LinkedField",
                            name: "milestones",
                            plural: !1,
                            selections: n,
                            storageKey: 'milestones(first:0,states:"OPEN")',
                        },
                        {
                            alias: "closed",
                            args: [
                                l,
                                {
                                    kind: "Literal",
                                    name: "states",
                                    value: "CLOSED",
                                },
                            ],
                            concreteType: "MilestoneConnection",
                            kind: "LinkedField",
                            name: "milestones",
                            plural: !1,
                            selections: n,
                            storageKey: 'milestones(first:0,states:"CLOSED")',
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "OpenClosedMilestones",
                        },
                        a,
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            de.hash = "3db42140a58f5e3d4d9a2b592ed1efb7";
            let da = {
                issueIcons: {
                    OPEN: {
                        color: "open.fg",
                        icon: P.IssueOpenedIcon,
                        description: "Open issue",
                    },
                    CLOSED: {
                        color: "done.fg",
                        icon: P.IssueClosedIcon,
                        description: "Closed issue (completed)",
                    },
                    NOT_PLANNED: {
                        color: "fg.muted",
                        icon: P.SkipIcon,
                        description: "Closed issue (not planned)",
                    },
                },
                issuesPageSize: 25,
                maxPrioritizableItemCount: 1e3,
                milestonePageSize: 50,
                localStorageKeyBulkUpdateIssues: "milestone.bulkUpdateIssues",
            };
            function dl(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s = (0, iV.c)(12),
                    { noCreatedMilestones: r, newMilestoneUrl: o } = e,
                    u = r ? oQ.noCreatedMilestones : oQ.weCouldntFindMilestones,
                    d = r
                        ? oQ.noCreatedMilestonesDescription
                        : oQ.weCouldntFindMilestonesDescription;
                return (
                    s[0] === Symbol.for("react.memo_cache_sentinel")
                        ? ((a = (0, y.jsx)(oW.E.Visual, {
                              children: (0, y.jsx)(P.MilestoneIcon, {
                                  size: "medium",
                              }),
                          })),
                          (s[0] = a))
                        : (a = s[0]),
                    s[1] !== u
                        ? ((l = (0, y.jsx)(oW.E.Heading, { children: u })),
                          (s[1] = u),
                          (s[2] = l))
                        : (l = s[2]),
                    s[3] !== d
                        ? ((n = (0, y.jsx)(oW.E.Description, { children: d })),
                          (s[3] = d),
                          (s[4] = n))
                        : (n = s[4]),
                    s[5] !== o || s[6] !== r
                        ? ((t =
                              r &&
                              (0, y.jsx)(oW.E.PrimaryAction, {
                                  href: o,
                                  children: oQ.createAMilestone,
                              })),
                          (s[5] = o),
                          (s[6] = r),
                          (s[7] = t))
                        : (t = s[7]),
                    s[8] !== l || s[9] !== n || s[10] !== t
                        ? ((i = (0, y.jsxs)(oW.E, { children: [a, l, n, t] })),
                          (s[8] = l),
                          (s[9] = n),
                          (s[10] = t),
                          (s[11] = i))
                        : (i = s[11]),
                    i
                );
            }
            try {
                dl.displayName || (dl.displayName = "MilestoneEmptyState");
            } catch {}
            let dn = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneRow",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneRowTitle",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneRowMetadata",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneDate",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneIssueCount",
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            dn.hash = "9179d9703c79d416043b8546babc5fd0";
            let dt = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneDate",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "dueOn",
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            function di(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r = (0, iV.c)(12),
                    { milestone: o } = e;
                r[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = dt), (r[0] = a))
                    : (a = r[0]);
                let u = (0, er.useFragment)(a, o);
                e: {
                    if (!u || !u.dueOn) {
                        l = null;
                        break e;
                    }
                    let e = new Date(u.dueOn),
                        a = new Date();
                    if (
                        (a.setHours(0, 0, 0, 0), e.setHours(0, 0, 0, 0), e >= a)
                    ) {
                        l = null;
                        break e;
                    }
                    let n = Math.floor((a.getTime() - e.getTime()) / 864e5);
                    if (n < 30) {
                        l = `${n} day(s)`;
                        break e;
                    }
                    let t = Math.floor(n / 30);
                    if (t < 12) {
                        l = `${t} month(s)`;
                        break e;
                    }
                    let i = Math.floor(t / 12);
                    l = `${i} year(s)`;
                }
                let d = l;
                a: {
                    let e;
                    if (!u.dueOn) {
                        n = null;
                        break a;
                    }
                    (r[1] !== u.dueOn
                        ? ((e = new Date(u.dueOn).toLocaleDateString("en-US", {
                              month: "long",
                              day: "numeric",
                              year: "numeric",
                              timeZone: "UTC",
                          })),
                          (r[1] = u.dueOn),
                          (r[2] = e))
                        : (e = r[2]),
                        (n = e));
                }
                let c = n;
                return (
                    r[3] !== u.closed || r[4] !== d
                        ? ((t =
                              d && !u.closed
                                  ? (0, y.jsxs)("div", {
                                        className: oG.milestoneData,
                                        children: [
                                            (0, y.jsxs)("div", {
                                                className: oG.overDue,
                                                children: [
                                                    (0, y.jsx)(
                                                        P.AlertFillIcon,
                                                        { size: 12 }
                                                    ),
                                                    (0, y.jsxs)("span", {
                                                        children: [
                                                            oQ.milestoneOverdue,
                                                            " ",
                                                            d,
                                                        ],
                                                    }),
                                                ],
                                            }),
                                            (0, y.jsx)("span", {
                                                className: oG.middot,
                                                children: oQ.separator,
                                            }),
                                        ],
                                    })
                                  : null),
                          (r[3] = u.closed),
                          (r[4] = d),
                          (r[5] = t))
                        : (t = r[5]),
                    r[6] !== u.dueOn || r[7] !== c
                        ? ((i = (0, y.jsx)("div", {
                              className: oG.milestoneData,
                              children: u.dueOn
                                  ? (0, y.jsxs)("span", {
                                        children: [oQ.dueBy, " ", c],
                                    })
                                  : (0, y.jsx)("span", {
                                        children: oQ.noDueDate,
                                    }),
                          })),
                          (r[6] = u.dueOn),
                          (r[7] = c),
                          (r[8] = i))
                        : (i = r[8]),
                    r[9] !== t || r[10] !== i
                        ? ((s = (0, y.jsxs)(y.Fragment, { children: [t, i] })),
                          (r[9] = t),
                          (r[10] = i),
                          (r[11] = s))
                        : (s = r[11]),
                    s
                );
            }
            dt.hash = "c744c3501e741c32d84fc88af287a26b";
            try {
                di.displayName || (di.displayName = "MilestoneDate");
            } catch {}
            let ds = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneIssueCount",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedIssueCount",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "openIssueCount",
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            function dr(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s = (0, iV.c)(9),
                    { milestone: r } = e;
                s[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = ds), (s[0] = a))
                    : (a = s[0]);
                let o = (0, er.useFragment)(a, r),
                    u = o.openIssueCount ?? 0,
                    d = o.closedIssueCount ?? 0,
                    c = u + d;
                return (s[1] !== d || s[2] !== u || s[3] !== c
                    ? ((n = { open: u, closed: d, total: c }),
                      (s[1] = d),
                      (s[2] = u),
                      (s[3] = c),
                      (s[4] = n))
                    : (n = s[4]),
                (l = n).total <= 0)
                    ? null
                    : (s[5] === Symbol.for("react.memo_cache_sentinel")
                          ? ((t = (0, y.jsx)("span", {
                                className: oG.middot,
                                children: oQ.separator,
                            })),
                            (s[5] = t))
                          : (t = s[5]),
                      s[6] !== l.closed || s[7] !== l.total
                          ? ((i = (0, y.jsxs)("div", {
                                className: oG.milestoneIssueCount,
                                children: [
                                    t,
                                    (0, y.jsxs)("span", {
                                        children: [
                                            l.closed,
                                            "/",
                                            l.total,
                                            " issues closed",
                                        ],
                                    }),
                                ],
                            })),
                            (s[6] = l.closed),
                            (s[7] = l.total),
                            (s[8] = i))
                          : (i = s[8]),
                      i);
            }
            ds.hash = "15f84a40e0bbfcf780c02f604ec96267";
            try {
                dr.displayName || (dr.displayName = "MilestoneIssueCount");
            } catch {}
            let du = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneRowMetadata",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneRowMenu",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "progressPercentage",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "openIssueCount",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedIssueCount",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            du.hash = "db345f0e64434fb83335b93532e33afd";
            var dd = l(8601);
            let dc = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "MilestoneRowMenu",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [e],
                            storageKey: null,
                        },
                    ],
                    type: "Milestone",
                    abstractKey: null,
                };
            })();
            dc.hash = "148d9e06feebee4ecf8d39ed423415ce";
            let dm = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "deleteMilestoneMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "DeleteMilestonePayload",
                                kind: "LinkedField",
                                name: "deleteMilestone",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [l],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "deleteMilestoneMutation",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "DeleteMilestonePayload",
                                kind: "LinkedField",
                                name: "deleteMilestone",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            l,
                                            {
                                                alias: null,
                                                args: null,
                                                filters: null,
                                                handle: "deleteRecord",
                                                key: "",
                                                kind: "ScalarHandle",
                                                name: "id",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "51d866034128db62d668c9e305002192",
                        metadata: {},
                        name: "deleteMilestoneMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function dg({ milestone: e }) {
                let [a, l] = (0, f.useState)(!1),
                    [n, t] = (0, f.useState)(!1),
                    [i, s] = (0, f.useState)(!1),
                    r = (0, f.useRef)(null),
                    o = (0, er.useFragment)(dc, e),
                    u = (0, e7.Z)(),
                    [d] = (0, e7.o)(),
                    c = (0, er.useRelayEnvironment)(),
                    { addToast: m } = (0, x.Y6)(),
                    g = (0, f.useCallback)(() => {
                        let e =
                                `${o.url.replace("/milestone/", "/milestones/")}/edit`.split(
                                    "/"
                                ),
                            a = e.lastIndexOf("milestone");
                        (-1 !== a && "" === e[a + 1] && (e[a] = "milestones"),
                            u(
                                new URL(e.join("/"), window.location.origin)
                                    .pathname
                            ));
                    }, [o.url, u]),
                    p = (0, f.useCallback)(() => {
                        let e = o.state,
                            a = "CLOSED" === e ? "OPEN" : "CLOSED";
                        oY({
                            environment: c,
                            input: { id: o.id, state: a },
                            onCompleted: () => {
                                c.commitUpdate((l) => {
                                    let n = l.get(
                                        `client:${o.repository.id}:milestones(first:0,states:"OPEN")`
                                    );
                                    if (n) {
                                        let a = n.getValue("totalCount");
                                        n.setValue(
                                            "CLOSED" === e ? a + 1 : a - 1,
                                            "totalCount"
                                        );
                                    }
                                    let t = l.get(
                                        `client:${o.repository.id}:milestones(first:0,states:"CLOSED")`
                                    );
                                    if (t) {
                                        let a = t.getValue("totalCount");
                                        t.setValue(
                                            "CLOSED" === e ? a - 1 : a + 1,
                                            "totalCount"
                                        );
                                    }
                                    let i = d.get("state"),
                                        s =
                                            "asc" === d.get("direction")
                                                ? "ASC"
                                                : "DESC",
                                        r = d.get("sort"),
                                        u = "CREATED_AT";
                                    r &&
                                        (u =
                                            "due_date" === r
                                                ? "DUE_DATE"
                                                : "UPDATED_AT");
                                    let c = `client:${o.repository.id}:__MilestoneList_milestones_connection(orderBy:{"direction":"${s}","field":"${u}"},states:["${"closed" !== i ? "OPEN" : "CLOSED"}"])`,
                                        m = l.get(c);
                                    if (m) {
                                        let e = m
                                            .getLinkedRecords("edges")
                                            ?.filter(
                                                (e) =>
                                                    e
                                                        ?.getLinkedRecord(
                                                            "node"
                                                        )
                                                        ?.getValue("id") !==
                                                    o.id
                                            );
                                        m.setLinkedRecords(e || [], "edges");
                                    }
                                    let g = `client:${o.repository.id}:__MilestoneList_milestones_connection(orderBy:{"direction":"${s}","field":"${u}"},states:["${a}"])`,
                                        p = l.get(g);
                                    if (p) {
                                        let e =
                                                p.getLinkedRecords("edges") ||
                                                [],
                                            a = l.get(o.id);
                                        if (a) {
                                            let n = `client:newEdge:${o.id}`,
                                                t = l.get(n);
                                            (t ||
                                                (t = l.create(
                                                    n,
                                                    "MilestoneEdge"
                                                )),
                                                t.setLinkedRecord(a, "node"),
                                                p.setLinkedRecords(
                                                    [t, ...e],
                                                    "edges"
                                                ));
                                        }
                                    }
                                });
                            },
                            onError: () => {
                                m({
                                    type: "error",
                                    message: "Could not change Milestone state",
                                });
                            },
                        });
                    }, [m, o.id, o.repository.id, o.state, c, d]),
                    h = (0, f.useCallback)(() => {
                        n ||
                            (t(!0),
                            (function ({
                                environment: e,
                                input: a,
                                onError: l,
                                onCompleted: n,
                            }) {
                                (0, er.commitMutation)(e, {
                                    mutation: dm,
                                    variables: { input: a },
                                    onError: (e) => l && l(e),
                                    onCompleted: (e) => n && n(e),
                                });
                            })({
                                environment: c,
                                input: { id: o.id },
                                onCompleted: () => {
                                    (c.commitUpdate((e) => {
                                        let a =
                                                "closed" !== d.get("state")
                                                    ? "OPEN"
                                                    : "CLOSED",
                                            l = e.get(
                                                `client:${o.repository.id}:milestones(first:0,states:"OPEN")`
                                            );
                                        if (l && "OPEN" === a) {
                                            let e = l.getValue("totalCount");
                                            l.setValue(
                                                Math.max(e - 1, 0),
                                                "totalCount"
                                            );
                                        }
                                        let n = e.get(
                                            `client:${o.repository.id}:milestones(first:0,states:"CLOSED")`
                                        );
                                        if (n && "CLOSED" === a) {
                                            let e = n.getValue("totalCount");
                                            n.setValue(
                                                Math.max(e - 1, 0),
                                                "totalCount"
                                            );
                                        }
                                    }),
                                        l(!1),
                                        t(!1),
                                        s(!1));
                                },
                                onError: () => {
                                    (s(!0), t(!1));
                                },
                            }));
                    }, [o.id, o.repository.id, c, d, n]),
                    k = (0, f.useCallback)((e) => {
                        "Enter" === e.key && e.stopPropagation();
                    }, []);
                return (
                    (0, f.useEffect)(() => {
                        i && r?.current && r.current.focus();
                    }, [r, i]),
                    (0, y.jsxs)(y.Fragment, {
                        children: [
                            (0, y.jsxs)(ib.W, {
                                children: [
                                    (0, y.jsx)(ib.W.Button, {
                                        className: oG.menuButton,
                                        "aria-label": "Milestone menu",
                                        variant: "invisible",
                                        icon: (0, y.jsx)(
                                            P.KebabHorizontalIcon,
                                            {}
                                        ),
                                        onKeyDown: k,
                                    }),
                                    (0, y.jsx)(ib.W.Overlay, {
                                        children: (0, y.jsxs)(lQ.l, {
                                            children: [
                                                (0, y.jsx)(lQ.l.Item, {
                                                    onSelect: () => g(),
                                                    children: "Edit",
                                                }),
                                                (0, y.jsx)(lQ.l.Item, {
                                                    onSelect: () => p(),
                                                    children:
                                                        "CLOSED" === o.state
                                                            ? "Open"
                                                            : "Close",
                                                }),
                                                (0, y.jsx)(lQ.l.Divider, {}),
                                                (0, y.jsx)(lQ.l.Item, {
                                                    onSelect: () => l(!0),
                                                    children: (0, y.jsx)(
                                                        "span",
                                                        {
                                                            className:
                                                                oG.deleteMilestoneButton,
                                                            children: "Delete",
                                                        }
                                                    ),
                                                }),
                                            ],
                                        }),
                                    }),
                                ],
                            }),
                            a &&
                                (0, y.jsx)(rd.K, {
                                    onClose: (e) => {
                                        "confirm" === e ? h() : (l(!1), s(!1));
                                    },
                                    title: (0, y.jsx)("p", {
                                        className: oG.dialogTitle,
                                        children:
                                            oQ.deleteMilestoneConfirmationTitle,
                                    }),
                                    cancelButtonContent: oQ.cancel,
                                    confirmButtonContent:
                                        oQ.deleteMilestoneConfirmationButton,
                                    confirmButtonType: "danger",
                                    children: (0, y.jsxs)("div", {
                                        className:
                                            oG.dialogDescriptionContainer,
                                        children: [
                                            i &&
                                                (0, y.jsx)(sQ.l, {
                                                    ref: r,
                                                    className: "mb-3",
                                                    title: "Error",
                                                    description: (0, y.jsx)(
                                                        uu.o,
                                                        {
                                                            children:
                                                                oQ.deleteMilestoneError,
                                                        }
                                                    ),
                                                    variant: "critical",
                                                    role: "alert",
                                                }),
                                            (0, y.jsx)("p", {
                                                className: oG.dialogDescription,
                                                children:
                                                    oQ.deleteMilestoneWarningPermanent,
                                            }),
                                            (0, y.jsx)("p", {
                                                className: oG.dialogDescription,
                                                children:
                                                    oQ.deleteMilestoneAssociatedIssuesNote,
                                            }),
                                        ],
                                    }),
                                }),
                        ],
                    })
                );
            }
            dm.hash = "d96316a2c94a676025441e29c80749db";
            try {
                dg.displayName || (dg.displayName = "MilestoneRowMenu");
            } catch {}
            function dp(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g = (0, iV.c)(30),
                    { milestone: p, repositoryNameWithOwner: h } = e;
                g[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = du), (g[0] = a))
                    : (a = g[0]);
                let k = (0, er.useFragment)(a, p);
                g[1] !== k.title || g[2] !== h
                    ? ((l = (e) =>
                          `/${h}/issues?q=${encodeURIComponent(`is:${e} milestone:"${k.title ?? ""}"`)}`),
                      (g[1] = k.title),
                      (g[2] = h),
                      (g[3] = l))
                    : (l = g[3]);
                let f = l,
                    b = Math.floor(k.progressPercentage);
                g[4] !== b
                    ? ((n = (0, y.jsx)(dd.z, {
                          progress: b,
                          "aria-hidden": "true",
                          "data-testid": "milestone-metadata-progress-bar",
                          barSize: "small",
                          className: oG.progressBar,
                      })),
                      (g[4] = b),
                      (g[5] = n))
                    : (n = g[5]);
                let C = Math.floor(k.progressPercentage);
                g[6] !== C
                    ? ((t = (0, y.jsxs)("span", {
                          children: [
                              (0, y.jsxs)("span", {
                                  className: oG.progressPercentage,
                                  children: [C, "%"],
                              }),
                              " complete",
                          ],
                      })),
                      (g[6] = C),
                      (g[7] = t))
                    : (t = g[7]);
                let S = f("open");
                (g[8] !== k.openIssueCount
                    ? ((i = (0, y.jsx)("span", {
                          className: oG.progressPercentage,
                          children: k.openIssueCount,
                      })),
                      (g[8] = k.openIssueCount),
                      (g[9] = i))
                    : (i = g[9]),
                    g[10] !== S || g[11] !== i
                        ? ((s = (0, y.jsxs)(e9.A, {
                              className: oG.link,
                              href: S,
                              children: [i, " open"],
                          })),
                          (g[10] = S),
                          (g[11] = i),
                          (g[12] = s))
                        : (s = g[12]));
                let F = f("closed");
                return (
                    g[13] !== k.closedIssueCount
                        ? ((r = (0, y.jsx)("span", {
                              className: oG.progressPercentage,
                              children: k.closedIssueCount,
                          })),
                          (g[13] = k.closedIssueCount),
                          (g[14] = r))
                        : (r = g[14]),
                    g[15] !== F || g[16] !== r
                        ? ((o = (0, y.jsxs)(e9.A, {
                              className: oG.link,
                              href: F,
                              children: [r, " closed"],
                          })),
                          (g[15] = F),
                          (g[16] = r),
                          (g[17] = o))
                        : (o = g[17]),
                    g[18] !== o || g[19] !== t || g[20] !== s
                        ? ((u = (0, y.jsxs)("div", {
                              className: oG.listMetadata,
                              children: [t, s, o],
                          })),
                          (g[18] = o),
                          (g[19] = t),
                          (g[20] = s),
                          (g[21] = u))
                        : (u = g[21]),
                    g[22] !== u || g[23] !== n
                        ? ((d = (0, y.jsxs)("div", {
                              className: oG.progress,
                              children: [n, u],
                          })),
                          (g[22] = u),
                          (g[23] = n),
                          (g[24] = d))
                        : (d = g[24]),
                    g[25] !== k
                        ? ((c = (0, y.jsx)(dg, { milestone: k })),
                          (g[25] = k),
                          (g[26] = c))
                        : (c = g[26]),
                    g[27] !== d || g[28] !== c
                        ? ((m = (0, y.jsxs)("div", {
                              className: oG.listProgressSection,
                              children: [d, c],
                          })),
                          (g[27] = d),
                          (g[28] = c),
                          (g[29] = m))
                        : (m = g[29]),
                    m
                );
            }
            try {
                dp.displayName || (dp.displayName = "MilestoneRowMetadata");
            } catch {}
            let dy = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneRowTitle",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            function dh(e) {
                let a,
                    l,
                    n,
                    t,
                    i = (0, iV.c)(10),
                    { milestone: s } = e;
                i[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = dy), (i[0] = a))
                    : (a = i[0]);
                let r = (0, er.useFragment)(a, s),
                    o = r.url;
                i[1] === Symbol.for("react.memo_cache_sentinel")
                    ? ((l = ["mac"]), (i[1] = l))
                    : (l = i[1]);
                let u = (0, iT.X)(l),
                    d = (0, e7.Z)();
                i[2] !== o || i[3] !== u || i[4] !== d
                    ? ((n = (e) => {
                          (u ? e.metaKey : e.ctrlKey) ||
                              (e.preventDefault(),
                              d(new URL(o, window.location.origin).pathname));
                      }),
                      (i[2] = o),
                      (i[3] = u),
                      (i[4] = d),
                      (i[5] = n))
                    : (n = i[5]);
                let c = n;
                return (
                    i[6] !== r.title || i[7] !== r.url || i[8] !== c
                        ? ((t = (0, y.jsx)(tv.ao, {
                              value: r.title,
                              href: r.url,
                              onClick: c,
                          })),
                          (i[6] = r.title),
                          (i[7] = r.url),
                          (i[8] = c),
                          (i[9] = t))
                        : (t = i[9]),
                    t
                );
            }
            dy.hash = "5bc05bbe94a56bd64216010d45ac7f03";
            try {
                dh.displayName || (dh.displayName = "MilestoneRowTitle");
            } catch {}
            function dk(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o = (0, iV.c)(18),
                    { milestone: u, repositoryNameWithOwner: d } = e;
                o[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = dn), (o[0] = a))
                    : (a = o[0]);
                let c = (0, er.useFragment)(a, u);
                o[1] !== c
                    ? ((l = (0, y.jsx)(dh, { milestone: c })),
                      (o[1] = c),
                      (o[2] = l))
                    : (l = o[2]);
                let m = l;
                o[3] !== c || o[4] !== d
                    ? ((n = (0, y.jsx)(dp, {
                          milestone: c,
                          repositoryNameWithOwner: d,
                      })),
                      (o[3] = c),
                      (o[4] = d),
                      (o[5] = n))
                    : (n = o[5]);
                let g = n;
                return (
                    o[6] !== c.description
                        ? ((t =
                              c.description &&
                              (0, y.jsx)("p", {
                                  className: oG.listDescription,
                                  children: c.description,
                              })),
                          (o[6] = c.description),
                          (o[7] = t))
                        : (t = o[7]),
                    o[8] !== c
                        ? ((i = (0, y.jsxs)("div", {
                              className: oG.listDateContainer,
                              children: [
                                  (0, y.jsx)(di, { milestone: c }),
                                  (0, y.jsx)(dr, { milestone: c }),
                              ],
                          })),
                          (o[8] = c),
                          (o[9] = i))
                        : (i = o[9]),
                    o[10] !== t || o[11] !== i
                        ? ((s = (0, y.jsx)(ng.Q, {
                              children: (0, y.jsxs)(nc.U, {
                                  className: oG.listItemContent,
                                  children: [t, i],
                              }),
                          })),
                          (o[10] = t),
                          (o[11] = i),
                          (o[12] = s))
                        : (s = o[12]),
                    o[13] !== c.id || o[14] !== g || o[15] !== s || o[16] !== m
                        ? ((r = (0, y.jsx)(
                              nd.c,
                              {
                                  title: m,
                                  role: "listitem",
                                  metadata: g,
                                  className: oG.milestoneRow,
                                  metadataContainerClassName:
                                      oG.listMetadataContainer,
                                  children: s,
                              },
                              c.id
                          )),
                          (o[13] = c.id),
                          (o[14] = g),
                          (o[15] = s),
                          (o[16] = m),
                          (o[17] = r))
                        : (r = o[17]),
                    r
                );
            }
            try {
                dk.displayName || (dk.displayName = "MilestoneRow");
            } catch {}
            function df() {
                let e,
                    a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p,
                    h,
                    k,
                    f,
                    b,
                    C,
                    S,
                    F,
                    v = (0, iV.c)(60),
                    [L] = (0, e7.o)(),
                    I = L.get("sort"),
                    _ = L.get("direction"),
                    x = (0, e7.Z)();
                v[0] !== x || v[1] !== L
                    ? ((e = (e, a) => {
                          if (A.cg) {
                              let l = new URLSearchParams(L);
                              (e ? l.set("sort", e) : l.delete("sort"),
                                  a
                                      ? l.set("direction", a)
                                      : l.delete("direction"),
                                  x(
                                      `${A.cg.location.pathname}?${l.toString()}`
                                  ));
                          }
                      }),
                      (v[0] = x),
                      (v[1] = L),
                      (v[2] = e))
                    : (e = v[2]);
                let K = e;
                (v[3] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = (0, y.jsx)(ib.W.Button, {
                          variant: "invisible",
                          leadingVisual: P.SortDescIcon,
                          children: "Sort",
                      })),
                      (v[3] = a))
                    : (a = v[3]),
                    v[4] === Symbol.for("react.memo_cache_sentinel")
                        ? ((l = (0, y.jsx)(lQ.l.GroupHeading, {
                              children: "Sort by",
                          })),
                          (v[4] = l))
                        : (l = v[4]),
                    v[5] !== K
                        ? ((n = () => K(void 0, void 0)),
                          (v[5] = K),
                          (v[6] = n))
                        : (n = v[6]));
                let w = !I;
                (v[7] !== n || v[8] !== w
                    ? ((t = (0, y.jsx)(lQ.l.Item, {
                          onSelect: n,
                          selected: w,
                          role: "menuitemradio",
                          children: "Recently updated",
                      })),
                      (v[7] = n),
                      (v[8] = w),
                      (v[9] = t))
                    : (t = v[9]),
                    v[10] !== K
                        ? ((i = () => K("due_date", "desc")),
                          (v[10] = K),
                          (v[11] = i))
                        : (i = v[11]));
                let N = "due_date" === I && "desc" === _;
                (v[12] !== i || v[13] !== N
                    ? ((s = (0, y.jsx)(lQ.l.Item, {
                          onSelect: i,
                          selected: N,
                          role: "menuitemradio",
                          children: "Furthest due date",
                      })),
                      (v[12] = i),
                      (v[13] = N),
                      (v[14] = s))
                    : (s = v[14]),
                    v[15] !== K
                        ? ((r = () => K("due_date", "asc")),
                          (v[15] = K),
                          (v[16] = r))
                        : (r = v[16]));
                let j = "due_date" === I && "asc" === _;
                (v[17] !== j || v[18] !== r
                    ? ((o = (0, y.jsx)(lQ.l.Item, {
                          onSelect: r,
                          selected: j,
                          role: "menuitemradio",
                          children: "Closest due date",
                      })),
                      (v[17] = j),
                      (v[18] = r),
                      (v[19] = o))
                    : (o = v[19]),
                    v[20] !== K
                        ? ((u = () => K("completeness", "asc")),
                          (v[20] = K),
                          (v[21] = u))
                        : (u = v[21]));
                let R = "completeness" === I && "asc" === _;
                (v[22] !== u || v[23] !== R
                    ? ((d = (0, y.jsx)(lQ.l.Item, {
                          onSelect: u,
                          selected: R,
                          role: "menuitemradio",
                          children: "Least complete",
                      })),
                      (v[22] = u),
                      (v[23] = R),
                      (v[24] = d))
                    : (d = v[24]),
                    v[25] !== K
                        ? ((c = () => K("completeness", "desc")),
                          (v[25] = K),
                          (v[26] = c))
                        : (c = v[26]));
                let T = "completeness" === I && "desc" === _;
                (v[27] !== c || v[28] !== T
                    ? ((m = (0, y.jsx)(lQ.l.Item, {
                          onSelect: c,
                          selected: T,
                          role: "menuitemradio",
                          children: "Most complete",
                      })),
                      (v[27] = c),
                      (v[28] = T),
                      (v[29] = m))
                    : (m = v[29]),
                    v[30] !== K
                        ? ((g = () => K("title", "asc")),
                          (v[30] = K),
                          (v[31] = g))
                        : (g = v[31]));
                let M = "title" === I && "asc" === _;
                (v[32] !== g || v[33] !== M
                    ? ((p = (0, y.jsx)(lQ.l.Item, {
                          onSelect: g,
                          selected: M,
                          role: "menuitemradio",
                          children: "Alphabetical",
                      })),
                      (v[32] = g),
                      (v[33] = M),
                      (v[34] = p))
                    : (p = v[34]),
                    v[35] !== K
                        ? ((h = () => K("title", "desc")),
                          (v[35] = K),
                          (v[36] = h))
                        : (h = v[36]));
                let D = "title" === I && "desc" === _;
                (v[37] !== h || v[38] !== D
                    ? ((k = (0, y.jsx)(lQ.l.Item, {
                          onSelect: h,
                          selected: D,
                          role: "menuitemradio",
                          children: "Reverse alphabetical",
                      })),
                      (v[37] = h),
                      (v[38] = D),
                      (v[39] = k))
                    : (k = v[39]),
                    v[40] !== K
                        ? ((f = () => K("count", "desc")),
                          (v[40] = K),
                          (v[41] = f))
                        : (f = v[41]));
                let V = "count" === I && "desc" === _;
                (v[42] !== f || v[43] !== V
                    ? ((b = (0, y.jsx)(lQ.l.Item, {
                          onSelect: f,
                          selected: V,
                          role: "menuitemradio",
                          children: "Most issues",
                      })),
                      (v[42] = f),
                      (v[43] = V),
                      (v[44] = b))
                    : (b = v[44]),
                    v[45] !== K
                        ? ((C = () => K("count", "asc")),
                          (v[45] = K),
                          (v[46] = C))
                        : (C = v[46]));
                let E = "count" === I && "asc" === _;
                return (
                    v[47] !== C || v[48] !== E
                        ? ((S = (0, y.jsx)(lQ.l.Item, {
                              onSelect: C,
                              selected: E,
                              role: "menuitemradio",
                              children: "Fewest issues",
                          })),
                          (v[47] = C),
                          (v[48] = E),
                          (v[49] = S))
                        : (S = v[49]),
                    v[50] !== o ||
                    v[51] !== d ||
                    v[52] !== m ||
                    v[53] !== p ||
                    v[54] !== k ||
                    v[55] !== b ||
                    v[56] !== S ||
                    v[57] !== t ||
                    v[58] !== s
                        ? ((F = (0, y.jsxs)(ib.W, {
                              children: [
                                  a,
                                  (0, y.jsx)(ib.W.Overlay, {
                                      children: (0, y.jsx)(lQ.l, {
                                          selectionVariant: "single",
                                          children: (0, y.jsxs)(lQ.l.Group, {
                                              children: [
                                                  l,
                                                  t,
                                                  s,
                                                  o,
                                                  d,
                                                  m,
                                                  p,
                                                  k,
                                                  b,
                                                  S,
                                              ],
                                          }),
                                      }),
                                  }),
                              ],
                          })),
                          (v[50] = o),
                          (v[51] = d),
                          (v[52] = m),
                          (v[53] = p),
                          (v[54] = k),
                          (v[55] = b),
                          (v[56] = S),
                          (v[57] = t),
                          (v[58] = s),
                          (v[59] = F))
                        : (F = v[59]),
                    F
                );
            }
            try {
                df.displayName || (df.displayName = "MilestoneSortMenu");
            } catch {}
            let db = (function () {
                var e = { kind: "Literal", name: "first", value: 0 },
                    a = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                    ];
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "OpenClosedMilestones",
                    selections: [
                        {
                            alias: "open",
                            args: [
                                e,
                                {
                                    kind: "Literal",
                                    name: "states",
                                    value: "OPEN",
                                },
                            ],
                            concreteType: "MilestoneConnection",
                            kind: "LinkedField",
                            name: "milestones",
                            plural: !1,
                            selections: a,
                            storageKey: 'milestones(first:0,states:"OPEN")',
                        },
                        {
                            alias: "closed",
                            args: [
                                e,
                                {
                                    kind: "Literal",
                                    name: "states",
                                    value: "CLOSED",
                                },
                            ],
                            concreteType: "MilestoneConnection",
                            kind: "LinkedField",
                            name: "milestones",
                            plural: !1,
                            selections: a,
                            storageKey: 'milestones(first:0,states:"CLOSED")',
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            function dC(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c = (0, iV.c)(25),
                    { repository: m } = e;
                c[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = db), (c[0] = a))
                    : (a = c[0]);
                let g = (0, er.useFragment)(a, m);
                c[1] !== g?.open?.totalCount
                    ? ((l = Math.abs(
                          g?.open?.totalCount || 0
                      ).toLocaleString()),
                      (c[1] = g?.open?.totalCount),
                      (c[2] = l))
                    : (l = c[2]);
                let p = l;
                c[3] !== g?.closed?.totalCount
                    ? ((n = Math.abs(
                          g?.closed?.totalCount || 0
                      ).toLocaleString()),
                      (c[3] = g?.closed?.totalCount),
                      (c[4] = n))
                    : (n = c[4]);
                let h = n,
                    k = "";
                A.cg && (k = A.cg.location.pathname);
                let f = `${k}?state=closed`,
                    [b] = (0, e7.o)(),
                    C = b.get("state");
                c[5] === Symbol.for("react.memo_cache_sentinel")
                    ? ((t = ["mac"]), (c[5] = t))
                    : (t = c[5]);
                let S = (0, iT.X)(t),
                    F = (0, e7.Z)();
                c[6] !== S || c[7] !== F || c[8] !== b
                    ? ((i = (e, a) => {
                          if ((S ? e.metaKey : e.ctrlKey) || !A.cg) return;
                          e.preventDefault();
                          let l = new URLSearchParams(b);
                          (a ? l.delete("state") : l.set("state", "closed"),
                              F(`${A.cg.location.pathname}?${l.toString()}`));
                      }),
                      (c[6] = S),
                      (c[7] = F),
                      (c[8] = b),
                      (c[9] = i))
                    : (i = c[9]);
                let v = i,
                    L = A.KJ && "closed" !== C;
                (c[10] !== v
                    ? ((s = (e) => v(e, !0)), (c[10] = v), (c[11] = s))
                    : (s = c[11]),
                    c[12] !== p || c[13] !== L || c[14] !== s
                        ? ((r = (0, y.jsx)(
                              "li",
                              {
                                  children: (0, y.jsx)(
                                      lO.L,
                                      {
                                          title: "Open",
                                          isSelected: L,
                                          count: p,
                                          href: k,
                                          onClick: s,
                                          "data-testid": "open-milestone-tab",
                                      },
                                      "open"
                                  ),
                              },
                              "section-filter-0"
                          )),
                          (c[12] = p),
                          (c[13] = L),
                          (c[14] = s),
                          (c[15] = r))
                        : (r = c[15]));
                let I = A.KJ && "closed" === C;
                return (
                    c[16] !== v
                        ? ((o = (e) => v(e, !1)), (c[16] = v), (c[17] = o))
                        : (o = c[17]),
                    c[18] !== h || c[19] !== o || c[20] !== I
                        ? ((u = (0, y.jsx)(
                              "li",
                              {
                                  children: (0, y.jsx)(
                                      lO.L,
                                      {
                                          title: "Closed",
                                          isSelected: I,
                                          count: h,
                                          href: f,
                                          onClick: o,
                                          "data-testid": "closed-milestone-tab",
                                      },
                                      "closed"
                                  ),
                              },
                              "section-filter-1"
                          )),
                          (c[18] = h),
                          (c[19] = o),
                          (c[20] = I),
                          (c[21] = u))
                        : (u = c[21]),
                    c[22] !== u || c[23] !== r
                        ? ((d = (0, y.jsx)("div", {
                              children: (0, y.jsxs)("ul", {
                                  className: `list-style-none ${(0, l7.$)(oG.tabsContainer)}`,
                                  children: [r, u],
                              }),
                          })),
                          (c[22] = u),
                          (c[23] = r),
                          (c[24] = d))
                        : (d = c[24]),
                    d
                );
            }
            db.hash = "889a40b9e8f1d42c2c11ed7d91f2ae48";
            try {
                dC.displayName || (dC.displayName = "OpenClosedMilestones");
            } catch {}
            function dS(e) {
                let a,
                    l,
                    n = (0, iV.c)(6),
                    { repositoryRef: t } = e;
                n[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = de), (n[0] = a))
                    : (a = n[0]);
                let {
                    data: i,
                    loadNext: s,
                    hasNext: r,
                    isLoadingNext: o,
                } = (0, er.usePaginationFragment)(a, t);
                if (!i.milestones)
                    throw Error("Milestones data is null or undefined");
                return (
                    n[1] !== i || n[2] !== r || n[3] !== o || n[4] !== s
                        ? ((l = (0, y.jsx)(dF, {
                              data: i,
                              loadNext: s,
                              hasNext: r,
                              isLoadingNext: o,
                          })),
                          (n[1] = i),
                          (n[2] = r),
                          (n[3] = o),
                          (n[4] = s),
                          (n[5] = l))
                        : (l = n[5]),
                    l
                );
            }
            function dF({
                data: e,
                hasNext: a,
                isLoadingNext: l,
                loadNext: n,
            }) {
                let t = (0, f.useMemo)(
                        () =>
                            e.milestones?.edges
                                ?.map((e) => (e?.node ? e.node : null))
                                .filter((e) => !!e) || [],
                        [e]
                    ),
                    i = (0, f.useMemo)(
                        () => [
                            {
                                key: "milestone-sort-menu",
                                render: () => (0, y.jsx)(df, {}),
                            },
                        ],
                        []
                    ),
                    s = `${A.fV.origin}/${e.nameWithOwner}`,
                    r = `${s}/milestones/new`,
                    o = (0, y.jsx)(si.X, {
                        actions: i,
                        actionsLabel: "Actions",
                        sectionFilters: (0, y.jsx)(dC, { repository: e }),
                    }),
                    u = (0, f.useMemo)(
                        () =>
                            a
                                ? (0, y.jsx)("div", {
                                      className: oG.loadMoreButtonWrapper,
                                      children: (0, y.jsx)(lT.Q, {
                                          variant: "invisible",
                                          onClick: () =>
                                              n(da.milestonePageSize),
                                          className: oG.loadMoreButton,
                                          "data-testid":
                                              "load-more-milestones-button",
                                          loading: l,
                                          children: "Load more",
                                      }),
                                  })
                                : null,
                        [a, l, n]
                    );
                return (0, y.jsxs)(y.Fragment, {
                    children: [
                        (0, y.jsx)("div", {
                            className: oG.milestoneListWrapper,
                            "data-hpc": !0,
                            children: (0, y.jsx)(nt.u, {
                                ...(0, nk.G)("repository-milestone-list-view"),
                                title: "",
                                metadata: o,
                                titleHeaderTag: "h2",
                                singularUnits: "milestone",
                                pluralUnits: "milestones",
                                as: t.length > 0 ? "ul" : "div",
                                role: t.length > 0 ? "list" : "status",
                                children: (() => {
                                    if (t.length > 0)
                                        return t.map((a) =>
                                            (0, y.jsx)(
                                                dk,
                                                {
                                                    milestone: a,
                                                    repositoryNameWithOwner:
                                                        e.nameWithOwner,
                                                },
                                                a.id
                                            )
                                        );
                                    let a = e.open?.totalCount ?? 0,
                                        l = e.closed?.totalCount ?? 0;
                                    return (0, y.jsx)(dl, {
                                        noCreatedMilestones: 0 === a && 0 === l,
                                        newMilestoneUrl: r,
                                    });
                                })(),
                            }),
                        }),
                        u,
                    ],
                });
            }
            try {
                dS.displayName || (dS.displayName = "MilestoneList");
            } catch {}
            try {
                dF.displayName || (dF.displayName = "MilestoneListInternal");
            } catch {}
            let dv = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestonesActions",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            function dL(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s = (0, iV.c)(11),
                    { repositoryRef: r } = e;
                s[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = dv), (s[0] = a))
                    : (a = s[0]);
                let { viewerCanPush: o, nameWithOwner: u } = (0,
                    er.useFragment)(a, r),
                    d = `${A.fV.origin}/${u}`,
                    c = `${d}/milestones/new`,
                    m = (0, e7.Z)();
                s[1] !== m || s[2] !== c
                    ? ((l = () => {
                          m(c);
                      }),
                      (s[1] = m),
                      (s[2] = c),
                      (s[3] = l))
                    : (l = s[3]);
                let g = l;
                return (
                    s[4] === Symbol.for("react.memo_cache_sentinel")
                        ? ((n = (0, y.jsx)(e8.A, {
                              as: "h2",
                              className: oG.heading,
                              children: "Milestones",
                          })),
                          (s[4] = n))
                        : (n = s[4]),
                    s[5] !== c || s[6] !== g || s[7] !== o
                        ? ((t = o
                              ? (0, y.jsx)("div", {
                                    className: oG.actionsGrp,
                                    children: (0, y.jsx)(lT.Q, {
                                        as: "a",
                                        href: c,
                                        onClick: g,
                                        variant: "primary",
                                        "data-testid": "new-milestone-button",
                                        children: oQ.newMilestone,
                                    }),
                                })
                              : null),
                          (s[5] = c),
                          (s[6] = g),
                          (s[7] = o),
                          (s[8] = t))
                        : (t = s[8]),
                    s[9] !== t
                        ? ((i = (0, y.jsxs)("div", {
                              className: oG.buttonGrp,
                              children: [n, t],
                          })),
                          (s[9] = t),
                          (s[10] = i))
                        : (i = s[10]),
                    i
                );
            }
            dv.hash = "96feda0851486d21958e3e27d74358d0";
            try {
                dL.displayName || (dL.displayName = "MilestonesActions");
            } catch {}
            function dI(e) {
                let a,
                    l,
                    n,
                    t = (0, iV.c)(4),
                    { repository: i } = e;
                t[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = u9), (t[0] = a))
                    : (a = t[0]);
                let s = (0, er.useFragment)(a, i);
                return (
                    t[1] === Symbol.for("react.memo_cache_sentinel")
                        ? ((l = (0, y.jsx)(oZ, {
                              title: oQ.milestonesError,
                              message: oQ.milestonesErrorMessage,
                          })),
                          (t[1] = l))
                        : (l = t[1]),
                    t[2] !== s
                        ? ((n = (0, y.jsx)(aQ, {
                              contentAs: "div",
                              resizeable: !1,
                              leftPaneWidth: "small",
                              middlePane: (0, y.jsx)("div", {
                                  className: oG.middlePaneWrapper,
                                  children: (0, y.jsxs)(ih.t, {
                                      fallback: l,
                                      children: [
                                          (0, y.jsx)(dL, { repositoryRef: s }),
                                          (0, y.jsx)(dS, { repositoryRef: s }),
                                      ],
                                  }),
                              }),
                          })),
                          (t[2] = s),
                          (t[3] = n))
                        : (n = t[3]),
                    n
                );
            }
            try {
                dI.displayName ||
                    (dI.displayName = "RepositoryMilestonesInternal");
            } catch {}
            let d_ = ({ queries: { pageQuery: e } }) => {
                let { queryRef: a, loadQuery: l } = aa(e, eH);
                return a
                    ? (0, y.jsx)(as, {
                          category: "Repository Milestone Index",
                          children: (0, y.jsx)(dx, {
                              pageQueryRef: a,
                              loadQuery: l,
                          }),
                      })
                    : null;
            };
            function dx({ pageQueryRef: e }) {
                let a = (0, er.usePreloadedQuery)(eH, e),
                    { setCurrentViewId: l } = eM();
                return ((0, f.useEffect)(() => {
                    l(F.repository);
                }, [e, l]),
                a.repository)
                    ? (0, y.jsx)(dK, { repository: a.repository })
                    : (reportError(
                          Error(
                              `Could not find repository when loading milestone index for ${A.fV?.href.toString()}`
                          )
                      ),
                      (0, y.jsx)("div", { children: "Repository not found" }));
            }
            function dK({ repository: e }) {
                let a = (0, er.useFragment)(u6, e);
                return (0, y.jsx)(dI, { repository: a });
            }
            try {
                dx.displayName ||
                    (dx.displayName = "RepositoryMilestoneIndexContent");
            } catch {}
            try {
                dK.displayName ||
                    (dK.displayName =
                        "RepositoryMilestoneIndexPageContentInternal");
            } catch {}
            let dw = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryMilestonePageContentInternal",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Variable",
                                name: "number",
                                variableName: "number",
                            },
                            {
                                kind: "Variable",
                                name: "query",
                                variableName: "query",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "RepositoryMilestoneInternal",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            dw.hash = "7d31d10aafeaa69d827d858e9b244865";
            let dN = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    t = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    i = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    s = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    r = {
                        kind: "Variable",
                        name: "number",
                        variableName: "number",
                    },
                    o = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [h, k, d],
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    C = [
                        { kind: "Literal", name: "aggregations", value: !0 },
                        s,
                        o,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    F = [
                        { kind: "Literal", name: "first", value: 10 },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: null,
                        concreteType: "PageInfo",
                        kind: "LinkedField",
                        name: "pageInfo",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "endCursor",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "hasNextPage",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: F,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            d,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            S,
                                            b,
                                            y,
                                            h,
                                        ],
                                        storageKey: null,
                                    },
                                    v,
                                ],
                                storageKey: null,
                            },
                            L,
                        ],
                        storageKey:
                            'labels(first:10,orderBy:{"direction":"ASC","field":"NAME"})',
                    },
                    _ = {
                        alias: null,
                        args: F,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    x = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    w = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            k,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            h,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                            d,
                        ],
                        storageKey: null,
                    },
                    N = {
                        kind: "InlineFragment",
                        selections: [
                            I,
                            _,
                            x,
                            p,
                            c,
                            K,
                            w,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    j = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    R = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l, n, t],
                        kind: "Fragment",
                        metadata: null,
                        name: "RepositoryMilestoneQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: [s, r, o],
                                        kind: "FragmentSpread",
                                        name: "RepositoryMilestoneInternal",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [n, a, l, e, t],
                        kind: "Operation",
                        name: "RepositoryMilestoneQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    u,
                                    {
                                        alias: null,
                                        args: [r],
                                        concreteType: "Milestone",
                                        kind: "LinkedField",
                                        name: "milestone",
                                        plural: !1,
                                        selections: [
                                            d,
                                            c,
                                            m,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [u, d],
                                                storageKey: null,
                                            },
                                            g,
                                            p,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "openIssueCount",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "closedIssueCount",
                                                storageKey: null,
                                            },
                                            y,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "descriptionHTML",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "progressPercentage",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "dueOn",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerCanPush",
                                        storageKey: null,
                                    },
                                    f,
                                    b,
                                    {
                                        alias: null,
                                        args: C,
                                        concreteType:
                                            "SearchResultItemConnection",
                                        kind: "LinkedField",
                                        name: "search",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "issueCount",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "SearchResultItemEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [
                                                            h,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    d,
                                                                    g,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "state",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    m,
                                                                    {
                                                                        alias: "titleHtml",
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "titleHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "IssueType",
                                                                        kind: "LinkedField",
                                                                        name: "issueType",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                d,
                                                                                b,
                                                                                S,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                N,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            I,
                                                                                            _,
                                                                                            x,
                                                                                            p,
                                                                                            c,
                                                                                            K,
                                                                                            w,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "reviewDecision",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            j,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isInMergeQueue",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            R,
                                                                                        ],
                                                                                    type: "PullRequest",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "IssueOrPullRequest",
                                                                        abstractKey:
                                                                            "__isIssueOrPullRequest",
                                                                    },
                                                                ],
                                                                type: "Issue",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    d,
                                                                    g,
                                                                    c,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                b,
                                                                                f,
                                                                                d,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    m,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "titleHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                N,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            I,
                                                                                            _,
                                                                                            x,
                                                                                            p,
                                                                                            K,
                                                                                            w,
                                                                                            j,
                                                                                            R,
                                                                                        ],
                                                                                    type: "PullRequest",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "IssueOrPullRequest",
                                                                        abstractKey:
                                                                            "__isIssueOrPullRequest",
                                                                    },
                                                                ],
                                                                type: "PullRequest",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [d],
                                                                type: "Node",
                                                                abstractKey:
                                                                    "__isNode",
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    v,
                                                ],
                                                storageKey: null,
                                            },
                                            L,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: C,
                                        filters: [
                                            "query",
                                            "type",
                                            "aggregations",
                                        ],
                                        handle: "connection",
                                        key: "MilestoneIssuesList_search",
                                        kind: "LinkedHandle",
                                        name: "search",
                                    },
                                    d,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isArchived",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isDisabled",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isLocked",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInOrganization",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "30520301d90734d14acaeec676fc6f2d",
                        metadata: {},
                        name: "RepositoryMilestoneQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            dN.hash = "0a0e1c3003c63955a36ca0169f77ff91";
            let dj = (function () {
                var e = {
                        kind: "Variable",
                        name: "number",
                        variableName: "number",
                    },
                    a = [e];
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "number",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "query",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "RepositoryMilestoneInternal",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameWithOwner",
                            storageKey: null,
                        },
                        {
                            args: a,
                            kind: "FragmentSpread",
                            name: "MilestoneActions",
                        },
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "first",
                                    variableName: "first",
                                },
                                e,
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "query",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "MilestoneIssuesList",
                        },
                        {
                            alias: null,
                            args: a,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "MilestoneDetail",
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "title",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "number",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            dj.hash = "ed58f7c20d8325fa9641338233943cdb";
            let dR = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneActions",
                selections: [
                    {
                        alias: null,
                        args: [
                            {
                                kind: "Variable",
                                name: "number",
                                variableName: "number",
                            },
                        ],
                        concreteType: "Milestone",
                        kind: "LinkedField",
                        name: "milestone",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "ToggleMilestoneState",
                            },
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "MilestoneTitle",
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "number",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "title",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "login",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            dR.hash = "4c04143e376497bc1a37d2218000a808";
            let dT = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneTitle",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "nameWithOwner",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            dT.hash = "3aa545b4589bf0d967e46deb8f691360";
            var dP = l(53904);
            function dA(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o = (0, iV.c)(15),
                    { milestoneRef: u } = e;
                o[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = dT), (o[0] = a))
                    : (a = o[0]);
                let { title: d, repository: c } = (0, er.useFragment)(a, u),
                    m = `/${c.nameWithOwner}/milestones`;
                return (
                    o[1] !== m
                        ? ((l = (0, y.jsx)(dP.A.Item, {
                              href: m,
                              children: "Milestones",
                          })),
                          (o[1] = m),
                          (o[2] = l))
                        : (l = o[2]),
                    o[3] !== d
                        ? ((n =
                              d.length > 30 ? `${d.slice(0, 30)}\u{2026}` : d),
                          (o[3] = d),
                          (o[4] = n))
                        : (n = o[4]),
                    o[5] !== n
                        ? ((t = (0, y.jsx)(dP.A.Item, {
                              selected: !0,
                              children: (0, y.jsx)("span", { children: n }),
                          })),
                          (o[5] = n),
                          (o[6] = t))
                        : (t = o[6]),
                    o[7] !== l || o[8] !== t
                        ? ((i = (0, y.jsxs)(dP.A, { children: [l, t] })),
                          (o[7] = l),
                          (o[8] = t),
                          (o[9] = i))
                        : (i = o[9]),
                    o[10] !== d
                        ? ((s = (0, y.jsx)(e8.A, {
                              className: oG.title,
                              as: "h2",
                              children: d,
                          })),
                          (o[10] = d),
                          (o[11] = s))
                        : (s = o[11]),
                    o[12] !== i || o[13] !== s
                        ? ((r = (0, y.jsxs)("div", {
                              className: oG.milestoneTitleWrapper,
                              children: [i, s],
                          })),
                          (o[12] = i),
                          (o[13] = s),
                          (o[14] = r))
                        : (r = o[14]),
                    r
                );
            }
            try {
                dA.displayName || (dA.displayName = "MilestoneTitle");
            } catch {}
            let dM = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ToggleMilestoneState",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            function dD(e) {
                let a,
                    l,
                    n,
                    t = (0, iV.c)(9),
                    { milestoneRef: i } = e;
                t[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = dM), (t[0] = a))
                    : (a = t[0]);
                let s = (0, er.useFragment)(a, i),
                    r = (0, er.useRelayEnvironment)(),
                    { addToast: o } = (0, x.Y6)();
                t[1] !== o || t[2] !== s.closed || t[3] !== s.id || t[4] !== r
                    ? ((l = () => {
                          oY({
                              environment: r,
                              input: {
                                  id: s.id,
                                  state: s.closed ? "OPEN" : "CLOSED",
                              },
                              onCompleted: dV,
                              onError: () => {
                                  o({
                                      type: "error",
                                      message:
                                          "Could not change Milestone status",
                                  });
                              },
                          });
                      }),
                      (t[1] = o),
                      (t[2] = s.closed),
                      (t[3] = s.id),
                      (t[4] = r),
                      (t[5] = l))
                    : (l = t[5]);
                let u = l,
                    d = s.closed ? "Reopen Milestone" : "Close Milestone";
                return (
                    t[6] !== u || t[7] !== d
                        ? ((n = (0, y.jsx)(lT.Q, {
                              onClick: u,
                              variant: "default",
                              children: d,
                          })),
                          (t[6] = u),
                          (t[7] = d),
                          (t[8] = n))
                        : (n = t[8]),
                    n
                );
            }
            function dV() {}
            dM.hash = "e9d04dbed832ecb0dfde42e7ee424484";
            try {
                dD.displayName || (dD.displayName = "ToggleMilestoneState");
            } catch {}
            function dE(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d = (0, iV.c)(26),
                    { repositoryRef: c, optionConfig: m } = e;
                d[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = dR), (d[0] = a))
                    : (a = d[0]);
                let {
                        milestone: g,
                        viewerCanPush: p,
                        owner: h,
                        name: k,
                    } = (0, er.useFragment)(a, c),
                    f = (0, e7.Z)();
                d[1] !== g || d[2] !== f
                    ? ((l = (e) => {
                          if (!g || !g.title) return;
                          let a = `milestone=${encodeURIComponent(g.title)}`;
                          f(e.includes("?") ? `${e}&${a}` : `${e}?${a}`);
                      }),
                      (d[1] = g),
                      (d[2] = f),
                      (d[3] = l))
                    : (l = d[3]);
                let b = l;
                if (!g) return null;
                let C = `${A.fV.origin}/${h.login}/${k}`,
                    S = `${C}/milestones/${g.number}/edit`;
                (d[4] !== g
                    ? ((n = (0, y.jsx)(dA, { milestoneRef: g })),
                      (d[4] = g),
                      (d[5] = n))
                    : (n = d[5]),
                    d[6] !== S || d[7] !== g || d[8] !== p
                        ? ((t = p
                              ? (0, y.jsxs)(y.Fragment, {
                                    children: [
                                        (0, y.jsx)(lT.Q, {
                                            as: "a",
                                            href: S,
                                            children: oQ.editMilestone,
                                        }),
                                        (0, y.jsx)(dD, { milestoneRef: g }),
                                    ],
                                })
                              : null),
                          (d[6] = S),
                          (d[7] = g),
                          (d[8] = p),
                          (d[9] = t))
                        : (t = d[9]),
                    d[10] !== k || d[11] !== h.login
                        ? ((i = { repository: { owner: h.login, name: k } }),
                          (d[10] = k),
                          (d[11] = h.login),
                          (d[12] = i))
                        : (i = d[12]));
                let F = f !== v.l;
                return (
                    d[13] !== m || d[14] !== i || d[15] !== F
                        ? ((s = {
                              ...m,
                              showRepositoryPicker: !1,
                              issueCreateArguments: i,
                              showFullScreenButton: !0,
                              navigateToFullScreenOnTemplateChoice: F,
                              canBypassTemplateSelection: !0,
                          }),
                          (d[13] = m),
                          (d[14] = i),
                          (d[15] = F),
                          (d[16] = s))
                        : (s = d[16]),
                    d[17] !== b || d[18] !== s
                        ? ((r = (0, y.jsx)(lR.a, {
                              label: oQ.newIssue,
                              navigate: b,
                              optionConfig: s,
                          })),
                          (d[17] = b),
                          (d[18] = s),
                          (d[19] = r))
                        : (r = d[19]),
                    d[20] !== t || d[21] !== r
                        ? ((o = (0, y.jsxs)("div", {
                              className: oG.actionsGrp,
                              children: [t, r],
                          })),
                          (d[20] = t),
                          (d[21] = r),
                          (d[22] = o))
                        : (o = d[22]),
                    d[23] !== n || d[24] !== o
                        ? ((u = (0, y.jsxs)("div", {
                              className: `${oG.buttonGrp} ${oG.header}`,
                              children: [n, o],
                          })),
                          (d[23] = n),
                          (d[24] = o),
                          (d[25] = u))
                        : (u = d[25]),
                    u
                );
            }
            try {
                dE.displayName || (dE.displayName = "MilestoneActions");
            } catch {}
            let dq = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneDetail",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "descriptionHTML",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "progressPercentage",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestoneDate",
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            dq.hash = "b924a97b25ba7fc66844fdbc57ca3181";
            var dO = l(333),
                dB = l(91089);
            function d$(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p,
                    h,
                    k,
                    b = (0, iV.c)(44),
                    { milestoneRef: C } = e;
                b[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = dq), (b[0] = a))
                    : (a = b[0]);
                let S = (0, er.useFragment)(a, C),
                    [F, v] = (0, f.useState)(!1),
                    L = S.descriptionHTML && S.descriptionHTML.length > 600;
                b[1] !== L || b[2] !== F
                    ? ((l = () =>
                          L ? (F ? oG.expanded : oG.collapsed) : null),
                      (b[1] = L),
                      (b[2] = F),
                      (b[3] = l))
                    : (l = b[3]);
                let I = l,
                    _ = `${oG.milestoneDetailsWrapper} ${F && L ? oG.expanded : ""}`,
                    x = S.closed ? "closed" : "open",
                    K = S.closed ? oQ.milestoneClosed : oQ.milestoneOpen;
                (b[4] !== x || b[5] !== K
                    ? ((n = (0, y.jsx)(dB.A, {
                          className: oG.milestoneStatus,
                          variant: "small",
                          status: x,
                          children: K,
                      })),
                      (b[4] = x),
                      (b[5] = K),
                      (b[6] = n))
                    : (n = b[6]),
                    b[7] !== S
                        ? ((t = (0, y.jsx)(di, { milestone: S })),
                          (b[7] = S),
                          (b[8] = t))
                        : (t = b[8]),
                    b[9] !== S.closed
                        ? ((i = S.closed
                              ? (0, y.jsx)(y.Fragment, {
                                    children: oQ.milestoneClosed,
                                })
                              : (0, y.jsx)(y.Fragment, {
                                    children: oQ.milestoneLastUpdated,
                                })),
                          (b[9] = S.closed),
                          (b[10] = i))
                        : (i = b[10]),
                    b[11] !== S.updatedAt
                        ? ((s = new Date(S.updatedAt)),
                          (b[11] = S.updatedAt),
                          (b[12] = s))
                        : (s = b[12]),
                    b[13] !== s
                        ? ((r = (0, y.jsx)(n1.A, { date: s, tense: "past" })),
                          (b[13] = s),
                          (b[14] = r))
                        : (r = b[14]),
                    b[15] !== r || b[16] !== i
                        ? ((o = (0, y.jsxs)("span", { children: [i, r] })),
                          (b[15] = r),
                          (b[16] = i),
                          (b[17] = o))
                        : (o = b[17]),
                    b[18] !== o || b[19] !== t
                        ? ((u = (0, y.jsxs)("div", {
                              className: oG.milestoneDataContainer,
                              children: [t, o],
                          })),
                          (b[18] = o),
                          (b[19] = t),
                          (b[20] = u))
                        : (u = b[20]),
                    b[21] !== u || b[22] !== n
                        ? ((d = (0, y.jsxs)("div", {
                              className: oG.status,
                              "data-testid": "milestone-status",
                              children: [n, u],
                          })),
                          (b[21] = u),
                          (b[22] = n),
                          (b[23] = d))
                        : (d = b[23]));
                let w = Math.floor(S.progressPercentage);
                b[24] !== w
                    ? ((c = (0, y.jsxs)("span", {
                          children: [
                              (0, y.jsxs)("span", {
                                  className: oG.progressPercentage,
                                  children: [w, "%"],
                              }),
                              " ",
                              "complete",
                          ],
                      })),
                      (b[24] = w),
                      (b[25] = c))
                    : (c = b[25]);
                let N = Math.floor(S.progressPercentage);
                return (
                    b[26] !== N
                        ? ((m = (0, y.jsx)(dd.z, {
                              progress: N,
                              "aria-hidden": "true",
                          })),
                          (b[26] = N),
                          (b[27] = m))
                        : (m = b[27]),
                    b[28] !== c || b[29] !== m
                        ? ((g = (0, y.jsxs)("div", {
                              className: oG.progressSection,
                              children: [c, m],
                          })),
                          (b[28] = c),
                          (b[29] = m),
                          (b[30] = g))
                        : (g = b[30]),
                    b[31] !== d || b[32] !== g
                        ? ((p = (0, y.jsxs)("div", {
                              className: oG.metadataWrapper,
                              children: [d, g],
                          })),
                          (b[31] = d),
                          (b[32] = g),
                          (b[33] = p))
                        : (p = b[33]),
                    b[34] !== S.description ||
                    b[35] !== S.descriptionHTML ||
                    b[36] !== L ||
                    b[37] !== F ||
                    b[38] !== I
                        ? ((h =
                              S.description && S.descriptionHTML
                                  ? (0, y.jsxs)("div", {
                                        className: oG.milestoneDescription,
                                        id: "milestone-description",
                                        children: [
                                            (0, y.jsx)(dO.G, {
                                                className: (0, l7.$)(
                                                    oG.mdViewer,
                                                    I()
                                                ),
                                                markdownValue: S.description,
                                                verifiedHTML: S.descriptionHTML,
                                                onChange: dQ,
                                            }),
                                            L &&
                                                (0, y.jsx)("div", {
                                                    className: (0, l7.$)(
                                                        oG.showMoreButtonContainer,
                                                        F
                                                            ? oG.expanded
                                                            : oG.collapsed
                                                    ),
                                                    children: (0, y.jsx)(lT.Q, {
                                                        size: "small",
                                                        variant: "invisible",
                                                        className: oG.button,
                                                        onClick: () => {
                                                            v(!F);
                                                        },
                                                        "aria-expanded": F,
                                                        "aria-controls":
                                                            "milestone-description",
                                                        trailingVisual: F
                                                            ? P.ChevronUpIcon
                                                            : P.ChevronDownIcon,
                                                        children: F
                                                            ? "Show less"
                                                            : "Show more",
                                                    }),
                                                }),
                                        ],
                                    })
                                  : null),
                          (b[34] = S.description),
                          (b[35] = S.descriptionHTML),
                          (b[36] = L),
                          (b[37] = F),
                          (b[38] = I),
                          (b[39] = h))
                        : (h = b[39]),
                    b[40] !== p || b[41] !== h || b[42] !== _
                        ? ((k = (0, y.jsxs)("div", {
                              className: _,
                              children: [p, h],
                          })),
                          (b[40] = p),
                          (b[41] = h),
                          (b[42] = _),
                          (b[43] = k))
                        : (k = b[43]),
                    k
                );
            }
            function dQ() {}
            try {
                d$.displayName || (d$.displayName = "MilestoneDetail");
            } catch {}
            let dU = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "cursor",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    t = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    i = [{ kind: "Variable", name: "id", variableName: "id" }],
                    s = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    r = {
                        kind: "Variable",
                        name: "number",
                        variableName: "number",
                    },
                    o = {
                        kind: "Variable",
                        name: "query",
                        variableName: "query",
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    c = [
                        {
                            kind: "Variable",
                            name: "after",
                            variableName: "cursor",
                        },
                        { kind: "Literal", name: "aggregations", value: !0 },
                        s,
                        o,
                        {
                            kind: "Literal",
                            name: "type",
                            value: "ISSUE_ADVANCED",
                        },
                    ],
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    h = [
                        { kind: "Literal", name: "first", value: 10 },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        concreteType: "PageInfo",
                        kind: "LinkedField",
                        name: "pageInfo",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "endCursor",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "hasNextPage",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: h,
                        concreteType: "LabelConnection",
                        kind: "LinkedField",
                        name: "labels",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "LabelEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Label",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            d,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "nameHTML",
                                                storageKey: null,
                                            },
                                            y,
                                            p,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "description",
                                                storageKey: null,
                                            },
                                            u,
                                        ],
                                        storageKey: null,
                                    },
                                    k,
                                ],
                                storageKey: null,
                            },
                            f,
                        ],
                        storageKey:
                            'labels(first:10,orderBy:{"direction":"ASC","field":"NAME"})',
                    },
                    C = {
                        alias: null,
                        args: h,
                        filters: ["orderBy"],
                        handle: "connection",
                        key: "Labels_labels",
                        kind: "LinkedHandle",
                        name: "labels",
                    },
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedAt",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            I,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "resourcePath",
                                storageKey: null,
                            },
                            u,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                            d,
                        ],
                        storageKey: null,
                    },
                    x = {
                        kind: "InlineFragment",
                        selections: [
                            b,
                            C,
                            S,
                            F,
                            v,
                            L,
                            _,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                        ],
                        type: "Issue",
                        abstractKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    w = {
                        alias: "pullRequestState",
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    N = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [u, I, d],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, a, l, n, t],
                        kind: "Fragment",
                        metadata: null,
                        name: "MilestoneIssuesListQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                            s,
                                            r,
                                            o,
                                        ],
                                        kind: "FragmentSpread",
                                        name: "MilestoneIssuesList",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, a, n, t, l],
                        kind: "Operation",
                        name: "MilestoneIssuesListQuery",
                        selections: [
                            {
                                alias: null,
                                args: i,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    u,
                                    d,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: c,
                                                concreteType:
                                                    "SearchResultItemConnection",
                                                kind: "LinkedField",
                                                name: "search",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "issueCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SearchResultItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    u,
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                d,
                                                                                m,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "state",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                g,
                                                                                {
                                                                                    alias: "titleHtml",
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "IssueType",
                                                                                    kind: "LinkedField",
                                                                                    name: "issueType",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            d,
                                                                                            p,
                                                                                            y,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            x,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        b,
                                                                                                        C,
                                                                                                        S,
                                                                                                        F,
                                                                                                        v,
                                                                                                        L,
                                                                                                        _,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "reviewDecision",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        K,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "isInMergeQueue",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        w,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "Issue",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                d,
                                                                                m,
                                                                                v,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            p,
                                                                                            N,
                                                                                            d,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                g,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "titleHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            x,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        b,
                                                                                                        C,
                                                                                                        S,
                                                                                                        F,
                                                                                                        L,
                                                                                                        _,
                                                                                                        K,
                                                                                                        w,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "IssueOrPullRequest",
                                                                                    abstractKey:
                                                                                        "__isIssueOrPullRequest",
                                                                                },
                                                                            ],
                                                                        type: "PullRequest",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [d],
                                                                        type: "Node",
                                                                        abstractKey:
                                                                            "__isNode",
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            k,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    f,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: c,
                                                filters: [
                                                    "query",
                                                    "type",
                                                    "aggregations",
                                                ],
                                                handle: "connection",
                                                key: "MilestoneIssuesList_search",
                                                kind: "LinkedHandle",
                                                name: "search",
                                            },
                                            {
                                                alias: null,
                                                args: [r],
                                                concreteType: "Milestone",
                                                kind: "LinkedField",
                                                name: "milestone",
                                                plural: !1,
                                                selections: [
                                                    d,
                                                    m,
                                                    F,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "openIssueCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "closedIssueCount",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            N,
                                            p,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isArchived",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanPush",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isDisabled",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isLocked",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isInOrganization",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Repository",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "f3116c955bb0aed1085c5f9ce3ea17b1",
                        metadata: {},
                        name: "MilestoneIssuesListQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            dU.hash = "51fbe7ba275adbf51fd5718aeca48151";
            let dH = (function () {
                var e = ["search"],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    n = {
                        kind: "Literal",
                        name: "includeMilestone",
                        value: !1,
                    },
                    t = { kind: "Literal", name: "labelPageSize", value: 10 };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "number",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "query",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "first",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: { count: "first", cursor: "cursor" },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: dU,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "MilestoneIssuesList",
                    selections: [
                        {
                            alias: "search",
                            args: [
                                {
                                    kind: "Literal",
                                    name: "aggregations",
                                    value: !0,
                                },
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "query",
                                },
                                {
                                    kind: "Literal",
                                    name: "type",
                                    value: "ISSUE_ADVANCED",
                                },
                            ],
                            concreteType: "SearchResultItemConnection",
                            kind: "LinkedField",
                            name: "__MilestoneIssuesList_search_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "issueCount",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "SearchResultItemEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [
                                                        a,
                                                        l,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "state",
                                                            storageKey: null,
                                                        },
                                                        {
                                                            args: [
                                                                {
                                                                    kind: "Literal",
                                                                    name: "fetchRepository",
                                                                    value: !1,
                                                                },
                                                                n,
                                                                t,
                                                            ],
                                                            kind: "FragmentSpread",
                                                            name: "IssueRow",
                                                        },
                                                    ],
                                                    type: "Issue",
                                                    abstractKey: null,
                                                },
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [
                                                        a,
                                                        l,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "closed",
                                                            storageKey: null,
                                                        },
                                                        {
                                                            args: [
                                                                {
                                                                    kind: "Literal",
                                                                    name: "includeGitData",
                                                                    value: !1,
                                                                },
                                                                n,
                                                                t,
                                                            ],
                                                            kind: "FragmentSpread",
                                                            name: "PullRequestRow_pullRequest",
                                                        },
                                                    ],
                                                    type: "PullRequest",
                                                    abstractKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "number",
                                    variableName: "number",
                                },
                            ],
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "MilestoneIssuesListInternal",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "owner",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "login",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        a,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isArchived",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanPush",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isDisabled",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isLocked",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isInOrganization",
                            storageKey: null,
                        },
                    ],
                    type: "Repository",
                    abstractKey: null,
                };
            })();
            dH.hash = "51fbe7ba275adbf51fd5718aeca48151";
            let dz = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MilestoneIssuesListInternal",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "OpenClosedMilestoneIssues",
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            dz.hash = "4b1062184102941393701896eeda1e42";
            let dW = {
                    emptyState: "EmptyState-module__emptyState--NgT69",
                    emptyStateHeading:
                        "EmptyState-module__emptyStateHeading--rzLtD",
                },
                dG = (e) => {
                    let a,
                        l,
                        n,
                        t,
                        i = (0, iV.c)(12),
                        {
                            selected: s,
                            ariaLabel: r,
                            id: o,
                            descriptionUrl: u,
                        } = e;
                    "open" !== s && "closed" !== s && (s = "open");
                    let d =
                        "open" === s
                            ? oQ.emptyStateOpenIssues
                            : oQ.emptyStateClosedIssues;
                    return (
                        i[0] !== d
                            ? ((a = (0, y.jsx)("h3", {
                                  className: dW.emptyStateHeading,
                                  children: d,
                              })),
                              (i[0] = d),
                              (i[1] = a))
                            : (a = i[1]),
                        i[2] !== u || i[3] !== s
                            ? ((l =
                                  "open" === s
                                      ? (0, y.jsxs)(y.Fragment, {
                                            children: [
                                                "Add issues to milestones to help organize your work for a particular release or project. Find and add",
                                                " ",
                                                (0, y.jsx)(e9.A, {
                                                    inline: !0,
                                                    href: u,
                                                    children:
                                                        "issues with no milestones",
                                                }),
                                                " ",
                                                "in this repo.",
                                            ],
                                        })
                                      : "Issues will automatically be moved here when they are closed."),
                              (i[2] = u),
                              (i[3] = s),
                              (i[4] = l))
                            : (l = i[4]),
                        i[5] !== l
                            ? ((n = (0, y.jsx)("p", { children: l })),
                              (i[5] = l),
                              (i[6] = n))
                            : (n = i[6]),
                        i[7] !== r || i[8] !== o || i[9] !== a || i[10] !== n
                            ? ((t = (0, y.jsxs)("div", {
                                  id: o,
                                  className: dW.emptyState,
                                  role: "region",
                                  "aria-label": r,
                                  "aria-live": "polite",
                                  "aria-atomic": "true",
                                  children: [a, n],
                              })),
                              (i[7] = r),
                              (i[8] = o),
                              (i[9] = a),
                              (i[10] = n),
                              (i[11] = t))
                            : (t = i[11]),
                        t
                    );
                };
            try {
                dG.displayName || (dG.displayName = "EmptyState");
            } catch {}
            function dZ() {
                let e,
                    a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o = (0, iV.c)(7),
                    u = dX;
                return (
                    o[0] === Symbol.for("react.memo_cache_sentinel")
                        ? ((a = {
                              key: "mark-as",
                              render: (e) =>
                                  u(e, da.issueIcons.CLOSED.icon, oQ.markAs),
                          }),
                          (o[0] = a))
                        : (a = o[0]),
                    o[1] === Symbol.for("react.memo_cache_sentinel")
                        ? ((l = {
                              key: "apply-labels",
                              render: (e) => u(e, P.TagIcon, oQ.label),
                          }),
                          (o[1] = l))
                        : (l = o[1]),
                    o[2] === Symbol.for("react.memo_cache_sentinel")
                        ? ((n = {
                              key: "apply-assignees",
                              render: (e) => u(e, P.PeopleIcon, oQ.assign),
                          }),
                          (o[2] = n))
                        : (n = o[2]),
                    o[3] === Symbol.for("react.memo_cache_sentinel")
                        ? ((t = {
                              key: "add-to-projects",
                              render: (e) =>
                                  u(e, P.ProjectSymlinkIcon, oQ.project),
                          }),
                          (o[3] = t))
                        : (t = o[3]),
                    o[4] === Symbol.for("react.memo_cache_sentinel")
                        ? ((i = {
                              key: "apply-milestone",
                              render: (e) =>
                                  u(e, P.MilestoneIcon, oQ.milestone),
                          }),
                          (o[4] = i))
                        : (i = o[4]),
                    o[5] === Symbol.for("react.memo_cache_sentinel")
                        ? ((s = [
                              a,
                              l,
                              n,
                              t,
                              i,
                              {
                                  key: "apply-issue-type",
                                  render: (e) =>
                                      u(e, P.IssueOpenedIcon, oQ.setIssueType),
                              },
                          ]),
                          (o[5] = s))
                        : (s = o[5]),
                    (e = s),
                    o[6] === Symbol.for("react.memo_cache_sentinel")
                        ? ((r = (0, y.jsx)(si.X, {
                              onToggleSelectAll: v.l,
                              actionsLabel: oQ.bulkActions,
                              actions: e,
                              density: "normal",
                          })),
                          (o[6] = r))
                        : (r = o[6]),
                    r
                );
            }
            function dX(e, a, l) {
                return e
                    ? (0, y.jsxs)(lQ.l.Item, {
                          disabled: !0,
                          children: [
                              (0, y.jsx)(lQ.l.LeadingVisual, {
                                  children: (0, y.jsx)(a, {}),
                              }),
                              l,
                              (0, y.jsx)(lQ.l.TrailingVisual, {
                                  children: (0, y.jsx)(P.TriangleDownIcon, {}),
                              }),
                          ],
                      })
                    : (0, y.jsx)(lT.Q, {
                          disabled: !0,
                          leadingVisual: a,
                          trailingVisual: P.TriangleDownIcon,
                          children: l,
                      });
            }
            let dJ = ({
                checkedItems: e,
                issueNodes: a,
                setCheckedItems: l,
                updateListHasPRs: n,
                useBulkActions: t,
                scopedRepository: i,
                singleKeyShortcutsEnabled: s,
                bulkJobId: r,
                setBulkJobId: o,
                isInOrganization: u,
            }) => {
                let { addToast: d, addPersistedToast: c } = (0, x.Y6)(),
                    { setSelectedCount: m } = (0, iM.v)(),
                    { setMultiPageSelectionAllowed: g } = (0, ss.P)(),
                    [p, h] = (0, f.useState)(null !== r),
                    k = Array.from(e.values())
                        .filter((e) => null != e)
                        .filter((e) => "Issue" === e.__typename),
                    b = (0, f.useCallback)(
                        (e) => {
                            (h(!1),
                                e &&
                                    (c({
                                        type: "info",
                                        message: "Updating issues",
                                        icon: (0, y.jsx)(P.RocketIcon, {}),
                                        role: "status",
                                    }),
                                    o(e)));
                        },
                        [c, o]
                    ),
                    C = (0, f.useCallback)(
                        (e) => {
                            (h(!1),
                                d({
                                    type: "error",
                                    message: `Could not update issues: ${e.message}`,
                                }));
                        },
                        [d]
                    ),
                    S = (0, f.useMemo)(
                        () => ({
                            useQueryForAction: !1,
                            onCompleted: b,
                            onError: C,
                            disabled: p,
                            issuesToActOn: k
                                .filter((e) => null != e)
                                .map((e) => e.id),
                            singleKeyShortcutsEnabled: s || !1,
                        }),
                        [b, C, p, k, s]
                    ),
                    F = (0, f.useCallback)(
                        (e) => {
                            e
                                ? (l(
                                      a
                                          .filter((e) => null != e)
                                          .reduce(
                                              (e, a) => e.set(a.id, a),
                                              new Map()
                                          )
                                  ),
                                  n(
                                      a
                                          .filter((e) => null != e)
                                          .reduce(
                                              (e, a) => e.set(a.id, a),
                                              new Map()
                                          )
                                  ))
                                : (l(new Map()), m(0), g?.(!1));
                        },
                        [a, l, g, m, n]
                    ),
                    v = i && t,
                    L = (0, f.useMemo)(
                        () => ({
                            owner: i?.owner ?? "",
                            repositoryName: i?.name ?? "",
                        }),
                        [i?.name, i?.owner]
                    ),
                    I = (0, f.useMemo)(() => {
                        if (!v) return;
                        let e = k.map((e) => e.id),
                            a = [
                                {
                                    key: "mark-as",
                                    render: (e) =>
                                        (0, y.jsx)(st, { ...S, nested: e }),
                                },
                                {
                                    key: "apply-labels",
                                    render: (a) =>
                                        (0, y.jsx)(i1, {
                                            owner: i.owner,
                                            repo: i.name,
                                            nested: a,
                                            issueIds: e,
                                            ...S,
                                            repositoryId: i?.id,
                                        }),
                                },
                                {
                                    key: "apply-assignees",
                                    render: (a) =>
                                        (0, y.jsx)(i$, {
                                            nested: a,
                                            issueIds: e,
                                            ...S,
                                            repositoryId: i?.id,
                                            owner: i?.owner,
                                            repo: i?.name,
                                        }),
                                },
                                {
                                    key: "add-to-projects",
                                    render: (a) =>
                                        (0, y.jsx)(iE, {
                                            nested: a,
                                            issueIds: e,
                                            repositoryId: i?.id,
                                            owner: i?.owner,
                                            repo: i?.name,
                                            ...S,
                                        }),
                                },
                                {
                                    key: "apply-milestone",
                                    render: (e) =>
                                        (0, y.jsx)(i7, {
                                            owner: i.owner,
                                            repo: i.name,
                                            nested: e,
                                            issueIds: k.map((e) => e.id),
                                            repositoryId: i.id,
                                            ...S,
                                        }),
                                },
                            ];
                        return (
                            u &&
                                a.push({
                                    key: "apply-issue-type",
                                    render: (a) =>
                                        (0, y.jsx)(al.y, {
                                            appName: "issue_types",
                                            category: "issues_index",
                                            metadata: L,
                                            children: (0, y.jsx)(iG, {
                                                owner: i.owner,
                                                repo: i.name,
                                                nested: a,
                                                issueIds: e,
                                                repositoryId: i?.id,
                                                ...S,
                                            }),
                                        }),
                                }),
                            a
                        );
                    }, [S, i?.id, i?.owner, i?.name, k, v, L, u]);
                return (0, y.jsx)(f.Suspense, {
                    fallback: (0, y.jsx)(dZ, {}),
                    children: (0, y.jsx)(si.X, {
                        onToggleSelectAll: F,
                        actionsLabel: oQ.bulkActions,
                        actions: I,
                        density: "normal",
                        ...S,
                    }),
                });
            };
            try {
                dZ.displayName ||
                    (dZ.displayName = "ListItemsHeaderBulkFallback");
            } catch {}
            try {
                dJ.displayName ||
                    (dJ.displayName = "ListItemsHeaderWithBulkActions");
            } catch {}
            let dY = (e) => {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u = (0, iV.c)(17);
                u[0] !== e
                    ? (({
                          sectionFilters: n,
                          issueNodes: a,
                          setCheckedItems: t,
                          updateListHasPRs: i,
                          ...l
                      } = e),
                      (u[0] = e),
                      (u[1] = a),
                      (u[2] = l),
                      (u[3] = n),
                      (u[4] = t),
                      (u[5] = i))
                    : ((a = u[1]),
                      (l = u[2]),
                      (n = u[3]),
                      (t = u[4]),
                      (i = u[5]));
                let { setSelectedCount: d } = (0, iM.v)(),
                    { setMultiPageSelectionAllowed: c } = (0, ss.P)();
                u[6] !== a ||
                u[7] !== t ||
                u[8] !== c ||
                u[9] !== d ||
                u[10] !== i
                    ? ((s = (e) => {
                          e
                              ? (t(a.filter(d1).reduce(d2, new Map())),
                                i(a.filter(d0).reduce(d3, new Map())))
                              : (t(new Map()), d(0), c?.(!1));
                      }),
                      (u[6] = a),
                      (u[7] = t),
                      (u[8] = c),
                      (u[9] = d),
                      (u[10] = i),
                      (u[11] = s))
                    : (s = u[11]);
                let m = s;
                return (
                    u[12] === Symbol.for("react.memo_cache_sentinel")
                        ? ((r = []), (u[12] = r))
                        : (r = u[12]),
                    u[13] !== m || u[14] !== l || u[15] !== n
                        ? ((o = (0, y.jsx)(si.X, {
                              onToggleSelectAll: m,
                              actionsLabel: oQ.bulkActions,
                              actions: r,
                              sectionFilters: n,
                              density: "normal",
                              ...l,
                          })),
                          (u[13] = m),
                          (u[14] = l),
                          (u[15] = n),
                          (u[16] = o))
                        : (o = u[16]),
                    o
                );
            };
            try {
                dY.displayName ||
                    (dY.displayName = "ListItemsHeaderWithoutBulkActions");
            } catch {}
            function d1(e) {
                return null != e;
            }
            function d2(e, a) {
                return e.set(a.id, a);
            }
            function d0(e) {
                return null != e;
            }
            function d3(e, a) {
                return e.set(a.id, a);
            }
            function d4(e) {
                let a,
                    l,
                    n = (0, iV.c)(6);
                n[0] !== e
                    ? (({ ...a } = e), (n[0] = e), (n[1] = a))
                    : (a = n[1]);
                let { anyItemsSelected: t } = (0, iM.v)();
                if (t) {
                    let e;
                    return (
                        n[2] !== a
                            ? ((e = (0, y.jsx)(dJ, { ...a })),
                              (n[2] = a),
                              (n[3] = e))
                            : (e = n[3]),
                        e
                    );
                }
                return (
                    n[4] !== a
                        ? ((l = (0, y.jsx)(dY, { ...a })),
                          (n[4] = a),
                          (n[5] = l))
                        : (l = n[5]),
                    l
                );
            }
            try {
                d4.displayName || (d4.displayName = "ListItemsHeader");
            } catch {}
            function d5(e) {
                let a,
                    l,
                    n,
                    t,
                    i = (0, iV.c)(20),
                    {
                        orderedNodes: s,
                        checkedItems: r,
                        itemSelected: o,
                        getMetadataHref: u,
                        getAdditiveMetadataHref: d,
                        withDragAndDrop: c,
                        scopedRepository: m,
                        handleNavigate: g,
                    } = e,
                    p = (0, e7.Z)(),
                    [h, k] = (0, er.useQueryLoader)(im),
                    b = null !== h;
                (i[0] !== k || i[1] !== s
                    ? ((a = () => {
                          A.X3 || k({ nodes: s.map(d7), includeReactions: !1 });
                      }),
                      (i[0] = k),
                      (i[1] = s),
                      (i[2] = a))
                    : (a = i[2]),
                    i[3] !== b || i[4] !== k || i[5] !== s
                        ? ((l = [k, s, b]),
                          (i[3] = b),
                          (i[4] = k),
                          (i[5] = s),
                          (i[6] = l))
                        : (l = i[6]),
                    (0, f.useEffect)(a, l),
                    i[7] !== r ||
                    i[8] !== d ||
                    i[9] !== u ||
                    i[10] !== g ||
                    i[11] !== o ||
                    i[12] !== h ||
                    i[13] !== p ||
                    i[14] !== s ||
                    i[15] !== m ||
                    i[16] !== c
                        ? ((n = s?.map((e, a) => {
                              let l = {
                                  isActive: !1,
                                  isSelected: e && r.has(e.id),
                                  onSelect: (a) => e && o(e.id, e, a),
                                  onSelectRow: v.l,
                                  getMetadataHref: u,
                                  getAdditiveMetadataHref: d,
                                  reactionEmojiToDisplay: {
                                      reaction: "",
                                      reactionEmoji: "",
                                  },
                                  sortingItemSelected: "",
                                  scopedRepository: m,
                                  metadataRef: h,
                              };
                              if (!c)
                                  if ("Issue" === e.__typename)
                                      return (0, y.jsx)(
                                          ip,
                                          {
                                              issueKey: e,
                                              onNavigate: (a, l) =>
                                                  g(e.number, a, l),
                                              ...l,
                                          },
                                          e.id
                                      );
                                  else
                                      return (0, y.jsx)(
                                          th,
                                          {
                                              pullRequestKey: e,
                                              includeGitDataFromMainQuery: !1,
                                              onNavigate: p,
                                              ...l,
                                          },
                                          e.id
                                      );
                              return (0, y.jsx)(
                                  of.BS.Item,
                                  {
                                      hideTrigger: !0,
                                      as: "li",
                                      index: a,
                                      id: e.id,
                                      title: "",
                                      style: { display: "flex", width: "100%" },
                                      className: oG.dragAndDropItem,
                                      tabIndex: -1,
                                      elementId: `list-view-node-${e.id}`,
                                      children:
                                          "Issue" === e.__typename
                                              ? (0, y.jsx)(
                                                    ip,
                                                    {
                                                        issueKey: e,
                                                        onNavigate: (a, l) =>
                                                            g(e.number, a, l),
                                                        ...l,
                                                        as: "div",
                                                        role: "none",
                                                    },
                                                    e.id
                                                )
                                              : (0, y.jsx)(
                                                    th,
                                                    {
                                                        pullRequestKey: e,
                                                        includeGitDataFromMainQuery:
                                                            !1,
                                                        onNavigate: p,
                                                        ...l,
                                                        as: "div",
                                                        role: "none",
                                                    },
                                                    e.id
                                                ),
                                  },
                                  e.id
                              );
                          })),
                          (i[7] = r),
                          (i[8] = d),
                          (i[9] = u),
                          (i[10] = g),
                          (i[11] = o),
                          (i[12] = h),
                          (i[13] = p),
                          (i[14] = s),
                          (i[15] = m),
                          (i[16] = c),
                          (i[17] = n))
                        : (n = i[17]));
                let C = n;
                return (
                    i[18] !== C
                        ? ((t = (0, y.jsx)(y.Fragment, { children: C })),
                          (i[18] = C),
                          (i[19] = t))
                        : (t = i[19]),
                    t
                );
            }
            function d7(e) {
                return e.id;
            }
            try {
                d5.displayName || (d5.displayName = "MilestoneIssuesListPage");
            } catch {}
            let d6 = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    a = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "ReprioritizeMilestoneIssuePayload",
                            kind: "LinkedField",
                            name: "reprioritizeMilestoneIssue",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Milestone",
                                    kind: "LinkedField",
                                    name: "milestone",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "id",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "updatedAt",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "reprioritizeMilestoneIssueMutation",
                        selections: a,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "reprioritizeMilestoneIssueMutation",
                        selections: a,
                    },
                    params: {
                        id: "7d5f7ac13ff9d53e475f834c63eda91c",
                        metadata: {},
                        name: "reprioritizeMilestoneIssueMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            d6.hash = "30aff72adf0f613394b97d1727b41dd0";
            let d9 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "OpenClosedMilestoneIssues",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "openIssueCount",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closedIssueCount",
                        storageKey: null,
                    },
                ],
                type: "Milestone",
                abstractKey: null,
            };
            function d8(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m = (0, iV.c)(25),
                    { milestoneRef: g } = e;
                m[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = d9), (m[0] = a))
                    : (a = m[0]);
                let p = (0, er.useFragment)(a, g);
                m[1] !== p?.openIssueCount
                    ? ((l = Math.abs(p?.openIssueCount || 0).toLocaleString()),
                      (m[1] = p?.openIssueCount),
                      (m[2] = l))
                    : (l = m[2]);
                let h = l;
                m[3] !== p?.closedIssueCount
                    ? ((n = Math.abs(
                          p?.closedIssueCount || 0
                      ).toLocaleString()),
                      (m[3] = p?.closedIssueCount),
                      (m[4] = n))
                    : (n = m[4]);
                let k = n;
                m[5] === Symbol.for("react.memo_cache_sentinel")
                    ? ((t = ""),
                      A.cg && (t = A.cg.location.pathname),
                      (m[5] = t))
                    : (t = m[5]);
                let f = `${t}?closed=1`,
                    [b] = (0, e7.o)(),
                    C = b.get("closed");
                m[6] === Symbol.for("react.memo_cache_sentinel")
                    ? ((i = ["mac"]), (m[6] = i))
                    : (i = m[6]);
                let S = (0, iT.X)(i),
                    F = (0, e7.Z)();
                m[7] !== S || m[8] !== F
                    ? ((s = (e, a) => {
                          (S ? e.metaKey : e.ctrlKey) ||
                              (e.preventDefault(), F(a ? t : f));
                      }),
                      (m[7] = S),
                      (m[8] = F),
                      (m[9] = s))
                    : (s = m[9]);
                let v = s,
                    L = A.KJ && "1" !== C;
                (m[10] !== v
                    ? ((r = (e) => v(e, !0)), (m[10] = v), (m[11] = r))
                    : (r = m[11]),
                    m[12] !== h || m[13] !== L || m[14] !== r
                        ? ((o = (0, y.jsx)(
                              "li",
                              {
                                  children: (0, y.jsx)(
                                      lO.L,
                                      {
                                          title: "Open",
                                          isSelected: L,
                                          count: h,
                                          href: t,
                                          onClick: r,
                                      },
                                      "open"
                                  ),
                              },
                              "section-filter-0"
                          )),
                          (m[12] = h),
                          (m[13] = L),
                          (m[14] = r),
                          (m[15] = o))
                        : (o = m[15]));
                let I = A.KJ && "1" === C;
                return (
                    m[16] !== v
                        ? ((u = (e) => v(e, !1)), (m[16] = v), (m[17] = u))
                        : (u = m[17]),
                    m[18] !== k || m[19] !== u || m[20] !== I
                        ? ((d = (0, y.jsx)(
                              "li",
                              {
                                  children: (0, y.jsx)(
                                      lO.L,
                                      {
                                          title: "Closed",
                                          isSelected: I,
                                          count: k,
                                          href: f,
                                          onClick: u,
                                      },
                                      "closed"
                                  ),
                              },
                              "section-filter-1"
                          )),
                          (m[18] = k),
                          (m[19] = u),
                          (m[20] = I),
                          (m[21] = d))
                        : (d = m[21]),
                    m[22] !== d || m[23] !== o
                        ? ((c = (0, y.jsx)("div", {
                              children: (0, y.jsxs)("ul", {
                                  className: `list-style-none ${(0, l7.$)(oG.tabsContainer)}`,
                                  children: [o, d],
                              }),
                          })),
                          (m[22] = d),
                          (m[23] = o),
                          (m[24] = c))
                        : (c = m[24]),
                    c
                );
            }
            d9.hash = "91b6ba0a2d4f55865eaf8fbec036f6bd";
            try {
                d8.displayName ||
                    (d8.displayName = "OpenClosedMilestoneIssues");
            } catch {}
            function ce(e) {
                let a,
                    l,
                    n = (0, iV.c)(6),
                    { repositoryRef: t, singleKeyShortcutsEnabled: i } = e;
                n[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = dH), (n[0] = a))
                    : (a = n[0]);
                let {
                    data: s,
                    loadNext: r,
                    hasNext: o,
                } = (0, er.usePaginationFragment)(a, t);
                return s.milestone
                    ? (n[1] !== s || n[2] !== o || n[3] !== r || n[4] !== i
                          ? ((l = (0, y.jsx)(ca, {
                                data: s,
                                milestone: s.milestone,
                                loadNext: r,
                                hasNext: o,
                                singleKeyShortcutsEnabled: i,
                                viewerCanPush: s.viewerCanPush,
                            })),
                            (n[1] = s),
                            (n[2] = o),
                            (n[3] = r),
                            (n[4] = i),
                            (n[5] = l))
                          : (l = n[5]),
                      l)
                    : null;
            }
            function ca(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m,
                    g,
                    p,
                    h,
                    k,
                    b,
                    C,
                    S,
                    F,
                    L,
                    I,
                    K,
                    N,
                    j,
                    R,
                    T,
                    P,
                    M,
                    D = (0, iV.c)(92),
                    {
                        data: V,
                        milestone: E,
                        loadNext: q,
                        hasNext: O,
                        singleKeyShortcutsEnabled: B,
                        viewerCanPush: $,
                    } = e;
                D[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = dz), (D[0] = a))
                    : (a = D[0]);
                let Q = (0, er.useFragment)(a, E);
                (D[1] !== V.id ||
                D[2] !== V.isArchived ||
                D[3] !== V.isDisabled ||
                D[4] !== V.isLocked ||
                D[5] !== V.name ||
                D[6] !== V.owner.login ||
                D[7] !== V.viewerCanPush
                    ? ((n = {
                          id: V.id,
                          name: V.name,
                          owner: V.owner.login,
                          is_archived: V.isArchived,
                          viewerCanPush: V.viewerCanPush,
                          isDisabled: V.isDisabled,
                          isLocked: V.isLocked,
                      }),
                      (D[1] = V.id),
                      (D[2] = V.isArchived),
                      (D[3] = V.isDisabled),
                      (D[4] = V.isLocked),
                      (D[5] = V.name),
                      (D[6] = V.owner.login),
                      (D[7] = V.viewerCanPush),
                      (D[8] = n))
                    : (n = D[8]),
                    (l = n));
                let [U, H] = (0, f.useState)(cg),
                    [z, W] = (0, f.useState)(),
                    { shiftKeyPressedRef: G } = (function () {
                        let e,
                            a,
                            l,
                            n = (0, iV.c)(3),
                            t = (0, f.useRef)(!1);
                        return (
                            n[0] === Symbol.for("react.memo_cache_sentinel")
                                ? ((e = () => {
                                      let e = (e) => (t.current = e.shiftKey),
                                          a = () => (t.current = !1);
                                      return (
                                          window.addEventListener("keydown", e),
                                          window.addEventListener("keyup", a),
                                          () => {
                                              (window.removeEventListener(
                                                  "keydown",
                                                  e
                                              ),
                                                  window.removeEventListener(
                                                      "keyup",
                                                      a
                                                  ));
                                          }
                                      );
                                  }),
                                  (a = []),
                                  (n[0] = e),
                                  (n[1] = a))
                                : ((e = n[0]), (a = n[1])),
                            (0, f.useEffect)(e, a),
                            n[2] === Symbol.for("react.memo_cache_sentinel")
                                ? ((l = { shiftKeyPressedRef: t }), (n[2] = l))
                                : (l = n[2]),
                            l
                        );
                    })();
                (D[9] !== V.search?.edges
                    ? ((i = V.search?.edges?.map(cm).filter(cc) || []),
                      (D[9] = V.search?.edges),
                      (D[10] = i))
                    : (i = D[10]),
                    (t = i));
                let Z = (0, er.useRelayEnvironment)(),
                    X = (0, e7.Z)();
                D[11] !== V.name ||
                D[12] !== V.owner.login ||
                D[13] !== Z ||
                D[14] !== X
                    ? ((s = async (e, a, l) => (
                          (0, lb.SC)("react"),
                          await lh(Z, V.owner.login, V.name, e),
                          X(a, l)
                      )),
                      (D[11] = V.name),
                      (D[12] = V.owner.login),
                      (D[13] = Z),
                      (D[14] = X),
                      (D[15] = s))
                    : (s = D[15]);
                let J = s,
                    [Y, ee] = (0, w.M)(
                        da.localStorageKeyBulkUpdateIssues,
                        null
                    ),
                    [ea, el] = (0, f.useState)(!1),
                    en =
                        l &&
                        l.viewerCanPush &&
                        !(l.isDisabled || l.isLocked || l.is_archived) &&
                        t.length < 100 &&
                        !ea;
                D[16] === Symbol.for("react.memo_cache_sentinel")
                    ? ((r = (e) => {
                          el(Array.from(e.values()).some(cd));
                      }),
                      (D[16] = r))
                    : (r = D[16]);
                let et = r;
                D[17] !== t
                    ? ((o = (e, a, l, n) => {
                          let i = t.findIndex((e) => e.id === a),
                              s = t.findIndex((e) => e.id === l);
                          for (
                              let a = Math.min(i, s);
                              a <= Math.max(i, s);
                              a++
                          ) {
                              let l = t[a];
                              (l && (n ? e.set(l.id, l) : e.delete(l.id)),
                                  et(e));
                          }
                      }),
                      (D[17] = t),
                      (D[18] = o))
                    : (o = D[18]);
                let ei = o;
                D[19] !== ei || D[20] !== U || D[21] !== z || D[22] !== G
                    ? ((u = (e, a, l) => {
                          let n = new Map(U);
                          (G.current && z
                              ? ei(n, z.id, e, l)
                              : (l ? n.set(e, a) : n.delete(e), et(n)),
                              H(n),
                              W({ id: e, node: a }));
                      }),
                      (D[19] = ei),
                      (D[20] = U),
                      (D[21] = z),
                      (D[22] = G),
                      (D[23] = u))
                    : (u = D[23]);
                let es = u,
                    [eo, eu] = (0, f.useState)(t),
                    ed = `${A.fV.origin}/${V.owner.login}/${V.name}`,
                    ec = `${ed}/issues/?q=is%3Aissue%20state%3Aopen%20no%3Amilestone`,
                    em = `/${V.owner.login}/${V.name}/milestone/${Q.number}`,
                    eg = A.fV.pathname,
                    [ep] = (0, _.ok)(),
                    ey = ep.get("closed"),
                    eh = em === eg && "1" === ey;
                D[24] === Symbol.for("react.memo_cache_sentinel")
                    ? ((d = function (e) {
                          return "Issue" === e.__typename
                              ? e.state
                              : "PullRequest" === e.__typename
                                ? e.closed
                                    ? "CLOSED"
                                    : "OPEN"
                                : null;
                      }),
                      (D[24] = d))
                    : (d = D[24]);
                let ek = d;
                (D[25] !== eh || D[26] !== t
                    ? ((c = () => {
                          eu((e) => {
                              let a = eh ? "CLOSED" : "OPEN",
                                  l = e.filter((e) => ek(e) === a),
                                  n = new Set(l.map(cr));
                              return [
                                  ...l,
                                  ...t.filter(
                                      (e) =>
                                          ek(e) === a &&
                                          !n.has(`${e.__typename}:${e.id}`)
                                  ),
                              ];
                          });
                      }),
                      (m = [t, eh]),
                      (D[25] = eh),
                      (D[26] = t),
                      (D[27] = c),
                      (D[28] = m))
                    : ((c = D[27]), (m = D[28])),
                    (0, f.useEffect)(c, m));
                let { addToast: ef } = (0, x.Y6)();
                D[29] !== ef ||
                D[30] !== Z ||
                D[31] !== Q.id ||
                D[32] !== Q.updatedAt ||
                D[33] !== eo
                    ? ((g = (e) => {
                          let {
                              dragMetadata: a,
                              dropMetadata: l,
                              isBefore: n,
                          } = e;
                          if (a.id === l?.id) return;
                          let t = eo.find((e) => e.id === a.id),
                              i = eo.findIndex((e) => e.id === l?.id),
                              s = eo[i];
                          if (t && s) {
                              let e;
                              ((e = n ? (i > 0 ? eo[i - 1]?.id : null) : s.id),
                                  eu(
                                      eo.reduce(
                                          (e, a) => (
                                              t.id === a.id ||
                                                  (a.id !== l?.id
                                                      ? e.push(a)
                                                      : n
                                                        ? e.push(t, a)
                                                        : e.push(a, t)),
                                              e
                                          ),
                                          []
                                      )
                                  ),
                                  (function ({
                                      environment: e,
                                      input: a,
                                      onError: l,
                                      onCompleted: n,
                                  }) {
                                      (0, er.commitMutation)(e, {
                                          mutation: d6,
                                          variables: { input: a },
                                          onError: (e) => l && l(e),
                                          onCompleted: (e) => n && n(e),
                                      });
                                  })({
                                      environment: Z,
                                      input: {
                                          id: t.id,
                                          milestoneId: Q.id,
                                          timestamp: Q.updatedAt,
                                          prevId: e,
                                      },
                                      onError: (e) => {
                                          e &&
                                              (Array.isArray(e.cause) &&
                                              e.cause[0] &&
                                              "UNPROCESSABLE" ===
                                                  e.cause[0].type
                                                  ? ef({
                                                        type: "info",
                                                        message:
                                                            e.cause[0].message,
                                                        role: "alert",
                                                    })
                                                  : ef({
                                                        type: "error",
                                                        message:
                                                            "Error while updating milestone issue ordering",
                                                        role: "alert",
                                                    }),
                                              eu(eo));
                                      },
                                  }));
                          }
                      }),
                      (D[29] = ef),
                      (D[30] = Z),
                      (D[31] = Q.id),
                      (D[32] = Q.updatedAt),
                      (D[33] = eo),
                      (D[34] = g))
                    : (g = D[34]);
                let eb = g,
                    eC = V.search?.issueCount || 0,
                    eS = $ && eC < da.maxPrioritizableItemCount && !eh,
                    eF = da.issuesPageSize;
                if (D[35] !== eo) {
                    h = [];
                    for (let e = 0; e < eo.length; e += eF)
                        h.push(eo.slice(e, e + eF));
                    ((D[35] = eo), (D[36] = h));
                } else h = D[36];
                ((p = h),
                    D[37] !== U ||
                    D[38] !== J ||
                    D[39] !== es ||
                    D[40] !== p ||
                    D[41] !== l ||
                    D[42] !== eS
                        ? ((k = p.map((e) =>
                              (0, y.jsx)(
                                  d5,
                                  {
                                      orderedNodes: e,
                                      checkedItems: U,
                                      itemSelected: es,
                                      getMetadataHref: cu,
                                      getAdditiveMetadataHref: co,
                                      withDragAndDrop: eS,
                                      scopedRepository: l,
                                      handleNavigate: J,
                                  },
                                  e[0] ? e[0].id : "my_key"
                              )
                          )),
                          (D[37] = U),
                          (D[38] = J),
                          (D[39] = es),
                          (D[40] = p),
                          (D[41] = l),
                          (D[42] = eS),
                          (D[43] = k))
                        : (k = D[43]));
                let ev = k,
                    eL = V.isInOrganization;
                (D[44] !== Q
                    ? ((b = (0, y.jsx)(d8, { milestoneRef: Q })),
                      (D[44] = Q),
                      (D[45] = b))
                    : (b = D[45]),
                    D[46] !== t
                        ? ((C = t.filter(Boolean).reduce(cs, [])),
                          (D[46] = t),
                          (D[47] = C))
                        : (C = D[47]),
                    D[48] !== Y ||
                    D[49] !== U ||
                    D[50] !== V.isInOrganization ||
                    D[51] !== eC ||
                    D[52] !== l ||
                    D[53] !== ee ||
                    D[54] !== B ||
                    D[55] !== b ||
                    D[56] !== C ||
                    D[57] !== en
                        ? ((S = (0, y.jsx)(d4, {
                              checkedItems: U,
                              scopedRepository: l,
                              isInOrganization: eL,
                              sectionFilters: b,
                              issueCount: eC,
                              issueNodes: C,
                              setCheckedItems: H,
                              updateListHasPRs: et,
                              useBulkActions: en,
                              singleKeyShortcutsEnabled: B,
                              bulkJobId: Y,
                              setBulkJobId: ee,
                          })),
                          (D[48] = Y),
                          (D[49] = U),
                          (D[50] = V.isInOrganization),
                          (D[51] = eC),
                          (D[52] = l),
                          (D[53] = ee),
                          (D[54] = B),
                          (D[55] = b),
                          (D[56] = C),
                          (D[57] = en),
                          (D[58] = S))
                        : (S = D[58]));
                let eI = S;
                D[59] !== q
                    ? ((F = () => {
                          q(da.issuesPageSize);
                      }),
                      (D[59] = q),
                      (D[60] = F))
                    : (F = D[60]);
                let e_ = F;
                e: {
                    if (eC > da.issuesPageSize) {
                        let e;
                        (D[61] !== O || D[62] !== e_
                            ? ((e = O
                                  ? (0, y.jsx)("div", {
                                        className: oG.loadMoreButtonWrapper,
                                        children: (0, y.jsx)(lT.Q, {
                                            variant: "invisible",
                                            onClick: e_,
                                            className: oG.loadMoreButton,
                                            "data-testid": "load-more-button",
                                            children: (0, y.jsx)("span", {
                                                children: "Load more",
                                            }),
                                        }),
                                    })
                                  : null),
                              (D[61] = O),
                              (D[62] = e_),
                              (D[63] = e))
                            : (e = D[63]),
                            (L = e));
                        break e;
                    }
                    L = null;
                }
                let ex = L;
                (D[64] !== eo
                    ? ((I = eo.map(ci)), (D[64] = eo), (D[65] = I))
                    : (I = D[65]),
                    D[66] !== eo
                        ? ((K = (e, a) => {
                              let l = eo[a];
                              if (!l) return null;
                              let n = null;
                              return ("Issue" === l.__typename &&
                                  (n = (0, y.jsx)(ip, {
                                      metadataRef: null,
                                      issueKey: l,
                                      getMetadataHref: ct,
                                      getAdditiveMetadataHref: cn,
                                      onSelectRow: v.l,
                                      isActive: !1,
                                      sortingItemSelected: "",
                                      onNavigate: v.l,
                                  })),
                              "PullRequest" === l.__typename)
                                  ? (0, y.jsx)(th, {
                                        metadataRef: null,
                                        pullRequestKey: l,
                                        includeGitDataFromMainQuery: !1,
                                        getMetadataHref: cl,
                                        onSelectRow: v.l,
                                        isActive: !1,
                                        sortingItemSelected: "",
                                        onNavigate: v.l,
                                    })
                                  : (0, y.jsx)(
                                        of.BS.Item,
                                        {
                                            hideTrigger: !0,
                                            as: "li",
                                            index: a,
                                            id: "dragItem",
                                            title: "",
                                            isDragOverlay: !0,
                                            containerStyle: {
                                                display: "flex",
                                                width: "100%",
                                            },
                                            style: { listStyle: "none" },
                                            children: n,
                                        },
                                        "dragItem"
                                    );
                          }),
                          (D[66] = eo),
                          (D[67] = K))
                        : (K = D[67]),
                    D[68] !== eb || D[69] !== I || D[70] !== K
                        ? ((N = {
                              items: I,
                              onDrop: eb,
                              className: oG.dndList,
                              direction: "vertical",
                              enableTouch: !0,
                              renderOverlay: K,
                          }),
                          (D[68] = eb),
                          (D[69] = I),
                          (D[70] = K),
                          (D[71] = N))
                        : (N = D[71]));
                let eK = N;
                D[72] === Symbol.for("react.memo_cache_sentinel")
                    ? ((j = (0, nk.G)("repository-milestone-list-view")),
                      (D[72] = j))
                    : (j = D[72]);
                let ew = eS ? of.BS : "ul";
                D[73] !== eK || D[74] !== eS
                    ? ((R = eS ? eK : {}),
                      (D[73] = eK),
                      (D[74] = eS),
                      (D[75] = R))
                    : (R = D[75]);
                let eN = eo.length > 0 && ev;
                return (
                    D[76] !== eh || D[77] !== ec || D[78] !== ev.length
                        ? ((T =
                              0 === ev.length &&
                              (0, y.jsx)(dG, {
                                  selected: eh ? "closed" : "open",
                                  descriptionUrl: ec,
                              })),
                          (D[76] = eh),
                          (D[77] = ec),
                          (D[78] = ev.length),
                          (D[79] = T))
                        : (T = D[79]),
                    D[80] !== U.size ||
                    D[81] !== eC ||
                    D[82] !== eI ||
                    D[83] !== ew ||
                    D[84] !== R ||
                    D[85] !== eN ||
                    D[86] !== T ||
                    D[87] !== eS
                        ? ((P = (0, y.jsx)("div", {
                              className: oG.milestoneListWrapper,
                              "data-hpc": !0,
                              ...j,
                              children: (0, y.jsxs)(nt.u, {
                                  title: "",
                                  totalCount: eC,
                                  selectedCount: U.size,
                                  titleHeaderTag: "h2",
                                  isSelectable: !0,
                                  hasDragHandle: eS,
                                  metadata: eI,
                                  singularUnits: "issue",
                                  pluralUnits: "issues",
                                  as: ew,
                                  ...R,
                                  children: [eN, T],
                              }),
                          })),
                          (D[80] = U.size),
                          (D[81] = eC),
                          (D[82] = eI),
                          (D[83] = ew),
                          (D[84] = R),
                          (D[85] = eN),
                          (D[86] = T),
                          (D[87] = eS),
                          (D[88] = P))
                        : (P = D[88]),
                    D[89] !== ex || D[90] !== P
                        ? ((M = (0, y.jsxs)(y.Fragment, { children: [P, ex] })),
                          (D[89] = ex),
                          (D[90] = P),
                          (D[91] = M))
                        : (M = D[91]),
                    M
                );
            }
            function cl() {
                return "";
            }
            function cn() {
                return "";
            }
            function ct() {
                return "";
            }
            function ci(e) {
                return { id: e.id, title: "" };
            }
            function cs(e, a) {
                return (e.push(a), e);
            }
            function cr(e) {
                return `${e.__typename}:${e.id}`;
            }
            function co(e, a) {
                return ls("is:issue state:open", !0, e, a);
            }
            function cu(e, a) {
                return li("is:issue state:open", !0, e, a);
            }
            function cd(e) {
                return "PullRequest" === e.__typename;
            }
            function cc(e) {
                return !!e;
            }
            function cm(e) {
                return e?.node &&
                    ("PullRequest" === e.node.__typename ||
                        "Issue" === e.node.__typename)
                    ? e.node
                    : null;
            }
            function cg() {
                return new Map();
            }
            try {
                ce.displayName || (ce.displayName = "MilestoneIssuesList");
            } catch {}
            try {
                ca.displayName ||
                    (ca.displayName = "MilestoneIssuesListInternal");
            } catch {}
            function cp(e) {
                let a,
                    l = (0, iV.c)(2),
                    { pageQueryRef: n } = e,
                    t = (0, ly.usePreloadedQuery)(dN, n);
                return t.repository
                    ? (l[0] !== t.repository
                          ? ((a = (0, y.jsx)(cy, { repository: t.repository })),
                            (l[0] = t.repository),
                            (l[1] = a))
                          : (a = l[1]),
                      a)
                    : null;
            }
            function cy(e) {
                let a,
                    l,
                    n,
                    t,
                    i,
                    s,
                    r,
                    o,
                    u,
                    d,
                    c,
                    m = (0, iV.c)(25),
                    { repository: g, optionConfig: p } = e;
                m[0] === Symbol.for("react.memo_cache_sentinel")
                    ? ((a = dj), (m[0] = a))
                    : (a = m[0]);
                let h = (0, er.useFragment)(a, g),
                    [k, b] = (0, w.M)(da.localStorageKeyBulkUpdateIssues, null);
                if (
                    (m[1] !== h.milestone || m[2] !== h.nameWithOwner
                        ? ((l = () => {
                              let e = "Milestone";
                              (h.milestone &&
                                  h.nameWithOwner &&
                                  (e = `${h.milestone.title} \xb7 Milestone #${h.milestone.number} \xb7 ${h.nameWithOwner}`),
                                  (0, s7.D)(e));
                          }),
                          (n = [h.milestone, h.nameWithOwner]),
                          (m[1] = h.milestone),
                          (m[2] = h.nameWithOwner),
                          (m[3] = l),
                          (m[4] = n))
                        : ((l = m[3]), (n = m[4])),
                    (0, f.useEffect)(l, n),
                    !h.milestone)
                )
                    return null;
                (m[5] === Symbol.for("react.memo_cache_sentinel")
                    ? ((t = (0, y.jsx)(oZ, {
                          title: oQ.milestoneError,
                          message: oQ.milestoneErrorMessage,
                      })),
                      (m[5] = t))
                    : (t = m[5]),
                    m[6] !== h || m[7] !== p
                        ? ((i = (0, y.jsx)(dE, {
                              repositoryRef: h,
                              optionConfig: p,
                          })),
                          (m[6] = h),
                          (m[7] = p),
                          (m[8] = i))
                        : (i = m[8]),
                    m[9] !== h.milestone
                        ? ((s = (0, y.jsx)(d$, { milestoneRef: h.milestone })),
                          (m[9] = h.milestone),
                          (m[10] = s))
                        : (s = m[10]),
                    m[11] === Symbol.for("react.memo_cache_sentinel")
                        ? ((r = (0, y.jsx)(oZ, {
                              title: oQ.milestoneIssuesError,
                              message: oQ.milestoneIssuesErrorMessage,
                          })),
                          (m[11] = r))
                        : (r = m[11]));
                let C = p?.singleKeyShortcutsEnabled;
                return (
                    m[12] !== h || m[13] !== C
                        ? ((o = (0, y.jsx)(ih.t, {
                              fallback: r,
                              children: (0, y.jsx)(ce, {
                                  repositoryRef: h,
                                  singleKeyShortcutsEnabled: C,
                              }),
                          })),
                          (m[12] = h),
                          (m[13] = C),
                          (m[14] = o))
                        : (o = m[14]),
                    m[15] !== s || m[16] !== o
                        ? ((u = (0, y.jsxs)("div", {
                              className: oG.middlePaneGrid,
                              children: [s, o],
                          })),
                          (m[15] = s),
                          (m[16] = o),
                          (m[17] = u))
                        : (u = m[17]),
                    m[18] !== u || m[19] !== i
                        ? ((d = (0, y.jsx)(aQ, {
                              contentAs: "div",
                              resizeable: !1,
                              leftPaneWidth: "small",
                              middlePane: (0, y.jsx)("div", {
                                  className: oG.middlePaneWrapper,
                                  children: (0, y.jsxs)(ih.t, {
                                      fallback: t,
                                      children: [i, u],
                                  }),
                              }),
                          })),
                          (m[18] = u),
                          (m[19] = i),
                          (m[20] = d))
                        : (d = m[20]),
                    m[21] !== k || m[22] !== b || m[23] !== d
                        ? ((c = (0, y.jsx)(oo, {
                              bulkJobId: k,
                              setBulkJobId: b,
                              children: d,
                          })),
                          (m[21] = k),
                          (m[22] = b),
                          (m[23] = d),
                          (m[24] = c))
                        : (c = m[24]),
                    c
                );
            }
            try {
                (r = (e) => {
                    let a,
                        l,
                        n = (0, iV.c)(3),
                        { queryRef: t } = e,
                        [i] = (0, ly.useQueryLoader)(dN, t);
                    return i
                        ? (n[0] === Symbol.for("react.memo_cache_sentinel")
                              ? ((a = (0, y.jsx)("div", {
                                    children: "Loading...",
                                })),
                                (n[0] = a))
                              : (a = n[0]),
                          n[1] !== i
                              ? ((l = (0, y.jsx)(f.Suspense, {
                                    fallback: a,
                                    children: (0, y.jsx)(cp, {
                                        pageQueryRef: i,
                                    }),
                                })),
                                (n[1] = i),
                                (n[2] = l))
                              : (l = n[2]),
                          l)
                        : null;
                }).displayName || (r.displayName = "RepositoryMilestone");
            } catch {}
            try {
                cp.displayName ||
                    (cp.displayName = "RepositoryMilestoneContent");
            } catch {}
            try {
                cy.displayName ||
                    (cy.displayName = "RepositoryMilestoneInternal");
            } catch {}
            let ch = ({ queries: { pageQuery: e } }) => {
                let { queryRef: a, loadQuery: l } = aa(e, ez);
                return a
                    ? (0, y.jsx)(as, {
                          category: "Repository Milestone Show",
                          children: (0, y.jsx)(ck, {
                              pageQueryRef: a,
                              loadQuery: l,
                          }),
                      })
                    : null;
            };
            function ck({ pageQueryRef: e }) {
                let a = (0, er.usePreloadedQuery)(ez, e),
                    { setCurrentViewId: l } = eM();
                return ((0, f.useEffect)(() => {
                    l(F.repository);
                }, [e, l]),
                a.repository)
                    ? (0, y.jsx)(cf, { repository: a.repository })
                    : (reportError(
                          Error(
                              `Could not find repository when loading TemplateList for ${A.fV?.href.toString()}`
                          )
                      ),
                      (0, y.jsx)("div", { children: "Repository not found" }));
            }
            function cf({ repository: e }) {
                let a = (0, er.useFragment)(dw, e),
                    { current_user_settings: l } = (0, I.X)(),
                    n = {
                        useMonospaceFont: l.use_monospace_font,
                        pasteUrlsAsPlainText: l.paste_url_link_as_plain_text,
                        singleKeyShortcutsEnabled: l.use_single_key_shortcut,
                    };
                return (0, y.jsx)(cy, { repository: a, optionConfig: n });
            }
            try {
                ck.displayName ||
                    (ck.displayName = "RepositoryMilestoneContent");
            } catch {}
            try {
                cf.displayName ||
                    (cf.displayName = "RepositoryMilestonePageContentInternal");
            } catch {}
            let cb = (e, a) => {
                    if (Object.keys(a.pathParams).length > 0) {
                        let l = a.searchParams.get("q"),
                            n = `${l || G.query}`,
                            t = en.query({
                                author: a.pathParams.author,
                                assignee: a.pathParams.assignee,
                                mentioned: a.pathParams.mentioned,
                                label: a.pathParams.label,
                            });
                        ((e.query = lY(t && !l ? `${n} ${t}` : n, {
                            owner: a.pathParams.owner,
                            name: a.pathParams.repo,
                        })),
                            e_(a.searchParams, e),
                            (e.owner = a.pathParams.owner),
                            (e.name = a.pathParams.repo),
                            (e.includeReactions = !!l && l0(l)));
                    }
                    return e;
                },
                cC = {
                    "/:owner/:name/issues/new": (e, a) => {
                        let l = a.searchParams.get("assignees");
                        l && ((e.assigneeLogins = l), (e.withAssignees = !0));
                        let n = a.searchParams.get("labels");
                        n && ((e.labelNames = n), (e.withLabels = !0));
                        let t = a.searchParams.get("milestone");
                        t && ((e.milestoneTitle = t), (e.withMilestone = !0));
                        let i = a.searchParams.get("projects");
                        if (a && i) {
                            let l = ((e, a) =>
                                e && a
                                    ? e
                                          .split(",")
                                          .map((e) => {
                                              let [l, n] = e.split("/");
                                              if (l === a && n) {
                                                  let e = parseInt(n);
                                                  return isNaN(e) || e < 0
                                                      ? void 0
                                                      : e;
                                              }
                                          })
                                          .filter((e) => void 0 !== e)
                                          .splice(0, 20)
                                    : [])(i, a.pathParams.owner);
                            l.length > 0 &&
                                ((e.projectNumbers = l), (e.withProjects = !0));
                        }
                        let s = a.searchParams.get("type");
                        s && ((e.type = s), (e.withType = !0));
                        let r = a.searchParams.get(
                            "created_from_discussion_number"
                        );
                        if (r) {
                            let a = parseInt(r, 10);
                            ((e.discussionNumber = cS(r) ? a : 0),
                                (e.includeDiscussion = cS(r) && !!a));
                        }
                        let o = a.searchParams.get("template");
                        return (
                            o &&
                                ((e.templateFilter = o), (e.withTemplate = !0)),
                            (e.withTriagePermission =
                                e.withType || e.withProjects || !1),
                            e
                        );
                    },
                    "/:owner/:name/issues/new/choose": (e) => e,
                    "/:owner/:repo/issues/created_by/app/:author": (e, a) => {
                        let l = { ...a };
                        return (
                            (l.pathParams = {
                                ...a.pathParams,
                                author: `app/${a.pathParams.author}`,
                            }),
                            cb(e, l)
                        );
                    },
                    "/:owner/:repo/milestone/:number": (e, a) => {
                        ((e.id = G.id),
                            (e.first = da.issuesPageSize),
                            (e.owner = a.pathParams.owner),
                            (e.name = a.pathParams.repo));
                        let l = a.pathParams.number,
                            n = "1" === a.searchParams.get("closed");
                        e.skip = 0;
                        let t = a.searchParams.get("page");
                        if (
                            (t &&
                                cS(t) &&
                                parseInt(t, 10) > 1 &&
                                (e.skip =
                                    (parseInt(t, 10) - 1) * da.issuesPageSize),
                            l)
                        ) {
                            let a = parseInt(l, 10);
                            ((e.number = cS(l) ? a : 0),
                                (e.query = `state:${n ? "closed" : "open"} milestone-number:${e.number} archived:false sort:milestone_prio-desc`));
                        }
                        return e;
                    },
                    "/:owner/:repo/milestones": (e, a) => {
                        ((e.owner = a.pathParams.owner),
                            (e.name = a.pathParams.repo),
                            (e.state =
                                "closed" === a.searchParams.get("state")
                                    ? "CLOSED"
                                    : "OPEN"));
                        let l = a.searchParams.get("sort"),
                            n = a.searchParams.get("direction");
                        return (
                            l &&
                                n &&
                                ("due_date" === l &&
                                    (e.orderField = "DUE_DATE"),
                                "completeness" === l &&
                                    (e.orderField = "COMPLETED"),
                                "title" === l &&
                                    (e.orderField = "ALPHABETICAL"),
                                "count" === l && (e.orderField = "ISSUES"),
                                "asc" === n
                                    ? (e.orderDirection = "ASC")
                                    : (e.orderDirection = "DESC")),
                            e
                        );
                    },
                    "/:owner/:repo/milestones/new": (e, a) => (
                        (e.owner = a.pathParams.owner),
                        (e.name = a.pathParams.repo),
                        e
                    ),
                    "/:owner/:repo/milestones/:number/edit": (e, a) => {
                        let l = a.pathParams.number;
                        if (
                            ((e.owner = a.pathParams.owner),
                            (e.name = a.pathParams.repo),
                            l)
                        ) {
                            let a = parseInt(l, 10);
                            e.number = cS(l) ? a : 0;
                        }
                        return e;
                    },
                    "/:owner/:repo/labels": (e, a) => {
                        ((e.owner = a.pathParams.owner),
                            (e.name = a.pathParams.repo),
                            (e.first = uE.labelsPageSize),
                            (e.skip = 0));
                        let l = a.searchParams.get("page");
                        l &&
                            cS(l) &&
                            parseInt(l, 10) > 1 &&
                            (e.skip =
                                (parseInt(l, 10) - 1) * uE.labelsPageSize);
                        let n = a.searchParams.get("sort");
                        if (n) {
                            let [a, l] = n.split("-");
                            "name" === a
                                ? ((e.orderField = "NAME"),
                                  (e.orderDirection =
                                      "asc" === l ? "ASC" : "DESC"))
                                : "count" === a &&
                                  ((e.orderField = "ISSUE_COUNT"),
                                  (e.orderDirection =
                                      "asc" === l ? "ASC" : "DESC"));
                        }
                        let t = a.searchParams.get("q");
                        return (t && (e.query = l1(t)), e);
                    },
                    "/:owner/:repo/labels/:label": (e, a) => {
                        if (Object.keys(a.pathParams).length > 0) {
                            let l = a.searchParams.get("q"),
                                n = eN(
                                    L.Ds.open,
                                    [a.pathParams.label],
                                    "label"
                                );
                            ((e.query = lY(l?.trim() || n, {
                                owner: a.pathParams.owner,
                                name: a.pathParams.repo,
                            })),
                                e_(a.searchParams, e),
                                (e.owner = a.pathParams.owner),
                                (e.name = a.pathParams.repo),
                                (e.includeReactions = !1));
                        }
                        return e;
                    },
                    "/:owner/:repo/issues": cb,
                    "/:owner/:repo/issues/created_by/:author": cb,
                    "/:owner/:repo/issues/assigned/:assignee": cb,
                    "/:owner/:repo/issues/mentioned/:mentioned": cb,
                    "/issues/:id": (e, a, l) => {
                        let n;
                        if ((a && (n = a.pathParams.id), n && l)) {
                            let t = a.searchParams.get("q"),
                                i = l.getStore().getSource().get(n);
                            i &&
                                (t
                                    ? ((e.query = l1(t)),
                                      (e.includeReactions = l0(t)))
                                    : i.query &&
                                      ((e.query = l1(`${i.query}`)),
                                      (e.includeReactions = l0(`${i.query}`))));
                        }
                        return (e_(a.searchParams, e), e);
                    },
                    "/:owner/:repo/issues/:number": (e, a) => {
                        ((e.id = G.id), (e.count = 15));
                        let l = a.searchParams.get("timeline_page");
                        if (l && cS(l)) {
                            let a = parseInt(l, 10);
                            a > 0 &&
                                ((e.skip = 15 + (a - 1) * 150),
                                (e.count = 150));
                        }
                        return e;
                    },
                    "/issues": (e, a) => {
                        let l = a.searchParams.get("q");
                        return (
                            l &&
                                ((e.query = l1(l)),
                                (e.includeReactions = l0(l))),
                            e_(a.searchParams, e),
                            e
                        );
                    },
                    "/issues/assigned": (e, a) => {
                        let l = a.searchParams.get("q");
                        return (
                            (e.query = l ? l1(l) : L.Ds.assignedToMe),
                            e_(a.searchParams, e),
                            e
                        );
                    },
                    "/issues/mentioned": (e, a) => {
                        let l = a.searchParams.get("q");
                        return (
                            (e.query = l ? l1(l) : L.Ds.mentioned),
                            e_(a.searchParams, e),
                            e
                        );
                    },
                    "/issues/recent": (e, a) => (
                        (e.query = l1(
                            a.searchParams.get("q") || L.Ds.recentActivity
                        )),
                        e_(a.searchParams, e),
                        e
                    ),
                    "/issues/created": (e, a) => {
                        let l = a.searchParams.get("q");
                        return (
                            (e.query = l ? l1(l) : L.Ds.createdByMe),
                            e_(a.searchParams, e),
                            e
                        );
                    },
                },
                cS = (e) => /^\s*-?\d+\s*$/.test(e),
                cF = [d.A.params.name, o.A.params.name, c.params.name],
                cv = (e) => {
                    (e?.persistedQueryName &&
                        cF.includes(e?.persistedQueryName) &&
                        "SAML error" === e.errorMessage) ||
                        cL();
                },
                cL = () => {
                    let e = ["reload", "1"],
                        a = new URL(
                            window.location.href,
                            window.location.origin
                        );
                    a.searchParams.has(...e) ||
                        (a.searchParams.set(...e), window.location.assign(a));
                };
            (0, m.o)("issues-react", () => {
                let e = (0, g.E7)();
                (((e) => {
                    let a = {};
                    for (let e of [ee, ea, Z, ...et])
                        a[e.id] = {
                            __typename: "KnownShortcut",
                            __id: e.id,
                            ...e,
                        };
                    for (let e of [
                        "client:__type:KnownShortcut",
                        "client:__type:TeamSearchShortcut",
                        "client:__type:SearchShortcut",
                    ])
                        a[e] = {
                            __typename: "__TypeSchema",
                            __id: e,
                            __isShortcutable: !0,
                        };
                    e.getStore().publish(new eG.RecordSource(a));
                })(e),
                    (function ({ environment: e }) {
                        (0, g.SD)({
                            environment: e,
                            query: eW,
                            variables: { ids: H },
                        }).subscribe({});
                    })({ environment: e }));
                let a = { 404: { AUTHENTICATION: cL }, 200: { FORBIDDEN: cv } },
                    l = {
                        componentLoader: async () => {
                            throw Error("This method should not be called");
                        },
                        fallback: "",
                        relayEnvironment: e,
                    };
                return {
                    App: eV,
                    routes: [
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:name/issues/new",
                            resourceName: "IssueRepoNew",
                            title: "New Issue",
                            Component: aM,
                            transformVariables: cC["/:owner/:name/issues/new"],
                            queryConfigs: {
                                pageQuery: {
                                    concreteRequest: eZ,
                                    variableMappers: (e) => ({
                                        owner: e.pathParams.owner,
                                        name: e.pathParams.name,
                                    }),
                                },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:name/issues/new/choose",
                            resourceName: "IssueRepoNewChoose",
                            title: "Choose an Issue Template",
                            Component: ao,
                            transformVariables:
                                cC["/:owner/:name/issues/new/choose"],
                            queryConfigs: {
                                pageQuery: {
                                    concreteRequest: eX,
                                    variableMappers: (e) => ({
                                        owner: e.pathParams.owner,
                                        name: e.pathParams.name,
                                    }),
                                },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/issues/assigned",
                            resourceName: "ClientSideView",
                            title: "Assigned to me",
                            Component: oa,
                            transitionType: "transition-while-fetch",
                            transformVariables: cC["/issues/assigned"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eB },
                                customViewsQuery: { concreteRequest: eE },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/issues/mentioned",
                            resourceName: "ClientSideView",
                            title: "Mentioned",
                            Component: oa,
                            transitionType: "transition-while-fetch",
                            transformVariables: cC["/issues/mentioned"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eB },
                                customViewsQuery: { concreteRequest: eE },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/issues/created",
                            resourceName: "ClientSideView",
                            title: "Created by me",
                            Component: oa,
                            transitionType: "transition-while-fetch",
                            transformVariables: cC["/issues/created"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eB },
                                customViewsQuery: { concreteRequest: eE },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/issues/recent",
                            resourceName: "ClientSideView",
                            title: "Recent Activity",
                            Component: oa,
                            transitionType: "transition-while-fetch",
                            transformVariables: cC["/issues/recent"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eB },
                                customViewsQuery: { concreteRequest: eE },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/issues/:number",
                            resourceName: "IssueShow",
                            title: "Issue",
                            Component: oD,
                            transformVariables:
                                cC["/:owner/:repo/issues/:number"],
                            queryConfigs: {
                                issueViewerViewQuery: {
                                    concreteRequest: u.A,
                                    variableMappers: (e) => ({
                                        owner: e.pathParams.owner,
                                        repo: e.pathParams.repo,
                                        number: e.pathParams.number
                                            ? parseInt(e.pathParams.number)
                                            : void 0,
                                    }),
                                },
                            },
                            maxAge: 10,
                            errorCallbacks: a,
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/issues",
                            resourceName: "IssueRepoIndex",
                            title: "Repo Issues",
                            Component: oN,
                            transformVariables: cC["/:owner/:repo/issues"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eQ },
                            },
                            errorCallbacks: a,
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/issues/:id",
                            resourceName: "View",
                            title: "View",
                            Component: rY,
                            transitionType: "transition-while-fetch",
                            transformVariables: cC["/issues/:id"],
                            queryConfigs: {
                                currentViewQuery: {
                                    concreteRequest: eq,
                                    variableMappers: (e) => ({
                                        id: e.pathParams.id,
                                    }),
                                },
                                pageQuery: { concreteRequest: eO },
                                customViewsQuery: { concreteRequest: eE },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/issues",
                            resourceName: "IssuesIndex",
                            title: "Issues",
                            Component: on,
                            transformVariables: cC["/issues"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: e$ },
                                customViewsQuery: { concreteRequest: eE },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/issues/created_by/:author",
                            resourceName: "IssueRepoIndex",
                            title: "Repo Issues",
                            Component: oN,
                            transformVariables:
                                cC["/:owner/:repo/issues/created_by/:author"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eQ },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/issues/created_by/app/:author",
                            resourceName: "IssueRepoIndex",
                            title: "Repo Issues",
                            Component: oN,
                            transformVariables:
                                cC[
                                    "/:owner/:repo/issues/created_by/app/:author"
                                ],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eQ },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/issues/assigned/:assignee",
                            resourceName: "IssueRepoIndex",
                            title: "Repo Issues",
                            Component: oN,
                            transformVariables:
                                cC["/:owner/:repo/issues/assigned/:assignee"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eQ },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/milestone/:number",
                            resourceName: "RepoMilestoneShow",
                            title: "",
                            Component: ch,
                            transformVariables:
                                cC["/:owner/:repo/milestone/:number"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: ez },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/milestones",
                            resourceName: "RepoMilestoneIndex",
                            title: "Milestone Index",
                            Component: d_,
                            transformVariables: cC["/:owner/:repo/milestones"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eH },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/milestones/new",
                            resourceName: "RepoMilestoneNew",
                            title: "New Milestone",
                            Component: ul,
                            transformVariables:
                                cC["/:owner/:repo/milestones/new"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: o7 },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/milestones/:number/edit",
                            resourceName: "RepoMilestoneEdit",
                            title: "Edit Milestone",
                            Component: o3,
                            transformVariables:
                                cC["/:owner/:repo/milestones/:number/edit"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: oV },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/labels",
                            resourceName: "RepoLabelsIndex",
                            title: "Labels Index",
                            Component: u4,
                            transformVariables: cC["/:owner/:repo/labels"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eU },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/issues/labels",
                            resourceName: "RepoLabelsIndex",
                            title: "Labels Index",
                            Component: u4,
                            transformVariables: cC["/:owner/:repo/labels"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eU },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/issues/mentioned/:mentioned",
                            resourceName: "IssueRepoIndex",
                            title: "Repo Issues",
                            Component: oN,
                            transformVariables:
                                cC["/:owner/:repo/issues/mentioned/:mentioned"],
                            queryConfigs: {
                                pageQuery: { concreteRequest: eQ },
                            },
                        }),
                        (0, p.X)({
                            ...l,
                            path: "/:owner/:repo/labels/:label",
                            transformVariables:
                                cC["/:owner/:repo/labels/:label"],
                            resourceName: "IssueLabelIndex",
                            title: "Label Issues",
                            Component: oN,
                            queryConfigs: {
                                pageQuery: { concreteRequest: eQ },
                            },
                        }),
                    ],
                };
            });
        },
        77755: (e, a, l) => {
            l.d(a, { V: () => s, q: () => i });
            var n = l(38621),
                t = l(19413);
            function i(e) {
                let a = {
                    color: "fg.muted",
                    icon: n.SkipIcon,
                    description: t.g.issueIcons.NOT_PLANNED.description,
                };
                if (e) {
                    let l = `${e}`;
                    if (l in t.g.issueIcons) a = t.g.issueIcons[l];
                    else if ("COMPLETED" !== e)
                        throw Error("Invalid state reason");
                }
                return a;
            }
            function s(e) {
                let a = {
                    color: "fg.muted",
                    icon: n.SkipIcon,
                    description: t.g.pullRequestIcons.DRAFT.description,
                };
                if (e) {
                    let l = `${e}`;
                    if (l in t.g.pullRequestIcons) a = t.g.pullRequestIcons[l];
                    else throw Error("Invalid state reason");
                }
                return a;
            }
        },
        19413: (e, a, l) => {
            l.d(a, { g: () => i, t: () => t });
            var n = l(38621);
            let t = {
                    issueHierarchyItemChildrenFetchPageSize: 25,
                    issueItemLabelFetchPageSize: 10,
                    maxListSize: 100,
                    copilotDisplayName: "Copilot",
                    ghostUserLogin: "ghost",
                    ghostUserAvatarUrl: "/ghost.png",
                },
                i = {
                    issueIcons: {
                        OPEN: {
                            color: "open.fg",
                            icon: n.IssueOpenedIcon,
                            description: "Status: Open.",
                        },
                        CLOSED: {
                            color: "done.fg",
                            icon: n.IssueClosedIcon,
                            description: "Status: Closed (completed).",
                        },
                        COMPLETED: {
                            color: "done.fg",
                            icon: n.IssueClosedIcon,
                            description: "Status: Closed (completed).",
                        },
                        NOT_PLANNED: {
                            color: "fg.muted",
                            icon: n.SkipIcon,
                            description: "Status: Not planned (skipped).",
                        },
                        DUPLICATE: {
                            color: "fg.muted",
                            icon: n.SkipIcon,
                            description:
                                "Status: Duplicate of an existing item.",
                        },
                    },
                    pullRequestIcons: {
                        MERGED: {
                            color: "done.fg",
                            icon: n.GitMergeIcon,
                            description: "Status: Merged (completed).",
                        },
                        IN_MERGE_QUEUE: {
                            color: "attention.fg",
                            icon: n.GitMergeQueueIcon,
                            description: "Status: In merge queue.",
                        },
                        OPEN: {
                            color: "open.fg",
                            icon: n.GitPullRequestIcon,
                            description: "Status: Open (in progress).",
                        },
                        CLOSED: {
                            color: "closed.fg",
                            icon: n.GitPullRequestClosedIcon,
                            description: "Status: Closed (abandoned).",
                        },
                        DRAFT: {
                            color: "fg.muted",
                            icon: n.GitPullRequestDraftIcon,
                            description: "Status: Draft (not ready).",
                        },
                    },
                };
        },
        13233: (e, a, l) => {
            l.d(a, { l: () => n });
            let n = () => void 0;
        },
        7531: (e, a, l) => {
            l.d(a, { Y: () => n });
            function n() {
                let e = {};
                return (
                    (e.promise = new Promise((a, l) => {
                        ((e.resolve = a), (e.reject = l));
                    })),
                    e
                );
            }
        },
        35983: (e, a, l) => {
            l.d(a, {
                A: () => r,
                Ad: () => i,
                Ds: () => n,
                EU: () => s,
                FR: () => t,
                ZM: () => o,
            });
            let n = {
                    open: "state:open",
                    closed: "state:closed",
                    default:
                        "state:open archived:false assignee:@me sort:updated-desc",
                    defaultRepoLevelOpen: "is:issue state:open",
                    defaultRepoLevelClosed: "is:issue state:closed",
                    assignedToMe:
                        "is:issue state:open archived:false assignee:@me sort:updated-desc",
                    pullsAssignedToMe:
                        "state:open archived:false assignee:@me is:pr sort:updated-desc",
                    mentioned:
                        "is:issue state:open archived:false mentions:@me sort:updated-desc",
                    createdByMe:
                        "is:issue state:open archived:false author:@me sort:updated-desc",
                    recentActivity:
                        "is:issue involves:@me updated:>@today-1w sort:updated-desc",
                    pullsAuthored:
                        "state:open archived:false author:@me is:pr updated:>@today-60d sort:updated-desc",
                    pullsReviewed:
                        "state:open archived:false reviewed-by:@me -author:@me is:pr updated:>@today-60d sort:updated-desc",
                    pullsReviewRequested:
                        "state:open archived:false user-review-requested:@me is:pr updated:>@today-60d sort:updated-desc",
                    pullsMentioned:
                        "state:open archived:false mentions:@me is:pr updated:>@today-60d sort:updated-desc",
                },
                t = { today: "@today" },
                i = { day: "d", week: "w", month: "m", year: "y" },
                s = RegExp(`^(\\d+)(${Object.values(i).join("|")})`),
                r = "@",
                o = "sort:created-desc";
        },
        61885: (e, a, l) => {
            l.d(a, {
                $D: () => i,
                RM: () => d,
                a6: () => t,
                x: () => o,
                y1: () => u,
                yV: () => r,
            });
            var n = l(22787);
            let t = 10,
                i = 5,
                s = {
                    archived: {
                        name: "Archived",
                        value: "archived",
                        priority: 10,
                        icon: n.m4.Archived,
                        description:
                            "Specify archived or non-archived items only",
                    },
                    base: {
                        name: "Base",
                        value: "base",
                        priority: t,
                        icon: n.m4.Branch,
                        description: "Pull Request base branch",
                    },
                    closed: {
                        name: "Closed date",
                        value: "closed",
                        priority: t,
                        icon: n.m4.Calendar,
                        description: "Closing date",
                    },
                    comments: {
                        name: "Comment count",
                        value: "comments",
                        priority: t,
                        icon: n.m4.Comment,
                        description: "Item comment count",
                    },
                    created: {
                        name: "Creation date",
                        value: "created",
                        priority: t,
                        icon: n.m4.Calendar,
                        description: "Creation date",
                    },
                    draft: {
                        name: "Draft",
                        value: "draft",
                        priority: t,
                        icon: n.m4.Draft,
                        description: "Search for draft items",
                    },
                    head: {
                        name: "Head",
                        value: "head",
                        priority: t,
                        icon: n.m4.Branch,
                        description: "Head branch commit sha",
                    },
                    in: {
                        name: "In",
                        value: "in",
                        icon: n.m4.Filter,
                        description:
                            "Restrict your search to the title, body, comments, or any combination of these",
                        priority: t,
                    },
                    interactions: {
                        name: "Interactions count",
                        value: "interactions",
                        priority: t,
                        icon: n.m4.Discussion,
                        description: "Interaction count",
                    },
                    is: {
                        name: "Is",
                        value: "is",
                        icon: n.m4.Apps,
                        description:
                            'Filter only "issues", "pulls", "open", "closed", or "draft"',
                        priority: 3,
                    },
                    language: {
                        name: "Code language",
                        value: "language",
                        priority: t,
                        icon: n.m4.Code,
                        description: "Code language",
                    },
                    linked: {
                        name: "Linked",
                        value: "linked",
                        icon: n.m4.PullRequest,
                        description: "Items linked to an issue or pull request",
                        priority: t,
                    },
                    merged: {
                        name: "Merge date",
                        value: "merged",
                        priority: t,
                        icon: n.m4.Calendar,
                        description: "Merge date",
                    },
                    milestone: {
                        name: "Milestone",
                        value: "milestone",
                        priority: t,
                        icon: n.m4.Milestone,
                        description: "Milestone",
                    },
                    no: {
                        name: "No",
                        value: "no",
                        priority: t,
                        icon: n.m4.Forbidden,
                        description:
                            "Filter by items without a specific metadata value",
                    },
                    reactions: {
                        name: "Reaction count",
                        value: "reactions",
                        priority: t,
                        icon: n.m4.Reaction,
                        description: "Reactions count",
                    },
                    reason: {
                        name: "Reason",
                        value: "reason",
                        priority: t,
                        icon: n.m4.Mention,
                        description: "Filter by item closed reason",
                    },
                    review: {
                        name: "Review state",
                        value: "review",
                        priority: t,
                        icon: n.m4.PullRequest,
                        description: "Specify a review state",
                    },
                    sha: {
                        name: "Commit SHA",
                        value: "sha",
                        priority: t,
                        icon: n.m4.FileCode,
                        description: "Commit SHA",
                    },
                    state: {
                        name: "State",
                        value: "state",
                        priority: 3,
                        icon: n.m4.Draft,
                        description: "Look for open / closed items",
                    },
                    status: {
                        name: "Status",
                        value: "status",
                        priority: t,
                        icon: n.m4.Draft,
                        description:
                            "Commit status: pending | success | failure",
                    },
                    team: {
                        name: "Team",
                        value: "team",
                        priority: t,
                        icon: n.m4.Team,
                        description: "Team name",
                    },
                    teamReviewRequested: {
                        name: "Team review requested",
                        value: "team-review-requested",
                        priority: t,
                        icon: n.m4.Team,
                        description: "Review requested from team",
                    },
                    sort: {
                        name: "Sort",
                        value: "sort",
                        priority: t,
                        icon: n.m4.Sort,
                        description: "Sort results",
                    },
                    itemType: {
                        name: "Item Type",
                        value: "type",
                        priority: t,
                        icon: n.m4.Apps,
                        description:
                            "Specify the type of item to search for: issue or pr",
                    },
                    type: {
                        name: "Type",
                        value: "type",
                        priority: t,
                        icon: n.m4.Issue,
                        description: "Specify the type of issue to search for",
                    },
                    updated: {
                        name: "Update date",
                        value: "updated",
                        priority: t,
                        icon: n.m4.Calendar,
                        description: "Updated date",
                    },
                    repo: {
                        name: "Repository",
                        value: "repo",
                        priority: 1,
                        icon: n.m4.Repo,
                        singularItemName: "Repository",
                        description: "Filter by repository",
                    },
                    org: {
                        name: "Organization",
                        value: "org",
                        priority: 2,
                        icon: n.m4.Organization,
                        singularItemName: "Organization",
                        description: "Filter by organization",
                    },
                    label: {
                        name: "Label",
                        value: "label",
                        priority: 3,
                        icon: n.m4.Tag,
                        singularItemName: "Label",
                        description: "Filter by label",
                    },
                    project: {
                        name: "Project",
                        value: "project",
                        priority: 3,
                        icon: n.m4.Project,
                        singularItemName: "Project",
                        description: "",
                    },
                };
            (s.base,
                s.head,
                s.language,
                s.milestone,
                s.sha,
                s.archived,
                s.comments,
                s.closed,
                s.created,
                s.draft,
                s.in,
                s.interactions,
                s.is,
                s.linked,
                s.merged,
                s.no,
                s.reactions,
                s.reason,
                s.review,
                s.sort,
                s.state,
                s.status,
                s.updated);
            let r = {
                author: {
                    name: "Author",
                    value: "author",
                    icon: n.m4.Person,
                    description: "The author of the item",
                    priority: 3,
                },
                assignee: {
                    name: "Assignee",
                    value: "assignee",
                    icon: n.m4.Person,
                    description: "The assignee of the item",
                    priority: 3,
                },
                involves: {
                    name: "Involves",
                    value: "involves",
                    icon: n.m4.Person,
                    description: "The user involved in the item",
                    priority: t,
                },
                mentions: {
                    name: "Mentions",
                    value: "mentions",
                    icon: n.m4.Mention,
                    description: "The user mentioned in the item",
                    priority: t,
                },
                commenter: {
                    name: "Commenter",
                    value: "commenter",
                    icon: n.m4.Person,
                    description: "Items commented on by the user",
                    priority: t,
                },
                reviewRequested: {
                    name: "Review Requested",
                    value: "review-requested",
                    icon: n.m4.Person,
                    description: "Items with review requested for the user",
                    priority: t,
                },
                reviewedBy: {
                    name: "Reviewed By",
                    value: "reviewed-by",
                    icon: n.m4.Person,
                    description: "Items reviewed by the user",
                    priority: t,
                },
                user: {
                    name: "User",
                    value: "user",
                    icon: n.m4.Person,
                    description: "Items in repositories owned by the user",
                    priority: t,
                },
                userReviewRequested: {
                    name: "User Review Requested",
                    value: "user-review-requested",
                    icon: n.m4.Mention,
                    description:
                        "Items with review requested for the user explicitly",
                    priority: t,
                },
            };
            (Object.values(r),
                n.m4.Issue,
                n.m4.PullRequest,
                n.m4.Issue,
                n.m4.IssueClosed,
                n.m4.Draft,
                n.m4.Issue,
                n.m4.PullRequest,
                n.m4.Issue,
                n.m4.PullRequest,
                n.m4.Mention,
                n.m4.Project,
                s.team,
                s.teamReviewRequested);
            let o = 25,
                u = 100,
                d = {
                    archived: "Not archived",
                    base: "Without base",
                    closed: "Not closed on date",
                    comments: "Without comments count",
                    created: "Not created on date",
                    draft: "Not draft",
                    head: "Without head",
                    interactions: "Without interactions count",
                    is: "Is not",
                    language: "Without code language",
                    linked: "Without linked",
                    reactions: "Without reactions count",
                    reason: "Without reason",
                    review: "Without review state",
                    state: "Without state",
                    status: "Without status",
                    team: "Not in team",
                    "team-review-requested": "Not in team review requested",
                    type: "Without type",
                    updated: "Not updated on date",
                    repo: "Not in repository",
                    org: "Not in organization",
                    label: "Without label",
                    project: "Not in project",
                    author: "Not authored by",
                    assignee: "Not assigned to",
                    involves: "Not involving",
                    mentions: "Not mentioned by",
                    commenter: "Not commented by",
                    "review-requested": "Without review requested by",
                    "reviewed-by": "Not reviewed by",
                    user: "Not owned by user",
                    "user-review-requested": "Without user review requested",
                };
        },
        70056: (e, a, l) => {
            l.d(a, { D: () => UserFilterProvider });
            var n = l(22787),
                t = l(91385),
                i = l(3785);
            function s(e, a, l) {
                return (
                    a in e
                        ? Object.defineProperty(e, a, {
                              value: l,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                          })
                        : (e[a] = l),
                    e
                );
            }
            let AsyncFilterProvider = class AsyncFilterProvider extends EventTarget {
                abortPreviousRequests() {
                    (this.abortController.abort(),
                        (this.abortController = new AbortController()));
                }
                async fetchData(e) {
                    let a,
                        l = e.parsedQuery.at(-1),
                        n = new URL(this.endpoint, window.location.origin),
                        t = n.searchParams || new URLSearchParams(),
                        s = e.rawQuery.toString();
                    if (this.repositoryScope && "" !== this.repositoryScope) {
                        let e = `repo:${this.repositoryScope}`;
                        s.includes(e) || (s = `${s} ${e}`);
                    }
                    (t.set("q", s),
                        t.set("filter_value", l.value),
                        (n.search = t.toString()));
                    try {
                        let e = (0, i.RD)(n.toString());
                        a = await fetch(e, {
                            method: "GET",
                            mode: "same-origin",
                            headers: {
                                Accept: "application/json",
                                "Content-Type": "application/json",
                            },
                            signal: this.abortController.signal,
                        });
                    } catch (e) {
                        if ("AbortError" !== e.name) throw e;
                    }
                    if (a && (0, i.Gr)()) {
                        let e = await a.clone().json();
                        (0, i.Av)(e);
                    }
                    return a;
                }
                constructor(e, a) {
                    (super(),
                        s(this, "endpoint", void 0),
                        s(this, "repositoryScope", void 0),
                        s(this, "abortController", void 0),
                        (this.endpoint = e),
                        (this.repositoryScope = a),
                        (this.abortController = new AbortController()));
                }
            };
            function r(e, a, l) {
                return (
                    a in e
                        ? Object.defineProperty(e, a, {
                              value: l,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                          })
                        : (e[a] = l),
                    e
                );
            }
            let UserFilterProvider = class UserFilterProvider extends AsyncFilterProvider {
                async handleEvent(e) {
                    let a = e.parsedQuery.at(-1);
                    if (
                        (("" !== a.value || this.priority <= 5) &&
                            a?.type !== "filter" &&
                            !e.parsedQuery.some(
                                (e) =>
                                    "filter" === e.type &&
                                    e.filter === this.value
                            ) &&
                            ((0, t.qA)(a?.value, this.name) ||
                                (0, t.qA)(a?.value, this.value)) &&
                            this.dispatchEvent(new Event("show")),
                        a?.type !== this.type || a.filter !== this.value)
                    )
                        return;
                    this.abortPreviousRequests();
                    let l = this.fetchAndEmitData(e);
                    this.dispatchEvent(new n.dS(l));
                }
                async fetchAndEmitData(e) {
                    let a = await this.fetchData(e);
                    if (!a || !a.ok) return;
                    let l = e.parsedQuery.at(-1),
                        n = (await a.json()).users,
                        i =
                            ("" === l.value || (0, t.qA)(l.value, "@me")) &&
                            "" !== this.currentUserLogin;
                    for (let e of (i &&
                        this.emitSuggestion(
                            this.useLogin
                                ? (this.currentUserLogin ?? "")
                                : "@me",
                            "",
                            this.currentUserAvatarUrl,
                            l.value
                        ),
                    n))
                        (i && e.login === this.currentUserLogin) ||
                            this.emitSuggestion(
                                e.login,
                                e.name,
                                e.avatarUrl,
                                l.value
                            );
                }
                emitSuggestion(e, a, l, i) {
                    let s = 3;
                    (i &&
                        ((s -= 0.75 * (0, t.fN)(i, e)),
                        (s -= 0.25 * (0, t.fN)(i, a))),
                        "@me" === e && (s = 1),
                        this.dispatchEvent(
                            new n.qi({
                                filter: this.value,
                                value: e,
                                description: a,
                                inlineDescription: !0,
                                priority: s,
                                icon: this.icon,
                                avatar: l ? { url: l, type: "user" } : void 0,
                            })
                        ));
                }
                constructor(
                    e,
                    {
                        name: a,
                        value: l,
                        icon: n,
                        priority: t,
                        useLogin: i = !1,
                    },
                    s,
                    o,
                    u
                ) {
                    (super("/filter-suggestions/users", u),
                        r(this, "type", "filter"),
                        r(this, "icon", "person"),
                        r(this, "name", void 0),
                        r(this, "priority", void 0),
                        r(this, "singularItemName", void 0),
                        r(this, "value", void 0),
                        r(this, "currentUserLogin", void 0),
                        r(this, "currentUserAvatarUrl", void 0),
                        r(this, "useLogin", void 0),
                        (this.name = a),
                        (this.singularItemName = a),
                        (this.value = l),
                        (this.icon = n),
                        (this.priority = t),
                        (this.currentUserLogin = s),
                        (this.currentUserAvatarUrl = o),
                        (this.useLogin = i),
                        e.addEventListener("query", this),
                        e.attachProvider(this));
                }
            };
        },
        27911: (e, a, l) => {
            l.d(a, { Om: () => d, qc: () => c, ws: () => m, mA: () => u });
            var n = l(42671);
            l(35983);
            var t = l(22787),
                i = l(91385),
                s = l(61885);
            function r(e, a, l) {
                return (
                    a in e
                        ? Object.defineProperty(e, a, {
                              value: l,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                          })
                        : (e[a] = l),
                    e
                );
            }
            let CustomFilterProvider = class CustomFilterProvider extends EventTarget {
                handleEvent(e) {
                    let a = e.parsedQuery.at(-1);
                    (("" !== a.value || this.priority <= s.$D) &&
                        a?.type !== "filter" &&
                        !e.parsedQuery.some(
                            (e) =>
                                "filter" === e.type && e.filter === this.value
                        ) &&
                        ((0, i.qA)(a?.value, this.name) ||
                            (0, i.qA)(a?.value, this.value)) &&
                        this.dispatchEvent(new Event("show")),
                        a?.type === "filter" &&
                            a.filter === this.value &&
                            this.filterValues?.map((e) => {
                                let { name: l, priority: n, icon: t } = e,
                                    i = "value" in e ? e.value : e.valueFunc(),
                                    s = i.charAt(0).toUpperCase() + i.slice(1);
                                this.emitSuggestion(
                                    this.value,
                                    i,
                                    l ?? s,
                                    a.value,
                                    n,
                                    t
                                );
                            }));
                }
                emitSuggestion(e, a, l, n, s, r) {
                    (!n || (0, i.qA)(n, a)) &&
                        (n && (s -= (0, i.fN)(n, a)),
                        this.dispatchEvent(
                            new t.qi({
                                filter: e,
                                value: a,
                                name: l,
                                priority: s,
                                icon: r,
                            })
                        ));
                }
                constructor(
                    e,
                    { name: a, value: l, priority: n, icon: t, valuesKey: i },
                    s
                ) {
                    (super(),
                        r(this, "type", "filter"),
                        r(this, "name", void 0),
                        r(this, "value", void 0),
                        r(this, "priority", void 0),
                        r(this, "icon", void 0),
                        r(this, "valuesKey", void 0),
                        r(this, "filterValues", void 0),
                        r(this, "singularItemName", void 0),
                        (this.name = a),
                        (this.value = l),
                        (this.singularItemName = a),
                        (this.priority = n),
                        (this.icon = t),
                        (this.valuesKey = i),
                        (this.filterValues = s),
                        e.addEventListener("query", this),
                        e.attachProvider(this));
                }
            };
            var o = l(70056);
            function u(e) {
                let a = new Map();
                for (let l of (a.set("searchTerms", []),
                e
                    .trim()
                    .split(/((?:[^\s"]+|"[^"]*")+)/g)
                    .filter((e) => "" !== e.trim()))) {
                    let [e, n] = l.split(":");
                    if (e && n) {
                        if (!a.has(e)) {
                            a.set(e, [n]);
                            continue;
                        }
                        a.set(e, [...a.get(e), n]);
                        continue;
                    }
                    a.set("searchTerms", [...a.get("searchTerms"), l]);
                }
                return a;
            }
            function d(e, a, l) {
                if (e.value in s.RM) {
                    let t = e.value;
                    new CustomFilterProvider(
                        a,
                        {
                            ...e,
                            name: s.RM[t],
                            icon: n.m4.Not,
                            value: `-${e.value}`,
                            valuesKey: e.value,
                            priority: s.a6,
                        },
                        l
                    );
                }
                new CustomFilterProvider(a, e, l);
            }
            function c(e, a, l, n, t) {
                if (e.value in s.RM) {
                    let i = e.value;
                    new o.D(
                        a,
                        {
                            ...e,
                            name: s.RM[i],
                            value: `-${e.value}`,
                            priority: s.a6,
                        },
                        l,
                        n,
                        t
                    );
                }
                new o.D(a, e, l, n, t);
            }
            function m(e) {
                let a = u(e),
                    l = new Map(
                        [...(a.get("is") || []), ...(a.get("type") || [])].map(
                            (e) => [e, !0]
                        )
                    ),
                    n = l.has("pr") || l.has("pull-request"),
                    t = l.has("issue") || l.has("issues");
                return n && !t;
            }
        },
        41764: (e, a, l) => {
            l.d(a, { A: () => r });
            let {
                    getItem: n,
                    setItem: t,
                    removeItem: i,
                } = (0, l(85351).A)("localStorage"),
                s = "REACT_PROFILING_ENABLED",
                r = {
                    enable: () => t(s, "true"),
                    disable: () => i(s),
                    isEnabled: () => !!n(s),
                };
        },
        46320: (e, a, l) => {
            l.d(a, {
                Kq: () => SoftNavErrorEvent,
                RQ: () => SoftNavEndEvent,
                gh: () => SoftNavPayloadEvent,
                ni: () => SoftNavSuccessEvent,
                sW: () => SoftNavStartEvent,
            });
            var n = l(21715);
            function t(e, a, l) {
                return (
                    a in e
                        ? Object.defineProperty(e, a, {
                              value: l,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                          })
                        : (e[a] = l),
                    e
                );
            }
            let i = class SoftNavEvent extends Event {
                constructor(e, a) {
                    (super(a),
                        t(this, "mechanism", void 0),
                        (this.mechanism = e));
                }
            };
            let SoftNavStartEvent = class SoftNavStartEvent extends i {
                constructor(e) {
                    super(e, n.z.START);
                }
            };
            let SoftNavSuccessEvent = class SoftNavSuccessEvent extends i {
                constructor(e, a) {
                    (super(e, n.z.SUCCESS),
                        t(this, "visitCount", void 0),
                        (this.visitCount = a));
                }
            };
            let SoftNavErrorEvent = class SoftNavErrorEvent extends i {
                constructor(e, a) {
                    (super(e, n.z.ERROR),
                        t(this, "error", void 0),
                        (this.error = a));
                }
            };
            let SoftNavEndEvent = class SoftNavEndEvent extends i {
                constructor(e) {
                    super(e, n.z.END);
                }
            };
            let SoftNavPayloadEvent = class SoftNavPayloadEvent extends Event {
                constructor(e) {
                    (super("soft-nav:payload"),
                        t(this, "payload", void 0),
                        t(this, "appPayload", void 0),
                        (this.payload = e.payload),
                        (this.appPayload = e.appPayload));
                }
            };
        },
        97396: (e, a, l) => {
            l.d(a, {
                Bu: () => p,
                SC: () => u,
                Ti: () => m,
                iS: () => d,
                k5: () => o,
                o4: () => c,
                rZ: () => g,
            });
            var n = l(21715),
                t = l(46320),
                i = l(7522),
                s = l(78284);
            let r = 0;
            function o() {
                ((r = 0),
                    document.dispatchEvent(new Event(n.z.INITIAL)),
                    (0, s.xT)());
            }
            function u(e) {
                (0, s.LM)() ||
                    (document.dispatchEvent(new Event(n.z.PROGRESS_BAR.START)),
                    document.dispatchEvent(new t.sW(e)),
                    (0, s.Vy)(e),
                    (0, s.ZW)(),
                    (0, s.HK)(),
                    (0, i.E5)());
            }
            function d(e = {}) {
                h(e) &&
                    ((r += 1),
                    document.dispatchEvent(new t.ni((0, s.di)(), r)),
                    m(e));
            }
            function c(e = {}) {
                if (!h(e)) return;
                r = 0;
                let a = (0, s.my)() || s.BW;
                (document.dispatchEvent(new t.Kq((0, s.di)(), a)),
                    y(),
                    (0, i.Cd)(a),
                    (0, s.xT)());
            }
            function m(e = {}) {
                if (!h(e)) return;
                let a = (0, s.di)();
                (y(),
                    document.dispatchEvent(new t.RQ(a)),
                    (0, s.Ff)(),
                    (0, s.JA)(a));
            }
            function g(e = {}) {
                h(e) &&
                    ((0, i.Im)(),
                    document.dispatchEvent(new Event(n.z.RENDER)));
            }
            function p() {
                document.dispatchEvent(new Event(n.z.FRAME_UPDATE));
            }
            function y() {
                document.dispatchEvent(new Event(n.z.PROGRESS_BAR.END));
            }
            function h({
                skipIfGoingToReactApp: e,
                allowedMechanisms: a = [],
            } = {}) {
                return (
                    (0, s.LM)() &&
                    (0 === a.length || a.includes((0, s.di)())) &&
                    (!e || !(0, s.gc)())
                );
            }
        },
        21715: (e, a, l) => {
            l.d(a, { z: () => n });
            let n = Object.freeze({
                INITIAL: "soft-nav:initial",
                START: "soft-nav:start",
                REPLACE_MECHANISM: "soft-nav:replace-mechanism",
                SUCCESS: "soft-nav:success",
                ERROR: "soft-nav:error",
                FRAME_UPDATE: "soft-nav:frame-update",
                END: "soft-nav:end",
                RENDER: "soft-nav:render",
                PROGRESS_BAR: {
                    START: "soft-nav:progress-bar:start",
                    END: "soft-nav:progress-bar:end",
                },
            });
        },
        7522: (e, a, l) => {
            l.d(a, { Cd: () => o, E5: () => r, Im: () => u, nW: () => s });
            var n = l(7479),
                t = l(78284);
            let i = "stats:soft-nav-duration",
                s = {
                    turbo: "TURBO",
                    react: "REACT",
                    "turbo.frame": "FRAME",
                    ui: "UI",
                    hard: "HARD",
                };
            function r() {
                (window.performance.clearResourceTimings(),
                    window.performance.mark(i));
            }
            function o(e) {
                (0, n.i)({
                    turboFailureReason: e,
                    turboStartUrl: (0, t.dR)(),
                    turboEndUrl: window.location.href,
                });
            }
            function u() {
                let e = (function () {
                    if (0 === performance.getEntriesByName(i).length)
                        return null;
                    performance.measure(i, i);
                    let e = performance.getEntriesByName(i).pop();
                    return e ? e.duration : null;
                })();
                if (!e) return;
                let a = s[(0, t.di)()],
                    l = Math.round(e);
                (a === s.react &&
                    document.dispatchEvent(
                        new CustomEvent("staffbar-update", {
                            detail: { duration: l },
                        })
                    ),
                    (0, n.i)({
                        requestUrl: window.location.href,
                        softNavigationTiming: {
                            mechanism: a,
                            destination: (0, t.fX)() || "rails",
                            duration: l,
                            initiator: (0, t.Pv)() || "rails",
                        },
                    }));
            }
        },
        98013: (e, a, l) => {
            l.d(a, { x: () => g });
            var n,
                t = l(96540),
                i = l(64899),
                s = l(69719),
                r = l(35932),
                o = l(74848),
                u = l(10204);
            let d = (0, t.createContext)(null),
                c = null;
            function m(e, a) {
                let l = u.KK.parse(e);
                if (!l)
                    throw Error(
                        `Invalid channel name. Did you forget to sign it with \`signChannel("${e}")\`?`
                    );
                return (
                    c || (c = new u.m0()),
                    c.add({ topic: l, subscriber: a }),
                    {
                        unsubscribe: () => {
                            c?.delete({ topic: l, subscriber: a });
                        },
                    }
                );
            }
            try {
                d.displayName || (d.displayName = "AliveTestContext");
            } catch {}
            try {
                (n = function ({ children: e, initialMessages: a }) {
                    return (
                        (0, t.useEffect)(() => {
                            let e = [];
                            if (a)
                                for (let [l, n] of a) {
                                    let a = window.setTimeout(() => {
                                        var e = l,
                                            a = n;
                                        if (null === c)
                                            throw Error(
                                                'Test helper `dispatchAliveTestMessage` called outside `AliveTestProvider`. Please wrap your component under test in `AliveTestProvider` from "@github-ui/use-alive/test-utils".'
                                            );
                                        for (let l of Array.from(
                                            c.subscribers(e)
                                        ))
                                            l(a);
                                    }, 0);
                                    e.push(a);
                                }
                            return () => {
                                for (let a of ((c = null), e))
                                    window.clearTimeout(a);
                            };
                        }),
                        (0, o.jsx)(d.Provider, { value: m, children: e })
                    );
                }).displayName || (n.displayName = "AliveTestProvider");
            } catch {}
            function g(e, a) {
                let l = (0, i.A)(),
                    n = (0, t.useContext)(d);
                (0, t.useEffect)(() => {
                    let t = () => {},
                        i = !1;
                    return (
                        (async function () {
                            if (e) {
                                if ("function" == typeof n) {
                                    let l = await n(e, a);
                                    l && (t = l.unsubscribe);
                                    return;
                                }
                                try {
                                    let n = await (0, s.H)();
                                    if (i) return;
                                    let o = (0, r.$)(n, e, a);
                                    o?.unsubscribe &&
                                        (l()
                                            ? (t = o.unsubscribe)
                                            : o.unsubscribe());
                                } catch (e) {
                                    console.error(e);
                                }
                            }
                        })(),
                        () => {
                            ((i = !0), t());
                        }
                    );
                }, [e, a, l, n]);
            }
        },
        64899: (e, a, l) => {
            l.d(a, { A: () => i });
            var n = l(17515),
                t = l(96540);
            function i() {
                let e = (0, t.useRef)(!1),
                    a = (0, t.useCallback)(() => e.current, []);
                return (
                    (0, n.N)(
                        () => (
                            (e.current = !0),
                            () => {
                                e.current = !1;
                            }
                        ),
                        []
                    ),
                    a
                );
            }
        },
        33299: (e, a, l) => {
            l.d(a, { X: () => t });
            var n = l(80663);
            function t(e) {
                let a = e.join(","),
                    [l] = (0, n.I)(
                        () => {
                            let e = /Windows/.test(navigator.userAgent)
                                ? "windows"
                                : /Macintosh/.test(navigator.userAgent)
                                  ? "mac"
                                  : null;
                            return !!e && a.includes(e);
                        },
                        !1,
                        [a]
                    );
                return l;
            }
        },
        17515: (e, a, l) => {
            l.d(a, { N: () => i });
            var n = l(96679),
                t = l(96540);
            let i =
                void 0 !== n.cg?.document?.createElement
                    ? t.useLayoutEffect
                    : t.useEffect;
        },
        26807: (e, a, l) => {
            l.d(a, { Z: () => u, o: () => d });
            var n = l(96540),
                t = l(85788),
                i = l(72841),
                s = l(97396),
                r = l(32494),
                o = l(23818);
            let u = () => {
                    let { routes: e } = n.useContext(o.k),
                        a = (0, t.Zp)();
                    return n.useCallback(
                        (o, u = {}) => {
                            let d = (0, t.o1)(o).pathname;
                            if (!(0, t.ue)(e, d) || u.reloadDocument) {
                                let e = "string" == typeof o ? o : (0, t.AO)(o);
                                (async () => {
                                    let { softNavigate: a } = await Promise.all(
                                        [
                                            l.e(
                                                "vendors-node_modules_github_turbo_dist_turbo_es2017-esm_js"
                                            ),
                                            l.e(
                                                "ui_packages_soft-navigate_soft-navigate_ts"
                                            ),
                                        ]
                                    ).then(l.bind(l, 59519));
                                    a(e);
                                })();
                            } else {
                                (0, i.A)(location.href, o.toString()) ||
                                    (0, s.SC)("react");
                                let { preventAutofocus: e, ...l } = u;
                                (0, n.startTransition)(() => {
                                    a(
                                        o,
                                        e
                                            ? {
                                                  ...l,
                                                  state: {
                                                      [r.V]: !0,
                                                      ...l.state,
                                                  },
                                              }
                                            : l
                                    );
                                });
                            }
                        },
                        [a, e]
                    );
                },
                d = () => {
                    let [e] = (0, t.ok)(),
                        a = u(),
                        { pathname: l } = (0, t.zy)(),
                        i = n.useCallback(
                            (n, i = {}) => {
                                a(
                                    {
                                        pathname: l,
                                        search: (0, t.PI)(
                                            "function" == typeof n ? n(e) : n
                                        ).toString(),
                                    },
                                    i
                                );
                            },
                            [e, a, l]
                        );
                    return [e, i];
                };
        },
        47019: (e, a, l) => {
            l.d(a, { A: () => i });
            var n = l(64899),
                t = l(96540);
            let i = function (e) {
                let a = (0, n.A)(),
                    [l, i] = (0, t.useState)(e);
                return [
                    l,
                    (0, t.useCallback)(
                        (e) => {
                            a() && i(e);
                        },
                        [a]
                    ),
                ];
            };
        },
        23812: (e, a, l) => {
            l.d(a, { D6: () => c, Fo: () => u, MV: () => m, zB: () => g });
            var n = l(85351),
                t = l(96540);
            function i(e, a, l) {
                return (
                    a in e
                        ? Object.defineProperty(e, a, {
                              value: l,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                          })
                        : (e[a] = l),
                    e
                );
            }
            let s = (0, n.A)("sessionStorage"),
                r = "session-storage-update",
                o = class UseSessionStorageUpdateEvent extends Event {
                    constructor(e, a) {
                        (super(r),
                            i(this, "storageKey", void 0),
                            i(this, "storageValue", void 0),
                            (this.storageKey = e),
                            (this.storageValue = a));
                    }
                };
            function u(e, a) {
                let l = (0, t.useRef)(a);
                (0, t.useEffect)(() => {
                    l.current = a;
                });
                let [n, i] = (0, t.useState)(() => {
                        let a = s.getItem(e);
                        return a ? JSON.parse(a) : l.current;
                    }),
                    u = (0, t.useCallback)(
                        (a) => {
                            (i(void 0 !== a ? a : l.current),
                                void 0 === a
                                    ? s.removeItem(e)
                                    : s.setItem(e, JSON.stringify(a)),
                                document.dispatchEvent(new o(e, a)));
                        },
                        [e]
                    ),
                    d = (0, t.useCallback)(
                        (e) => {
                            l.current = e;
                        },
                        [l]
                    );
                return (
                    (0, t.useEffect)(() => {
                        function a(a) {
                            if (a.storageKey === e) {
                                let e = a.storageValue;
                                i(void 0 !== e ? e : l.current);
                            }
                        }
                        document.addEventListener(r, a);
                        let n = s.getItem(e);
                        return (
                            n ? i(JSON.parse(n)) : i(l.current),
                            () => {
                                document.removeEventListener(r, a);
                            }
                        );
                    }, [e]),
                    [n, u, d]
                );
            }
            function d(e) {
                let a = s.getKeys(),
                    l = [];
                for (let n in a) a[n]?.startsWith(e) && l.push(a[n]);
                return l;
            }
            function c(e) {
                for (let a of e)
                    (s.removeItem(a), document.dispatchEvent(new o(a, void 0)));
            }
            function m(e) {
                let a = [];
                for (let l of d(e)) {
                    let e = s.getItem(l);
                    null != e && a.push(JSON.parse(e));
                }
                return a;
            }
            function g(e) {
                c(d(e));
            }
        },
        40319: (e, a, l) => {
            l.d(a, { N: () => i });
            var n = l(64262),
                t = l(96540);
            let i = () => {
                let e = (0, n.X)();
                return (0, t.useMemo)(
                    () => ({
                        ssoOrgs: e?.sso_organizations ?? [],
                        baseAvatarUrl:
                            e?.base_avatar_url ??
                            "https://avatars.githubusercontent.com",
                    }),
                    [e?.sso_organizations, e?.base_avatar_url]
                );
            };
        },
        99837: (e, a, l) => {
            l.d(a, { H: () => t });
            var n = l(96540);
            let t = ({ inputRef: e, fallbackEventHandler: a }) =>
                (0, n.useCallback)(
                    (l, n, t) => {
                        let i = e.current;
                        if (!i) return;
                        let s = document.activeElement;
                        i.focus();
                        let r = n ?? [
                                i.selectionStart ?? i.value.length,
                                i.selectionEnd ?? i.value.length,
                            ],
                            o =
                                void 0 === t
                                    ? ((e, a, l) => {
                                          let n = a[1] - a[0];
                                          return e < a[0]
                                              ? e
                                              : e < a[1]
                                                ? a[0] + l
                                                : e + (l - n);
                                      })(
                                          i.selectionStart ?? i.value.length,
                                          r,
                                          l.length
                                      )
                                    : Array.isArray(t)
                                      ? t[0]
                                      : t,
                            u = Array.isArray(t) ? t[1] : o,
                            d = !1;
                        try {
                            if (document.activeElement !== i)
                                throw Error(
                                    "Input must be focused to use execCommand"
                                );
                            (i.setSelectionRange(r[0], r[1]),
                                (d =
                                    "" === l
                                        ? document.execCommand("delete", !1)
                                        : document.execCommand(
                                              "insertText",
                                              !1,
                                              l
                                          )),
                                i.setSelectionRange(o, u));
                        } catch {
                            d = !1;
                        }
                        if (
                            ((s instanceof HTMLInputElement ||
                                s instanceof HTMLTextAreaElement) &&
                                s.focus(),
                            !d)
                        ) {
                            let n =
                                    i.value.slice(0, r[0]) +
                                    l +
                                    i.value.slice(r[1]),
                                t = new InputEvent("input", { bubbles: !1 });
                            ((e.current.value = n),
                                e.current.setSelectionRange(o, u),
                                e.current.dispatchEvent(t),
                                a(
                                    ((e, a) => ({
                                        ...e,
                                        nativeEvent: e,
                                        target: a,
                                        currentTarget: a,
                                        preventDefault: () =>
                                            e.preventDefault(),
                                        isDefaultPrevented: () =>
                                            e.defaultPrevented,
                                        isPropagationStopped: () => !1,
                                        persist: () => ({}),
                                    }))(t, e.current)
                                ));
                        }
                    },
                    [e, a]
                );
        },
        60039: (e, a, l) => {
            l.d(a, { DI: () => i, QJ: () => r, Sr: () => o, lS: () => s });
            var n = l(26559),
                t = l(62053);
            async function i(e, a = {}) {
                var l = e;
                if (
                    new URL(l, window.location.origin).origin !==
                    window.location.origin
                )
                    throw Error(
                        "Can not make cross-origin requests from verifiedFetch"
                    );
                let s = (function (e) {
                        let a = new URL(e, window.location.href),
                            l = new URL(
                                window.location.href,
                                window.location.origin
                            ),
                            n = l.searchParams.get("_features");
                        n &&
                            !a.searchParams.has("_features") &&
                            a.searchParams.set("_features", n);
                        let t = l.searchParams.get("_tracing");
                        return (
                            t &&
                                !a.searchParams.has("_tracing") &&
                                a.searchParams.set("_tracing", t),
                            e.startsWith(window.location.origin)
                                ? a.href
                                : `${a.pathname}${a.search}`
                        );
                    })(e),
                    r = {
                        ...a.headers,
                        "GitHub-Verified-Fetch": "true",
                        ...(0, n.kt)(),
                    },
                    o = await fetch(s, { ...a, headers: r }),
                    u = o?.headers?.get("X-Github-Request-Id");
                return (u && (0, t.Ex)(u), o);
            }
            function s(e, a) {
                let l = {
                        ...(a?.headers ?? {}),
                        Accept: "application/json",
                        "Content-Type": "application/json",
                    },
                    n = a?.body ? JSON.stringify(a.body) : void 0;
                return i(e, { ...a, body: n, headers: l });
            }
            function r(e, a = {}) {
                let l = { ...a.headers, "GitHub-Is-React": "true" };
                return i(e, { ...a, headers: l });
            }
            function o(e, a) {
                let l = { ...(a?.headers ?? {}), "GitHub-Is-React": "true" };
                return s(e, { ...a, headers: l });
            }
        },
        26033: (e, a, l) => {
            l.d(a, { y: () => s });
            var n = l(74848),
                t = l(21728),
                i = l(78924);
            function s(e) {
                let a,
                    l,
                    s,
                    r = (0, t.c)(7),
                    { children: o, appName: u, category: d, metadata: c } = e;
                return (
                    r[0] !== u || r[1] !== d || r[2] !== c
                        ? ((l = { appName: u, category: d, metadata: c }),
                          (r[0] = u),
                          (r[1] = d),
                          (r[2] = c),
                          (r[3] = l))
                        : (l = r[3]),
                    (a = l),
                    r[4] !== o || r[5] !== a
                        ? ((s = (0, n.jsx)(i.I.Provider, {
                              value: a,
                              children: o,
                          })),
                          (r[4] = o),
                          (r[5] = a),
                          (r[6] = s))
                        : (s = r[6]),
                    s
                );
            }
            try {
                s.displayName || (s.displayName = "AnalyticsProvider");
            } catch {}
        },
        8579: (e, a, l) => {
            l.d(a, { T: () => g });
            var n = l(74848),
                t = l(64899),
                i = l(38621),
                s = l(87330),
                r = l(96540),
                o = l(34164),
                u = l(18828),
                d = l(52811),
                c = l(640);
            let m = { tooltip: "CopyToClipboardButton-module__tooltip--Dq1IB" };
            function g({
                icon: e = i.CopyIcon,
                size: a = "medium",
                onCopy: l,
                textToCopy: g,
                tooltipProps: p,
                variant: y = "invisible",
                ariaLabel: h,
                className: k,
                disabled: f,
                ...b
            }) {
                let [C, S] = r.useState(!1),
                    F = (0, t.A)(),
                    v = h ?? `Copy "${g}" to clipboard`,
                    L = C ? "Copied!" : v,
                    I = {
                        size: a,
                        variant: y,
                        onClick: () => {
                            (S(!0),
                                (0, d.i)("Copied!"),
                                (0, c.D)(g),
                                l?.(),
                                setTimeout(() => F() && S(!1), 2e3));
                        },
                        icon: C ? i.CheckIcon : e,
                        className: (0, o.$)(C ? "color-fg-success" : void 0, k),
                        ...b,
                    },
                    _ = (0, r.useId)();
                return f
                    ? (0, n.jsx)(s.K, { ...I, "aria-label": v, disabled: !0 })
                    : (0, n.jsx)(u.m, {
                          text: L,
                          "aria-label": v,
                          type: "label",
                          id: _,
                          "aria-hidden": !0,
                          ...p,
                          className: (0, o.$)(m.tooltip, p?.className),
                          children: (0, n.jsx)(s.K, {
                              ...I,
                              "aria-labelledby": _,
                          }),
                      });
            }
            try {
                g.displayName || (g.displayName = "CopyToClipboardButton");
            } catch {}
        },
        3607: (e, a, l) => {
            l.d(a, { Y0: () => K, $I: () => _ });
            var n = l(74848),
                t = l(21728),
                i = l(96540),
                s = l(55847),
                r = l(10569),
                o = l(15385),
                u = l(38911),
                d = l(38621),
                c = l(39459),
                m = l(85788),
                g = l(8367),
                p = l(27851),
                y = l(40319),
                h = l(7479),
                k = l(75367);
            let f = {
                bannerOuterWrapper:
                    "GlobalSSOBanner-module__bannerOuterWrapper--gIJGf",
                bannerInnerWrapper:
                    "GlobalSSOBanner-module__bannerInnerWrapper--EKrn4",
                banner: "GlobalSSOBanner-module__banner--HjESa",
            };
            function b({ children: e, hidden: a }) {
                let [l, t] = i.useState("visible"),
                    s = i.useRef(null),
                    r = i.useRef(void 0);
                return (i.useEffect(() => {
                    if (a && "visible" === l) {
                        t("collapsing");
                        let e = s.current;
                        if (e) {
                            let a = e.getBoundingClientRect().height;
                            ((r.current = a), (e.style.height = `${a}px`));
                        }
                    } else if ("collapsing" === l) {
                        let e = setTimeout(() => {
                            t("hidden");
                        }, 300);
                        return () => {
                            clearTimeout(e);
                        };
                    }
                }, [a, l]),
                "hidden" === l)
                    ? null
                    : (0, n.jsx)("div", {
                          ref: s,
                          style: {
                              height:
                                  "visible" === l ? (r.current ?? "auto") : 0,
                          },
                          className: f.bannerOuterWrapper,
                          children: (0, n.jsx)("div", {
                              className: f.bannerInnerWrapper,
                              style: {
                                  transform:
                                      "visible" === l
                                          ? void 0
                                          : `translateY(-${r.current ?? 0}px)`,
                              },
                              children: e,
                          }),
                      });
            }
            try {
                (300).displayName || ((300).displayName = "ANIMATION_DURATION");
            } catch {}
            try {
                b.displayName || (b.displayName = "SlideDismiss");
            } catch {}
            var C = l(64262);
            let S = "dismissed_sso_orgs",
                F = "global_sso_banner";
            function v(e) {
                return (
                    "object" == typeof e &&
                    null !== e &&
                    "id" in e &&
                    "name" in e &&
                    "login" in e
                );
            }
            function L(e, a) {
                let l = `/orgs/${encodeURIComponent(e)}/sso`,
                    n = a.pathname + a.search + a.hash;
                return `${l}?return_to=${encodeURIComponent(n)}`;
            }
            function I(e) {
                let a,
                    l,
                    i,
                    u,
                    d,
                    m = (0, t.c)(20),
                    { ssoOrgs: g, redirectLocation: p } = e,
                    { sendClickAnalyticsEvent: y } = (0, k.S)();
                if (0 === g.length) return null;
                m[0] !== y
                    ? ((a = () => {
                          y({
                              category: F,
                              action: "click_single_sso_button",
                              label: "sso_authentication",
                          });
                      }),
                      (m[0] = y),
                      (m[1] = a))
                    : (a = m[1]);
                let h = a;
                m[2] !== y
                    ? ((l = (e) => {
                          y({
                              category: F,
                              action: "click_sso_dropdown_item",
                              label: `org:${e}`,
                          });
                      }),
                      (m[2] = y),
                      (m[3] = l))
                    : (l = m[3]);
                let f = l;
                if (1 === g.length) {
                    let e,
                        a,
                        l = g[0];
                    return void 0 === l
                        ? null
                        : (m[4] !== l.login || m[5] !== p
                              ? ((e = L(l.login, p)),
                                (m[4] = l.login),
                                (m[5] = p),
                                (m[6] = e))
                              : (e = m[6]),
                          m[7] !== h || m[8] !== e
                              ? ((a = (0, n.jsx)(s.Q, {
                                    as: "a",
                                    href: e,
                                    onClick: h,
                                    children: "Single sign-on",
                                })),
                                (m[7] = h),
                                (m[8] = e),
                                (m[9] = a))
                              : (a = m[9]),
                          a);
                }
                if (
                    (m[10] === Symbol.for("react.memo_cache_sentinel")
                        ? ((i = (0, n.jsx)(r.W.Button, {
                              size: "small",
                              children: "Single sign-on",
                          })),
                          (m[10] = i))
                        : (i = m[10]),
                    m[11] !== f || m[12] !== p || m[13] !== g)
                ) {
                    let e;
                    (m[15] !== f || m[16] !== p
                        ? ((e = (e) =>
                              (0, n.jsxs)(
                                  o.l.LinkItem,
                                  {
                                      href: L(e.login, p),
                                      onClick: () => f(e.name),
                                      children: [
                                          e.avatar_url &&
                                              (0, n.jsx)(o.l.LeadingVisual, {
                                                  children: (0, n.jsx)(c.r, {
                                                      size: 24,
                                                      src: e.avatar_url,
                                                  }),
                                              }),
                                          e.name,
                                      ],
                                  },
                                  e.login
                              )),
                          (m[15] = f),
                          (m[16] = p),
                          (m[17] = e))
                        : (e = m[17]),
                        (u = g.map(e)),
                        (m[11] = f),
                        (m[12] = p),
                        (m[13] = g),
                        (m[14] = u));
                } else u = m[14];
                return (
                    m[18] !== u
                        ? ((d = (0, n.jsxs)(r.W, {
                              children: [
                                  i,
                                  (0, n.jsx)(r.W.Overlay, {
                                      children: (0, n.jsx)(o.l, {
                                          children: u,
                                      }),
                                  }),
                              ],
                          })),
                          (m[18] = u),
                          (m[19] = d))
                        : (d = m[19]),
                    d
                );
            }
            function _(e) {
                let a,
                    l,
                    s,
                    r,
                    o,
                    c,
                    y,
                    C,
                    v,
                    L = (0, t.c)(22),
                    { ssoOrgs: _ } = e,
                    K = (0, m.zy)(),
                    [w, N] = i.useState("visible"),
                    j = i.useRef(!1),
                    { sendClickAnalyticsEvent: R } = (0, k.S)();
                if (
                    (L[0] !== _.length
                        ? ((a = () => {
                              !j.current &&
                                  _.length > 0 &&
                                  ((0, p.G7)("record_sso_banner_metrics") &&
                                      (0, h.i)({
                                          incrementKey:
                                              "GLOBAL_SSO_BANNER_DISPLAYED",
                                          requestUrl: window.location.href,
                                      }),
                                  (j.current = !0));
                          }),
                          (L[0] = _.length),
                          (L[1] = a))
                        : (a = L[1]),
                    L[2] !== _
                        ? ((l = [_]), (L[2] = _), (L[3] = l))
                        : (l = L[3]),
                    i.useEffect(a, l),
                    0 === _.length)
                )
                    return null;
                L[4] !== R || L[5] !== _
                    ? ((s = () => {
                          (R({
                              category: F,
                              action: "click_dismiss_button",
                              label: "banner_dismissed",
                          }),
                              N("hidden"));
                          let e = _.map((e) => e.id).sort(),
                              a = new Date(Date.now() + 2592e6).toUTCString();
                          ((0, g.Yj)(S), (0, g.TV)(S, JSON.stringify(e), a));
                      }),
                      (L[4] = R),
                      (L[5] = _),
                      (L[6] = s))
                    : (s = L[6]);
                let T = s;
                L[7] !== _
                    ? ((r = () => {
                          if (0 === _.length)
                              return "Single sign-on to see results";
                          let e = _.slice(0, 3),
                              a = _.length - 3,
                              l =
                                  1 === _.length
                                      ? "organization"
                                      : "organizations";
                          return (0, n.jsxs)(n.Fragment, {
                              children: [
                                  "Single sign-on to see results in the ",
                                  (() => {
                                      let l = e.map(x);
                                      if (1 === l.length) return l[0];
                                      {
                                          if (2 === l.length)
                                              return (0, n.jsxs)(n.Fragment, {
                                                  children: [
                                                      l[0],
                                                      " and ",
                                                      l[1],
                                                  ],
                                              });
                                          let e = l.length - 1,
                                              t = (0, n.jsxs)(n.Fragment, {
                                                  children: [
                                                      l[0],
                                                      ", ",
                                                      l[1],
                                                      ", and ",
                                                      l[e],
                                                  ],
                                              });
                                          return a > 0
                                              ? (0, n.jsxs)(n.Fragment, {
                                                    children: [
                                                        t,
                                                        ", and ",
                                                        a,
                                                        " more",
                                                    ],
                                                })
                                              : t;
                                      }
                                  })(),
                                  " ",
                                  l,
                              ],
                          });
                      }),
                      (L[7] = _),
                      (L[8] = r))
                    : (r = L[8]);
                let P = r,
                    A = "visible" !== w;
                return (
                    L[9] === Symbol.for("react.memo_cache_sentinel")
                        ? ((o = (0, n.jsx)(d.ShieldLockIcon, {})), (L[9] = o))
                        : (o = L[9]),
                    L[10] !== P
                        ? ((c = P()), (L[10] = P), (L[11] = c))
                        : (c = L[11]),
                    L[12] !== K || L[13] !== _
                        ? ((y = (0, n.jsx)(I, {
                              ssoOrgs: _,
                              redirectLocation: K,
                          })),
                          (L[12] = K),
                          (L[13] = _),
                          (L[14] = y))
                        : (y = L[14]),
                    L[15] !== T || L[16] !== c || L[17] !== y
                        ? ((C = (0, n.jsx)(u.l, {
                              title: "Single-sign on",
                              className: f.banner,
                              hideTitle: !0,
                              icon: o,
                              description: c,
                              onDismiss: T,
                              primaryAction: y,
                              "data-testid": "global-sso-banner",
                          })),
                          (L[15] = T),
                          (L[16] = c),
                          (L[17] = y),
                          (L[18] = C))
                        : (C = L[18]),
                    L[19] !== A || L[20] !== C
                        ? ((v = (0, n.jsx)(b, { hidden: A, children: C })),
                          (L[19] = A),
                          (L[20] = C),
                          (L[21] = v))
                        : (v = L[21]),
                    v
                );
            }
            function x(e) {
                return (0, n.jsx)("strong", { children: e.name }, e.login);
            }
            function K() {
                let e,
                    a = (0, t.c)(2),
                    { ssoOrgs: l, suppressBanner: s } = (function () {
                        let { ssoOrgs: e, baseAvatarUrl: a } = (0, y.N)(),
                            { current_sso_orgs_match_dismissed_cookie: l } =
                                (0, C.X)() ?? {},
                            n = i.useMemo(
                                () =>
                                    e
                                        .filter(v)
                                        .map((e) => ({
                                            ...e,
                                            avatar_url: `${a}/u/${e.id}`,
                                        })),
                                [e, a]
                            );
                        return {
                            suppressBanner:
                                !0 === l ||
                                (function (e) {
                                    let a = (function () {
                                        let e = (0, g.Ri)(S);
                                        if (e?.value)
                                            try {
                                                let a = JSON.parse(e.value);
                                                return Array.isArray(a)
                                                    ? a
                                                    : [];
                                            } catch (e) {
                                                (0, g.Yj)(S);
                                            }
                                        return [];
                                    })();
                                    return (
                                        e.length === a.length &&
                                        e.every((e) => a.includes(e.id))
                                    );
                                })(n),
                            ssoOrgs: n,
                            baseAvatarUrl: a,
                        };
                    })();
                return 0 === l.length || !(0, p.G7)("global_sso_banner") || s
                    ? null
                    : (a[0] !== l
                          ? ((e = (0, n.jsx)(_, { ssoOrgs: l })),
                            (a[0] = l),
                            (a[1] = e))
                          : (e = a[1]),
                      e);
            }
            try {
                I.displayName || (I.displayName = "SSOActionMenu");
            } catch {}
            try {
                _.displayName || (_.displayName = "GlobalSsoBanner");
            } catch {}
            try {
                K.displayName || (K.displayName = "ContextualGlobalSsoBanner");
            } catch {}
        },
        85466: (e, a, l) => {
            l.d(a, { v: () => d });
            var n,
                t = l(74848),
                i = l(55463),
                s = l(87330),
                r = l(94977),
                o = l(96540);
            let u = {
                    IconButtonWithTooltipContainer:
                        "IconButtonWithTooltip-module__IconButtonWithTooltipContainer--U33sh",
                },
                d = (0, o.forwardRef)(
                    (
                        {
                            label: e,
                            hideTooltip: a,
                            icon: l,
                            shortcut: n,
                            sx: d,
                            tooltipDirection: c,
                            ...m
                        },
                        g
                    ) => {
                        let p = (0, o.useCallback)(() => {
                            let s = { display: "flex" };
                            return (
                                c?.includes("w") &&
                                    (s = { ...s, pl: 2, ml: -2 }),
                                c?.includes("e") &&
                                    (s = { ...s, pr: 2, mr: -2 }),
                                c?.includes("s") &&
                                    (s = { ...s, pb: 2, mb: -2 }),
                                (c?.includes("n") || !c) &&
                                    (s = { ...s, pt: 2, mt: -2 }),
                                a
                                    ? (0, t.jsx)(l, {})
                                    : (0, t.jsx)(r.A, {
                                          "aria-label": `${e}${
                                              n
                                                  ? ` ${n
                                                        .split(" ")
                                                        .map(
                                                            (e) =>
                                                                `<${e
                                                                    .replaceAll(
                                                                        "Mod",
                                                                        (0,
                                                                        i.U0)()
                                                                            ? "Cmd"
                                                                            : "Ctrl"
                                                                    )
                                                                    .replaceAll(
                                                                        "Command",
                                                                        "Cmd"
                                                                    )
                                                                    .replaceAll(
                                                                        "Control",
                                                                        "Ctrl"
                                                                    )
                                                                    .toLowerCase()}>`
                                                        )
                                                        .join(" / ")}`
                                                  : ""
                                          }`,
                                          className:
                                              "icon-button-with-tooltip__tooltip",
                                          direction: c,
                                          sx: s,
                                          children: (0, t.jsx)(l, {}),
                                      })
                            );
                        }, [a, e, n, c, l]);
                        return (0, t.jsx)(s.K, {
                            unsafeDisableTooltip: !0,
                            ref: g,
                            icon: p,
                            "aria-keyshortcuts": n
                                ? n.replaceAll(
                                      "{CMD_CTRL}",
                                      (0, i.U0)() ? "Command" : "Control"
                                  )
                                : void 0,
                            sx: d,
                            ...m,
                            "aria-label": e,
                            className: u.IconButtonWithTooltipContainer,
                        });
                    }
                );
            d.displayName = "IconButtonWithTooltip";
            try {
                (n = TooltippedIcon).displayName ||
                    (n.displayName = "TooltippedIcon");
            } catch {}
        },
        90051: (e, a, l) => {
            l.d(a, { a: () => N });
            var n = l(74848),
                t = l(70170),
                i = l(96679),
                s = l(42080),
                r = l(99837),
                o = l(74021),
                u = l(64515),
                d = l(16255),
                c = l(34164),
                m = l(24249),
                g = l(96540),
                p = l(15385),
                y = l(45221),
                h = l(59214),
                k = l(81007);
            let f = {
                    Overlay_0:
                        "AutocompleteSuggestions-module__Overlay_0--QuLJW",
                    suggestion:
                        "AutocompleteSuggestions-module__suggestion--qvk1X",
                },
                b = new Set([
                    " ",
                    `
`,
                ]),
                C = new Set([
                    ".",
                    `
`,
                ]),
                S = (e) => ("string" == typeof e ? e : e.value),
                F = (e) =>
                    "string" == typeof e
                        ? e
                        : null === e.value
                          ? e.key
                          : (e.key ?? e.value),
                v =
                    (...e) =>
                    (a) => {
                        for (let l of [...e].reverse())
                            a.isDefaultPrevented() || l?.(a);
                    },
                L = () =>
                    (0, n.jsxs)(n.Fragment, {
                        children: [
                            (0, n.jsx)(p.l.Item, {
                                disabled: !0,
                                children: (0, n.jsx)(k.r, {}),
                            }),
                            (0, n.jsx)(p.l.Item, {
                                disabled: !0,
                                children: (0, n.jsx)(k.r, {}),
                            }),
                            (0, n.jsx)(p.l.Item, {
                                disabled: !0,
                                children: (0, n.jsx)(k.r, {}),
                            }),
                        ],
                    }),
                I = ({
                    suggestion: e,
                    onSelect: a,
                    isActive: l,
                    id: t,
                    parentRole: i,
                }) => {
                    let s = {
                        id: t,
                        children: S(e),
                        role: "menu" === i ? "menuitem" : "option",
                        active: l,
                        className: f.suggestion,
                        "aria-selected": ("listbox" === i && !!l) || void 0,
                        onMouseDown: (e) => {
                            (e.preventDefault(), a());
                        },
                    };
                    return "string" == typeof e
                        ? (0, n.jsx)(p.l.Item, { ...s })
                        : e.render(s);
                },
                _ = ({
                    suggestions: e,
                    portalName: a,
                    triggerCharCoords: l,
                    onClose: t,
                    onCommit: i,
                    inputRef: s,
                    visible: r,
                    defaultPlacement: o,
                    activeSuggestion: u,
                    getSuggestionId: d,
                    id: c,
                    menuTitle: m,
                    role: k,
                }) => {
                    let b = (0, g.useRef)(null),
                        [C, S] = (0, g.useState)(0);
                    (0, y.A)(
                        function () {
                            let e = b.current?.offsetHeight ?? 0,
                                a = l.top + l.height,
                                n = a + e > window.innerHeight,
                                t = l.top - e,
                                i = t < 0,
                                s = {
                                    below: n && !i ? t : a,
                                    above: i && !n ? a : t,
                                }[o];
                            S(Number.isNaN(s) ? 0 : s);
                        },
                        [l.top, l.height, e, r, o]
                    );
                    let v = (0, n.jsx)(n.Fragment, {
                            children:
                                "loading" === e
                                    ? (0, n.jsx)(L, {})
                                    : e?.map((e) =>
                                          (0, n.jsx)(
                                              I,
                                              {
                                                  suggestion: e,
                                                  id: d(e),
                                                  onSelect: () => i(e),
                                                  isActive: u === e,
                                                  parentRole: k,
                                              },
                                              F(e)
                                          )
                                      ),
                        }),
                        _ = (0, g.useId)();
                    return r
                        ? (0, n.jsx)(h.Ay, {
                              onEscape: t,
                              onClickOutside: t,
                              returnFocusRef: s,
                              preventFocusOnOpen: !0,
                              portalContainerName: a,
                              top: C,
                              left: l.left,
                              ref: b,
                              className: f.Overlay_0,
                              children: (0, n.jsx)(p.l, {
                                  role: k,
                                  id: c,
                                  "aria-label": m
                                      ? void 0
                                      : "Autocomplete suggestions",
                                  "aria-labelledby": m ? _ : void 0,
                                  children: m
                                      ? (0, n.jsxs)(p.l.Group, {
                                            children: [
                                                (0, n.jsx)(p.l.GroupHeading, {
                                                    id: _,
                                                    children: m,
                                                }),
                                                v,
                                            ],
                                        })
                                      : v,
                              }),
                          })
                        : (0, n.jsx)(n.Fragment, {});
                };
            try {
                L.displayName || (L.displayName = "LoadingIndicator");
            } catch {}
            try {
                I.displayName || (I.displayName = "SuggestionListItem");
            } catch {}
            try {
                _.displayName || (_.displayName = "AutocompleteSuggestions");
            } catch {}
            let x = {
                    container: "InlineAutocomplete-module__container--UwGMb",
                    fullWidth: "InlineAutocomplete-module__fullWidth--X6eXo",
                },
                K = (e) => {
                    try {
                        return e.selectionStart;
                    } catch (e) {
                        if (e instanceof TypeError) return null;
                        throw e;
                    }
                },
                w = () => {},
                N = ({
                    triggers: e,
                    suggestions: a,
                    onShowSuggestions: l,
                    onHideSuggestions: p,
                    onSelectSuggestion: y,
                    style: h,
                    children: k,
                    tabInsertsSuggestions: f = !1,
                    suggestionsPlacement: L = "below",
                    portalName: I,
                    fullWidth: N = !1,
                    title: j,
                    asMenu: R,
                    ...T
                }) => {
                    let [, P] = (0, g.useState)(0),
                        A = (0, o.Lf)(T),
                        M = (0, g.useRef)(null);
                    (0, u.T)(k.ref ?? w, M);
                    let D = (function (e, a) {
                            if (
                                (g.Children.only(e),
                                a.current &&
                                    !(a.current instanceof HTMLInputElement) &&
                                    !(a.current instanceof HTMLTextAreaElement))
                            )
                                throw TypeError(
                                    "AutocompleteTextarea child must be a component that forwards a ref and props to an <input> or <textarea> element."
                                );
                            return e;
                        })(k, M),
                        V = (0, r.H)({
                            inputRef: M,
                            fallbackEventHandler: D.props.onChange ?? w,
                        }),
                        E = (0, g.useRef)(null),
                        q = null !== a && a.length > 0,
                        [O, B] = (0, g.useState)(),
                        $ = Array.isArray(a)
                            ? (a.find((e) => F(e) === O) ?? a[0])
                            : void 0;
                    (O && !q && B(void 0),
                        (0, g.useEffect)(() => {
                            if (q) {
                                let e = (0, t.n)(() => P((e) => e + 1), 100);
                                return (
                                    document.addEventListener("scroll", e, {
                                        capture: !0,
                                    }),
                                    () => {
                                        document.removeEventListener(
                                            "scroll",
                                            e,
                                            { capture: !0 }
                                        );
                                    }
                                );
                            }
                        }, [q]));
                    let Q =
                            M.current && E.current && q
                                ? new m.Qr(
                                      M.current,
                                      (K(M.current) ?? 0) -
                                          E.current.query.length
                                  ).getBoundingClientRect()
                                : { top: 0, left: 0, height: 0 },
                        U = (e) => {
                            if (!$ || !Array.isArray(a)) return;
                            let l = (e) => {
                                B(e ? F(e) : void 0);
                            };
                            switch (e) {
                                case "up":
                                    l(a[a.indexOf($) - 1] ?? a.at(-1));
                                    break;
                                case "down":
                                    l(a[a.indexOf($) + 1] ?? a[0]);
                                    break;
                                case "start":
                                    l(a[0]);
                                    break;
                                case "end":
                                    l(a.at(-1));
                            }
                        },
                        H = (e = $) => {
                            if (!e) return;
                            let a = ((e) =>
                                    "object" == typeof e && null === e.value)(
                                    e
                                ),
                                l = S(e) ?? "";
                            if (!M.current || !E.current) return;
                            let { query: n, trigger: t } = E.current,
                                i = K(M.current) ?? 0,
                                s = n.length + t.triggerChar.length,
                                r = i - s,
                                o =
                                    a || (t.keepTriggerCharOnCommit ?? !0)
                                        ? t.triggerChar
                                        : "",
                                u = !a && (t.insertSpaceOnCommit ?? !0),
                                d = `${o}${l}${u ? " " : ""}`;
                            (p(),
                                V(d, [r, r + s]),
                                y?.({
                                    suggestion: e,
                                    trigger: t,
                                    query: n,
                                    target: M.current,
                                }));
                        },
                        z = (0, g.useId)(),
                        W = (e) => `${z}-${F(e)}`,
                        G = !R,
                        Z = (0, g.cloneElement)(D, {
                            ...A,
                            onBlur: v(D.props.onBlur, () => {
                                p();
                            }),
                            onKeyDownCapture: v(
                                D.props.onKeyDownCapture,
                                (e) => {
                                    if (q)
                                        switch (e.key) {
                                            case "ArrowRight":
                                            case "ArrowLeft":
                                                p();
                                                break;
                                            case "Tab":
                                                f || p();
                                        }
                                }
                            ),
                            onChange: v(D.props.onChange, (a) => {
                                let n = K(a.currentTarget);
                                if (null === n) return void p();
                                let t = ((e, a, l) => {
                                    let n = e.sort(
                                        (e, a) =>
                                            a.triggerChar.length -
                                            e.triggerChar.length
                                    );
                                    for (
                                        let e = l - 1, t = "", i = n;
                                        e >= 0 && i.length > 0;
                                        e--
                                    ) {
                                        let l = a[e] ?? "";
                                        for (let n of ((t = l + t),
                                        b.has(l) &&
                                            (i = i.filter((e) => e.multiWord)),
                                        C.has(l) &&
                                            (i = i.filter((e) => !e.multiWord)),
                                        i.filter((e) =>
                                            t.startsWith(e.triggerChar)
                                        ))) {
                                            let l = a[e - 1] ?? "",
                                                s = t[1] ?? "";
                                            if (
                                                (!l || /[\s([]/.test(l)) &&
                                                (!s || !/\s/.test(s))
                                            )
                                                return {
                                                    trigger: n,
                                                    query: t.slice(
                                                        n.triggerChar.length
                                                    ),
                                                };
                                            i = i.filter((e) => e !== n);
                                        }
                                    }
                                    return null;
                                })(e, a.currentTarget.value, n);
                                ((E.current = t && {
                                    ...t,
                                    target: a.currentTarget,
                                }),
                                    E.current ? l(E.current) : p());
                            }),
                            ref: M,
                            role: q && G ? "combobox" : D.props.role,
                            "aria-expanded":
                                q && G ? "true" : D.props["aria-expanded"],
                            "aria-activedescendant": $
                                ? W($)
                                : D.props["aria-activedescendant"],
                            "aria-controls":
                                q && G ? z : D.props["aria-controls"],
                            "aria-owns": q && R ? z : D.props["aria-owns"],
                            "aria-autocomplete":
                                q && G ? "list" : D.props["aria-autocomplete"],
                            "aria-haspopup":
                                q && G ? "listbox" : D.props["aria-haspopup"],
                        }),
                        X = q
                            ? "loading" === a
                                ? "Loading autocomplete suggestions\u2026"
                                : G
                                  ? `${a.length} autocomplete ${1 === a.length ? "suggestion" : "suggestions"} available; "${S(a[0])}" is highlighted. Press ${f ? "Enter or Tab" : "Enter"} to select.`
                                  : ""
                            : "";
                    return (0, n.jsxs)(s.tL, {
                        commands: q
                            ? {
                                  "github:cancel": () => p(),
                                  "github:select": () => H(),
                                  "github:focus-next": f ? () => H() : void 0,
                                  "github:down": () => U("down"),
                                  "github:up": () => U("up"),
                                  "github:go-to-start": () => U("start"),
                                  "github:go-to-end": () => U("end"),
                              }
                            : {},
                        className: (0, c.$)(x.container, N && x.fullWidth),
                        style: h,
                        children: [
                            Z,
                            i.KJ &&
                                (0, n.jsx)(_, {
                                    id: z,
                                    suggestions: a,
                                    inputRef: M,
                                    onCommit: H,
                                    onClose: p,
                                    triggerCharCoords: Q,
                                    visible: q,
                                    defaultPlacement: L,
                                    portalName: I,
                                    activeSuggestion: $,
                                    getSuggestionId: W,
                                    menuTitle: j,
                                    role: R ? "menu" : "listbox",
                                }),
                            i.KJ &&
                                (0, n.jsx)(d.Z, {
                                    children: (0, n.jsx)("span", {
                                        "aria-live": "assertive",
                                        "aria-atomic": !0,
                                        style: {
                                            clipPath: "circle(0)",
                                            position: "absolute",
                                        },
                                        children: X,
                                    }),
                                }),
                        ],
                    });
                };
            try {
                N.displayName || (N.displayName = "InlineAutocomplete");
            } catch {}
        },
        57124: (e, a, l) => {
            l.d(a, { W: () => f, B: () => IssueTypeFilterProvider });
            let n = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "name",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "owner",
                        },
                    ],
                    a = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    l = [{ kind: "Literal", name: "first", value: 100 }],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueTypeFilterProviderIssueTypeQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: l,
                                        concreteType: "IssueTypeConnection",
                                        kind: "LinkedField",
                                        name: "issueTypes",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "IssueTypeEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueType",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [n],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: "issueTypes(first:100)",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "IssueTypeFilterProviderIssueTypeQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: l,
                                        concreteType: "IssueTypeConnection",
                                        kind: "LinkedField",
                                        name: "issueTypes",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "IssueTypeEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueType",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [n, t],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: "issueTypes(first:100)",
                                    },
                                    t,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "deecf4e5b9723fe1e223989471673f53",
                        metadata: {},
                        name: "IssueTypeFilterProviderIssueTypeQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            n.hash = "015cbd12b22f8ce7578562a617177773";
            let t = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "suggestedIssueTypeNames",
                    storageKey: null,
                };
                return {
                    fragment: {
                        argumentDefinitions: [],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueTypeFilterProviderViewerIssueTypeQuery",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "viewer",
                                plural: !1,
                                selections: [e],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [],
                        kind: "Operation",
                        name: "IssueTypeFilterProviderViewerIssueTypeQuery",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "viewer",
                                plural: !1,
                                selections: [
                                    e,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "58ebbad60258ea0c9eb795e67cc2b575",
                        metadata: {},
                        name: "IssueTypeFilterProviderViewerIssueTypeQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            t.hash = "765a25834ce6bc541a1d98b6355cf514";
            let i = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "login",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "number",
                        },
                    ],
                    a = [
                        {
                            kind: "Variable",
                            name: "login",
                            variableName: "login",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "number",
                            variableName: "number",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "suggestedIssueTypeNames",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueTypeFilterProviderProjectIssueTypeQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Organization",
                                kind: "LinkedField",
                                name: "organization",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: l,
                                        concreteType: "ProjectV2",
                                        kind: "LinkedField",
                                        name: "projectV2",
                                        plural: !1,
                                        selections: [n],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "IssueTypeFilterProviderProjectIssueTypeQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Organization",
                                kind: "LinkedField",
                                name: "organization",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: l,
                                        concreteType: "ProjectV2",
                                        kind: "LinkedField",
                                        name: "projectV2",
                                        plural: !1,
                                        selections: [n, t],
                                        storageKey: null,
                                    },
                                    t,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "4ecab7512fd17375c718ee060e7c9130",
                        metadata: {},
                        name: "IssueTypeFilterProviderProjectIssueTypeQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            i.hash = "54031af5ea97af051011bdae3b3dc9af";
            var s = l(40811),
                r = l(50348),
                o = l(71073),
                u = l(79607),
                d = l(38621),
                c = l(91385),
                m = l(18312),
                g = l(69487);
            function p(e, a, l) {
                if (!a.has(e))
                    throw TypeError(
                        "attempted to get private field on non-instance"
                    );
                return l;
            }
            function y(e, a) {
                if (a.has(e))
                    throw TypeError(
                        "Cannot initialize the same private elements twice on an object"
                    );
                a.add(e);
            }
            function h(e, a, l) {
                return (
                    a in e
                        ? Object.defineProperty(e, a, {
                              value: l,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                          })
                        : (e[a] = l),
                    e
                );
            }
            let k = [
                    {
                        value: "issue",
                        displayName: "Issue",
                        priority: 1,
                        icon: d.IssueOpenedIcon,
                    },
                    {
                        value: "pr",
                        displayName: "Pull Request",
                        priority: 2,
                        icon: d.GitPullRequestIcon,
                    },
                ],
                f = {
                    displayName: "Type",
                    key: "type",
                    priority: s.a6,
                    icon: d.IssueOpenedIcon,
                    description: "Specify the type of issue to search for",
                };
            var b = new WeakSet(),
                C = new WeakSet(),
                S = new WeakSet();
            let IssueTypeFilterProvider = class IssueTypeFilterProvider extends r.kr {
                async getSuggestions(e, a, l, n) {
                    let t = (0, o.DS)(a, n),
                        i =
                            (await this.processSuggestions(
                                e,
                                a,
                                p(this, b, F).bind(this),
                                n
                            )) || [],
                        s = [];
                    if (
                        (0, o.uT)(a) &&
                        this.options.filterTypes.valueless &&
                        !a.raw.startsWith("-")
                    ) {
                        let e = (0, o.jL)(this.displayName, this.icon);
                        s.push(e);
                    }
                    if (
                        (0, o.uT)(a) &&
                        this.options.filterTypes.hasValue &&
                        !a.raw.startsWith("-")
                    ) {
                        let e = (0, o.Ms)(this.displayName, this.icon);
                        s.push(e);
                    }
                    for (let e of i) {
                        let { value: a, displayName: l } = e,
                            n = (0, o.I8)(a),
                            i = !!n && (0, c.qA)(t, n),
                            r = !!l && (0, c.qA)(t, l);
                        n &&
                            (i || r) &&
                            ((e.priority -= (0, u.dt)(t, n)), s.push(e));
                    }
                    return s;
                }
                async fetchSuggestions(e, a) {
                    if (!a) return [];
                    try {
                        if (
                            this.relayEnvironment &&
                            this.requestVariables &&
                            this.repositoryScope
                        ) {
                            let e = await (0, m.fetchQuery)(
                                    this.relayEnvironment,
                                    n,
                                    this.requestVariables,
                                    { fetchPolicy: "store-or-network" }
                                ).toPromise(),
                                a = e?.repository?.issueTypes?.edges || [],
                                l = [];
                            for (let e of a)
                                e &&
                                    e.node &&
                                    e.node.name &&
                                    l.push({ name: e.node.name });
                            return l;
                        }
                        if (
                            this.relayEnvironment &&
                            this.requestVariables &&
                            this.projectScope
                        ) {
                            let e = await (0, m.fetchQuery)(
                                    this.relayEnvironment,
                                    i,
                                    this.requestVariables,
                                    { fetchPolicy: "store-or-network" }
                                ).toPromise(),
                                a =
                                    e?.organization?.projectV2
                                        ?.suggestedIssueTypeNames || [];
                            return a?.map((e) => ({ name: e }));
                        }
                        if (
                            this.relayEnvironment &&
                            !this.projectScope &&
                            !this.repositoryScope
                        ) {
                            let e = await (0, m.fetchQuery)(
                                    this.relayEnvironment,
                                    t,
                                    {},
                                    { fetchPolicy: "store-or-network" }
                                ).toPromise(),
                                a = e?.viewer?.suggestedIssueTypeNames || [];
                            return a?.map((e) => ({ name: e }));
                        }
                    } catch {}
                    return [];
                }
                async validateFilterValue(e) {
                    try {
                        if (
                            this.relayEnvironment &&
                            this.requestVariables &&
                            this.repositoryScope
                        ) {
                            let a = await (0, m.fetchQuery)(
                                    this.relayEnvironment,
                                    n,
                                    this.requestVariables,
                                    { fetchPolicy: "store-or-network" }
                                ).toPromise(),
                                l = a?.repository?.issueTypes?.edges || [],
                                t = [];
                            for (let e of l)
                                e &&
                                    e.node &&
                                    e.node.name &&
                                    t.push({ name: e.node.name });
                            return t.find((a) => (0, o.SH)(a.name, e));
                        }
                        if (
                            this.relayEnvironment &&
                            this.requestVariables &&
                            this.projectScope
                        ) {
                            let a = await (0, m.fetchQuery)(
                                    this.relayEnvironment,
                                    i,
                                    this.requestVariables,
                                    { fetchPolicy: "store-or-network" }
                                ).toPromise(),
                                l =
                                    a?.organization?.projectV2
                                        ?.suggestedIssueTypeNames || [];
                            return { name: l?.find((a) => (0, o.SH)(a, e)) };
                        }
                        if (this.relayEnvironment) {
                            let a = await (0, m.fetchQuery)(
                                    this.relayEnvironment,
                                    t,
                                    {},
                                    { fetchPolicy: "store-or-network" }
                                ).toPromise(),
                                l = a?.viewer?.suggestedIssueTypeNames || [];
                            return { name: l?.find((a) => (0, o.SH)(a, e)) };
                        }
                    } catch {}
                    return null;
                }
                validateValue(e, a, l) {
                    let n = (0, o.M5)(a.value),
                        t = this.legacy
                            ? [...k.map(({ value: e }) => e), l?.name]
                            : [l?.name];
                    return (
                        0 !== t.length &&
                        !!n &&
                        !!t.find((e) => (0, o.SH)(e, n)) && {
                            value: (0, o.$4)(n) ?? "",
                            displayName: n,
                        }
                    );
                }
                async processSuggestions(e, a, l, n) {
                    if (!this.shouldGetSuggestions(a)) return null;
                    let t = (0, o.DS)(a, n),
                        i = (await this.fetchSuggestions(t, a)) ?? [];
                    return [
                        ...(this.legacy
                            ? k.map((e) => ({
                                  ...e,
                                  ariaLabel: `${e.displayName}, ${this.displayName}`,
                              }))
                            : []),
                        ...i.map((a) => l(a, t, e)),
                    ];
                }
                getValueRowProps(e) {
                    return {
                        text: e.displayName ?? (0, o.I8)(e.value) ?? "",
                        leadingVisual: (0, o.d7)({
                            value: e,
                            providerIcon: this.icon,
                        }),
                    };
                }
                constructor(e, a = !1, l, n, t) {
                    (super(f, {
                        ...e,
                        filterTypes: { ...e?.filterTypes, multiValue: !0 },
                    }),
                        y(this, b),
                        y(this, C),
                        y(this, S),
                        h(this, "filterValues", void 0),
                        h(this, "relayEnvironment", void 0),
                        h(this, "repositoryScope", void 0),
                        h(this, "projectScope", void 0),
                        h(this, "owner", void 0),
                        h(this, "repo", void 0),
                        h(this, "legacy", void 0),
                        h(this, "requestVariables", void 0),
                        h(this, "requestDisposable", void 0),
                        (this.type = s.CH.Text),
                        (this.relayEnvironment = l),
                        (this.repositoryScope = n),
                        (this.projectScope = t),
                        (this.requestVariables = p(this, C, v).call(this)),
                        (this.requestDisposable = p(this, S, L).call(this)),
                        (this.legacy = a));
                }
            };
            function F(e, a) {
                let { name: l } = e,
                    n = 3;
                return (
                    a && l && (n -= (0, u.dt)(a, l)),
                    {
                        type: s.ak.Value,
                        displayName: l,
                        ariaLabel: `${l}, ${this.displayName}`,
                        value: (0, o.$4)(l) ?? "",
                        inlineDescription: !0,
                        priority: n,
                        icon: this.icon,
                    }
                );
            }
            function v() {
                if (this.repositoryScope) {
                    let e = this.repositoryScope.split("/");
                    return { owner: e[0] || "", name: e[1] || "" };
                }
                if (
                    this.projectScope?.login &&
                    this.projectScope?.projectNumber
                )
                    return {
                        login: this.projectScope.login,
                        number: this.projectScope.projectNumber,
                    };
            }
            function L() {
                if (this.relayEnvironment)
                    if (this.requestVariables && this.repositoryScope) {
                        let e = (0, g.getRequest)(n),
                            a = (0, g.createOperationDescriptor)(
                                e,
                                this.requestVariables
                            );
                        return this.relayEnvironment.retain(a);
                    } else if (this.requestVariables && this.projectScope) {
                        let e = (0, g.getRequest)(i),
                            a = (0, g.createOperationDescriptor)(
                                e,
                                this.requestVariables
                            );
                        return this.relayEnvironment.retain(a);
                    } else {
                        let e = (0, g.getRequest)(t),
                            a = (0, g.createOperationDescriptor)(e, {});
                        return this.relayEnvironment.retain(a);
                    }
            }
        },
        34700: (e, a, l) => {
            l.d(a, { X: () => r });
            var n = l(74848),
                t = l(47139),
                i = l(56693),
                s = l(90735);
            let r = ({
                children: e = "Preview",
                feedbackUrl: a,
                className: l,
            }) =>
                (0, n.jsx)(s.V, {
                    className: l,
                    label: (0, n.jsx)(t.A, { variant: "success", children: e }),
                    link: a ? (0, n.jsx)(i.A, { feedbackUrl: a }) : void 0,
                });
            try {
                r.displayName || (r.displayName = "BetaLabel");
            } catch {}
        },
        46404: (e, a, l) => {
            l.d(a, { z: () => d });
            var n = l(74848),
                t = l(98386),
                i = l(34164),
                s = l(96540),
                r = l(78563),
                o = l(510);
            let u = {
                default: "DescriptionItem-module__default--HJ0Qf",
                compact: "DescriptionItem-module__compact--_BAuz",
            };
            function d({ children: e, className: a, ...l }) {
                let { variant: d } = (0, r.e)(),
                    { setDescription: c } = (0, o.L)(),
                    m = (0, s.useRef)(null);
                return (
                    (0, s.useEffect)(() => {
                        if (m.current) {
                            let e = Array.from(
                                m.current?.querySelectorAll("[aria-label]")
                            ).reduce(
                                (e, a) =>
                                    e + a.getAttribute("aria-label")?.trim(),
                                ""
                            );
                            (!e &&
                                m.current.textContent &&
                                (e = m.current.textContent.trim()),
                                c(e));
                        }
                    }, [c]),
                    (0, n.jsx)("div", {
                        ref: m,
                        ...(0, t.G)("list-view-item-descriptionitem"),
                        ...l,
                        className: (0, i.$)(
                            u.default,
                            "compact" === d && u.compact,
                            a
                        ),
                        children: e,
                    })
                );
            }
            try {
                d.displayName || (d.displayName = "ListItemDescriptionItem");
            } catch {}
        },
        42265: (e, a, l) => {
            l.d(a, { B: () => o });
            var n = l(74848),
                t = l(98386),
                i = l(34164),
                s = l(89992);
            let r = {
                    container: "LeadingContent-module__container--NoK8W",
                    isSelectable: "LeadingContent-module__isSelectable--J9kYS",
                },
                o = ({ style: e, className: a, children: l }) => {
                    let { isSelectable: o } = (0, s.v)();
                    return (0, n.jsx)("div", {
                        className: (0, i.$)(
                            r.container,
                            o && r.isSelectable,
                            a
                        ),
                        ...(0, t.G)("list-view-item-leading-content"),
                        style: e,
                        children: l,
                    });
                };
            try {
                o.displayName || (o.displayName = "ListItemLeadingContent");
            } catch {}
        },
        67307: (e, a, l) => {
            l.d(a, { e: () => p });
            var n = l(74848),
                t = l(98386),
                i = l(53110),
                s = l(34164),
                r = l(96540),
                o = l(78563);
            let u = {
                outer: "LeadingVisual-module__outer--SJchr",
                hasNewActivity: "LeadingVisual-module__hasNewActivity--soQyL",
                defaultVariant: "LeadingVisual-module__defaultVariant--ITyiW",
                inner: "LeadingVisual-module__inner--O92jr",
            };
            var d = l(98391),
                c = l(65710);
            let m = { container: "UnreadIndicator-module__container--RzNLy" },
                g = () =>
                    (0, n.jsx)("div", {
                        className: m.container,
                        children: (0, n.jsx)("span", {
                            className: "sr-only",
                            ...(0, t.G)("list-view-item-unread-indicator"),
                            children: "New activity.",
                        }),
                    });
            try {
                g.displayName || (g.displayName = "ListItemUnreadIndicator");
            } catch {}
            function p({
                icon: e,
                color: a,
                description: l,
                newActivity: m = !1,
                className: p,
                children: y,
                ...h
            }) {
                let { variant: k } = (0, o.e)(),
                    { setStatus: f } = (0, c.x)(),
                    { setHasNewActivity: b } = (0, d.I)(),
                    C = l?.trim();
                return (
                    (0, r.useEffect)(() => {
                        b(m);
                    }, [m, b]),
                    (0, r.useEffect)(() => {
                        C && f(C);
                    }, [f, C]),
                    (0, n.jsxs)("div", {
                        className: (0, s.$)(
                            u.outer,
                            "default" === k && u.defaultVariant,
                            m && u.hasNewActivity,
                            p
                        ),
                        ...h,
                        children: [
                            (0, n.jsx)("div", {
                                children: (0, n.jsxs)("div", {
                                    ...(0, t.G)("list-view-leading-visual"),
                                    className: u.inner,
                                    children: [
                                        e &&
                                            (0, n.jsx)(i.A, {
                                                "aria-label": "",
                                                icon: e,
                                                color: a,
                                            }),
                                        y,
                                        C &&
                                            (0, n.jsx)("span", {
                                                className: "sr-only",
                                                ...(0, t.G)(
                                                    "leading-visual-text-description"
                                                ),
                                                children: C,
                                            }),
                                    ],
                                }),
                            }),
                            m && (0, n.jsx)(g, {}),
                        ],
                    })
                );
            }
            try {
                p.displayName || (p.displayName = "ListItemLeadingVisual");
            } catch {}
        },
        52369: (e, a, l) => {
            l.d(a, { V: () => r });
            var n = l(74848),
                t = l(98386),
                i = l(34164);
            let s = {
                metadata: "Metadata-module__metadata--yvrod",
                secondary: "Metadata-module__secondary--zMgLx",
                primary: "Metadata-module__primary--cJgJU",
                alignRight: "Metadata-module__alignRight--rp0_Z",
            };
            function r({ children: e, alignment: a, variant: l, ...r }) {
                return (0, n.jsx)("div", {
                    ...(0, t.G)("list-view-item-metadata-item"),
                    ...r,
                    className: (0, i.$)(
                        s.metadata,
                        "primary" === l ? s.primary : s.secondary,
                        "right" === a && s.alignRight,
                        r.className
                    ),
                    children: e,
                });
            }
            try {
                r.displayName || (r.displayName = "ListItemMetadata");
            } catch {}
        },
        81584: (e, a, l) => {
            l.d(a, { kx: () => v, ao: () => F });
            var n,
                t,
                i = l(74848),
                s = l(30422),
                r = l(45968),
                o = l(98386),
                u = l(34164),
                d = l(96540),
                c = l(78413),
                m = l(78563),
                g = l(96222),
                p = l(65607),
                y = l(89992);
            let h = {
                container: "Selection-module__container--VTcpJ",
                containerWithDragHandle:
                    "Selection-module__containerWithDragHandle--xEvss",
                dragTrigger: "Selection-module__dragTrigger--jIZMt",
                compact: "Selection-module__compact--LUlY8",
                checkbox: "Selection-module__checkbox--nZsSH",
                checkboxCompact: "Selection-module__checkboxCompact--pRIwD",
            };
            var k = l(87766),
                f = l(14918);
            let b = () => {
                let { variant: e } = (0, m.e)(),
                    { isSelectable: a, hasDragHandle: l } = (0, y.v)(),
                    { isSelected: n, onSelect: t } = (0, k.r)(),
                    { title: s } = (0, f.J)();
                return a
                    ? (0, i.jsxs)("div", {
                          className: l
                              ? h.containerWithDragHandle
                              : h.container,
                          ...(0, o.G)("list-view-item-selection"),
                          children: [
                              l &&
                                  (0, i.jsx)(g.BS.DragTrigger, {
                                      className: (0, u.$)(
                                          h.dragTrigger,
                                          "compact" === e && h.compact
                                      ),
                                  }),
                              (0, i.jsx)(p.A, {
                                  className:
                                      "default" === e
                                          ? h.checkbox
                                          : h.checkboxCompact,
                                  checked: n,
                                  onChange: () => t(!n),
                                  "aria-label": `Select: ${s}`,
                                  "data-listview-component": "selection-input",
                                  ...(0, o.G)("list-view-item-selection-input"),
                              }),
                          ],
                      })
                    : null;
            };
            try {
                b.displayName || (b.displayName = "ListItemSelection");
            } catch {}
            let C = {
                anchor: "Title-module__anchor--SyQM6",
                heading: "Title-module__heading--upUxW",
                compact: "Title-module__compact--qLTco",
                container: "Title-module__container--l9xi7",
                trailingBadgesSpacer:
                    "Title-module__trailingBadgesSpacer--TioiY",
                trailingBadgesContainer:
                    "Title-module__trailingBadgesContainer--XGsbF",
                inline: "Title-module__inline--x4zR5",
            };
            function S({
                children: e,
                containerStyle: a,
                containerClassName: l,
                headerContainerRef: n,
                headingStyle: t,
                headingClassName: s,
                headingRef: r,
                leadingBadge: d,
                trailingBadges: g,
                header: p,
            }) {
                let { variant: y } = (0, m.e)(),
                    { headingRef: h } = (0, f.J)(),
                    k = (0, c.m)("listitem");
                return (0, i.jsxs)(i.Fragment, {
                    children: [
                        (0, i.jsxs)("div", {
                            ...(0, o.G)("list-view-item-title-container"),
                            style: a,
                            className: (0, u.$)(
                                C.container,
                                "compact" === y && C.compact,
                                l
                            ),
                            ref: n,
                            children: [
                                (0, i.jsxs)(k, {
                                    className: (0, u.$)(
                                        C.heading,
                                        "compact" === y && C.compact,
                                        s
                                    ),
                                    style: t,
                                    ref: (e) => {
                                        if (
                                            (h && (h.current = e),
                                            r && "current" in r)
                                        )
                                            try {
                                                r.current = e;
                                            } catch {}
                                    },
                                    ...(0, o.G)("list-view-item-title"),
                                    children: [d, p],
                                }),
                                g &&
                                    (0, i.jsx)("span", {
                                        className: C.trailingBadgesSpacer,
                                    }),
                                (0, i.jsx)("span", {
                                    className: C.trailingBadgesContainer,
                                    children: g,
                                }),
                                e,
                            ],
                        }),
                        (0, i.jsx)(b, {}),
                    ],
                });
            }
            function F({
                children: e,
                value: a,
                containerStyle: l,
                containerClassName: n,
                headerContainerRef: t,
                headingStyle: s,
                headingClassName: r,
                headingRef: o,
                leadingBadge: u,
                trailingBadges: c,
                anchorRef: m,
                ...g
            }) {
                let p = (0, d.useRef)(null),
                    y = m || p;
                return (
                    I({ anchorRef: y, ...g }),
                    (0, i.jsx)(S, {
                        header:
                            g.href || g.onClick
                                ? (0, i.jsx)(L, {
                                      anchorRef: y,
                                      ...g,
                                      children: (0, i.jsx)("span", {
                                          children: a,
                                      }),
                                  })
                                : (0, i.jsx)("span", { children: a }),
                        containerStyle: l,
                        containerClassName: n,
                        headerContainerRef: t,
                        headingStyle: s,
                        headingClassName: r,
                        headingRef: o,
                        leadingBadge: u,
                        trailingBadges: c,
                        children: e,
                    })
                );
            }
            function v({
                children: e,
                html: a,
                containerStyle: l,
                containerClassName: n,
                headerContainerRef: t,
                headingStyle: r,
                headingClassName: o,
                headingRef: u,
                leadingBadge: d,
                trailingBadges: c,
                ...m
            }) {
                return (
                    I(m),
                    (0, i.jsx)(S, {
                        header: (0, i.jsx)(s.BC, { html: a, ...m }),
                        containerStyle: l,
                        containerClassName: n,
                        headerContainerRef: t,
                        headingStyle: r,
                        headingClassName: o,
                        headingRef: u,
                        leadingBadge: d,
                        trailingBadges: c,
                        children: e,
                    })
                );
            }
            function L({
                anchorStyle: e,
                anchorClassName: a,
                anchorRef: l,
                linkProps: n,
                children: t,
                ...s
            }) {
                let { as: r = "a", ...c } = n ?? {},
                    m = (0, d.useRef)(null);
                return (0, i.jsx)(r, {
                    ...(0, o.G)("listitem-title-link"),
                    style: e,
                    ref: l || m,
                    className: (0, u.$)(C.anchor, C.inline, a),
                    ...s,
                    ...c,
                    children: t,
                });
            }
            let I = ({ href: e, onClick: a, anchorRef: l }) => {
                let { setTitleAction: n, headingRef: t } = (0, f.J)();
                return (
                    (0, d.useEffect)(() => {
                        (e || a) &&
                            n(() => (a) => {
                                if (e && (a.metaKey || a.ctrlKey))
                                    window.open(e, "_blank");
                                else if (l?.current) l.current.click();
                                else if (t?.current) {
                                    let e =
                                        t.current.querySelector("a, button");
                                    e && e.click();
                                }
                            });
                    }, [l, t, e, a, n]),
                    null
                );
            };
            try {
                S.displayName || (S.displayName = "InternalTitle");
            } catch {}
            try {
                (n = TitleTag).displayName || (n.displayName = "TitleTag");
            } catch {}
            try {
                F.displayName || (F.displayName = "ListItemTitle");
            } catch {}
            try {
                v.displayName || (v.displayName = "ListItemSafeHTMLTitle");
            } catch {}
            try {
                (t = function ({
                    children: e,
                    html: a,
                    containerStyle: l,
                    containerClassName: n,
                    headerContainerRef: t,
                    headingStyle: s,
                    headingClassName: o,
                    headingRef: u,
                    leadingBadge: d,
                    trailingBadges: c,
                    ...m
                }) {
                    return (
                        I(m),
                        (0, i.jsx)(S, {
                            header: (0, i.jsx)(r.JR, { html: a, ...m }),
                            containerStyle: l,
                            containerClassName: n,
                            headerContainerRef: t,
                            headingStyle: s,
                            headingClassName: o,
                            headingRef: u,
                            leadingBadge: d,
                            trailingBadges: c,
                            children: e,
                        })
                    );
                }).displayName || (t.displayName = "ListItemUnsafeHTMLTitle");
            } catch {}
            try {
                L.displayName || (L.displayName = "HeadingLink");
            } catch {}
        },
        20161: (e, a, l) => {
            l.d(a, { r: () => o });
            var n = l(74848),
                t = l(98386),
                i = l(47139),
                s = l(34164);
            let r = {
                    container: "TrailingBadge-module__container--gg6pc",
                    label: "TrailingBadge-module__label--F7ho5",
                    title: "TrailingBadge-module__title--FDayi",
                },
                o = ({
                    title: e,
                    containerStyle: a,
                    containerClassName: l,
                    children: o,
                    ...u
                }) =>
                    (0, n.jsx)("div", {
                        ...(0, t.G)("list-view-item-trailing-badge"),
                        className: (0, s.$)(r.container, l),
                        style: a,
                        "data-listview-component": "trailing-badge",
                        children:
                            o ||
                            (0, n.jsx)(i.A, {
                                className: r.label,
                                ...u,
                                children: (0, n.jsx)("span", {
                                    className: r.title,
                                    children: e,
                                }),
                            }),
                    });
            try {
                o.displayName || (o.displayName = "ListItemTrailingBadge");
            } catch {}
        },
        66197: (e, a, l) => {
            l.d(a, { X: () => _ });
            var n,
                t = l(74848),
                i = l(52811),
                s = l(98386),
                r = l(34164),
                o = l(96540);
            let u = {
                normal: "density-gap-module__normal--WYrBD",
                none: "density-gap-module__none--WMH6V",
                condensed: "density-gap-module__condensed--seZl0",
                spacious: "density-gap-module__spacious--Nnm9Z",
            };
            var d = l(78413),
                c = l(31668);
            let m = { container: "ActionBar-module__container--SjALR" },
                g = ({
                    actions: e,
                    style: a,
                    className: l,
                    children: n,
                    density: i,
                    actionsLabel: o,
                    densityToggle: d,
                }) => {
                    let g = (0, t.jsxs)(t.Fragment, { children: [n, d] });
                    return e && e.length > 0
                        ? (0, t.jsx)(c.E7, {
                              label: o?.trim(),
                              actions: e,
                              density: i,
                              ...(0, s.G)("list-view-actions"),
                              style: a,
                              className: l,
                              children: g,
                          })
                        : (0, t.jsx)("div", {
                              ...(0, s.G)("list-view-actions"),
                              style: a,
                              className: (0, r.$)(m.container, i && u[i], l),
                              children: g,
                          });
                };
            try {
                g.displayName || (g.displayName = "ListViewActionBar");
            } catch {}
            var p = l(29447);
            let y = {
                    container: "Metadata-module__container--tL6Q3",
                    heading: "Metadata-module__heading--HAxII",
                },
                h = { container: "SectionFilters-module__container--MmIUF" },
                k = ({ links: e }) =>
                    e.length < 1
                        ? null
                        : (0, t.jsx)("div", {
                              ...(0, s.G)("list-view-section-filters"),
                              children: (0, t.jsx)("ul", {
                                  className: (0, r.$)(
                                      "list-style-none",
                                      h.container
                                  ),
                                  children: e.map((e, a) =>
                                      (0, t.jsx)(
                                          "li",
                                          {
                                              ...(0, s.G)(
                                                  `list-view-section-filter-${a}`
                                              ),
                                              children: e,
                                          },
                                          `section-filter-${a}`
                                      )
                                  ),
                              }),
                          });
            try {
                k.displayName || (k.displayName = "ListViewSectionFilters");
            } catch {}
            var f = l(73451),
                b = l(65607),
                C = l(25654);
            let S = {
                container: "SelectAllCheckbox-module__container--FJDtV",
                formControlContainer:
                    "SelectAllCheckbox-module__formControlContainer--JTzPI",
                count: "SelectAllCheckbox-module__count--xEF8c",
            };
            var F = l(89992),
                v = l(74304);
            let L = ({ onToggle: e, style: a, className: l }) => {
                let { title: n } = (0, v.t)(),
                    {
                        isSelectable: u,
                        selectedCount: d,
                        totalCount: c,
                        countOnPage: m,
                        isSelectAllChecked: g,
                        anyItemsSelected: p,
                        singularUnits: y,
                        pluralUnits: h,
                    } = (0, F.v)(),
                    { multiPageSelectionAllowed: k } = (0, C.P)(),
                    L = (0, o.useId)(),
                    I = (0, o.useRef)(null),
                    _ = (0, o.useRef)(null),
                    x = (0, o.useMemo)(
                        () =>
                            k && "number" == typeof c
                                ? d < Math.max(c, m)
                                : d < m,
                        [m, k, d, c]
                    ),
                    K = p && x,
                    w = 1 === d ? y : h,
                    N = "number" == typeof c ? `of ${c} selected` : "selected",
                    j = `${d} ${w} ${N}`,
                    R = (0, o.useCallback)(() => {
                        e && (K ? e(!1) : e(!g));
                    }, [K, g, e]);
                if (
                    ((0, o.useEffect)(() => {
                        _.current && (0, i.C)(_.current);
                    }, [_, j]),
                    !u)
                )
                    return null;
                let T = `${L}-list-view-select-all`;
                return (0, t.jsxs)("div", {
                    style: a,
                    className: (0, r.$)(S.container, l),
                    ...(0, s.G)("list-view-select-all-container"),
                    id: `${L}-list-view-select-all-container`,
                    children: [
                        (0, t.jsx)("div", {
                            className: S.formControlContainer,
                            children: (0, t.jsxs)(f.A, {
                                id: T,
                                children: [
                                    (0, t.jsx)(b.A, {
                                        onChange: R,
                                        value: "default",
                                        checked: g,
                                        indeterminate: K,
                                        onKeyDown: (e) => {
                                            ("Enter" === e.key ||
                                                " " === e.key) &&
                                                (e.preventDefault(), R());
                                        },
                                        tabIndex: 0,
                                        ref: I,
                                        ...(0, s.G)("select-all-checkbox"),
                                    }),
                                    (0, t.jsxs)(f.A.Label, {
                                        visuallyHidden: !0,
                                        ...(0, s.G)("select-all-label"),
                                        children: ["Select all ", h, ": ", n],
                                    }),
                                ],
                            }),
                        }),
                        (0, t.jsxs)("p", {
                            className: (0, r.$)(
                                S.count,
                                p ? void 0 : "sr-only"
                            ),
                            ...(0, s.G)("select-all-selected-count"),
                            children: [
                                (0, t.jsxs)("span", {
                                    "aria-hidden": "true",
                                    className: p ? void 0 : "sr-only",
                                    ...(0, s.G)(
                                        "select-all-selected-count-without-units"
                                    ),
                                    children: [d, " ", N, " "],
                                }),
                                (0, t.jsx)("span", {
                                    className: "sr-only",
                                    ref: _,
                                    ...(0, s.G)("sr-content"),
                                    children: j,
                                }),
                            ],
                        }),
                    ],
                });
            };
            try {
                L.displayName || (L.displayName = "ListViewSelectAllCheckbox");
            } catch {}
            let I = ({ sectionFilters: e }) =>
                    e
                        ? Array.isArray(e)
                            ? (0, t.jsx)(k, { links: e })
                            : (0, o.isValidElement)(e)
                              ? (0, t.jsx)(t.Fragment, { children: e })
                              : null
                        : null,
                _ = ({
                    title: e,
                    assistiveAnnouncement: a,
                    sectionFilters: l,
                    children: n,
                    style: c,
                    className: m,
                    actionsStyle: h,
                    actionsClassName: k,
                    onToggleSelectAll: f,
                    ...b
                }) => {
                    let { idPrefix: C } = (0, p.If)(),
                        { anyItemsSelected: S } = (0, F.v)(),
                        { setHasMetadataTitle: _ } = (0, v.t)(),
                        K = (0, d.m)("list-view-metadata"),
                        w = (0, o.useRef)(null);
                    return (
                        (0, o.useEffect)(() => {
                            _(!!e);
                        }),
                        (0, o.useEffect)(() => {
                            w.current && (0, i.C)(w.current);
                        }, [a]),
                        (0, t.jsxs)("div", {
                            id: `${C}-list-view-metadata`,
                            className: (0, r.$)(
                                y.container,
                                m,
                                S && u.spacious
                            ),
                            style: c,
                            ...(0, s.G)("list-view-metadata"),
                            children: [
                                (0, t.jsx)(L, {
                                    onToggle: (e) => {
                                        f && f(e);
                                    },
                                }),
                                (0, t.jsx)(I, { sectionFilters: l }),
                                !!(e && !S) &&
                                    (0, t.jsx)(K, {
                                        className: y.heading,
                                        ...(0, s.G)("list-view-header-title"),
                                        children: e,
                                    }),
                                (0, t.jsx)(g, {
                                    style: h,
                                    className: k,
                                    ...b,
                                    children: n,
                                }),
                                a &&
                                    (0, t.jsx)(x, {
                                        idPrefix: C,
                                        announceRef: w,
                                        assistiveAnnouncement: a,
                                    }),
                            ],
                        })
                    );
                },
                x = ({
                    idPrefix: e,
                    announceRef: a,
                    assistiveAnnouncement: l,
                }) =>
                    (0, t.jsx)("div", {
                        id: `${e}-list-view-announcements`,
                        role: "status",
                        "aria-live": "polite",
                        "aria-atomic": "true",
                        className: "sr-only",
                        ref: a,
                        ...(0, s.G)("list-view-announcement-container"),
                        children: l,
                    });
            try {
                I.displayName || (I.displayName = "ListFilters");
            } catch {}
            try {
                _.displayName || (_.displayName = "ListViewMetadata");
            } catch {}
            try {
                (n = TitleTag).displayName || (n.displayName = "TitleTag");
            } catch {}
            try {
                x.displayName || (x.displayName = "ListViewAnnouncements");
            } catch {}
        },
        15845: (e, a, l) => {
            l.d(a, { L: () => d });
            var n = l(74848),
                t = l(94232),
                i = l(98386),
                s = l(52464),
                r = l(12528),
                o = l(34164);
            let u = {
                    container: "SectionFilterLink-module__container--Spt7h",
                    selected: "SectionFilterLink-module__selected--pZZWf",
                    count: "SectionFilterLink-module__count--pa9Hi",
                    loading: "SectionFilterLink-module__loading--lXFr7",
                    counterLabelSkeleton:
                        "SectionFilterLink-module__counterLabelSkeleton--ItQLN",
                    title: "SectionFilterLink-module__title--kF4iM",
                },
                d = ({
                    href: e,
                    title: a,
                    count: l,
                    isSelected: d = !1,
                    isLoading: c = !1,
                    className: m,
                    ...g
                }) =>
                    (0, n.jsxs)(s.A, {
                        as: "a",
                        href: e,
                        className: (0, o.$)(u.container, d && u.selected, m),
                        ...(0, i.G)("list-view-section-filter-link"),
                        "aria-current": d ? "true" : void 0,
                        ...g,
                        children: [
                            (0, n.jsx)("div", {
                                className: u.title,
                                children: a,
                            }),
                            void 0 !== l &&
                                (0, n.jsx)(r.A, {
                                    className: (0, o.$)(
                                        u.count,
                                        c && u.loading
                                    ),
                                    children: l,
                                }),
                            void 0 === l &&
                                c &&
                                (0, n.jsx)(t.O, {
                                    variant: "pill",
                                    height: "18px",
                                    width: "32px",
                                    className: u.counterLabelSkeleton,
                                }),
                        ],
                    });
            try {
                d.displayName || (d.displayName = "ListViewSectionFilterLink");
            } catch {}
        },
        41181: (e, a, l) => {
            l.d(a, { d: () => t });
            var n = l(74848);
            function t({ progress: e, radius: a = 11, isSuccess: l = !1 }) {
                return (0, n.jsxs)("svg", {
                    width: 2 * a + 2,
                    height: 2 * a + 2,
                    "data-target": "tracked-issues-progress.progress",
                    "data-circumference": "38",
                    style: { transform: "rotate(-90deg)" },
                    "aria-hidden": "true",
                    focusable: "false",
                    children: [
                        (0, n.jsx)("circle", {
                            stroke: "var(--borderColor-default, var(--color-border-default))",
                            strokeWidth: "2",
                            fill: "transparent",
                            cx: "50%",
                            cy: "50%",
                            r: a,
                        }),
                        (0, n.jsx)("circle", {
                            style: { transition: "stroke-dashoffset 0.35s" },
                            stroke: l
                                ? "var(--fgColor-done, var(--color-done-fg))"
                                : "var(--fgColor-default, var(--color-fg-default))",
                            strokeWidth: "2",
                            strokeDasharray: 2 * Math.PI * a,
                            strokeDashoffset: 2 * Math.PI * a * (1 - e),
                            strokeLinecap: "round",
                            fill: "transparent",
                            cx: "50%",
                            cy: "50%",
                            r: a,
                        }),
                    ],
                });
            }
            try {
                t.displayName || (t.displayName = "PercentageCircle");
            } catch {}
        },
        3086: (e, a, l) => {
            l.d(a, { X: () => h });
            var n,
                t = l(74848);
            function i(e, a, l) {
                return (
                    a in e
                        ? Object.defineProperty(e, a, {
                              value: l,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                          })
                        : (e[a] = l),
                    e
                );
            }
            let s = new Map(),
                r = class Resource {
                    load() {
                        return (
                            null == this._promise &&
                                ((this._promise = this._loader()),
                                (async () => {
                                    try {
                                        this._result = await this._promise;
                                    } catch (e) {
                                        throw ((this._error = e), e);
                                    }
                                })()),
                            this._promise
                        );
                    }
                    getModuleId() {
                        return this._moduleId;
                    }
                    get() {
                        return this._result;
                    }
                    getModuleIfRequired() {
                        return this.get();
                    }
                    read() {
                        if (null != this._result) return this._result;
                        if (null != this._error) throw this._error;
                        throw this._promise;
                    }
                    constructor(e, a, l = null) {
                        (i(this, "_moduleId", void 0),
                            i(this, "_loader", void 0),
                            i(this, "_error", void 0),
                            i(this, "_promise", void 0),
                            i(this, "_result", void 0),
                            (this._moduleId = e),
                            (this._loader = a),
                            (this._error = null),
                            (this._promise = null),
                            (this._result = l));
                    }
                };
            function o(e, a, l = null) {
                let n = s.get(e);
                return (null == n && ((n = new r(e, a, l)), s.set(e, n)), n);
            }
            try {
                o.displayName || (o.displayName = "JSResource");
            } catch {}
            var u = l(32420),
                d = l(50855),
                c = l(96615),
                m = l(96540),
                g = l(69487),
                p = l(18312);
            let y = (e) => e;
            function h(
                {
                    path: e,
                    resourceName: a,
                    componentLoader: l,
                    Component: n,
                    queryConfigs: i,
                    transformVariables: s = y,
                    title: r,
                    relayEnvironment: k,
                    fallback: f,
                    maxAge: b,
                    errorCallbacks: C,
                    transitionType: S = u.E.FETCH_THEN_TRANSITION,
                },
                F = {}
            ) {
                let v = a || n?.displayName;
                if (void 0 === v) throw Error("invalid internal resourceName");
                let L = {
                    root: o(v, l, n),
                    getPreloadProps: (e) => ({
                        queries: (function (e, a, l, n) {
                            let t = {};
                            for (let [
                                i,
                                { concreteRequest: s, variableMappers: r },
                            ] of Object.entries(e)) {
                                let e = (function (e, a, l, n) {
                                    let t = a(e?.(l, n) ?? {}, l, n);
                                    for (let e in t)
                                        if (void 0 === t[e]) return;
                                    return t;
                                })(r, l, a, n);
                                e &&
                                    (t[i] = {
                                        variables: Object.fromEntries(
                                            Object.entries(e).sort(
                                                ([e], [a]) =>
                                                    e < a ? -1 : +(e > a)
                                            )
                                        ),
                                        parameters: {
                                            ...s,
                                            params: {
                                                ...s.params,
                                                metadata: {
                                                    ...s.params.metadata,
                                                    isRelayRouteRequest: !0,
                                                },
                                            },
                                        },
                                    });
                            }
                            return t;
                        })(i, e, s, k),
                    }),
                };
                function I({
                    pathParams: e,
                    searchParams: a,
                    embeddedData: l,
                }) {
                    let n = new Map();
                    if (l?.payload?.preloadedQueries)
                        for (let {
                            queryId: e,
                            variables: a,
                            result: t,
                            timestamp: i,
                        } of l.payload.preloadedQueries) {
                            let l = n.get(e);
                            l || (l = new Map());
                            let s = JSON.stringify(a);
                            ((t.timestamp = i), l.set(s, t), n.set(e, l));
                        }
                    let t = new Map();
                    if (l?.payload?.preloadedSubscriptions)
                        for (let [e, a] of Object.entries(
                            l.payload.preloadedSubscriptions
                        )) {
                            let l = new Map();
                            for (let [e, n] of Object.entries(a)) l.set(e, n);
                            t.set(e, l);
                        }
                    l?.payload?.preloaded_records &&
                        k
                            .getStore()
                            .publish(
                                new g.RecordSource(
                                    l?.payload?.preloaded_records
                                )
                            );
                    let { baseUrl: i, getPreloadedSubscriptions: s } =
                            k.options,
                        o = s ? s() : void 0,
                        u = new c.VB(
                            n,
                            l?.enabled_features,
                            (function (e, a) {
                                if (!a || 0 === a.size) return e;
                                let l = new Map(e);
                                for (let [e, n] of a) l.has(e) || l.set(e, n);
                                return l;
                            })(t, o),
                            i,
                            b,
                            C
                        );
                    (k.__setNet(u),
                        (k.options = {
                            baseUrl: i,
                            getPreloadedSubscriptions: () =>
                                u.getPreloadedSubscriptions(),
                        }));
                    let d = (0, p.loadEntryPoint)(
                        { getEnvironment: () => k },
                        L,
                        { pathParams: e, searchParams: a }
                    );
                    return {
                        type: "loaded",
                        data: { entryPointReference: d },
                        title: r,
                        isValid: () =>
                            !Object.values(d.queries).some((e) => e.isDisposed),
                    };
                }
                return {
                    path: e,
                    Component: () => {
                        let e = (0, d.N)(),
                            a = e?.data?.entryPointReference;
                        return a
                            ? (0, t.jsx)(p.RelayEnvironmentProvider, {
                                  environment: k,
                                  children: (0, t.jsx)(m.Suspense, {
                                      fallback: f,
                                      children: (0, t.jsx)(
                                          p.EntryPointContainer,
                                          { entryPointReference: a, props: F }
                                      ),
                                  }),
                              })
                            : null;
                    },
                    coreLoader: async function e({
                        pathParams: e,
                        location: a,
                    }) {
                        let l = I({
                            pathParams: e,
                            searchParams: new URLSearchParams(a.search),
                        });
                        return (
                            S === u.E.FETCH_THEN_TRANSITION &&
                                (await Promise.allSettled(
                                    Object.values(
                                        l.data.entryPointReference.queries
                                    ).map((e) => e.source?.toPromise())
                                )),
                            l
                        );
                    },
                    loadFromEmbeddedData: function ({
                        pathParams: e,
                        embeddedData: a,
                        location: l,
                    }) {
                        let { data: n, isValid: t } = I({
                            pathParams: e,
                            embeddedData: a,
                            searchParams: new URLSearchParams(l.search),
                        });
                        return { data: n, title: r, isValid: t };
                    },
                    transitionType: S,
                };
            }
            try {
                (n = Wrapper).displayName || (n.displayName = "Wrapper");
            } catch {}
        },
        60674: (e, a, l) => {
            l.d(a, { BP: () => c, D3: () => d, O8: () => o });
            var n = l(74848),
                t = l(21728),
                i = l(96540),
                s = l(96679),
                r = l(17515);
            let o = {
                    ServerRender: "ServerRender",
                    ClientHydrate: "ClientHydrate",
                    ClientRender: "ClientRender",
                },
                u = (0, i.createContext)(o.ClientRender);
            function d(e) {
                let a,
                    l,
                    d,
                    c,
                    m = (0, t.c)(8),
                    { wasServerRendered: g, children: p } = e;
                m[0] !== g
                    ? ((a = () =>
                          s.X3
                              ? o.ServerRender
                              : g
                                ? o.ClientHydrate
                                : o.ClientRender),
                      (m[0] = g),
                      (m[1] = a))
                    : (a = m[1]);
                let [y, h] = (0, i.useState)(a);
                return (
                    m[2] !== y
                        ? ((l = () => {
                              y !== o.ClientRender && h(o.ClientRender);
                          }),
                          (d = [y]),
                          (m[2] = y),
                          (m[3] = l),
                          (m[4] = d))
                        : ((l = m[3]), (d = m[4])),
                    (0, r.N)(l, d),
                    m[5] !== p || m[6] !== y
                        ? ((c = (0, n.jsx)(u.Provider, {
                              value: y,
                              children: p,
                          })),
                          (m[5] = p),
                          (m[6] = y),
                          (m[7] = c))
                        : (c = m[7]),
                    c
                );
            }
            function c() {
                return (0, i.useContext)(u);
            }
            try {
                u.displayName || (u.displayName = "RenderPhaseContext");
            } catch {}
            try {
                d.displayName || (d.displayName = "RenderPhaseProvider");
            } catch {}
        },
        21877: (e, a, l) => {
            l.d(a, { w: () => p });
            var n = l(74848),
                t = l(96540),
                i = l(90495),
                s = l(59214),
                r = l(75177),
                o = l(87330),
                u = l(38621),
                d = l(91819),
                c = l(24021);
            let m = (0, t.memo)(
                ({
                    children: e,
                    initialFocusRef: a,
                    returnFocusRef: l,
                    open: m,
                    onClose: p,
                    onKeyDown: y,
                    topOffset: h = 0,
                    width: k,
                    "aria-label": f,
                    "aria-labelledby": b,
                    defaultCloseElement: C = "button",
                    externalFocusTrapDisabled: S = !1,
                }) => {
                    let F = (0, t.useMemo)(
                            () =>
                                Array.isArray(k)
                                    ? k
                                    : "string" == typeof k
                                      ? ["100%", "", k]
                                      : ["100%"],
                            [k]
                        ),
                        v = (0, t.useRef)(null),
                        [L, I] = (0, t.useState)(null === v.current || !m || S),
                        { initialFocusRef: _ } = (0, i.r)({
                            initialFocusRef: a,
                            containerRef: v,
                            disabled: S || L,
                        }),
                        x = window.matchMedia(
                            "(prefers-reduced-motion: reduce)"
                        ).matches,
                        [K, w] = (0, t.useState)(m),
                        [N, j] = (0, t.useState)(m),
                        [R, T] = (0, c.H)(e, { heading: g });
                    (0, t.useEffect)(() => {
                        let e;
                        return (
                            m
                                ? (w(!0), (e = setTimeout(() => j(!0))))
                                : (j(!1), (e = setTimeout(() => w(!1), 200))),
                            () => clearTimeout(e)
                        );
                    }, [m]);
                    let P = (0, t.useCallback)((e) => {
                            let a = e.target;
                            (a.id === d.wg || a.id === d.uN) &&
                                (I(!0), window.setTimeout(() => a.focus()));
                        }, []),
                        A = (0, t.useCallback)(
                            (e) => {
                                let a = e.target;
                                if (
                                    "INPUT" !== a.tagName &&
                                    "TEXTAREA" !== a.tagName &&
                                    e.shiftKey &&
                                    "C" === e.key
                                ) {
                                    let e = document.querySelector(
                                        `#${d.wg}, #${d.uN}`
                                    );
                                    e &&
                                        (I(!0),
                                        window.setTimeout(() => e.focus()));
                                }
                                y && y(e);
                            },
                            [y]
                        );
                    ((0, t.useEffect)(
                        () => (
                            window.addEventListener("click", P),
                            () => {
                                window.removeEventListener("click", P);
                            }
                        ),
                        [P]
                    ),
                        (0, t.useEffect)(() => {
                            let e = document.body.style.overflow || "";
                            if ("hidden" !== e)
                                return (
                                    (document.body.style.overflow = "hidden"),
                                    () => {
                                        document.body.style.overflow = e;
                                    }
                                );
                        }, []));
                    let M = (0, t.useCallback)(() => {
                        L && I(!m);
                    }, [L, m]);
                    return K
                        ? (0, n.jsxs)(s.Ay, {
                              initialFocusRef: _,
                              returnFocusRef: l,
                              onKeyDown: A,
                              onEscape: p,
                              onClickOutside: () => {},
                              ref: v,
                              role: "dialog",
                              "aria-modal": !0,
                              "aria-label": f,
                              "aria-labelledby": b,
                              sx: { zIndex: 2, height: "1px", bg: "none" },
                              onFocus: M,
                              children: [
                                  (0, n.jsx)(r.A, {
                                      sx: {
                                          backgroundColor:
                                              "var(--overlay-backdrop-bgColor, var(--color-overlay-backdrop))",
                                          top: h,
                                          right: 0,
                                          bottom: 0,
                                          left: 0,
                                          borderRadius: 0,
                                          position: "fixed",
                                          border: "none",
                                          transitionDuration: "200ms",
                                          transitionProperty: "opacity",
                                          transitionTimingFunction:
                                              "animation.easeOutCubic",
                                          opacity: +!!N,
                                          cursor: "default",
                                          width: "100%",
                                      },
                                      onClick: p,
                                      as: "overlay" === C ? "button" : void 0,
                                      "aria-label":
                                          "overlay" === C ? "Close" : void 0,
                                  }),
                                  (0, n.jsxs)(r.A, {
                                      sx: {
                                          borderRadius: "12px 0 0 12px",
                                          position: "fixed",
                                          top: h,
                                          right: 0,
                                          bottom: 0,
                                          width: F,
                                          minWidth: "300px",
                                          maxWidth: "unset",
                                          overflow: "auto",
                                          bg: "canvas.default",
                                          boxShadow: "shadow.large",
                                          transitionDuration: "200ms",
                                          transitionProperty:
                                              "opacity, transform",
                                          transitionTimingFunction:
                                              "animation.easeOutCubic",
                                          transform:
                                              N || x
                                                  ? "translateX(0%)"
                                                  : "translateX(35%)",
                                          opacity: +!!N,
                                      },
                                      children: [
                                          (0, n.jsxs)(r.A, {
                                              sx: {
                                                  display: "flex",
                                                  flexDirection: "row",
                                                  justifyContent:
                                                      "space-between",
                                              },
                                              children: [
                                                  (0, n.jsx)("div", {
                                                      children: R.heading,
                                                  }),
                                                  (0, n.jsx)("div", {
                                                      children:
                                                          "button" === C &&
                                                          (0, n.jsx)(o.K, {
                                                              variant:
                                                                  "invisible",
                                                              icon: u.XIcon,
                                                              "aria-label":
                                                                  "Close",
                                                              onClick: p,
                                                              sx: {
                                                                  float: "right",
                                                                  m: 3,
                                                              },
                                                          }),
                                                  }),
                                              ],
                                          }),
                                          T,
                                      ],
                                  }),
                              ],
                          })
                        : null;
                }
            );
            m.displayName = "SidePanel";
            let g = ({ children: e }) => (0, n.jsx)("div", { children: e }),
                p = Object.assign(m, { Heading: g });
            try {
                g.displayName || (g.displayName = "Heading");
            } catch {}
            try {
                p.displayName || (p.displayName = "SidePanel");
            } catch {}
        },
        87517: (e, a, l) => {
            l.d(a, { x: () => h });
            var n = l(74848),
                t = l(38621),
                i = l(75177),
                s = l(6869),
                r = l(34614),
                o = l(10569),
                u = l(15385),
                d = l(85788),
                c = l(96540),
                m = l(7479),
                g = l(34441),
                p = l(34164),
                y = l(27851);
            function h({
                className: e,
                portalContainerName: a,
                protectedOrgs: l,
                maxVisibleOrgNames: o = 3,
                redirectURI: u,
                useFullWidthStyle: h,
                forceWrap: b,
                sx: C,
            }) {
                let S = (0, d.zy)(),
                    F = (0, c.useRef)(!1);
                if (
                    ((0, c.useEffect)(() => {
                        (0, y.G7)("record_sso_banner_metrics") &&
                            !F.current &&
                            l &&
                            l.length > 0 &&
                            ((0, m.i)({
                                incrementKey: (0, y.G7)("global_sso_banner")
                                    ? "LEGACY_SSO_BANNER_DISPLAYED_WITH_GLOBAL_BANNER_ENABLED"
                                    : "LEGACY_SSO_BANNER_DISPLAYED",
                                requestUrl: window.location.href,
                            }),
                            (F.current = !0));
                    }, [l]),
                    !l || 0 === l.length)
                )
                    return null;
                let v = Math.max(0, l.length - o),
                    L =
                        1 === l.length || v > 0
                            ? (0, n.jsx)("b", {
                                  children: l.slice(0, o).join(", "),
                              })
                            : (0, n.jsxs)("span", {
                                  children: [
                                      (0, n.jsx)("b", {
                                          children: l
                                              .slice(0, l.length - 1)
                                              .join(", "),
                                      }),
                                      l.length > 2 && ",",
                                      " and ",
                                      (0, n.jsx)("b", {
                                          children: l[l.length - 1],
                                      }),
                                  ],
                              });
                return (0, n.jsx)(i.A, {
                    sx: C,
                    className: e,
                    "data-testid": "sso-banner",
                    children: (0, n.jsx)("div", {
                        className: g.A.Box,
                        children: (0, n.jsx)("section", {
                            "aria-label": "Single sign-on information",
                            children: (0, n.jsx)(s.A, {
                                sx: {
                                    borderRadius: 2 * !h,
                                    borderWidth: h ? "1px 0" : 1,
                                },
                                className: g.A.Flash,
                                children:
                                    1 === l.length
                                        ? (0, n.jsxs)("div", {
                                              children: [
                                                  (0, n.jsx)(t.ShieldLockIcon, {
                                                      className:
                                                          g.A.ShieldLockIcon,
                                                  }),
                                                  (0, n.jsx)(r.A, {
                                                      inline: !0,
                                                      href: `/orgs/${l[0]}/sso?return_to=${f({ location: S, redirectURI: u })}`,
                                                      children:
                                                          "Single sign-on",
                                                  }),
                                                  " ",
                                                  "to see results in the ",
                                                  (0, n.jsx)("b", {
                                                      children: l[0],
                                                  }),
                                                  " organization.",
                                              ],
                                          })
                                        : (0, n.jsxs)("div", {
                                              className: g.A.Box_1,
                                              children: [
                                                  (0, n.jsx)(t.ShieldLockIcon, {
                                                      className: g.A.Octicon,
                                                  }),
                                                  (0, n.jsxs)("div", {
                                                      className: (0, p.$)(
                                                          g.A.Box_2,
                                                          b && g.A.ForceWrap
                                                      ),
                                                      children: [
                                                          (0, n.jsxs)("p", {
                                                              className:
                                                                  g.A
                                                                      .ProtectedOrgs_FullList,
                                                              children: [
                                                                  "Single sign-on to see results in ",
                                                                  0 === v &&
                                                                      "the ",
                                                                  o > 0 &&
                                                                      (0,
                                                                      n.jsxs)(
                                                                          n.Fragment,
                                                                          {
                                                                              children:
                                                                                  [
                                                                                      L,
                                                                                      " ",
                                                                                  ],
                                                                          }
                                                                      ),
                                                                  v > 0 &&
                                                                      (0,
                                                                      n.jsxs)(
                                                                          n.Fragment,
                                                                          {
                                                                              children:
                                                                                  [
                                                                                      o >
                                                                                          0 &&
                                                                                          "and ",
                                                                                      v,
                                                                                      " other",
                                                                                      " ",
                                                                                  ],
                                                                          }
                                                                      ),
                                                                  l.length >
                                                                      1 &&
                                                                  1 !== v
                                                                      ? "organizations"
                                                                      : "organization",
                                                                  ".",
                                                              ],
                                                          }),
                                                          (0, n.jsx)("p", {
                                                              className:
                                                                  g.A
                                                                      .ProtectedOrgs_Shortened,
                                                              children:
                                                                  "Single sign-on to see results in your organizations",
                                                          }),
                                                          (0, n.jsx)("div", {
                                                              style: {
                                                                  flexShrink: 0,
                                                              },
                                                              children: (0,
                                                              n.jsx)(k, {
                                                                  portalContainerName:
                                                                      a,
                                                                  protectedOrgs:
                                                                      l,
                                                                  redirectURI:
                                                                      u,
                                                              }),
                                                          }),
                                                      ],
                                                  }),
                                              ],
                                          }),
                            }),
                        }),
                    }),
                });
            }
            function k({
                portalContainerName: e,
                protectedOrgs: a,
                redirectURI: l,
            }) {
                let t = (0, d.zy)();
                return (0, n.jsxs)(o.W, {
                    children: [
                        (0, n.jsx)(o.W.Button, {
                            size: "small",
                            children: "Select an organization",
                        }),
                        (0, n.jsx)(o.W.Overlay, {
                            portalContainerName: e,
                            children: (0, n.jsx)(u.l, {
                                children: a.map((e) =>
                                    (0, n.jsx)(
                                        u.l.Item,
                                        {
                                            onSelect: () => {
                                                window.location.href = `/orgs/${encodeURIComponent(e)}/sso?return_to=${f({ location: t, redirectURI: l })}`;
                                            },
                                            children: e,
                                        },
                                        `org-${e}`
                                    )
                                ),
                            }),
                        }),
                    ],
                });
            }
            function f({ location: e, redirectURI: a }) {
                return encodeURIComponent(
                    a ? a(e) : e.pathname + e.search + e.hash
                );
            }
            try {
                h.displayName || (h.displayName = "SingleSignOnBanner");
            } catch {}
            try {
                k.displayName || (k.displayName = "SingleSignOnButton");
            } catch {}
        },
        99543: (e, a, l) => {
            l.d(a, { Qn: () => o, T8: () => d, Y6: () => m, k6: () => c });
            var n = l(74848),
                t = l(65556),
                i = l(96540),
                s = l(13233),
                r = l(47019);
            let o = 5e3,
                u = (0, i.createContext)({
                    addToast: s.l,
                    addPersistedToast: s.l,
                    clearPersistedToast: s.l,
                }),
                d = (0, i.createContext)({ toasts: [], persistedToast: null });
            function c({ children: e }) {
                let [a, l] = (0, r.A)([]),
                    [s, c] = (0, i.useState)(null),
                    { safeSetTimeout: m } = (0, t.A)(),
                    g = (0, i.useCallback)(
                        function (e) {
                            (l([...a, e]), m(() => l(a.slice(1)), o));
                        },
                        [a, m, l]
                    ),
                    p = (0, i.useCallback)(
                        function (e) {
                            c(e);
                        },
                        [c]
                    ),
                    y = (0, i.useCallback)(
                        function () {
                            c(null);
                        },
                        [c]
                    ),
                    h = (0, i.useMemo)(
                        () => ({
                            addToast: g,
                            addPersistedToast: p,
                            clearPersistedToast: y,
                        }),
                        [p, g, y]
                    ),
                    k = (0, i.useMemo)(
                        () => ({ toasts: a, persistedToast: s }),
                        [a, s]
                    );
                return (0, n.jsx)(u.Provider, {
                    value: h,
                    children: (0, n.jsx)(d.Provider, { value: k, children: e }),
                });
            }
            function m() {
                return (0, i.useContext)(u);
            }
            try {
                u.displayName || (u.displayName = "ToastContext");
            } catch {}
            try {
                d.displayName || (d.displayName = "InternalToastsContext");
            } catch {}
            try {
                c.displayName || (c.displayName = "ToastContextProvider");
            } catch {}
        },
        42218: (e, a, l) => {
            l.d(a, { V: () => m });
            var n = l(74848),
                t = l(96540),
                i = l(99543),
                s = l(38621),
                r = l(65556),
                o = l(16255);
            let u = {
                    info: "",
                    success: "Toast--success",
                    error: "Toast--error",
                },
                d = {
                    info: (0, n.jsx)(s.InfoIcon, {}),
                    success: (0, n.jsx)(s.CheckIcon, {}),
                    error: (0, n.jsx)(s.StopIcon, {}),
                },
                c = ({
                    message: e,
                    timeToLive: a,
                    icon: l,
                    type: i = "info",
                    role: s = "log",
                }) => {
                    let [c, m] = t.useState(!0),
                        { safeSetTimeout: g } = (0, r.A)();
                    return (
                        (0, t.useEffect)(() => {
                            a && g(() => m(!1), a - 300);
                        }, [g, a]),
                        (0, n.jsx)(o.Z, {
                            children: (0, n.jsx)("div", {
                                className:
                                    "p-1 position-fixed bottom-0 left-0 mb-3 ml-3",
                                children: (0, n.jsxs)("div", {
                                    className: `Toast ${u[i]} ${c ? "Toast--animateIn" : "Toast--animateOut"}`,
                                    id: "ui-app-toast",
                                    "data-testid": `ui-app-toast-${i}`,
                                    role: s,
                                    children: [
                                        (0, n.jsx)("span", {
                                            className: "Toast-icon",
                                            children: l || d[i],
                                        }),
                                        (0, n.jsx)("span", {
                                            className: "Toast-content",
                                            children: e,
                                        }),
                                    ],
                                }),
                            }),
                        })
                    );
                };
            try {
                c.displayName || (c.displayName = "Toast");
            } catch {}
            function m() {
                let { toasts: e, persistedToast: a } = (0, t.useContext)(i.T8);
                return (0, n.jsxs)(n.Fragment, {
                    children: [
                        e.map((e, a) =>
                            (0, n.jsx)(
                                c,
                                {
                                    message: e.message,
                                    icon: e.icon,
                                    timeToLive: i.Qn,
                                    type: e.type,
                                    role: e.role,
                                },
                                a
                            )
                        ),
                        a &&
                            (0, n.jsx)(c, {
                                message: a.message,
                                icon: a.icon,
                                type: a.type,
                                role: a.role,
                            }),
                    ],
                });
            }
            try {
                m.displayName || (m.displayName = "Toasts");
            } catch {}
        },
        83592: (e, a, l) => {
            l.d(a, { s: () => t });
            var n = l(2642);
            function t(e, a) {
                let l = (0, n.a)(e),
                    t = (0, n.a)(a);
                return l.getFullYear() === t.getFullYear();
            }
        },
        9802: (e, a, l) => {
            l.d(a, { e: () => t });
            var n = l(83592);
            function t(e) {
                return (0, n.s)(e, Date.now());
            }
        },
        79639: (e, a, l) => {
            l.d(a, { P: () => i });
            var n = l(85551),
                t = l(40828);
            function i(e) {
                return (0, n.r)(e, (0, t.e)(Date.now(), 1));
            }
        },
        24249: (e, a, l) => {
            l.d(a, { Qr: () => InputRange });
            let InputStyleCloneUpdateEvent = class InputStyleCloneUpdateEvent extends Event {
                constructor() {
                    super("update");
                }
            };
            let n = new WeakMap();
            let InputStyleClone = class InputStyleClone extends EventTarget {
                #e = new MutationObserver(() => this.#a());
                #l = new ResizeObserver(() => this.#n());
                #t;
                #i = document.createElement("div");
                #s = document.createElement("div");
                static for(e) {
                    let a = n.get(e);
                    return (
                        a || ((a = new InputStyleClone(e)), n.set(e, a)),
                        a
                    );
                }
                constructor(e) {
                    (super(),
                        (this.#t = new WeakRef(e)),
                        (this.#i.style.position = "absolute"),
                        (this.#i.style.pointerEvents = "none"),
                        this.#i.setAttribute("aria-hidden", "true"),
                        this.#i.appendChild(this.#s),
                        (this.#s.style.pointerEvents = "none"),
                        (this.#s.style.userSelect = "none"),
                        (this.#s.style.overflow = "hidden"),
                        (this.#s.style.display = "block"),
                        (this.#s.style.visibility = "hidden"),
                        e instanceof HTMLTextAreaElement
                            ? ((this.#s.style.whiteSpace = "pre-wrap"),
                              (this.#s.style.wordWrap = "break-word"))
                            : ((this.#s.style.whiteSpace = "nowrap"),
                              (this.#s.style.display = "table-cell"),
                              (this.#s.style.verticalAlign = "middle")),
                        e.after(this.#i),
                        this.#a(),
                        this.#r(),
                        this.#e.observe(e, {
                            attributeFilter: ["style", "dir"],
                        }),
                        this.#l.observe(e),
                        document.addEventListener("scroll", this.#o, {
                            capture: !0,
                        }),
                        window.addEventListener("resize", this.#o, {
                            capture: !0,
                        }),
                        e.addEventListener("input", this.#u, { capture: !0 }));
                }
                get element() {
                    return this.#s;
                }
                forceUpdate() {
                    (this.#a(), this.#r());
                }
                disconnect() {
                    (this.#i?.remove(),
                        this.#e.disconnect(),
                        this.#l.disconnect(),
                        document.removeEventListener("scroll", this.#o, {
                            capture: !0,
                        }),
                        window.removeEventListener("resize", this.#o, {
                            capture: !0,
                        }));
                    let e = this.#d;
                    e &&
                        (e.removeEventListener("input", this.#u, {
                            capture: !0,
                        }),
                        n.delete(e));
                }
                get #d() {
                    return this.#t?.deref();
                }
                #c(e) {
                    let a = this.#d;
                    return a ? e(a) : this.disconnect();
                }
                #m = 0;
                #g = 0;
                #p() {
                    this.#c((e) => {
                        let a = window.getComputedStyle(e);
                        ((this.#s.style.height = a.height),
                            (this.#s.style.width = a.width),
                            e.clientHeight !== this.#s.clientHeight &&
                                (this.#s.style.height = `calc(${a.height} + ${e.clientHeight - this.#s.clientHeight}px)`),
                            e.clientWidth !== this.#s.clientWidth &&
                                (this.#s.style.width = `calc(${a.width} + ${e.clientWidth - this.#s.clientWidth}px)`));
                        let l = e.getBoundingClientRect(),
                            n = this.#s.getBoundingClientRect();
                        ((this.#m = this.#m + l.left - n.left),
                            (this.#g = this.#g + l.top - n.top),
                            (this.#s.style.transform = `translate(${this.#m}px, ${this.#g}px)`),
                            (this.#s.scrollTop = e.scrollTop),
                            (this.#s.scrollLeft = e.scrollLeft),
                            this.dispatchEvent(
                                new InputStyleCloneUpdateEvent()
                            ));
                    });
                }
                #y = !1;
                #n() {
                    this.#y ||
                        ((this.#y = !0),
                        requestAnimationFrame(() => {
                            (this.#p(), (this.#y = !1));
                        }));
                }
                #a() {
                    this.#c((e) => {
                        let a = window.getComputedStyle(e);
                        for (let e of t) this.#s.style[e] = a[e];
                        this.#n();
                    });
                }
                #r() {
                    this.#c((e) => {
                        ((this.#s.textContent = e.value), this.#p());
                    });
                }
                #u = () => this.#r();
                #o = (e) => {
                    this.#c((a) => {
                        (e.target === document ||
                            e.target === window ||
                            (e.target instanceof Node &&
                                e.target.contains(a))) &&
                            this.#n();
                    });
                };
            };
            let t = [
                "direction",
                "writingMode",
                "unicodeBidi",
                "textOrientation",
                "boxSizing",
                "borderTopWidth",
                "borderRightWidth",
                "borderBottomWidth",
                "borderLeftWidth",
                "borderStyle",
                "paddingTop",
                "paddingRight",
                "paddingBottom",
                "paddingLeft",
                "fontStyle",
                "fontVariant",
                "fontWeight",
                "fontStretch",
                "fontSize",
                "fontSizeAdjust",
                "lineHeight",
                "fontFamily",
                "textAlign",
                "textTransform",
                "textIndent",
                "textDecoration",
                "letterSpacing",
                "wordSpacing",
                "tabSize",
                "MozTabSize",
            ];
            let InputRange = class InputRange {
                #h;
                #k;
                #f;
                constructor(e, a = 0, l = a) {
                    ((this.#h = e), (this.#k = a), (this.#f = l));
                }
                static fromSelection(e) {
                    let { selectionStart: a, selectionEnd: l } = e;
                    return new InputRange(e, a ?? void 0, l ?? void 0);
                }
                get collapsed() {
                    return this.startOffset === this.endOffset;
                }
                get commonAncestorContainer() {
                    return this.#h;
                }
                get endContainer() {
                    return this.#h;
                }
                get startContainer() {
                    return this.#h;
                }
                get startOffset() {
                    return this.#k;
                }
                get endOffset() {
                    return this.#f;
                }
                setStartOffset(e) {
                    this.#k = this.#b(e);
                }
                setEndOffset(e) {
                    this.#f = this.#b(e);
                }
                collapse(e = !1) {
                    e
                        ? this.setEndOffset(this.startOffset)
                        : this.setStartOffset(this.endOffset);
                }
                cloneContents() {
                    return this.#C().cloneContents();
                }
                cloneRange() {
                    return new InputRange(
                        this.#h,
                        this.startOffset,
                        this.endOffset
                    );
                }
                getBoundingClientRect() {
                    return this.#C().getBoundingClientRect();
                }
                getClientRects() {
                    return this.#C().getClientRects();
                }
                toString() {
                    return this.#C().toString();
                }
                getStyleClone() {
                    return this.#S;
                }
                get #S() {
                    return InputStyleClone.for(this.#h);
                }
                get #s() {
                    return this.#S;
                }
                #b(e) {
                    return Math.max(0, Math.min(e, this.#h.value.length));
                }
                #C() {
                    let e = document.createRange(),
                        a = this.#s.element.childNodes[0];
                    return (
                        a &&
                            (e.setStart(a, this.startOffset),
                            e.setEnd(a, this.endOffset)),
                        e
                    );
                }
            };
        },
        45572: (e, a, l) => {
            l.d(a, { A: () => n });
            let n = function (e, a) {
                for (
                    var l = -1, n = null == e ? 0 : e.length, t = Array(n);
                    ++l < n;

                )
                    t[l] = a(e[l], l, e);
                return t;
            };
        },
        23224: (e, a, l) => {
            l.d(a, { A: () => s });
            var n = l(91251),
                t = /[\\^$.*+?()[\]{}|]/g,
                i = RegExp(t.source);
            let s = function (e) {
                return (e = (0, n.A)(e)) && i.test(e)
                    ? e.replace(t, "\\$&")
                    : e;
            };
        },
        46632: (e, a, l) => {
            l.d(a, { A: () => i });
            var n = l(21738);
            function t(e, a) {
                if (
                    "function" != typeof e ||
                    (null != a && "function" != typeof a)
                )
                    throw TypeError("Expected a function");
                var l = function () {
                    var n = arguments,
                        t = a ? a.apply(this, n) : n[0],
                        i = l.cache;
                    if (i.has(t)) return i.get(t);
                    var s = e.apply(this, n);
                    return ((l.cache = i.set(t, s) || i), s);
                };
                return ((l.cache = new (t.Cache || n.A)()), l);
            }
            t.Cache = n.A;
            let i = t;
        },
        91251: (e, a, l) => {
            l.d(a, { A: () => c });
            var n = l(241),
                t = l(45572),
                i = l(92049),
                s = l(61882),
                r = 1 / 0,
                o = n.A ? n.A.prototype : void 0,
                u = o ? o.toString : void 0;
            let d = function e(a) {
                    if ("string" == typeof a) return a;
                    if ((0, i.A)(a)) return (0, t.A)(a, e) + "";
                    if ((0, s.A)(a)) return u ? u.call(a) : "";
                    var l = a + "";
                    return "0" == l && 1 / a == -r ? "-0" : l;
                },
                c = function (e) {
                    return null == e ? "" : d(e);
                };
        },
    },
    (e) => {
        (e.O(
            0,
            [
                "primer-react",
                "react-lib",
                "react-core",
                "octicons-react",
                "vendors-node_modules_oddbird_popover-polyfill_dist_popover-fn_js",
                "vendors-node_modules_github_mini-throttle_dist_index_js-node_modules_stacktrace-parser_dist_s-1d3d52",
                "vendors-node_modules_emotion_is-prop-valid_dist_emotion-is-prop-valid_esm_js-node_modules_emo-1fff13",
                "vendors-node_modules_tanstack_query-core_build_modern_queryClient_js",
                "vendors-node_modules_primer_behaviors_dist_esm_index_mjs",
                "vendors-node_modules_dompurify_dist_purify_es_mjs",
                "vendors-node_modules_github_hydro-analytics-client_dist_analytics-client_js-node_modules_gith-d2d5b7",
                "vendors-node_modules_tanstack_react-query_build_modern_useQuery_js",
                "vendors-node_modules_date-fns_format_mjs",
                "vendors-node_modules_date-fns_addWeeks_mjs-node_modules_date-fns_addYears_mjs-node_modules_da-827f4f",
                "vendors-node_modules_github_relative-time-element_dist_index_js",
                "vendors-node_modules_focus-visible_dist_focus-visible_js-node_modules_github_hotkey_dist_inde-336f14",
                "vendors-node_modules_date-fns_getDaysInMonth_mjs-node_modules_date-fns_isAfter_mjs-node_modul-49f526",
                "vendors-node_modules_lodash-es__Stack_js-node_modules_lodash-es__Uint8Array_js-node_modules_l-4faaa6",
                "vendors-node_modules_dnd-kit_modifiers_dist_modifiers_esm_js-node_modules_dnd-kit_sortable_di-3c44bd",
                "vendors-node_modules_braintree_browser-detection_dist_browser-detection_js-node_modules_githu-bb80ec",
                "vendors-node_modules_react-relay_index_js",
                "vendors-node_modules_lodash-es_cloneDeep_js",
                "vendors-node_modules_codemirror_autocomplete_dist_index_js-node_modules_codemirror_search_dis-aafe81",
                "vendors-node_modules_codemirror_commands_dist_index_js-node_modules_codemirror_language-data_-92b5c9",
                "vendors-node_modules_fzy_js_index_js-node_modules_github_paste-markdown_dist_index_js",
                "vendors-node_modules_react-relay_hooks_js-node_modules_github_g-emoji-element_dist_index_js-n-e52ed5",
                "vendors-node_modules_github_combobox-nav_dist_index_js-node_modules_github_jtml_lib_index_js",
                "vendors-node_modules_github_catalyst_lib_index_js-node_modules_tanstack_react-query_build_mod-d1dec4",
                "ui_packages_paths_index_ts",
                "ui_packages_ui-commands_ui-commands_ts",
                "ui_packages_date-picker_components_DatePicker_tsx",
                "ui_packages_drag-and-drop_drag-and-drop_ts-ui_packages_hydro-analytics_hydro-analytics_ts",
                "ui_packages_list-view_src_hooks_use-next-header-tag_ts-ui_packages_list-view_src_ListItem_Lis-0a5d95",
                "ui_packages_relay-environment_relay-environment_ts",
                "ui_packages_filter_utils_index_ts-ui_packages_fuzzy-score_fuzzy-score_ts-ui_packages_use-anal-27b35f",
                "ui_packages_filter_Filter_tsx",
                "ui_packages_item-picker_components_RepositoryPicker_tsx",
                "ui_packages_filter_providers_index_ts",
                "ui_packages_issue-create_dialog_CreateIssueDialogEntry_tsx-ui_packages_copy-to-clipboard_Copy-f3727d",
                "ui_packages_commenting_constants_values_ts-ui_packages_commenting_components_ActivityHeader_t-8a1940",
                "ui_packages_query-builder-element_query-builder-element_ts",
                "ui_packages_signed-commit-badge_index_ts",
                "ui_packages_app-uuid_app-uuid_ts-ui_packages_commenting_hooks_use-markdown-body_ts-ui_package-535bbd",
                "ui_packages_markdown-viewer_NewMarkdownViewer_tsx",
                "ui_packages_issue-viewer_components_IssueViewer_tsx-ui_packages_issue-viewer_contexts_IssueVi-df51bd",
            ],
            () => e((e.s = 21153))
        ),
            e.O());
    },
]);
//# sourceMappingURL=issues-react-f0386e0bae3f.js.map
