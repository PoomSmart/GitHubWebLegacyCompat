"use strict";
(globalThis.webpackChunk_github_ui_github_ui =
    globalThis.webpackChunk_github_ui_github_ui || []).push([
    [
        "lazy-react-partial-actions-survey",
        "packages_issue-viewer_components_IssueViewer_tsx-packages_issue-viewer_contexts_IssueViewerCo-0b31b4",
    ],
    {
        1075: (e, l, n) => {
            n.d(l, { A: () => a });
            let a = {
                responsiveContainer:
                    "NestedListView-module__responsiveContainer--Z7mCj",
                container: "NestedListView-module__container--AjxDm",
                collapsible: "NestedListView-module__collapsible--fUdI9",
            };
        },
        72683: (e, l, n) => {
            n.d(l, { t: () => a });
            let a = {
                bodyLoadingSkeletonCount: 6,
                localStorageKeys: {
                    issueNewBody: (e, l) => `${e}-i${l}.view-issue-body-edit`,
                },
                ghost: {
                    login: "ghost",
                    avatarUrl: "/ghost.png",
                    profileUrl: "/ghost",
                },
            };
        },
        96747: (e, l, n) => {
            n.d(l, { C: () => s });
            var a = n(73189);
            let s = {
                navigate: a.l,
                navigateBack: a.l,
                onIssueUpdate: a.l,
                onNewIssueComment: a.l,
                preloadedQueries: void 0,
                onLinkClick: a.l,
                onClose: a.l,
                withLiveUpdates: !1,
                singleKeyShortcutsEnabled: !1,
                skipDocumentTitleUpdates: void 0,
                showRepositoryPill: void 0,
                selectedProjectId: void 0,
                allowedProjectOwner: void 0,
                customEditMenuEntries: void 0,
                shouldSkipSetDocumentTitle: !1,
                issueQueriesFetchingPolicy: void 0,
                timelineEventBaseUrl: void 0,
                titleAs: "h1",
                innerSx: void 0,
                useViewportQueries: !1,
            };
        },
        6403: (e, l, n) => {
            n.d(l, { A: () => s });
            let a = (function () {
                var e = {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "markAsRead",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "repo",
                    },
                    s = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "repo",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    i = [
                        {
                            kind: "Variable",
                            name: "markAsRead",
                            variableName: "markAsRead",
                        },
                        {
                            kind: "Variable",
                            name: "number",
                            variableName: "number",
                        },
                    ],
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [o, d, t],
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "total",
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "completed",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        concreteType: "SubIssuesSummary",
                        kind: "LinkedField",
                        name: "subIssuesSummary",
                        plural: !1,
                        selections: [b, h],
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "target",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "oid",
                                storageKey: null,
                            },
                            t,
                            o,
                        ],
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    },
                    v = [I],
                    L = {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "associatedPullRequests",
                        plural: !1,
                        selections: v,
                        storageKey: null,
                    },
                    T = [t],
                    C = { kind: "Literal", name: "first", value: 10 },
                    x = {
                        kind: "Literal",
                        name: "includeClosedPrs",
                        value: !0,
                    },
                    R = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    N = { kind: "Literal", name: "ranked", value: !0 },
                    j = [{ kind: "Literal", name: "first", value: 3 }, N],
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    w = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "nodes",
                            plural: !0,
                            selections: [
                                t,
                                p,
                                k,
                                F,
                                r,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Repository",
                                    kind: "LinkedField",
                                    name: "repository",
                                    plural: !1,
                                    selections: [m, t],
                                    storageKey: null,
                                },
                                g,
                                y,
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "PageInfo",
                            kind: "LinkedField",
                            name: "pageInfo",
                            plural: !1,
                            selections: [_],
                            storageKey: null,
                        },
                    ],
                    E = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "blockedBy",
                        storageKey: null,
                    },
                    A = [C],
                    P = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    B = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    D = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                    M = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [u, c, t],
                        storageKey: null,
                    },
                    V = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n, a],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueViewerSecondaryViewQuery",
                        selections: [
                            {
                                alias: null,
                                args: s,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        args: i,
                                        kind: "FragmentSpread",
                                        name: "IssueViewerSecondaryViewQueryData",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [a, n, l, e],
                        kind: "Operation",
                        name: "IssueViewerSecondaryViewQuery",
                        selections: [
                            {
                                alias: null,
                                args: s,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: i,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            t,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isTransferInProgress",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "parent",
                                                plural: !1,
                                                selections: [
                                                    t,
                                                    r,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "Repository",
                                                        kind: "LinkedField",
                                                        name: "repository",
                                                        plural: !1,
                                                        selections: [
                                                            u,
                                                            c,
                                                            t,
                                                            m,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    g,
                                                    y,
                                                    p,
                                                    k,
                                                    F,
                                                    f,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanReopen",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanClose",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "authorAssociation",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Discussion",
                                                kind: "LinkedField",
                                                name: "discussion",
                                                plural: !1,
                                                selections: [F, t],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "slashCommandsEnabled",
                                                        storageKey: null,
                                                    },
                                                    t,
                                                    K,
                                                    u,
                                                    c,
                                                    m,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "isArchived",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "viewerCanPinIssues",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "isPrivate",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueForm",
                                                        kind: "LinkedField",
                                                        name: "issueForms",
                                                        plural: !0,
                                                        selections: [o],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "visibility",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "viewerCanPush",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            p,
                                            r,
                                            K,
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 25,
                                                    },
                                                ],
                                                concreteType:
                                                    "LinkedBranchConnection",
                                                kind: "LinkedField",
                                                name: "linkedBranches",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "LinkedBranch",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            t,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Ref",
                                                                kind: "LinkedField",
                                                                name: "ref",
                                                                plural: !1,
                                                                selections: [
                                                                    u,
                                                                    t,
                                                                    o,
                                                                    S,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                m,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Ref",
                                                                                    kind: "LinkedField",
                                                                                    name: "defaultBranchRef",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            u,
                                                                                            t,
                                                                                            S,
                                                                                            L,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "Repository",
                                                                                                kind: "LinkedField",
                                                                                                name: "repository",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    T,
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    L,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "linkedBranches(first:25)",
                                            },
                                            {
                                                alias: null,
                                                args: [C, x],
                                                concreteType:
                                                    "PullRequestConnection",
                                                kind: "LinkedField",
                                                name: "closedByPullRequestsReferences",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PullRequest",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            t,
                                                            F,
                                                            r,
                                                            p,
                                                            g,
                                                            R,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "isInMergeQueue",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "createdAt",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "repository",
                                                                plural: !1,
                                                                selections: [
                                                                    t,
                                                                    u,
                                                                    m,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "owner",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                d,
                                                                                o,
                                                                                t,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            o,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "closedByPullRequestsReferences(first:10,includeClosedPrs:true)",
                                            },
                                            {
                                                alias: "linkedPullRequests",
                                                args: [
                                                    C,
                                                    {
                                                        kind: "Literal",
                                                        name: "includeClosedPrs",
                                                        value: !1,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "orderByState",
                                                        value: !0,
                                                    },
                                                ],
                                                concreteType:
                                                    "PullRequestConnection",
                                                kind: "LinkedField",
                                                name: "closedByPullRequestsReferences",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PullRequest",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "repository",
                                                                plural: !1,
                                                                selections: [
                                                                    m,
                                                                    t,
                                                                    u,
                                                                    c,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            g,
                                                            R,
                                                            F,
                                                            r,
                                                            t,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "closedByPullRequestsReferences(first:10,includeClosedPrs:false,orderByState:true)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanLinkBranches",
                                                storageKey: null,
                                            },
                                            {
                                                alias: "topBlockedBy",
                                                args: j,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "blockedBy",
                                                plural: !1,
                                                selections: w,
                                                storageKey:
                                                    "blockedBy(first:3,ranked:true)",
                                            },
                                            {
                                                alias: "topBlocking",
                                                args: j,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "blocking",
                                                plural: !1,
                                                selections: w,
                                                storageKey:
                                                    "blocking(first:3,ranked:true)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "IssueDependenciesSummary",
                                                kind: "LinkedField",
                                                name: "issueDependenciesSummary",
                                                plural: !1,
                                                selections: [
                                                    E,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "blocking",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanUpdateMetadata",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "threadSubscriptionChannel",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerThreadSubscriptionFormAction",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCustomSubscriptionEvents",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: A,
                                                concreteType: "UserConnection",
                                                kind: "LinkedField",
                                                name: "participants",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "User",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            t,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    o,
                                                                    d,
                                                                    u,
                                                                    P,
                                                                    B,
                                                                    D,
                                                                ],
                                                                type: "Actor",
                                                                abstractKey:
                                                                    "__isActor",
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    I,
                                                ],
                                                storageKey:
                                                    "participants(first:10)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanConvertToDiscussion",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanDelete",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanTransfer",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanType",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanLock",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: A,
                                                concreteType:
                                                    "AssigneeConnection",
                                                kind: "LinkedField",
                                                name: "suggestedActors",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            o,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    t,
                                                                    d,
                                                                    u,
                                                                    P,
                                                                    B,
                                                                    D,
                                                                ],
                                                                type: "Actor",
                                                                abstractKey:
                                                                    "__isActor",
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: T,
                                                                type: "Node",
                                                                abstractKey:
                                                                    "__isNode",
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "suggestedActors(first:10)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "TaskListSummary",
                                                kind: "LinkedField",
                                                name: "taskListSummary",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "itemCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "completeCount",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "TrackedIssueCompletion",
                                                kind: "LinkedField",
                                                name: "tasklistBlocksCompletion",
                                                plural: !1,
                                                selections: [h, b],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: A,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "trackedInIssues",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Issue",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            r,
                                                            F,
                                                            y,
                                                            t,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    I,
                                                ],
                                                storageKey:
                                                    "trackedInIssues(first:10)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanReport",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanReportToMaintainer",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanBlockFromOrg",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanUnblockFromOrg",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 100,
                                                    },
                                                ],
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "subIssues",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Issue",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            t,
                                                            g,
                                                            y,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "IssueDependenciesSummary",
                                                                kind: "LinkedField",
                                                                name: "issueDependenciesSummary",
                                                                plural: !1,
                                                                selections: [E],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: A,
                                                                concreteType:
                                                                    "UserConnection",
                                                                kind: "LinkedField",
                                                                name: "assignees",
                                                                plural: !1,
                                                                selections: [
                                                                    I,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "UserEdge",
                                                                        kind: "LinkedField",
                                                                        name: "edges",
                                                                        plural: !0,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "User",
                                                                                    kind: "LinkedField",
                                                                                    name: "node",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            t,
                                                                                            d,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "avatarUrl",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    "assignees(first:10)",
                                                            },
                                                            F,
                                                            M,
                                                            K,
                                                            r,
                                                            p,
                                                            k,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "IssueType",
                                                                kind: "LinkedField",
                                                                name: "issueType",
                                                                plural: !1,
                                                                selections: [
                                                                    t,
                                                                    u,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "color",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            f,
                                                            {
                                                                alias: null,
                                                                args: [
                                                                    {
                                                                        kind: "Literal",
                                                                        name: "first",
                                                                        value: 0,
                                                                    },
                                                                    x,
                                                                ],
                                                                concreteType:
                                                                    "PullRequestConnection",
                                                                kind: "LinkedField",
                                                                name: "closedByPullRequestsReferences",
                                                                plural: !1,
                                                                selections: v,
                                                                storageKey:
                                                                    "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                                                            },
                                                            V,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "subIssues(first:100)",
                                            },
                                            {
                                                alias: "subIssuesConnection",
                                                args: null,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "subIssues",
                                                plural: !1,
                                                selections: v,
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: A,
                                                concreteType:
                                                    "ProjectV2ItemConnection",
                                                kind: "LinkedField",
                                                name: "projectItemsNext",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "ProjectV2ItemEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "ProjectV2Item",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "ProjectV2",
                                                                        kind: "LinkedField",
                                                                        name: "project",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                p,
                                                                                V,
                                                                                r,
                                                                                F,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUpdate",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "hasReachedItemsLimit",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                o,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    t,
                                                                    o,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "endCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            _,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "projectItemsNext(first:10)",
                                            },
                                            {
                                                alias: null,
                                                args: A,
                                                filters: null,
                                                handle: "connection",
                                                key: "ProjectSection_projectItemsNext",
                                                kind: "LinkedHandle",
                                                name: "projectItemsNext",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Milestone",
                                                kind: "LinkedField",
                                                name: "milestone",
                                                plural: !1,
                                                selections: [
                                                    t,
                                                    p,
                                                    V,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "dueOn",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "progressPercentage",
                                                        storageKey: null,
                                                    },
                                                    F,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "closedAt",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            g,
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 1,
                                                    },
                                                    N,
                                                ],
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "blockedBy",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Issue",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            k,
                                                            r,
                                                            F,
                                                            M,
                                                            t,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "blockedBy(first:1,ranked:true)",
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "viewerCanReadUserContentEdits",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "lastEditedAt",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "UserContentEdit",
                                                        kind: "LinkedField",
                                                        name: "lastUserContentEdit",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "editor",
                                                                plural: !1,
                                                                selections: [
                                                                    o,
                                                                    F,
                                                                    d,
                                                                    t,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            t,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "showSpammyBadge",
                                                        storageKey: null,
                                                    },
                                                ],
                                                type: "Comment",
                                                abstractKey: "__isComment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "codeOfConductFileUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "securityPolicyUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "contributingFileUrl",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "supportFileUrl",
                                        storageKey: null,
                                    },
                                    t,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "c3c9a7cef257cae7515316888af4f99b",
                        metadata: {},
                        name: "IssueViewerSecondaryViewQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            a.hash = "4ace59b498083162062aa1fcd4030248";
            let s = a;
        },
        81469: (e, l, n) => {
            n.d(l, { A: () => s });
            let a = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "allowedOwner",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "count",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "repo",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    t = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "repo",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isOwnerEnterpriseManaged",
                        storageKey: null,
                    },
                    u = [
                        {
                            kind: "Variable",
                            name: "number",
                            variableName: "number",
                        },
                    ],
                    o = {
                        kind: "Variable",
                        name: "allowedOwner",
                        variableName: "allowedOwner",
                    },
                    d = {
                        kind: "Variable",
                        name: "skip",
                        variableName: "skip",
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isArchived",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isPrivate",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "slashCommandsEnabled",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    },
                    v = { kind: "Literal", name: "first", value: 100 },
                    L = [c],
                    T = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    x = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    R = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    N = [k, F, c],
                    j = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: N,
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [p, j, c],
                        storageKey: null,
                    },
                    w = { kind: "Literal", name: "first", value: 10 },
                    E = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    A = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    P = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    B = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isCopilot",
                        storageKey: null,
                    },
                    D = {
                        kind: "InlineFragment",
                        selections: [B],
                        type: "Bot",
                        abstractKey: null,
                    },
                    M = {
                        kind: "InlineFragment",
                        selections: L,
                        type: "Node",
                        abstractKey: "__isNode",
                    },
                    V = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    U = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerDidAuthor",
                        storageKey: null,
                    },
                    O = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "locked",
                        storageKey: null,
                    },
                    q = { kind: "TypeDiscriminator", abstractKey: "__isActor" },
                    H = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileUrl",
                        storageKey: null,
                    },
                    $ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: null,
                    },
                    z = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "body",
                        storageKey: null,
                    },
                    W = {
                        kind: "Literal",
                        name: "unfurlReferences",
                        value: !0,
                    },
                    Q = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "bodyVersion",
                        storageKey: null,
                    },
                    G = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanDelete",
                        storageKey: null,
                    },
                    Y = [
                        c,
                        p,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "dataType",
                            storageKey: null,
                        },
                    ],
                    X = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "value",
                        storageKey: null,
                    },
                    J = {
                        kind: "Literal",
                        name: "visibleEventsOnly",
                        value: !0,
                    },
                    Z = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "count",
                        },
                        d,
                        J,
                    ],
                    ee = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    el = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "endCursor",
                        storageKey: null,
                    },
                    en = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    ea = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanUpdate",
                        storageKey: null,
                    },
                    es = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "pendingBlock",
                        storageKey: null,
                    },
                    ei = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "pendingUnblock",
                        storageKey: null,
                    },
                    et = [F],
                    er = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "ReactionGroup",
                                kind: "LinkedField",
                                name: "reactionGroups",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "content",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerHasReacted",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "first",
                                                value: 5,
                                            },
                                        ],
                                        concreteType: "ReactorConnection",
                                        kind: "LinkedField",
                                        name: "reactors",
                                        plural: !1,
                                        selections: [
                                            I,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "nodes",
                                                plural: !0,
                                                selections: [
                                                    k,
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: et,
                                                        type: "User",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [F, B],
                                                        type: "Bot",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: et,
                                                        type: "Organization",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: et,
                                                        type: "Mannequin",
                                                        abstractKey: null,
                                                    },
                                                    M,
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: "reactors(first:5)",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Reactable",
                        abstractKey: "__isReactable",
                    },
                    eu = [k, M],
                    eo = {
                        alias: "issueTitleHTML",
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    ed = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [c, p, K, j],
                        storageKey: null,
                    },
                    ec = {
                        kind: "InlineFragment",
                        selections: [c, eo, b, g, R, ed],
                        type: "Issue",
                        abstractKey: null,
                    },
                    em = {
                        alias: "pullTitleHTML",
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    eg = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInMergeQueue",
                        storageKey: null,
                    },
                    ey = {
                        kind: "InlineFragment",
                        selections: [c, em, b, g, x, E, eg, ed],
                        type: "PullRequest",
                        abstractKey: null,
                    },
                    ep = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [k, q, P, F, A, D, c],
                        storageKey: null,
                    },
                    ek = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameHTML",
                        storageKey: null,
                    },
                    eF = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Label",
                            kind: "LinkedField",
                            name: "label",
                            plural: !1,
                            selections: [c, ek, p, T, C],
                            storageKey: null,
                        },
                        h,
                        en,
                        ep,
                    ],
                    eb = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "resourcePath",
                        storageKey: null,
                    },
                    eh = [F, eb],
                    ef = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "assignee",
                        plural: !1,
                        selections: [
                            k,
                            {
                                kind: "InlineFragment",
                                selections: L,
                                type: "User",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: L,
                                type: "Bot",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: L,
                                type: "Mannequin",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: L,
                                type: "Organization",
                                abstractKey: null,
                            },
                            M,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    F,
                                    {
                                        kind: "InlineFragment",
                                        selections: eh,
                                        type: "User",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eh,
                                        type: "Mannequin",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eh,
                                        type: "Organization",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [F, eb, B],
                                        type: "Bot",
                                        abstractKey: null,
                                    },
                                ],
                                type: "Actor",
                                abstractKey: "__isActor",
                            },
                        ],
                        storageKey: null,
                    },
                    eK = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [c, b],
                            storageKey: null,
                        },
                        h,
                        en,
                        ep,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "milestoneTitle",
                            storageKey: null,
                        },
                    ],
                    eS = [en, h, ep],
                    eI = {
                        kind: "InlineFragment",
                        selections: [ec, ey],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    ev = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "abbreviatedOid",
                        storageKey: null,
                    },
                    eL = [h, en, ep],
                    eT = {
                        kind: "InlineFragment",
                        selections: [
                            k,
                            {
                                kind: "InlineFragment",
                                selections: [eo, b, g, R, ed],
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [em, b, g, x, E, eg, ed],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    eC = [c, eT],
                    ex = [
                        h,
                        ep,
                        en,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "blockingIssue",
                            plural: !1,
                            selections: eC,
                            storageKey: null,
                        },
                    ],
                    eR = [
                        h,
                        ep,
                        en,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "blockedIssue",
                            plural: !1,
                            selections: eC,
                            storageKey: null,
                        },
                    ],
                    eN = [h, c, eT],
                    ej = [
                        h,
                        ep,
                        en,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "subIssue",
                            plural: !1,
                            selections: eN,
                            storageKey: null,
                        },
                    ],
                    e_ = [
                        h,
                        ep,
                        en,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "parent",
                            plural: !1,
                            selections: eN,
                            storageKey: null,
                        },
                    ],
                    ew = [
                        h,
                        ep,
                        en,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "subject",
                            plural: !1,
                            selections: [
                                k,
                                {
                                    kind: "InlineFragment",
                                    selections: [m, b, g, x, E, eg, _],
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                                M,
                            ],
                            storageKey: null,
                        },
                    ],
                    eE = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [eo, b, R, ed],
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [em, b, x, E, eg, ed],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    eA = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isCanonicalOfClosedDuplicate",
                        storageKey: null,
                    },
                    eP = [eI],
                    eB = {
                        alias: null,
                        args: null,
                        concreteType: "ProjectV2",
                        kind: "LinkedField",
                        name: "project",
                        plural: !1,
                        selections: [m, b, c],
                        storageKey: null,
                    },
                    eD = [p, T, c],
                    eM = {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "issueType",
                        plural: !1,
                        selections: eD,
                        storageKey: null,
                    },
                    eV = [h, ep, en, eM],
                    eU = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    eO = {
                        alias: null,
                        args: null,
                        concreteType: "IssueTimelineItemsEdge",
                        kind: "LinkedField",
                        name: "edges",
                        plural: !0,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    k,
                                    {
                                        kind: "TypeDiscriminator",
                                        abstractKey: "__isIssueTimelineItems",
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            h,
                                            en,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "actor",
                                                plural: !1,
                                                selections: N,
                                                storageKey: null,
                                            },
                                        ],
                                        type: "TimelineEvent",
                                        abstractKey: "__isTimelineEvent",
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            h,
                                            U,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "issue",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "author",
                                                        plural: !1,
                                                        selections: N,
                                                        storageKey: null,
                                                    },
                                                    c,
                                                    g,
                                                    O,
                                                    h,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "author",
                                                plural: !1,
                                                selections: [k, F, $, H, c],
                                                storageKey: null,
                                            },
                                            c,
                                            z,
                                            {
                                                alias: null,
                                                args: [W],
                                                kind: "ScalarField",
                                                name: "bodyHTML",
                                                storageKey:
                                                    "bodyHTML(unfurlReferences:true)",
                                            },
                                            Q,
                                            ea,
                                            b,
                                            en,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "authorAssociation",
                                                storageKey: null,
                                            },
                                            G,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanMinimize",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanReport",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanReportToMaintainer",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanBlockFromOrg",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanUnblockFromOrg",
                                                storageKey: null,
                                            },
                                            {
                                                alias: "isHidden",
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isMinimized",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "minimizedReason",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "showSpammyBadge",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "createdViaEmail",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Sponsorship",
                                                kind: "LinkedField",
                                                name: "authorToRepoOwnerSponsorship",
                                                plural: !1,
                                                selections: [
                                                    en,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "isActive",
                                                        storageKey: null,
                                                    },
                                                    c,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    c,
                                                    p,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [
                                                            k,
                                                            c,
                                                            F,
                                                            b,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    K,
                                                    S,
                                                    y,
                                                    h,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "viewerCanReadUserContentEdits",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "lastEditedAt",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "UserContentEdit",
                                                        kind: "LinkedField",
                                                        name: "lastUserContentEdit",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "editor",
                                                                plural: !1,
                                                                selections: [
                                                                    k,
                                                                    b,
                                                                    F,
                                                                    c,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            c,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                type: "Comment",
                                                abstractKey: "__isComment",
                                            },
                                            {
                                                kind: "ClientExtension",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "pendingMinimizeReason",
                                                        storageKey: null,
                                                    },
                                                    es,
                                                    ei,
                                                ],
                                            },
                                            er,
                                        ],
                                        type: "IssueComment",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "source",
                                                plural: !1,
                                                selections: eu,
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "willCloseTarget",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "referencedAt",
                                                storageKey: null,
                                            },
                                            h,
                                            {
                                                alias: "innerSource",
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "source",
                                                plural: !1,
                                                selections: [
                                                    k,
                                                    {
                                                        kind: "TypeDiscriminator",
                                                        abstractKey:
                                                            "__isReferencedSubject",
                                                    },
                                                    ec,
                                                    ey,
                                                    M,
                                                ],
                                                storageKey: null,
                                            },
                                            ep,
                                        ],
                                        type: "CrossReferencedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eF,
                                        type: "LabeledEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eF,
                                        type: "UnlabeledEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [ef, h, en, ep],
                                        type: "AssignedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            ef,
                                            h,
                                            en,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "actor",
                                                plural: !1,
                                                selections: [
                                                    k,
                                                    F,
                                                    q,
                                                    P,
                                                    A,
                                                    D,
                                                    c,
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "UnassignedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eK,
                                        type: "MilestonedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eK,
                                        type: "DemilestonedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eS,
                                        type: "SubscribedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eS,
                                        type: "UnsubscribedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eS,
                                        type: "MentionedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            h,
                                            en,
                                            R,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "duplicateOf",
                                                plural: !1,
                                                selections: [k, eI, M],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "closingProjectItemStatus",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "closer",
                                                plural: !1,
                                                selections: [
                                                    k,
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [b, m],
                                                        type: "ProjectV2",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [b, g, _],
                                                        type: "PullRequest",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [b, ev, _],
                                                        type: "Commit",
                                                        abstractKey: null,
                                                    },
                                                    M,
                                                ],
                                                storageKey: null,
                                            },
                                            ep,
                                        ],
                                        type: "ClosedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eL,
                                        type: "ReopenedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            h,
                                            en,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "lockReason",
                                                storageKey: null,
                                            },
                                            ep,
                                        ],
                                        type: "LockedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eL,
                                        type: "UnlockedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eL,
                                        type: "PinnedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eL,
                                        type: "UnpinnedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            h,
                                            en,
                                            ep,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "currentTitle",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "previousTitle",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "RenamedTitleEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: ex,
                                        type: "BlockedByAddedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: ex,
                                        type: "BlockedByRemovedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eR,
                                        type: "BlockingAddedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eR,
                                        type: "BlockingRemovedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            h,
                                            en,
                                            ep,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "deletedCommentAuthor",
                                                plural: !1,
                                                selections: N,
                                                storageKey: null,
                                            },
                                        ],
                                        type: "CommentDeletedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            h,
                                            en,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "blockDuration",
                                                storageKey: null,
                                            },
                                            ep,
                                            {
                                                alias: "blockedUser",
                                                args: null,
                                                concreteType: "User",
                                                kind: "LinkedField",
                                                name: "subject",
                                                plural: !1,
                                                selections: [F, c],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "UserBlockedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: ej,
                                        type: "SubIssueAddedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: ej,
                                        type: "SubIssueRemovedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: e_,
                                        type: "ParentIssueAddedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: e_,
                                        type: "ParentIssueRemovedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            c,
                                            h,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "willCloseSubject",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "subject",
                                                plural: !1,
                                                selections: eu,
                                                storageKey: null,
                                            },
                                            ep,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Commit",
                                                kind: "LinkedField",
                                                name: "commit",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "message",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "messageHeadlineHTML",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "messageBodyHTML",
                                                        storageKey: null,
                                                    },
                                                    b,
                                                    ev,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "Repository",
                                                        kind: "LinkedField",
                                                        name: "repository",
                                                        plural: !1,
                                                        selections: [
                                                            p,
                                                            j,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "defaultBranch",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            c,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    c,
                                                ],
                                                storageKey: null,
                                            },
                                            en,
                                        ],
                                        type: "ReferencedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: ew,
                                        type: "ConnectedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            h,
                                            ep,
                                            en,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "fromRepository",
                                                plural: !1,
                                                selections: [y, b, c],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "TransferredEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: ew,
                                        type: "DisconnectedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            ep,
                                            en,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "canonical",
                                                plural: !1,
                                                selections: [
                                                    k,
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [c, g, eE],
                                                        type: "Issue",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [g, c, eE],
                                                        type: "PullRequest",
                                                        abstractKey: null,
                                                    },
                                                    M,
                                                ],
                                                storageKey: null,
                                            },
                                            eA,
                                            h,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanUndo",
                                                storageKey: null,
                                            },
                                            c,
                                            {
                                                kind: "ClientExtension",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "pendingUndo",
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                        ],
                                        type: "MarkedAsDuplicateEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            ep,
                                            en,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "canonical",
                                                plural: !1,
                                                selections: [
                                                    k,
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: eP,
                                                        type: "Issue",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: eP,
                                                        type: "PullRequest",
                                                        abstractKey: null,
                                                    },
                                                    M,
                                                ],
                                                storageKey: null,
                                            },
                                            eA,
                                            h,
                                        ],
                                        type: "UnmarkedAsDuplicateEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            h,
                                            ep,
                                            en,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Discussion",
                                                kind: "LinkedField",
                                                name: "discussion",
                                                plural: !1,
                                                selections: [b, g, c],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "ConvertedToDiscussionEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [h, en, ep, eB],
                                        type: "AddedToProjectV2Event",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [en, ep, eB],
                                        type: "RemovedFromProjectV2Event",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            en,
                                            ep,
                                            eB,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "previousStatus",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "status",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "ProjectV2ItemStatusChangedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [en, ep, h],
                                        type: "ConvertedFromDraftEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eV,
                                        type: "IssueTypeAddedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: eV,
                                        type: "IssueTypeRemovedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            h,
                                            ep,
                                            en,
                                            eM,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "prevIssueType",
                                                plural: !1,
                                                selections: eD,
                                                storageKey: null,
                                            },
                                        ],
                                        type: "IssueTypeChangedEvent",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "ClientExtension",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__id",
                                                storageKey: null,
                                            },
                                        ],
                                    },
                                    M,
                                ],
                                storageKey: null,
                            },
                            eU,
                        ],
                        storageKey: null,
                    },
                    eq = [{ kind: "Literal", name: "last", value: 0 }, J],
                    eH = [
                        v,
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    e$ = {
                        alias: null,
                        args: null,
                        concreteType: "PageInfo",
                        kind: "LinkedField",
                        name: "pageInfo",
                        plural: !1,
                        selections: [el, ee],
                        storageKey: null,
                    },
                    ez = [
                        {
                            kind: "Literal",
                            name: "allowSameEnterprise",
                            value: !0,
                        },
                        o,
                        w,
                    ],
                    eW = [{ kind: "Literal", name: "name", value: "Status" }],
                    eQ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "optionId",
                        storageKey: null,
                    },
                    eG = {
                        alias: null,
                        args: ez,
                        concreteType: "ProjectV2ItemConnection",
                        kind: "LinkedField",
                        name: "projectItemsNext",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "ProjectV2ItemEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "ProjectV2Item",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            c,
                                            f,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "ProjectV2",
                                                kind: "LinkedField",
                                                name: "project",
                                                plural: !1,
                                                selections: [
                                                    c,
                                                    m,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "template",
                                                        storageKey: null,
                                                    },
                                                    ea,
                                                    b,
                                                    {
                                                        alias: null,
                                                        args: eW,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "field",
                                                        plural: !1,
                                                        selections: [
                                                            k,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    c,
                                                                    p,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "ProjectV2SingleSelectFieldOption",
                                                                        kind: "LinkedField",
                                                                        name: "options",
                                                                        plural: !0,
                                                                        selections:
                                                                            [
                                                                                c,
                                                                                eQ,
                                                                                p,
                                                                                ek,
                                                                                T,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "descriptionHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                C,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "ProjectV2SingleSelectField",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            M,
                                                        ],
                                                        storageKey:
                                                            'field(name:"Status")',
                                                    },
                                                    V,
                                                    g,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "hasReachedItemsLimit",
                                                        storageKey: null,
                                                    },
                                                    k,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: eW,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "fieldValueByName",
                                                plural: !1,
                                                selections: [
                                                    k,
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            c,
                                                            eQ,
                                                            p,
                                                            ek,
                                                            T,
                                                        ],
                                                        type: "ProjectV2ItemFieldSingleSelectValue",
                                                        abstractKey: null,
                                                    },
                                                    M,
                                                ],
                                                storageKey:
                                                    'fieldValueByName(name:"Status")',
                                            },
                                            k,
                                        ],
                                        storageKey: null,
                                    },
                                    eU,
                                ],
                                storageKey: null,
                            },
                            e$,
                        ],
                        storageKey: null,
                    },
                    eY = {
                        alias: null,
                        args: ez,
                        filters: ["allowedOwner", "allowSameEnterprise"],
                        handle: "connection",
                        key: "ProjectSection_projectItemsNext",
                        kind: "LinkedHandle",
                        name: "projectItemsNext",
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n, a, s, i],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueViewerViewQuery",
                        selections: [
                            {
                                alias: null,
                                args: t,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    r,
                                    {
                                        kind: "RequiredField",
                                        field: {
                                            alias: null,
                                            args: u,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issue",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: [
                                                        o,
                                                        {
                                                            kind: "Variable",
                                                            name: "count",
                                                            variableName:
                                                                "count",
                                                        },
                                                        d,
                                                    ],
                                                    kind: "FragmentSpread",
                                                    name: "IssueViewerIssue",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        action: "THROW",
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "safeViewer",
                                plural: !1,
                                selections: [
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "IssueViewerViewer",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [s, a, n, e, i, l],
                        kind: "Operation",
                        name: "IssueViewerViewQuery",
                        selections: [
                            {
                                alias: null,
                                args: t,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    r,
                                    {
                                        alias: null,
                                        args: u,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            c,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "updatedAt",
                                                storageKey: null,
                                            },
                                            m,
                                            g,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    y,
                                                    c,
                                                    p,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [
                                                            k,
                                                            F,
                                                            c,
                                                            b,
                                                            h,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    f,
                                                    K,
                                                    h,
                                                    S,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueForm",
                                                        kind: "LinkedField",
                                                        name: "issueForms",
                                                        plural: !0,
                                                        selections: [k],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "visibility",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "viewerCanPush",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "viewerCanInteract",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "viewerInteractionLimitReasonHTML",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "RepositoryPlanFeatures",
                                                        kind: "LinkedField",
                                                        name: "planFeatures",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "maximumAssignees",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "isCopilotAgentEnabled",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: [
                                                            {
                                                                kind: "Literal",
                                                                name: "first",
                                                                value: 3,
                                                            },
                                                        ],
                                                        concreteType:
                                                            "PinnedIssueConnection",
                                                        kind: "LinkedField",
                                                        name: "pinnedIssues",
                                                        plural: !1,
                                                        selections: [I],
                                                        storageKey:
                                                            "pinnedIssues(first:3)",
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "viewerCanPinIssues",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueCreationPermissions",
                                                        kind: "LinkedField",
                                                        name: "viewerIssueCreationPermissions",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "triageable",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: [v],
                                                        concreteType:
                                                            "IssueTypeConnection",
                                                        kind: "LinkedField",
                                                        name: "issueTypes",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "IssueTypeEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "IssueType",
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            L,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey:
                                                            "issueTypes(first:100)",
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "titleHTML",
                                                storageKey: null,
                                            },
                                            b,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanUpdateNext",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: [
                                                    p,
                                                    T,
                                                    c,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "isEnabled",
                                                        storageKey: null,
                                                    },
                                                    C,
                                                ],
                                                storageKey: null,
                                            },
                                            x,
                                            R,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "duplicateOf",
                                                plural: !1,
                                                selections: [g, b, _, c],
                                                storageKey: null,
                                            },
                                            {
                                                alias: "linkedPullRequests",
                                                args: [
                                                    w,
                                                    {
                                                        kind: "Literal",
                                                        name: "includeClosedPrs",
                                                        value: !1,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "orderByState",
                                                        value: !0,
                                                    },
                                                ],
                                                concreteType:
                                                    "PullRequestConnection",
                                                kind: "LinkedField",
                                                name: "closedByPullRequestsReferences",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PullRequest",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "repository",
                                                                plural: !1,
                                                                selections: [
                                                                    y,
                                                                    c,
                                                                    p,
                                                                    j,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            x,
                                                            E,
                                                            b,
                                                            g,
                                                            c,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "closedByPullRequestsReferences(first:10,includeClosedPrs:false,orderByState:true)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "SubIssuesSummary",
                                                kind: "LinkedField",
                                                name: "subIssuesSummary",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "total",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "completed",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 20,
                                                    },
                                                ],
                                                concreteType:
                                                    "AssigneeConnection",
                                                kind: "LinkedField",
                                                name: "assignedActors",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            k,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    c,
                                                                    F,
                                                                    p,
                                                                    A,
                                                                    P,
                                                                    D,
                                                                ],
                                                                type: "Actor",
                                                                abstractKey:
                                                                    "__isActor",
                                                            },
                                                            M,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "assignedActors(first:20)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Milestone",
                                                kind: "LinkedField",
                                                name: "milestone",
                                                plural: !1,
                                                selections: [
                                                    c,
                                                    m,
                                                    V,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "dueOn",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "progressPercentage",
                                                        storageKey: null,
                                                    },
                                                    b,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "closedAt",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            h,
                                            U,
                                            O,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "author",
                                                plural: !1,
                                                selections: [k, q, F, c, H, $],
                                                storageKey: null,
                                            },
                                            z,
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "renderTasklistBlocks",
                                                        value: !0,
                                                    },
                                                    W,
                                                ],
                                                kind: "ScalarField",
                                                name: "bodyHTML",
                                                storageKey:
                                                    "bodyHTML(renderTasklistBlocks:true,unfurlReferences:true)",
                                            },
                                            Q,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanUpdateMetadata",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanComment",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanAssign",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanLabel",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanSetMilestone",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isPinned",
                                                storageKey: null,
                                            },
                                            G,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanTransfer",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanConvertToDiscussion",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanLock",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanType",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanSetFields",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 25,
                                                    },
                                                ],
                                                concreteType:
                                                    "IssueFieldValueConnection",
                                                kind: "LinkedField",
                                                name: "issueFieldValues",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            k,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "field",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                k,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        Y,
                                                                                    type: "IssueFieldText",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                M,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    X,
                                                                ],
                                                                type: "IssueFieldTextValue",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "field",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                k,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        Y,
                                                                                    type: "IssueFieldSingleSelect",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                M,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    p,
                                                                    T,
                                                                    C,
                                                                ],
                                                                type: "IssueFieldSingleSelectValue",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "field",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                k,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        Y,
                                                                                    type: "IssueFieldDate",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                M,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    X,
                                                                ],
                                                                type: "IssueFieldDateValue",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "field",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                k,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        Y,
                                                                                    type: "IssueFieldNumber",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                M,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: "numberValue",
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "value",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "IssueFieldNumberValue",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            M,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "issueFieldValues(first:25)",
                                            },
                                            {
                                                alias: "frontTimelineItems",
                                                args: Z,
                                                concreteType:
                                                    "IssueTimelineItemsConnection",
                                                kind: "LinkedField",
                                                name: "timelineItems",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [ee, el],
                                                        storageKey: null,
                                                    },
                                                    I,
                                                    eO,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: "frontTimelineItems",
                                                args: Z,
                                                filters: [
                                                    "visibleEventsOnly",
                                                    "skip",
                                                ],
                                                handle: "connection",
                                                key: "Issue__frontTimelineItems",
                                                kind: "LinkedHandle",
                                                name: "timelineItems",
                                            },
                                            {
                                                alias: "backTimelineItems",
                                                args: eq,
                                                concreteType:
                                                    "IssueTimelineItemsConnection",
                                                kind: "LinkedField",
                                                name: "timelineItems",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasPreviousPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "startCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    I,
                                                    eO,
                                                ],
                                                storageKey:
                                                    "timelineItems(last:0,visibleEventsOnly:true)",
                                            },
                                            {
                                                alias: "backTimelineItems",
                                                args: eq,
                                                filters: ["visibleEventsOnly"],
                                                handle: "connection",
                                                key: "Issue__backTimelineItems",
                                                kind: "LinkedHandle",
                                                name: "timelineItems",
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: eH,
                                                        concreteType:
                                                            "LabelConnection",
                                                        kind: "LinkedField",
                                                        name: "labels",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "LabelEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Label",
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                c,
                                                                                T,
                                                                                p,
                                                                                ek,
                                                                                C,
                                                                                b,
                                                                                k,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    eU,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            e$,
                                                        ],
                                                        storageKey:
                                                            'labels(first:100,orderBy:{"direction":"ASC","field":"NAME"})',
                                                    },
                                                    {
                                                        alias: null,
                                                        args: eH,
                                                        filters: ["orderBy"],
                                                        handle: "connection",
                                                        key: "MetadataSectionAssignedLabels_labels",
                                                        kind: "LinkedHandle",
                                                        name: "labels",
                                                    },
                                                    {
                                                        kind: "TypeDiscriminator",
                                                        abstractKey: "__isNode",
                                                    },
                                                ],
                                                type: "Labelable",
                                                abstractKey: "__isLabelable",
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: [en],
                                                type: "Comment",
                                                abstractKey: "__isComment",
                                            },
                                            er,
                                            {
                                                kind: "ClientExtension",
                                                selections: [es, ei],
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [eG, eY],
                                                        type: "Issue",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            eG,
                                                            eY,
                                                            ea,
                                                        ],
                                                        type: "PullRequest",
                                                        abstractKey: null,
                                                    },
                                                ],
                                                type: "IssueOrPullRequest",
                                                abstractKey:
                                                    "__isIssueOrPullRequest",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    c,
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "safeViewer",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isEnterpriseManagedUser",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "enterpriseManagedEnterpriseId",
                                        storageKey: null,
                                    },
                                    F,
                                    c,
                                    P,
                                    {
                                        kind: "InlineFragment",
                                        selections: [k, p, A, D],
                                        type: "Actor",
                                        abstractKey: "__isActor",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "5df0d69f2f4f6801f2bea2da1e10a0ad",
                        metadata: {},
                        name: "IssueViewerViewQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            a.hash = "6c7887cee58a1677480269f0fbb66fa2";
            let s = a;
        },
        66730: (e, l, n) => {
            n.d(l, { l: () => a });
            let a = {
                copyIssueLink: "Copy link",
                deleteIssue: "Delete issue",
                issueActions: "Issue actions",
                transferIssue: "Transfer issue",
                convertToDiscussion: "Convert to discussion",
                acknowledgeAndConvertToDiscussion:
                    "I understand, convert this issue",
                tryAgain: "Try again",
                updateComment: "Update comment",
                new: "New issue",
                cancel: "Cancel",
                submitIssueTitleEdit: "Save",
                closePanel: "Close panel",
                addIssueType: "Add issue type",
                changeIssueType: "Change issue type",
                changeType: "Change type",
                editTitle: "Edit",
                pinIssue: "Pin issue",
                unpinIssue: "Unpin issue",
                signUp: "Sign up for free",
                signIn: "Sign in to comment",
                selectType: "Select issue type",
                duplicateIssue: "Duplicate issue",
            };
        },
        50560: (e, l, n) => {
            n.d(l, { k: () => a });
            let a = {
                applyButtonLabel: "Apply",
                archived: "Archived",
                cancelButtonLabel: "Cancel",
                editTitle: "Edit issue title",
                emptySections: {
                    branchesOrLinkedPullRequests:
                        "No branches or linked pull requests",
                    relationships: "None yet",
                    participants: "No participants",
                    development: "No branches or pull requests",
                },
                filterProjects: "Filter projects",
                issueNumber: (e) => `#${e}`,
                issueTypes: {
                    noIssueTypeOptionName: "None",
                    issueTypeDialogHeader: "Select issue type",
                },
                lock: {
                    title: "Lock conversation on this issue",
                    titleUnlock: "Unlock conversation on this issue",
                    buttonConfirmLock: "Lock conversation",
                    buttonConfirmUnlock: "Unlock conversation",
                },
                noDescriptionProvided: "No description provided.",
                notifications: {
                    unsubscribedAnnouncement:
                        "You're now unsubscribed from this issue.",
                    unsubscribedButton: "Subscribe",
                    subscribedOptionLabel: "SUBSCRIBED",
                    unsubscribedDescription:
                        "You're not receiving notifications from this thread.",
                    subscribedAnnouncement:
                        "You're now subscribed to this issue.",
                    subscribedButton: "Unsubscribe",
                    subscribedDescription:
                        "You're receiving notifications because you're subscribed to this thread.",
                    unubscribedOptionLabel: "UNSUBSCRIBED",
                    notificationsSettings: "Notifications settings",
                    notificationsTitle: "Notifications",
                    notSubscribedOption: "Not subscribed",
                    subscribedOption: "Subscribed",
                    customOption: "Custom",
                    customOptionLabel: "CUSTOM",
                    customOptions: "Custom options",
                    closed: "Closed",
                    closedLabel: "CLOSED",
                    reopened: "Reopened",
                    reopenedLabel: "REOPENED",
                    customizeNotificationsSettings: "Customize",
                    save: "Save",
                    saving: "Saving...",
                    cancel: "Cancel",
                    errorMessage: "An error occurred. Please try again.",
                },
                optionsTitle: "Issue actions",
                pinIssueTooltip:
                    "Up to 3 issues can be pinned to the top of the issues page",
                private: "Private",
                prPickerDescription: "Link pull requests",
                public: "Public",
                pullRequest: "Pull request",
                repository: "Repository",
                sectionTitles: {
                    relationships: "Relationships",
                    development: "Development",
                    participants: "Participants",
                },
                relationNames: {
                    parentIssue: "Parent issue",
                    blockedByIssues: "Blocked by",
                    blockingIssues: "Is blocking",
                },
                relationViewAll: "View all",
                relationLoadingList: "Loading related items...",
                relationListAllError:
                    "We couldn't load the related issues. Try reloading the page, or if the problem persists, contact support.",
                emptyBlockedByList: "No blocked by issues found",
                emptyBlockingList: "No blocking issues found",
                loadMoreItems: "Load more",
                development: {
                    createBranch: "Create a branch",
                    repositoryPickerNav: "Return to repository picker",
                    createBranchSuffix:
                        "for this issue or link a pull request.",
                    repoPickerSubtitle:
                        "Select a repository to search for branches and pull requests or",
                    prsBranchesPickerSubtitle:
                        "Link a branch, pull request, or",
                    copilot: {
                        openWorkspace: "Open in Workspace",
                        openAgent: "Code with agent mode",
                        error: (e) => `Codespace creation failed. ${e}`,
                    },
                },
                selectProjects: "Select projects",
                tasks: (e, l) =>
                    0 === e ? `${l} task${l > 1 ? "s" : ""}` : `${e} of ${l}`,
                timeline: { pinned: "pinned this issue" },
                transfer: {
                    title: "Transfer issue",
                    subtitle:
                        "This does not scrub any issue content. Content such as text references to other issues, pull requests, projects and teams will still appear in the description or comments. Labels will be transferred.",
                    started:
                        "Issue transfer has started. This action might take a while.",
                    repoUnavailable:
                        "Issue cannot be transferred to this repository.",
                },
                convertToDiscussion: {
                    title: "Convert issue to a discussion",
                    whatHappens:
                        "What happens when an issue is converted into a discussion:",
                    affirmations: {
                        closedAndLocked: "Issue will be closed and locked",
                        same: "Title, description, and author will be the same as the issue",
                        commentsAndReactions:
                            "All comments and reactions will be the same as the issue",
                    },
                    warnings: {
                        taskListBlocks: "Discussions do not have tasklists",
                        assignees: "Discussions do not have assignees",
                        projects: "Discussions cannot be added to projects",
                        milestone: "Discussions do not have milestones",
                    },
                    selectCategoryTitle: "Category for new discussion",
                    error: (e) =>
                        `ConvertIssueToDiscussion mutation failed with error: ${e}`,
                    converted: "This issue has been moved to a discussion",
                    goToDiscussion: "Go to the discussion",
                },
                unpinIssueTooltip:
                    "This will unpin this issue from the top of the issues page",
                unsavedChangesContent: "Are you sure you want to discard them?",
                unsavedChangesTitle: "You have unsaved changes",
                viewDescriptionPlaceholder: "Add a description",
                viewTitlePlaceholder: "Title",
                linkedPrsLabel: "Linked pull requests",
                mergedPrs: "Fixed by",
                openPrs: "Remaining",
                somethingWentWrong: "Something went wrong! Please try again",
                signedOutBanner: {
                    signUp: "to join this conversation on GitHub.",
                    signIn: "Already have an account?",
                },
            };
        },
        13712: (e, l, n) => {
            n.d(l, { Y: () => a });
            let a = {
                commentHeaderHamburger: "comment-header-hamburger",
                commentHeaderHamburgerOpen: "comment-header-hamburger-open",
                commentViewerOuterBox: (e) =>
                    e
                        ? `comment-viewer-outer-box-${e}`
                        : "comment-viewer-outer-box",
                commentComposer: "comment-composer",
                issueViewerIssueContainer: "issue-viewer-issue-container",
                issueViewerCommentsContainer: "issue-viewer-comments-container",
                issueViewerMetadataContainer: "issue-viewer-metadata-container",
                issueViewerMetadataPane: "issue-viewer-metadata-pane",
                issueMetadataFixed: "issue-metadata-fixed",
                issueMetadataSticky: "issue-metadata-sticky",
                issueTitleInput: "issue-title-input",
                issueBody: "issue-body",
                issueLabels: "issue-labels",
                markdownBody: "markdown-body",
                commentBox: (e = "") => `markdown-editor-${e}`,
                issueHeader: "issue-header",
                issueTitle: "issue-title",
                issueTitleSticky: "issue-title-sticky",
                editIssueTitleButton: "edit-issue-title-button",
                editIssueBodyButton: "edit-issue-body-button",
                issueTimelineContainer: "issue-timeline-container",
                issueTimelineLoading: "issue-timeline-loading",
                issueTimeline: (e) => `issue-timeline-${e}`,
                highlightedTimeline: "highlighted-timeline",
                highlightedTimelineLoading: "highlighted-timeline-loading",
                commentSkeleton: "comment-skeleton",
                linkedPullRequestContainer: "issue-viewer-linked-pr-container",
                headerState: "header-state",
                projectsContainer: "sidebar-projects-section",
                subIssuesIssueContainer: "sub-issues-issue-container",
                crawlerPagination: "timeline-crawler-pagination",
            };
        },
        91985: (e, l, n) => {
            n.d(l, { t: () => a });
            let a = {
                timelineAvatarSize: 32,
                timelineBackPageSize: 15,
                loadAroundHighlightedPageSize: 15,
                rowLoadingSkeletonCount: 5,
                maxLinkedBranches: 5,
                maxLinkedPullRequests: 25,
                issueTransferRepositoriesPreloadCount: 10,
                ghostUserLogin: "ghost",
                branchUrl: (e, l) => `/${l}/tree/${encodeURIComponent(e)}`,
                convertToDiscussionCategoriesFirst: 30,
                stickyHeaderHeight: 60,
                scrollWaitMediaTimeout: 5e3,
                commentImage: ".markdown-body img",
                commentVideo: ".markdown-body video",
            };
        },
        82899: (e, l, n) => {
            n.d(l, { e: () => i });
            let a = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isPinned",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: [{ kind: "Literal", name: "first", value: 3 }],
                        concreteType: "PinnedIssueConnection",
                        kind: "LinkedField",
                        name: "pinnedIssues",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: "pinnedIssues(first:3)",
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "unpinIssueMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "UnpinIssuePayload",
                                kind: "LinkedField",
                                name: "unpinIssue",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [s],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "unpinIssueMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "UnpinIssuePayload",
                                kind: "LinkedField",
                                name: "unpinIssue",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        filters: null,
                                        handle: "deleteRecord",
                                        key: "",
                                        kind: "ScalarHandle",
                                        name: "id",
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [s, n],
                                                storageKey: null,
                                            },
                                            n,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "3535ac81b0a0cde41584253cd9f59d9b",
                        metadata: {},
                        name: "unpinIssueMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            a.hash = "ac0b483a2f30bd79ec6902f7acb7acec";
            var s = n(18312);
            function i({
                environment: e,
                input: l,
                onCompleted: n,
                onError: i,
            }) {
                return (0, s.commitMutation)(e, {
                    mutation: a,
                    variables: { input: l },
                    onCompleted: () => n?.(),
                    onError: (e) => i?.(e),
                });
            }
        },
        72822: (e, l, n) => {
            n.d(l, { Fj: () => i, us: () => s });
            var a = n(69599);
            function s(e, l) {
                return (0, a.G7)("issues_react_prohibit_title_fallback")
                    ? l
                    : l || e;
            }
            let i = ({ owner: e, repo: l }, n, a) => {
                if (!e || !l) return "";
                let s = `/${e}/${l}/issues`;
                if (!n || !a) return s;
                a = a.includes(" ") ? `"${a}"` : a;
                let i = encodeURIComponent(`${n}:${a}`);
                return `${s}?q=${i}`;
            };
        },
        8521: (e, l, n) => {
            n.d(l, { $9: () => a, ET: () => s, H7: () => i, Q_: () => t });
            let a = (e) => `/${e.owner}/${e.repo}/issues/${e.number}`,
                s = (e) => `/${e.owner}/${e.repo}/pull/${e.number}`,
                i = (e) => `/signup?return_to=${e}`,
                t = (e) => `/login?return_to=${e}`;
        },
        19695: (e, l, n) => {
            n.d(l, { I: () => s });
            var a = n(38621);
            let s = {
                MERGED: { color: "done.fg", icon: a.GitMergeIcon },
                IN_MERGE_QUEUE: {
                    color: "attention.fg",
                    icon: a.GitMergeQueueIcon,
                },
                OPEN: { color: "open.fg", icon: a.GitPullRequestIcon },
                CLOSED: {
                    color: "closed.fg",
                    icon: a.GitPullRequestClosedIcon,
                },
                DRAFT: { color: "fg.muted", icon: a.GitPullRequestDraftIcon },
            };
        },
        43491: (e, l, n) => {
            n.d(l, { A: () => s });
            let a = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "assignee",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "author",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "commenters",
                    },
                    a = {
                        defaultValue: 10,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "mentions",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "other",
                    },
                    t = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "queryIsUrl",
                    },
                    r = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "resource",
                    },
                    u = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    o = { kind: "Literal", name: "type", value: "ISSUE" },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    c = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        {
                            kind: "InlineFragment",
                            selections: [
                                d,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "title",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "state",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "stateReason",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Repository",
                                    kind: "LinkedField",
                                    name: "repository",
                                    plural: !1,
                                    selections: [
                                        d,
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "nameWithOwner",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "databaseId",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "number",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                            ],
                            type: "Issue",
                            abstractKey: null,
                        },
                        {
                            kind: "InlineFragment",
                            selections: [d],
                            type: "Node",
                            abstractKey: "__isNode",
                        },
                    ],
                    m = [
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "nodes",
                            plural: !0,
                            selections: c,
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n, a, s, i, t, r],
                        kind: "Fragment",
                        metadata: null,
                        name: "useIssueFilteringQuery",
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "useIssueFilteringFragment",
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [n, s, e, l, i, a, r, t],
                        kind: "Operation",
                        name: "useIssueFilteringQuery",
                        selections: [
                            {
                                alias: "commenters",
                                args: [
                                    u,
                                    {
                                        kind: "Variable",
                                        name: "query",
                                        variableName: "commenters",
                                    },
                                    o,
                                ],
                                concreteType: "SearchResultItemConnection",
                                kind: "LinkedField",
                                name: "search",
                                plural: !1,
                                selections: m,
                                storageKey: null,
                            },
                            {
                                alias: "mentions",
                                args: [
                                    u,
                                    {
                                        kind: "Variable",
                                        name: "query",
                                        variableName: "mentions",
                                    },
                                    o,
                                ],
                                concreteType: "SearchResultItemConnection",
                                kind: "LinkedField",
                                name: "search",
                                plural: !1,
                                selections: m,
                                storageKey: null,
                            },
                            {
                                alias: "assignee",
                                args: [
                                    u,
                                    {
                                        kind: "Variable",
                                        name: "query",
                                        variableName: "assignee",
                                    },
                                    o,
                                ],
                                concreteType: "SearchResultItemConnection",
                                kind: "LinkedField",
                                name: "search",
                                plural: !1,
                                selections: m,
                                storageKey: null,
                            },
                            {
                                alias: "author",
                                args: [
                                    u,
                                    {
                                        kind: "Variable",
                                        name: "query",
                                        variableName: "author",
                                    },
                                    o,
                                ],
                                concreteType: "SearchResultItemConnection",
                                kind: "LinkedField",
                                name: "search",
                                plural: !1,
                                selections: m,
                                storageKey: null,
                            },
                            {
                                alias: "other",
                                args: [
                                    u,
                                    {
                                        kind: "Variable",
                                        name: "query",
                                        variableName: "other",
                                    },
                                    o,
                                ],
                                concreteType: "SearchResultItemConnection",
                                kind: "LinkedField",
                                name: "search",
                                plural: !1,
                                selections: m,
                                storageKey: null,
                            },
                            {
                                condition: "queryIsUrl",
                                kind: "Condition",
                                passingValue: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "url",
                                                variableName: "resource",
                                            },
                                        ],
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "resource",
                                        plural: !1,
                                        selections: c,
                                        storageKey: null,
                                    },
                                ],
                            },
                        ],
                    },
                    params: {
                        id: "fd3a643214580202448e306c6dc70a42",
                        metadata: {},
                        name: "useIssueFilteringQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            a.hash = "7805f5acc9dd7dba8b26177327542d38";
            let s = a;
        },
        7151: (e, l, n) => {
            n.d(l, { G: () => r, a: () => t });
            var a = n(55966),
                s = n(96540);
            let i = (0, s.createContext)(!1),
                t = i.Provider;
            function r(e) {
                let l = (0, s.useContext)(i);
                (0, s.useEffect)(() => {
                    let n = e.current;
                    if (n && l) {
                        let e = [],
                            l = n.getAttribute("aria-hidden");
                        for (let l of (n.setAttribute("aria-hidden", "true"),
                        (0, a.K1)(n)))
                            (e.push([l, l.tabIndex]), (l.tabIndex = -1));
                        return () => {
                            for (let [a, s] of (l
                                ? n.setAttribute("aria-hidden", l)
                                : n.removeAttribute("aria-hidden"),
                            e))
                                a.tabIndex = s;
                        };
                    }
                }, [e, l]);
            }
        },
        305: (e, l, n) => {
            n.d(l, {
                Dy: () => s,
                O1: () => t,
                QL: () => u,
                eX: () => r,
                n1: () => a,
                tD: () => i,
            });
            let a = ["h1", "h2", "h3", "h4", "h5", "h6"],
                s = [
                    "nested-list-view",
                    "nested-list-view-metadata",
                    "nested-listitem",
                ],
                i = "h2",
                t = {
                    "nested-list-view": i,
                    "nested-list-view-metadata": "h3",
                    "nested-listitem": "h3",
                },
                r = !1,
                u = "List view";
        },
        4578: (e, l, n) => {
            n.d(l, { w: () => t });
            var a = n(30391),
                s = n(96540);
            function i() {
                return { offsetWidth: 1280, clientWidth: 1280 };
            }
            let t = (e) => {
                let l = (function (e) {
                        let l = (0, s.useRef)({}),
                            n = (0, s.useCallback)(
                                (l) => {
                                    if (!e) return () => void 0;
                                    let n = new ResizeObserver(l);
                                    return (
                                        n.observe(e),
                                        () => {
                                            (n.unobserve(e), n.disconnect());
                                        }
                                    );
                                },
                                [e]
                            ),
                            a = (0, s.useCallback)(() => {
                                var n, a;
                                if (!e) return l.current;
                                let s = (({
                                    offsetWidth: e,
                                    clientWidth: l,
                                }) => ({ offsetWidth: e, clientWidth: l }))(e);
                                return ((n = s),
                                (a = l.current),
                                n.offsetWidth === a.offsetWidth &&
                                    n.clientWidth === a.clientWidth)
                                    ? l.current
                                    : ((l.current = s), s);
                            }, [e]);
                        return (0, s.useSyncExternalStore)(n, a, i);
                    })(e),
                    n =
                        l.offsetWidth && l.offsetWidth > 0
                            ? l.offsetWidth
                            : 1280,
                    [, t] = (0, s.useState)(!1);
                (0, s.useEffect)(function () {
                    t((e) => !e);
                }, []);
                let r = (0, a.DP)().theme?.breakpoints;
                return (0, s.useCallback)(
                    (e) => {
                        let l =
                                r?.map((e) =>
                                    parseInt(e.match(/(\d+)px/)?.[1] ?? "", 10)
                                ) ?? [],
                            a = l.findIndex((e) => (n ?? 0) < e);
                        return (
                            -1 === a && (a = l.length - 1),
                            e[Math.min(a, e.length - 1)]
                        );
                    },
                    [r, n]
                );
            };
        },
        2694: (e, l, n) => {
            n.d(l, { B: () => t });
            var a = n(73189),
                s = n(71315),
                i = n(96540);
            function t(e, l) {
                if (!s.KJ) return [a.l, a.l, a.l];
                let n = (0, i.useMemo)(
                    () => new IntersectionObserver(e, l),
                    [e, l]
                );
                (0, i.useEffect)(() => () => n.disconnect(), [n]);
                let t = (0, i.useCallback)((e) => n.observe(e), [n]);
                return [
                    t,
                    (0, i.useCallback)((e) => n.unobserve(e), [n]),
                    (0, i.useCallback)(() => n.disconnect(), [n]),
                ];
            }
        },
        28199: (e, l, n) => {
            n.d(l, { a: () => t });
            var a = n(96540),
                s = n(2694);
            let i = {
                position: "sticky",
                top: "-1px",
                zIndex: 11,
                transition: "all 0.2s ease-in-out",
                backgroundColor: "canvas.default",
            };
            function t(e) {
                let [l, n] = (0, a.useState)(!1),
                    [t, r] = (0, a.useState)(!1),
                    u = {
                        root: null,
                        rootMargin: "0px",
                        threshold: [0, 1],
                        ...e,
                    },
                    o = (0, a.useCallback)(
                        (e) => {
                            let [l] = e;
                            (r(1 > (l?.intersectionRatio || 0)),
                                n((l?.rootBounds?.height ?? 0) > 0));
                        },
                        [r]
                    ),
                    [d, c] = (0, s.B)(o, u);
                return {
                    isSticky: t,
                    hasRoots: l,
                    stickyStyles: i,
                    observe: d,
                    unobserve: c,
                };
            }
        },
        12137: (e, l, n) => {
            n.d(l, { i: () => m });
            var a = n(74848),
                s = n(81945),
                i = n(96540),
                t = n(46173),
                r = n(12004),
                u = n(21998);
            let o = {
                    CommentDividerContainer:
                        "CommentDivider-module__CommentDividerContainer--fCCZA",
                    CommentDividerLeftLine:
                        "CommentDivider-module__CommentDividerLeftLine--TwR8y",
                    CommentDividerLoadingSkeleton:
                        "CommentDivider-module__CommentDividerLoadingSkeleton--SSscZ",
                    CommentDividerRightLine:
                        "CommentDivider-module__CommentDividerRightLine--_guT1",
                },
                d = ({ large: e, isLoading: l, isHovered: n }) =>
                    (0, a.jsxs)("div", {
                        className: o.CommentDividerContainer,
                        children: [
                            (0, a.jsx)(u.az, {
                                sx: { pb: e ? 4 : 3 },
                                className: o.CommentDividerLeftLine,
                            }),
                            l && (0, a.jsx)(r.A, { size: "small" }),
                            n &&
                                !l &&
                                (0, a.jsx)(s.O, {
                                    height: "12px",
                                    width: "100%",
                                    className: o.CommentDividerLoadingSkeleton,
                                }),
                            (0, a.jsx)(u.az, {
                                sx: { pb: e ? 4 : 3 },
                                className: o.CommentDividerRightLine,
                            }),
                        ],
                    });
            try {
                d.displayName || (d.displayName = "CommentDivider");
            } catch {}
            let c = {
                    CommentLoadingContainer:
                        "CommentLoading-module__CommentLoadingContainer--I9JkW",
                    CommentLoadingContentWrapper:
                        "CommentLoading-module__CommentLoadingContentWrapper--Qd0Vg",
                    CommentLoadingCard:
                        "CommentLoading-module__CommentLoadingCard--QQ_c8",
                    CommentLoadingHeader:
                        "CommentLoading-module__CommentLoadingHeader--_JjPE",
                    CommentLoadingContent:
                        "CommentLoading-module__CommentLoadingContent--QWS3r",
                },
                m = ({ inHighlightedTimeline: e }) => {
                    let l = (0, i.useMemo)(
                            () => Math.floor(5 * Math.random()) + 1,
                            []
                        ),
                        n = { mt: 4 },
                        r = e
                            ? {
                                  ...n,
                                  display: ["none", "none", "flex", "flex"],
                              }
                            : n;
                    return (0, a.jsxs)("div", {
                        className: c.CommentLoadingContainer,
                        children: [
                            (0, a.jsx)(s.O, {
                                variant: "elliptical",
                                height: "40px",
                                width: "40px",
                                sx: r,
                            }),
                            (0, a.jsxs)("div", {
                                className: c.CommentLoadingContentWrapper,
                                children: [
                                    (0, a.jsx)(d, {}),
                                    (0, a.jsxs)("div", {
                                        "data-testid": t.Y.commentSkeleton,
                                        className: c.CommentLoadingCard,
                                        children: [
                                            (0, a.jsx)("div", {
                                                className:
                                                    c.CommentLoadingHeader,
                                                children: (0, a.jsx)(s.O, {
                                                    variant: "rounded",
                                                    height: "sm",
                                                    width: "150px",
                                                }),
                                            }),
                                            (0, a.jsx)("div", {
                                                className:
                                                    c.CommentLoadingContent,
                                                children: [...Array(l)].map(
                                                    (e, l) =>
                                                        (0, a.jsx)(
                                                            s.O,
                                                            {
                                                                variant:
                                                                    "rounded",
                                                                height: "sm",
                                                                width: "random",
                                                            },
                                                            l
                                                        )
                                                ),
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    });
                };
            try {
                m.displayName || (m.displayName = "CommentLoading");
            } catch {}
        },
        36724: (e, l, n) => {
            n.d(l, { N: () => u, b: () => r });
            var a = n(74848),
                s = n(96540);
            let i = (0, s.createContext)(null),
                t = {},
                r = ({ children: e }) => {
                    let [l, n] = (0, s.useState)(t),
                        r = (0, s.useCallback)((e) => {
                            n((l) => (l[e] ? l : { ...l, [e]: !0 }));
                        }, []),
                        u = (0, s.useCallback)((e) => {
                            n((l) => (l[e] ? { ...l, [e]: !1 } : l));
                        }, []),
                        o = (0, s.useCallback)(
                            () => Object.values(l).some((e) => e),
                            [l]
                        ),
                        d = (0, s.useCallback)(() => {
                            n(t);
                        }, []),
                        c = (0, s.useMemo)(
                            () => ({
                                startCommentEdit: r,
                                cancelCommentEdit: u,
                                isCommentEditActive: o,
                                cancelAllCommentEdits: d,
                            }),
                            [d, u, o, r]
                        );
                    return (0, a.jsx)(i.Provider, { value: c, children: e });
                },
                u = () => {
                    let e = (0, s.useContext)(i);
                    if (!e)
                        throw Error(
                            "useCommentEditsContext must be used within a CommentEditsContextProvider."
                        );
                    return e;
                };
            try {
                i.displayName || (i.displayName = "CommentEditsContext");
            } catch {}
            try {
                r.displayName ||
                    (r.displayName = "CommentEditsContextProvider");
            } catch {}
        },
        92559: (e, l, n) => {
            n.d(l, { a: () => y });
            var a = n(74848),
                s = n(21067),
                i = n(83494),
                t = n(96459),
                r = n(55847),
                u = n(96540),
                o = n(94977),
                d = n(98338);
            let c = ({ label: e, size: l = "medium" }) =>
                (0, a.jsx)(o.A, {
                    "aria-label": d.k.loadingTooltip,
                    children: (0, a.jsx)(r.Q, {
                        size: l,
                        disabled: !0,
                        children: e,
                    }),
                });
            try {
                c.displayName || (c.displayName = "CreateIssueButtonLoading");
            } catch {}
            var m = n(59464),
                g = n(94007);
            let y = ({ label: e, size: l = "medium", ...n }) => {
                    let [r, o] = (0, u.useState)(!1),
                        [d, y] = (0, u.useState)(!1),
                        k = (0, u.useRef)(null),
                        F = (0, t.Z)(),
                        b = (0, s.M3)(),
                        h = (0, u.useCallback)(() => {
                            b ? o(!0) : F((0, g.pM)());
                        }, [b, F]),
                        f = (0, u.useCallback)(
                            (e) => {
                                (e.preventDefault(), e.stopPropagation(), h());
                            },
                            [h]
                        ),
                        K = (0, u.useMemo)(
                            () =>
                                d
                                    ? (0, a.jsx)(c, { label: e, size: l })
                                    : (0, a.jsxs)(a.Fragment, {
                                          children: [
                                              b &&
                                                  (0, a.jsx)(i.ak, {
                                                      commands: {
                                                          "issue-create:new": h,
                                                      },
                                                  }),
                                              (0, a.jsx)(p, {
                                                  ref: k,
                                                  size: l,
                                                  label: e,
                                                  onClick: f,
                                                  optionConfig: n.optionConfig,
                                              }),
                                          ],
                                      }),
                            [d, n.optionConfig, b, h, l, e, f]
                        );
                    if (!r) return K;
                    let S = {
                        isCreateDialogOpen: r,
                        setIsCreateDialogOpen: o,
                        setIsNavigatingToNew: y,
                        canBypassTemplateSelection: !0,
                        isNavigatingToNew: d,
                        returnFocusRef: k,
                        ...n,
                    };
                    return (0, a.jsxs)(u.Suspense, {
                        fallback: (0, a.jsx)(c, { label: e, size: l }),
                        children: [K, (0, a.jsx)(m.vN, { ...S })],
                    });
                },
                p = (0, u.forwardRef)(
                    ({ size: e, label: l, onClick: n, optionConfig: i }, t) => {
                        let o = (0, u.useMemo)(() => {
                            if (!(0, s.M3)())
                                return {
                                    as: "a",
                                    href: (0, g.pM)(),
                                    target: "_blank",
                                };
                            if (!i?.issueCreateArguments?.repository) return {};
                            {
                                let { owner: e, name: l } =
                                    i.issueCreateArguments.repository;
                                return {
                                    as: "a",
                                    href: `/${e}/${l}/issues/new/choose`,
                                    target: "_blank",
                                };
                            }
                        }, [i?.issueCreateArguments?.repository]);
                        return (0, a.jsx)(r.Q, {
                            ref: t,
                            size: e,
                            variant: "primary",
                            onClick: (e) =>
                                ((e, l) => {
                                    let n =
                                        !i?.issueCreateArguments?.repository;
                                    ((e.ctrlKey || e.metaKey) && !n) || l(e);
                                })(e, n),
                            ...o,
                            children: l,
                        });
                    }
                );
            p.displayName = "RenderedCreateButton";
            try {
                y.displayName || (y.displayName = "CreateIssueButton");
            } catch {}
        },
        83855: (e, l, n) => {
            n.d(l, { H: () => t });
            var a = n(74848),
                s = n(21998);
            let i = {
                contentContainer:
                    "ContentWrapper-module__contentContainer--AGolz",
            };
            function t({ children: e, sx: l }) {
                return (0, a.jsx)(s.az, {
                    sx: { ...l },
                    className: i.contentContainer,
                    children: e,
                });
            }
            try {
                t.displayName || (t.displayName = "ContentWrapper");
            } catch {}
        },
        2593: (e, l, n) => {
            n.d(l, { p: () => u });
            var a = n(74848),
                s = n(12137),
                i = n(13712),
                t = n(91985);
            let r = {
                    delaySkeletonLoad:
                        "issue-timeline-loading-module__delaySkeletonLoad--OE2Lq",
                },
                u = ({
                    rowCount: e = t.t.rowLoadingSkeletonCount,
                    delayedShow: l,
                }) =>
                    (0, a.jsx)("div", {
                        className: l ? r.delaySkeletonLoad : "",
                        "data-testid": i.Y.issueTimelineLoading,
                        children: [...Array(e)].map((e, l) =>
                            (0, a.jsx)(
                                "div",
                                { children: (0, a.jsx)(s.i, {}) },
                                l
                            )
                        ),
                    });
            try {
                u.displayName || (u.displayName = "IssueTimelineLoading");
            } catch {}
        },
        99825: (e, l, n) => {
            n.d(l, { cI: () => gp, Hc: () => gg, k5: () => gy });
            var a,
                s,
                i,
                t,
                r,
                u,
                o,
                d,
                c,
                m,
                g,
                y,
                p,
                k,
                F = n(74848);
            let b = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueViewerSecondaryIssueData",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "HeaderSecondary",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "HeaderParentTitle",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueCommentComposerSecondary",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueTimelineSecondary",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueSidebarLazySections",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueSidebarSecondary",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "TaskListStatusFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "TrackedByFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueBodyHeaderSecondaryFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueBodyHeaderSecondaryFragment_issue",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueBodySecondaryFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SubIssuesList",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SubIssuesCreateDialog",
                    },
                    {
                        args: [
                            {
                                kind: "Literal",
                                name: "fetchSubIssues",
                                value: !0,
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "HeaderSubIssueSummary",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "HeaderBlockedBySummary",
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Discussion",
                        kind: "LinkedField",
                        name: "discussion",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "url",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            b.hash = "0ac96e039835aa2f23a4264238dae24f";
            var h = n(81469);
            let f = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "allowedOwner",
                    },
                    { defaultValue: 15, kind: "LocalArgument", name: "count" },
                    { defaultValue: null, kind: "LocalArgument", name: "skip" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "IssueViewerIssue",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "updatedAt",
                        storageKey: null,
                    },
                    { args: null, kind: "FragmentSpread", name: "Header" },
                    { args: null, kind: "FragmentSpread", name: "IssueBody" },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueCommentComposer",
                    },
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "allowedOwner",
                                variableName: "allowedOwner",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "IssueSidebarPrimaryQuery",
                    },
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "count",
                                variableName: "count",
                            },
                            {
                                kind: "Variable",
                                name: "skip",
                                variableName: "skip",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "IssueTimelineIssueFragment",
                    },
                    {
                        args: [
                            {
                                kind: "Literal",
                                name: "fetchSubIssues",
                                value: !1,
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "HeaderSubIssueSummary",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "useHasSubIssues",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "useCanEditSubIssues",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            f.hash = "97f095031e70c15af32569ee04eeaa47";
            let K = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueViewerViewer",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isEnterpriseManagedUser",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "enterpriseManagedEnterpriseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueCommentComposerViewer",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "AssigneesSectionViewer",
                    },
                ],
                type: "User",
                abstractKey: null,
            };
            K.hash = "50782e9d3bbfe8dd1726ec639ad06b5b";
            var S = n(36724);
            let I = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueCommentComposer",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "locked",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanComment",
                            storageKey: null,
                        },
                        l,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                e,
                                l,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isArchived",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "viewerCanInteract",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "viewerInteractionLimitReasonHTML",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueActions",
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            I.hash = "9618823da54ffd247d5aeb642a0298e9";
            let v = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueCommentComposerSecondary",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanReopen",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanClose",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "authorAssociation",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Discussion",
                        kind: "LinkedField",
                        name: "discussion",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "url",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "slashCommandsEnabled",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            v.hash = "ebf43dc5169238a12ab398c976898c25";
            let L = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueCommentComposerViewer",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                ],
                type: "User",
                abstractKey: null,
            };
            L.hash = "a3fc475b7d098c92deda0596a5d5a864";
            var T = n(8046),
                C = n(60912);
            let x = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "LazyContributorFooter",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "codeOfConductFileUrl",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "securityPolicyUrl",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "contributingFileUrl",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "supportFileUrl",
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            x.hash = "a2fe72eb7ec1d9cd1393d0645985a492";
            var R = n(24550),
                N = n(18312);
            function j({ repositoryKey: e, sx: l, className: n }) {
                let a = (0, N.useFragment)(x, e);
                if (!a) return (0, F.jsx)(F.Fragment, {});
                let {
                    codeOfConductFileUrl: s,
                    securityPolicyUrl: i,
                    contributingFileUrl: t,
                    supportFileUrl: r,
                } = a;
                return (0, F.jsx)(R.t, {
                    codeOfConductFileUrl: s ?? void 0,
                    securityPolicyUrl: i ?? void 0,
                    contributingFileUrl: t ?? void 0,
                    supportFileUrl: r ?? void 0,
                    className: n,
                    sx: { ...l },
                });
            }
            try {
                j.displayName || (j.displayName = "LazyContributorFooter");
            } catch {}
            var _ = n(69599),
                w = n(77430);
            let E = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueActions",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueActionsState",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            E.hash = "2d5dba4e9b26988ef6d02616663b6de0";
            let A = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueActionsState",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "stateReason",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            A.hash = "59e7d1237bf5f5d0300e9b0bd885478e";
            var P = n(4559),
                B = n(86645),
                D = n(62568),
                M = n(43258),
                V = n(38621),
                U = n(83294),
                O = n(5945),
                q = n(87330),
                H = n(52446),
                $ = n(55847),
                z = n(94977),
                W = n(30729),
                Q = n(96540);
            let G = {
                    couldNotCloseIssue: "Could not close issue",
                    couldNotReOpenIssue: "Could not reopen issue",
                    missingReopenPermission:
                        "You do not have permissions to reopen this issue",
                    missingClosePermission:
                        "You do not have permissions to close this issue",
                },
                Y = {
                    actionListCompletedDescription:
                        "Done, closed, fixed, resolved",
                    actionListNotPlannedNewDescription:
                        "Won't fix, can't repro, stale",
                    actionListDuplicateDescription:
                        "Duplicate of another issue",
                    closeIssue: "Close issue",
                    closeIssueWithComment: "Close with comment",
                    closeAsCompleted: "Close as completed",
                    closeAsNotPlanned: "Close as not planned",
                    closeAsDuplicate: "Close as duplicate",
                    closeAsDuplicateOf: (e) => `Close as duplicate of #${e}`,
                    moreOptions: "More options",
                    reOpenIssue: "Reopen issue",
                    updateIssueRoleDescription:
                        "update issue state options menu",
                    closedIssueSuccess: "The issue has been closed.",
                    reopenedIssueSuccess: "The issue has been reopened.",
                },
                X = {
                    IssueActionsButtonGroup:
                        "IssueActions-module__IssueActionsButtonGroup--Usbpc",
                    issueStateOptionsMenu:
                        "IssueActions-module__issueStateOptionsMenu--vycCp",
                    reopenIssueIcon:
                        "IssueActions-module__reopenIssueIcon--RW1V1",
                    closeCompletedIssueIcon:
                        "IssueActions-module__closeCompletedIssueIcon--aNgiV",
                },
                J = (function () {
                    var e = {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "duplicateIssueId",
                        },
                        l = {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                        n = {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "newStateReason",
                        },
                        a = [
                            {
                                fields: [
                                    {
                                        kind: "Variable",
                                        name: "duplicateIssueId",
                                        variableName: "duplicateIssueId",
                                    },
                                    {
                                        kind: "Variable",
                                        name: "issueId",
                                        variableName: "id",
                                    },
                                    {
                                        kind: "Variable",
                                        name: "stateReason",
                                        variableName: "newStateReason",
                                    },
                                ],
                                kind: "ObjectValue",
                                name: "input",
                            },
                        ],
                        s = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        i = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        t = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "stateReason",
                            storageKey: null,
                        },
                        r = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        u = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        };
                    return {
                        fragment: {
                            argumentDefinitions: [e, l, n],
                            kind: "Fragment",
                            metadata: null,
                            name: "updateIssueStateMutationCloseMutation",
                            selections: [
                                {
                                    alias: null,
                                    args: a,
                                    concreteType: "CloseIssuePayload",
                                    kind: "LinkedField",
                                    name: "closeIssue",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issue",
                                            plural: !1,
                                            selections: [
                                                s,
                                                i,
                                                t,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "Issue",
                                                    kind: "LinkedField",
                                                    name: "duplicateOf",
                                                    plural: !1,
                                                    selections: [r, u],
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "Mutation",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: [l, n, e],
                            kind: "Operation",
                            name: "updateIssueStateMutationCloseMutation",
                            selections: [
                                {
                                    alias: null,
                                    args: a,
                                    concreteType: "CloseIssuePayload",
                                    kind: "LinkedField",
                                    name: "closeIssue",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issue",
                                            plural: !1,
                                            selections: [
                                                s,
                                                i,
                                                t,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "Issue",
                                                    kind: "LinkedField",
                                                    name: "duplicateOf",
                                                    plural: !1,
                                                    selections: [r, u, s],
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "73f1d13c27e76443f6a9a809ccb4f6e6",
                            metadata: {},
                            name: "updateIssueStateMutationCloseMutation",
                            operationKind: "mutation",
                            text: null,
                        },
                    };
                })();
            J.hash = "c91cc5cb207d648613a5084fb7c34420";
            let Z = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [
                        {
                            fields: [
                                {
                                    kind: "Variable",
                                    name: "issueId",
                                    variableName: "id",
                                },
                            ],
                            kind: "ObjectValue",
                            name: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "updateIssueStateMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "ReopenIssuePayload",
                                kind: "LinkedField",
                                name: "reopenIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "duplicateOf",
                                                plural: !1,
                                                selections: [s, i],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "updateIssueStateMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "ReopenIssuePayload",
                                kind: "LinkedField",
                                name: "reopenIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "duplicateOf",
                                                plural: !1,
                                                selections: [s, i, n],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "a6677fa25f66fdc23d4dbe44f4e62757",
                        metadata: {},
                        name: "updateIssueStateMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            Z.hash = "ca935e60ecf589dc4afd48ce97e1708b";
            var ee = n(10991);
            function el({
                environment: e,
                input: { issueId: l, newStateReason: n, duplicateIssue: a },
                onError: s,
                onCompleted: i,
            }) {
                return (0, N.commitMutation)(e, {
                    mutation: J,
                    variables: {
                        id: l,
                        newStateReason: n,
                        duplicateIssueId: a?.id,
                    },
                    optimisticResponse: {
                        closeIssue: {
                            issue: {
                                id: l,
                                state: "CLOSED",
                                stateReason: n,
                                duplicateOf: a
                                    ? { id: a.id, number: a.number, url: a.url }
                                    : null,
                            },
                        },
                    },
                    onError: (e) => s && s(e),
                    onCompleted: (e) => {
                        (i && i(e), (0, ee.T)());
                    },
                });
            }
            function en({
                environment: e,
                input: { issueId: l },
                onError: n,
                onCompleted: a,
            }) {
                return (0, N.commitMutation)(e, {
                    mutation: Z,
                    variables: { id: l },
                    optimisticResponse: {
                        reopenIssue: {
                            issue: { id: l, state: "OPEN", duplicateOf: null },
                        },
                    },
                    onError: (e) => n && n(e),
                    onCompleted: (e) => {
                        (a && a(e), (0, ee.f)());
                    },
                });
            }
            function ea({ actionRef: e, ...l }) {
                let n = (0, N.useFragment)(E, e);
                return (0, F.jsx)(es, { actionStateRef: n, ...l });
            }
            function es({
                actionStateRef: e,
                disabled: l = !1,
                onAction: n,
                hasComment: a,
                viewerCanClose: s,
                viewerCanReopen: i,
                buttonSize: t,
                closeButtonState: r,
                setCloseButtonState: u,
            }) {
                let { addToast: o } = (0, M.Y6)(),
                    [d, c] = (0, Q.useState)(null),
                    [m, g] = (0, Q.useState)(0),
                    y = (0, N.useRelayEnvironment)(),
                    { setDisableFocusTrap: p } = (0, B.V)(),
                    k = (0, N.useFragment)(A, e),
                    b = (0, Q.useCallback)(
                        (e) => {
                            if (k && k.id)
                                return el({
                                    environment: y,
                                    input: {
                                        issueId: k.id,
                                        newStateReason: e,
                                        duplicateIssue: d
                                            ? {
                                                  id: d.id,
                                                  number: d.number,
                                                  url: d.url,
                                              }
                                            : void 0,
                                    },
                                    onCompleted: () => {
                                        (c(null),
                                            (0, P.i)(Y.closedIssueSuccess));
                                    },
                                    onError: () =>
                                        o({
                                            type: "error",
                                            message: G.couldNotCloseIssue,
                                        }),
                                });
                        },
                        [k, y, d, o]
                    ),
                    h = (0, Q.useCallback)(() => {
                        k.id &&
                            en({
                                environment: y,
                                input: { issueId: k.id },
                                onCompleted: () => {
                                    (0, P.i)(Y.reopenedIssueSuccess);
                                },
                                onError: () =>
                                    o({
                                        type: "error",
                                        message: G.couldNotReOpenIssue,
                                    }),
                            });
                    }, [k, y, o]);
                (0, Q.useEffect)(
                    () => u(er(k.state)),
                    [k.state, k.stateReason, k.id, u]
                );
                let [f, K] = (0, Q.useState)(!1),
                    S = "OPEN" === k.state ? s : i,
                    I = (0, Q.useCallback)(
                        (e) => {
                            (c(e), L(null), u(e ? "DUPLICATE" : "CLOSED"));
                        },
                        [u]
                    ),
                    [v, L] = (0, Q.useState)(null),
                    T = (0, Q.useRef)(null),
                    C = (0, Q.useRef)(null),
                    x = (0, Q.useCallback)(
                        (e) => {
                            (null === e && C?.current && C.current.focus(),
                                L(e));
                        },
                        [L]
                    ),
                    R = (0, Q.useCallback)(
                        (e) => {
                            (K(e), e && L(null));
                        },
                        [K, L]
                    );
                return (
                    (0, Q.useEffect)(() => {
                        p(null !== v);
                    }, [v, p]),
                    (0, Q.useEffect)(() => {
                        let e = () => {
                            if (T.current) {
                                let e = T.current.getBoundingClientRect();
                                g(window.innerHeight - e.bottom);
                            }
                        };
                        return (
                            e(),
                            window.addEventListener("scrollend", e, !0),
                            () => {
                                window.removeEventListener("scrollend", e, !0);
                            }
                        );
                    }, []),
                    (0, F.jsxs)(F.Fragment, {
                        children: [
                            (0, F.jsxs)(U.A, {
                                className: X.IssueActionsButtonGroup,
                                children: [
                                    (0, F.jsx)(ei, {
                                        disabled: l,
                                        issueState: k.state,
                                        buttonState: r,
                                        onClose: b,
                                        onReopen: h,
                                        onAction: n,
                                        hasComment: a,
                                        size: t,
                                        viewerCanReopen: i,
                                        viewerCanClose: s,
                                        duplicateIssue: d ?? void 0,
                                    }),
                                    (0, F.jsxs)(O.W, {
                                        anchorRef: T,
                                        open: f,
                                        onOpenChange: R,
                                        children: [
                                            (0, F.jsx)(O.W.Anchor, {
                                                children: (0, F.jsx)(q.K, {
                                                    icon: V.TriangleDownIcon,
                                                    "aria-label": Y.moreOptions,
                                                    size: t,
                                                    disabled: l || !S,
                                                }),
                                            }),
                                            (0, F.jsx)(O.W.Overlay, {
                                                width: "medium",
                                                side:
                                                    m < 200
                                                        ? "outside-top"
                                                        : void 0,
                                                children: (0, F.jsx)(et, {
                                                    buttonState: r,
                                                    setButtonState: u,
                                                    canClose: void 0 !== b,
                                                    canReopen: void 0 !== h,
                                                    viewerCanClose: s,
                                                    viewerCanReopen: i,
                                                    issueState: k.state,
                                                    issueStateReason:
                                                        k.stateReason,
                                                    duplicateIssueSelected: I,
                                                    setIsDuplicateDialogOpen:
                                                        () => L("Issue"),
                                                }),
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                            (0, F.jsx)(D.D, {
                                issuePickerProps: {
                                    insidePortal: !0,
                                    responsiveOnNarrow: !0,
                                },
                                repositoryPickerProps: {
                                    responsiveOnNarrow: !0,
                                    insidePortal: !0,
                                    hideContainer: !0,
                                },
                                selectedIssueIds: d ? [d.id] : [],
                                hiddenIssueIds: [k.id],
                                onPickerTypeChange: x,
                                onIssueSelection: (e) =>
                                    I(e.length > 0 && e[0] ? e[0] : null),
                                defaultRepositoryNameWithOwner:
                                    k.repository.nameWithOwner,
                                organization: k.repository.owner.login,
                                pickerType: v,
                                anchorElement: (e) => {
                                    let { ref: l } = e;
                                    return (
                                        l && (l.current = T.current),
                                        (0, F.jsx)(F.Fragment, {})
                                    );
                                },
                            }),
                        ],
                    })
                );
            }
            let ei = ({
                    disabled: e = !1,
                    issueState: l,
                    buttonState: n,
                    onClose: a,
                    onReopen: s,
                    onAction: i,
                    hasComment: t = !1,
                    size: r = "medium",
                    viewerCanReopen: u,
                    viewerCanClose: o,
                    duplicateIssue: d,
                }) => {
                    var c, m, g, y;
                    if ("OPEN" !== l && "CLOSED" !== l) return null;
                    let p = (function (e, l) {
                            return "NOT_PLANNED" === l
                                ? "NOT_PLANNED"
                                : "DUPLICATE" === l
                                  ? "DUPLICATE"
                                  : "OPEN" === e || "CLOSED" === l
                                    ? "COMPLETED"
                                    : void 0;
                        })(l, n),
                        k =
                            ((c = l),
                            (m = n),
                            (g = u),
                            (y = o),
                            "CLOSED" === c && "OPEN" === m ? g : y),
                        b = (function (e, l, n, a, s) {
                            return "CLOSED" === e && "OPEN" === l
                                ? () => s?.()
                                : () => n && a?.(n);
                        })(l, n, p, a, s);
                    return (function (e = !1, l, n, a, s, i, t, r, u) {
                        var o, d, c, m;
                        let g = (function (e) {
                                switch (e) {
                                    case "COMPLETED":
                                        return "done.fg";
                                    case "NOT_PLANNED":
                                    case "DUPLICATE":
                                        return "fg.muted";
                                    case void 0:
                                        return "open.fg";
                                    default:
                                        return "fg.default";
                                }
                            })(a),
                            y = (function (e) {
                                switch (e) {
                                    case "COMPLETED":
                                    default:
                                        return V.IssueClosedIcon;
                                    case "NOT_PLANNED":
                                    case "DUPLICATE":
                                        return V.SkipIcon;
                                    case void 0:
                                        return V.IssueReopenedIcon;
                                }
                            })(a),
                            p =
                                ((o = n),
                                (d = l),
                                (c = a),
                                (m = u),
                                "OPEN" === o
                                    ? "DUPLICATE" === c
                                        ? m
                                            ? Y.closeAsDuplicateOf(m.number)
                                            : Y.closeAsDuplicate
                                        : d
                                          ? Y.closeIssueWithComment
                                          : Y.closeIssue
                                    : "NOT_PLANNED" === c
                                      ? Y.closeAsNotPlanned
                                      : "DUPLICATE" === c
                                        ? m
                                            ? Y.closeAsDuplicateOf(m.number)
                                            : Y.closeAsDuplicate
                                        : void 0 === c
                                          ? Y.reOpenIssue
                                          : Y.closeAsCompleted),
                            k = a
                                ? G.missingClosePermission
                                : G.missingReopenPermission,
                            b = a
                                ? "close-button-tooltip"
                                : "reopen-button-tooltip",
                            h = (0, F.jsx)($.Q, {
                                onClick: () => {
                                    (s?.(), i?.());
                                },
                                leadingVisual: () =>
                                    (0, F.jsx)(W.A, {
                                        icon: y,
                                        sx: { color: g },
                                    }),
                                disabled: e || !i || !t,
                                size: r,
                                children: p,
                            });
                        return t
                            ? h
                            : (0, F.jsx)(z.A, {
                                  text: k,
                                  direction: "w",
                                  "data-testid": b,
                                  children: h,
                              });
                    })(e, t, l, p, i, b, k, r, d);
                },
                et = ({
                    buttonState: e,
                    setButtonState: l,
                    issueState: n,
                    issueStateReason: a,
                    canClose: s,
                    canReopen: i,
                    viewerCanClose: t,
                    viewerCanReopen: r,
                    setIsDuplicateDialogOpen: u,
                }) => {
                    let o = (0, Q.useCallback)(() => {
                        (l("DUPLICATE"), u(!0));
                    }, [l, u]);
                    return (0, F.jsxs)(H.l, {
                        showDividers: !0,
                        selectionVariant: "single",
                        "aria-roledescription": Y.updateIssueRoleDescription,
                        className: X.issueStateOptionsMenu,
                        children: [
                            "CLOSED" === n &&
                                (r || void 0 === r) &&
                                (0, F.jsxs)(
                                    H.l.Item,
                                    {
                                        onSelect: () => l("OPEN"),
                                        selected: "OPEN" === e,
                                        disabled: !i || !r,
                                        children: [
                                            (0, F.jsx)(H.l.LeadingVisual, {
                                                className: X.reopenIssueIcon,
                                                children: (0, F.jsx)(
                                                    V.IssueReopenedIcon,
                                                    {}
                                                ),
                                            }),
                                            Y.reOpenIssue,
                                        ],
                                    },
                                    "reopen-issue-option"
                                ),
                            ("OPEN" === n || "NOT_PLANNED" === a) &&
                                (t || void 0 === t) &&
                                (0, F.jsxs)(
                                    H.l.Item,
                                    {
                                        onSelect: () => l("CLOSED"),
                                        selected: "CLOSED" === e,
                                        disabled: !s || !t,
                                        children: [
                                            (0, F.jsx)(H.l.LeadingVisual, {
                                                className:
                                                    X.closeCompletedIssueIcon,
                                                children: (0, F.jsx)(
                                                    V.IssueClosedIcon,
                                                    {}
                                                ),
                                            }),
                                            Y.closeAsCompleted,
                                            (0, F.jsx)(H.l.Description, {
                                                variant: "block",
                                                children:
                                                    Y.actionListCompletedDescription,
                                            }),
                                        ],
                                    },
                                    "close-issue-option"
                                ),
                            ("OPEN" === n ||
                                ("CLOSED" === n && "NOT_PLANNED" !== a)) &&
                                t &&
                                (0, F.jsxs)(
                                    H.l.Item,
                                    {
                                        onSelect: () => l("NOT_PLANNED"),
                                        selected: "NOT_PLANNED" === e,
                                        disabled: !s,
                                        children: [
                                            (0, F.jsx)(H.l.LeadingVisual, {
                                                children: (0, F.jsx)(
                                                    V.SkipIcon,
                                                    {}
                                                ),
                                            }),
                                            Y.closeAsNotPlanned,
                                            (0, F.jsx)(H.l.Description, {
                                                variant: "block",
                                                children:
                                                    Y.actionListNotPlannedNewDescription,
                                            }),
                                        ],
                                    },
                                    "skip-issue-option"
                                ),
                            ("OPEN" === n ||
                                ("CLOSED" === n && "DUPLICATE" !== a)) &&
                                t &&
                                (0, F.jsxs)(
                                    H.l.Item,
                                    {
                                        onSelect: o,
                                        selected: "DUPLICATE" === e,
                                        disabled: !s,
                                        children: [
                                            (0, F.jsx)(H.l.LeadingVisual, {
                                                children: (0, F.jsx)(
                                                    V.SkipIcon,
                                                    {}
                                                ),
                                            }),
                                            (0, F.jsx)(H.l.TrailingVisual, {
                                                children: (0, F.jsx)(
                                                    V.ArrowRightIcon,
                                                    {}
                                                ),
                                            }),
                                            Y.closeAsDuplicate,
                                            (0, F.jsx)(H.l.Description, {
                                                variant: "block",
                                                children:
                                                    Y.actionListDuplicateDescription,
                                            }),
                                        ],
                                    },
                                    "close-duplicate-issue-option"
                                ),
                        ],
                    });
                },
                er = (e) => ("CLOSED" === e ? "OPEN" : "CLOSED");
            try {
                ea.displayName || (ea.displayName = "IssueActions");
            } catch {}
            try {
                es.displayName || (es.displayName = "IssueActionsInternal");
            } catch {}
            try {
                ei.displayName || (ei.displayName = "UpdateStateButton");
            } catch {}
            try {
                et.displayName || (et.displayName = "UpdateStateButtonOptions");
            } catch {}
            var eu = n(60023),
                eo = n(99418);
            let ed = {
                FORBID_TAGS: ["style"],
                ALLOW_DATA_ATTR: !1,
                ALLOWED_TAGS: [
                    "h1",
                    "h2",
                    "h3",
                    "h4",
                    "h5",
                    "h6",
                    "h7",
                    "h8",
                    "br",
                    "b",
                    "i",
                    "strong",
                    "em",
                    "a",
                    "pre",
                    "code",
                    "img",
                    "tt",
                    "div",
                    "span",
                    "ins",
                    "del",
                    "sup",
                    "sub",
                    "p",
                    "ol",
                    "ul",
                    "table",
                    "thead",
                    "tbody",
                    "tfoot",
                    "blockquote",
                    "dl",
                    "dt",
                    "dd",
                    "kbd",
                    "q",
                    "samp",
                    "var",
                    "hr",
                    "ruby",
                    "rt",
                    "rp",
                    "li",
                    "tr",
                    "td",
                    "th",
                    "s",
                    "strike",
                    "summary",
                    "details",
                    "picture",
                    "source",
                ],
            };
            function ec(e) {
                return !/^\s*[-*+] \[[ xX]\] .*/m.test(e);
            }
            function em(e) {
                try {
                    let l = eu.xI.parse(e, { gfm: !0, breaks: !0, silent: !0 });
                    return eo.default.sanitize(l, ed);
                } catch {
                    return "";
                }
            }
            var eg = n(25407),
                ey = n(71315),
                ep = n(29731),
                ek = n(81246),
                eF = n(63557),
                eb = n(34164),
                eh = n(69487);
            let ef = { comment: "Comment", updateComment: "Update comment" };
            var eK = n(96760);
            let eS = {
                couldNotComment:
                    "There was a problem saving your comment. Please try again.",
                couldNotCloseIssue: "Could not close issue",
                couldNotDeleteComment: "Could not delete this comment",
                couldNotEditComment: "Could not edit issue comment",
                couldNotEditCommentStale:
                    "The content you are editing has changed. Please copy your edits and refresh the page.",
            };
            var eI = n(96901),
                ev = n(46173),
                eL = n(81034),
                eT = n(58748);
            let eC = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "connections",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = [n],
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    o = [u],
                    d = {
                        kind: "InlineFragment",
                        selections: a,
                        type: "Node",
                        abstractKey: "__isNode",
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "addCommentMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "AddCommentPayload",
                                kind: "LinkedField",
                                name: "addComment",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueTimelineItemEdge",
                                        kind: "LinkedField",
                                        name: "timelineEdge",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "node",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        args: null,
                                                        kind: "FragmentSpread",
                                                        name: "IssueCommentViewerCommentRow",
                                                    },
                                                    {
                                                        args: null,
                                                        kind: "FragmentSpread",
                                                        name: "IssueComment_issueComment",
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "subject",
                                        plural: !1,
                                        selections: a,
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "addCommentMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "AddCommentPayload",
                                kind: "LinkedField",
                                name: "addComment",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueTimelineItemEdge",
                                        kind: "LinkedField",
                                        name: "timelineEdge",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "node",
                                                plural: !1,
                                                selections: [
                                                    s,
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            n,
                                                            i,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "body",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: [
                                                                    {
                                                                        kind: "Literal",
                                                                        name: "unfurlReferences",
                                                                        value: !0,
                                                                    },
                                                                ],
                                                                kind: "ScalarField",
                                                                name: "bodyHTML",
                                                                storageKey:
                                                                    "bodyHTML(unfurlReferences:true)",
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "bodyVersion",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "viewerCanUpdate",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            t,
                                                            r,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "authorAssociation",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "viewerCanDelete",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "viewerCanMinimize",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "viewerCanReport",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "viewerCanReportToMaintainer",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "viewerCanBlockFromOrg",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "viewerCanUnblockFromOrg",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: "isHidden",
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "isMinimized",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "minimizedReason",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "showSpammyBadge",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "createdViaEmail",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "viewerDidAuthor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Sponsorship",
                                                                kind: "LinkedField",
                                                                name: "authorToRepoOwnerSponsorship",
                                                                plural: !1,
                                                                selections: [
                                                                    r,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "isActive",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    n,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "author",
                                                                plural: !1,
                                                                selections: [
                                                                    s,
                                                                    n,
                                                                    u,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "avatarUrl",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "repository",
                                                                plural: !1,
                                                                selections: [
                                                                    n,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "name",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "owner",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                s,
                                                                                n,
                                                                                u,
                                                                                t,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "isPrivate",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "slashCommandsEnabled",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "nameWithOwner",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    i,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Issue",
                                                                kind: "LinkedField",
                                                                name: "issue",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "number",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    n,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "locked",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    i,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "author",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                s,
                                                                                u,
                                                                                n,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "viewerCanReadUserContentEdits",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "lastEditedAt",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "UserContentEdit",
                                                                        kind: "LinkedField",
                                                                        name: "lastUserContentEdit",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "editor",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            s,
                                                                                            t,
                                                                                            u,
                                                                                            n,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                n,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "Comment",
                                                                abstractKey:
                                                                    "__isComment",
                                                            },
                                                            {
                                                                kind: "ClientExtension",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "pendingMinimizeReason",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "pendingBlock",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "pendingUnblock",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "ReactionGroup",
                                                                        kind: "LinkedField",
                                                                        name: "reactionGroups",
                                                                        plural: !0,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "content",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerHasReacted",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: [
                                                                                        {
                                                                                            kind: "Literal",
                                                                                            name: "first",
                                                                                            value: 5,
                                                                                        },
                                                                                    ],
                                                                                    concreteType:
                                                                                        "ReactorConnection",
                                                                                    kind: "LinkedField",
                                                                                    name: "reactors",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "totalCount",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    null,
                                                                                                kind: "LinkedField",
                                                                                                name: "nodes",
                                                                                                plural: !0,
                                                                                                selections:
                                                                                                    [
                                                                                                        s,
                                                                                                        {
                                                                                                            kind: "InlineFragment",
                                                                                                            selections:
                                                                                                                o,
                                                                                                            type: "User",
                                                                                                            abstractKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        {
                                                                                                            kind: "InlineFragment",
                                                                                                            selections:
                                                                                                                [
                                                                                                                    u,
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        kind: "ScalarField",
                                                                                                                        name: "isCopilot",
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                ],
                                                                                                            type: "Bot",
                                                                                                            abstractKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        {
                                                                                                            kind: "InlineFragment",
                                                                                                            selections:
                                                                                                                o,
                                                                                                            type: "Organization",
                                                                                                            abstractKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        {
                                                                                                            kind: "InlineFragment",
                                                                                                            selections:
                                                                                                                o,
                                                                                                            type: "Mannequin",
                                                                                                            abstractKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        d,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        "reactors(first:5)",
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "Reactable",
                                                                abstractKey:
                                                                    "__isReactable",
                                                            },
                                                        ],
                                                        type: "IssueComment",
                                                        abstractKey: null,
                                                    },
                                                    d,
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        filters: null,
                                        handle: "appendEdge",
                                        key: "",
                                        kind: "LinkedHandle",
                                        name: "timelineEdge",
                                        handleArgs: [
                                            {
                                                kind: "Variable",
                                                name: "connections",
                                                variableName: "connections",
                                            },
                                        ],
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "subject",
                                        plural: !1,
                                        selections: [s, n],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "479f663ea0db900ff38c618c4d56ef3a",
                        metadata: {},
                        name: "addCommentMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            eC.hash = "1b7d8e14670bb26b4f6889905fe612c7";
            var ex = n(61423);
            let eR = {
                    CommentBox: "Shared-module__CommentBox--layUN",
                    Condensed: "Shared-module__Condensed--uqHpD",
                },
                eN = {
                    commentComposerWrapper:
                        "IssueCommentComposer-module__commentComposerWrapper--U1i4y",
                    commentComposer:
                        "IssueCommentComposer-module__commentComposer--AwVsE",
                    commentBoxWrapper:
                        "IssueCommentComposer-module__commentBoxWrapper--uTEnw",
                    avatarLink:
                        "IssueCommentComposer-module__avatarLink--T0RGB",
                    heading: "IssueCommentComposer-module__heading--zo78w",
                    LazyContributorFooter:
                        "IssueCommentComposer-module__LazyContributorFooter--x76sy",
                },
                ej = (0, Q.forwardRef)(
                    (
                        {
                            onChange: e,
                            onSave: l,
                            onCancel: n,
                            onNewIssueComment: a,
                            singleKeyShortcutEnabled: s,
                            issue: i,
                            issueSecondary: t,
                            repoSecondary: r,
                            viewer: u,
                            fileUploadsEnabled: o,
                            insideSidePanel: d,
                        },
                        c
                    ) => {
                        let m = (0, N.useFragment)(I, i),
                            g = (0, N.useFragment)(v, t),
                            y = g?.repository.slashCommandsEnabled ?? !1,
                            p = (0, N.useFragment)(L, u),
                            { id: k } = m,
                            b = (0, Q.useRef)(null),
                            h = (0, Q.useRef)(null),
                            f = m.repository.databaseId,
                            K = m.repository.isArchived,
                            { addToast: S } = (0, M.Y6)(),
                            x = (0, N.useRelayEnvironment)(),
                            [R, E] = (0, Q.useState)(!1),
                            [A, P] = (0, Q.useState)("OPEN"),
                            { condensed: B } = (function (e) {
                                let [l, n] = (0, Q.useState)(!1),
                                    a = (0, Q.useCallback)(() => {
                                        n(
                                            768 >
                                                (e?.current?.clientWidth || 768)
                                        );
                                    }, [e]);
                                return (
                                    (0, eT.w)(() => {
                                        a();
                                    }, e),
                                    (0, Q.useEffect)(() => {
                                        a();
                                    }, []),
                                    { condensed: l }
                                );
                            })(h),
                            D = (0, ex.i)(
                                K,
                                m.locked,
                                m.repository.viewerCanInteract
                                    ? null
                                    : m.repository
                                          .viewerInteractionLimitReasonHTML
                            ),
                            { metaAndShiftKeysPressed: U } = (function () {
                                let [e, l] = (0, Q.useState)(!1);
                                return (
                                    (0, Q.useEffect)(() => {
                                        let e = (e) =>
                                                l(
                                                    (e.ctrlKey || e.metaKey) &&
                                                        e.shiftKey
                                                ),
                                            n = () => l(!1);
                                        return (
                                            window.addEventListener(
                                                "keydown",
                                                e
                                            ),
                                            window.addEventListener("keyup", n),
                                            window.addEventListener("blur", n),
                                            () => {
                                                (window.removeEventListener(
                                                    "keydown",
                                                    e
                                                ),
                                                    window.removeEventListener(
                                                        "keyup",
                                                        n
                                                    ),
                                                    window.removeEventListener(
                                                        "blur",
                                                        n
                                                    ));
                                            }
                                        );
                                    }, []),
                                    { metaAndShiftKeysPressed: e }
                                );
                            })(),
                            {
                                markdownBody: O,
                                resetMarkdownBody: q,
                                markdownValidationResult: H,
                                handleMarkdownBodyChanged: $,
                            } = (0, eL.x)({
                                commentBoxRef: b,
                                markdownComposerRef: c,
                                onChange: e,
                                onCancel: n,
                                referenceId: k,
                                hasSingleKeyShortcutEnabled: s,
                            }),
                            z = (0, Q.useCallback)(
                                (e, n = !1) => {
                                    let s = ec(O);
                                    if ((E(!0), O?.length > 0)) {
                                        q();
                                        let l = { visibleEventsOnly: !0 },
                                            n =
                                                eh.ConnectionHandler.getConnectionID(
                                                    m.id,
                                                    "Issue__backTimelineItems",
                                                    l
                                                ),
                                            i =
                                                eh.ConnectionHandler.getConnectionID(
                                                    m.id,
                                                    "IssueBacksideTimeline_timelineItems",
                                                    l
                                                );
                                        !(function ({
                                            environment: e,
                                            input: {
                                                subject: l,
                                                body: n,
                                                connectionId: a,
                                            },
                                            onError: s,
                                            onCompleted: i,
                                            withOptimisticResponse: t = !1,
                                            optimisticInput: r,
                                        }) {
                                            (0, N.commitMutation)(e, {
                                                mutation: eC,
                                                optimisticResponse: (function (
                                                    e,
                                                    l,
                                                    n,
                                                    a,
                                                    s
                                                ) {
                                                    if (!e || !l) return;
                                                    let i = s
                                                            .getStore()
                                                            .getSource(),
                                                        t = i.get(
                                                            e.repositoryId
                                                        ),
                                                        r = i.get(a);
                                                    if (!t || !r) return;
                                                    let u = t.owner,
                                                        o = r.author,
                                                        d = u
                                                            ? i.get(u.__ref)
                                                            : void 0,
                                                        c = o
                                                            ? i.get(o.__ref)
                                                            : void 0;
                                                    if (d && c && d && c)
                                                        return l && e
                                                            ? {
                                                                  addComment: {
                                                                      timelineEdge:
                                                                          {
                                                                              node: {
                                                                                  __typename:
                                                                                      "IssueComment",
                                                                                  __isComment:
                                                                                      "IssueComment",
                                                                                  __isNode:
                                                                                      "IssueComment",
                                                                                  __isReactable:
                                                                                      "IssueComment",
                                                                                  id: `temp-comment-${Date.now()}`,
                                                                                  body:
                                                                                      n ||
                                                                                      "",
                                                                                  bodyHTML:
                                                                                      em(
                                                                                          n
                                                                                      ),
                                                                                  bodyVersion:
                                                                                      "1",
                                                                                  createdAt:
                                                                                      new Date().toISOString(),
                                                                                  lastEditedAt:
                                                                                      null,
                                                                                  viewerCanReadUserContentEdits:
                                                                                      !0,
                                                                                  lastUserContentEdit:
                                                                                      null,
                                                                                  author: {
                                                                                      __typename:
                                                                                          "User",
                                                                                      id: e
                                                                                          .commentAuthor
                                                                                          .id,
                                                                                      avatarUrl:
                                                                                          e
                                                                                              .commentAuthor
                                                                                              .avatarUrl,
                                                                                      login: e
                                                                                          .commentAuthor
                                                                                          .login,
                                                                                  },
                                                                                  authorAssociation:
                                                                                      e.authorAssociation,
                                                                                  authorToRepoOwnerSponsorship:
                                                                                      null,
                                                                                  createdViaEmail:
                                                                                      !1,
                                                                                  databaseId:
                                                                                      null,
                                                                                  isHidden:
                                                                                      !1,
                                                                                  issue: {
                                                                                      id: a,
                                                                                      databaseId:
                                                                                          r.databaseId,
                                                                                      locked: r.locked,
                                                                                      number: r.number,
                                                                                      author: {
                                                                                          __typename:
                                                                                              c.__typename,
                                                                                          id: c.id,
                                                                                          login: c.login,
                                                                                      },
                                                                                  },
                                                                                  minimizedReason:
                                                                                      null,
                                                                                  pendingMinimizeReason:
                                                                                      null,
                                                                                  pendingBlock:
                                                                                      null,
                                                                                  pendingUnblock:
                                                                                      null,
                                                                                  reactionGroups:
                                                                                      [],
                                                                                  repository:
                                                                                      {
                                                                                          id: t.id,
                                                                                          databaseId:
                                                                                              t.databaseId,
                                                                                          isPrivate:
                                                                                              t.isPrivate,
                                                                                          name: t.name,
                                                                                          nameWithOwner:
                                                                                              t.nameWithOwner,
                                                                                          slashCommandsEnabled:
                                                                                              t.slashCommandsEnabled,
                                                                                          owner: {
                                                                                              __typename:
                                                                                                  d.__typename,
                                                                                              id: d.id,
                                                                                              login: d.login,
                                                                                              url: d.url,
                                                                                          },
                                                                                      },
                                                                                  showSpammyBadge:
                                                                                      !1,
                                                                                  url: "",
                                                                                  viewerCanBlockFromOrg:
                                                                                      !1,
                                                                                  viewerCanDelete:
                                                                                      !1,
                                                                                  viewerCanMinimize:
                                                                                      !1,
                                                                                  viewerCanReport:
                                                                                      !1,
                                                                                  viewerCanReportToMaintainer:
                                                                                      !1,
                                                                                  viewerCanUnblockFromOrg:
                                                                                      !1,
                                                                                  viewerCanUpdate:
                                                                                      !1,
                                                                                  viewerDidAuthor:
                                                                                      !0,
                                                                              },
                                                                          },
                                                                      subject: {
                                                                          __typename:
                                                                              "Issue",
                                                                          id: a,
                                                                      },
                                                                  },
                                                              }
                                                            : void 0;
                                                })(r, t, n, l, e),
                                                variables: {
                                                    input: {
                                                        subjectId: l,
                                                        body: n || "",
                                                    },
                                                    connections: [a],
                                                },
                                                onError: (e) => s && s(e),
                                                onCompleted: (e) => {
                                                    e.addComment
                                                        ? i?.()
                                                        : s?.();
                                                },
                                            });
                                        })({
                                            environment: x,
                                            input: {
                                                subject: e,
                                                body: O,
                                                connectionId: n ?? i,
                                            },
                                            onError: () => {
                                                (E(!1),
                                                    $(O),
                                                    S({
                                                        type: "error",
                                                        message:
                                                            eS.couldNotComment,
                                                    }));
                                            },
                                            onCompleted: () => {
                                                (E(!1), a?.());
                                            },
                                            withOptimisticResponse: s,
                                            optimisticInput: g
                                                ? {
                                                      commentAuthor: {
                                                          id: p.id,
                                                          login: p.login,
                                                          avatarUrl:
                                                              p.avatarUrl,
                                                      },
                                                      repositoryId:
                                                          m.repository.id,
                                                      authorAssociation:
                                                          g.authorAssociation,
                                                  }
                                                : void 0,
                                        });
                                    }
                                    (U &&
                                        !n &&
                                        ("CLOSED" === A && g?.viewerCanClose
                                            ? el({
                                                  environment: x,
                                                  input: {
                                                      issueId: m?.id,
                                                      newStateReason:
                                                          "COMPLETED",
                                                  },
                                                  onError: () =>
                                                      S({
                                                          type: "error",
                                                          message:
                                                              eS.couldNotCloseIssue,
                                                      }),
                                                  onCompleted: a,
                                              })
                                            : "NOT_PLANNED" === A &&
                                                g?.viewerCanClose
                                              ? el({
                                                    environment: x,
                                                    input: {
                                                        issueId: m?.id,
                                                        newStateReason:
                                                            "NOT_PLANNED",
                                                    },
                                                    onError: () =>
                                                        S({
                                                            type: "error",
                                                            message:
                                                                eS.couldNotCloseIssue,
                                                        }),
                                                    onCompleted: a,
                                                })
                                              : "OPEN" === A &&
                                                g?.viewerCanReopen &&
                                                en({
                                                    environment: x,
                                                    input: { issueId: m?.id },
                                                    onError: () =>
                                                        S({
                                                            type: "error",
                                                            message:
                                                                eS.couldNotCloseIssue,
                                                        }),
                                                    onCompleted: a,
                                                })),
                                        l());
                                },
                                [
                                    O,
                                    U,
                                    l,
                                    m.id,
                                    m.repository.id,
                                    x,
                                    p.id,
                                    p.login,
                                    p.avatarUrl,
                                    g,
                                    S,
                                    q,
                                    $,
                                    a,
                                    A,
                                ]
                            ),
                            W = (0, Q.useMemo)(
                                () => ({
                                    type: "issue_comment",
                                    id: { id: m.id, databaseId: m.databaseId },
                                    repository: {
                                        databaseId: f,
                                        nwo: m.repository.nameWithOwner,
                                        slashCommandsEnabled: y,
                                    },
                                }),
                                [
                                    m.databaseId,
                                    m.id,
                                    m.repository.nameWithOwner,
                                    f,
                                    y,
                                ]
                            ),
                            G = (0, Q.useCallback)(() => {
                                H && H.isValid && z(k, !0);
                            }, [k, z, H]),
                            Y = (0, F.jsx)(ea, {
                                actionRef: m,
                                onAction: G,
                                hasComment: O.length > 0,
                                buttonSize: "medium",
                                closeButtonState: A,
                                setCloseButtonState: P,
                                viewerCanReopen: g?.viewerCanReopen,
                                viewerCanClose: g?.viewerCanClose,
                            }),
                            X = (0, _.G7)(
                                "issues_lazy_load_comment_box_suggestions"
                            );
                        return (0, F.jsx)("div", {
                            "data-testid": ev.Y.commentComposer,
                            className: eN.commentComposerWrapper,
                            ref: h,
                            "data-inside-side-panel": d,
                            id: eK.Bq.issueCommentComposer,
                            children: (0, F.jsxs)("div", {
                                className: eN.commentComposer,
                                children: [
                                    (0, F.jsx)(ek.A, {
                                        href: `/${p.login}`,
                                        "data-hovercard-url": (0, eg.dCN)({
                                            owner: p.login,
                                        }),
                                        "aria-label": `@${p.login}'s profile`,
                                        className: eN.avatarLink,
                                        children: (0, F.jsx)(w.r, {
                                            size: 40,
                                            src: p.avatarUrl,
                                            alt: p.login,
                                        }),
                                    }),
                                    (0, F.jsx)(eF.A, {
                                        "data-jump-to-bottom-target": !0,
                                        tabIndex: -1,
                                        id: "comment-composer-heading",
                                        as: "h2",
                                        className: eN.heading,
                                        children: "Add a comment",
                                    }),
                                    (0, F.jsxs)("div", {
                                        className: eN.commentBoxWrapper,
                                        children: [
                                            ey.KJ &&
                                                (!m.viewerCanComment ||
                                                !m.repository
                                                    .viewerCanInteract ||
                                                g?.discussion
                                                    ? (0, F.jsx)(C.P, {
                                                          reason: g?.discussion
                                                              ? (0, F.jsx)(e_, {
                                                                    discussionUrl:
                                                                        g
                                                                            ?.discussion
                                                                            ?.url ??
                                                                        "",
                                                                })
                                                              : D,
                                                          icon: V.LockIcon,
                                                          ...(0, ep.G)(
                                                              ev.Y.readonlyCommentBox(
                                                                  ev.Y
                                                                      .commentComposer
                                                              )
                                                          ),
                                                      })
                                                    : (0, F.jsx)(T.hF, {
                                                          ref: b,
                                                          placeholder:
                                                              eI.k
                                                                  .newCommentPlaceholder,
                                                          label: eI.k
                                                              .newComment,
                                                          disabled: R,
                                                          subject: W,
                                                          value: O,
                                                          onChange: $,
                                                          actions: Y,
                                                          validationResult: H,
                                                          saveButtonText:
                                                              ef.comment,
                                                          saveButtonTrailingIcon:
                                                              !1,
                                                          onSave: () => z(k),
                                                          fileUploadsEnabled: o,
                                                          buttonSize: "medium",
                                                          labelledBy:
                                                              "comment-composer-heading",
                                                          teamHovercardsEnabled:
                                                              !0,
                                                          markdownSuggestionsFetchMethod:
                                                              X
                                                                  ? "lazy"
                                                                  : "eager",
                                                          className: (0, eb.$)(
                                                              eR.CommentBox,
                                                              B && eR.Condensed
                                                          ),
                                                          ...(0, ep.G)(
                                                              ev.Y.commentBox(
                                                                  ev.Y
                                                                      .commentComposer
                                                              )
                                                          ),
                                                      })),
                                            (0, F.jsx)(j, {
                                                repositoryKey: r,
                                                className:
                                                    eN.LazyContributorFooter,
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        });
                    }
                );
            ej.displayName = "CommentComposer";
            let e_ = ({ discussionUrl: e }) =>
                (0, F.jsxs)("div", {
                    children: [
                        eI.k.issueConvertedToDiscussion,
                        "\xa0",
                        (0, F.jsx)(ek.A, {
                            href: e,
                            inline: !0,
                            children: "discussion",
                        }),
                    ],
                });
            try {
                e_.displayName ||
                    (e_.displayName = "CommentDisabledDueToDiscussion");
            } catch {}
            var ew = n(81156);
            let eE = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueBodySecondaryFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanReport",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanReportToMaintainer",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanBlockFromOrg",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanUnblockFromOrg",
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            eE.hash = "68dfdec926facf771bf182864c9ab2e9";
            let eA = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [{ kind: "Variable", name: "id", variableName: "id" }],
                    n = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: [
                                    {
                                        kind: "Literal",
                                        name: "renderTasklistBlocks",
                                        value: !0,
                                    },
                                    {
                                        kind: "Literal",
                                        name: "unfurlReferences",
                                        value: !0,
                                    },
                                ],
                                kind: "ScalarField",
                                name: "bodyHTML",
                                storageKey:
                                    "bodyHTML(renderTasklistBlocks:true,unfurlReferences:true)",
                            },
                        ],
                        type: "Issue",
                        abstractKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueBodyRefetchQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [n],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "IssueBodyRefetchQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "2ccdc50919e01512d72ae474a81b446d",
                        metadata: {},
                        name: "IssueBodyRefetchQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            eA.hash = "b948d07f9d17231275ccba11e2e54545";
            let eP = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueBody",
                    selections: [
                        e,
                        l,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerDidAuthor",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "locked",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "author",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "IssueBodyHeaderActions",
                                },
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "IssueBodyHeaderAuthor",
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "avatarUrl",
                                    storageKey: null,
                                },
                                n,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "profileUrl",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                l,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "slashCommandsEnabled",
                                    storageKey: null,
                                },
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [n, e, a],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        a,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanUpdateNext",
                            storageKey: null,
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueBodyViewer",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueBodyContent",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueBodyHeader",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueBodyViewerReactable",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueBodyViewerSubIssues",
                        },
                        {
                            kind: "ClientExtension",
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "pendingBlock",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "pendingUnblock",
                                    storageKey: null,
                                },
                            ],
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            eP.hash = "7268020d562c13d973143965d906c7b7";
            let eB = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueBodyContent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "body",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: [
                            {
                                kind: "Literal",
                                name: "renderTasklistBlocks",
                                value: !0,
                            },
                            {
                                kind: "Literal",
                                name: "unfurlReferences",
                                value: !0,
                            },
                        ],
                        kind: "ScalarField",
                        name: "bodyHTML",
                        storageKey:
                            "bodyHTML(renderTasklistBlocks:true,unfurlReferences:true)",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "bodyVersion",
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            eB.hash = "aa4df7b9e6a8e7545c9fcfd9c3de151e";
            var eD = n(13771),
                eM = n(20459);
            function eV({
                id: e,
                bodyHTML: l,
                query: n,
                bodyRef: a,
                getHTML: s,
                children: i,
            }) {
                let [t, r] = (0, Q.useState)(() => new Date()),
                    u = (0, N.useRelayEnvironment)(),
                    o = (0, Q.useCallback)(async () => {
                        if (!/<(?:video|img)/i.test(l)) return;
                        let i = new Date();
                        if (24e4 > Math.abs(i.getTime() - t.getTime())) return;
                        let o = s(
                            await (0, N.fetchQuery)(u, n, { id: e }).toPromise()
                        );
                        if (o) {
                            let e = new DOMParser(),
                                l = a.current,
                                n = e.parseFromString(o, "text/html");
                            if (!l || !n) return;
                            let s = (e) => {
                                let a = l.getElementsByTagName(e),
                                    s = n.getElementsByTagName(e);
                                for (let e = 0; e < a.length; e++)
                                    s[e] && (a[e].src = s[e].src);
                            };
                            (s("img"), s("video"), r(i));
                        }
                    }, [l, t, 24e4, u, n, e, s, a]);
                return (
                    (0, Q.useEffect)(() => {
                        let e = a?.current?.parentElement;
                        if (!e) return;
                        let l = null,
                            n = !0,
                            s = () => {
                                let e = Date.now();
                                n
                                    ? (o(), (n = !1), (l = e))
                                    : (null === l || e - l > 1e4) &&
                                      (o(), (l = e));
                            };
                        return (
                            e.addEventListener("mouseover", s),
                            () => {
                                e.removeEventListener("mouseover", s);
                            }
                        );
                    }, [o, a]),
                    (0, F.jsx)(F.Fragment, { children: i })
                );
            }
            try {
                eV.displayName || (eV.displayName = "RefreshVideoWrapper");
            } catch {}
            try {
                (a = IMAGE_VIDEO_TAG_REGEX).displayName ||
                    (a.displayName = "IMAGE_VIDEO_TAG_REGEX");
            } catch {}
            var eU = n(40104),
                eO = n(21998),
                eq = n(34784),
                eH = n(62559),
                e$ = n(69410);
            let ez = {
                issueBodyHeader: "Description",
                issueBodyPlaceholder: "Type your description here\u2026",
                issueBodyHeaderActions: "Issue body actions",
                staleBodyErrorPrefix: "GraphQL error: STALE_DATA",
                authorLabel: (e) => `${e ? "bot" : "mannequin"}`,
            };
            var eW = n(51802);
            let eQ = {
                validationErrorFlash:
                    "IssueBodyEditor-module__validationErrorFlash--Xu_Pj",
            };
            function eG({
                subjectId: e,
                subject: l,
                body: n,
                bodyIsStale: a,
                onChange: s,
                onCancel: i,
                onCommit: t,
                editorDisabled: r = !1,
                trailingIcon: u = !0,
            }) {
                let [o, d] = (0, Q.useState)(void 0),
                    c = (0, Q.useRef)(null);
                (0, Q.useEffect)(() => {
                    c && c.current && c.current.focus();
                }, [c]);
                let m = (0, eH.QK)(n),
                    g = (0, Q.useId)();
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsx)(T.hF, {
                            disabled: r,
                            saveButtonTrailingIcon: u,
                            subject: l,
                            value: n,
                            placeholder: ez.issueBodyPlaceholder,
                            onChange: (e) => {
                                (o && d(void 0), s(e));
                            },
                            onCancel: () => i(!0, c),
                            validationResult: { isValid: !0 },
                            onSave: () => {
                                m.isValid ? t(e) : d(m.errorMessage);
                            },
                            contentIsStale: a,
                            ref: c,
                            label: "Body input",
                            "aria-describedby": o ? g : void 0,
                            buttonSize: "medium",
                            teamHovercardsEnabled: !0,
                            ...(0, ep.G)(eW.Y.commentBox("body")),
                        }),
                        o &&
                            (0, F.jsxs)(e$.A, {
                                variant: "danger",
                                id: g,
                                className: eQ.validationErrorFlash,
                                children: [
                                    (0, F.jsx)(W.A, { icon: V.AlertIcon }),
                                    o,
                                ],
                            }),
                    ],
                });
            }
            try {
                eG.displayName || (eG.displayName = "IssueBodyEditor");
            } catch {}
            let eY = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueBodyHeaderSecondaryFragment_issue",
                selections: [
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isPrivate",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "login",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            eY.hash = "0fdb74baf478ca83d13a3ce551da5981";
            let eX = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueBodyHeaderSecondaryFragment",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MarkdownEditHistoryViewer_comment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MarkdownLastEditedBy",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "showSpammyBadge",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "authorAssociation",
                        storageKey: null,
                    },
                ],
                type: "Comment",
                abstractKey: "__isComment",
            };
            eX.hash = "441bf841f65ea116644822576434f48f";
            let eJ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueBodyHeader",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueBodyHeaderActions_comment",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerDidAuthor",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "author",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "IssueBodyHeaderAuthor",
                            },
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "IssueBodyHeaderActions",
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "avatarUrl",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "login",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "profileUrl",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__typename",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Comment",
                abstractKey: "__isComment",
            };
            eJ.hash = "f8a94f3b140c255a1ba95f78f369e6ff";
            var eZ = n(29554),
                e0 = n(41248),
                e1 = n(85757),
                e2 = n(23656),
                e4 = n(21086),
                e6 = n(89169),
                e5 = n(21654),
                e7 = n(72683);
            let e3 = {
                    dateLink: "IssueBodyHeader-module__dateLink--GZfps",
                    RelativeTime: "IssueBodyHeader-module__RelativeTime--LRd7n",
                    authorLabel: "IssueBodyHeader-module__authorLabel--uvjyy",
                    IssueBodyHeaderContainer:
                        "IssueBodyHeader-module__IssueBodyHeaderContainer--omzzd",
                    viewerDidAuthor:
                        "IssueBodyHeader-module__viewerDidAuthor--hiddX",
                    viewerDidNotAuthor:
                        "IssueBodyHeader-module__viewerDidNotAuthor--QE49X",
                    activityHeaderWrapper:
                        "IssueBodyHeader-module__activityHeaderWrapper--WDoKj",
                    avatarContainer:
                        "IssueBodyHeader-module__avatarContainer--tVAqx",
                    narrowViewportWrapper:
                        "IssueBodyHeader-module__narrowViewportWrapper--cUGQk",
                    titleSection: "IssueBodyHeader-module__titleSection--a171Q",
                    footerSection:
                        "IssueBodyHeader-module__footerSection--R3Cax",
                    actionsWrapper:
                        "IssueBodyHeader-module__actionsWrapper--nZngh",
                    editsSection: "IssueBodyHeader-module__editsSection--ptNnu",
                    badgesSection:
                        "IssueBodyHeader-module__badgesSection--izNBK",
                    badgeGroup: "IssueBodyHeader-module__badgeGroup--xiI1A",
                    actionsSection:
                        "IssueBodyHeader-module__actionsSection--CZDiB",
                },
                e8 = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueBodyHeaderActions",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "login",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                    ],
                    type: "Actor",
                    abstractKey: "__isActor",
                };
            e8.hash = "af464fc5623314887f9e8cdfaf758d94";
            let e9 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueBodyHeaderActions_comment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "body",
                        storageKey: null,
                    },
                ],
                type: "Comment",
                abstractKey: "__isComment",
            };
            e9.hash = "e65d1b4543dae8f62c447cba44e163f1";
            var le = n(21067),
                ll = n(59123),
                ln = n(14969),
                la = n(14406);
            function ls({
                url: e,
                issueBodyRef: l,
                onReplySelect: n,
                startIssueBodyEdit: a,
                viewerCanUpdate: s,
                viewerCanReport: i,
                viewerCanReportToMaintainer: t,
                viewerCanBlockFromOrg: r,
                viewerCanUnblockFromOrg: u,
                issueId: o,
                owner: d,
                ownerId: c,
                ownerUrl: m,
                author: g,
                pendingBlock: y,
                pendingUnblock: p,
                comment: k,
                isDisabled: b = !1,
            }) {
                var h, f, K, S, I;
                let [v, L] = (0, Q.useState)(!1),
                    [T, C] = (0, Q.useState)(null),
                    [x, R] = (0, Q.useState)(!1),
                    [j, _] = (0, Q.useState)(!1),
                    w = (0, N.useFragment)(e8, g),
                    E = (0, N.useFragment)(e9, k),
                    A = (0, Q.useMemo)(() => {
                        if (!w || !e) return;
                        let l = ey.cg?.location.origin;
                        if (!l) return;
                        let n = `content_url=${encodeURIComponent(e)}&report=${w.login}+(user)`;
                        return `${l}/contact/report-content?${n}`;
                    }, [w, e]),
                    [P, B] = (0, Q.useState)(!1),
                    D = ((h = !!r), (f = !!y), (K = !!p), !f && (!!K || h)),
                    M = ((S = !!u), (I = !!y), !p && (!!I || S));
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        P &&
                            d &&
                            m &&
                            o &&
                            (0, F.jsx)(ln._, {
                                owner: d,
                                ownerUrl: m,
                                reportUrl: A,
                                contentId: o,
                                onClose: () => B(!1),
                                contentType: "issue",
                            }),
                        x &&
                            d &&
                            c &&
                            e &&
                            o &&
                            (0, F.jsx)(ll.r5, {
                                onClose: () => R(!1),
                                organization: { login: d, id: c },
                                contentId: o,
                                contentAuthor: { login: w.login, id: w.id },
                                contentUrl: e,
                            }),
                        j &&
                            d &&
                            c &&
                            e &&
                            o &&
                            (0, F.jsx)(la.o, {
                                onClose: () => _(!1),
                                organization: { login: d, id: c },
                                contentAuthor: { login: w.login, id: w.id },
                                contentId: o,
                            }),
                        (0, F.jsxs)(O.W, {
                            open: v,
                            onOpenChange: (e) => {
                                if (e) {
                                    let e = window.getSelection();
                                    e && e.anchorNode
                                        ? C({
                                              anchorNode: e.anchorNode,
                                              range: e.getRangeAt(0),
                                          })
                                        : C(null);
                                }
                                L(e);
                            },
                            children: [
                                (0, F.jsx)(O.W.Anchor, {
                                    children: (0, F.jsx)(q.K, {
                                        disabled: b,
                                        size: "small",
                                        icon: V.KebabHorizontalIcon,
                                        variant: "invisible",
                                        "aria-label": ez.issueBodyHeaderActions,
                                    }),
                                }),
                                (0, F.jsx)(O.W.Overlay, {
                                    children: (0, F.jsxs)(H.l, {
                                        children: [
                                            (0, F.jsxs)(H.l.Item, {
                                                onSelect: () =>
                                                    void (
                                                        e &&
                                                        navigator.clipboard.writeText(
                                                            e
                                                        )
                                                    ),
                                                children: [
                                                    (0, F.jsx)(
                                                        H.l.LeadingVisual,
                                                        {
                                                            children: (0,
                                                            F.jsx)(
                                                                V.LinkIcon,
                                                                {}
                                                            ),
                                                        }
                                                    ),
                                                    "Copy link",
                                                ],
                                            }),
                                            (0, le.M3)() &&
                                                (0, F.jsxs)(H.l.Item, {
                                                    onSelect: () => {
                                                        let e = (0, eM.E)(
                                                            l?.current,
                                                            T,
                                                            E.body
                                                        );
                                                        n?.(e);
                                                    },
                                                    children: [
                                                        (0, F.jsx)(
                                                            H.l.LeadingVisual,
                                                            {
                                                                children: (0,
                                                                F.jsx)(
                                                                    V.QuoteIcon,
                                                                    {}
                                                                ),
                                                            }
                                                        ),
                                                        "Quote reply",
                                                    ],
                                                }),
                                            s &&
                                                (0, F.jsxs)(F.Fragment, {
                                                    children: [
                                                        (0, F.jsx)(
                                                            H.l.Divider,
                                                            {}
                                                        ),
                                                        (0, F.jsxs)(H.l.Item, {
                                                            onSelect: () => {
                                                                a();
                                                            },
                                                            children: [
                                                                (0, F.jsx)(
                                                                    H.l
                                                                        .LeadingVisual,
                                                                    {
                                                                        children:
                                                                            (0,
                                                                            F.jsx)(
                                                                                V.PencilIcon,
                                                                                {}
                                                                            ),
                                                                    }
                                                                ),
                                                                "Edit",
                                                            ],
                                                        }),
                                                    ],
                                                }),
                                            D &&
                                                (0, F.jsxs)(F.Fragment, {
                                                    children: [
                                                        (0, F.jsx)(
                                                            H.l.Divider,
                                                            {}
                                                        ),
                                                        (0, F.jsxs)(H.l.Item, {
                                                            onSelect: () => {
                                                                R(!0);
                                                            },
                                                            children: [
                                                                (0, F.jsx)(
                                                                    H.l
                                                                        .LeadingVisual,
                                                                    {
                                                                        children:
                                                                            (0,
                                                                            F.jsx)(
                                                                                V.BlockedIcon,
                                                                                {}
                                                                            ),
                                                                    }
                                                                ),
                                                                "Block user",
                                                            ],
                                                        }),
                                                    ],
                                                }),
                                            M &&
                                                (0, F.jsxs)(F.Fragment, {
                                                    children: [
                                                        (0, F.jsx)(
                                                            H.l.Divider,
                                                            {}
                                                        ),
                                                        (0, F.jsxs)(H.l.Item, {
                                                            onSelect: () => {
                                                                _(!0);
                                                            },
                                                            children: [
                                                                (0, F.jsx)(
                                                                    H.l
                                                                        .LeadingVisual,
                                                                    {
                                                                        children:
                                                                            (0,
                                                                            F.jsx)(
                                                                                V.BlockedIcon,
                                                                                {}
                                                                            ),
                                                                    }
                                                                ),
                                                                "Unblock user",
                                                            ],
                                                        }),
                                                    ],
                                                }),
                                            (i || t) &&
                                                (0, F.jsxs)(F.Fragment, {
                                                    children: [
                                                        (0, F.jsx)(
                                                            H.l.Divider,
                                                            {}
                                                        ),
                                                        t
                                                            ? (0, F.jsxs)(
                                                                  H.l.Item,
                                                                  {
                                                                      onSelect:
                                                                          () => {
                                                                              B(
                                                                                  !0
                                                                              );
                                                                          },
                                                                      children:
                                                                          [
                                                                              (0,
                                                                              F.jsx)(
                                                                                  H
                                                                                      .l
                                                                                      .LeadingVisual,
                                                                                  {
                                                                                      children:
                                                                                          (0,
                                                                                          F.jsx)(
                                                                                              V.ReportIcon,
                                                                                              {}
                                                                                          ),
                                                                                  }
                                                                              ),
                                                                              "Report content",
                                                                          ],
                                                                  }
                                                              )
                                                            : (0, F.jsxs)(
                                                                  H.l.LinkItem,
                                                                  {
                                                                      href: A,
                                                                      target: "_blank",
                                                                      children:
                                                                          [
                                                                              (0,
                                                                              F.jsx)(
                                                                                  H
                                                                                      .l
                                                                                      .LeadingVisual,
                                                                                  {
                                                                                      children:
                                                                                          (0,
                                                                                          F.jsx)(
                                                                                              V.ReportIcon,
                                                                                              {}
                                                                                          ),
                                                                                  }
                                                                              ),
                                                                              "Report content",
                                                                          ],
                                                                  }
                                                              ),
                                                    ],
                                                }),
                                        ],
                                    }),
                                }),
                            ],
                        }),
                    ],
                });
            }
            try {
                ls.displayName || (ls.displayName = "IssueBodyHeaderActions");
            } catch {}
            let li = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueBodyHeaderAuthor",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileUrl",
                        storageKey: null,
                    },
                ],
                type: "Actor",
                abstractKey: "__isActor",
            };
            li.hash = "18098578fa2042c3862894ceb62ea79b";
            let lt = {
                authorLoginLink:
                    "IssueBodyHeaderAuthor-module__authorLoginLink--MsgZJ",
            };
            function lr({ author: e }) {
                let { login: l, profileUrl: n } =
                    (0, N.useFragment)(li, e) || e7.t.ghost;
                return (0, F.jsx)(eO.N_, {
                    href: n || void 0,
                    "data-hovercard-url": n && (0, eg.dCN)({ owner: l }),
                    "data-testid": "issue-body-header-author",
                    sx: {
                        ":hover": { textDecoration: n ? "underline" : "none" },
                    },
                    className: lt.authorLoginLink,
                    children: l,
                });
            }
            try {
                lr.displayName || (lr.displayName = "IssueBodyHeaderAuthor");
            } catch {}
            function lu({
                additionalActions: e,
                comment: l,
                url: n,
                isPullRequest: a,
                actionProps: s,
                secondaryKey: i,
                secondaryKeyIssue: t,
            }) {
                let r = (0, N.useFragment)(eJ, l),
                    u = new Date(r.createdAt),
                    o = (0, N.useFragment)(eX, i) ?? void 0,
                    d = (0, N.useFragment)(eY, t) ?? void 0,
                    c = r.author?.__typename === "Bot",
                    m = r.author?.__typename === "Mannequin",
                    g = (0, F.jsxs)(F.Fragment, {
                        children: [
                            (0, F.jsx)("span", {
                                children: a ? "created " : "opened ",
                            }),
                            n
                                ? (0, F.jsx)(ek.A, {
                                      href: n,
                                      "data-testid": "issue-body-header-link",
                                      className: e3.dateLink,
                                      children: (0, F.jsxs)(e6.A, {
                                          date: u,
                                          className: e3.RelativeTime,
                                          children: [
                                              "on ",
                                              u.toLocaleDateString("en-US", {
                                                  month: "short",
                                                  day: "numeric",
                                                  year: "numeric",
                                              }),
                                          ],
                                      }),
                                  })
                                : (0, F.jsxs)(e6.A, {
                                      date: u,
                                      className: e3.RelativeTime,
                                      children: [
                                          "on ",
                                          u.toLocaleDateString("en-US", {
                                              month: "short",
                                              day: "numeric",
                                              year: "numeric",
                                          }),
                                      ],
                                  }),
                            (0, F.jsx)(e4._, {
                                editInformation: o,
                                includeSeparator: !0,
                            }),
                            a &&
                                (0, F.jsx)(e5.A, {
                                    className: e3.authorLabel,
                                    children: "Author",
                                }),
                        ],
                    }),
                    {
                        avatarUrl: y,
                        login: p,
                        profileUrl: k,
                    } = r.author ?? e7.t.ghost;
                return (0, F.jsx)("div", {
                    className: (0, eb.$)(
                        e3.IssueBodyHeaderContainer,
                        r.viewerDidAuthor
                            ? e3.viewerDidAuthor
                            : e3.viewerDidNotAuthor
                    ),
                    children: (0, F.jsxs)("div", {
                        className: (0, eb.$)(
                            eZ.A.activityHeader,
                            e3.activityHeaderWrapper
                        ),
                        children: [
                            (0, F.jsx)(eO.az, {
                                sx: {
                                    display: a
                                        ? ["flex", "flex", "none", "none"]
                                        : "",
                                },
                                className: (0, eb.$)(
                                    eD.A.avatarInner,
                                    e3.avatarContainer
                                ),
                                children: (0, F.jsx)(ek.A, {
                                    href: k ?? void 0,
                                    "data-hovercard-url":
                                        k && (0, eg.dCN)({ owner: p }),
                                    "aria-label": `@${p}'s profile`,
                                    className: k
                                        ? eD.A.avatarLink
                                        : eD.A.avatarWithoutLink,
                                    children: (0, F.jsx)(w.r, {
                                        size: 24,
                                        src: y,
                                        alt: `@${p}`,
                                    }),
                                }),
                            }),
                            (0, F.jsxs)("div", {
                                className: (0, eb.$)(
                                    eZ.A.narrowViewportWrapper,
                                    e3.narrowViewportWrapper
                                ),
                                children: [
                                    (0, F.jsx)("div", {
                                        className: e3.titleSection,
                                        children: (0, F.jsx)(lr, {
                                            author: r.author || null,
                                        }),
                                    }),
                                    (c || m) &&
                                        (0, F.jsx)(e5.A, {
                                            variant: "secondary",
                                            children: ez.authorLabel(c),
                                        }),
                                    (0, F.jsx)("div", {
                                        className: (0, eb.$)(
                                            eZ.A.footer,
                                            e3.footerSection
                                        ),
                                        children: g,
                                    }),
                                ],
                            }),
                            (0, F.jsxs)("div", {
                                className: (0, eb.$)(
                                    eZ.A.narrowViewportWrapper,
                                    e3.actionsWrapper
                                ),
                                children: [
                                    (0, F.jsx)("div", {
                                        className: (0, eb.$)(
                                            eZ.A.edits,
                                            e3.editsSection
                                        ),
                                        children: (0, F.jsx)(e2.W, {
                                            editHistory: o,
                                        }),
                                    }),
                                    (0, F.jsxs)("div", {
                                        className: e3.badgesSection,
                                        children: [
                                            (0, F.jsxs)("div", {
                                                className: e3.badgeGroup,
                                                children: [
                                                    o?.showSpammyBadge &&
                                                        (0, F.jsx)(e1.b, {}),
                                                    o &&
                                                        d?.repository
                                                            ?.isPrivate ===
                                                            !1 &&
                                                        (0, F.jsx)(e0.m, {
                                                            association:
                                                                o.authorAssociation,
                                                            viewerDidAuthor:
                                                                r.viewerDidAuthor,
                                                            org:
                                                                d.repository
                                                                    .owner
                                                                    ?.login ||
                                                                "",
                                                            repo: d.repository
                                                                .name,
                                                        }),
                                                ],
                                            }),
                                            (0, F.jsxs)("div", {
                                                className: e3.actionsSection,
                                                children: [
                                                    e,
                                                    s &&
                                                        r.author &&
                                                        (0, F.jsx)(ls, {
                                                            url: s.url,
                                                            comment: r,
                                                            issueBodyRef:
                                                                s.issueBodyRef,
                                                            onReplySelect:
                                                                s.onReplySelect,
                                                            startIssueBodyEdit:
                                                                s.startIssueBodyEdit,
                                                            viewerCanUpdate:
                                                                s.viewerCanUpdate,
                                                            viewerCanReport:
                                                                s.viewerCanReport,
                                                            viewerCanReportToMaintainer:
                                                                s.viewerCanReportToMaintainer,
                                                            viewerCanBlockFromOrg:
                                                                s.viewerCanBlockFromOrg,
                                                            viewerCanUnblockFromOrg:
                                                                s.viewerCanUnblockFromOrg,
                                                            issueId: s.issueId,
                                                            owner: s.owner,
                                                            ownerId: s.ownerId,
                                                            ownerUrl:
                                                                s.ownerUrl,
                                                            author: r.author,
                                                            pendingBlock:
                                                                s.pendingBlock,
                                                            pendingUnblock:
                                                                s.pendingUnblock,
                                                            isDisabled:
                                                                s.isDisabled,
                                                        }),
                                                ],
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    }),
                });
            }
            try {
                lu.displayName || (lu.displayName = "IssueBodyHeader");
            } catch {}
            let lo = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueBodyViewer",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                ],
                type: "Comment",
                abstractKey: "__isComment",
            };
            lo.hash = "91411b299197489bc0f55410e29d8f97";
            let ld = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueBodyViewerReactable",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "ReactionViewerRelayGroups",
                    },
                ],
                type: "Reactable",
                abstractKey: "__isReactable",
            };
            ld.hash = "27725a2fcff8719eb6bd5abc46bb8fcb";
            let lc = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueBodyViewerSubIssues",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "useCanEditSubIssues",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "useHasSubIssues",
                    },
                    {
                        args: [
                            {
                                kind: "Literal",
                                name: "fetchSubIssues",
                                value: !1,
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "AddSubIssueButtonGroup",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            lc.hash = "ffe6c65fee4a26af6f1e00275849906c";
            var lm = n(70170),
                lg = n(39837),
                ly = n(88431);
            let lp = {
                    MarkdownViewerHelpText:
                        "IssueMarkdownViewer-module__MarkdownViewerHelpText--JIEBY",
                },
                lk = ({
                    html: e,
                    markdown: l,
                    viewerCanUpdate: n,
                    onSave: a,
                    onLinkClick: s,
                    dataTestId: i = ev.Y.markdownBody,
                    onConvertToIssue: t,
                    onConvertToSubIssue: r,
                    createdViaEmail: u = !1,
                    issueCommentBodyRef: o,
                }) => {
                    let { addToast: d } = (0, M.Y6)(),
                        [c, m] = Q.useState(!1),
                        g = (0, Q.useCallback)(
                            (e, l, n) => {
                                (m(!1),
                                    n
                                        ? (l(),
                                          d({ type: "error", message: n }))
                                        : e());
                            },
                            [d]
                        ),
                        y = (0, Q.useCallback)(
                            (e) =>
                                new Promise((l, n) => {
                                    (m(!0),
                                        a(
                                            e,
                                            () => g(l, n),
                                            () =>
                                                g(
                                                    l,
                                                    n,
                                                    "Could not update issue comment"
                                                )
                                        ));
                                }),
                            [g, a]
                        ),
                        p = (0, Q.useRef)(y);
                    (0, ly.N)(() => {
                        p.current = y;
                    }, [y]);
                    let k = (0, Q.useMemo)(
                            () => (0, lm.s)((e) => p.current(e), 500),
                            []
                        ),
                        b = (0, Q.useMemo)(
                            () =>
                                e && e.length > 0
                                    ? (0, F.jsx)(lg.A, {
                                          disabled: !n || c,
                                          viewerCanUpdate: n,
                                          verifiedHTML: e,
                                          markdownValue: l,
                                          onChange: k,
                                          onConvertToIssue: t,
                                          onConvertToSubIssue: r,
                                          onLinkClick: s,
                                          className: u
                                              ? "email-format"
                                              : void 0,
                                      })
                                    : (0, F.jsx)("span", {
                                          className: lp.MarkdownViewerHelpText,
                                          children: eI.k.noDescriptionProvided,
                                      }),
                            [u, e, c, l, k, t, r, s, n]
                        );
                    return (0, F.jsx)("div", {
                        "data-testid": i,
                        "data-team-hovercards-enabled": !0,
                        className: "markdown-body",
                        "data-turbolinks": "false",
                        ref: o,
                        children: b,
                    });
                };
            try {
                lk.displayName || (lk.displayName = "IssueMarkdownViewer");
            } catch {}
            var lF = n(97911);
            let lb = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "issueId",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "id",
                            variableName: "issueId",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        concreteType: "Issue",
                        kind: "LinkedField",
                        name: "parent",
                        plural: !1,
                        selections: [n],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "AddSubIssueButtonGroupQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [n, a],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "AddSubIssueButtonGroupQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    n,
                                    {
                                        kind: "InlineFragment",
                                        selections: [a],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "7455571275edb130f247e290e27105e3",
                        metadata: {},
                        name: "AddSubIssueButtonGroupQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            lb.hash = "247e55e89e2404975cba5c608bd28df0";
            let lh = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = [e];
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "fetchSubIssues",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "AddSubIssueButtonGroup",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "databaseId",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "IssueForm",
                                    kind: "LinkedField",
                                    name: "issueForms",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "__typename",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "visibility",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "viewerCanPush",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            condition: "fetchSubIssues",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Issue",
                                    kind: "LinkedField",
                                    name: "parent",
                                    plural: !1,
                                    selections: l,
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Literal",
                                            name: "first",
                                            value: 100,
                                        },
                                    ],
                                    concreteType: "IssueConnection",
                                    kind: "LinkedField",
                                    name: "subIssues",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "nodes",
                                            plural: !0,
                                            selections: l,
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: "subIssues(first:100)",
                                },
                            ],
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            lh.hash = "0c6b758b2e28bb817fe44e867a65c810";
            var lf = n(69948),
                lK = n(83494),
                lS = n(30459),
                lI = n(96459),
                lv = n(99505),
                lL = n(35247),
                lT = n(2635),
                lC = n(79634),
                lx = n(45147),
                lR = n(96665);
            let lN = {
                    body: "RelationshipsAlertDialog-module__body--TvN_e",
                    footer: "RelationshipsAlertDialog-module__footer--s1b7P",
                    header: "RelationshipsAlertDialog-module__header--xYnz6",
                    headerItem:
                        "RelationshipsAlertDialog-module__headerItem--rONbx",
                },
                lj = ({ children: e }) =>
                    (0, F.jsx)("div", { className: lN.body, children: e }),
                l_ = ({ footerButtons: e }) =>
                    (0, F.jsx)("div", {
                        className: lN.footer,
                        children: (0, F.jsx)(lR.l.Buttons, {
                            buttons: e ?? [],
                        }),
                    }),
                lw = ({ title: e, onClose: l, dialogLabelId: n }) =>
                    (0, F.jsxs)(lx.A, {
                        className: lN.header,
                        children: [
                            (0, F.jsx)(lx.A.Item, {
                                className: lN.headerItem,
                                id: n,
                                children: e,
                            }),
                            (0, F.jsx)(lR.l.CloseButton, {
                                onClose: (0, Q.useCallback)(
                                    () => l("close-button"),
                                    [l]
                                ),
                            }),
                        ],
                    });
            function lE({
                title: e,
                children: l,
                onClose: n,
                width: a = "medium",
                ...s
            }) {
                let i = {
                    buttonType: "primary",
                    content: "OK",
                    onClick: (0, Q.useCallback)(() => n("confirm"), [n]),
                };
                return (0, F.jsx)(lR.l, {
                    title: e,
                    role: "alertdialog",
                    width: a,
                    onClose: n,
                    footerButtons: [i],
                    renderBody: lj,
                    renderFooter: l_,
                    renderHeader: lw,
                    ...s,
                    children: l,
                });
            }
            try {
                lj.displayName || (lj.displayName = "SingleConfirmBody");
            } catch {}
            try {
                l_.displayName || (l_.displayName = "SingleConfirmFooter");
            } catch {}
            try {
                lw.displayName || (lw.displayName = "SingleConfirmHeader");
            } catch {}
            try {
                lE.displayName || (lE.displayName = "RelationshipsAlertDialog");
            } catch {}
            let lA = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            a,
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    s,
                                    n,
                                ],
                                storageKey: null,
                            },
                            n,
                        ],
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    },
                    r = [t];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "addSubIssueMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "AddSubIssuePayload",
                                kind: "LinkedField",
                                name: "addSubIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "SubIssuesListView",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "addSubIssueMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "AddSubIssuePayload",
                                kind: "LinkedField",
                                name: "addSubIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            i,
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 100,
                                                    },
                                                ],
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "subIssues",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Issue",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            n,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "state",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "stateReason",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "IssueDependenciesSummary",
                                                                kind: "LinkedField",
                                                                name: "issueDependenciesSummary",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "blockedBy",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: [
                                                                    {
                                                                        kind: "Literal",
                                                                        name: "first",
                                                                        value: 10,
                                                                    },
                                                                ],
                                                                concreteType:
                                                                    "UserConnection",
                                                                kind: "LinkedField",
                                                                name: "assignees",
                                                                plural: !1,
                                                                selections: [
                                                                    t,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "UserEdge",
                                                                        kind: "LinkedField",
                                                                        name: "edges",
                                                                        plural: !0,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "User",
                                                                                    kind: "LinkedField",
                                                                                    name: "node",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            n,
                                                                                            s,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "avatarUrl",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    "assignees(first:10)",
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "url",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            i,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "databaseId",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "number",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "title",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "titleHTML",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "IssueType",
                                                                kind: "LinkedField",
                                                                name: "issueType",
                                                                plural: !1,
                                                                selections: [
                                                                    n,
                                                                    a,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "color",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "SubIssuesSummary",
                                                                kind: "LinkedField",
                                                                name: "subIssuesSummary",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "total",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "completed",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: [
                                                                    {
                                                                        kind: "Literal",
                                                                        name: "first",
                                                                        value: 0,
                                                                    },
                                                                    {
                                                                        kind: "Literal",
                                                                        name: "includeClosedPrs",
                                                                        value: !0,
                                                                    },
                                                                ],
                                                                concreteType:
                                                                    "PullRequestConnection",
                                                                kind: "LinkedField",
                                                                name: "closedByPullRequestsReferences",
                                                                plural: !1,
                                                                selections: r,
                                                                storageKey:
                                                                    "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "closed",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "subIssues(first:100)",
                                            },
                                            {
                                                alias: "subIssuesConnection",
                                                args: null,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "subIssues",
                                                plural: !1,
                                                selections: r,
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "1f952888d3379ba909031b561032e28a",
                        metadata: {},
                        name: "addSubIssueMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            lA.hash = "863cf3166cf35a8c3b52e824cacf5df9";
            var lP = n(87118),
                lB = n(73189);
            function lD() {
                let [e, l] = (0, Q.useState)(null),
                    n = (0, Q.useCallback)(() => l(null), []),
                    a = (0, Q.useCallback)(
                        (e) =>
                            l({
                                title: "Sub-issue limit reached",
                                body: `Parents have a limit of ${e} sub-issues. To add more, an existing one must be removed.`,
                            }),
                        []
                    ),
                    s = (0, Q.useCallback)(
                        () =>
                            l({
                                title: "Sub-issue limit reached",
                                body: `You can\u{2019}t add more than 7 layers of sub-issues. To add a sub-issue, remove a parent issue at any level.`,
                            }),
                        []
                    ),
                    i = (0, Q.useCallback)(
                        () =>
                            l({
                                title: "Sub-issue circular dependency",
                                body: "A parent may not be a sub-issue of itself. To add it as a sub-issue, remove it as a parent in the tree.",
                            }),
                        []
                    ),
                    t = (0, Q.useCallback)(() => {
                        l({
                            title: "Duplicate sub-issue",
                            body: "A parent may not have duplicate sub-issues.",
                        });
                    }, []),
                    r = (0, Q.useCallback)(() => {
                        l({
                            title: "Access denied",
                            body: "You do not have permission to take this action for the selected issue. A repository role of 'triage' or higher is required.",
                        });
                    }, []),
                    u = (0, Q.useCallback)(() => {
                        l({
                            title: "Invalid owner",
                            body: "A sub-issue must belong to the same organization or user as the parent.",
                        });
                    }, []),
                    o = (0, Q.useCallback)(
                        (e) => {
                            let l = e.message.match(
                                    /Parent cannot have more than (?<limit>\d+) sub-issues/
                                ),
                                n = parseInt(l?.groups?.limit || "NaN", 10);
                            return isNaN(n)
                                ? e.message.includes(
                                      `You can\u{2019}t add more than 7 layers of sub-issues`
                                  )
                                    ? (s(), !0)
                                    : e.message.includes(
                                            "does not have the correct permissions to execute `AddSubIssue`"
                                        )
                                      ? (r(), !0)
                                      : e.message.includes(
                                              "Sub issue may not create a circular dependency"
                                          ) ||
                                          e.message.includes(
                                              "Sub issue cannot be the same as the parent issue"
                                          )
                                        ? (i(), !0)
                                        : e.message.includes(
                                                "Issue may not contain duplicate sub-issues"
                                            )
                                          ? (t(), !0)
                                          : !!e.message.includes(
                                                "Sub issue must have the same owner as the parent"
                                            ) && (u(), !0)
                                : (a(n), !0);
                        },
                        [a, i, s, t, r, u]
                    );
                return {
                    alert: e,
                    setAlert: l,
                    resetAlert: n,
                    showBreadthLimitAlert: a,
                    showServerAlert: o,
                };
            }
            let lM = { Box: "AddSubIssueButtonGroup-module__Box--Vv1Xr" };
            function lV({ issue: e, insideSidePanel: l }) {
                let [n, a] = (0, Q.useState)(!1),
                    {
                        alert: s,
                        resetAlert: i,
                        showBreadthLimitAlert: t,
                        showServerAlert: r,
                    } = lD(),
                    [u, o] = (0, Q.useState)(null),
                    { openCreateDialog: d, createDialogOpen: c } = (0, lP.m1)(),
                    { addToast: m } = (0, M.Y6)(),
                    g = (0, N.useRelayEnvironment)(),
                    y = (0, Q.useRef)(null),
                    p = (0, Q.useRef)(null),
                    k = (0, lf.S)(),
                    { sendAnalyticsEvent: b } = (0, lS.s)(),
                    h = (0, lI.Z)(),
                    { current_user_settings: f } = (0, lC.X)(),
                    K = (0, lT.mo)(),
                    S = K?.mode === "immersive",
                    I = (0, N.useFragment)(lh, e),
                    v = (I.subIssues?.nodes?.length || 0) >= 100,
                    L = (0, Q.useMemo)(
                        () =>
                            !(
                                S ||
                                !lL.W.showSubIssuesManageWithCopilotButton ||
                                !f?.copilot_show_functionality ||
                                ("PUBLIC" === I.repository.visibility &&
                                    (!I.repository.viewerCanPush ||
                                        I.repository.issueForms?.length))
                            ) && !0,
                        [
                            S,
                            f?.copilot_show_functionality,
                            I.repository.visibility,
                            I.repository.viewerCanPush,
                            I.repository.issueForms?.length,
                        ]
                    ),
                    T = (0, Q.useCallback)(
                        async ({ subIssue: e, onError: l }) => {
                            (!e.hasParent ||
                                (await k({
                                    title: "Are you sure?",
                                    content:
                                        "Sub-issues are limited to one parent. Confirm you want to proceed with this change.",
                                    confirmButtonType: "primary",
                                    confirmButtonContent: "Change parent issue",
                                }))) &&
                                (function ({
                                    environment: e,
                                    input: l,
                                    onError: n,
                                    onCompleted: a,
                                }) {
                                    (0, N.commitMutation)(e, {
                                        mutation: lA,
                                        variables: { input: l },
                                        onError: (e) => n && n(e),
                                        onCompleted: (e) => a && a(e),
                                    });
                                })({
                                    environment: g,
                                    input: {
                                        issueId: I.id,
                                        subIssueId: e.id,
                                        replaceParent: !0,
                                    },
                                    onError: (e) => {
                                        l?.(e);
                                    },
                                });
                        },
                        [k, I.id, g]
                    ),
                    C = (0, Q.useCallback)(
                        (e) => {
                            let [l] = e;
                            l &&
                                (0, N.fetchQuery)(g, lb, {
                                    issueId: l.id,
                                }).subscribe({
                                    next: (e) => {
                                        T({
                                            subIssue: {
                                                hasParent:
                                                    !!e?.node?.parent?.id,
                                                ...l,
                                            },
                                            onError: (e) => {
                                                r(e) ||
                                                    m({
                                                        type: "error",
                                                        message: e.message,
                                                    });
                                            },
                                        });
                                    },
                                    error: lB.l,
                                });
                        },
                        [T, m, g, r]
                    ),
                    x = (0, Q.useCallback)(
                        (e) => {
                            (null === e && p?.current && p.current.focus(),
                                o(e));
                        },
                        [o]
                    ),
                    R = (0, Q.useCallback)(() => i(), [i]),
                    j = (0, Q.useCallback)(() => {
                        b(
                            "analytics.click",
                            "ISSUES_SUB_ISSUES_COPILOT_BUTTON",
                            {
                                issueId: I.databaseId,
                                issueNumber: I.number,
                                repoNWO: I.repository.nameWithOwner,
                            }
                        );
                        let e = new URLSearchParams({
                            prompt: `Create me a sub-issue for @${I.repository.nameWithOwner}/issues/${I.number} to `,
                        });
                        h(`${lv.Jz}?${e.toString()}`);
                    }, [
                        b,
                        I.databaseId,
                        I.repository.nameWithOwner,
                        I.number,
                        h,
                    ]),
                    _ =
                        I.subIssues?.nodes
                            ?.filter((e) => !!e)
                            .map((e) => e.id) ?? [];
                return (
                    _.push(I.id),
                    I.parent && _.push(I.parent.id),
                    (0, F.jsxs)(F.Fragment, {
                        children: [
                            s &&
                                (0, F.jsx)(lE, {
                                    title: s.title,
                                    onClose: R,
                                    children: s.body,
                                }),
                            (0, F.jsxs)("div", {
                                className: lM.Box,
                                children: [
                                    (l || void 0 === l) &&
                                        null === u &&
                                        !c &&
                                        (0, F.jsx)(lK.ak, {
                                            commands: {
                                                "sub-issues:add-existing-issue":
                                                    () => {
                                                        v ? t(100) : o("Issue");
                                                    },
                                                "sub-issues:create-sub-issue":
                                                    () => {
                                                        v
                                                            ? t(100)
                                                            : (a(!1),
                                                              o(null),
                                                              d(I.id));
                                                    },
                                            },
                                        }),
                                    (0, F.jsxs)(U.A, {
                                        ref: y,
                                        children: [
                                            (0, F.jsx)(lK.cQ, {
                                                size: "small",
                                                commandId:
                                                    "sub-issues:create-sub-issue",
                                                children: "Create sub-issue",
                                            }),
                                            (0, F.jsx)(q.K, {
                                                unsafeDisableTooltip: !0,
                                                size: "small",
                                                icon: V.TriangleDownIcon,
                                                "aria-label":
                                                    "View more sub-issue options",
                                                ref: p,
                                                onClick: () => {
                                                    (a((e) => !e), o(null));
                                                },
                                            }),
                                        ],
                                    }),
                                    (0, F.jsx)(O.W, {
                                        open: n,
                                        onOpenChange: a,
                                        anchorRef: y,
                                        children: (0, F.jsx)(O.W.Overlay, {
                                            width: "small",
                                            returnFocusRef: p,
                                            children: (0, F.jsx)(H.l, {
                                                children: (0, F.jsxs)(
                                                    H.l.Group,
                                                    {
                                                        children: [
                                                            (0, F.jsx)(lK.Vr, {
                                                                role: "button",
                                                                commandId:
                                                                    "sub-issues:create-sub-issue",
                                                                leadingVisual:
                                                                    (0, F.jsx)(
                                                                        V.PlusCircleIcon,
                                                                        {}
                                                                    ),
                                                                children:
                                                                    "Create sub-issue",
                                                            }),
                                                            (0, F.jsx)(lK.Vr, {
                                                                commandId:
                                                                    "sub-issues:add-existing-issue",
                                                                leadingVisual:
                                                                    (0, F.jsx)(
                                                                        V.IssueOpenedIcon,
                                                                        {}
                                                                    ),
                                                                role: "button",
                                                                children:
                                                                    "Add existing issue",
                                                            }),
                                                            L &&
                                                                (0, F.jsxs)(
                                                                    F.Fragment,
                                                                    {
                                                                        children:
                                                                            [
                                                                                (0,
                                                                                F.jsx)(
                                                                                    H
                                                                                        .l
                                                                                        .Divider,
                                                                                    {}
                                                                                ),
                                                                                (0,
                                                                                F.jsxs)(
                                                                                    H
                                                                                        .l
                                                                                        .Item,
                                                                                    {
                                                                                        role: "button",
                                                                                        onSelect:
                                                                                            j,
                                                                                        children:
                                                                                            [
                                                                                                (0,
                                                                                                F.jsx)(
                                                                                                    H
                                                                                                        .l
                                                                                                        .LeadingVisual,
                                                                                                    {
                                                                                                        children:
                                                                                                            (0,
                                                                                                            F.jsx)(
                                                                                                                V.CopilotIcon,
                                                                                                                {}
                                                                                                            ),
                                                                                                    }
                                                                                                ),
                                                                                                "Draft sub-issue with Copilot",
                                                                                                (0,
                                                                                                F.jsx)(
                                                                                                    H
                                                                                                        .l
                                                                                                        .TrailingVisual,
                                                                                                    {
                                                                                                        children:
                                                                                                            (0,
                                                                                                            F.jsx)(
                                                                                                                V.ArrowUpRightIcon,
                                                                                                                {}
                                                                                                            ),
                                                                                                    }
                                                                                                ),
                                                                                            ],
                                                                                    }
                                                                                ),
                                                                            ],
                                                                    }
                                                                ),
                                                        ],
                                                    }
                                                ),
                                            }),
                                        }),
                                    }),
                                    (0, F.jsx)(D.D, {
                                        selectedIssueIds: [],
                                        hiddenIssueIds: _,
                                        onPickerTypeChange: x,
                                        onIssueSelection: C,
                                        defaultRepositoryNameWithOwner:
                                            I.repository.nameWithOwner,
                                        organization: I.repository.owner.login,
                                        pickerType: u,
                                        anchorElement: (e) => {
                                            let { ref: l } = e;
                                            return (
                                                l && (l.current = y.current),
                                                (0, F.jsx)(F.Fragment, {})
                                            );
                                        },
                                    }),
                                ],
                            }),
                        ],
                    })
                );
            }
            try {
                lV.displayName || (lV.displayName = "AddSubIssueButtonGroup");
            } catch {}
            let lU = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "useCanEditSubIssues",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanUpdateMetadata",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isArchived",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            function lO(e) {
                let { viewerCanUpdateMetadata: l, repository: n } =
                    (0, N.useFragment)(lU, e) ?? {};
                return l && !n?.isArchived;
            }
            lU.hash = "8431d46d0aee4f10f97387f59bb22f71";
            let lq = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "useHasSubIssues",
                selections: [
                    {
                        alias: null,
                        args: null,
                        concreteType: "SubIssuesSummary",
                        kind: "LinkedField",
                        name: "subIssuesSummary",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "total",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            function lH(e) {
                let l = (0, N.useFragment)(lq, e);
                return (l?.subIssuesSummary?.total ?? 0) > 0;
            }
            lq.hash = "cb7257c941f0b0b94afebec284c04fdb";
            var l$ = n(65556);
            let lz = {
                    couldNotUpdateIssueBody: "Could not update issue body",
                    couldNotUpdateIssueBodyStale:
                        "The content you are editing has changed. Please copy your edits and refresh the page.",
                    couldNotConvertIssue:
                        "Could not convert the checklist item to an issue. Please refresh the page and try again.",
                },
                lW = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "input",
                            },
                        ],
                        l = [
                            {
                                kind: "Variable",
                                name: "input",
                                variableName: "input",
                            },
                        ],
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "body",
                            storageKey: null,
                        },
                        a = {
                            alias: null,
                            args: [
                                {
                                    kind: "Literal",
                                    name: "renderTasklistBlocks",
                                    value: !0,
                                },
                                {
                                    kind: "Literal",
                                    name: "unfurlReferences",
                                    value: !0,
                                },
                            ],
                            kind: "ScalarField",
                            name: "bodyHTML",
                            storageKey:
                                "bodyHTML(renderTasklistBlocks:true,unfurlReferences:true)",
                        },
                        s = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "message",
                            storageKey: null,
                        },
                        i = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        };
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "createIssueFromChecklistItemMutation",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType: "CreateIssuePayload",
                                    kind: "LinkedField",
                                    name: "createIssue",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issue",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "Issue",
                                                    kind: "LinkedField",
                                                    name: "parent",
                                                    plural: !1,
                                                    selections: [n, a],
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "errors",
                                            plural: !0,
                                            selections: [s],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "Mutation",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "createIssueFromChecklistItemMutation",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType: "CreateIssuePayload",
                                    kind: "LinkedField",
                                    name: "createIssue",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issue",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "Issue",
                                                    kind: "LinkedField",
                                                    name: "parent",
                                                    plural: !1,
                                                    selections: [n, a, i],
                                                    storageKey: null,
                                                },
                                                i,
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "errors",
                                            plural: !0,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                                s,
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "47471f1ccea140a1d41f7c1a4baa5dc7",
                            metadata: {},
                            name: "createIssueFromChecklistItemMutation",
                            operationKind: "mutation",
                            text: null,
                        },
                    };
                })();
            lW.hash = "0d540b33c19c7287427d057ee1c414a5";
            let lQ = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "body",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: [
                            {
                                kind: "Literal",
                                name: "renderTasklistBlocks",
                                value: !0,
                            },
                            {
                                kind: "Literal",
                                name: "unfurlReferences",
                                value: !0,
                            },
                        ],
                        kind: "ScalarField",
                        name: "bodyHTML",
                        storageKey:
                            "bodyHTML(renderTasklistBlocks:true,unfurlReferences:true)",
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "message",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [r, u, n],
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        concreteType: "IssueDependenciesSummary",
                        kind: "LinkedField",
                        name: "issueDependenciesSummary",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "blockedBy",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: [{ kind: "Literal", name: "first", value: 10 }],
                        concreteType: "UserConnection",
                        kind: "LinkedField",
                        name: "assignees",
                        plural: !1,
                        selections: [
                            g,
                            {
                                alias: null,
                                args: null,
                                concreteType: "UserEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "User",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            n,
                                            u,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "avatarUrl",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: "assignees(first:10)",
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [t, o, n],
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "issueType",
                        plural: !1,
                        selections: [
                            n,
                            t,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "color",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        concreteType: "SubIssuesSummary",
                        kind: "LinkedField",
                        name: "subIssuesSummary",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "total",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "completed",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    I = [g],
                    v = {
                        alias: null,
                        args: [
                            { kind: "Literal", name: "first", value: 0 },
                            {
                                kind: "Literal",
                                name: "includeClosedPrs",
                                value: !0,
                            },
                        ],
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "closedByPullRequestsReferences",
                        plural: !1,
                        selections: I,
                        storageKey:
                            "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "createSubIssueFromChecklistItemMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType:
                                    "ConvertChecklistItemToSubIssuePayload",
                                kind: "LinkedField",
                                name: "convertChecklistItemToSubIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "parent",
                                                plural: !1,
                                                selections: [
                                                    n,
                                                    a,
                                                    s,
                                                    {
                                                        args: null,
                                                        kind: "FragmentSpread",
                                                        name: "SubIssuesList",
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "SubIssuesListItem",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [i],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "createSubIssueFromChecklistItemMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType:
                                    "ConvertChecklistItemToSubIssuePayload",
                                kind: "LinkedField",
                                name: "convertChecklistItemToSubIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "parent",
                                                plural: !1,
                                                selections: [
                                                    n,
                                                    a,
                                                    s,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "Repository",
                                                        kind: "LinkedField",
                                                        name: "repository",
                                                        plural: !1,
                                                        selections: [
                                                            t,
                                                            o,
                                                            n,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "IssueForm",
                                                                kind: "LinkedField",
                                                                name: "issueForms",
                                                                plural: !0,
                                                                selections: [r],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "nameWithOwner",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "visibility",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "viewerCanPush",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: [
                                                            {
                                                                kind: "Literal",
                                                                name: "first",
                                                                value: 100,
                                                            },
                                                        ],
                                                        concreteType:
                                                            "IssueConnection",
                                                        kind: "LinkedField",
                                                        name: "subIssues",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Issue",
                                                                kind: "LinkedField",
                                                                name: "nodes",
                                                                plural: !0,
                                                                selections: [
                                                                    n,
                                                                    d,
                                                                    c,
                                                                    m,
                                                                    y,
                                                                    p,
                                                                    k,
                                                                    F,
                                                                    b,
                                                                    h,
                                                                    f,
                                                                    K,
                                                                    S,
                                                                    v,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "closed",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey:
                                                            "subIssues(first:100)",
                                                    },
                                                    {
                                                        alias: "subIssuesConnection",
                                                        args: null,
                                                        concreteType:
                                                            "IssueConnection",
                                                        kind: "LinkedField",
                                                        name: "subIssues",
                                                        plural: !1,
                                                        selections: I,
                                                        storageKey: null,
                                                    },
                                                    F,
                                                    b,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Issue",
                                                        kind: "LinkedField",
                                                        name: "parent",
                                                        plural: !1,
                                                        selections: [n],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            d,
                                            c,
                                            m,
                                            y,
                                            p,
                                            k,
                                            F,
                                            b,
                                            h,
                                            f,
                                            K,
                                            S,
                                            v,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [r, i],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "215f6b50ceedc4132da3e0a1e40a2d04",
                        metadata: {},
                        name: "createSubIssueFromChecklistItemMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            lQ.hash = "79e6ef2540717d803212087083925e1b";
            let lG = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "bodyVersion",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "updateIssueBodyMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "UpdateIssuePayload",
                                kind: "LinkedField",
                                name: "updateIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            a,
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueBodyContent",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "MarkdownEditHistoryViewer_comment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "MarkdownLastEditedBy",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "updateIssueBodyMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "UpdateIssuePayload",
                                kind: "LinkedField",
                                name: "updateIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "body",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "renderTasklistBlocks",
                                                        value: !0,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "unfurlReferences",
                                                        value: !0,
                                                    },
                                                ],
                                                kind: "ScalarField",
                                                name: "bodyHTML",
                                                storageKey:
                                                    "bodyHTML(renderTasklistBlocks:true,unfurlReferences:true)",
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "viewerCanReadUserContentEdits",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "lastEditedAt",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "UserContentEdit",
                                                        kind: "LinkedField",
                                                        name: "lastUserContentEdit",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "editor",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "__typename",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "url",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "login",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    n,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            n,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                type: "Comment",
                                                abstractKey: "__isComment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "9f3f1966cc6b946ea1ee51d6add2c6ea",
                        metadata: {},
                        name: "updateIssueBodyMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function lY({
                environment: e,
                input: {
                    issueId: l,
                    body: n,
                    tasklistBlocksOperation: a,
                    bodyVersion: s,
                },
                onCompleted: i,
                onError: t,
                withOptimisticResponse: r = !1,
            }) {
                return (0, N.commitMutation)(e, {
                    mutation: lG,
                    optimisticResponse: r
                        ? {
                              updateIssue: {
                                  issue: {
                                      id: l,
                                      body: n,
                                      bodyVersion: s,
                                      bodyHTML: em(n),
                                      lastEditedAt: new Date().toISOString(),
                                      viewerCanReadUserContentEdits: !0,
                                      lastUserContentEdit: null,
                                      __isComment: "Issue",
                                  },
                              },
                          }
                        : void 0,
                    variables: {
                        input: {
                            id: l,
                            body: n,
                            tasklistBlocksOperation: a,
                            bodyVersion: s,
                        },
                    },
                    onCompleted: (e) => i && i(e),
                    onError: (e) => t && t(e),
                });
            }
            lG.hash = "27df1ecd4ef284768c3bd4ba7f514d94";
            let lX = {
                    IssueBody: "IssueBodyViewer-module__IssueBody--Zg6Wy",
                    IssueBodyTaskList:
                        "IssueBodyViewer-module__IssueBodyTaskList--xb3uu",
                    IssueBodySubIssueButtonContainer:
                        "IssueBodyViewer-module__IssueBodySubIssueButtonContainer--Mx2W_",
                },
                lJ = Q.lazy(() => Promise.resolve().then(n.bind(n, 19805)));
            function lZ({
                html: e,
                markdown: l,
                comment: n,
                onLinkClick: a,
                issueBodyRef: s,
                bodyVersion: i,
                locked: t,
                viewerCanUpdate: r,
                reactable: u,
                subIssues: o = null,
                insideSidePanel: d,
                repositoryId: c,
                onIssueEditStateChange: m,
            }) {
                let g = (0, N.useRelayEnvironment)(),
                    { safeSetTimeout: y, safeClearTimeout: p } = (0, l$.A)(),
                    k = (0, N.useFragment)(lo, n),
                    b = (0, N.useFragment)(ld, u),
                    h = (0, N.useFragment)(lc, o),
                    f = lH(h),
                    K = lO(h) && h && !f,
                    S = (0, Q.useCallback)(
                        (e, l, n) => {
                            lY({
                                environment: g,
                                input: {
                                    issueId: k.id,
                                    body: e,
                                    bodyVersion: i,
                                },
                                onCompleted: l,
                                onError: n,
                            });
                        },
                        [i, g, k.id]
                    ),
                    { addToast: I } = (0, M.Y6)(),
                    v = (0, Q.useCallback)(
                        (e, l, n, a = !1) => {
                            let s = null,
                                i = () => {
                                    (l(!1), n?.(), s && p(s));
                                };
                            if (a)
                                return void requestAnimationFrame(() => {
                                    i();
                                });
                            let t = new MutationObserver((l) => {
                                    for (let n of l)
                                        if ("childList" === n.type) {
                                            let l = document.querySelector(
                                                `#checkbox-item-${e}`
                                            );
                                            if (l?.querySelector("a")) {
                                                (t.disconnect(), i());
                                                return;
                                            }
                                        }
                                }),
                                r =
                                    document.getElementById(
                                        "issue-body-viewer"
                                    );
                            if (!r) return void i();
                            (t.observe(r, { childList: !0, subtree: !0 }),
                                (s = y(() => {
                                    (t.disconnect(), i());
                                }, 3e3)));
                        },
                        [y, p]
                    ),
                    L = (0, Q.useCallback)(
                        (e, l, n, a) => {
                            c &&
                                m &&
                                (l(!0),
                                (function ({
                                    environment: e,
                                    input: {
                                        title: l,
                                        repositoryId: n,
                                        parentIssueId: a,
                                        position: s,
                                    },
                                    onError: i,
                                    onCompleted: t,
                                }) {
                                    (0, N.commitMutation)(e, {
                                        mutation: lW,
                                        variables: {
                                            input: {
                                                title: l,
                                                repositoryId: n,
                                                parentIssueId: a,
                                                position: s,
                                            },
                                        },
                                        onError: (e) => i && i(e),
                                        onCompleted: (e) => t && t(e),
                                    });
                                })({
                                    environment: g,
                                    input: {
                                        parentIssueId: k.id,
                                        repositoryId: c,
                                        title: e.title,
                                        position: e.position,
                                    },
                                    onCompleted: () => {
                                        (m?.(!0), v(e.id, l, n));
                                    },
                                    onError: (e) => {
                                        (I({
                                            type: "error",
                                            message: lz.couldNotConvertIssue,
                                        }),
                                            l(!1),
                                            a?.(e));
                                    },
                                }));
                        },
                        [c, m, g, k.id, I, v]
                    ),
                    T = (0, Q.useMemo)(
                        () => (e, n, a, s) => {
                            c &&
                                m &&
                                (n(!0),
                                (function ({
                                    environment: e,
                                    input: {
                                        body: l,
                                        repositoryId: n,
                                        parentIssueId: a,
                                        position: s,
                                    },
                                    onError: i,
                                    onCompleted: t,
                                }) {
                                    (0, N.commitMutation)(e, {
                                        mutation: lQ,
                                        variables: {
                                            input: {
                                                body: l,
                                                repositoryId: n,
                                                parentIssueId: a,
                                                position: s,
                                            },
                                        },
                                        onError: (e) => i && i(e),
                                        onCompleted: (e) => t && t(e),
                                    });
                                })({
                                    environment: g,
                                    input: {
                                        parentIssueId: k.id,
                                        repositoryId: c,
                                        body: l,
                                        position: e.position,
                                    },
                                    onCompleted: () => {
                                        (m?.(!0), v(e.id, n, a, !0));
                                    },
                                    onError: (e) => {
                                        (I({
                                            type: "error",
                                            message: lz.couldNotConvertIssue,
                                        }),
                                            n(!1),
                                            s?.(e));
                                    },
                                }));
                        },
                        [c, m, g, k.id, I, l, v]
                    );
                return (0, F.jsxs)("div", {
                    className: lX.IssueBody,
                    ref: s,
                    id: "issue-body-viewer",
                    "data-testid": "issue-body-viewer",
                    children: [
                        (0, F.jsx)(lk, {
                            html: e,
                            markdown: l,
                            viewerCanUpdate: r,
                            onSave: S,
                            onLinkClick: a,
                            onConvertToIssue: L,
                            onConvertToSubIssue: T,
                        }),
                        (0, F.jsxs)("div", {
                            className: lX.IssueBodyTaskList,
                            children: [
                                K &&
                                    (0, F.jsx)("div", {
                                        className:
                                            lX.IssueBodySubIssueButtonContainer,
                                        children: (0, F.jsx)(lV, {
                                            issue: h,
                                            insideSidePanel: d,
                                        }),
                                    }),
                                (0, F.jsx)(Q.Suspense, {
                                    fallback: (0, F.jsx)(lF.N, {}),
                                    children: (0, F.jsx)(lJ, {
                                        subjectId: k.id,
                                        canReact: (0, le.M3)() && !t,
                                        reactionGroups: b,
                                    }),
                                }),
                            ],
                        }),
                    ],
                });
            }
            try {
                lJ.displayName || (lJ.displayName = "ReactionViewerRelay");
            } catch {}
            try {
                lZ.displayName || (lZ.displayName = "IssueBodyViewer");
            } catch {}
            async function l0(e, l) {
                let {
                    appendItem: a,
                    removeItem: s,
                    removeTasklistBlock: i,
                    updateItemPosition: t,
                    updateItemState: r,
                    updateItemTitle: u,
                    updateTasklistTitle: o,
                } = await Promise.all([
                    n.e(
                        "vendors-node_modules_remark-gfm_lib_index_js-node_modules_remark-parse_lib_index_js-node_modu-44d0fc"
                    ),
                    n.e(
                        "vendors-node_modules_micromark_index_js-node_modules_remark_index_js"
                    ),
                    n.e("packages_tasklist-block-operations_operations_ts"),
                ]).then(n.bind(n, 48271));
                if ("append_item" === l.operation) {
                    if (!/^\s*(https?:|#)/.test(l.value))
                        return a(e, l.position, l.value);
                } else if ("update_item_title" === l.operation)
                    return u(e, l.position, l.value);
                else if ("update_item_state" === l.operation)
                    return r(e, l.position, l.closed);
                else if ("update_item_position" === l.operation)
                    return t(e, l.src, l.dst);
                else if ("remove_item" === l.operation) return s(e, l.position);
                else if ("remove_tasklist_block" === l.operation)
                    return i(e, l.position);
                else if ("update_tasklist_title" === l.operation)
                    return o(e, l.position, l.name);
                return null;
            }
            function l1({
                issue: e,
                secondaryKey: l,
                onLinkClick: n,
                onIssueEditStateChange: a,
                onIssueUpdate: s,
                isIssueEditActive: i,
                onCommentReply: t,
                highlightedEventText: r,
                insideSidePanel: u,
            }) {
                let o = (0, eq.useFragment)(eP, e),
                    {
                        body: d,
                        bodyHTML: c,
                        bodyVersion: m,
                    } = (0, eq.useFragment)(eB, o),
                    g = (0, eq.useFragment)(eE, l),
                    y = o.id,
                    p = o.repository.databaseId,
                    [k, b] = (0, eU.Fo)(
                        e7.t.localStorageKeys.issueNewBody("hyperlist", y),
                        void 0
                    ),
                    [h, f] = (0, Q.useState)(m),
                    [K, S] = (0, Q.useState)(!1),
                    [I, v] = (0, Q.useState)(k || d),
                    [L, T] = (0, Q.useState)(!1),
                    [C, x] = (0, Q.useState)(!1),
                    [R, j] = (0, Q.useState)(!1),
                    [_, E] = (0, Q.useState)(!1),
                    [A, P] = (0, Q.useState)(!1),
                    B = (0, N.useRelayEnvironment)(),
                    D = (0, Q.useRef)(null),
                    { addToast: V } = (0, M.Y6)(),
                    U = (0, Q.useCallback)(
                        (e) => {
                            (v(e), b(e), a?.(!0));
                        },
                        [a, b]
                    );
                ((0, Q.useEffect)(() => {
                    A || (m !== h && f(m));
                }, [m, h, A]),
                    (0, Q.useEffect)(() => {
                        i?.() || T(!1);
                    }, [i, T]));
                let O = (0, Q.useMemo)(
                        () => ({
                            type: "issue",
                            id: { id: o.id, databaseId: o.databaseId },
                            repository: {
                                databaseId: p,
                                nwo: o.repository.nameWithOwner,
                                slashCommandsEnabled:
                                    o.repository.slashCommandsEnabled,
                            },
                        }),
                        [
                            o.databaseId,
                            o.id,
                            o.repository.nameWithOwner,
                            o.repository.slashCommandsEnabled,
                            p,
                        ]
                    ),
                    {
                        viewerRef: q,
                        onStartEdit: H,
                        snapshot: $,
                        isTasklistDirty: z,
                    } = (({
                        id: e,
                        markdown: l,
                        setMarkdown: n,
                        html: a,
                        isEditing: s,
                        bodyVersion: i,
                    }) => {
                        let t = (0, N.useRelayEnvironment)(),
                            r = (0, Q.useRef)(null),
                            [u, o] = (0, Q.useState)(l || ""),
                            d = (0, Q.useRef)(!1),
                            c = (0, Q.useRef)(null),
                            [m, g] = (0, Q.useState)(!1),
                            y = (0, Q.useRef)(null),
                            [p, k] = (0, Q.useState)(a);
                        (0, Q.useEffect)(() => {
                            k("");
                        }, [e]);
                        let F = (0, Q.useCallback)(() => {
                                s ||
                                    m ||
                                    (d.current && !c.current) ||
                                    r.current?.querySelector(
                                        ".is-dirty, .js-tasklist-dragging"
                                    ) ||
                                    r.current?.contains(
                                        document.activeElement
                                    ) ||
                                    k(
                                        (d.current && y.current
                                            ? y.current
                                            : a) ?? ""
                                    );
                            }, [a, s, m]),
                            b = (0, Q.useCallback)(async () => {
                                let e = r.current?.querySelector(
                                    "tracking-block:first-of-type"
                                );
                                if (!e) return;
                                let l = e?.closest(".markdown-body");
                                y.current = l?.innerHTML ?? "";
                            }, []),
                            h = (0, Q.useCallback)(() => {
                                !s && c.current && o(c.current);
                            }, [s]);
                        return (
                            (0, ly.N)(() => {
                                (s ? !m : m) ||
                                    d.current ||
                                    (o(l || ""), n(l || ""));
                            }, [l, s, m, n]),
                            (0, ly.N)(() => {
                                (F(), h());
                            }, [F, h]),
                            (0, Q.useEffect)(() => {
                                let l = r.current;
                                if (!l) return;
                                let a = async (l) => {
                                        let { detail: n } = l;
                                        (l.preventDefault(),
                                            (d.current = !1),
                                            (c.current = null),
                                            g(!0));
                                        let {
                                            payload: a,
                                            resolve: s,
                                            reject: r,
                                        } = n;
                                        (lY({
                                            environment: t,
                                            input: {
                                                issueId: e,
                                                body: u,
                                                tasklistBlocksOperation: a,
                                                bodyVersion: i,
                                            },
                                            onCompleted: () => {
                                                (s(), g(!1));
                                            },
                                            onError: (e) => {
                                                (r(e), g(!1));
                                            },
                                        }),
                                            (y.current = null));
                                    },
                                    s = async (e) => {
                                        let { detail: l } = e,
                                            {
                                                payload: a,
                                                resolve: s,
                                                reject: i,
                                            } = l;
                                        try {
                                            let e = await l0(u, a),
                                                l = !1;
                                            (null != e
                                                ? ((l = !0),
                                                  o(e),
                                                  n(e),
                                                  (c.current = e))
                                                : (o(u), n(u), (c.current = u)),
                                                (d.current = !0),
                                                s(l));
                                        } catch (e) {
                                            i(e);
                                        }
                                    };
                                return (
                                    l.addEventListener(
                                        "tracking-block:update",
                                        a
                                    ),
                                    l.addEventListener(
                                        "tracking-block:operation",
                                        s
                                    ),
                                    () => {
                                        (l.removeEventListener(
                                            "tracking-block:update",
                                            a
                                        ),
                                            l.removeEventListener(
                                                "tracking-block:operation",
                                                s
                                            ));
                                    }
                                );
                            }, [u, t, e, n, s, i]),
                            {
                                viewerRef: r,
                                onStartEdit: b,
                                snapshot: p,
                                isTasklistDirty: d.current,
                            }
                        );
                    })({
                        id: y,
                        markdown: I,
                        setMarkdown: v,
                        html: c,
                        isEditing: A,
                        bodyVersion: h,
                    }),
                    W = $.length > 0 ? $ : c;
                ((0, Q.useEffect)(() => {
                    if (!R && !L && !z)
                        return (
                            _ || v(d),
                            () => {
                                (S(!1), a?.(!1));
                            }
                        );
                }, [L, R, z, d, a, _]),
                    (0, Q.useEffect)(() => T(!1), [y, T]),
                    (0, Q.useEffect)(() => {
                        (P(L), L && H());
                    }, [L, H]));
                let G = (0, Q.useCallback)(() => {
                        let e = k || I,
                            l = ec(e);
                        (l ? (T(!1), x(!0)) : j(!0),
                            lY({
                                environment: B,
                                input: { issueId: y, body: e, bodyVersion: h },
                                onError: (e) => {
                                    (x(!1),
                                        V({
                                            type: "error",
                                            message: e.message.startsWith(
                                                ez.staleBodyErrorPrefix
                                            )
                                                ? lz.couldNotUpdateIssueBodyStale
                                                : lz.couldNotUpdateIssueBody,
                                        }),
                                        e.message.startsWith(
                                            ez.staleBodyErrorPrefix
                                        )
                                            ? (T(!0), j(!1))
                                            : a?.(!1),
                                        E(!0));
                                },
                                onCompleted: (e) => {
                                    (x(!1),
                                        e.updateIssue
                                            ? (E(!1),
                                              s?.(),
                                              T(!1),
                                              a?.(!1),
                                              j(!1),
                                              e.updateIssue?.issue &&
                                                  f(
                                                      e.updateIssue.issue
                                                          .bodyVersion
                                                  ),
                                              b(void 0))
                                            : (V({
                                                  type: "error",
                                                  message:
                                                      lz.couldNotUpdateIssueBody,
                                              }),
                                              T(!0),
                                              j(!1),
                                              E(!0)));
                                },
                                withOptimisticResponse: l,
                            }));
                    }, [B, y, k, I, h, V, a, s, b]),
                    Y = (0, Q.useMemo)(
                        () => !!r && r === `#issue-${o.databaseId}`,
                        [r, o.databaseId]
                    ),
                    X = (0, Q.useMemo)(
                        () =>
                            Y
                                ? {
                                      border: "1px solid",
                                      borderColor: "accent.fg",
                                      borderRadius: "6px",
                                      boxShadow:
                                          "0px 0px 0px 1px var(--fgColor-accent, var(--color-accent-fg))",
                                  }
                                : {},
                        [Y]
                    ),
                    J = `${o.url}#issue-${o.databaseId}`,
                    {
                        avatarUrl: Z,
                        login: ee,
                        profileUrl: el,
                    } = o.author ?? e7.t.ghost,
                    en = (0, Q.useCallback)((e) => e?.node?.bodyHTML, []);
                return (0, F.jsxs)(eO.az, {
                    sx: { display: "flex", gap: 3 },
                    children: [
                        (0, F.jsx)(ek.A, {
                            href: el ?? void 0,
                            "data-hovercard-url":
                                el && (0, eg.dCN)({ owner: ee }),
                            "aria-label": `@${ee}'s profile`,
                            className: `${el ? eD.A.avatarLink : eD.A.avatarWithoutLink} ${eD.A.avatarOuter}`,
                            children: (0, F.jsx)(w.r, {
                                src: Z,
                                size: 40,
                                alt: `@${ee}`,
                                className: eD.A.issueViewerAvatar,
                            }),
                        }),
                        (0, F.jsxs)(eO.az, {
                            ref: q,
                            sx: {
                                flexGrow: 1,
                                order: [1, 1, 1, 1, 0],
                                video: { aspectRatio: "16/9", width: "100%" },
                                minWidth: 0,
                                ...X,
                            },
                            "data-testid": eW.Y.issueBody,
                            className: "react-issue-body",
                            "data-hpc": !0,
                            children: [
                                (0, F.jsx)("h2", {
                                    className: "sr-only",
                                    children: ez.issueBodyHeader,
                                }),
                                (0, F.jsx)(eO.az, {
                                    sx: {
                                        display: "flex",
                                        flexDirection: "row",
                                        gap: 2,
                                    },
                                    children: (0, F.jsx)(eO.az, {
                                        sx: {
                                            border: "1px solid",
                                            borderColor: o.viewerDidAuthor
                                                ? "accent.muted"
                                                : "border.default",
                                            borderRadius: 2,
                                            flexGrow: 1,
                                            width: "100%",
                                            minWidth: 0,
                                        },
                                        children:
                                            A || R || _
                                                ? (0, F.jsxs)(F.Fragment, {
                                                      children: [
                                                          (0, F.jsx)(lu, {
                                                              comment: o,
                                                              url: J,
                                                              secondaryKey: l,
                                                              secondaryKeyIssue:
                                                                  l,
                                                          }),
                                                          (0, F.jsx)(eO.az, {
                                                              sx: { m: 2 },
                                                              children: (0,
                                                              F.jsx)(eG, {
                                                                  editorDisabled:
                                                                      R,
                                                                  trailingIcon:
                                                                      !R,
                                                                  subjectId: y,
                                                                  subject: O,
                                                                  body: _
                                                                      ? I
                                                                      : k || I,
                                                                  bodyIsStale:
                                                                      K,
                                                                  onChange: U,
                                                                  onCancel:
                                                                      () => {
                                                                          (T(
                                                                              !1
                                                                          ),
                                                                              v(
                                                                                  d
                                                                              ),
                                                                              b(
                                                                                  void 0
                                                                              ),
                                                                              a?.(
                                                                                  !1
                                                                              ),
                                                                              f(
                                                                                  m
                                                                              ));
                                                                      },
                                                                  onCommit:
                                                                      () => {
                                                                          G();
                                                                      },
                                                              }),
                                                          }),
                                                      ],
                                                  })
                                                : (0, F.jsxs)(F.Fragment, {
                                                      children: [
                                                          (0, F.jsx)(lu, {
                                                              comment: o,
                                                              url: J,
                                                              actionProps: {
                                                                  viewerCanUpdate:
                                                                      o.viewerCanUpdateNext ||
                                                                      !1,
                                                                  startIssueBodyEdit:
                                                                      () => {
                                                                          T(!0);
                                                                      },
                                                                  url: J,
                                                                  issueBodyRef:
                                                                      D,
                                                                  onReplySelect:
                                                                      (e) => {
                                                                          t(
                                                                              e ||
                                                                                  (0,
                                                                                  eM.s)(
                                                                                      d
                                                                                  )
                                                                          );
                                                                      },
                                                                  viewerCanReport:
                                                                      g?.viewerCanReport ??
                                                                      !1,
                                                                  viewerCanReportToMaintainer:
                                                                      g?.viewerCanReportToMaintainer ??
                                                                      !1,
                                                                  issueId: o.id,
                                                                  owner: o
                                                                      .repository
                                                                      .owner
                                                                      .login,
                                                                  ownerId:
                                                                      o
                                                                          .repository
                                                                          .owner
                                                                          .id,
                                                                  ownerUrl:
                                                                      o
                                                                          .repository
                                                                          .owner
                                                                          .url,
                                                                  viewerCanBlockFromOrg:
                                                                      g?.viewerCanBlockFromOrg ??
                                                                      !1,
                                                                  viewerCanUnblockFromOrg:
                                                                      g?.viewerCanUnblockFromOrg ??
                                                                      !1,
                                                                  pendingBlock:
                                                                      o.pendingBlock ??
                                                                      void 0,
                                                                  pendingUnblock:
                                                                      o.pendingUnblock ??
                                                                      void 0,
                                                                  isDisabled: C,
                                                              },
                                                              secondaryKey: l,
                                                              secondaryKeyIssue:
                                                                  l,
                                                          }),
                                                          (0, F.jsx)(eV, {
                                                              bodyHTML: W,
                                                              bodyRef: D,
                                                              id: y,
                                                              query: eA,
                                                              getHTML: en,
                                                              children: (0,
                                                              F.jsx)(lZ, {
                                                                  html: W,
                                                                  markdown: d,
                                                                  markdownViewerRef:
                                                                      q,
                                                                  comment: o,
                                                                  onLinkClick:
                                                                      n,
                                                                  issueBodyRef:
                                                                      D,
                                                                  bodyVersion:
                                                                      h,
                                                                  locked: o.locked,
                                                                  reactable: o,
                                                                  viewerCanUpdate:
                                                                      o.viewerCanUpdateNext ||
                                                                      !1,
                                                                  subIssues: o,
                                                                  insideSidePanel:
                                                                      u,
                                                                  repositoryId:
                                                                      o
                                                                          .repository
                                                                          .id,
                                                                  onIssueEditStateChange:
                                                                      a,
                                                              }),
                                                          }),
                                                      ],
                                                  }),
                                    }),
                                }),
                            ],
                        }),
                    ],
                });
            }
            try {
                l1.displayName || (l1.displayName = "IssueBody");
            } catch {}
            var l2 = n(34267),
                l4 = n(75202),
                l6 = n(13017),
                l5 = n(76873);
            let l7 = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    i = [
                        e,
                        l,
                        n,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        a,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanUpdate",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "hasReachedItemsLimit",
                            storageKey: null,
                        },
                        s,
                    ],
                    t = [
                        e,
                        l,
                        n,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "dueOn",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "progressPercentage",
                            storageKey: null,
                        },
                        a,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closedAt",
                            storageKey: null,
                        },
                    ];
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: null,
                                cursor: null,
                                direction: "forward",
                                path: ["projectItemsNext"],
                            },
                        ],
                    },
                    name: "SubIssuesCreateDialog",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "name",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: "projectItemsNext",
                            args: null,
                            concreteType: "ProjectV2ItemConnection",
                            kind: "LinkedField",
                            name: "__ProjectSection_projectItemsNext_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "ProjectV2ItemEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "ProjectV2Item",
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "ProjectV2",
                                                    kind: "LinkedField",
                                                    name: "project",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            kind: "InlineDataFragmentSpread",
                                                            name: "ProjectPickerProject",
                                                            selections: i,
                                                            args: null,
                                                            argumentDefinitions:
                                                                [],
                                                        },
                                                        {
                                                            kind: "InlineDataFragmentSpread",
                                                            name: "ProjectPickerRelay",
                                                            selections: i,
                                                            args: null,
                                                            argumentDefinitions:
                                                                [],
                                                        },
                                                        n,
                                                    ],
                                                    storageKey: null,
                                                },
                                                s,
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                {
                                    kind: "InlineDataFragmentSpread",
                                    name: "MilestonePickerMilestone",
                                    selections: t,
                                    args: null,
                                    argumentDefinitions: [],
                                },
                                {
                                    kind: "InlineDataFragmentSpread",
                                    name: "ItemPickerMilestoneRelayMilestone",
                                    selections: t,
                                    args: null,
                                    argumentDefinitions: [],
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            l7.hash = "83d1f47cd3e112f4c2ae20d9ec3140fe";
            var l3 = n(59464),
                l8 = n(58115),
                l9 = n(98828);
            function ne({ issue: e, open: l, setOpen: n, onCreateSuccess: a }) {
                let { alert: s, resetAlert: i, showServerAlert: t } = lD(),
                    r = (0, lC.X)(),
                    u = (0, N.useFragment)(l7, e),
                    o = (0, Q.useCallback)((e) => t(e), [t]),
                    d = (0, Q.useMemo)(
                        () =>
                            (u.projectItemsNext?.edges ?? [])
                                .flatMap((e) => (e?.node ? [e.node] : []))
                                .filter((e) => !0 !== e.project.closed)
                                .map((e) => (0, l8.Kx)(e.project)),
                        [u.projectItemsNext?.edges]
                    ),
                    c = (0, Q.useMemo)(
                        () => (u.milestone ? (0, l9.Hf)(u.milestone) : void 0),
                        [u.milestone]
                    ),
                    m = {
                        navigate: lB.l,
                        onCreateSuccess: a,
                        onCreateError: o,
                        isCreateDialogOpen: l,
                        setIsCreateDialogOpen: n,
                        optionConfig: {
                            useMonospaceFont:
                                r?.current_user_settings?.use_monospace_font ??
                                !1,
                            scopedOrganization: u.repository.owner.login,
                            issueCreateArguments: {
                                repository: {
                                    owner: u.repository.owner.login,
                                    name: u.repository.name,
                                },
                                parentIssue: { id: u.id },
                                initialValues: { projects: d, milestone: c },
                            },
                        },
                    };
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        s &&
                            (0, F.jsx)(lE, {
                                title: s.title,
                                onClose: i,
                                children: s.body,
                            }),
                        (0, F.jsx)(l3.or, { ...m }),
                    ],
                });
            }
            try {
                ne.displayName || (ne.displayName = "SubIssuesCreateDialog");
            } catch {}
            let nl = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SubIssuesList",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SubIssuesListView",
                    },
                    {
                        args: [
                            {
                                kind: "Literal",
                                name: "fetchSubIssues",
                                value: !0,
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "AddSubIssueButtonGroup",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            nl.hash = "5392781363d352b5a0f552def559897f";
            let nn = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "SubIssuesListView",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "name",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: [
                                { kind: "Literal", name: "first", value: 100 },
                            ],
                            concreteType: "IssueConnection",
                            kind: "LinkedField",
                            name: "subIssues",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Issue",
                                    kind: "LinkedField",
                                    name: "nodes",
                                    plural: !0,
                                    selections: [
                                        e,
                                        {
                                            args: null,
                                            kind: "FragmentSpread",
                                            name: "SubIssuesListItem",
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: "subIssues(first:100)",
                        },
                        {
                            args: [
                                {
                                    kind: "Literal",
                                    name: "fetchSubIssues",
                                    value: !0,
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "useSubIssuesSummary",
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            nn.hash = "6a5e26b8bec2269872e5e2a9597f5c2a";
            var na = n(15106),
                ns = n(46036),
                ni = n(43063),
                nt = n(56742),
                nr = n(90928);
            let nu = {
                progressIcon: "CompletionPill-module__progressIcon--eChof",
                hoverExpandIcon:
                    "CompletionPill-module__hoverExpandIcon--AnG85",
                completionPill: "CompletionPill-module__completionPill--uW8S9",
                expandOnHover: "CompletionPill-module__expandOnHover--UR1nV",
            };
            var no = n(28755),
                nd = n(74142);
            function nc({
                progress: { total: e, completed: l, percentCompleted: n },
                ...a
            }) {
                let { pluralUnits: s } = (0, no.c)(),
                    i = (0, nd.s)(),
                    t = a.href,
                    r = `${l} of ${e} ${s} completed`;
                return (
                    (0, Q.useEffect)(() => {
                        i && i.setCompletion(r);
                    }, [i, r]),
                    (0, F.jsx)(nr.A, {
                        leadingVisual: () =>
                            (0, F.jsx)(nt.a, {
                                percentCompleted: n,
                                size: 14,
                                svgClassName: nu.progressIcon,
                            }),
                        ...(0, ep.G)("nested-list-view-completion-pill"),
                        text: (0, F.jsxs)(F.Fragment, {
                            children: [
                                (0, F.jsx)("span", {
                                    ...(0, ep.G)(
                                        "nested-list-view-completion-text"
                                    ),
                                    "aria-hidden": "true",
                                    children: `${l} of ${e}`,
                                }),
                                (0, F.jsx)("span", {
                                    ...(0, ep.G)(
                                        "nested-list-view-completion-text-sr"
                                    ),
                                    className: "sr-only",
                                    children: r,
                                }),
                                t &&
                                    (0, F.jsx)(W.A, {
                                        icon: V.TriangleRightIcon,
                                        className: nu.hoverExpandIcon,
                                        "aria-hidden": "true",
                                        ...(0, ep.G)(
                                            "nested-list-view-clickable-svg"
                                        ),
                                    }),
                            ],
                        }),
                        ...a,
                        as: a.href ? "a" : "span",
                        className: (0, eb.$)(
                            nu.completionPill,
                            t && nu.expandOnHover,
                            a.className
                        ),
                    })
                );
            }
            try {
                nc.displayName ||
                    (nc.displayName = "NestedListViewCompletionPill");
            } catch {}
            var nm = n(81070),
                ng = n(28199);
            let ny = (function () {
                var e = [
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "fetchSubIssues",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [{ kind: "Variable", name: "id", variableName: "id" }],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            r,
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [n, u, a],
                                storageKey: null,
                            },
                            a,
                        ],
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "issueType",
                        plural: !1,
                        selections: [
                            a,
                            r,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "color",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        concreteType: "SubIssuesSummary",
                        kind: "LinkedField",
                        name: "subIssuesSummary",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "total",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "completed",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    },
                    F = [k];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "SubIssuesListItem_NestedSubIssuesQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "fetchSubIssues",
                                                variableName: "fetchSubIssues",
                                            },
                                        ],
                                        kind: "FragmentSpread",
                                        name: "SubIssuesListItem_NestedSubIssues",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "SubIssuesListItem_NestedSubIssuesQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    n,
                                    a,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            s,
                                            i,
                                            t,
                                            o,
                                            d,
                                            c,
                                            m,
                                            g,
                                            y,
                                            {
                                                condition: "fetchSubIssues",
                                                kind: "Condition",
                                                passingValue: !1,
                                                selections: [p],
                                            },
                                            {
                                                condition: "fetchSubIssues",
                                                kind: "Condition",
                                                passingValue: !0,
                                                selections: [
                                                    {
                                                        alias: "subIssuesConnection",
                                                        args: null,
                                                        concreteType:
                                                            "IssueConnection",
                                                        kind: "LinkedField",
                                                        name: "subIssues",
                                                        plural: !1,
                                                        selections: F,
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: [
                                                            {
                                                                kind: "Literal",
                                                                name: "first",
                                                                value: 100,
                                                            },
                                                        ],
                                                        concreteType:
                                                            "IssueConnection",
                                                        kind: "LinkedField",
                                                        name: "subIssues",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Issue",
                                                                kind: "LinkedField",
                                                                name: "nodes",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "closed",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    a,
                                                                    d,
                                                                    c,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "IssueDependenciesSummary",
                                                                        kind: "LinkedField",
                                                                        name: "issueDependenciesSummary",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "blockedBy",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: [
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "first",
                                                                                value: 10,
                                                                            },
                                                                        ],
                                                                        concreteType:
                                                                            "UserConnection",
                                                                        kind: "LinkedField",
                                                                        name: "assignees",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                k,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "UserEdge",
                                                                                    kind: "LinkedField",
                                                                                    name: "edges",
                                                                                    plural: !0,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "User",
                                                                                                kind: "LinkedField",
                                                                                                name: "node",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        a,
                                                                                                        u,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "avatarUrl",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            "assignees(first:10)",
                                                                    },
                                                                    s,
                                                                    o,
                                                                    i,
                                                                    t,
                                                                    m,
                                                                    g,
                                                                    y,
                                                                    p,
                                                                    {
                                                                        alias: null,
                                                                        args: [
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "first",
                                                                                value: 0,
                                                                            },
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "includeClosedPrs",
                                                                                value: !0,
                                                                            },
                                                                        ],
                                                                        concreteType:
                                                                            "PullRequestConnection",
                                                                        kind: "LinkedField",
                                                                        name: "closedByPullRequestsReferences",
                                                                        plural: !1,
                                                                        selections:
                                                                            F,
                                                                        storageKey:
                                                                            "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey:
                                                            "subIssues(first:100)",
                                                    },
                                                ],
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "9943e59acbe11bcc2f2fe3ff92232141",
                        metadata: {},
                        name: "SubIssuesListItem_NestedSubIssuesQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            ny.hash = "f55cabab95316ca4ae20ff30393a32eb";
            let np = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: !1,
                            kind: "LocalArgument",
                            name: "fetchSubIssues",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        refetch: {
                            connection: null,
                            fragmentPathInResult: ["node"],
                            operation: ny,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "SubIssuesListItem_NestedSubIssues",
                    selections: [
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "fetchSubIssues",
                                    variableName: "fetchSubIssues",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "SubIssueTitle",
                        },
                        {
                            condition: "fetchSubIssues",
                            kind: "Condition",
                            passingValue: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "SubIssuesSummary",
                                    kind: "LinkedField",
                                    name: "subIssuesSummary",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "total",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        {
                            condition: "fetchSubIssues",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: "subIssuesConnection",
                                    args: null,
                                    concreteType: "IssueConnection",
                                    kind: "LinkedField",
                                    name: "subIssues",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "totalCount",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Literal",
                                            name: "first",
                                            value: 100,
                                        },
                                    ],
                                    concreteType: "IssueConnection",
                                    kind: "LinkedField",
                                    name: "subIssues",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "nodes",
                                            plural: !0,
                                            selections: [
                                                e,
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "SubIssuesListItem",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: "subIssues(first:100)",
                                },
                            ],
                        },
                        e,
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            np.hash = "f55cabab95316ca4ae20ff30393a32eb";
            let nk = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "SubIssuesListItem",
                    selections: [
                        e,
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "SubIssueStateIcon",
                        },
                        {
                            alias: null,
                            args: [
                                { kind: "Literal", name: "first", value: 10 },
                            ],
                            concreteType: "UserConnection",
                            kind: "LinkedField",
                            name: "assignees",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "totalCount",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "UserEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "User",
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                e,
                                                l,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "avatarUrl",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: "assignees(first:10)",
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "name",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [l],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            args: [
                                {
                                    kind: "Literal",
                                    name: "fetchSubIssues",
                                    value: !1,
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "SubIssuesListItem_NestedSubIssues",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "ClosedByPullRequestsReferences",
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            nk.hash = "952243a95ff6bb14a888fc60d18a1134";
            var nF = n(66457);
            let nb = {
                    container: "Metadata-module__container--fKWJM",
                    primary: "Metadata-module__primary--kNM7s",
                    secondary: "Metadata-module__secondary--xki9B",
                    alignRight: "Metadata-module__alignRight--DDxqM",
                },
                nh = ({
                    children: e,
                    alignment: l,
                    variant: n,
                    className: a,
                    ...s
                }) =>
                    (0, F.jsx)("div", {
                        className: (0, eb.$)(
                            "listitem-metadata",
                            nb.container,
                            "primary" === n ? nb.primary : nb.secondary,
                            "right" === l && nb.alignRight,
                            a
                        ),
                        ...(0, ep.G)("nested-list-view-item-metadata-item"),
                        ...s,
                        children: e,
                    });
            try {
                nh.displayName || (nh.displayName = "NestedListItemMetadata");
            } catch {}
            var nf = n(81817),
                nK = n(921),
                nS = n(82082);
            let nI = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = [n],
                    s = {
                        alias: null,
                        args: [{ kind: "Literal", name: "first", value: 100 }],
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "subIssues",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "Issue",
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: a,
                                storageKey: null,
                            },
                        ],
                        storageKey: "subIssues(first:100)",
                    },
                    i = {
                        alias: null,
                        args: null,
                        concreteType: "Issue",
                        kind: "LinkedField",
                        name: "subIssue",
                        plural: !1,
                        selections: [
                            n,
                            {
                                alias: null,
                                args: null,
                                concreteType: "Issue",
                                kind: "LinkedField",
                                name: "parent",
                                plural: !1,
                                selections: a,
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "removeSubIssueMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "RemoveSubIssuePayload",
                                kind: "LinkedField",
                                name: "removeSubIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "SubIssuesListItem",
                                            },
                                            s,
                                        ],
                                        storageKey: null,
                                    },
                                    i,
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "removeSubIssueMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "RemoveSubIssuePayload",
                                kind: "LinkedField",
                                name: "removeSubIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "state",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "stateReason",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "IssueDependenciesSummary",
                                                kind: "LinkedField",
                                                name: "issueDependenciesSummary",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "blockedBy",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 10,
                                                    },
                                                ],
                                                concreteType: "UserConnection",
                                                kind: "LinkedField",
                                                name: "assignees",
                                                plural: !1,
                                                selections: [
                                                    t,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "UserEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "User",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    n,
                                                                    r,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "avatarUrl",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "assignees(first:10)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "url",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    u,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "__typename",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            r,
                                                            n,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    n,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "databaseId",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "number",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "title",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "titleHTML",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: [
                                                    n,
                                                    u,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "color",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "SubIssuesSummary",
                                                kind: "LinkedField",
                                                name: "subIssuesSummary",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "total",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "completed",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 0,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "includeClosedPrs",
                                                        value: !0,
                                                    },
                                                ],
                                                concreteType:
                                                    "PullRequestConnection",
                                                kind: "LinkedField",
                                                name: "closedByPullRequestsReferences",
                                                plural: !1,
                                                selections: [t],
                                                storageKey:
                                                    "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                                            },
                                            s,
                                        ],
                                        storageKey: null,
                                    },
                                    i,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "a6735256121a21650fb892cad79c1c63",
                        metadata: {},
                        name: "removeSubIssueMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function nv({
                environment: e,
                input: l,
                onError: n,
                onCompleted: a,
            }) {
                return (0, N.commitMutation)(e, {
                    mutation: nI,
                    variables: { input: l },
                    onError: (e) => n && n(e),
                    onCompleted: (e) => a && a(e),
                });
            }
            nI.hash = "3e41422515e6f86a4588c5f1e596869e";
            var nL = n(58321),
                nT = n(40260);
            function nC({ textToCopy: e, children: l, ...n }) {
                let a = (0, Q.useCallback)(async () => {
                    await (0, nT.D)(e);
                }, [e]);
                return (0, F.jsxs)(H.l.Item, {
                    onSelect: a,
                    ...n,
                    children: [
                        (0, F.jsx)(H.l.LeadingVisual, {
                            children: (0, F.jsx)(V.CopyIcon, {}),
                        }),
                        l,
                    ],
                });
            }
            try {
                nC.displayName ||
                    (nC.displayName = "ActionListItemCopyToClipboard");
            } catch {}
            function nx({ issueId: e, subIssueId: l, subIssueUrl: n }) {
                let a = (0, N.useRelayEnvironment)(),
                    { addToast: s } = (0, M.Y6)(),
                    i = (0, Q.useCallback)(() => {
                        nv({
                            environment: a,
                            input: { issueId: e, subIssueId: l },
                            onError: (e) => {
                                s({ type: "error", message: e.message });
                            },
                        });
                    }, [a, e, l, s]);
                return (0, F.jsx)(nL.o, {
                    staticMenuActions: [
                        {
                            key: "copy",
                            render: () =>
                                (0, F.jsx)(nC, {
                                    textToCopy: n,
                                    children: "Copy link",
                                }),
                        },
                        {
                            key: "remove",
                            render: () =>
                                (0, F.jsxs)(H.l.Item, {
                                    role: "menuitem",
                                    as: "button",
                                    variant: "danger",
                                    "aria-label": "Remove sub-issue",
                                    onSelect: i,
                                    children: [
                                        (0, F.jsx)(H.l.LeadingVisual, {
                                            children: (0, F.jsx)(
                                                V.TrashIcon,
                                                {}
                                            ),
                                        }),
                                        "Remove sub-issue",
                                    ],
                                }),
                        },
                    ],
                });
            }
            try {
                nx.displayName || (nx.displayName = "SubIssuesActionBar");
            } catch {}
            let nR = ({ owner: e, repo: l }, n, a) => {
                    if (!e || !l) return "";
                    let s = `/${e}/${l}/issues`;
                    if (!n || !a) return s;
                    a = a.includes(" ") ? `"${a}"` : a;
                    let i = encodeURIComponent(`${n}:${a}`);
                    return `${s}?q=${i}`;
                },
                nN = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "SubIssueStateIcon",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "stateReason",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "IssueDependenciesSummary",
                            kind: "LinkedField",
                            name: "issueDependenciesSummary",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "blockedBy",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            nN.hash = "98b73e2943e6e0438220762134149de5";
            var nj = n(85391);
            let n_ = { NOT_PLANNED: "NOT_PLANNED", DUPLICATE: "DUPLICATE" },
                nw = { CLOSED: "CLOSED" },
                nE = {
                    COMPLETED: "completed",
                    NOT_PLANNED: "not planned",
                    DUPLICATE: "duplicate",
                    REOPENED: "reopened",
                },
                nA = {
                    COMPLETED:
                        "is:issue state:closed archived:false reason:completed",
                    NOT_PLANNED:
                        "is:issue state:closed archived:false reason:not-planned",
                    DUPLICATE:
                        "is:issue state:closed archived:false reason:duplicate",
                    REOPENED: "",
                },
                nP = {
                    OPEN: ({ className: e = "", ...l }) =>
                        (0, F.jsx)(V.IssueOpenedIcon, {
                            "aria-label": "Open",
                            ...l,
                            className: `fgColor-open ${e}`,
                        }),
                    COMPLETED: ({ className: e = "", ...l }) =>
                        (0, F.jsx)(V.IssueClosedIcon, {
                            "aria-label": "Completed",
                            ...l,
                            className: `fgColor-done ${e}`,
                        }),
                    NOT_PLANNED: ({ className: e = "", ...l }) =>
                        (0, F.jsx)(V.SkipIcon, {
                            "aria-label": "Not planned",
                            ...l,
                            className: `fgColor-muted ${e}`,
                        }),
                    DUPLICATE: ({ className: e = "", ...l }) =>
                        (0, F.jsx)(V.SkipIcon, {
                            "aria-label": "Duplicate",
                            ...l,
                            className: `fgColor-muted ${e}`,
                        }),
                },
                nB = {
                    MERGED: ({ className: e = "", ...l }) =>
                        (0, F.jsx)(V.GitMergeIcon, {
                            "aria-label": "Merged",
                            ...l,
                            className: `fgColor-done ${e}`,
                        }),
                    IN_MERGE_QUEUE: ({ className: e = "", ...l }) =>
                        (0, F.jsx)(V.GitMergeQueueIcon, {
                            "aria-label": "In merge queue",
                            ...l,
                            className: `fgColor-attention ${e}`,
                        }),
                    OPEN: ({ className: e = "", ...l }) =>
                        (0, F.jsx)(V.GitPullRequestIcon, {
                            "aria-label": "Open",
                            ...l,
                            className: `fgColor-open ${e}`,
                        }),
                    CLOSED: ({ className: e = "", ...l }) =>
                        (0, F.jsx)(V.GitPullRequestClosedIcon, {
                            "aria-label": "Closed",
                            ...l,
                            className: `fgColor-closed ${e}`,
                        }),
                    DRAFT: ({ className: e = "", ...l }) =>
                        (0, F.jsx)(V.GitPullRequestDraftIcon, {
                            "aria-label": "Draft",
                            ...l,
                            className: `fgColor-muted ${e}`,
                        }),
                };
            function nD({ state: e, stateReason: l, options: n }) {
                let a = (0, Q.useMemo)(() => {
                        switch (`${e}${n?.longText ? " long" : ""}`) {
                            case "OPEN":
                            case "OPEN long":
                                return "Open";
                            case "CLOSED long":
                                let a = "Closed";
                                return "NOT_PLANNED" === l
                                    ? `${a} as not planned`
                                    : "DUPLICATE" === l
                                      ? `${a} as duplicate`
                                      : a;
                            case "CLOSED":
                                return "NOT_PLANNED" === l
                                    ? "Not planned"
                                    : "DUPLICATE" === l
                                      ? "Duplicate"
                                      : "Closed";
                            default:
                                return "";
                        }
                    }, [e, n?.longText, l]),
                    s = (0, Q.useMemo)(() => {
                        switch (e) {
                            case "OPEN":
                                return "issueOpened";
                            case "CLOSED":
                                return "NOT_PLANNED" === l || "DUPLICATE" === l
                                    ? "issueClosedNotPlanned"
                                    : "issueClosed";
                            default:
                                return "issueClosed";
                        }
                    }, [e, l]),
                    i = (0, Q.useCallback)(() => {
                        let e = { stateChangeQuery: "", stateReasonString: "" };
                        if (l) {
                            if (l in nA) e.stateChangeQuery = nA[l];
                            else throw Error(`Invalid state change: ${l}`);
                            if (l in nE) e.stateReasonString = nE[l];
                            else throw Error(`Invalid state change: ${l}`);
                        }
                        return e;
                    }, [l]),
                    t = (0, Q.useMemo)(
                        () =>
                            l === n_.NOT_PLANNED || l === n_.DUPLICATE
                                ? "var(--fgColor-muted)"
                                : "var(--fgColor-done)",
                        [l]
                    );
                return {
                    stateString: a,
                    stateStatus: s,
                    getStateQuery: i,
                    issueStateColor: t,
                    issueStateTimelineIcon: (0, Q.useMemo)(
                        () =>
                            l === n_.NOT_PLANNED || l === n_.DUPLICATE
                                ? V.CircleSlashIcon
                                : V.CheckCircleIcon,
                        [l]
                    ),
                    sourceIcon: (0, Q.useCallback)(
                        (n, a, s) =>
                            "Issue" === n
                                ? null == l || "REOPENED" === l
                                    ? nP.OPEN
                                    : l in nP
                                      ? nP[l]
                                      : V.SkipIcon
                                : a && "OPEN" === e
                                  ? nB.DRAFT
                                  : s
                                    ? nB.IN_MERGE_QUEUE
                                    : null == e
                                      ? nB.OPEN
                                      : e in nB
                                        ? nB[e]
                                        : V.SkipIcon,
                        [e, l]
                    ),
                };
            }
            var nM = n(91747);
            let nV = {
                    blockedIssueIconWrapper:
                        "SubIssueStateIcon-module__blockedIssueIconWrapper--NFWXN",
                    issueIcon: "SubIssueStateIcon-module__issueIcon--Hz8pH",
                    blockedIcon: "SubIssueStateIcon-module__blockedIcon--Fwfr_",
                },
                nU = () =>
                    (0, F.jsxs)("svg", {
                        "aria-hidden": "true",
                        className: nV.blockedIcon,
                        width: "12",
                        height: "12",
                        viewBox: "0 0 12 12",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [
                            (0, F.jsx)("path", {
                                fillRule: "evenodd",
                                clipRule: "evenodd",
                                d: "M3.79164 1.13729C3.87955 1.04939 3.99877 1 4.12309 1L7.87691 1C8.00123 1 8.12045 1.04939 8.20836 1.13729L10.8627 3.79164C10.9506 3.87955 11 3.99877 11 4.12309V7.87691C11 8.00123 10.9506 8.12045 10.8627 8.20836L8.20836 10.8627C8.12045 10.9506 8.00123 11 7.87691 11H4.1231C3.99877 11 3.87955 10.9506 3.79164 10.8627L1.13729 8.20836C1.04939 8.12045 1 8.00123 1 7.87691L1 4.1231C1 3.99877 1.04939 3.87955 1.13729 3.79164L3.79164 1.13729ZM4.31726 1.9375L1.9375 4.31726L1.9375 7.68274L4.31726 10.0625H7.68274L10.0625 7.68274V4.31726L7.68274 1.9375L4.31726 1.9375Z",
                                fill: "#CF222E",
                            }),
                            (0, F.jsx)("path", {
                                d: "M3.79164 5.67178C3.79164 5.46467 3.95953 5.29678 4.16664 5.29678H7.82984C8.03692 5.29678 8.20484 5.46467 8.20484 5.67178V6.35012C8.20484 6.55723 8.03692 6.72512 7.82984 6.72512H4.16664C3.95953 6.72512 3.79164 6.55723 3.79164 6.35012V5.67178Z",
                                fill: "#CF222E",
                            }),
                            (0, F.jsx)("path", {
                                fillRule: "evenodd",
                                clipRule: "evenodd",
                                d: "M3.79164 1.13729C3.87955 1.04939 3.99877 1 4.12309 1L7.87691 1C8.00123 1 8.12045 1.04939 8.20836 1.13729L10.8627 3.79164C10.9506 3.87955 11 3.99877 11 4.12309V7.87691C11 8.00123 10.9506 8.12045 10.8627 8.20836L8.20836 10.8627C8.12045 10.9506 8.00123 11 7.87691 11H4.1231C3.99877 11 3.87955 10.9506 3.79164 10.8627L1.13729 8.20836C1.04939 8.12045 1 8.00123 1 7.87691L1 4.1231C1 3.99877 1.04939 3.87955 1.13729 3.79164L3.79164 1.13729ZM4.31726 1.9375L1.9375 4.31726L1.9375 7.68274L4.31726 10.0625H7.68274L10.0625 7.68274V4.31726L7.68274 1.9375L4.31726 1.9375Z",
                                stroke: "#CF222E",
                                strokeWidth: "0.45",
                                strokeLinejoin: "round",
                            }),
                            (0, F.jsx)("path", {
                                d: "M3.79164 5.67178C3.79164 5.46467 3.95953 5.29678 4.16664 5.29678H7.82984C8.03692 5.29678 8.20484 5.46467 8.20484 5.67178V6.35012C8.20484 6.55723 8.03692 6.72512 7.82984 6.72512H4.16664C3.95953 6.72512 3.79164 6.55723 3.79164 6.35012V5.67178Z",
                                stroke: "#CF222E",
                                strokeWidth: "0.45",
                                strokeLinejoin: "round",
                            }),
                        ],
                    });
            function nO({ dataKey: e }) {
                let {
                        state: l,
                        stateReason: n,
                        issueDependenciesSummary: a,
                    } = (0, N.useFragment)(nN, e),
                    { sourceIcon: s } = nD({ state: l, stateReason: n }),
                    { issue_dependencies: i } = (0, nM.h)(),
                    t = s("Issue");
                if (i && l !== nw.CLOSED && a?.blockedBy > 0) {
                    let e = (0, F.jsxs)("div", {
                        className: nV.blockedIssueIconWrapper,
                        children: [
                            (0, F.jsx)(nU, {}),
                            (0, F.jsx)(t, { className: nV.issueIcon }),
                        ],
                    });
                    return (0, F.jsx)(nj.D, {
                        "data-testid": "nested-list-item-state-icon",
                        children: e,
                    });
                }
                return (0, F.jsx)(nj.D, {
                    icon: t,
                    "data-testid": "nested-list-item-state-icon",
                });
            }
            try {
                nU.displayName || (nU.displayName = "OutlineBlockedIcon");
            } catch {}
            try {
                nO.displayName || (nO.displayName = "SubIssueStateIcon");
            } catch {}
            try {
                (s = SubIssueIcon).displayName ||
                    (s.displayName = "SubIssueIcon");
            } catch {}
            let nq = {
                    metadataContainer:
                        "SubIssuesListItem-module__metadataContainer--nVUFL",
                    itemMetadataContainer:
                        "SubIssuesListItem-module__itemMetadataContainer--xTb_j",
                    NestedListItemMetadata_0:
                        "SubIssuesListItem-module__NestedListItemMetadata_0--vlzqi",
                    Box_0: "SubIssuesListItem-module__Box_0--DvDHF",
                    Box_1: "SubIssuesListItem-module__Box_1--SiGrl",
                    Box_2: "SubIssuesListItem-module__Box_2--em64X",
                    Octicon_0: "SubIssuesListItem-module__Octicon_0--ONIWP",
                    Octicon_1: "SubIssuesListItem-module__Octicon_1--BwjUW",
                    Link_0: "SubIssuesListItem-module__Link_0--y5IUu",
                },
                nH = (function () {
                    var e = {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "fetchSubIssues",
                        },
                        l = {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "issueId",
                        },
                        n = [
                            {
                                kind: "Variable",
                                name: "id",
                                variableName: "issueId",
                            },
                        ],
                        a = [
                            {
                                kind: "Variable",
                                name: "fetchSubIssues",
                                variableName: "fetchSubIssues",
                            },
                        ],
                        s = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        i = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "titleHTML",
                            storageKey: null,
                        },
                        t = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        r = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        u = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "stateReason",
                            storageKey: null,
                        },
                        o = {
                            alias: null,
                            args: null,
                            concreteType: "IssueDependenciesSummary",
                            kind: "LinkedField",
                            name: "issueDependenciesSummary",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "blockedBy",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        d = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closed",
                            storageKey: null,
                        },
                        c = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        m = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        g = {
                            alias: null,
                            args: null,
                            concreteType: "IssueType",
                            kind: "LinkedField",
                            name: "issueType",
                            plural: !1,
                            selections: [
                                t,
                                m,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "color",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        y = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "login",
                            storageKey: null,
                        },
                        p = {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                m,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "__typename",
                                            storageKey: null,
                                        },
                                        y,
                                        t,
                                    ],
                                    storageKey: null,
                                },
                                t,
                            ],
                            storageKey: null,
                        },
                        k = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                        F = {
                            alias: null,
                            args: [
                                { kind: "Literal", name: "first", value: 10 },
                            ],
                            concreteType: "UserConnection",
                            kind: "LinkedField",
                            name: "assignees",
                            plural: !1,
                            selections: [
                                k,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "UserEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "User",
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                t,
                                                y,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "avatarUrl",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: "assignees(first:10)",
                        },
                        b = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        h = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "databaseId",
                            storageKey: null,
                        },
                        f = {
                            alias: null,
                            args: null,
                            concreteType: "SubIssuesSummary",
                            kind: "LinkedField",
                            name: "subIssuesSummary",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "total",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "completed",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        K = [k],
                        S = {
                            alias: null,
                            args: [
                                { kind: "Literal", name: "first", value: 0 },
                                {
                                    kind: "Literal",
                                    name: "includeClosedPrs",
                                    value: !0,
                                },
                            ],
                            concreteType: "PullRequestConnection",
                            kind: "LinkedField",
                            name: "closedByPullRequestsReferences",
                            plural: !1,
                            selections: K,
                            storageKey:
                                "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                        };
                    return {
                        fragment: {
                            argumentDefinitions: [e, l],
                            kind: "Fragment",
                            metadata: null,
                            name: "subIssueSubscription",
                            selections: [
                                {
                                    alias: null,
                                    args: n,
                                    concreteType: "IssueUpdatedPayload",
                                    kind: "LinkedField",
                                    name: "issueUpdated",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueTitleUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "SubIssueTitle_TitleValue",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueStateUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "SubIssueStateIcon",
                                                },
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "useSubIssuesSummary_issueState",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueTypeUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "SubIssueTypeIndicator",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueMetadataUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "SubIssuesListItem",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "subIssuesUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: a,
                                                    kind: "FragmentSpread",
                                                    name: "SubIssuesCompletionPill",
                                                },
                                                {
                                                    args: a,
                                                    kind: "FragmentSpread",
                                                    name: "SubIssuesListItem_NestedSubIssues",
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            condition: "fetchSubIssues",
                                            kind: "Condition",
                                            passingValue: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "Issue",
                                                    kind: "LinkedField",
                                                    name: "subIssuesSummaryUpdated",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            args: [
                                                                {
                                                                    kind: "Literal",
                                                                    name: "fetchSubIssues",
                                                                    value: !1,
                                                                },
                                                            ],
                                                            kind: "FragmentSpread",
                                                            name: "useSubIssuesSummary",
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                            ],
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "EventSubscription",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: [l, e],
                            kind: "Operation",
                            name: "subIssueSubscription",
                            selections: [
                                {
                                    alias: null,
                                    args: n,
                                    concreteType: "IssueUpdatedPayload",
                                    kind: "LinkedField",
                                    name: "issueUpdated",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueTitleUpdated",
                                            plural: !1,
                                            selections: [s, i, t],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueStateUpdated",
                                            plural: !1,
                                            selections: [r, u, o, d, t],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueTypeUpdated",
                                            plural: !1,
                                            selections: [c, g, p, t],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issueMetadataUpdated",
                                            plural: !1,
                                            selections: [
                                                t,
                                                r,
                                                u,
                                                o,
                                                F,
                                                b,
                                                p,
                                                h,
                                                c,
                                                s,
                                                i,
                                                g,
                                                f,
                                                S,
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "subIssuesUpdated",
                                            plural: !1,
                                            selections: [
                                                {
                                                    condition: "fetchSubIssues",
                                                    kind: "Condition",
                                                    passingValue: !1,
                                                    selections: [f],
                                                },
                                                {
                                                    condition: "fetchSubIssues",
                                                    kind: "Condition",
                                                    passingValue: !0,
                                                    selections: [
                                                        {
                                                            alias: "subIssuesConnection",
                                                            args: null,
                                                            concreteType:
                                                                "IssueConnection",
                                                            kind: "LinkedField",
                                                            name: "subIssues",
                                                            plural: !1,
                                                            selections: K,
                                                            storageKey: null,
                                                        },
                                                        {
                                                            alias: null,
                                                            args: [
                                                                {
                                                                    kind: "Literal",
                                                                    name: "first",
                                                                    value: 100,
                                                                },
                                                            ],
                                                            concreteType:
                                                                "IssueConnection",
                                                            kind: "LinkedField",
                                                            name: "subIssues",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "Issue",
                                                                    kind: "LinkedField",
                                                                    name: "nodes",
                                                                    plural: !0,
                                                                    selections:
                                                                        [
                                                                            d,
                                                                            t,
                                                                            r,
                                                                            u,
                                                                            o,
                                                                            F,
                                                                            b,
                                                                            p,
                                                                            h,
                                                                            c,
                                                                            s,
                                                                            i,
                                                                            g,
                                                                            f,
                                                                            S,
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey:
                                                                "subIssues(first:100)",
                                                        },
                                                    ],
                                                },
                                                b,
                                                h,
                                                c,
                                                p,
                                                r,
                                                u,
                                                s,
                                                i,
                                                g,
                                                t,
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            condition: "fetchSubIssues",
                                            kind: "Condition",
                                            passingValue: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "Issue",
                                                    kind: "LinkedField",
                                                    name: "subIssuesSummaryUpdated",
                                                    plural: !1,
                                                    selections: [f, t],
                                                    storageKey: null,
                                                },
                                            ],
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "e5c84b39a86c226d0e08a054ff93845d",
                            metadata: {},
                            name: "subIssueSubscription",
                            operationKind: "subscription",
                            text: null,
                        },
                    };
                })();
            nH.hash = "a24cb8da732ab12e814044ad323e83e9";
            let n$ = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchSubIssues",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "SubIssueTitle",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "login",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SubIssueTitle_TitleValue",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SubIssueTypeIndicator",
                    },
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "fetchSubIssues",
                                variableName: "fetchSubIssues",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "SubIssuesCompletionPill",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            n$.hash = "0fadc40faceaf46e58836010333f80f0";
            let nz = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SubIssueTitle_TitleValue",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            nz.hash = "e376c37263bb0bff11cb5ab377b21c80";
            var nW = n(97764);
            let nQ = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "name",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "SubIssueTypeIndicator",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "IssueType",
                            kind: "LinkedField",
                            name: "issueType",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "id",
                                    storageKey: null,
                                },
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "color",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            nQ.hash = "c8e44f514d979b1f8816f991e03767d0";
            var nG = n(14307),
                nY = n(82961);
            let nX = {
                container: "LeadingBadge-module__container--U1Q5H",
                titleLabel: "LeadingBadge-module__titleLabel--tRXZQ",
                titleText: "LeadingBadge-module__titleText--GqciC",
            };
            function nJ({ title: e, href: l, className: n, color: a, ...s }) {
                let { setLeadingBadge: i } = (0, nY.$)();
                (0, Q.useEffect)(() => i(e), [i, e]);
                let { fg: t, bg: r, border: u } = (0, nG.Wk)(a),
                    o = (0, F.jsxs)(F.Fragment, {
                        children: [
                            (0, F.jsx)(e5.A, {
                                className: nX.titleLabel,
                                ...(0, ep.G)(
                                    "nested-list-view-item-leading-badge-label"
                                ),
                                style: {
                                    color: t,
                                    backgroundColor: r,
                                    borderColor: u,
                                },
                                ...s,
                                children: (0, F.jsx)("span", {
                                    className: nX.titleText,
                                    children: e,
                                }),
                            }),
                            (0, F.jsx)("span", {
                                className: "sr-only",
                                children: ": ",
                            }),
                        ],
                    });
                return l
                    ? (0, F.jsx)(ek.A, {
                          href: l,
                          ...(0, ep.G)("nested-list-view-item-leading-badge"),
                          className: (0, eb.$)(nX.container, n),
                          "aria-hidden": !0,
                          tabIndex: -1,
                          children: o,
                      })
                    : (0, F.jsx)("span", {
                          ...(0, ep.G)("nested-list-view-item-leading-badge"),
                          className: (0, eb.$)(nX.container, n),
                          children: o,
                      });
            }
            try {
                nJ.displayName ||
                    (nJ.displayName = "NestedListItemLeadingBadge");
            } catch {}
            let nZ = {
                    container: "SubIssueTypeIndicator-module__container--fzqQp",
                },
                n0 = ({ dataKey: e, onRender: l }) => {
                    let {
                            issueType: n,
                            number: a,
                            repository: s,
                        } = (0, N.useFragment)(nQ, e),
                        i = !n?.id || !n?.name;
                    return ((0, Q.useEffect)(() => {
                        !i && l && l?.(!0);
                    }, [l, i]),
                    i)
                        ? null
                        : (0, F.jsx)(
                              nJ,
                              {
                                  "data-testid": `${a}-sub-issue-type-indicator-${n.name.replace(/\s/g, "-")}`,
                                  className: nZ.container,
                                  size: "small",
                                  variant: "secondary",
                                  title: n.name,
                                  color: (0, nG.Nh)(n.color) ? n.color : void 0,
                                  href: nR(
                                      { owner: s.owner.login, repo: s.name },
                                      "type",
                                      n.name
                                  ),
                              },
                              n.id
                          );
                };
            try {
                n0.displayName || (n0.displayName = "SubIssueTypeIndicator");
            } catch {}
            var n1 = n(7151);
            let n2 = {
                    container: "TrailingBadge-module__container--wMID_",
                    label: "TrailingBadge-module__label--cD4bB",
                    title: "TrailingBadge-module__title--O0RpP",
                },
                n4 = ({ title: e, className: l, children: n, ...a }) => {
                    let s = (0, Q.useRef)(null);
                    return (
                        (0, n1.G)(s),
                        (0, F.jsx)("div", {
                            ...(0, ep.G)(
                                "nested-list-view-item-trailing-badge"
                            ),
                            className: (0, eb.$)(n2.container, l),
                            "aria-hidden": !0,
                            ref: s,
                            children:
                                n ||
                                (0, F.jsx)(e5.A, {
                                    className: n2.label,
                                    ...a,
                                    children: (0, F.jsx)("span", {
                                        className: n2.title,
                                        children: e,
                                    }),
                                }),
                        })
                    );
                };
            try {
                n4.displayName ||
                    (n4.displayName = "NestedListItemTrailingBadge");
            } catch {}
            let n6 = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchSubIssues",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "SubIssuesCompletionPill",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "fetchSubIssues",
                                variableName: "fetchSubIssues",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "useSubIssuesSummary",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            n6.hash = "a66950424aa6b94142e27c70813c0183";
            let n5 = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "fetchSubIssues",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "useSubIssuesSummary",
                selections: [
                    {
                        condition: "fetchSubIssues",
                        kind: "Condition",
                        passingValue: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "SubIssuesSummary",
                                kind: "LinkedField",
                                name: "subIssuesSummary",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "total",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "completed",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    {
                        condition: "fetchSubIssues",
                        kind: "Condition",
                        passingValue: !0,
                        selections: [
                            {
                                alias: "subIssuesConnection",
                                args: null,
                                concreteType: "IssueConnection",
                                kind: "LinkedField",
                                name: "subIssues",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "totalCount",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: [
                                    {
                                        kind: "Literal",
                                        name: "first",
                                        value: 100,
                                    },
                                ],
                                concreteType: "IssueConnection",
                                kind: "LinkedField",
                                name: "subIssues",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "nodes",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "closed",
                                                storageKey: null,
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "useSubIssuesSummary_issueState",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: "subIssues(first:100)",
                            },
                        ],
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            function n7(e) {
                let {
                        subIssuesSummary: l,
                        subIssues: n,
                        subIssuesConnection: a,
                    } = (0, N.useFragment)(n5, e) || {},
                    s = n?.nodes?.length ?? a?.totalCount ?? l?.total ?? 0,
                    i =
                        n?.nodes?.filter((e) => e?.closed).length ??
                        l?.completed ??
                        0;
                return (0, Q.useMemo)(
                    () => ({
                        total: s,
                        completed: i,
                        percentCompleted:
                            0 !== s ? Math.floor((i / s) * 100) : 0,
                    }),
                    [s, i]
                );
            }
            function n3({ issueKey: e, onClick: l }) {
                let n = (0, N.useFragment)(n6, e),
                    { url: a } = n,
                    s = n7(n);
                return s.total > 0
                    ? (0, F.jsx)(nc, { progress: s, href: a, onClick: l })
                    : null;
            }
            n5.hash = "b8c7a5a9e14e324b17a4626afdfd5b10";
            try {
                n3.displayName || (n3.displayName = "SubIssuesCompletionPill");
            } catch {}
            var n8 = n(65848);
            let n9 = {
                titleNumber: "SubIssueTitle-module__titleNumber--PdnWi",
                titleAnchor: "SubIssueTitle-module__titleAnchor--MtUue",
            };
            var ae = n(72822);
            function al({
                issueKey: e,
                onClick: l,
                parentRepoName: n,
                parentOwnerName: a,
            }) {
                let s = (0, N.useFragment)(n$, e),
                    {
                        databaseId: i,
                        state: t,
                        stateReason: r,
                        url: u,
                        number: o,
                        repository: d,
                    } = s,
                    { title: c, titleHTML: m } = (0, N.useFragment)(nz, s),
                    g = (0, eg.Nbg)({
                        issueNumber: o,
                        repo: d.name,
                        owner: d.owner.login,
                    }),
                    y = (0, Q.useCallback)(
                        (e) => {
                            1 === e.button ||
                                e.shiftKey ||
                                e.ctrlKey ||
                                e.metaKey ||
                                (l &&
                                    (e.preventDefault(),
                                    l({
                                        id: i ?? 0,
                                        number: o,
                                        owner: d.owner.login,
                                        repo: d.name,
                                        state: t,
                                        stateReason: r,
                                        title: c,
                                        url: u,
                                    })));
                        },
                        [l, o, d, i, t, r, u, c]
                    ),
                    p = (0, Q.useMemo)(() => {
                        let e = (0, F.jsx)(n3, { onClick: y, issueKey: s }),
                            l = e
                                ? (0, F.jsx)(
                                      n4,
                                      { title: "Sub-issues", children: e },
                                      0
                                  )
                                : null;
                        if (l) return [l];
                    }, [y, s]),
                    k = "";
                a && a !== d.owner.login
                    ? (k = `${d.owner.login}/${d.name}`)
                    : n && n !== d.name && (k = d.name);
                let b = `${(0, ae.us)(c, m)} ${(0, n8.F0)((0, F.jsxs)("span", { className: n9.titleNumber, children: [k, "#", o] }))}`;
                return (0, F.jsx)(nW.T, {
                    value: b,
                    href: u,
                    additionalLinkProps: { "data-hovercard-url": g },
                    leadingBadge: (0, F.jsx)(n0, { dataKey: s }),
                    onClick: y,
                    trailingBadges: p,
                    anchorClassName: (0, eb.$)(
                        n9.titleAnchor,
                        "markdown-title"
                    ),
                });
            }
            try {
                al.displayName || (al.displayName = "SubIssueTitle");
            } catch {}
            function an({
                parentIssueId: e,
                parentRepoName: l,
                parentOwnerName: n,
                issueKey: a,
                onSubIssueClick: s,
                dnd: i = !1,
                isDragOverlay: t = !1,
                readonly: r = !1,
            }) {
                let u = (0, N.useFragment)(nk, a),
                    [o, d] = (0, N.useRefetchableFragment)(np, u),
                    c = (0, Q.useMemo)(() => {
                        let e = o?.subIssues?.nodes?.reduce(
                            (e, a) => (
                                a &&
                                    e.push(
                                        (0, F.jsx)(
                                            an,
                                            {
                                                issueKey: a,
                                                parentRepoName: l,
                                                parentOwnerName: n,
                                                parentIssueId: u.id,
                                                onSubIssueClick: s,
                                                readonly: r,
                                            },
                                            a.id
                                        )
                                    ),
                                e
                            ),
                            []
                        );
                        if (e && 0 !== e.length) return e;
                    }, [u.id, s, r, o?.subIssues?.nodes, l, n]);
                (0, le.M3)() &&
                    ((e, { fetchSubIssues: l }) => {
                        let n = (0, Q.useMemo)(
                            () => ({
                                variables: { issueId: e, fetchSubIssues: l },
                                subscription: nH,
                            }),
                            [e, l]
                        );
                        (0, N.useSubscription)(n);
                    })(u.id, { fetchSubIssues: void 0 !== c });
                let m =
                    o.subIssuesConnection?.totalCount ||
                    o.subIssuesSummary?.total ||
                    0;
                return u
                    ? (0, F.jsx)(
                          nF.r,
                          {
                              className: nq.metadataContainer,
                              metadataContainerClassName:
                                  nq.itemMetadataContainer,
                              dragAndDropProps: {
                                  isOverlay: t,
                                  showTrigger: i,
                                  itemId: u.id,
                              },
                              title: (0, F.jsx)(al, {
                                  issueKey: o,
                                  onClick: s,
                                  parentRepoName: l,
                                  parentOwnerName: n,
                              }),
                              secondaryActions: r
                                  ? void 0
                                  : (0, F.jsx)(nx, {
                                        issueId: e,
                                        subIssueId: u.id,
                                        subIssueUrl: u.url,
                                    }),
                              metadata: (0, F.jsxs)(nh, {
                                  alignment: "right",
                                  className: nq.NestedListItemMetadata_0,
                                  children: [
                                      (0, F.jsx)("div", {
                                          className: nq.Box_0,
                                          children: (0, F.jsx)(nS.d, {
                                              issueId: u.id,
                                              closedByPullRequestsReferencesKey:
                                                  u,
                                          }),
                                      }),
                                      (0, F.jsx)("div", {
                                          className: nq.Box_1,
                                          children:
                                              0 === u.assignees.totalCount
                                                  ? (0, F.jsxs)("div", {
                                                        className: nq.Box_2,
                                                        children: [
                                                            (0, F.jsx)(W.A, {
                                                                icon: V.PersonIcon,
                                                                className:
                                                                    nq.Octicon_0,
                                                            }),
                                                            (0, F.jsx)(W.A, {
                                                                size: 24,
                                                                icon: V.CircleIcon,
                                                                className:
                                                                    nq.Octicon_1,
                                                            }),
                                                        ],
                                                    })
                                                  : (0, F.jsx)(nf.A, {
                                                        alignRight: !0,
                                                        children:
                                                            u.assignees.edges?.map(
                                                                (e) =>
                                                                    e?.node
                                                                        ? (0,
                                                                          F.jsx)(
                                                                              ek.A,
                                                                              {
                                                                                  href: nR(
                                                                                      {
                                                                                          owner: u
                                                                                              .repository
                                                                                              .owner
                                                                                              .login,
                                                                                          repo: u
                                                                                              .repository
                                                                                              .name,
                                                                                      },
                                                                                      "assignee",
                                                                                      e
                                                                                          .node
                                                                                          .login
                                                                                  ),
                                                                                  "data-hovercard-url":
                                                                                      (0,
                                                                                      eg.dCN)(
                                                                                          {
                                                                                              owner: e
                                                                                                  .node
                                                                                                  .login,
                                                                                          }
                                                                                      ),
                                                                                  className:
                                                                                      nq.Link_0,
                                                                                  children:
                                                                                      (0,
                                                                                      F.jsx)(
                                                                                          w.r,
                                                                                          {
                                                                                              alt: e
                                                                                                  .node
                                                                                                  .login,
                                                                                              src: e
                                                                                                  .node
                                                                                                  .avatarUrl,
                                                                                          },
                                                                                          e
                                                                                              .node
                                                                                              .id
                                                                                      ),
                                                                              },
                                                                              e
                                                                                  .node
                                                                                  .id
                                                                          )
                                                                        : null
                                                            ),
                                                    }),
                                      }),
                                  ],
                              }),
                              subItemsCount: m,
                              loadSubItems: async () => {
                                  d({ fetchSubIssues: !0 });
                              },
                              subItems: c,
                              children: (0, F.jsx)(nK.Q, {
                                  children: (0, F.jsx)(nO, { dataKey: u }),
                              }),
                          },
                          u.id
                      )
                    : null;
            }
            try {
                an.displayName || (an.displayName = "SubIssuesListItem");
            } catch {}
            let aa = {
                    container: "SubIssuesListView-module__container--io5Ze",
                    stickyHeader:
                        "SubIssuesListView-module__stickyHeader--Wmd5W",
                    observableBox:
                        "SubIssuesListView-module__observableBox--OJx_C",
                },
                as = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "input",
                            },
                        ],
                        l = [
                            {
                                kind: "Variable",
                                name: "input",
                                variableName: "input",
                            },
                        ],
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        a = {
                            alias: null,
                            args: [
                                { kind: "Literal", name: "first", value: 100 },
                            ],
                            concreteType: "IssueConnection",
                            kind: "LinkedField",
                            name: "subIssues",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Issue",
                                    kind: "LinkedField",
                                    name: "nodes",
                                    plural: !0,
                                    selections: [n],
                                    storageKey: null,
                                },
                            ],
                            storageKey: "subIssues(first:100)",
                        },
                        s = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                        i = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "login",
                            storageKey: null,
                        },
                        t = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        };
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "reprioritizeSubIssueMutation",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType: "ReprioritizeSubIssuePayload",
                                    kind: "LinkedField",
                                    name: "reprioritizeSubIssue",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issue",
                                            plural: !1,
                                            selections: [
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "SubIssuesListItem",
                                                },
                                                a,
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "Mutation",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "reprioritizeSubIssueMutation",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType: "ReprioritizeSubIssuePayload",
                                    kind: "LinkedField",
                                    name: "reprioritizeSubIssue",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "issue",
                                            plural: !1,
                                            selections: [
                                                n,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "state",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "stateReason",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType:
                                                        "IssueDependenciesSummary",
                                                    kind: "LinkedField",
                                                    name: "issueDependenciesSummary",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "blockedBy",
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: [
                                                        {
                                                            kind: "Literal",
                                                            name: "first",
                                                            value: 10,
                                                        },
                                                    ],
                                                    concreteType:
                                                        "UserConnection",
                                                    kind: "LinkedField",
                                                    name: "assignees",
                                                    plural: !1,
                                                    selections: [
                                                        s,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "UserEdge",
                                                            kind: "LinkedField",
                                                            name: "edges",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "User",
                                                                    kind: "LinkedField",
                                                                    name: "node",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            n,
                                                                            i,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "avatarUrl",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey:
                                                        "assignees(first:10)",
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "url",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "Repository",
                                                    kind: "LinkedField",
                                                    name: "repository",
                                                    plural: !1,
                                                    selections: [
                                                        t,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType: null,
                                                            kind: "LinkedField",
                                                            name: "owner",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "__typename",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                i,
                                                                n,
                                                            ],
                                                            storageKey: null,
                                                        },
                                                        n,
                                                    ],
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "databaseId",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "number",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "title",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "titleHTML",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "IssueType",
                                                    kind: "LinkedField",
                                                    name: "issueType",
                                                    plural: !1,
                                                    selections: [
                                                        n,
                                                        t,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "color",
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType:
                                                        "SubIssuesSummary",
                                                    kind: "LinkedField",
                                                    name: "subIssuesSummary",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "total",
                                                            storageKey: null,
                                                        },
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "completed",
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: [
                                                        {
                                                            kind: "Literal",
                                                            name: "first",
                                                            value: 0,
                                                        },
                                                        {
                                                            kind: "Literal",
                                                            name: "includeClosedPrs",
                                                            value: !0,
                                                        },
                                                    ],
                                                    concreteType:
                                                        "PullRequestConnection",
                                                    kind: "LinkedField",
                                                    name: "closedByPullRequestsReferences",
                                                    plural: !1,
                                                    selections: [s],
                                                    storageKey:
                                                        "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                                                },
                                                a,
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "91b29e713cceb0b2ed4b0544ec4394d2",
                            metadata: {},
                            name: "reprioritizeSubIssueMutation",
                            operationKind: "mutation",
                            text: null,
                        },
                    };
                })();
            as.hash = "df88a2e7bb24a566ac0feaace455b2f1";
            var ai = n(81945);
            let at = {
                Box: "SubIssuesListLoadingSkeleton-module__Box--pWEPu",
                Heading: "SubIssuesListLoadingSkeleton-module__Heading--Cis6D",
                LoadingBox:
                    "SubIssuesListLoadingSkeleton-module__LoadingBox--q55M8",
            };
            function ar() {
                return (0, F.jsxs)("div", {
                    "data-testid": "sub-issues-loading-skeleton",
                    children: [
                        (0, F.jsx)("div", {
                            className: at.Box,
                            children: (0, F.jsx)("h3", {
                                className: at.Heading,
                                children: "Sub-issues",
                            }),
                        }),
                        (0, F.jsx)("div", {
                            className: at.LoadingBox,
                            children: (0, F.jsx)(ai.O, {}),
                        }),
                    ],
                });
            }
            try {
                ar.displayName ||
                    (ar.displayName = "SubIssuesListLoadingSkeleton");
            } catch {}
            function au({ onSubIssueClick: e, issueKey: l, readonly: n = !1 }) {
                let a = (0, N.useFragment)(nn, l),
                    s = (0, N.useRelayEnvironment)(),
                    { addToast: i } = (0, M.Y6)(),
                    t = (0, Q.useCallback)(
                        ({
                            issueId: e,
                            dragIssueId: l,
                            dropIssueId: n,
                            isBefore: a,
                        }) => {
                            !(function ({
                                environment: e,
                                input: l,
                                onError: n,
                                onCompleted: a,
                            }) {
                                (0, N.commitMutation)(e, {
                                    mutation: as,
                                    variables: { input: l },
                                    optimisticUpdater: (e) => {
                                        let n = e
                                            .get(l.issueId)
                                            ?.getLinkedRecord(
                                                "subIssues(first:100)"
                                            );
                                        if (!n) return;
                                        let a = n.getLinkedRecords("nodes");
                                        if (!a) return;
                                        let s = [...a],
                                            i = s.findIndex(
                                                (e) =>
                                                    e.getDataID() ===
                                                    l.subIssueId
                                            ),
                                            t = s.findIndex(
                                                (e) =>
                                                    e.getDataID() ===
                                                    (l.beforeId || l.afterId)
                                            ),
                                            r = s[i];
                                        (r &&
                                            (s.splice(i, 1), s.splice(t, 0, r)),
                                            n.setLinkedRecords(s, "nodes"));
                                    },
                                    onError: (e) => n && n(e),
                                    onCompleted: (e) => a && a(e),
                                });
                            })({
                                environment: s,
                                input: {
                                    issueId: e,
                                    subIssueId: l,
                                    [a ? "beforeId" : "afterId"]: n,
                                },
                                onError: (e) => {
                                    i({ type: "error", message: e.message });
                                },
                            });
                        },
                        [s, i]
                    ),
                    r = n7(a ?? void 0),
                    {
                        isSticky: u,
                        hasRoots: o,
                        observe: d,
                        unobserve: c,
                    } = (0, ng.a)();
                return a
                    ? (0, F.jsxs)(na.v, {
                          isReadOnly: n,
                          title: "Sub-issues",
                          singularUnits: "Issue",
                          pluralUnits: "Issues",
                          header: (0, F.jsx)(ns.s, {
                              title: (0, F.jsx)(ni.c, {
                                  title: "Sub-issues",
                                  scrollToOnCollapseOffset: u ? -52 : void 0,
                              }),
                              className: (0, eb.$)(
                                  aa.container,
                                  u && o && aa.stickyHeader
                              ),
                              completionPill: (0, F.jsx)(nc, { progress: r }),
                          }),
                          isCollapsible: !0,
                          dragAndDropProps: {
                              onDrop: ({
                                  dragMetadata: e,
                                  dropMetadata: l,
                                  isBefore: n,
                              }) => {
                                  e.id !== l.id &&
                                      t({
                                          issueId: a.id,
                                          dragIssueId: e.id,
                                          dropIssueId: l.id,
                                          isBefore: n,
                                      });
                              },
                              renderOverlay: ({ id: l }) => {
                                  let s = a?.subIssues?.nodes?.find(
                                      (e) => e?.id === l
                                  );
                                  return s && a?.id
                                      ? (0, F.jsx)(na.v, {
                                            title: "overlay",
                                            isReadOnly: n,
                                            children: (0, F.jsx)(
                                                an,
                                                {
                                                    issueKey: s,
                                                    parentRepoName:
                                                        a?.repository?.name,
                                                    parentOwnerName:
                                                        a?.repository?.owner
                                                            ?.login,
                                                    parentIssueId: a?.id,
                                                    onSubIssueClick: e,
                                                    dnd: !0,
                                                    isDragOverlay: !0,
                                                    readonly: n,
                                                },
                                                s.id
                                            ),
                                        })
                                      : (0, F.jsx)(F.Fragment, {});
                              },
                              items:
                                  a.subIssues?.nodes?.map((e) =>
                                      e && e?.id
                                          ? { id: e.id, title: e.id, node: e }
                                          : { id: "", title: "", node: null }
                                  ) || [],
                          },
                          children: [
                              (0, F.jsx)(nm.X, {
                                  className: aa.observableBox,
                                  onObserve: d,
                                  onUnobserve: c,
                              }),
                              a.subIssues.nodes?.map((l) =>
                                  l && a.id
                                      ? (0, F.jsx)(
                                            an,
                                            {
                                                issueKey: l,
                                                parentIssueId: a.id,
                                                parentRepoName:
                                                    a?.repository?.name,
                                                parentOwnerName:
                                                    a?.repository?.owner?.login,
                                                onSubIssueClick: e,
                                                dnd: !0,
                                                readonly: n,
                                            },
                                            l.id
                                        )
                                      : null
                              ),
                          ],
                      })
                    : (0, F.jsx)(ar, {});
            }
            try {
                au.displayName || (au.displayName = "SubIssuesListView");
            } catch {}
            let ao = {
                Box: "SubIssuesList-module__Box--Gjjw_",
                ButtonGroup: "SubIssuesList-module__ButtonGroup--zLqq7",
            };
            function ad({
                issueKey: e,
                onSubIssueClick: l,
                insideSidePanel: n,
                readonly: a = !1,
            }) {
                let s = (0, N.useFragment)(nl, e);
                return (0, F.jsxs)("div", {
                    className: ao.Box,
                    children: [
                        (0, F.jsx)(au, {
                            onSubIssueClick: l,
                            issueKey: s ?? void 0,
                            readonly: a,
                        }),
                        s &&
                            !a &&
                            (0, F.jsx)("div", {
                                className: ao.ButtonGroup,
                                children: (0, F.jsx)(lV, {
                                    issue: s,
                                    insideSidePanel: n,
                                }),
                            }),
                    ],
                });
            }
            try {
                ad.displayName || (ad.displayName = "SubIssuesList");
            } catch {}
            let ac = {
                event: "event",
                issueComment: "issuecomment",
                pullRequestComment: "discussion_r",
                pullRequestReview: "pullrequestreview",
            };
            (ac.event,
                ac.issueComment,
                ac.pullRequestComment,
                ac.pullRequestReview);
            let am = [`#${ac.issueComment}`, `#${ac.event}`];
            function ag(e) {
                let l = e?.split("-")[0],
                    n = e?.split("-")[1];
                return n && l ? { id: n, prefix: l } : void 0;
            }
            let ay = {
                repositoryOwner: "Repository owner",
                metadataHeader: "Metadata",
                timeline: {
                    header: "Activity",
                    added: "added",
                    removed: "removed",
                    removedTheirAssignment: "removed their assignment",
                    unassigned: "unassigned",
                    locked: "locked",
                    limitedToCollaborators:
                        "and limited conversation to collaborators",
                    unlockedConversation: "unlocked this conversation",
                    pinned: "pinned this issue",
                    unpinned: "unpinned this issue",
                    closedThis: "closed this",
                    subscribed: "subscribed",
                    unsubscribed: "unsubscribed",
                    mentioned: "mentioned this",
                    as: "as",
                    in: "in",
                    of: "of",
                    to: "to",
                    and: "and",
                    reopenedThis: "reopened this",
                    selfAssignedThis: "self-assigned this",
                    assigned: "assigned",
                    temporarily: "temporarily",
                    blocked: "blocked",
                    deletedACommentFrom: "deleted a comment from",
                    addedToMilestone: "added this to the",
                    removedFromMilestone: "removed this from the",
                    milestone: "milestone",
                    milestoneDeleted: "This milestone has been deleted",
                    renamedTitle: "changed the title",
                    mentionedThisIn: "mentioned this",
                    linkedAClosingPR:
                        "linked a pull request that will close this issue",
                    addedCommitsThatReferences: (e) =>
                        `added ${1 === e ? "a" : e} commit${1 === e ? "" : "s"} that reference${1 === e ? "s" : ""} this issue`,
                    transferredThis: "transferred this issue from",
                    issueFromNote: "created this issue from a note in",
                    removedLinkedPR: "removed a link to a pull request",
                    markedAsDuplicate: "marked this as a duplicate of",
                    unmarkedAsDuplicate: "unmarked this as a duplicate of",
                    convertedToDiscussion:
                        "converted this issue into a discussion",
                    convertedFromDraftIssue:
                        "converted this from a draft issue",
                    addedThisTo: "added this to",
                    removedThisFrom: "removed this from",
                    movedThisFrom: "moved this from",
                    movedThisTo: "moved this to",
                    loadMore: (e) => `Load ${e} more`,
                    loadAll: "Load all",
                    loadNewer: "Load newer activity",
                    loadOlder: "Load older activity",
                    announcements: {
                        loadRemaining: "Loading remaining timeline items",
                        loadOlder: "Loading older timeline items",
                        loadNewer: "Loading newer timeline items",
                    },
                    modifiedMilestones: "modified the milestones:",
                    modifiedMilestone: "modified the milestone:",
                    subIssueAdded: {
                        single: "added a sub-issue",
                        multiple: "added sub-issues",
                    },
                    subIssueRemoved: {
                        single: "removed a sub-issue",
                        multiple: "removed sub-issues",
                    },
                    parentIssueAdded: {
                        single: "added a parent issue",
                        multiple: "added parent issues",
                    },
                    parentIssueRemoved: {
                        single: "removed a parent issue",
                        multiple: "removed parent issues",
                    },
                    blockedByAdded: {
                        single: "marked this as blocked by",
                        multiple: (e) =>
                            `marked this as blocked by ${e} issues`,
                    },
                    blockedByRemoved: {
                        single: "unmarked this as blocked by",
                        multiple: (e) =>
                            `unmarked this as blocked by ${e} issues`,
                    },
                    blockingAdded: {
                        single: "marked this as blocking",
                        multiple: (e) => `marked this as blocking ${e} issues`,
                    },
                    blockingRemoved: {
                        single: "unmarked this as blocking",
                        multiple: (e) =>
                            `unmarked this as blocking ${e} issues`,
                    },
                    issueTypeAdded: {
                        leading: "added the",
                        trailing: "issue type",
                    },
                    issueTypeRemoved: {
                        leading: "removed the",
                        trailing: "issue type",
                    },
                    issueTypeChanged: {
                        leading: "changed the issue type from",
                        trailing: "to",
                    },
                },
                crossReferencedEventLockTooltip: (e) =>
                    `Only people who can see ${e} will see this reference.`,
                crossReferencedEvent: {
                    sectionLabel: "Issues mentioned",
                    privateEventDescription:
                        "This event is from a private repository and is only visible to repository members",
                },
                commitWillCloseMessage: (e, l, n) =>
                    `This ${"Issue" === e ? "issue" : "pull request"} will close once commit ${l} is merged into the '${n}' branch.`,
                undoMarkIssueAsDuplicate: (e) =>
                    `Undo marking issue as duplicate of issue #${e}`,
            };
            var ap = n(4578);
            let ak = { commentsContainer: "react-comments-container" },
                aF = { itemPicker: "item-picker", newComment: "new-comment" };
            var ab = n(13712),
                ah = n(57611),
                af = n(83855),
                aK = n(50560);
            let aS = {
                    bannerContainer:
                        "converted-to-discussion-banner-module__bannerContainer--HDrY9",
                    bannerContent:
                        "converted-to-discussion-banner-module__bannerContent--Glqcn",
                    textContent:
                        "converted-to-discussion-banner-module__textContent--rleYu",
                },
                aI = {
                    infoIcon:
                        "ConvertedToDiscussionBanner-module__infoIcon--bvGtg",
                    convertedText:
                        "ConvertedToDiscussionBanner-module__convertedText--QpJOJ",
                    discussionLink:
                        "ConvertedToDiscussionBanner-module__discussionLink--Lj2RH",
                    arrowIcon:
                        "ConvertedToDiscussionBanner-module__arrowIcon--IE0Ys",
                },
                av = ({ discussionUrl: e }) =>
                    (0, F.jsx)("div", {
                        className: aS.bannerContainer,
                        children: (0, F.jsxs)("div", {
                            className: aS.bannerContent,
                            children: [
                                (0, F.jsx)(W.A, {
                                    icon: V.InfoIcon,
                                    size: 16,
                                    className: aI.infoIcon,
                                }),
                                (0, F.jsxs)("div", {
                                    className: aS.textContent,
                                    children: [
                                        (0, F.jsx)("span", {
                                            className: aI.convertedText,
                                            children:
                                                aK.k.convertToDiscussion
                                                    .converted,
                                        }),
                                        (0, F.jsxs)(ek.A, {
                                            href: e,
                                            className: aI.discussionLink,
                                            children: [
                                                aK.k.convertToDiscussion
                                                    .goToDiscussion,
                                                (0, F.jsx)(W.A, {
                                                    icon: V.ArrowRightIcon,
                                                    size: 16,
                                                    className: aI.arrowIcon,
                                                }),
                                            ],
                                        }),
                                    ],
                                }),
                            ],
                        }),
                    });
            try {
                av.displayName ||
                    (av.displayName = "ConvertedToDiscussionBanner");
            } catch {}
            let aL = {
                    contributionBlockedBanner:
                        "EmuContributionBlockedBanner-module__contributionBlockedBanner--ULSSa",
                },
                aT = () =>
                    (0, F.jsx)(e$.A, {
                        variant: "warning",
                        "data-jump-to-bottom-target": !0,
                        tabIndex: -1,
                        id: "emu-contribution-blocked-banner",
                        className: aL.contributionBlockedBanner,
                        children:
                            "You cannot contribute to repositories outside of your enterprise.",
                    });
            try {
                aT.displayName ||
                    (aT.displayName = "EmuContributionBlockedBanner");
            } catch {}
            (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "repo",
                    },
                    a = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "repo",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    s = [
                        {
                            kind: "Variable",
                            name: "number",
                            variableName: "number",
                        },
                    ],
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [d, c, r],
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    k = [
                        { kind: "Literal", name: "first", value: 100 },
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "HeaderQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: s,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "Header",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, n, e],
                        kind: "Operation",
                        name: "HeaderQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: s,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            i,
                                            t,
                                            r,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    u,
                                                    r,
                                                    o,
                                                    m,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "isArchived",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "isPrivate",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "titleHTML",
                                                storageKey: null,
                                            },
                                            g,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanUpdateNext",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: [o, y, r],
                                                storageKey: null,
                                            },
                                            p,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "stateReason",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "duplicateOf",
                                                plural: !1,
                                                selections: [
                                                    t,
                                                    g,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "Repository",
                                                        kind: "LinkedField",
                                                        name: "repository",
                                                        plural: !1,
                                                        selections: [o, m, r],
                                                        storageKey: null,
                                                    },
                                                    r,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: "linkedPullRequests",
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 10,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "includeClosedPrs",
                                                        value: !1,
                                                    },
                                                    {
                                                        kind: "Literal",
                                                        name: "orderByState",
                                                        value: !0,
                                                    },
                                                ],
                                                concreteType:
                                                    "PullRequestConnection",
                                                kind: "LinkedField",
                                                name: "closedByPullRequestsReferences",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PullRequest",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "repository",
                                                                plural: !1,
                                                                selections: [
                                                                    u,
                                                                    r,
                                                                    o,
                                                                    m,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            p,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "isDraft",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            g,
                                                            t,
                                                            r,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "closedByPullRequestsReferences(first:10,includeClosedPrs:false,orderByState:true)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "SubIssuesSummary",
                                                kind: "LinkedField",
                                                name: "subIssuesSummary",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "total",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "completed",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 20,
                                                    },
                                                ],
                                                concreteType:
                                                    "AssigneeConnection",
                                                kind: "LinkedField",
                                                name: "assignedActors",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            d,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    r,
                                                                    c,
                                                                    o,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "profileResourcePath",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: [
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "size",
                                                                                value: 64,
                                                                            },
                                                                        ],
                                                                        kind: "ScalarField",
                                                                        name: "avatarUrl",
                                                                        storageKey:
                                                                            "avatarUrl(size:64)",
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "isCopilot",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "Bot",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "Actor",
                                                                abstractKey:
                                                                    "__isActor",
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [r],
                                                                type: "Node",
                                                                abstractKey:
                                                                    "__isNode",
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "assignedActors(first:20)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Milestone",
                                                kind: "LinkedField",
                                                name: "milestone",
                                                plural: !1,
                                                selections: [
                                                    r,
                                                    i,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "closed",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "dueOn",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "progressPercentage",
                                                        storageKey: null,
                                                    },
                                                    g,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "closedAt",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: k,
                                                        concreteType:
                                                            "LabelConnection",
                                                        kind: "LinkedField",
                                                        name: "labels",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "LabelEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Label",
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                r,
                                                                                y,
                                                                                o,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "nameHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "description",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                g,
                                                                                d,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "cursor",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "PageInfo",
                                                                kind: "LinkedField",
                                                                name: "pageInfo",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "endCursor",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "hasNextPage",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey:
                                                            'labels(first:100,orderBy:{"direction":"ASC","field":"NAME"})',
                                                    },
                                                    {
                                                        alias: null,
                                                        args: k,
                                                        filters: ["orderBy"],
                                                        handle: "connection",
                                                        key: "MetadataSectionAssignedLabels_labels",
                                                        kind: "LinkedHandle",
                                                        name: "labels",
                                                    },
                                                    {
                                                        kind: "TypeDiscriminator",
                                                        abstractKey: "__isNode",
                                                    },
                                                ],
                                                type: "Labelable",
                                                abstractKey: "__isLabelable",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    r,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "7fd310fe7ef17c6286593e4fc56b9c8d",
                        metadata: {},
                        name: "HeaderQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })().hash = "4bac131643596948f9919d9c9ac45b6e";
            let aC = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "Header",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        e,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                e,
                            ],
                            storageKey: null,
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "HeaderViewer",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "HeaderMetadata",
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            aC.hash = "fa5f57bee7f75b8a48b29d64244ec8f0";
            let ax = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "HeaderSecondary",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isTransferInProgress",
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            ax.hash = "58a7f4c970dd56751203ee21d03734e9";
            var aR = n(76143),
                aN = n(18651);
            let aj = {
                    transferWarningFlash:
                        "Header-module__transferWarningFlash--It5Qy",
                    stickyObservableBox:
                        "Header-module__stickyObservableBox--GRl72",
                    HeaderContentWrapper:
                        "Header-module__HeaderContentWrapper--WtTMs",
                    headerSpacer: "Header-module__headerSpacer--lQCuP",
                },
                a_ = {
                    couldNotUpdateLinkedPullRequests:
                        "Could not update linked pull requests",
                    couldNotUpdateLinkedBranches:
                        "Could not update linked branches",
                    couldNotUpdateIssueTitle: "Could not update issue title",
                    couldNotUnpinIssue: "Could not unpin issue",
                    couldNotStartTransfer: "Could not initiate issue transfer",
                },
                aw = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "input",
                            },
                        ],
                        l = [
                            {
                                alias: null,
                                args: [
                                    {
                                        kind: "Variable",
                                        name: "input",
                                        variableName: "input",
                                    },
                                ],
                                concreteType: "UpdateIssuePayload",
                                kind: "LinkedField",
                                name: "updateIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "id",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "title",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "titleHTML",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ];
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "updateIssueTitleMutation",
                            selections: l,
                            type: "Mutation",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "updateIssueTitleMutation",
                            selections: l,
                        },
                        params: {
                            id: "248149933e592650d7f40772dde0d204",
                            metadata: {},
                            name: "updateIssueTitleMutation",
                            operationKind: "mutation",
                            text: null,
                        },
                    };
                })();
            aw.hash = "b5d09b83ee3a8c70127f501e0b43b95a";
            var aE = n(62180),
                aA = n(65029),
                aP = n(24815);
            let aB = {
                titleInputWrapper:
                    "IssueTitleInput-module__titleInputWrapper--uzdt2",
            };
            function aD({
                titleRef: e,
                value: l,
                onChange: n,
                cancelIssueTitleEdit: a,
                isDirty: s,
                validationError: i,
                isSubmitting: t,
                emojiSkinTonePreference: r,
            }) {
                let u = (0, lf.S)(),
                    o = (0, Q.useCallback)(async () => {
                        (!s ||
                            (await u({
                                title: aK.k.unsavedChangesTitle,
                                content: aK.k.unsavedChangesContent,
                                confirmButtonType: "danger",
                            }))) &&
                            a();
                    }, [a, u, s]);
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsx)(lK.ak, {
                            commands: { "issue-viewer:close-edit-title": o },
                        }),
                        (0, F.jsxs)(aA.A, {
                            disabled: t,
                            className: aB.titleInputWrapper,
                            children: [
                                (0, F.jsx)(aA.A.Label, {
                                    visuallyHidden: !0,
                                    children: "Title input",
                                }),
                                (0, F.jsx)(aE.x, {
                                    tone: r,
                                    fullWidth: !0,
                                    children: (0, F.jsx)(aP.A, {
                                        ref: e,
                                        onChange: n,
                                        value: l,
                                        placeholder: aK.k.viewTitlePlaceholder,
                                        "data-testid": ab.Y.issueTitleInput,
                                        onInput: n,
                                        autoFocus: !0,
                                        "data-react-autofocus": !0,
                                        "aria-describedby":
                                            "issue-title-validation",
                                        "aria-invalid": !!i,
                                        className: aB.titleInputWrapper,
                                    }),
                                }),
                                i &&
                                    (0, F.jsx)(aA.A.Validation, {
                                        variant: "error",
                                        id: "issue-title-validation",
                                        children: i,
                                    }),
                            ],
                        }),
                    ],
                });
            }
            try {
                aD.displayName || (aD.displayName = "IssueTitleInput");
            } catch {}
            let aM = {
                HeaderEditorContainer:
                    "HeaderEditor-module__HeaderEditorContainer--wOi9p",
            };
            function aV({
                onTitleChange: e,
                title: l,
                cancelIssueTitleEdit: n,
                issueId: a,
                isDirty: s,
                onIssueUpdate: i,
                isSubmitting: t,
                setIsSubmitting: r,
                emojiSkinTonePreference: u,
                ...o
            }) {
                let d = (0, N.useRelayEnvironment)(),
                    { addToast: c } = (0, M.Y6)(),
                    [m, g] = (0, Q.useState)(void 0),
                    y = (0, Q.useCallback)(() => {
                        !(function ({
                            environment: e,
                            input: { issueId: l, title: n },
                            onError: a,
                            onCompleted: s,
                        }) {
                            let i = { id: l };
                            (null !== n && (i.title = n),
                                (0, N.commitMutation)(e, {
                                    mutation: aw,
                                    variables: { input: i },
                                    onError: (e) => a && a(e),
                                    optimisticResponse: {
                                        updateIssue: {
                                            issue: {
                                                id: l,
                                                title: n || "",
                                                titleHTML: eo.default.sanitize(
                                                    n || "",
                                                    {
                                                        ALLOWED_TAGS: [],
                                                        ALLOWED_ATTR: [],
                                                        ALLOW_ARIA_ATTR: !1,
                                                    }
                                                ),
                                            },
                                        },
                                    },
                                    onCompleted: (e) => s && s(e),
                                }));
                        })({
                            environment: d,
                            input: { issueId: a, title: l },
                            onError: () => {
                                (r(!1),
                                    c({
                                        type: "error",
                                        message: a_.couldNotUpdateIssueTitle,
                                    }));
                            },
                            onCompleted: () => {
                                (r(!1), i?.(), n());
                            },
                        });
                    }, [d, a, l, c, r, i, n]),
                    p = null !== l.match(/^ *$/),
                    k = () => {
                        if (p) {
                            (g(eH.wY.titleCanNotBeEmpty),
                                o.titleRef.current?.focus());
                            return;
                        }
                        (r(!0), y());
                    };
                return (0, F.jsx)("div", {
                    className: aM.HeaderEditorContainer,
                    children: (0, F.jsxs)(lK.tL, {
                        commands: {
                            "issue-viewer:edit-title-submit": k,
                            "github:submit-form": k,
                        },
                        children: [
                            (0, F.jsx)(aD, {
                                value: l,
                                onChange: (l) => {
                                    (m &&
                                        (g(void 0),
                                        o.titleRef.current?.focus()),
                                        e(l));
                                },
                                cancelIssueTitleEdit: n,
                                commitIssueTitleEdit: y,
                                isDirty: s,
                                isSubmitting: t,
                                validationError: m,
                                setIsSubmitting: r,
                                emojiSkinTonePreference: u,
                                ...o,
                            }),
                            (0, F.jsx)(lK.cQ, {
                                commandId: "issue-viewer:close-edit-title",
                                disabled: t,
                            }),
                            (0, F.jsx)(lK.cQ, {
                                variant: "primary",
                                disabled: t,
                                commandId: "issue-viewer:edit-title-submit",
                                showKeybindingHint: !0,
                            }),
                        ],
                    }),
                });
            }
            try {
                aV.displayName || (aV.displayName = "HeaderEditor");
            } catch {}
            let aU = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "HeaderMetadata",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "HeaderIssueType",
                    },
                    { args: null, kind: "FragmentSpread", name: "HeaderMenu" },
                    { args: null, kind: "FragmentSpread", name: "HeaderState" },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "StickyHeaderTitle",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "RepositoryPill",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "LinkedPullRequests",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "HeaderSubIssueSummaryWithPrimary",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueMetadata",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            aU.hash = "dc1a5d23dcbc68c81305e76929260808";
            let aO = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "HeaderBlockedBySummary",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "IssueDependenciesSummary",
                        kind: "LinkedField",
                        name: "issueDependenciesSummary",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "blockedBy",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: [
                            { kind: "Literal", name: "first", value: 1 },
                            { kind: "Literal", name: "ranked", value: !0 },
                        ],
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "blockedBy",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "Issue",
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "titleHTML",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "number",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "url",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Repository",
                                        kind: "LinkedField",
                                        name: "repository",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "name",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "owner",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "login",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: "blockedBy(first:1,ranked:true)",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            aO.hash = "48dc0cf3208dcb1a27b1eb0532682f73";
            var aq = n(73017);
            let aH = {
                    token: "HeaderBlockedBySummary-module__token--LwUD7",
                    smallSummary:
                        "HeaderBlockedBySummary-module__smallSummary--yl4te",
                    visualLabel:
                        "HeaderBlockedBySummary-module__visualLabel--a0fGx",
                    issueLink:
                        "HeaderBlockedBySummary-module__issueLink--JAMjM",
                },
                a$ = {
                    dividerLine:
                        "HeaderMetadataDivider-module__dividerLine--MdX7r",
                },
                az = ({ blockedBySecondaryKey: e, size: l = "xlarge" }) => {
                    let n = (0, N.useFragment)(aO, e),
                        { blockedBy: a } = n?.issueDependenciesSummary ?? {};
                    if (!n || !a || "CLOSED" === n.state)
                        return (0, F.jsx)(F.Fragment, {});
                    let s = (1 === a && n?.blockedBy?.nodes?.[0]) || void 0;
                    return (0, F.jsxs)(F.Fragment, {
                        children: [
                            "small" !== l &&
                                (0, F.jsx)("span", {
                                    className: a$.dividerLine,
                                }),
                            (0, F.jsx)(aW, {
                                blockedByCount: a,
                                size: l,
                                blockedByIssue: s,
                            }),
                        ],
                    });
                };
            function aW({ blockedByCount: e, size: l, blockedByIssue: n }) {
                let a,
                    s = `Blocked by ${e} issue${1 === e ? "" : "s"}`;
                if (n) {
                    let { titleHTML: e, number: s, url: i, repository: t } = n;
                    a = (0, F.jsx)(ek.A, {
                        className: aH.issueLink,
                        "aria-label": `Blocked by issue ${e}`,
                        inline: !0,
                        muted: !0,
                        href: i,
                        "data-hovercard-url": (0, eg.Nbg)({
                            owner: t.owner.login,
                            repo: t.name,
                            issueNumber: s,
                        }),
                        children:
                            "small" === l
                                ? `#${s}`
                                : (0, F.jsx)(aq.JR, {
                                      html: e,
                                      className: "markdown-title",
                                  }),
                    });
                }
                if ("small" === l)
                    return (0, F.jsxs)("div", {
                        className: aH.smallSummary,
                        children: [
                            (0, F.jsx)(V.BlockedIcon, {
                                className: "fgColor-danger",
                                size: 14,
                            }),
                            (0, F.jsx)("span", {
                                className: aH.visualLabel,
                                children: a || e,
                            }),
                            (0, F.jsx)("span", {
                                className: "sr-only",
                                children: s,
                            }),
                        ],
                    });
                let i = `Blocked by${a ? ":" : ""}`;
                return (0, F.jsx)(nr.A, {
                    text: (0, F.jsxs)(F.Fragment, {
                        children: [
                            (0, F.jsxs)("span", {
                                className: aH.visualLabel,
                                children: [i, " ", a || e],
                            }),
                            (0, F.jsx)("span", {
                                className: "sr-only",
                                children: s,
                            }),
                        ],
                    }),
                    leadingVisual: () =>
                        (0, F.jsx)(V.BlockedIcon, {
                            className: "fgColor-danger",
                            size: 14,
                        }),
                    className: aH.token,
                    size: "xlarge",
                });
            }
            try {
                az.displayName || (az.displayName = "HeaderBlockedBySummary");
            } catch {}
            try {
                aW.displayName ||
                    (aW.displayName = "HeaderBlockedBySummaryInternal");
            } catch {}
            let aQ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "HeaderIssueType",
                selections: [
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "nameWithOwner",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "issueType",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "color",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            aQ.hash = "3a1498cc17779675a39bb326162e80dd";
            var aG = n(25983);
            let aY = {
                smallToken: "HeaderIssueType-module__smallToken--rVNy9",
                IssueTypeToken: "HeaderIssueType-module__IssueTypeToken--nunfj",
            };
            function aX({ data: e }) {
                let { issueType: l, repository: n } = (0, N.useFragment)(aQ, e);
                return l
                    ? (0, F.jsx)(aG.n, {
                          name: l.name,
                          color: l.color,
                          href: `/${n.nameWithOwner}/issues?q=type:"${l.name}"`,
                          getTooltipText: (e) => (e ? l.name : void 0),
                          size: "large",
                          className: aY.IssueTypeToken,
                      })
                    : null;
            }
            let aJ = ({ data: e }) => {
                let { issueType: l } = (0, N.useFragment)(aQ, e);
                return l
                    ? (0, F.jsx)("div", {
                          className: aY.smallToken,
                          children: l.name,
                      })
                    : null;
            };
            try {
                aX.displayName || (aX.displayName = "HeaderIssueType");
            } catch {}
            try {
                aJ.displayName || (aJ.displayName = "SmallHeaderIssueType");
            } catch {}
            let aZ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "HeaderMenu",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanUpdateNext",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "login",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isArchived",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            aZ.hash = "68e12e73fdda766945082c3e81656d3a";
            var a0 = n(98755),
                a1 = n(92559),
                a2 = n(66730);
            let a4 = {
                menuActionsContainer:
                    "HeaderMenu-module__menuActionsContainer--Gf9W9",
                buttonContainer: "HeaderMenu-module__buttonContainer--Nazjm",
                kebabMenuButton: "HeaderMenu-module__kebabMenuButton--zRRqL",
            };
            function a6({
                headerMenuData: e,
                setIsIssueTitleEditActive: l,
                containerRef: n,
                optionConfig: {
                    customEditMenuEntries: a,
                    navigate: s,
                    showIssueCreateButton: i,
                    additionalHeaderActions: t,
                    onClose: r,
                    singleKeyShortcutsEnabled: u,
                    emojiSkinTonePreference: o,
                    useViewportQueries: d,
                },
            }) {
                let {
                        viewerCanUpdateNext: c,
                        url: m,
                        repository: g,
                    } = (0, N.useFragment)(aZ, e),
                    y = (0, ap.w)(n?.current ?? null),
                    p = (0, Q.useRef)(null),
                    k = (0, Q.useMemo)(
                        () =>
                            c
                                ? (0, F.jsx)($.Q, {
                                      "data-testid": ab.Y.editIssueTitleButton,
                                      "aria-label": aK.k.editTitle,
                                      onClick: () => l && l(!0),
                                      size: "medium",
                                      children: a2.l.editTitle,
                                  })
                                : null,
                        [l, c]
                    );
                return (0, F.jsxs)("div", {
                    className: a4.menuActionsContainer,
                    children: [
                        k,
                        (0, F.jsx)(eO.az, {
                            sx: {
                                flexGrow: d
                                    ? ["1", "1", "0", "0"]
                                    : y(["1", "1", "0", "0"]),
                            },
                            className: a4.buttonContainer,
                            children:
                                i &&
                                !g.isArchived &&
                                (0, F.jsx)(a1.a, {
                                    label: a2.l.new,
                                    navigate: s,
                                    optionConfig: {
                                        showRepositoryPicker: !1,
                                        issueCreateArguments: {
                                            repository: {
                                                owner: g.owner.login,
                                                name: g.name,
                                            },
                                        },
                                        showFullScreenButton: !0,
                                        navigateToFullScreenOnTemplateChoice:
                                            s !== lB.l && null !== g,
                                        singleKeyShortcutsEnabled: u,
                                        emojiSkinTonePreference: o,
                                        canBypassTemplateSelection: !0,
                                        navigate: s,
                                    },
                                }),
                        }),
                        (0, F.jsx)(a0.T, {
                            textToCopy: m,
                            ariaLabel: a2.l.copyIssueLink,
                            icon: V.CopyIcon,
                            tooltipProps: { direction: "s" },
                        }),
                        t,
                        a &&
                            (0, F.jsxs)(O.W, {
                                anchorRef: p,
                                children: [
                                    (0, F.jsx)(O.W.Anchor, {
                                        children: (0, F.jsx)(q.K, {
                                            variant: "invisible",
                                            icon: V.KebabHorizontalIcon,
                                            "aria-label": a2.l.issueActions,
                                            ref: p,
                                        }),
                                    }),
                                    (0, F.jsx)(O.W.Overlay, {
                                        children: (0, F.jsx)(H.l, {
                                            children: a.map((e) => e),
                                        }),
                                    }),
                                ],
                            }),
                        r &&
                            (0, F.jsx)(q.K, {
                                variant: "invisible",
                                "aria-label": a2.l.closePanel,
                                icon: V.XIcon,
                                onClick: r,
                            }),
                    ],
                });
            }
            function a5({
                headerMenuData: e,
                optionConfig: {
                    customEditMenuEntries: l,
                    additionalHeaderActions: n,
                    onClose: a,
                },
            }) {
                let { url: s } = (0, N.useFragment)(aZ, e),
                    i = (0, Q.useRef)(null);
                return (0, F.jsxs)("div", {
                    className: a4.menuActionsContainer,
                    children: [
                        (0, F.jsx)(a0.T, {
                            textToCopy: s,
                            ariaLabel: a2.l.copyIssueLink,
                            icon: V.CopyIcon,
                            tooltipProps: { direction: "s" },
                        }),
                        n,
                        l &&
                            (0, F.jsxs)(O.W, {
                                anchorRef: i,
                                children: [
                                    (0, F.jsx)(O.W.Anchor, {
                                        children: (0, F.jsx)(q.K, {
                                            variant: "invisible",
                                            icon: V.KebabHorizontalIcon,
                                            "aria-label": a2.l.issueActions,
                                            tooltipDirection: "n",
                                            ref: i,
                                            className: a4.kebabMenuButton,
                                        }),
                                    }),
                                    (0, F.jsx)(O.W.Overlay, {
                                        children: (0, F.jsx)(H.l, {
                                            children: l.map((e) => e),
                                        }),
                                    }),
                                ],
                            }),
                        a &&
                            (0, F.jsx)(q.K, {
                                variant: "invisible",
                                "aria-label": a2.l.closePanel,
                                icon: V.XIcon,
                                onClick: a,
                            }),
                    ],
                });
            }
            try {
                a6.displayName || (a6.displayName = "HeaderMenu");
            } catch {}
            try {
                a5.displayName || (a5.displayName = "StickyHeaderMenu");
            } catch {}
            let a7 = {
                    metadataContainer:
                        "HeaderMetadata-module__metadataContainer--BhB7Q",
                    metadataBorder:
                        "HeaderMetadata-module__metadataBorder--oeBkI",
                    metadataContent:
                        "HeaderMetadata-module__metadataContent--HC0b2",
                    stickyContainer:
                        "HeaderMetadata-module__stickyContainer--JBJvS",
                    stickyContent:
                        "HeaderMetadata-module__stickyContent--jGltj",
                    titleAndMetadata:
                        "HeaderMetadata-module__titleAndMetadata--I5cx4",
                    smallMetadataRow:
                        "HeaderMetadata-module__smallMetadataRow--gVhbT",
                },
                a3 = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "HeaderParentTitle",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "parent",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "id",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "number",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Repository",
                                    kind: "LinkedField",
                                    name: "repository",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "name",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "owner",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "login",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "state",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "stateReason",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "title",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "titleHTML",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            a3.hash = "df07200f5e684b113ccb00965a3e4b1b";
            let a8 = {
                    parentTitleContainer:
                        "HeaderParentTitle-module__parentTitleContainer--NDi4M",
                    parentTitleLink:
                        "HeaderParentTitle-module__parentTitleLink--kuLfE",
                    parentTitleToken:
                        "HeaderParentTitle-module__parentTitleToken--fxGes",
                },
                a9 = ({ parentKey: e, optionConfig: l, small: n = !1 }) => {
                    let a = (0, N.useFragment)(a3, e);
                    if (!a) return null;
                    let { parent: s } = a;
                    return s?.repository && s.repository.owner
                        ? (0, F.jsx)(se, {
                              parent: s,
                              optionConfig: l,
                              small: n,
                          })
                        : null;
                },
                se = ({ parent: e, optionConfig: l, small: n = !1 }) => {
                    let a = e.repository.name,
                        s = e.repository.owner.login,
                        { sourceIcon: i } = nD({
                            state: e.state,
                            stateReason: e.stateReason,
                        }),
                        t = i("Issue");
                    if (!t) return null;
                    let r = (n) => {
                            if (l?.onParentIssueActivate) {
                                let i = {
                                    number: e.number,
                                    repo: a,
                                    owner: s,
                                    type: "Issue",
                                };
                                if (l.onParentIssueActivate(n, i)) return;
                            }
                            if (l?.insideSidePanel && l?.onSubIssueClick) {
                                let {
                                        id: i,
                                        number: t,
                                        state: r,
                                        title: u,
                                        url: o,
                                    } = e,
                                    d = {
                                        id: parseInt(i, 10),
                                        number: t,
                                        owner: s,
                                        repo: a,
                                        state: r,
                                        title: u,
                                        url: o,
                                    };
                                (n.preventDefault(), l.onSubIssueClick(d));
                            }
                            l?.navigate &&
                                (n.preventDefault(), l?.navigate?.(e.url));
                        },
                        u = (0, ae.us)(e.title, e.titleHTML),
                        o = (0, F.jsxs)(eO.az, {
                            sx: { maxWidth: 500 },
                            className: a8.parentTitleContainer,
                            children: [
                                (0, F.jsx)(t, { size: 14 }),
                                (0, F.jsx)("span", {
                                    style: { marginLeft: "4px" },
                                    children: "Parent:",
                                }),
                                (0, F.jsx)(ek.A, {
                                    "aria-label": `Parent issue: ${e.title}`,
                                    inline: !0,
                                    muted: !0,
                                    hoverColor: "fg.muted",
                                    href: e.url,
                                    onClick: (e) => {
                                        e.altKey ||
                                            e.ctrlKey ||
                                            e.metaKey ||
                                            e.shiftKey ||
                                            r(e);
                                    },
                                    onKeyDown: (e) => {
                                        "Enter" !== e.key ||
                                            e.altKey ||
                                            e.ctrlKey ||
                                            e.metaKey ||
                                            e.shiftKey ||
                                            r(e);
                                    },
                                    "data-hovercard-url": (0, eg.Nbg)({
                                        owner: s,
                                        repo: a,
                                        issueNumber: e.number,
                                    }),
                                    className: a8.parentTitleLink,
                                    children: n
                                        ? `#${e.number}`
                                        : (0, F.jsx)(aq.JR, {
                                              html: u,
                                              className: "markdown-title",
                                          }),
                                }),
                            ],
                        });
                    return n
                        ? o
                        : (0, F.jsxs)(F.Fragment, {
                              children: [
                                  (0, F.jsx)("span", {
                                      className: a$.dividerLine,
                                  }),
                                  (0, F.jsx)(eO.az, {
                                      sx: { maxWidth: "min(500px, 100%)" },
                                      children: (0, F.jsx)(nr.A, {
                                          text: o,
                                          size: "xlarge",
                                          className: a8.parentTitleToken,
                                      }),
                                  }),
                              ],
                          });
                };
            try {
                a9.displayName || (a9.displayName = "HeaderParentTitle");
            } catch {}
            try {
                se.displayName ||
                    (se.displayName = "HeaderParentTitleInternal");
            } catch {}
            try {
                (i = IconComponent).displayName ||
                    (i.displayName = "IconComponent");
            } catch {}
            let sl = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "HeaderState",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Issue",
                        kind: "LinkedField",
                        name: "duplicateOf",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "number",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "url",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "name",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "owner",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "login",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            sl.hash = "1734dea2e72680881d4fd73c708b6b74";
            var sn = n(21553);
            let sa = {
                stateLabel: "HeaderState-module__stateLabel--Na0HJ",
                duplicateIssueLink:
                    "HeaderState-module__duplicateIssueLink--gPcio",
            };
            function ss({ isSticky: e, stateData: l }) {
                let {
                        state: n,
                        stateReason: a,
                        duplicateOf: s,
                    } = (0, N.useFragment)(sl, l),
                    { stateString: i, stateStatus: t } = nD({
                        state: n,
                        stateReason: a,
                        options: { longText: !e },
                    });
                return (0, F.jsx)("div", {
                    children: (0, F.jsxs)(sn.A, {
                        "data-testid": ab.Y.headerState,
                        status: t,
                        className: sa.stateLabel,
                        children: [i, (0, F.jsx)(si, { duplicateOf: s })],
                    }),
                });
            }
            function si({ duplicateOf: e }) {
                if (!e) return null;
                let l =
                    e.repository?.owner?.login &&
                    (0, eg.Nbg)({
                        repo: e.repository.name,
                        owner: e.repository.owner.login,
                        issueNumber: e.number,
                    });
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        " ",
                        "of",
                        (0, F.jsxs)(ek.A, {
                            href: e?.url,
                            inline: !0,
                            "data-hovercard-url": l,
                            className: sa.duplicateIssueLink,
                            children: ["#", e?.number],
                        }),
                    ],
                });
            }
            try {
                ss.displayName || (ss.displayName = "HeaderState");
            } catch {}
            try {
                si.displayName || (si.displayName = "DuplicateIssueLink");
            } catch {}
            let st = {
                argumentDefinitions: [
                    {
                        defaultValue: !1,
                        kind: "LocalArgument",
                        name: "fetchSubIssues",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "HeaderSubIssueSummary",
                selections: [
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "fetchSubIssues",
                                variableName: "fetchSubIssues",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "useSubIssuesSummary",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            st.hash = "603b042fa945a22ebcdb8345f0a3a612";
            let sr = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "HeaderSubIssueSummaryWithPrimary",
                selections: [
                    {
                        args: [
                            {
                                kind: "Literal",
                                name: "fetchSubIssues",
                                value: !1,
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "useSubIssuesSummary",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            sr.hash = "02a4f342f6c913a3e3f1bba2edd8295d";
            let su = {
                token: "HeaderSubIssuesSummary-module__token--n6xYv",
                smallSummary:
                    "HeaderSubIssuesSummary-module__smallSummary--cqVuG",
                visualLabel:
                    "HeaderSubIssuesSummary-module__visualLabel--SJYaK",
            };
            function so({
                subIssuePrimaryKey: e,
                subIssueSecondaryKey: l,
                size: n = "xlarge",
            }) {
                let a = (0, N.useFragment)(st, l),
                    {
                        completed: s,
                        percentCompleted: i,
                        total: t,
                    } = n7(a ?? void 0);
                return a
                    ? (0, F.jsx)(sc, {
                          completed: s,
                          percentCompleted: i,
                          total: t,
                          size: n,
                      })
                    : (0, F.jsx)(sd, { subIssueSummaryKey: e, size: n });
            }
            function sd({ subIssueSummaryKey: e, size: l = "xlarge" }) {
                let n = (0, N.useFragment)(sr, e),
                    {
                        completed: a,
                        percentCompleted: s,
                        total: i,
                    } = n7(n ?? void 0);
                return n
                    ? (0, F.jsx)(sc, {
                          completed: a,
                          percentCompleted: s,
                          total: i,
                          size: l,
                      })
                    : (0, F.jsx)(F.Fragment, {});
            }
            function sc({
                completed: e,
                total: l,
                percentCompleted: n,
                size: a,
            }) {
                let s = `${e} / ${l}`,
                    i = `${e} of ${l} ${1 === l ? "issue" : "issues"} completed`;
                return 0 === l || isNaN(n)
                    ? null
                    : "small" === a
                      ? (0, F.jsxs)("div", {
                            className: su.smallSummary,
                            children: [
                                (0, F.jsx)(nt.a, { percentCompleted: n }),
                                (0, F.jsx)("span", {
                                    "aria-hidden": "true",
                                    className: su.visualLabel,
                                    children: s,
                                }),
                                (0, F.jsx)("span", {
                                    className: "sr-only",
                                    children: i,
                                }),
                            ],
                        })
                      : (0, F.jsx)(nr.A, {
                            text: (0, F.jsxs)(F.Fragment, {
                                children: [
                                    (0, F.jsx)("span", {
                                        "aria-hidden": "true",
                                        className: su.visualLabel,
                                        children: s,
                                    }),
                                    (0, F.jsx)("span", {
                                        className: "sr-only",
                                        children: i,
                                    }),
                                ],
                            }),
                            leadingVisual: () =>
                                (0, F.jsx)(nt.a, { percentCompleted: n }),
                            className: su.token,
                            size: "xlarge",
                        });
            }
            try {
                so.displayName || (so.displayName = "HeaderSubIssueSummary");
            } catch {}
            try {
                sd.displayName ||
                    (sd.displayName = "HeaderSubIssueSummaryWithPrimary");
            } catch {}
            try {
                sc.displayName ||
                    (sc.displayName = "HeaderSubIssueSummaryInternal");
            } catch {}
            let sm = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueMetadata",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "LabelsSectionAssignedLabels",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "AssigneesSectionAssignees",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestonesSectionMilestone",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            sm.hash = "d58846f98442c160672513c6ce32b5a2";
            var sg = n(41313),
                sy = n(58958),
                sp = n(47734),
                sk = n(93829),
                sF = n(9352),
                sb = n(41305);
            let sh = {
                    avatarStack: "AssigneesMetadata-module__avatarStack--wphoi",
                    avatar: "AssigneesMetadata-module__avatar--Ythxm",
                },
                sf = ({ assignees: e }) =>
                    (0, F.jsx)(nf.A, {
                        className: sh.avatarStack,
                        children: e.map((e) =>
                            (0, F.jsx)(
                                ek.A,
                                {
                                    "aria-label": `${e.login} is assigned`,
                                    href: `/${e.login}`,
                                    "data-hovercard-url": (0, eg.dCN)({
                                        owner: e.login,
                                    }),
                                    children: (0, F.jsx)(
                                        w.r,
                                        {
                                            alt: e.login,
                                            src: e.avatarUrl,
                                            className: sh.avatar,
                                        },
                                        e.login
                                    ),
                                },
                                e.id
                            )
                        ),
                    });
            try {
                sf.displayName || (sf.displayName = "AssigneesMetadata");
            } catch {}
            let sK = {
                issueMetadata: "IssueMetadata-module__issueMetadata--hs7HR",
                metadata: "IssueMetadata-module__metadata--bttzx",
                metadataTitle: "IssueMetadata-module__metadataTitle--k9r__",
                metadataValue: "IssueMetadata-module__metadataValue--d40kf",
            };
            var sS = n(1002);
            let sI = {
                    milestoneLink:
                        "MilestoneMetadata-module__milestoneLink--SF0lK",
                    milestoneTitle:
                        "MilestoneMetadata-module__milestoneTitle--hLT9z",
                    truncatedText:
                        "MilestoneMetadata-module__truncatedText--B4slr",
                },
                sv = ({ milestone: e }) =>
                    (0, F.jsxs)(ek.A, {
                        href: e.url,
                        "aria-label": e.title,
                        muted: !0,
                        className: sI.milestoneLink,
                        children: [
                            (0, F.jsx)(W.A, {
                                icon: V.MilestoneIcon,
                                size: 16,
                            }),
                            (0, F.jsx)(sS.A, {
                                title: e.title,
                                className: (0, eb.$)(
                                    sI.milestoneTitle,
                                    sI.truncatedText
                                ),
                                children: e.title,
                            }),
                        ],
                    });
            try {
                sv.displayName || (sv.displayName = "MilestoneMetadata");
            } catch {}
            let sL = ({ metadataKey: e }) => {
                    let l = (0, N.useFragment)(sm, e),
                        n = (0, N.useFragment)(sy.Wj, l),
                        a = (0, N.useFragment)(sg.sC, l),
                        s = (0, N.useFragment)(sp.zD, l),
                        i = (0, Q.useMemo)(
                            () =>
                                (a?.assignedActors?.nodes || []).flatMap((e) =>
                                    e ? [(0, sF.uX)(e)] : []
                                ) ?? [],
                            [a?.assignedActors?.nodes]
                        ),
                        t = (0, Q.useMemo)(
                            () =>
                                (n?.labels?.edges || []).flatMap((e) =>
                                    e?.node ? [(0, sk.P5)(e?.node)] : []
                                ) ?? [],
                            [n?.labels?.edges]
                        ),
                        r = (0, Q.useMemo)(
                            () =>
                                s?.milestone ? (0, l9.Hf)(s?.milestone) : null,
                            [s?.milestone]
                        );
                    return i.length || t.length || r
                        ? (0, F.jsxs)("div", {
                              className: sK.issueMetadata,
                              children: [
                                  i?.length > 0 &&
                                      (0, F.jsx)(sT, {
                                          title: "Assignees",
                                          children: (0, F.jsx)(sf, {
                                              assignees: i,
                                          }),
                                      }),
                                  t?.length > 0 &&
                                      (0, F.jsx)(sT, {
                                          title: "Labels",
                                          children: (0, F.jsx)(sb.w, {
                                              labels: t,
                                          }),
                                      }),
                                  r &&
                                      (0, F.jsx)(sT, {
                                          title: "Milestone",
                                          children: (0, F.jsx)(sv, {
                                              milestone: r,
                                          }),
                                      }),
                              ],
                          })
                        : null;
                },
                sT = ({ title: e, children: l }) =>
                    (0, F.jsxs)("div", {
                        className: sK.metadata,
                        children: [
                            (0, F.jsx)("div", {
                                className: sK.metadataTitle,
                                children: e,
                            }),
                            (0, F.jsx)("div", {
                                className: sK.metadataValue,
                                children: l,
                            }),
                        ],
                    });
            try {
                sL.displayName || (sL.displayName = "IssueMetadata");
            } catch {}
            try {
                sT.displayName || (sT.displayName = "Metadata");
            } catch {}
            let sC = (function () {
                var e = {
                    alias: null,
                    args: null,
                    concreteType: "Repository",
                    kind: "LinkedField",
                    name: "repository",
                    plural: !1,
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameWithOwner",
                            storageKey: null,
                        },
                    ],
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "LinkedPullRequests",
                    selections: [
                        e,
                        {
                            alias: "linkedPullRequests",
                            args: [
                                { kind: "Literal", name: "first", value: 10 },
                                {
                                    kind: "Literal",
                                    name: "includeClosedPrs",
                                    value: !1,
                                },
                                {
                                    kind: "Literal",
                                    name: "orderByState",
                                    value: !0,
                                },
                            ],
                            concreteType: "PullRequestConnection",
                            kind: "LinkedField",
                            name: "closedByPullRequestsReferences",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PullRequest",
                                    kind: "LinkedField",
                                    name: "nodes",
                                    plural: !0,
                                    selections: [
                                        e,
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "state",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "isDraft",
                                            storageKey: null,
                                        },
                                        {
                                            args: null,
                                            kind: "FragmentSpread",
                                            name: "LinkedPullRequest",
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey:
                                "closedByPullRequestsReferences(first:10,includeClosedPrs:false,orderByState:true)",
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            sC.hash = "8f9873eeccc20817002499d953d9fd2e";
            let sx = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "LinkedPullRequest",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "nameWithOwner",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "login",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "PullRequest",
                abstractKey: null,
            };
            sx.hash = "f39bd0d3ddec45f9362bcc669024de6b";
            var sR = n(3614);
            let sN = {
                    pullRequestLink:
                        "LinkedPullRequest-module__pullRequestLink--P8RgZ",
                    pullRequestTitle:
                        "LinkedPullRequest-module__pullRequestTitle--_Yd2O",
                    externalRepoContainer:
                        "LinkedPullRequest-module__externalRepoContainer--ASVub",
                    repositoryName:
                        "LinkedPullRequest-module__repositoryName--OQ5GI",
                },
                sj = (e) => {
                    let {
                            pullKey: l,
                            issueRepositoryName: n,
                            omitIcon: a,
                            omitHover: s,
                        } = e,
                        i = (0, N.useFragment)(sx, l),
                        t = i.repository?.owner?.login,
                        r = i.repository?.name,
                        u =
                            i.repository.nameWithOwner.toLocaleLowerCase() !==
                            n.toLocaleLowerCase(),
                        o = `${t}/${r}#${i.number}`,
                        d = (0, eg.i9S)({
                            owner: i.repository.owner.login,
                            repo: i.repository.name,
                            pullRequestNumber: i.number,
                        }),
                        c = (0, F.jsxs)(eO.N_, {
                            sx: { overflow: u ? "hidden" : "visible" },
                            href: i.url,
                            "data-hovercard-url": s ? void 0 : d,
                            target: "_blank",
                            role: "link",
                            className: sN.pullRequestLink,
                            children: [
                                !a && (0, F.jsx)(sw, { pullKey: e.pullKey }),
                                (0, F.jsx)(sE, { ...e }),
                            ],
                        });
                    return !s && u
                        ? (0, F.jsx)(sR.m, { text: o, children: c })
                        : c;
                },
                s_ = (e) => {
                    let { pullKey: l, itemKey: n, issueRepositoryName: a } = e,
                        s = (0, N.useFragment)(sx, l),
                        i = s.repository?.owner?.login,
                        t = s.repository?.name,
                        r =
                            s.repository.nameWithOwner.toLocaleLowerCase() !==
                            a.toLocaleLowerCase(),
                        u = s.number;
                    return (0, F.jsxs)(
                        H.l.LinkItem,
                        {
                            href: s.url,
                            target: "_blank",
                            children: [
                                (0, F.jsx)(H.l.LeadingVisual, {
                                    children: (0, F.jsx)(sw, {
                                        pullKey: e.pullKey,
                                    }),
                                }),
                                (0, F.jsx)("div", {
                                    className: sN.pullRequestTitle,
                                    children: r ? `${i}/${t} #${u}` : `#${u}`,
                                }),
                            ],
                        },
                        n
                    );
                },
                sw = ({ pullKey: e, ...l }) => {
                    let n = sA((0, N.useFragment)(sx, e));
                    return (0, F.jsx)(n, { ...l });
                },
                sE = ({ pullKey: e, issueRepositoryName: l }) => {
                    let n = (0, N.useFragment)(sx, e),
                        a = n.repository?.owner?.login,
                        s = n.repository?.name,
                        i =
                            n.repository.nameWithOwner.toLocaleLowerCase() !==
                            l.toLocaleLowerCase()
                                ? (0, F.jsxs)("div", {
                                      className: sN.externalRepoContainer,
                                      children: [
                                          (0, F.jsx)("div", {
                                              className: sN.repositoryName,
                                              children: `${a}/${s}`,
                                          }),
                                          (0, F.jsxs)("span", {
                                              children: ["#", n.number],
                                          }),
                                      ],
                                  })
                                : (0, F.jsx)("span", {
                                      children: `#${n.number}`,
                                  });
                    return (0, F.jsx)(F.Fragment, { children: i });
                },
                sA = (e) => {
                    let l = "MERGED" === e.state ? "MERGED" : "OPEN";
                    return "OPEN" === l && e.isDraft ? nB.DRAFT : nB[l];
                };
            try {
                sw.displayName || (sw.displayName = "LinkedPRIcon");
            } catch {}
            try {
                (t = PullStateIcon).displayName ||
                    (t.displayName = "PullStateIcon");
            } catch {}
            try {
                sE.displayName || (sE.displayName = "LinkedPRName");
            } catch {}
            let sP = {
                    linkedPullRequestsPill:
                        "LinkedPullRequests-module__linkedPullRequestsPill--Ok1o0",
                    pullRequestsContainer:
                        "LinkedPullRequests-module__pullRequestsContainer--zrJ8_",
                    twoColumnLayout:
                        "LinkedPullRequests-module__twoColumnLayout--PGVGf",
                    flexRowContainer:
                        "LinkedPullRequests-module__flexRowContainer--ane_A",
                    commaSeparatedList:
                        "LinkedPullRequests-module__commaSeparatedList--pAtQU",
                    ActionMenu_Button:
                        "LinkedPullRequests-module__ActionMenu_Button--l39MW",
                },
                sB = (e) =>
                    (0, F.jsx)("div", {
                        className: sP.linkedPullRequestsPill,
                        ...e,
                    }),
                sD = ({ issueData: e, isSmall: l = !1, isSticky: n = !1 }) => {
                    let {
                            mergedPullRequests: a,
                            openPullRequests: s,
                            draftPullRequests: i,
                            externalPrsCount: t,
                            issueRepositoryName: r,
                            pullRequests: u,
                        } = sV((0, N.useFragment)(sC, e)),
                        o = (0, Q.useMemo)(() => [...s, ...i], [s, i]),
                        d = (0, Q.useMemo)(
                            () => o.length > 0 && a.length > 0,
                            [o.length, a.length]
                        ),
                        c = (0, Q.useMemo)(() => 1 === u.length, [u.length]),
                        m = (0, Q.useMemo)(
                            () => t > 1 || u.length > 2,
                            [t, u.length]
                        ),
                        g = (0, Q.useMemo)(
                            () =>
                                !m &&
                                ((a.length > 0 &&
                                    (s.length > 0 || i.length > 0)) ||
                                    (s.length > 0 && i.length > 0)),
                            [a.length, s.length, i.length, m]
                        ),
                        y = (0, Q.useMemo)(
                            () => !g && 2 === u.length,
                            [u.length, g]
                        );
                    if (u.length < 1 || !u[0]) return null;
                    let p = c
                        ? (0, F.jsx)(sj, {
                              pullKey: u[0],
                              issueRepositoryName: r,
                              omitHover: l,
                          })
                        : m
                          ? (0, F.jsxs)("div", {
                                className: sP.pullRequestsContainer,
                                children: [
                                    l
                                        ? (0, F.jsx)(sj, {
                                              pullKey: u[0],
                                              issueRepositoryName: r,
                                              omitHover: l,
                                          })
                                        : (0, F.jsxs)(F.Fragment, {
                                              children: [
                                                  (0, F.jsx)(sw, {
                                                      pullKey: u[0],
                                                  }),
                                                  (0, F.jsx)(sE, {
                                                      pullKey: u[0],
                                                      issueRepositoryName: r,
                                                  }),
                                              ],
                                          }),
                                    (0, F.jsxs)("span", {
                                        children: [
                                            (0, F.jsx)("span", {
                                                children: " (",
                                            }),
                                            (0, F.jsxs)("span", {
                                                children: ["+", u.length - 1],
                                            }),
                                            (0, F.jsx)("span", {
                                                children: ")",
                                            }),
                                        ],
                                    }),
                                ],
                            })
                          : g
                            ? (0, F.jsxs)("div", {
                                  className: sP.twoColumnLayout,
                                  children: [
                                      (0, F.jsx)("div", {
                                          className: sP.flexRowContainer,
                                          children: (0, F.jsx)(sj, {
                                              pullKey: u[0],
                                              issueRepositoryName: r,
                                              omitHover: l,
                                          }),
                                      }),
                                      u[1] &&
                                          (0, F.jsx)("div", {
                                              className: sP.flexRowContainer,
                                              children: (0, F.jsx)(sj, {
                                                  pullKey: u[1],
                                                  issueRepositoryName: r,
                                                  omitHover: l,
                                              }),
                                          }),
                                  ],
                              })
                            : y
                              ? (0, F.jsxs)("div", {
                                    className: sP.commaSeparatedList,
                                    children: [
                                        (0, F.jsx)("div", {
                                            className: sP.flexRowContainer,
                                            children: (0, F.jsx)(sj, {
                                                pullKey: u[0],
                                                issueRepositoryName: r,
                                                omitHover: l,
                                            }),
                                        }),
                                        u[1] &&
                                            (0, F.jsx)("div", {
                                                className: sP.flexRowContainer,
                                                children: (0, F.jsx)(sj, {
                                                    pullKey: u[1],
                                                    issueRepositoryName: r,
                                                    omitIcon: !0,
                                                    omitHover: l,
                                                }),
                                            }),
                                    ],
                                })
                              : null;
                    return l
                        ? (0, F.jsx)("div", {
                              className: sP.flexRowContainer,
                              children: p,
                          })
                        : (0, F.jsx)(F.Fragment, {
                              children: m
                                  ? (0, F.jsxs)(eO.Wy, {
                                        children: [
                                            (0, F.jsx)(eO.Wy.Button, {
                                                "aria-label":
                                                    aK.k.linkedPrsLabel,
                                                className: sP.ActionMenu_Button,
                                                children: p,
                                            }),
                                            (0, F.jsx)(eO.Wy.Overlay, {
                                                sx: {
                                                    display: n
                                                        ? "none"
                                                        : "block",
                                                },
                                                width:
                                                    t > 0 ? "medium" : "auto",
                                                children: (0, F.jsxs)(H.l, {
                                                    children: [
                                                        d &&
                                                            (0, F.jsx)(
                                                                H.l
                                                                    .GroupHeading,
                                                                {
                                                                    "aria-label":
                                                                        aK.k
                                                                            .mergedPrs,
                                                                    children:
                                                                        aK.k
                                                                            .mergedPrs,
                                                                }
                                                            ),
                                                        a.length > 0 &&
                                                            (0, F.jsx)(sM, {
                                                                list: a,
                                                                issueRepositoryName:
                                                                    r,
                                                            }),
                                                        d &&
                                                            (0, F.jsxs)(
                                                                F.Fragment,
                                                                {
                                                                    children: [
                                                                        (0,
                                                                        F.jsx)(
                                                                            H.l
                                                                                .Divider,
                                                                            {}
                                                                        ),
                                                                        (0,
                                                                        F.jsx)(
                                                                            H.l
                                                                                .GroupHeading,
                                                                            {
                                                                                "aria-label":
                                                                                    aK
                                                                                        .k
                                                                                        .openPrs,
                                                                                children:
                                                                                    aK
                                                                                        .k
                                                                                        .openPrs,
                                                                            }
                                                                        ),
                                                                    ],
                                                                }
                                                            ),
                                                        o.length > 0
                                                            ? (0, F.jsx)(sM, {
                                                                  list: o,
                                                                  issueRepositoryName:
                                                                      r,
                                                              })
                                                            : null,
                                                    ],
                                                }),
                                            }),
                                        ],
                                    })
                                  : (0, F.jsx)(sB, { children: p }),
                          });
                },
                sM = ({ list: e, issueRepositoryName: l }) =>
                    (0, F.jsx)(F.Fragment, {
                        children: e.map((e, n) =>
                            (0, F.jsx)(
                                s_,
                                { pullKey: e, issueRepositoryName: l },
                                n
                            )
                        ),
                    }),
                sV = (e) => {
                    let l = [],
                        n = [],
                        a = [],
                        s = e.repository.nameWithOwner.toLocaleLowerCase(),
                        i = 0;
                    e.linkedPullRequests?.nodes?.flatMap((e) => {
                        if (!e) return;
                        let t =
                            e.repository.nameWithOwner.toLocaleLowerCase() !==
                            s.toLocaleLowerCase();
                        switch ((t && i++, e.state)) {
                            case "MERGED":
                                return t ? l.push(e) : l.unshift(e);
                            case "OPEN":
                                if (e.isDraft)
                                    return t ? a.push(e) : a.unshift(e);
                                return t ? n.push(e) : n.unshift(e);
                            default:
                                return;
                        }
                    });
                    let t = [...l, ...n, ...a];
                    return {
                        mergedPullRequests: l,
                        openPullRequests: n,
                        draftPullRequests: a,
                        externalPrsCount: i,
                        issueRepositoryName: s,
                        pullRequests: t,
                    };
                };
            try {
                sD.displayName ||
                    (sD.displayName = "LinkedPullRequestsInternal");
            } catch {}
            try {
                sM.displayName || (sM.displayName = "ListRenderer");
            } catch {}
            let sU = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "RepositoryPill",
                selections: [
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "login",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isPrivate",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            sU.hash = "af4e78176ece26a434c7bc6c19f0ce64";
            let sO = {
                    repositoryInfoContainer:
                        "RepositoryPill-module__repositoryInfoContainer--hx8t7",
                    repositoryIcon:
                        "RepositoryPill-module__repositoryIcon--ta4XG",
                    ownerLink: "RepositoryPill-module__ownerLink--Fbl6Q",
                    repositoryNameLink:
                        "RepositoryPill-module__repositoryNameLink--cPREy",
                    smallRepositoryPill:
                        "RepositoryPill-module__smallRepositoryPill--IAsHi",
                    repositoryLabel:
                        "RepositoryPill-module__repositoryLabel--Yutrq",
                },
                sq = (e) => (0, F.jsx)(sH, { ...e, isSmall: !0 });
            function sH({ repositoryPillData: e, sx: l, isSmall: n = !1 }) {
                let { repository: a } = (0, N.useFragment)(sU, e),
                    s = a.owner.login,
                    i = a.name,
                    t = (0, F.jsxs)(eO.az, {
                        sx: { height: n ? void 0 : "32px" },
                        className: sO.repositoryInfoContainer,
                        children: [
                            !n &&
                                (0, F.jsx)(W.A, {
                                    icon: V.RepoIcon,
                                    className: sO.repositoryIcon,
                                }),
                            " ",
                            (0, F.jsx)(ek.A, {
                                href: `/${s}`,
                                "data-hovercard-url": (0, eg.dCN)({ owner: s }),
                                className: sO.ownerLink,
                                children: s,
                            }),
                            (0, F.jsx)("span", { children: "/" }),
                            (0, F.jsx)(ek.A, {
                                href: `/${s}/${i}`,
                                className: sO.repositoryNameLink,
                                children: i,
                            }),
                        ],
                    });
                return n
                    ? t
                    : (0, F.jsxs)(eO.az, {
                          sx: { ...l },
                          className: sO.smallRepositoryPill,
                          children: [
                              t,
                              (0, F.jsx)(e5.A, {
                                  size: "small",
                                  "data-watch-overflow": !0,
                                  className: sO.repositoryLabel,
                                  children: a.isPrivate
                                      ? aK.k.private
                                      : aK.k.public,
                              }),
                          ],
                      });
            }
            try {
                sH.displayName || (sH.displayName = "RepositoryPill");
            } catch {}
            let s$ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "StickyHeaderTitle",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "login",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            s$.hash = "a96a1e535b8b6dbdc71a34cd918e382f";
            var sz = n(53627);
            let sW = {
                stickyTitleContainer:
                    "StickyHeaderTitle-module__stickyTitleContainer--tWFM_",
                stickyTitleLink:
                    "StickyHeaderTitle-module__stickyTitleLink--H6l16",
                issueNumberText:
                    "StickyHeaderTitle-module__issueNumberText--t7CBp",
            };
            function sQ({ headerTitleData: e, scrollToTopOnClick: l }) {
                let {
                        titleHTML: n,
                        number: a,
                        url: s,
                        repository: i,
                    } = (0, N.useFragment)(s$, e),
                    t = (0, Q.useCallback)(() => {
                        l &&
                            setTimeout(() => {
                                (0, sz.bj)(s);
                            }, 10);
                    }, [l, s]);
                return (0, F.jsxs)("div", {
                    className: sW.stickyTitleContainer,
                    children: [
                        (0, F.jsx)(ek.A, {
                            "data-hovercard-url": l
                                ? void 0
                                : (0, eg.Nbg)({
                                      owner: i.owner.login,
                                      repo: i.name,
                                      issueNumber: a,
                                  }),
                            href: l ? "#top" : s,
                            target: l ? void 0 : "_blank",
                            onClick: t,
                            className: sW.stickyTitleLink,
                            children: (0, F.jsx)(aq.vb, {
                                as: "bdi",
                                className: "markdown-title",
                                html: n,
                                "data-testid": ab.Y.issueTitleSticky,
                            }),
                        }),
                        (0, F.jsx)("span", {
                            className: sW.issueNumberText,
                            children: aK.k.issueNumber(a),
                        }),
                    ],
                });
            }
            try {
                sQ.displayName || (sQ.displayName = "StickyHeaderTitle");
            } catch {}
            let sG = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "TrackedByFragment",
                selections: [
                    {
                        alias: null,
                        args: [{ kind: "Literal", name: "first", value: 10 }],
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "trackedInIssues",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "Issue",
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "number",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "url",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "stateReason",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: "trackedInIssues(first:10)",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            sG.hash = "85d7e05c6822546f03500dc2828ef942";
            let sY = {
                    trackingItemContainer:
                        "TrackedBy-module__trackingItemContainer--Kl2xy",
                    trackingToken: "TrackedBy-module__trackingToken--P69TJ",
                    trackedByText: "TrackedBy-module__trackedByText--RLpr7",
                    trackingInfoContainer:
                        "TrackedBy-module__trackingInfoContainer--TtEkR",
                },
                sX = (e) => (0, F.jsx)(sJ, { ...e, isSmall: !0 });
            function sJ({ trackedByKey: e, url: l, isSmall: n = !1 }) {
                let a = (0, N.useFragment)(sG, e);
                if (!a || 0 === (a.trackedInIssues?.totalCount ?? 0))
                    return null;
                let s = a.trackedInIssues?.nodes?.flatMap((e) => e || []) ?? [],
                    i =
                        1 === s.length
                            ? (0, F.jsx)(sZ, {
                                  trackingIssue: s[0],
                                  url: l,
                                  omitIcon: n,
                                  omitHover: n,
                              })
                            : (0, F.jsx)(s0, {
                                  trackingIssues: s,
                                  url: l,
                                  omitHover: n,
                              }),
                    t = (0, F.jsx)("div", {
                        className: sY.trackingItemContainer,
                        children: i,
                    });
                return n
                    ? t
                    : (0, F.jsx)("div", {
                          children: (0, F.jsx)(nr.A, {
                              text: t,
                              size: "xlarge",
                              className: sY.trackingToken,
                          }),
                      });
            }
            let sZ = ({
                    trackingIssue: e,
                    url: l,
                    omitIcon: n,
                    omitHover: a,
                }) => {
                    let s = (function (e) {
                        return "COMPLETED" === e
                            ? { color: "done.fg", icon: V.IssueClosedIcon }
                            : "NOT_PLANNED" === e
                              ? { color: "fg.muted", icon: V.SkipIcon }
                              : { color: "open.fg", icon: V.IssueOpenedIcon };
                    })(e.stateReason);
                    return (0, F.jsxs)(F.Fragment, {
                        children: [
                            (0, F.jsx)("span", {
                                "data-hovercard-url": a
                                    ? void 0
                                    : `${l}/tracked_in/hovercard/`,
                                className: sY.trackedByText,
                                children: "Listed in",
                            }),
                            (0, F.jsxs)(
                                "div",
                                {
                                    "data-hovercard-url": a
                                        ? void 0
                                        : `${e.url}/hovercard`,
                                    className: sY.trackingInfoContainer,
                                    children: [
                                        !n &&
                                            (0, F.jsx)(W.A, {
                                                icon: s.icon,
                                                size: 16,
                                                sx: { color: s.color },
                                            }),
                                        (0, F.jsx)(ek.A, {
                                            href: e.url,
                                            children: `#${e.number}`,
                                        }),
                                    ],
                                },
                                e.number
                            ),
                        ],
                    });
                },
                s0 = ({ trackingIssues: e, url: l, omitHover: n }) =>
                    (0, F.jsx)("span", {
                        "data-hovercard-url": n
                            ? void 0
                            : `${l}/tracked_in/hovercard/`,
                        children: `Listed in ${e.length} issues`,
                    });
            try {
                sJ.displayName || (sJ.displayName = "TrackedBy");
            } catch {}
            try {
                sZ.displayName || (sZ.displayName = "SingleTrackingItem");
            } catch {}
            try {
                s0.displayName || (s0.displayName = "MultipleTrackingItems");
            } catch {}
            function s1({
                headerMetadataKey: e,
                optionConfig: l,
                isSticky: n,
                containerRef: a,
                headerMetadataSecondaryKey: s,
            }) {
                let { showRepositoryPill: i, innerSx: t } = l,
                    r = (0, nM.u)("issue_dependencies"),
                    u = (0, N.useFragment)(aU, e),
                    o = (0, ap.w)(a?.current ?? null),
                    d = [];
                return (
                    l.insideSidePanel && d.push("js-second-sticky-header"),
                    (0, F.jsxs)(F.Fragment, {
                        children: [
                            (0, F.jsx)(af.H, {
                                sx: t,
                                children: (0, F.jsx)(eO.az, {
                                    "data-testid": ab.Y.issueMetadataFixed,
                                    sx: {
                                        height: "100%",
                                        mb: n ? "-56px" : void 0,
                                        minHeight: "56px",
                                        width: "100%",
                                    },
                                    className: a7.metadataContainer,
                                    children: (0, F.jsx)("div", {
                                        className: a7.metadataBorder,
                                        children: (0, F.jsxs)("div", {
                                            className: a7.metadataContent,
                                            children: [
                                                (0, F.jsx)(ss, {
                                                    isSticky: n,
                                                    stateData: u,
                                                }),
                                                (0, F.jsx)(aX, { data: u }),
                                                (0, F.jsx)(so, {
                                                    subIssuePrimaryKey: u,
                                                    subIssueSecondaryKey: s,
                                                }),
                                                r &&
                                                    (0, F.jsx)(az, {
                                                        blockedBySecondaryKey:
                                                            s,
                                                    }),
                                                (0, F.jsx)(a9, {
                                                    parentKey: s,
                                                    optionConfig: l,
                                                }),
                                                (0, F.jsx)(Q.Suspense, {
                                                    children: (0, F.jsx)(sJ, {
                                                        url: u.url,
                                                        trackedByKey: s,
                                                    }),
                                                }),
                                                (0, F.jsx)(sD, {
                                                    issueData: u,
                                                }),
                                                i &&
                                                    (0, F.jsx)(sH, {
                                                        repositoryPillData: u,
                                                    }),
                                            ],
                                        }),
                                    }),
                                }),
                            }),
                            (0, F.jsx)(eO.az, {
                                "data-testid": ab.Y.issueMetadataSticky,
                                sx: {
                                    display: n ? "flex" : "none",
                                    height: "56px",
                                    justifyContent: "center",
                                    position: "sticky",
                                    width: "100%",
                                    zIndex: 14,
                                    top: "var(--base-sticky-header-height, 0)",
                                },
                                id: "issue-viewer-sticky-header",
                                className: (0, eb.$)(d, a7.stickyContainer),
                                children: (0, F.jsx)(af.H, {
                                    sx: t,
                                    children: (0, F.jsxs)("div", {
                                        className: a7.stickyContent,
                                        children: [
                                            (0, F.jsx)(ss, {
                                                isSticky: n,
                                                stateData: u,
                                            }),
                                            (0, F.jsxs)("div", {
                                                className: a7.titleAndMetadata,
                                                children: [
                                                    (0, F.jsx)(sQ, {
                                                        headerTitleData: u,
                                                        scrollToTopOnClick:
                                                            l.scrollToTopOnClick,
                                                    }),
                                                    (0, F.jsxs)(eO.az, {
                                                        sx: {
                                                            display:
                                                                l.useViewportQueries
                                                                    ? [
                                                                          "none",
                                                                          "none",
                                                                          "flex",
                                                                          "flex",
                                                                      ]
                                                                    : o([
                                                                          "none",
                                                                          "none",
                                                                          "flex",
                                                                          "flex",
                                                                      ]),
                                                            "& > *:not(:last-child)::after":
                                                                {},
                                                        },
                                                        className:
                                                            a7.smallMetadataRow,
                                                        children: [
                                                            (0, F.jsx)(aJ, {
                                                                data: u,
                                                            }),
                                                            (0, F.jsx)(so, {
                                                                subIssuePrimaryKey:
                                                                    u,
                                                                subIssueSecondaryKey:
                                                                    s,
                                                                size: "small",
                                                            }),
                                                            r &&
                                                                (0, F.jsx)(az, {
                                                                    blockedBySecondaryKey:
                                                                        s,
                                                                    size: "small",
                                                                }),
                                                            (0, F.jsx)(a9, {
                                                                parentKey: s,
                                                                optionConfig: l,
                                                                small: !0,
                                                            }),
                                                            (0, F.jsx)(
                                                                Q.Suspense,
                                                                {
                                                                    children:
                                                                        (0,
                                                                        F.jsx)(
                                                                            sX,
                                                                            {
                                                                                url: u.url,
                                                                                trackedByKey:
                                                                                    s,
                                                                            }
                                                                        ),
                                                                }
                                                            ),
                                                            (0, F.jsx)(sD, {
                                                                issueData: u,
                                                                isSmall: !0,
                                                            }),
                                                            i &&
                                                                (0, F.jsx)(sq, {
                                                                    repositoryPillData:
                                                                        u,
                                                                }),
                                                        ],
                                                    }),
                                                ],
                                            }),
                                            (0, F.jsx)("div", {
                                                children: (0, F.jsx)(a5, {
                                                    optionConfig: l,
                                                    headerMenuData: u,
                                                    containerRef: a,
                                                }),
                                            }),
                                        ],
                                    }),
                                }),
                            }),
                            (0, F.jsx)(sL, { metadataKey: u }),
                        ],
                    })
                );
            }
            try {
                s1.displayName || (s1.displayName = "HeaderMetadata");
            } catch {}
            let s2 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "HeaderViewer",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanUpdateNext",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "login",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    { args: null, kind: "FragmentSpread", name: "HeaderMenu" },
                ],
                type: "Issue",
                abstractKey: null,
            };
            s2.hash = "3cf3147bbe18ccb67717436d818f5d22";
            var s4 = n(9583);
            let s6 = {
                headerContainer: "HeaderViewer-module__headerContainer--kkVCB",
                minimalHeader: "HeaderViewer-module__minimalHeader--O9qRU",
                PageHeader_TitleArea:
                    "HeaderViewer-module__PageHeader_TitleArea--RYvOA",
                PageHeader_Title:
                    "HeaderViewer-module__PageHeader_Title--n_x9h",
                VerifiedHTMLBox: "HeaderViewer-module__VerifiedHTMLBox--_DgIv",
                issueNumberContainer:
                    "HeaderViewer-module__issueNumberContainer--hF8U2",
                issueNumberLink: "HeaderViewer-module__issueNumberLink--QVBTb",
                issueNumberText: "HeaderViewer-module__issueNumberText--ofQHQ",
                PageHeader_ContextAreaActions:
                    "HeaderViewer-module__PageHeader_ContextAreaActions--zjX2m",
                PageHeader_ContextArea:
                    "HeaderViewer-module__PageHeader_ContextArea--sRz2x",
                desktopMetadataContainer:
                    "HeaderViewer-module__desktopMetadataContainer--m1a4Z",
                metadataWrapper: "HeaderViewer-module__metadataWrapper--b43vN",
                PageHeader_Actions:
                    "HeaderViewer-module__PageHeader_Actions--SRZVA",
            };
            function s5({
                headerViewerKey: e,
                optionConfig: l,
                containerRef: n,
                ...a
            }) {
                let s = (0, N.useFragment)(s2, e),
                    { titleHTML: i, number: t, url: r, repository: u } = s,
                    { titleAs: o = "h1" } = l,
                    d = (0, F.jsx)(a6, {
                        optionConfig: l,
                        headerMenuData: s,
                        containerRef: n,
                        ...a,
                    }),
                    c = (0, ap.w)(n?.current ?? null),
                    m =
                        !s.viewerCanUpdateNext &&
                        !l.showIssueCreateButton &&
                        !l.additionalHeaderActions &&
                        !l.customEditMenuEntries;
                return (0, F.jsx)("div", {
                    "aria-label": "Header",
                    role: "region",
                    "data-testid": ab.Y.issueHeader,
                    children: (0, F.jsxs)(s4.z, {
                        className: `${s6.headerContainer} ${m ? s6.minimalHeader : ""}`,
                        children: [
                            (0, F.jsx)(s4.z.TitleArea, {
                                className: s6.PageHeader_TitleArea,
                                children: (0, F.jsxs)(s4.z.Title, {
                                    as: o,
                                    sx: {
                                        fontSize: l.useViewportQueries
                                            ? [
                                                  "26px",
                                                  "26px",
                                                  "var(--text-title-size-large, 32px)",
                                                  "var(--text-title-size-large, 32px)",
                                              ]
                                            : c([
                                                  "26px",
                                                  "26px",
                                                  "var(--text-title-size-large, 32px)",
                                                  "var(--text-title-size-large, 32px)",
                                              ]),
                                        mr: l.insideSidePanel ? void 0 : 2,
                                    },
                                    className: s6.PageHeader_Title,
                                    children: [
                                        (0, F.jsx)(aq.vb, {
                                            as: "bdi",
                                            sx: {
                                                mr: l.insideSidePanel
                                                    ? 2
                                                    : void 0,
                                            },
                                            className: (0, eb.$)(
                                                "markdown-title",
                                                s6.VerifiedHTMLBox
                                            ),
                                            html: i,
                                            "data-testid": ab.Y.issueTitle,
                                        }),
                                        l.insideSidePanel
                                            ? (0, F.jsx)("div", {
                                                  className:
                                                      s6.issueNumberContainer,
                                                  children: (0, F.jsx)(ek.A, {
                                                      href: r,
                                                      "data-hovercard-url": (0,
                                                      eg.Nbg)({
                                                          owner: u.owner.login,
                                                          repo: u.name,
                                                          issueNumber: t,
                                                      }),
                                                      className:
                                                          s6.issueNumberLink,
                                                      children:
                                                          aK.k.issueNumber(t),
                                                  }),
                                              })
                                            : (0, F.jsxs)(F.Fragment, {
                                                  children: [
                                                      "\xa0",
                                                      (0, F.jsx)("span", {
                                                          className:
                                                              s6.issueNumberText,
                                                          children:
                                                              aK.k.issueNumber(
                                                                  t
                                                              ),
                                                      }),
                                                  ],
                                              }),
                                    ],
                                }),
                            }),
                            (0, F.jsx)(s4.z.ContextArea, {
                                children: (0, F.jsx)(s4.z.ContextAreaActions, {
                                    className: s6.PageHeader_ContextAreaActions,
                                    children: d,
                                }),
                            }),
                            !l.useViewportQueries &&
                                (0, F.jsx)(s4.z.ContextArea, {
                                    hidden: !1,
                                    className: s6.PageHeader_ContextArea,
                                    children: (0, F.jsx)("div", {
                                        className: s6.desktopMetadataContainer,
                                        children: (0, F.jsx)(eO.az, {
                                            sx: {
                                                display: c([
                                                    "flex",
                                                    "flex",
                                                    "none",
                                                    "none",
                                                ]),
                                            },
                                            className: s6.metadataWrapper,
                                            children: d,
                                        }),
                                    }),
                                }),
                            (0, F.jsx)(s4.z.Actions, {
                                sx: {
                                    display: l.useViewportQueries
                                        ? ["none", "none", "flex", "flex"]
                                        : c(["none", "none", "flex", "flex"]),
                                },
                                className: s6.PageHeader_Actions,
                                children: d,
                            }),
                        ],
                    }),
                });
            }
            try {
                s5.displayName || (s5.displayName = "HeaderViewer");
            } catch {}
            let s7 = {
                jumpToBottom: "JumpToBottom-module__jumpToBottom--JczYs",
            };
            function s3() {
                let e = (function () {
                    let [e, l] = (0, Q.useState)("comment-composer-heading"),
                        [n, a] = (0, Q.useState)(!1);
                    return (
                        (0, Q.useEffect)(() => {
                            n ||
                                (l(
                                    document.querySelector(
                                        "[data-jump-to-bottom-target]"
                                    )?.id
                                ),
                                a(!0));
                        }, [n]),
                        e
                    );
                })();
                return e
                    ? (0, F.jsx)(ek.A, {
                          className: s7.jumpToBottom,
                          href: `#${e}`,
                          children: "Jump to bottom",
                      })
                    : null;
            }
            try {
                s3.displayName || (s3.displayName = "JumpToBottom");
            } catch {}
            function s8({
                issue: e,
                issueSecondary: l,
                optionConfig: n,
                containerRef: a,
            }) {
                let s = (0, N.useFragment)(aC, e),
                    i = (0, N.useFragment)(ax, l),
                    t = i?.isTransferInProgress ?? !1,
                    {
                        id: r,
                        title: u,
                        number: o,
                        repository: { nameWithOwner: d },
                    } = s,
                    [c, m] = (0, Q.useState)(u),
                    g = (0, Q.useRef)(null),
                    [y, p] = (0, Q.useState)(!1),
                    [k, b] = (0, Q.useState)(!1),
                    h =
                        void 0 === n.selectedProjectId &&
                        !n.shouldSkipSetDocumentTitle;
                ((0, Q.useEffect)(() => {
                    u && h && (0, aR.D)(`${c} \xb7 Issue #${o} \xb7 ${d}`);
                }, [h, u, d, o, c]),
                    (0, Q.useEffect)(() => {
                        y || m(u);
                    }, [y, u, m]),
                    (0, Q.useEffect)(() => {
                        y && g.current && g.current.focus();
                    }, [y]));
                let {
                        isSticky: f,
                        hasRoots: K,
                        stickyStyles: S,
                        observe: I,
                        unobserve: v,
                    } = (0, ng.a)(),
                    [L, T] = (0, Q.useState)(t);
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsxs)(af.H, {
                            sx: n.innerSx,
                            children: [
                                L &&
                                    (0, F.jsxs)(e$.A, {
                                        "aria-live": "polite",
                                        className: aj.transferWarningFlash,
                                        children: [
                                            "Issue transfer in progress",
                                            (0, F.jsx)(q.K, {
                                                variant: "invisible",
                                                "aria-label":
                                                    "Dismiss issue is in transfer notification",
                                                icon: V.XIcon,
                                                onClick: () => T(!1),
                                            }),
                                        ],
                                    }),
                                y || k
                                    ? (0, F.jsx)(aV, {
                                          issueId: r,
                                          title: c,
                                          titleRef: g,
                                          onTitleChange: (e) => {
                                              let l = e.target.value;
                                              null !== l && l !== c && m(l);
                                          },
                                          onIssueUpdate: n.onIssueUpdate,
                                          cancelIssueTitleEdit: () => {
                                              (b(!1), p(!1));
                                          },
                                          isDirty: u !== c,
                                          isSubmitting: k,
                                          setIsSubmitting: b,
                                          emojiSkinTonePreference:
                                              n.emojiSkinTonePreference,
                                      })
                                    : (0, F.jsx)(s5, {
                                          headerViewerKey: s,
                                          optionConfig: n,
                                          setIsIssueTitleEditActive: p,
                                          containerRef: a,
                                          parentKey: l,
                                      }),
                            ],
                        }),
                        (0, F.jsx)(s1, {
                            headerMetadataKey: s,
                            optionConfig: n,
                            isSticky: K && f,
                            setIsIssueTitleEditActive: p,
                            stickyStyles: S,
                            containerRef: a,
                            headerMetadataSecondaryKey: l,
                        }),
                        (0, aN.Fr)() && (0, F.jsx)(s3, {}),
                        (0, F.jsx)(nm.X, {
                            onObserve: I,
                            onUnobserve: v,
                            className: aj.stickyObservableBox,
                        }),
                        (0, F.jsx)("div", {
                            className: aj.HeaderContentWrapper,
                            children: (0, F.jsx)(af.H, {
                                sx: { ...n.innerSx },
                                children: (0, F.jsx)("div", {
                                    className: aj.headerSpacer,
                                }),
                            }),
                        }),
                    ],
                });
            }
            try {
                s8.displayName || (s8.displayName = "Header");
            } catch {}
            let s9 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueSidebarSecondary",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "OptionsSectionSecondary",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "AssigneesSectionLazyFragment",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            s9.hash = "8fc24bb52effd976666af3d674ce0d7d";
            let ie = {
                argumentDefinitions: [
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "allowedOwner",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "IssueSidebarPrimaryQuery",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "AssigneesSectionFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "LabelsSectionFragment",
                    },
                    {
                        args: [
                            {
                                kind: "Variable",
                                name: "allowedOwner",
                                variableName: "allowedOwner",
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "ProjectsSectionFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "MilestonesSectionFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "OptionsSectionFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "TypesSectionFragment",
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "FieldsSectionFragment",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            ie.hash = "dedc5f445c2698fbfc52de57413c66a9";
            var il = n(84158),
                ia = n(30107),
                is = n(42315),
                ii = n(21728),
                it = n(65787);
            function ir(e) {
                let l,
                    n,
                    a = (0, ii.c)(6),
                    { children: s, topOffset: i } = e,
                    t = `calc(${(void 0 === i ? 0 : i) + 16}px + var(--base-sticky-header-height, 0px))`;
                a[0] !== t
                    ? ((l = { topOffset: t, bottomPadding: 24 }),
                      (a[0] = t),
                      (a[1] = l))
                    : (l = a[1]);
                let { styles: r, ref: u } = (function (e) {
                    let l,
                        n,
                        a,
                        s,
                        i,
                        t,
                        r,
                        u,
                        o,
                        d,
                        c,
                        m,
                        g,
                        y,
                        p,
                        k,
                        F,
                        b,
                        h,
                        f = (0, ii.c)(28),
                        { topOffset: K, bottomPadding: S } = e,
                        I = (0, Q.useRef)(null);
                    f[0] === Symbol.for("react.memo_cache_sentinel")
                        ? ((l = {}), (f[0] = l))
                        : (l = f[0]);
                    let [v, L] = (0, Q.useState)(l),
                        T = (0, Q.useRef)(null),
                        C = (0, Q.useRef)("down"),
                        x = (0, Q.useRef)(!1),
                        R = (0, Q.useRef)(!1),
                        N = (0, Q.useRef)(!1),
                        j = (0, Q.useRef)(!1),
                        _ = (0, Q.useRef)(!1),
                        w = (0, Q.useRef)(null),
                        E = (0, Q.useRef)(0),
                        A = (0, Q.useRef)(0),
                        P = (0, Q.useRef)(0),
                        B = (0, Q.useRef)(0),
                        D = (0, Q.useRef)(0),
                        M = (0, Q.useRef)(null);
                    (f[1] === Symbol.for("react.memo_cache_sentinel")
                        ? ((n = () => {
                              let e = I.current;
                              if (!e) return;
                              let l = (0, it.U)(e);
                              l === document.documentElement
                                  ? ((w.current = window), (E.current = 0))
                                  : ((w.current = l ?? null),
                                    (E.current =
                                        l?.getBoundingClientRect().top ?? 0));
                          }),
                          (a = [I]),
                          (f[1] = n),
                          (f[2] = a))
                        : ((n = f[1]), (a = f[2])),
                        (0, Q.useEffect)(n, a),
                        f[3] !== K
                            ? ((s = () => {
                                  let e = I.current;
                                  if (!e) return;
                                  let l = Math.max(
                                      Math.min(
                                          e.offsetTop - D.current,
                                          A.current - B.current
                                      ),
                                      0
                                  );
                                  if (N.current) {
                                      ((C.current = "up"),
                                          L({ position: "sticky", top: K }));
                                      return;
                                  }
                                  if (x.current && R.current)
                                      return void L({
                                          position: "sticky",
                                          top: K,
                                      });
                                  if ("up" === C.current)
                                      x.current
                                          ? L({ position: "sticky", top: K })
                                          : L({
                                                position: "relative",
                                                top: `${l}px`,
                                            });
                                  else {
                                      let e = Math.max(E.current, 0);
                                      R.current
                                          ? L({
                                                position: "sticky",
                                                top: `${P.current - e}px`,
                                            })
                                          : L({
                                                position: "relative",
                                                top: `${l}px`,
                                            });
                                  }
                              }),
                              (f[3] = K),
                              (f[4] = s))
                            : (s = f[4]));
                    let V = s;
                    f[5] !== V
                        ? ((i = (e) => {
                              let l =
                                  "sticky-sidebar-top-sentinel" === e.target.id;
                              ((j.current = !0),
                                  l
                                      ? ((x.current = e.isIntersecting),
                                        (P.current = e.boundingClientRect.top))
                                      : ((R.current = e.isIntersecting),
                                        (P.current =
                                            e.boundingClientRect.top -
                                            B.current +
                                            Math.floor(
                                                e.intersectionRect.height
                                            ))),
                                  N.current || V());
                          }),
                          (f[5] = V),
                          (f[6] = i))
                        : (i = f[6]);
                    let U = i;
                    (f[7] !== V
                        ? ((t = () => {
                              let e = I.current;
                              e &&
                                  e.getBoundingClientRect().top < 0 &&
                                  ((N.current = !0), V());
                          }),
                          (r = [V]),
                          (f[7] = V),
                          (f[8] = t),
                          (f[9] = r))
                        : ((t = f[8]), (r = f[9])),
                        (0, Q.useEffect)(t, r),
                        f[10] === Symbol.for("react.memo_cache_sentinel")
                            ? ((u = () =>
                                  w.current
                                      ? w.current instanceof Window
                                          ? w.current.scrollY
                                          : w.current.scrollTop
                                      : 0),
                              (f[10] = u))
                            : (u = f[10]));
                    let O = u;
                    return (
                        f[11] !== V
                            ? ((d = () => {
                                  let e = !1;
                                  if (!w.current) return;
                                  let l = w.current,
                                      n = O(),
                                      a = () => {
                                          let l = O(),
                                              a = Math.abs(l - n);
                                          if (
                                              (a > 600
                                                  ? ((N.current = !0), V())
                                                  : (j.current || _.current) &&
                                                    (N.current = !1),
                                              a < 10)
                                          ) {
                                              e = !1;
                                              return;
                                          }
                                          let s = l > n ? "down" : "up";
                                          (C.current !== s &&
                                              ((C.current = s),
                                              (_.current = !0),
                                              V()),
                                              (n = l > 0 ? l : 0),
                                              (e = !1));
                                      },
                                      s = () => {
                                          e ||
                                              (window.requestAnimationFrame(a),
                                              (e = !0));
                                      };
                                  return (
                                      l.addEventListener("scroll", s),
                                      () => l.removeEventListener("scroll", s)
                                  );
                              }),
                              (o = [V, I, w, O]),
                              (f[11] = V),
                              (f[12] = o),
                              (f[13] = d))
                            : ((o = f[12]), (d = f[13])),
                        (0, Q.useEffect)(d, o),
                        f[14] !== K || f[15] !== U
                            ? ((c = () => {
                                  let e = I.current;
                                  if (!e) return;
                                  let l = e.parentElement;
                                  if (!l) return;
                                  let n = document.createElement("div"),
                                      a = document.createElement("div");
                                  ((n.style.position = "absolute"),
                                      (n.style.top = `calc(-1 * ${K})`),
                                      (n.style.height = "1px"),
                                      (n.style.width = "1px"),
                                      (n.style.pointerEvents = "none"),
                                      (n.id = "sticky-sidebar-top-sentinel"),
                                      (a.style.position = "absolute"),
                                      (a.style.bottom = "-300px"),
                                      (a.style.height = "300px"),
                                      (a.style.width = "0"),
                                      (a.style.pointerEvents = "none"),
                                      (a.id = "sticky-sidebar-bottom-sentinel"),
                                      e.appendChild(n),
                                      e.appendChild(a),
                                      (T.current = new IntersectionObserver(
                                          (e) => {
                                              for (let l of e) U(l);
                                          }
                                      )),
                                      T.current.observe(n),
                                      T.current.observe(a));
                                  let s = document.createElement("div");
                                  return (
                                      (s.style.position = "relative"),
                                      (s.style.height = "0px"),
                                      (s.style.width = "0px"),
                                      (s.style.pointerEvents = "none"),
                                      l.insertBefore(s, e),
                                      (M.current = s),
                                      () => {
                                          (T.current && T.current.disconnect(),
                                              n.parentNode === e &&
                                                  e.removeChild(n),
                                              a.parentNode === e &&
                                                  e.removeChild(a),
                                              M.current?.parentNode === l &&
                                                  l.removeChild(M.current));
                                      }
                                  );
                              }),
                              (m = [K, U, I]),
                              (f[14] = K),
                              (f[15] = U),
                              (f[16] = c),
                              (f[17] = m))
                            : ((c = f[16]), (m = f[17])),
                        (0, Q.useEffect)(c, m),
                        f[18] !== S
                            ? ((g = () => {
                                  if (!I.current) return;
                                  let e = new ResizeObserver((e) => {
                                      for (let l of e)
                                          B.current = l.contentRect.height + S;
                                  });
                                  return (
                                      e.observe(I.current),
                                      () => e.disconnect()
                                  );
                              }),
                              (y = [I, S]),
                              (f[18] = S),
                              (f[19] = g),
                              (f[20] = y))
                            : ((g = f[19]), (y = f[20])),
                        (0, Q.useEffect)(g, y),
                        f[21] !== V
                            ? ((p = () => {
                                  if (!I.current || !I.current.parentElement)
                                      return;
                                  let e = new ResizeObserver((e) => {
                                      for (let l of e)
                                          A.current = l.contentRect.height;
                                      V();
                                  });
                                  return (
                                      e.observe(I.current.parentElement),
                                      () => e.disconnect()
                                  );
                              }),
                              (k = [V, I]),
                              (f[21] = V),
                              (f[22] = p),
                              (f[23] = k))
                            : ((p = f[22]), (k = f[23])),
                        (0, Q.useEffect)(p, k),
                        f[24] === Symbol.for("react.memo_cache_sentinel")
                            ? ((F = () => {
                                  if (!I.current || !I.current.parentElement)
                                      return;
                                  let e = new ResizeObserver((e) => {
                                      D.current = M.current?.offsetTop || 0;
                                  });
                                  return (
                                      e.observe(document.body),
                                      () => e.disconnect()
                                  );
                              }),
                              (b = [I]),
                              (f[24] = F),
                              (f[25] = b))
                            : ((F = f[24]), (b = f[25])),
                        (0, Q.useEffect)(F, b),
                        f[26] !== v
                            ? ((h = { styles: v, ref: I }),
                              (f[26] = v),
                              (f[27] = h))
                            : (h = f[27]),
                        h
                    );
                })(l);
                return (
                    a[2] !== s || a[3] !== u || a[4] !== r
                        ? ((n = (0, F.jsx)("div", {
                              ref: u,
                              style: r,
                              "data-testid": "sticky-sidebar",
                              children: s,
                          })),
                          (a[2] = s),
                          (a[3] = u),
                          (a[4] = r),
                          (a[5] = n))
                        : (n = a[5]),
                    n
                );
            }
            try {
                ir.displayName || (ir.displayName = "StickySidebar");
            } catch {}
            let iu = {
                    sidebarContent:
                        "IssueSidebar-module__sidebarContent--II51T",
                },
                io = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueSidebarLazySections",
                    selections: [
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "DevelopmentSectionFragment",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "RelationshipsSectionFragment",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "SubscriptionSectionFragment",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "SubscriptionSectionRefetchableFragment",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "ParticipantsSectionFragment",
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            io.hash = "440743140fae76d46b8ac1137ed79a6e";
            let id = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "target",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "oid",
                                storageKey: null,
                            },
                            e,
                            t,
                        ],
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "associatedPullRequests",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "DevelopmentSectionFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                e,
                                l,
                                n,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [a],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        e,
                        s,
                        i,
                        l,
                        {
                            alias: null,
                            args: [
                                { kind: "Literal", name: "first", value: 25 },
                            ],
                            concreteType: "LinkedBranchConnection",
                            kind: "LinkedField",
                            name: "linkedBranches",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "LinkedBranch",
                                    kind: "LinkedField",
                                    name: "nodes",
                                    plural: !0,
                                    selections: [
                                        e,
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Ref",
                                            kind: "LinkedField",
                                            name: "ref",
                                            plural: !1,
                                            selections: [
                                                {
                                                    kind: "InlineDataFragmentSpread",
                                                    name: "BranchPickerRef",
                                                    selections: [
                                                        n,
                                                        e,
                                                        t,
                                                        r,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "Repository",
                                                            kind: "LinkedField",
                                                            name: "repository",
                                                            plural: !1,
                                                            selections: [
                                                                e,
                                                                u,
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "Ref",
                                                                    kind: "LinkedField",
                                                                    name: "defaultBranchRef",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            n,
                                                                            e,
                                                                            r,
                                                                            o,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    "Repository",
                                                                                kind: "LinkedField",
                                                                                name: "repository",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        e,
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                        o,
                                                    ],
                                                    args: null,
                                                    argumentDefinitions: [],
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: "linkedBranches(first:25)",
                        },
                        {
                            alias: null,
                            args: [
                                { kind: "Literal", name: "first", value: 10 },
                                {
                                    kind: "Literal",
                                    name: "includeClosedPrs",
                                    value: !0,
                                },
                            ],
                            concreteType: "PullRequestConnection",
                            kind: "LinkedField",
                            name: "closedByPullRequestsReferences",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PullRequest",
                                    kind: "LinkedField",
                                    name: "nodes",
                                    plural: !0,
                                    selections: [
                                        {
                                            kind: "InlineDataFragmentSpread",
                                            name: "PullRequestAndBranchPickerPullRequest",
                                            selections: [
                                                e,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "url",
                                                    storageKey: null,
                                                },
                                                i,
                                                s,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "state",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "isDraft",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "isInMergeQueue",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "createdAt",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "Repository",
                                                    kind: "LinkedField",
                                                    name: "repository",
                                                    plural: !1,
                                                    selections: [
                                                        e,
                                                        n,
                                                        u,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType: null,
                                                            kind: "LinkedField",
                                                            name: "owner",
                                                            plural: !1,
                                                            selections: [a, t],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                                t,
                                            ],
                                            args: null,
                                            argumentDefinitions: [],
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey:
                                "closedByPullRequestsReferences(first:10,includeClosedPrs:true)",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "LinkedPullRequests",
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanLinkBranches",
                            storageKey: null,
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            id.hash = "afc467a99e1d52d87ab96b6bfb55037d";
            let ic = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    l = [
                        e,
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "repo",
                        },
                    ],
                    n = {
                        kind: "Variable",
                        name: "owner",
                        variableName: "owner",
                    },
                    a = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "repo",
                        },
                        n,
                    ],
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "issueTypesEnabled",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isLocked",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isPrivate",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "visibility",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isArchived",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInOrganization",
                        storageKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasIssuesEnabled",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasAnyTemplates",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "slashCommandsEnabled",
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isBlankIssuesEnabled",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: [
                            {
                                kind: "Literal",
                                name: "action",
                                value: "create an issue",
                            },
                        ],
                        kind: "ScalarField",
                        name: "viewerInteractionLimitReasonHTML",
                        storageKey:
                            'viewerInteractionLimitReasonHTML(action:"create an issue")',
                    },
                    S = {
                        alias: null,
                        args: null,
                        concreteType: "IssueCreationPermissions",
                        kind: "LinkedField",
                        name: "viewerIssueCreationPermissions",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "labelable",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "milestoneable",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "assignable",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "triageable",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "typeable",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "canSetIssueFields",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "securityPolicyUrl",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "contributingFileUrl",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "codeOfConductFileUrl",
                        storageKey: null,
                    },
                    T = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "supportFileUrl",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "shortDescriptionHTML",
                        storageKey: null,
                    },
                    x = {
                        alias: null,
                        args: null,
                        concreteType: "RepositoryPlanFeatures",
                        kind: "LinkedField",
                        name: "planFeatures",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "maximumAssignees",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    R = [
                        {
                            kind: "InlineDataFragmentSpread",
                            name: "RepositoryPickerRepository",
                            selections: [
                                s,
                                i,
                                t,
                                r,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [i, u, o, d],
                                    storageKey: null,
                                },
                                c,
                                m,
                                g,
                                y,
                                p,
                                k,
                                F,
                                b,
                                h,
                                f,
                                K,
                                S,
                                I,
                                v,
                                L,
                                T,
                                C,
                                x,
                            ],
                            args: null,
                            argumentDefinitions: [],
                        },
                    ],
                    N = {
                        kind: "Literal",
                        name: "orderBy",
                        value: { direction: "DESC", field: "UPDATED_AT" },
                    },
                    j = [
                        s,
                        i,
                        t,
                        r,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "owner",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "__typename",
                                    storageKey: null,
                                },
                                i,
                                u,
                                o,
                                d,
                                s,
                            ],
                            storageKey: null,
                        },
                        c,
                        m,
                        g,
                        y,
                        p,
                        k,
                        F,
                        b,
                        h,
                        f,
                        K,
                        S,
                        I,
                        v,
                        L,
                        T,
                        C,
                        x,
                    ];
                return {
                    fragment: {
                        argumentDefinitions: l,
                        kind: "Fragment",
                        metadata: null,
                        name: "DevelopmentSectionReposQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: R,
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "viewer",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineDataFragmentSpread",
                                        name: "RepositoryPickerTopRepositories",
                                        selections: [
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Variable",
                                                        name: "first",
                                                        variableName:
                                                            "topRepositoriesFirst",
                                                    },
                                                    {
                                                        kind: "Variable",
                                                        name: "hasIssuesEnabled",
                                                        variableName:
                                                            "hasIssuesEnabled",
                                                    },
                                                    N,
                                                    n,
                                                ],
                                                concreteType:
                                                    "RepositoryConnection",
                                                kind: "LinkedField",
                                                name: "topRepositories",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "RepositoryEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: R,
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        args: null,
                                        argumentDefinitions: [
                                            {
                                                defaultValue: !0,
                                                kind: "LocalArgument",
                                                name: "hasIssuesEnabled",
                                            },
                                            e,
                                            {
                                                defaultValue: 10,
                                                kind: "LocalArgument",
                                                name: "topRepositoriesFirst",
                                            },
                                        ],
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: l,
                        kind: "Operation",
                        name: "DevelopmentSectionReposQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: j,
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "viewer",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "first",
                                                value: 10,
                                            },
                                            {
                                                kind: "Literal",
                                                name: "hasIssuesEnabled",
                                                value: !0,
                                            },
                                            N,
                                        ],
                                        concreteType: "RepositoryConnection",
                                        kind: "LinkedField",
                                        name: "topRepositories",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "RepositoryEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "Repository",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: j,
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey:
                                            'topRepositories(first:10,hasIssuesEnabled:true,orderBy:{"direction":"DESC","field":"UPDATED_AT"})',
                                    },
                                    s,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "44337e2a6ee2a91bd3c0c27560f72e20",
                        metadata: {},
                        name: "DevelopmentSectionReposQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            ic.hash = "7be5f97261a12d7ecefab4d443eacbe1";
            let im = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "owner",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "repo",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "repo",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "target",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "oid",
                                storageKey: null,
                            },
                            n,
                            s,
                        ],
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "associatedPullRequests",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    r = [
                        a,
                        n,
                        s,
                        i,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                n,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Ref",
                                    kind: "LinkedField",
                                    name: "defaultBranchRef",
                                    plural: !1,
                                    selections: [
                                        a,
                                        n,
                                        i,
                                        t,
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Repository",
                                            kind: "LinkedField",
                                            name: "repository",
                                            plural: !1,
                                            selections: [n],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        t,
                    ],
                    u = [
                        {
                            kind: "InlineDataFragmentSpread",
                            name: "BranchPickerRef",
                            selections: r,
                            args: null,
                            argumentDefinitions: [],
                        },
                    ],
                    o = [
                        { kind: "Literal", name: "first", value: 25 },
                        {
                            kind: "Literal",
                            name: "refPrefix",
                            value: "refs/heads/",
                        },
                    ],
                    d = [
                        {
                            kind: "InlineDataFragmentSpread",
                            name: "BranchPickerSharedRef",
                            selections: r,
                            args: null,
                            argumentDefinitions: [],
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "DevelopmentSectionBranchesQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineDataFragmentSpread",
                                        name: "BranchPickerRepositoryBranchRefs",
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Ref",
                                                kind: "LinkedField",
                                                name: "defaultBranchRef",
                                                plural: !1,
                                                selections: u,
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: o,
                                                concreteType: "RefConnection",
                                                kind: "LinkedField",
                                                name: "refs",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        kind: "InlineDataFragmentSpread",
                                                        name: "BranchPickerRepositoryBranches",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "RefEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Ref",
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            u,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        args: null,
                                                        argumentDefinitions: [],
                                                    },
                                                ],
                                                storageKey:
                                                    'refs(first:25,refPrefix:"refs/heads/")',
                                            },
                                        ],
                                        args: null,
                                        argumentDefinitions: [],
                                    },
                                    {
                                        kind: "InlineDataFragmentSpread",
                                        name: "BranchPickerSharedRepositoryBranchRefs",
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Ref",
                                                kind: "LinkedField",
                                                name: "defaultBranchRef",
                                                plural: !1,
                                                selections: d,
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: o,
                                                concreteType: "RefConnection",
                                                kind: "LinkedField",
                                                name: "refs",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        kind: "InlineDataFragmentSpread",
                                                        name: "BranchPickerSharedRepositoryBranches",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "RefEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Ref",
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            d,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        args: null,
                                                        argumentDefinitions: [],
                                                    },
                                                ],
                                                storageKey:
                                                    'refs(first:25,refPrefix:"refs/heads/")',
                                            },
                                        ],
                                        args: null,
                                        argumentDefinitions: [],
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "DevelopmentSectionBranchesQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Ref",
                                        kind: "LinkedField",
                                        name: "defaultBranchRef",
                                        plural: !1,
                                        selections: r,
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: o,
                                        concreteType: "RefConnection",
                                        kind: "LinkedField",
                                        name: "refs",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "RefEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Ref",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: r,
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey:
                                            'refs(first:25,refPrefix:"refs/heads/")',
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "a5ac03fdc849ff8c256104e7fa8423c9",
                        metadata: {},
                        name: "DevelopmentSectionBranchesQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            im.hash = "0a1350710c29aaa34c077fb8f1e8841c";
            var ig = n(2495),
                iy = n(16810),
                ip = n(21798);
            (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    n = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "target",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "oid",
                                storageKey: null,
                            },
                            a,
                            i,
                        ],
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "associatedPullRequests",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    u = [
                        s,
                        a,
                        i,
                        t,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                a,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Ref",
                                    kind: "LinkedField",
                                    name: "defaultBranchRef",
                                    plural: !1,
                                    selections: [
                                        s,
                                        a,
                                        t,
                                        r,
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Repository",
                                            kind: "LinkedField",
                                            name: "repository",
                                            plural: !1,
                                            selections: [a],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        r,
                    ],
                    o = [
                        {
                            kind: "InlineDataFragmentSpread",
                            name: "BranchPickerRef",
                            selections: u,
                            args: null,
                            argumentDefinitions: [],
                        },
                    ],
                    d = [
                        { kind: "Literal", name: "first", value: 25 },
                        {
                            kind: "Literal",
                            name: "refPrefix",
                            value: "refs/heads/",
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, l],
                        kind: "Fragment",
                        metadata: null,
                        name: "BranchPickerRepositoryBranchesQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineDataFragmentSpread",
                                        name: "BranchPickerRepositoryBranchRefs",
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Ref",
                                                kind: "LinkedField",
                                                name: "defaultBranchRef",
                                                plural: !1,
                                                selections: o,
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: d,
                                                concreteType: "RefConnection",
                                                kind: "LinkedField",
                                                name: "refs",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        kind: "InlineDataFragmentSpread",
                                                        name: "BranchPickerRepositoryBranches",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "RefEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Ref",
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            o,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        args: null,
                                                        argumentDefinitions: [],
                                                    },
                                                ],
                                                storageKey:
                                                    'refs(first:25,refPrefix:"refs/heads/")',
                                            },
                                        ],
                                        args: null,
                                        argumentDefinitions: [],
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, e],
                        kind: "Operation",
                        name: "BranchPickerRepositoryBranchesQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    a,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Ref",
                                        kind: "LinkedField",
                                        name: "defaultBranchRef",
                                        plural: !1,
                                        selections: u,
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: d,
                                        concreteType: "RefConnection",
                                        kind: "LinkedField",
                                        name: "refs",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "RefEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Ref",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: u,
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey:
                                            'refs(first:25,refPrefix:"refs/heads/")',
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "7319648851ece31f26cbd26dc431185a",
                        metadata: {},
                        name: "BranchPickerRepositoryBranchesQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })().hash = "379faafddfb7432c18055ea644544898";
            let ik = {
                kind: "InlineDataFragment",
                name: "BranchPickerRepositoryBranchRefs",
            };
            ik.hash = "3987830ca22f372a937fcef8c7dd5e8b";
            let iF = {
                kind: "InlineDataFragment",
                name: "BranchPickerRepositoryBranches",
            };
            iF.hash = "fc20fd3ed00706559cd5314915dda570";
            let ib = { kind: "InlineDataFragment", name: "BranchPickerRef" };
            ib.hash = "98ea8dab9ebd07b2e3330c4f789fa7b3";
            let ih = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "target",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "oid",
                                storageKey: null,
                            },
                            i,
                            t,
                        ],
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "associatedPullRequests",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n, a],
                        kind: "Fragment",
                        metadata: null,
                        name: "BranchPickerSearchBranchesQuery",
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "BranchPickerSearchBranchesFragment",
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [n, l, e, a],
                        kind: "Operation",
                        name: "BranchPickerSearchBranchesQuery",
                        selections: [
                            {
                                alias: null,
                                args: [
                                    {
                                        kind: "Variable",
                                        name: "name",
                                        variableName: "name",
                                    },
                                    {
                                        kind: "Variable",
                                        name: "owner",
                                        variableName: "owner",
                                    },
                                ],
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "first",
                                                variableName: "first",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "query",
                                                variableName: "query",
                                            },
                                            {
                                                kind: "Literal",
                                                name: "refPrefix",
                                                value: "refs/heads/",
                                            },
                                        ],
                                        concreteType: "RefConnection",
                                        kind: "LinkedField",
                                        name: "refs",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "RefEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Ref",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [
                                                            s,
                                                            i,
                                                            t,
                                                            r,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "repository",
                                                                plural: !1,
                                                                selections: [
                                                                    i,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "nameWithOwner",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Ref",
                                                                        kind: "LinkedField",
                                                                        name: "defaultBranchRef",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                s,
                                                                                i,
                                                                                r,
                                                                                u,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            i,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            u,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    i,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "1a36b75f74be7de2d87b1a5de6d10511",
                        metadata: {},
                        name: "BranchPickerSearchBranchesQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            ih.hash = "88b11505f4054c53e3e0f6e9d965f58a";
            let iK = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "target",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "oid",
                                storageKey: null,
                            },
                            l,
                            n,
                        ],
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "associatedPullRequests",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [
                        { kind: "RootArgument", name: "first" },
                        { kind: "RootArgument", name: "name" },
                        { kind: "RootArgument", name: "owner" },
                        { kind: "RootArgument", name: "query" },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "BranchPickerSearchBranchesFragment",
                    selections: [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "name",
                                    variableName: "name",
                                },
                                {
                                    kind: "Variable",
                                    name: "owner",
                                    variableName: "owner",
                                },
                            ],
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Variable",
                                            name: "first",
                                            variableName: "first",
                                        },
                                        {
                                            kind: "Variable",
                                            name: "query",
                                            variableName: "query",
                                        },
                                        {
                                            kind: "Literal",
                                            name: "refPrefix",
                                            value: "refs/heads/",
                                        },
                                    ],
                                    concreteType: "RefConnection",
                                    kind: "LinkedField",
                                    name: "refs",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "RefEdge",
                                            kind: "LinkedField",
                                            name: "edges",
                                            plural: !0,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "Ref",
                                                    kind: "LinkedField",
                                                    name: "node",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            kind: "InlineDataFragmentSpread",
                                                            name: "BranchPickerRef",
                                                            selections: [
                                                                e,
                                                                l,
                                                                n,
                                                                a,
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "Repository",
                                                                    kind: "LinkedField",
                                                                    name: "repository",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            l,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "nameWithOwner",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    "Ref",
                                                                                kind: "LinkedField",
                                                                                name: "defaultBranchRef",
                                                                                plural: !1,
                                                                                selections:
                                                                                    [
                                                                                        e,
                                                                                        l,
                                                                                        a,
                                                                                        s,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                "Repository",
                                                                                            kind: "LinkedField",
                                                                                            name: "repository",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    l,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                s,
                                                            ],
                                                            args: null,
                                                            argumentDefinitions:
                                                                [],
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Query",
                    abstractKey: null,
                };
            })();
            iK.hash = "a9785b05fefd0c1ae7aea87d04f60956";
            var iS = n(67126),
                iI = n(19918),
                iv = n(38143),
                iL = n(86391);
            (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    n = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "target",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "oid",
                                storageKey: null,
                            },
                            a,
                            i,
                        ],
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "associatedPullRequests",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    u = [
                        s,
                        a,
                        i,
                        t,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                a,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Ref",
                                    kind: "LinkedField",
                                    name: "defaultBranchRef",
                                    plural: !1,
                                    selections: [
                                        s,
                                        a,
                                        t,
                                        r,
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Repository",
                                            kind: "LinkedField",
                                            name: "repository",
                                            plural: !1,
                                            selections: [a],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        r,
                    ],
                    o = [
                        {
                            kind: "InlineDataFragmentSpread",
                            name: "BranchPickerSharedRef",
                            selections: u,
                            args: null,
                            argumentDefinitions: [],
                        },
                    ],
                    d = [
                        { kind: "Literal", name: "first", value: 25 },
                        {
                            kind: "Literal",
                            name: "refPrefix",
                            value: "refs/heads/",
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, l],
                        kind: "Fragment",
                        metadata: null,
                        name: "BranchPickerSharedRepositoryBranchesQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineDataFragmentSpread",
                                        name: "BranchPickerSharedRepositoryBranchRefs",
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Ref",
                                                kind: "LinkedField",
                                                name: "defaultBranchRef",
                                                plural: !1,
                                                selections: o,
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: d,
                                                concreteType: "RefConnection",
                                                kind: "LinkedField",
                                                name: "refs",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        kind: "InlineDataFragmentSpread",
                                                        name: "BranchPickerSharedRepositoryBranches",
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "RefEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Ref",
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            o,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        args: null,
                                                        argumentDefinitions: [],
                                                    },
                                                ],
                                                storageKey:
                                                    'refs(first:25,refPrefix:"refs/heads/")',
                                            },
                                        ],
                                        args: null,
                                        argumentDefinitions: [],
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, e],
                        kind: "Operation",
                        name: "BranchPickerSharedRepositoryBranchesQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    a,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Ref",
                                        kind: "LinkedField",
                                        name: "defaultBranchRef",
                                        plural: !1,
                                        selections: u,
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: d,
                                        concreteType: "RefConnection",
                                        kind: "LinkedField",
                                        name: "refs",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "RefEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Ref",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: u,
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey:
                                            'refs(first:25,refPrefix:"refs/heads/")',
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "4bf3d95fd398c3d49f0b8c528450d9a7",
                        metadata: {},
                        name: "BranchPickerSharedRepositoryBranchesQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })().hash = "e2b11d8caf768a67f0a73880cfd6240c";
            let iT = {
                kind: "InlineDataFragment",
                name: "BranchPickerSharedRef",
            };
            iT.hash = "074c41183822ce4769d51cb770c375e7";
            let iC = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "name",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "query",
                    },
                    s = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "name",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    i = [
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "first",
                        },
                        {
                            kind: "Variable",
                            name: "query",
                            variableName: "query",
                        },
                        {
                            kind: "Literal",
                            name: "refPrefix",
                            value: "refs/heads/",
                        },
                    ],
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "target",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "oid",
                                storageKey: null,
                            },
                            r,
                            u,
                        ],
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "associatedPullRequests",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    c = [
                        t,
                        r,
                        u,
                        o,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                r,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Ref",
                                    kind: "LinkedField",
                                    name: "defaultBranchRef",
                                    plural: !1,
                                    selections: [
                                        t,
                                        r,
                                        o,
                                        d,
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Repository",
                                            kind: "LinkedField",
                                            name: "repository",
                                            plural: !1,
                                            selections: [r],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        d,
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n, a],
                        kind: "Fragment",
                        metadata: null,
                        name: "BranchPickerSharedSearchBranchesQuery",
                        selections: [
                            {
                                alias: null,
                                args: s,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: i,
                                        concreteType: "RefConnection",
                                        kind: "LinkedField",
                                        name: "refs",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "RefEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Ref",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                kind: "InlineDataFragmentSpread",
                                                                name: "BranchPickerSharedRef",
                                                                selections: c,
                                                                args: null,
                                                                argumentDefinitions:
                                                                    [],
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [n, l, e, a],
                        kind: "Operation",
                        name: "BranchPickerSharedSearchBranchesQuery",
                        selections: [
                            {
                                alias: null,
                                args: s,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: i,
                                        concreteType: "RefConnection",
                                        kind: "LinkedField",
                                        name: "refs",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "RefEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Ref",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: c,
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    r,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "2f4196b04a15576aa8ced0ee205dd700",
                        metadata: {},
                        name: "BranchPickerSharedSearchBranchesQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            iC.hash = "7926eae095a68017f748df671436de12";
            var ix = n(46747),
                iR = n(46309);
            function iN({ fetchSearchData: e, ...l }) {
                let [n, a] = (0, Q.useState)(""),
                    s = (0, ix.d)((l) => e(l), iv.t.pickerDebounceTime),
                    i = (0, Q.useCallback)(
                        (e) => {
                            let l = e.trim();
                            n !== l && (s(l), a(e));
                        },
                        [s, n]
                    );
                return (0, F.jsx)(ij, { ...l, onFilter: i });
            }
            function ij({
                items: e,
                initialSelectedItem: l,
                onFilter: n,
                defaultBranchId: a,
                onSelectionChange: s,
                "aria-labelledby": i,
                "aria-describedby": t,
                title: r,
                loading: u = !1,
            }) {
                let o = (0, Q.useCallback)(
                        (e) => {
                            n(e);
                        },
                        [n]
                    ),
                    d = (0, Q.useCallback)((e) => e.id, []),
                    c = (0, Q.useCallback)(
                        (e) => ({
                            id: `${e.id}`,
                            children: (0, F.jsx)("span", { children: e.name }),
                            source: e,
                            leadingVisual: () =>
                                (0, F.jsx)(W.A, {
                                    icon: V.GitBranchIcon,
                                    size: 16,
                                }),
                            trailingVisual: () =>
                                e.id === a
                                    ? (0, F.jsx)("span", {
                                          children: "Default",
                                      })
                                    : null,
                        }),
                        [a]
                    ),
                    m = (0, Q.useRef)(null),
                    g = (0, Q.useCallback)(
                        ({ ...e }) =>
                            (0, F.jsx)($.Q, {
                                leadingVisual: V.GitBranchIcon,
                                trailingVisual: V.TriangleDownIcon,
                                "aria-label": i ? void 0 : iI.k.selectBranch,
                                "aria-labelledby": i,
                                "aria-describedby": t,
                                ...e,
                                ref: m,
                                children: l
                                    ? (0, F.jsx)("span", { children: l.name })
                                    : iI.k.selectBranch,
                            }),
                        [t, i, l]
                    ),
                    y = (0, Q.useMemo)(() => 0 === e.length, [e]);
                return (0, F.jsx)(iR.B, {
                    children: (0, F.jsx)(iL.O, {
                        items: e,
                        initialSelectedItems: l ? [l] : [],
                        filterItems: o,
                        getItemKey: d,
                        convertToItemProps: c,
                        placeholderText: iI.k.selectBranch,
                        selectionVariant: "single",
                        onSelectionChange: ([e]) => s(e),
                        loading: u,
                        renderAnchor: g,
                        selectPanelRef: m,
                        enforceAtleastOneSelected: !0,
                        resultListAriaLabel: "Branch results",
                        title: r ?? "Select a branch",
                        width: "large",
                        improvedNoMatchAccessibility: y,
                        noMatchMessage: y
                            ? {
                                  title: "No branches were found",
                                  variant: "empty",
                                  body: "Try searching with a different query for results.",
                              }
                            : void 0,
                    }),
                });
            }
            try {
                iN.displayName || (iN.displayName = "BranchPicker");
            } catch {}
            try {
                ij.displayName || (ij.displayName = "BranchPickerBase");
            } catch {}
            try {
                (r = ({ currentBranch: e }) =>
                    (0, F.jsx)($.Q, {
                        leadingVisual: V.GitBranchIcon,
                        trailingVisual: V.TriangleDownIcon,
                        disabled: !0,
                        children: e ?? iI.k.selectBranch,
                    })).displayName ||
                    (r.displayName = "BranchPickerPlaceholder");
            } catch {}
            async function i_(e, l) {
                let { owner: n, repo: a, query: s } = l,
                    i = await (0, eh.fetchQuery)(e, iE, {
                        owner: n,
                        name: a,
                        query: s,
                        first: 25,
                    }).toPromise();
                return i && i.repository && i.repository.refs
                    ? ((i?.repository?.refs?.edges || [])
                          .map((e) => {
                              var l;
                              return (l = e?.node ?? null)
                                  ? (0, eh.readInlineData)(iw, l)
                                  : null;
                          })
                          .filter((e) => !!e) ?? [])
                    : [];
            }
            let iw = iT,
                iE = iC;
            function iA({
                initialBranch: e,
                defaultBranchId: l,
                branches: n,
                owner: a,
                repo: s,
                onSelect: i,
                title: t,
                "aria-labelledby": r,
                "aria-describedby": u,
            }) {
                let [o, d] = (0, Q.useState)(void 0),
                    [c, m] = (0, Q.useState)(!1),
                    { addToast: g } = (0, M.Y6)(),
                    y = (0, Q.useMemo)(() => {
                        let l =
                            (n || [])
                                .filter((e) => !!e)
                                .filter((l) => l && l.id !== e?.id) ?? [];
                        return (e && l.unshift(e), l);
                    }, [n, e]),
                    p = (0, Q.useMemo)(() => o || y, [y, o]),
                    k = (0, N.useRelayEnvironment)(),
                    b = (0, Q.useCallback)(
                        async (e) => {
                            if (!e) return void d(void 0);
                            m(!0);
                            try {
                                let l = await i_(k, {
                                    owner: a,
                                    repo: s,
                                    query: e,
                                });
                                (d(l), m(!1));
                            } catch {
                                (g({
                                    type: "error",
                                    message: iS.S.couldNotSearchBranches,
                                }),
                                    m(!1));
                            }
                        },
                        [g, k, a, s]
                    );
                return (0, F.jsx)(iN, {
                    items: p,
                    fetchSearchData: b,
                    initialSelectedItem: e,
                    defaultBranchId: l,
                    onSelectionChange: i,
                    loading: c,
                    "aria-labelledby": r,
                    "aria-describedby": u,
                    title: t,
                });
            }
            try {
                iA.displayName || (iA.displayName = "BranchPickerInternal");
            } catch {}
            function iP(e) {
                return (0, F.jsx)(iA, { ...e });
            }
            try {
                iP.displayName || (iP.displayName = "BranchPickerRelay");
            } catch {}
            let iB = {
                branchPickerContainer:
                    "BranchPicker-module__branchPickerContainer--_N8dW",
            };
            function iD(e) {
                return e ? (0, eh.readInlineData)(iV, e) : null;
            }
            function iM(e) {
                return (0, _.G7)("item_picker_branch_relay_migration")
                    ? (0, F.jsx)(iP, { ...e })
                    : (0, F.jsx)(iO, { ...e });
            }
            let iV = ib,
                iU = ({ currentBranch: e }) =>
                    (0, F.jsx)($.Q, {
                        leadingVisual: V.GitBranchIcon,
                        trailingVisual: V.TriangleDownIcon,
                        disabled: !0,
                        children: e ?? iI.k.selectBranch,
                    });
            function iO({
                initialBranch: e,
                defaultBranchId: l,
                branches: n,
                owner: a,
                repo: s,
                onSelect: i,
                title: t,
                "aria-labelledby": r,
                "aria-describedby": u,
            }) {
                let [o, d] = (0, Q.useState)(null),
                    [c, m] = (0, Q.useState)(void 0),
                    [g, y] = (0, Q.useState)(!1),
                    [p, k] = (0, Q.useState)(""),
                    { addToast: b } = (0, M.Y6)(),
                    h = (0, N.useFragment)(iK, o),
                    f = (0, Q.useMemo)(() => {
                        if (h)
                            return (h?.repository?.refs?.edges || []).flatMap(
                                (e) =>
                                    e?.node
                                        ? [(0, eh.readInlineData)(iV, e.node)]
                                        : []
                            );
                    }, [h]);
                (0, Q.useEffect)(() => {
                    m(f);
                }, [f]);
                let K = (0, Q.useMemo)(() => {
                        let l =
                            (n || [])
                                .filter((e) => !!e)
                                .filter((l) => l && l.id !== e?.id) ?? [];
                        return (e && l.unshift(e), l);
                    }, [n, e]),
                    S = (0, Q.useMemo)(() => c || K, [K, c]),
                    I = (0, N.useRelayEnvironment)(),
                    v = (0, Q.useCallback)(
                        (e) => {
                            if (!e) return void m(void 0);
                            (y(!0),
                                (0, eh.fetchQuery)(I, ih, {
                                    owner: a,
                                    name: s,
                                    query: e,
                                    first: 25,
                                }).subscribe({
                                    next: (e) => {
                                        (null !== e && d(e), y(!1));
                                    },
                                    error: () => {
                                        (b({
                                            type: "error",
                                            message:
                                                iS.S.couldNotSearchAssignees,
                                        }),
                                            y(!1));
                                    },
                                }));
                        },
                        [b, I, a, s]
                    ),
                    L = (0, ix.d)((e) => v(e), iv.t.pickerDebounceTime),
                    T = (0, Q.useCallback)(
                        (e) => {
                            let l = e.trim();
                            p !== l && (L(l), k(e));
                        },
                        [L, p]
                    );
                return (0, F.jsx)(iq, {
                    items: S,
                    initialSelectedItem: e,
                    onFilter: T,
                    defaultBranchId: l,
                    onSelectionChange: i,
                    loading: g,
                    "aria-labelledby": r,
                    "aria-describedby": u,
                    title: t,
                });
            }
            function iq({
                items: e,
                initialSelectedItem: l,
                onFilter: n,
                defaultBranchId: a,
                onSelectionChange: s,
                "aria-labelledby": i,
                "aria-describedby": t,
                title: r,
                loading: u = !1,
            }) {
                let o = (0, Q.useCallback)(
                        (e) => {
                            n(e);
                        },
                        [n]
                    ),
                    d = (0, Q.useCallback)((e) => e.id, []),
                    c = (0, Q.useCallback)(
                        (e) => ({
                            id: `${e.id}`,
                            children: (0, F.jsx)("span", { children: e.name }),
                            source: e,
                            leadingVisual: () =>
                                (0, F.jsx)(W.A, {
                                    icon: V.GitBranchIcon,
                                    size: 16,
                                }),
                            trailingVisual: () =>
                                e.id === a
                                    ? (0, F.jsx)("span", {
                                          children: "Default",
                                      })
                                    : null,
                        }),
                        [a]
                    ),
                    m = (0, Q.useRef)(null),
                    g = (0, Q.useCallback)(
                        ({ ...e }) =>
                            (0, F.jsx)($.Q, {
                                leadingVisual: V.GitBranchIcon,
                                trailingVisual: V.TriangleDownIcon,
                                "aria-label": i ? void 0 : iI.k.selectBranch,
                                "aria-labelledby": i,
                                "aria-describedby": t,
                                ...e,
                                ref: m,
                                children: l
                                    ? (0, F.jsx)("span", { children: l.name })
                                    : iI.k.selectBranch,
                            }),
                        [t, i, l]
                    ),
                    y = (0, Q.useMemo)(() => 0 === e.length, [e]);
                return (0, F.jsx)("div", {
                    className: iB.branchPickerContainer,
                    children: (0, F.jsx)(iL.O, {
                        items: e,
                        initialSelectedItems: l ? [l] : [],
                        filterItems: o,
                        getItemKey: d,
                        convertToItemProps: c,
                        placeholderText: iI.k.selectBranch,
                        selectionVariant: "single",
                        onSelectionChange: ([e]) => s(e),
                        loading: u,
                        renderAnchor: g,
                        selectPanelRef: m,
                        enforceAtleastOneSelected: !0,
                        resultListAriaLabel: "Branch results",
                        title: r ?? "Select a branch",
                        width: "large",
                        improvedNoMatchAccessibility: y,
                        noMatchMessage: y
                            ? {
                                  title: "No branches were found",
                                  variant: "empty",
                                  body: "Try searching with a different query for results.",
                              }
                            : void 0,
                    }),
                });
            }
            try {
                iM.displayName || (iM.displayName = "BranchPicker");
            } catch {}
            try {
                iU.displayName || (iU.displayName = "BranchPickerPlaceholder");
            } catch {}
            try {
                iO.displayName || (iO.displayName = "BranchPickerInternal");
            } catch {}
            try {
                iq.displayName || (iq.displayName = "BranchPickerBase");
            } catch {}
            let iH = {
                kind: "InlineDataFragment",
                name: "PullRequestAndBranchPickerPullRequest",
            };
            iH.hash = "fd9b60889d5ee27803b19a8eb508e3c1";
            let i$ = (function () {
                var e = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    l = { kind: "Literal", name: "type", value: "ISSUE" },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    s = [
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "nodes",
                            plural: !0,
                            selections: [
                                {
                                    kind: "InlineDataFragmentSpread",
                                    name: "PullRequestAndBranchPickerPullRequest",
                                    selections: [
                                        {
                                            kind: "InlineFragment",
                                            selections: [
                                                n,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "url",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "number",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "title",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "state",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "isDraft",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "isInMergeQueue",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "createdAt",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: "Repository",
                                                    kind: "LinkedField",
                                                    name: "repository",
                                                    plural: !1,
                                                    selections: [
                                                        n,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "name",
                                                            storageKey: null,
                                                        },
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "nameWithOwner",
                                                            storageKey: null,
                                                        },
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType: null,
                                                            kind: "LinkedField",
                                                            name: "owner",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "login",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                a,
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                                a,
                                            ],
                                            type: "PullRequest",
                                            abstractKey: null,
                                        },
                                    ],
                                    args: null,
                                    argumentDefinitions: [],
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    argumentDefinitions: [
                        { kind: "RootArgument", name: "assignee" },
                        { kind: "RootArgument", name: "author" },
                        { kind: "RootArgument", name: "commenters" },
                        { kind: "RootArgument", name: "first" },
                        { kind: "RootArgument", name: "mentions" },
                        { kind: "RootArgument", name: "open" },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "PullRequestAndBranchPickerQuery",
                    selections: [
                        {
                            alias: "commenters",
                            args: [
                                e,
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "commenters",
                                },
                                l,
                            ],
                            concreteType: "SearchResultItemConnection",
                            kind: "LinkedField",
                            name: "search",
                            plural: !1,
                            selections: s,
                            storageKey: null,
                        },
                        {
                            alias: "mentions",
                            args: [
                                e,
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "mentions",
                                },
                                l,
                            ],
                            concreteType: "SearchResultItemConnection",
                            kind: "LinkedField",
                            name: "search",
                            plural: !1,
                            selections: s,
                            storageKey: null,
                        },
                        {
                            alias: "assignee",
                            args: [
                                e,
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "assignee",
                                },
                                l,
                            ],
                            concreteType: "SearchResultItemConnection",
                            kind: "LinkedField",
                            name: "search",
                            plural: !1,
                            selections: s,
                            storageKey: null,
                        },
                        {
                            alias: "author",
                            args: [
                                e,
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "author",
                                },
                                l,
                            ],
                            concreteType: "SearchResultItemConnection",
                            kind: "LinkedField",
                            name: "search",
                            plural: !1,
                            selections: s,
                            storageKey: null,
                        },
                        {
                            alias: "open",
                            args: [
                                e,
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "open",
                                },
                                l,
                            ],
                            concreteType: "SearchResultItemConnection",
                            kind: "LinkedField",
                            name: "search",
                            plural: !1,
                            selections: s,
                            storageKey: null,
                        },
                    ],
                    type: "Query",
                    abstractKey: null,
                };
            })();
            i$.hash = "d643437af0cd5cf935a33be6780d0289";
            let iz = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "assignee",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "author",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "commenters",
                    },
                    a = {
                        defaultValue: 10,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "mentions",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "open",
                    },
                    t = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    r = { kind: "Literal", name: "type", value: "ISSUE" },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    d = [
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "nodes",
                            plural: !0,
                            selections: [
                                u,
                                {
                                    kind: "InlineFragment",
                                    selections: [
                                        o,
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "url",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "number",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "title",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "state",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "isDraft",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "isInMergeQueue",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "createdAt",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Repository",
                                            kind: "LinkedField",
                                            name: "repository",
                                            plural: !1,
                                            selections: [
                                                o,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "name",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "nameWithOwner",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: null,
                                                    kind: "LinkedField",
                                                    name: "owner",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            kind: "ScalarField",
                                                            name: "login",
                                                            storageKey: null,
                                                        },
                                                        u,
                                                        o,
                                                    ],
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: [o],
                                    type: "Node",
                                    abstractKey: "__isNode",
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n, a, s, i],
                        kind: "Fragment",
                        metadata: null,
                        name: "PullRequestAndBranchPickerSearchQuery",
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "PullRequestAndBranchPickerQuery",
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [n, s, e, l, i, a],
                        kind: "Operation",
                        name: "PullRequestAndBranchPickerSearchQuery",
                        selections: [
                            {
                                alias: "commenters",
                                args: [
                                    t,
                                    {
                                        kind: "Variable",
                                        name: "query",
                                        variableName: "commenters",
                                    },
                                    r,
                                ],
                                concreteType: "SearchResultItemConnection",
                                kind: "LinkedField",
                                name: "search",
                                plural: !1,
                                selections: d,
                                storageKey: null,
                            },
                            {
                                alias: "mentions",
                                args: [
                                    t,
                                    {
                                        kind: "Variable",
                                        name: "query",
                                        variableName: "mentions",
                                    },
                                    r,
                                ],
                                concreteType: "SearchResultItemConnection",
                                kind: "LinkedField",
                                name: "search",
                                plural: !1,
                                selections: d,
                                storageKey: null,
                            },
                            {
                                alias: "assignee",
                                args: [
                                    t,
                                    {
                                        kind: "Variable",
                                        name: "query",
                                        variableName: "assignee",
                                    },
                                    r,
                                ],
                                concreteType: "SearchResultItemConnection",
                                kind: "LinkedField",
                                name: "search",
                                plural: !1,
                                selections: d,
                                storageKey: null,
                            },
                            {
                                alias: "author",
                                args: [
                                    t,
                                    {
                                        kind: "Variable",
                                        name: "query",
                                        variableName: "author",
                                    },
                                    r,
                                ],
                                concreteType: "SearchResultItemConnection",
                                kind: "LinkedField",
                                name: "search",
                                plural: !1,
                                selections: d,
                                storageKey: null,
                            },
                            {
                                alias: "open",
                                args: [
                                    t,
                                    {
                                        kind: "Variable",
                                        name: "query",
                                        variableName: "open",
                                    },
                                    r,
                                ],
                                concreteType: "SearchResultItemConnection",
                                kind: "LinkedField",
                                name: "search",
                                plural: !1,
                                selections: d,
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "ae0114521f65dd854d864261f36810cc",
                        metadata: {},
                        name: "PullRequestAndBranchPickerSearchQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            iz.hash = "8dbbb085c7f66c21dc7898ad77f765d3";
            var iW = n(19695);
            let iQ = {
                    pullRequestItemContainer:
                        "PullRequestAndBranchPicker-module__pullRequestItemContainer--aphtv",
                    subtitleText:
                        "PullRequestAndBranchPicker-module__subtitleText--tT_MJ",
                    pickerContainer:
                        "PullRequestAndBranchPicker-module__pickerContainer--R4naP",
                },
                iG = { groupId: "selected" },
                iY = {
                    groupId: "suggestions",
                    header: { title: "Suggestions", variant: "filled" },
                },
                iX = (e) =>
                    (0, _.G7)("item_picker_branch_relay_migration")
                        ? (0, F.jsx)(iZ, { ...e })
                        : (0, F.jsx)(iJ, { ...e }),
                iJ = ({
                    repoNameWithOwner: e,
                    initialSelectedPrs: l,
                    initialSelectedBranches: n,
                    loading: a,
                    ...s
                }) => {
                    let { addToast: i } = (0, M.Y6)(),
                        t = (0, N.useRelayEnvironment)(),
                        [r, u] = (0, Q.useState)(null),
                        [o, d] = (0, Q.useState)(""),
                        [c, m] = (0, Q.useState)(a ?? !1),
                        [g, y] = (0, Q.useState)(null),
                        p = (0, Q.useCallback)(
                            (l) => {
                                let n = e.split("/"),
                                    a = n[0],
                                    s = n[1];
                                if (a && s)
                                    return new Promise((e, n) => {
                                        (0, N.fetchQuery)(t, ih, {
                                            owner: a,
                                            name: s,
                                            query: l,
                                            first: 25,
                                        }).subscribe({
                                            next: (e) => {
                                                null !== e && (y(e), m(!1));
                                            },
                                            error: (e) => {
                                                n(e);
                                            },
                                        });
                                    });
                            },
                            [t, e]
                        ),
                        k = (0, Q.useCallback)(
                            (l) => {
                                if (!e) return;
                                m(!0);
                                let n = `${l} sort:created-desc`;
                                (0, N.fetchQuery)(t, iz, i5(e, n)).subscribe({
                                    next: (e) => {
                                        null !== e && (u(e), m(!1));
                                    },
                                    error: () => {
                                        (m(!1),
                                            i({
                                                type: "error",
                                                message:
                                                    iS.S
                                                        .couldNotSearchPullRequests,
                                            }));
                                    },
                                });
                            },
                            [i, t, e]
                        ),
                        b = (0, Q.useCallback)(
                            (e) => {
                                (p(e), k(e));
                            },
                            [k, p]
                        ),
                        h = (0, ix.d)((e) => b(e), iv.t.pickerDebounceTime);
                    return (
                        (0, Q.useEffect)(() => {
                            ey.X3 || b(o);
                        }, [e]),
                        (0, Q.useEffect)(() => {
                            h(o);
                        }, [h, o]),
                        (0, F.jsx)(i0, {
                            pullRequestItemsKey: r,
                            branchItemsKey: g,
                            initialSelectedPrs: l,
                            initialSelectedBranches: n,
                            onFilter: function (e) {
                                d(e);
                            },
                            loading: c,
                            ...s,
                        })
                    );
                },
                iZ = ({
                    repoNameWithOwner: e,
                    initialSelectedPrs: l,
                    initialSelectedBranches: n,
                    loading: a,
                    ...s
                }) => {
                    let { addToast: i } = (0, M.Y6)(),
                        t = (0, N.useRelayEnvironment)(),
                        [r, u] = (0, Q.useState)(null),
                        [o, d] = (0, Q.useState)(""),
                        [c, m] = (0, Q.useState)(a ?? !1),
                        [g, y] = (0, Q.useState)([]),
                        p = (0, Q.useCallback)(
                            async (l) => {
                                let n = e.split("/"),
                                    a = n[0],
                                    s = n[1];
                                a &&
                                    s &&
                                    (y(
                                        await i_(t, {
                                            owner: a,
                                            repo: s,
                                            query: l,
                                        })
                                    ),
                                    m(!1));
                            },
                            [t, e]
                        ),
                        k = (0, Q.useCallback)(
                            (l) => {
                                if (!e) return;
                                m(!0);
                                let n = `${l} sort:created-desc`;
                                (0, N.fetchQuery)(t, iz, i5(e, n)).subscribe({
                                    next: (e) => {
                                        null !== e && (u(e), m(!1));
                                    },
                                    error: () => {
                                        (m(!1),
                                            i({
                                                type: "error",
                                                message:
                                                    iS.S
                                                        .couldNotSearchPullRequests,
                                            }));
                                    },
                                });
                            },
                            [i, t, e]
                        ),
                        b = (0, Q.useCallback)(
                            (e) => {
                                (p(e), k(e));
                            },
                            [k, p]
                        ),
                        h = (0, ix.d)((e) => b(e), iv.t.pickerDebounceTime);
                    return (
                        (0, Q.useEffect)(() => {
                            ey.X3 || b(o);
                        }, [e]),
                        (0, Q.useEffect)(() => {
                            h(o);
                        }, [h, o]),
                        (0, F.jsx)(i2, {
                            pullRequestItemsKey: r,
                            branches: g,
                            initialSelectedPrs: l,
                            initialSelectedBranches: n,
                            onFilter: function (e) {
                                d(e);
                            },
                            loading: c,
                            ...s,
                        })
                    );
                };
            function i0({
                pullRequestItemsKey: e,
                branchItemsKey: l,
                initialSelectedPrs: n = [],
                initialSelectedBranches: a = [],
                ...s
            }) {
                let i = (0, N.useFragment)(i$, e),
                    t = (0, Q.useMemo)(() => {
                        let e = new Map();
                        for (let l of i4(i ?? null)) e.set(l.id, l);
                        for (let l of n) e.set(l.id, l);
                        return [...e.values()].sort(i6);
                    }, [i, n]),
                    r = (0, N.useFragment)(iK, l),
                    u = (0, Q.useMemo)(() => {
                        let e = new Map();
                        for (let l of r?.repository?.refs?.edges
                            ?.map((e) => (e?.node ? iD(e.node) : null))
                            .filter((e) => !!e) ?? [])
                            e.set(l.id, l);
                        for (let l of a) e.set(l.id, l);
                        return [...e.values()];
                    }, [a, r?.repository?.refs?.edges]);
                return (0, F.jsx)(i1, {
                    initialSelectedPrs: n,
                    initialSelectedBranches: a,
                    pullRequestItems: t,
                    branchItems: u,
                    ...s,
                });
            }
            function i1({
                pullRequestItems: e,
                branchItems: l,
                initialSelectedPrs: n = [],
                initialSelectedBranches: a = [],
                loading: s,
                onFilter: i,
                anchorElement: t,
                shortcutsEnabled: r,
                ...u
            }) {
                let o = (0, _.G7)(
                        "issues_react_select_panel_fullscreen_on_narrow"
                    ),
                    d = (0, Q.useMemo)(() => [...n, ...a], [n, a]),
                    c = (0, Q.useRef)(null),
                    m = (0, Q.useMemo)(
                        () =>
                            l.filter(
                                (e) =>
                                    e.id !==
                                        e.repository.defaultBranchRef?.id &&
                                    0 === e.associatedPullRequests.totalCount
                            ),
                        [l]
                    ),
                    g = (0, Q.useCallback)(
                        (e) => {
                            i(e);
                        },
                        [i]
                    ),
                    y = (0, Q.useCallback)((e) => e.id, []),
                    p = (0, Q.useMemo)(() => {
                        let n = [];
                        return (
                            d.length > 0 && n.push(iG),
                            l.length + e.length > 0 &&
                                e.length + l.length - d.length > 0 &&
                                n.push(iY),
                            n
                        );
                    }, [l.length, d.length, e.length]),
                    k = (0, Q.useCallback)(
                        (e) => {
                            var l, s;
                            let i = "PullRequest" === e.__typename,
                                t = i ? e.title : e.name,
                                r = i
                                    ? `${e.repository.nameWithOwner}#${e.number}`
                                    : iI.k.noPullRequest,
                                u = i
                                    ? (0, F.jsx)(W.A, {
                                          icon:
                                              ((l = e),
                                              iW.I[
                                                  i7(
                                                      l.isDraft,
                                                      l.isInMergeQueue,
                                                      l.state
                                                  )
                                              ].icon),
                                          size: 16,
                                          sx: {
                                              path: {
                                                  fill:
                                                      ((s = e),
                                                      iW.I[
                                                          i7(
                                                              s.isDraft,
                                                              s.isInMergeQueue,
                                                              s.state
                                                          )
                                                      ].color),
                                              },
                                          },
                                      })
                                    : (0, F.jsx)(W.A, {
                                          icon: V.GitBranchIcon,
                                          size: 16,
                                      });
                            return {
                                id: `${e.id}`,
                                groupId: [...a, ...n].find((l) => l.id === e.id)
                                    ? iG.groupId
                                    : iY.groupId,
                                children: (0, F.jsxs)("div", {
                                    className: iQ.pullRequestItemContainer,
                                    children: [
                                        (0, F.jsx)("span", { children: t }),
                                        (0, F.jsx)("span", {
                                            className: iQ.subtitleText,
                                            children: r,
                                        }),
                                    ],
                                }),
                                source: e,
                                leadingVisual: () => u,
                                sx: { wordBreak: "break-word" },
                            };
                        },
                        [a, n]
                    ),
                    b = (0, Q.useCallback)(
                        ({ ...e }) =>
                            t
                                ? t(e)
                                : (0, F.jsx)($.Q, {
                                      leadingVisual: V.GitPullRequestIcon,
                                      trailingVisual: V.TriangleDownIcon,
                                      ...e,
                                      "aria-labelledby": "pr-picker-label",
                                      ref: c,
                                      children:
                                          d.length > 0
                                              ? iI.k.getNumberOfSelectedPrsLabel(
                                                    d.length
                                                )
                                              : iI.k.selectPr,
                                  }),
                        [t, d.length]
                    ),
                    h = (0, Q.useMemo)(() => [...e, ...m], [e, m]),
                    f = (0, Q.useMemo)(() => 0 === h.length, [h.length]);
                return (0, F.jsx)("div", {
                    className: iQ.pickerContainer,
                    children: (0, F.jsx)(iL.O, {
                        loading: s,
                        items: [...e, ...m],
                        initialSelectedItems: d,
                        groups: p,
                        filterItems: g,
                        getItemKey: y,
                        convertToItemProps: k,
                        placeholderText: iI.k.searchPr,
                        selectionVariant: "multiple",
                        selectPanelRef: c,
                        renderAnchor: b,
                        width: "medium",
                        resultListAriaLabel: "Pull request results",
                        height: "large",
                        improvedNoMatchAccessibility: f,
                        noMatchMessage: f
                            ? {
                                  title: "No pull requests or branches were found",
                                  variant: "empty",
                                  body: "Try searching with a different query for results.",
                              }
                            : void 0,
                        ...u,
                        responsiveOnNarrow: o,
                    }),
                });
            }
            function i2({
                pullRequestItemsKey: e,
                branches: l,
                initialSelectedPrs: n = [],
                initialSelectedBranches: a = [],
                ...s
            }) {
                let i = (0, N.useFragment)(i$, e),
                    t = (0, Q.useMemo)(() => {
                        let e = new Map();
                        for (let l of i4(i ?? null)) e.set(l.id, l);
                        for (let l of n) e.set(l.id, l);
                        return [...e.values()].sort(i6);
                    }, [i, n]),
                    r = (0, Q.useMemo)(() => {
                        let e = new Map();
                        for (let n of l) e.set(n.id, n);
                        for (let l of a) e.set(l.id, l);
                        return [...e.values()];
                    }, [l, a]);
                return (0, F.jsx)(i1, {
                    initialSelectedPrs: n,
                    initialSelectedBranches: a,
                    pullRequestItems: t,
                    branchItems: r,
                    ...s,
                });
            }
            function i4(e) {
                if (!e) return [];
                let {
                        commenters: l,
                        mentions: n,
                        assignee: a,
                        author: s,
                        open: i,
                    } = e,
                    t = [
                        ...(l?.nodes || []),
                        ...(n?.nodes || []),
                        ...(a?.nodes || []),
                        ...(s?.nodes || []),
                        ...(i?.nodes || []),
                    ],
                    r = new Map();
                for (let e of t)
                    if (void 0 !== e) {
                        let l = (0, N.readInlineData)(iH, e);
                        l && r.set(l.id, l);
                    }
                return Array.from(r.values());
            }
            function i6(e, l) {
                let n = new Date(e.createdAt),
                    a = new Date(l.createdAt);
                return n < a ? 1 : n > a ? -1 : 0;
            }
            let i5 = (e, l = "") => {
                    let n = `is:pr repo:${e}`,
                        a = l.trim();
                    return (
                        (a = a.length > 0 ? ` ${a}` : ""),
                        {
                            commenters: `${n} commenter:@me${a}`,
                            mentions: `${n} mentions:@me${a}`,
                            assignee: `${n} assignee:@me${a}`,
                            author: `${n} author:@me${a}`,
                            open: `${n} state:open${a}`,
                        }
                    );
                },
                i7 = (e, l, n) => {
                    if (e && "OPEN" === n) return "DRAFT";
                    if (l) return "IN_MERGE_QUEUE";
                    if ("CLOSED" === n || "MERGED" === n || "OPEN" === n)
                        return n;
                    throw Error(`Unknown pull request state: ${n}`);
                };
            try {
                (u = () =>
                    (0, F.jsx)($.Q, {
                        leadingVisual: V.GitPullRequestIcon,
                        trailingVisual: V.TriangleDownIcon,
                        "aria-labelledby": "pr-picker-label",
                        disabled: !0,
                        children: iI.k.selectPr,
                    })).displayName ||
                    (u.displayName = "PullRequestAndBranchPickerPlaceholder");
            } catch {}
            try {
                iX.displayName ||
                    (iX.displayName = "LazyPullRequestAndBranchPicker");
            } catch {}
            try {
                iJ.displayName ||
                    (iJ.displayName = "LazyPullRequestAndBranchPickerLegacy");
            } catch {}
            try {
                iZ.displayName ||
                    (iZ.displayName = "LazyPullRequestAndBranchPickerFuture");
            } catch {}
            try {
                i0.displayName ||
                    (i0.displayName = "PullRequestAndBranchPickerInternal");
            } catch {}
            try {
                i1.displayName ||
                    (i1.displayName = "PullRequestAndBranchPickerBase");
            } catch {}
            try {
                i2.displayName ||
                    (i2.displayName =
                        "PullRequestAndBranchPickerInternalFuture");
            } catch {}
            var i3 = n(39820),
                i8 = n(91985);
            let i9 = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [{ kind: "Variable", name: "id", variableName: "id" }],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "useCopilotAgentDefaultBranchRepositoryQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Ref",
                                                kind: "LinkedField",
                                                name: "defaultBranchRef",
                                                plural: !1,
                                                selections: [a],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Repository",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "useCopilotAgentDefaultBranchRepositoryQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Ref",
                                                kind: "LinkedField",
                                                name: "defaultBranchRef",
                                                plural: !1,
                                                selections: [a, s],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Repository",
                                        abstractKey: null,
                                    },
                                    s,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "9748ba602b2febc685e72253a522da4d",
                        metadata: {},
                        name: "useCopilotAgentDefaultBranchRepositoryQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            i9.hash = "d507f64d80526dd7fa065bad1d2ae573";
            var te = n(58615),
                tl = n(96379);
            function tn({ repoId: e, issueDatabaseId: l }) {
                let n = (0, N.useRelayEnvironment)(),
                    [a] = (0, te.M)("vscs_target", void 0),
                    [s] = (0, te.M)("vscs_target_url", void 0),
                    [i, t] = (0, Q.useState)(""),
                    r = (0, Q.useCallback)(
                        async (i) => {
                            (i && i.preventDefault(), t(""));
                            let r = ey.cg?.open("about:blank");
                            try {
                                let i = await (0, eh.fetchQuery)(n, i9, {
                                    id: e,
                                }).toPromise();
                                if (!i?.node) {
                                    (t(
                                        "Failed to fetch repository data. Please try again."
                                    ),
                                        r?.close());
                                    return;
                                }
                                let u = new FormData();
                                (u.append(
                                    "codespace[repository_id]",
                                    String(i.node?.databaseId)
                                ),
                                    u.append(
                                        "codespace[ref]",
                                        i.node?.defaultBranchRef?.name || "main"
                                    ),
                                    u.append("codespace[issue_id]", String(l)),
                                    a && u.append("codespace[vscs_target]", a),
                                    s &&
                                        u.append(
                                            "codespace[vscs_target_url]",
                                            s
                                        ));
                                let o = await (0, tl.DI)((0, eg.UzS)(), {
                                        method: "POST",
                                        body: u,
                                    }),
                                    d = await o.json();
                                o.ok
                                    ? r?.location.assign(
                                          `/codespaces/${d.codespace_name}`
                                      )
                                    : (t(d.error), r?.close());
                            } catch {
                                (t("Codespace creation failed."), r?.close());
                            }
                        },
                        [n, l, e, a, s]
                    );
                return {
                    codespaceCreationError: i,
                    setCodespaceCreationError: t,
                    handleCopilotAgentModeSubmit: r,
                };
            }
            let ta = {
                    desktopInstructionsText:
                        "BranchNextStepDesktop-module__desktopInstructionsText--rO9Qr",
                },
                ts = ({ branch: e, repository: l, owner: n, onClose: a }) => {
                    let s = `x-github-client://openRepo/${ey.cg?.origin}/${n}/${l}?branch=${e}`;
                    return (
                        (0, Q.useEffect)(() => {
                            ey.cg && ey.cg.location.replace(s);
                        }, [s]),
                        (0, F.jsx)(lR.l, {
                            width: "large",
                            height: "auto",
                            title: "Opening branch in GitHub Desktop...",
                            onClose: a,
                            children: (0, F.jsxs)("span", {
                                className: ta.desktopInstructionsText,
                                children: [
                                    "If nothing happens, make sure\xa0",
                                    (0, F.jsx)(ek.A, {
                                        inline: !0,
                                        target: "_blank",
                                        href: "https://desktop.github.com/",
                                        rel: "noreferrer",
                                        children: "GitHub Desktop",
                                    }),
                                    "\xa0is installed and set up properly, then\xa0",
                                    (0, F.jsx)(ek.A, {
                                        inline: !0,
                                        href: s,
                                        children: "try again",
                                    }),
                                    ".",
                                ],
                            }),
                        })
                    );
                };
            try {
                ts.displayName || (ts.displayName = "BranchNextStepDesktop");
            } catch {}
            let ti = {
                    localInstructionsText:
                        "BranchNextStepLocal-module__localInstructionsText--E_jax",
                    commandContainer:
                        "BranchNextStepLocal-module__commandContainer--l4Fg3",
                    commandText:
                        "BranchNextStepLocal-module__commandText--sK1mS",
                },
                tt = ({ branch: e, onClose: l }) => {
                    let n = `git fetch origin
git checkout ${e}`;
                    return (0, F.jsxs)(lR.l, {
                        width: "large",
                        height: "auto",
                        title: "Checkout in your local repository",
                        onClose: l,
                        children: [
                            (0, F.jsx)("span", {
                                className: ti.localInstructionsText,
                                children:
                                    "Run the following commands in your local clone.",
                            }),
                            (0, F.jsxs)("div", {
                                className: ti.commandContainer,
                                children: [
                                    (0, F.jsx)("span", {
                                        className: ti.commandText,
                                        children: n,
                                    }),
                                    (0, F.jsx)(a0.T, {
                                        textToCopy: n,
                                        ariaLabel: "Copy to clipboard",
                                        icon: V.CopyIcon,
                                        tooltipProps: { direction: "w" },
                                    }),
                                ],
                            }),
                        ],
                    });
                };
            try {
                tt.displayName || (tt.displayName = "BranchNextStepLocal");
            } catch {}
            var tr = n(16654);
            let tu = {
                    buttonGroup:
                        "CopilotAgentModeButton-module__buttonGroup--ReOsn",
                },
                to = ({
                    isOpen: e,
                    anchorRef: l,
                    topRepos: n,
                    onSelect: a,
                    onClose: s,
                }) =>
                    (0, F.jsx)(tr.f0, {
                        initialRepository: void 0,
                        onSelect: (e) => {
                            e?.owner &&
                                e?.name &&
                                a({
                                    id: e.id,
                                    name: e.name,
                                    owner: { login: e.owner.login },
                                });
                        },
                        topRepositories: n,
                        anchorElement: (e) => {
                            let { ref: n } = e;
                            return (
                                n && (n.current = l.current),
                                (0, F.jsx)(F.Fragment, {})
                            );
                        },
                        preventDefault: !0,
                        title: "Select a repository",
                        subtitle:
                            "Start a codespace with Copilot agent mode for this issue in another repository.",
                        triggerOpen: e,
                        onClose: s,
                    });
            try {
                to.displayName || (to.displayName = "CopilotRepositoryPicker");
            } catch {}
            let td = ({ repo: e, issueId: l, onError: n }) => {
                let a = (0, N.useRelayEnvironment)(),
                    [s, i] = (0, Q.useState)(null),
                    [t, r] = (0, Q.useState)(!1),
                    [u, o] = (0, Q.useState)(!1),
                    [d, c] = (0, Q.useState)(e.id),
                    m = (0, Q.useRef)(null),
                    {
                        codespaceCreationError: g,
                        handleCopilotAgentModeSubmit: y,
                    } = tn({ repoId: d, issueDatabaseId: l || 0 });
                ((0, Q.useEffect)(() => {
                    g && n(g);
                }, [g, n]),
                    (0, Q.useEffect)(() => {
                        d !== e.id && y();
                    }, [y, e.id, d]));
                let p = (0, Q.useCallback)(
                        (e) => {
                            (c((l) => (l === e.id && y(), e.id)), r(!1));
                        },
                        [c, r, y]
                    ),
                    k = (0, Q.useCallback)(
                        (e) => {
                            (e.preventDefault(), n(""), d && y());
                        },
                        [d, y, n]
                    ),
                    b = (0, Q.useCallback)(async () => {
                        if ((n(""), u || t || s)) r(!t);
                        else {
                            o(!0);
                            let e = await (0, tr.St)(a);
                            e && (i(e), o(!1), r(!0));
                        }
                    }, [a, u, t, n, s]);
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsxs)(U.A, {
                            className: tu.buttonGroup,
                            children: [
                                (0, F.jsx)($.Q, {
                                    size: "small",
                                    leadingVisual: V.CopilotIcon,
                                    onClick: k,
                                    "data-testid":
                                        "open-in-copilot-agent-button",
                                    block: !0,
                                    children:
                                        aK.k.development.copilot.openAgent,
                                }),
                                (0, F.jsx)(q.K, {
                                    size: "small",
                                    loading: u,
                                    ref: m,
                                    icon: V.TriangleDownIcon,
                                    "aria-label": "Select code repository",
                                    onClick: b,
                                    "aria-disabled": u,
                                }),
                            ],
                        }),
                        (0, F.jsx)(to, {
                            topRepos: s || [],
                            anchorRef: m,
                            isOpen: t,
                            onSelect: p,
                            onClose: () => t && r(!1),
                        }),
                    ],
                });
            };
            try {
                td.displayName || (td.displayName = "CopilotAgentModeButton");
            } catch {}
            let tc = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [{ kind: "Variable", name: "id", variableName: "id" }],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "DevelopmentPickerQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    n,
                                                    a,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [s],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "DevelopmentPickerQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    i,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    n,
                                                    a,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [i, s, t],
                                                        storageKey: null,
                                                    },
                                                    t,
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                    t,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "a2b64ff526446dae5dc530c4d6c15a86",
                        metadata: {},
                        name: "DevelopmentPickerQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            tc.hash = "85e1eb5a12e6edf8642314f543cc524f";
            let tm = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "baseIssueId",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "linkingIds",
                        },
                    ],
                    l = [
                        {
                            fields: [
                                {
                                    kind: "Variable",
                                    name: "issueId",
                                    variableName: "baseIssueId",
                                },
                                {
                                    kind: "Variable",
                                    name: "linkingIds",
                                    variableName: "linkingIds",
                                },
                            ],
                            kind: "ObjectValue",
                            name: "input",
                        },
                    ],
                    n = [{ kind: "Literal", name: "first", value: 25 }],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "target",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "oid",
                                storageKey: null,
                            },
                            a,
                            i,
                        ],
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "associatedPullRequests",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    u = [
                        s,
                        a,
                        i,
                        t,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                a,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Ref",
                                    kind: "LinkedField",
                                    name: "defaultBranchRef",
                                    plural: !1,
                                    selections: [
                                        s,
                                        a,
                                        t,
                                        r,
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Repository",
                                            kind: "LinkedField",
                                            name: "repository",
                                            plural: !1,
                                            selections: [a],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        r,
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "linkBranchesMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "LinkBranchesPayload",
                                kind: "LinkedField",
                                name: "linkBranches",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType:
                                                    "LinkedBranchConnection",
                                                kind: "LinkedField",
                                                name: "linkedBranches",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "LinkedBranch",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            a,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Ref",
                                                                kind: "LinkedField",
                                                                name: "ref",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        kind: "InlineDataFragmentSpread",
                                                                        name: "BranchPickerRef",
                                                                        selections:
                                                                            u,
                                                                        args: null,
                                                                        argumentDefinitions:
                                                                            [],
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "linkedBranches(first:25)",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "linkBranchesMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "LinkBranchesPayload",
                                kind: "LinkedField",
                                name: "linkBranches",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: n,
                                                concreteType:
                                                    "LinkedBranchConnection",
                                                kind: "LinkedField",
                                                name: "linkedBranches",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "LinkedBranch",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            a,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Ref",
                                                                kind: "LinkedField",
                                                                name: "ref",
                                                                plural: !1,
                                                                selections: u,
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "linkedBranches(first:25)",
                                            },
                                            a,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "1ed695200ca0b6cac0e012fd4926b664",
                        metadata: {},
                        name: "linkBranchesMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            tm.hash = "778891c21a5c7ddf60bb6d4c7f33ce39";
            let tg = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "baseIssueOrPullRequestId",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "linkingIds",
                        },
                    ],
                    l = [
                        {
                            fields: [
                                {
                                    kind: "Variable",
                                    name: "baseIssueOrPullRequestId",
                                    variableName: "baseIssueOrPullRequestId",
                                },
                                {
                                    kind: "Variable",
                                    name: "linkingIds",
                                    variableName: "linkingIds",
                                },
                            ],
                            kind: "ObjectValue",
                            name: "input",
                        },
                    ],
                    n = [
                        { kind: "Literal", name: "first", value: 10 },
                        {
                            kind: "Literal",
                            name: "includeClosedPrs",
                            value: !0,
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInMergeQueue",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "linkPullRequestsMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "LinkIssueOrPullRequestPayload",
                                kind: "LinkedField",
                                name: "linkIssueOrPullRequest",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "baseIssueOrPullRequest",
                                        plural: !1,
                                        selections: [
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: n,
                                                        concreteType:
                                                            "PullRequestConnection",
                                                        kind: "LinkedField",
                                                        name: "closedByPullRequestsReferences",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "PullRequest",
                                                                kind: "LinkedField",
                                                                name: "nodes",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        kind: "InlineDataFragmentSpread",
                                                                        name: "PullRequestAndBranchPickerPullRequest",
                                                                        selections:
                                                                            [
                                                                                a,
                                                                                s,
                                                                                i,
                                                                                t,
                                                                                r,
                                                                                u,
                                                                                o,
                                                                                d,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            a,
                                                                                            c,
                                                                                            m,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    null,
                                                                                                kind: "LinkedField",
                                                                                                name: "owner",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        g,
                                                                                                        y,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                y,
                                                                            ],
                                                                        args: null,
                                                                        argumentDefinitions:
                                                                            [],
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey:
                                                            "closedByPullRequestsReferences(first:10,includeClosedPrs:true)",
                                                    },
                                                ],
                                                type: "Issue",
                                                abstractKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "linkPullRequestsMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "LinkIssueOrPullRequestPayload",
                                kind: "LinkedField",
                                name: "linkIssueOrPullRequest",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "baseIssueOrPullRequest",
                                        plural: !1,
                                        selections: [
                                            y,
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: n,
                                                        concreteType:
                                                            "PullRequestConnection",
                                                        kind: "LinkedField",
                                                        name: "closedByPullRequestsReferences",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "PullRequest",
                                                                kind: "LinkedField",
                                                                name: "nodes",
                                                                plural: !0,
                                                                selections: [
                                                                    a,
                                                                    s,
                                                                    i,
                                                                    t,
                                                                    r,
                                                                    u,
                                                                    o,
                                                                    d,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                a,
                                                                                c,
                                                                                m,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "owner",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            g,
                                                                                            y,
                                                                                            a,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    y,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey:
                                                            "closedByPullRequestsReferences(first:10,includeClosedPrs:true)",
                                                    },
                                                ],
                                                type: "Issue",
                                                abstractKey: null,
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: [a],
                                                type: "Node",
                                                abstractKey: "__isNode",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "6d318b0319f7be8dff2d1bc9c2882ffc",
                        metadata: {},
                        name: "linkPullRequestsMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            tg.hash = "796463ae38b055a2a747688e2050d8af";
            let ty = {
                navigationHeader:
                    "DevelopmentPicker-module__navigationHeader--v2NIi",
                IconButton: "DevelopmentPicker-module__IconButton--tOgOR",
                Truncate: "DevelopmentPicker-module__Truncate--piMRW",
            };
            function tp({ anchorElement: e, ...l }) {
                let [n, a] = (0, Q.useState)(!1);
                return !n && e
                    ? (0, F.jsxs)(F.Fragment, {
                          children: [
                              (0, F.jsx)(lK.ak, {
                                  commands: {
                                      "item-pickers:open-development": () =>
                                          a(!0),
                                  },
                              }),
                              e({ onClick: () => a(!0) }),
                          ],
                      })
                    : (0, F.jsx)(tk, {
                          anchorElement: e,
                          triggerOpen: n,
                          ...l,
                      });
            }
            let tk = ({ issueId: e, ...l }) => {
                    let { node: n } = (0, N.useLazyLoadQuery)(tc, { id: e }),
                        a = (0, N.useRelayEnvironment)(),
                        [s, i] = (0, Q.useState)(null),
                        [t, r] = (0, Q.useState)([]),
                        [u, o] = (0, Q.useState)(!1);
                    return (
                        (0, Q.useEffect)(() => {
                            s && t && o(!1);
                        }, [s, t]),
                        (0, Q.useEffect)(() => {
                            !(async function () {
                                if (u || !n?.repository || (s && t)) return;
                                (o(!0),
                                    i(
                                        await (0, tr.tZ)(
                                            a,
                                            n.repository.owner.login,
                                            n.repository.name
                                        )
                                    ));
                                let e = await (0, tr.St)(a);
                                e && r(e);
                            })();
                        }, [a, s, u, n?.repository, t]),
                        (0, F.jsx)(tF, {
                            issueId: e,
                            repoNameWithOwner: n?.repository?.nameWithOwner,
                            initialRepository: s,
                            topRepositories: t,
                            isLoading: u,
                            ...l,
                        })
                    );
                },
                tF = ({
                    issueId: e,
                    initialRepository: l,
                    topRepositories: n,
                    anchorElement: a,
                    repoPickerSubtitle: s,
                    repoNameWithOwner: i,
                    prAndBranchPickerSubtitle: t,
                    isCreateBranchDialogOpen: r,
                    linkedBranches: u,
                    linkedPullRequests: o,
                    triggerOpen: d,
                    isLoading: c,
                }) => {
                    let m = (0, N.useRelayEnvironment)(),
                        { addToast: g } = (0, M.Y6)(),
                        [y, p] = (0, Q.useState)(!0),
                        [k, b] = (0, Q.useState)(null),
                        [h, f] = (0, Q.useState)("pulls-branches"),
                        [K, S] = (0, Q.useState)(!1),
                        [I, v] = (0, Q.useState)(d ?? !1);
                    (0, Q.useEffect)(() => {
                        y && null !== l && null !== n && (b(l), p(!1));
                    }, [y, l, n]);
                    let L = (0, Q.useCallback)(
                            (e) => {
                                switch (e ?? h) {
                                    case "repos":
                                        (S(!0), v(!1));
                                        break;
                                    case "pulls-branches":
                                        (v(!0), S(!1));
                                }
                            },
                            [h]
                        ),
                        T = (0, Q.useCallback)(
                            (e) => {
                                (b(e),
                                    f("pulls-branches"),
                                    L("pulls-branches"));
                            },
                            [L]
                        ),
                        C = (0, Q.useMemo)(
                            () => (y ? (i ?? "") : k ? k.nameWithOwner : ""),
                            [y, i, k]
                        ),
                        x = (0, Q.useMemo)(
                            () => o.filter((e) => e.repository.id === k?.id),
                            [o, k?.id]
                        ),
                        R = (0, Q.useMemo)(
                            () => u.filter((e) => e.repository.id === k?.id),
                            [u, k?.id]
                        ),
                        j = (0, F.jsxs)("div", {
                            className: ty.navigationHeader,
                            children: [
                                (0, F.jsx)(q.K, {
                                    variant: "invisible",
                                    icon: V.ArrowLeftIcon,
                                    size: "small",
                                    "aria-label":
                                        aK.k.development.repositoryPickerNav,
                                    onClick: () => {
                                        (b(null), f("repos"), L("repos"));
                                    },
                                    className: ty.IconButton,
                                }),
                                (0, F.jsx)(sS.A, {
                                    title: C,
                                    className: ty.Truncate,
                                    children: C,
                                }),
                            ],
                        }),
                        _ = (0, Q.useCallback)(
                            (l) => {
                                let n = l.filter(
                                        (e) =>
                                            void 0 ===
                                            [...x, ...R].find(
                                                (l) => l.id === e.id
                                            )
                                    ),
                                    a = [
                                        ...[...o, ...u].filter(
                                            (e) =>
                                                e.repository.id !== k?.id ||
                                                void 0 !==
                                                    l.find((l) => l.id === e.id)
                                        ),
                                        ...n,
                                    ],
                                    s = a.filter(
                                        (e) => "PullRequest" === e.__typename
                                    ),
                                    i = a.filter((e) => "Ref" === e.__typename);
                                (!(function ({
                                    environment: e,
                                    input: {
                                        baseIssueOrPullRequestId: l,
                                        linkingIds: n,
                                    },
                                    onError: a,
                                    linkingPrs: s,
                                }) {
                                    let i = {
                                        linkIssueOrPullRequest: {
                                            baseIssueOrPullRequest: {
                                                __typename: "Issue",
                                                id: l,
                                                __isNode: "Issue",
                                                closedByPullRequestsReferences:
                                                    {
                                                        nodes: (s || []).map(
                                                            (e) => {
                                                                let {
                                                                        url: l,
                                                                        number: n,
                                                                        title: a,
                                                                        isDraft:
                                                                            s,
                                                                        isInMergeQueue:
                                                                            i,
                                                                        state: t,
                                                                        repository:
                                                                            r,
                                                                        id: u,
                                                                        createdAt:
                                                                            o,
                                                                    } = e,
                                                                    {
                                                                        id: d,
                                                                        name: c,
                                                                        nameWithOwner:
                                                                            m,
                                                                        owner: g,
                                                                    } = r,
                                                                    {
                                                                        login: y,
                                                                        __typename:
                                                                            p,
                                                                    } = g;
                                                                return {
                                                                    id: u,
                                                                    createdAt:
                                                                        o,
                                                                    isDraft: s,
                                                                    isInMergeQueue:
                                                                        i,
                                                                    number: n,
                                                                    url: l,
                                                                    title: a,
                                                                    state: t,
                                                                    __typename:
                                                                        "PullRequest",
                                                                    repository:
                                                                        {
                                                                            id: d,
                                                                            name: c,
                                                                            nameWithOwner:
                                                                                m,
                                                                            owner: {
                                                                                id: u,
                                                                                login: y,
                                                                                __typename:
                                                                                    p,
                                                                            },
                                                                        },
                                                                };
                                                            }
                                                        ),
                                                    },
                                            },
                                        },
                                    };
                                    (0, N.commitMutation)(e, {
                                        mutation: tg,
                                        variables: {
                                            baseIssueOrPullRequestId: l,
                                            linkingIds: n,
                                        },
                                        optimisticResponse: i,
                                        onError: a,
                                    });
                                })({
                                    environment: m,
                                    input: {
                                        baseIssueOrPullRequestId: `${e}`,
                                        linkingIds: s.map((e) => e.id),
                                    },
                                    onError: () => {
                                        g({
                                            type: "error",
                                            message:
                                                a_.couldNotUpdateLinkedPullRequests,
                                        });
                                    },
                                    linkingPrs: s,
                                }),
                                    (function ({
                                        environment: e,
                                        input: {
                                            baseIssueId: l,
                                            linkingIds: n,
                                        },
                                        onError: a,
                                    }) {
                                        (0, N.commitMutation)(e, {
                                            mutation: tm,
                                            variables: {
                                                baseIssueId: l,
                                                linkingIds: n,
                                            },
                                            onError: a,
                                        });
                                    })({
                                        environment: m,
                                        input: {
                                            baseIssueId: `${e}`,
                                            linkingIds: i.map((e) => e.id),
                                        },
                                        onError: () => {
                                            g({
                                                type: "error",
                                                message:
                                                    a_.couldNotUpdateLinkedBranches,
                                            });
                                        },
                                    }));
                            },
                            [g, m, e, u, R, o, x, k?.id]
                        );
                    return (0, F.jsxs)(F.Fragment, {
                        children: [
                            (0, F.jsx)(lK.ak, {
                                commands: {
                                    "item-pickers:open-development": () => L(),
                                },
                            }),
                            (0, F.jsx)("div", {
                                hidden: "repos" !== h,
                                children: (0, F.jsx)(tr.f0, {
                                    initialRepository: void 0,
                                    topRepositories: n,
                                    onSelect: (e) => T(e ?? null),
                                    anchorElement: a,
                                    title: "Link a branch or pull request",
                                    subtitle: s,
                                    preventClose: r,
                                    preventDefault: !0,
                                    triggerOpen: K,
                                    onOpen: () => S(!0),
                                    onClose: () => S(!1),
                                }),
                            }),
                            (0, F.jsx)("div", {
                                hidden: "pulls-branches" !== h,
                                children: (0, F.jsx)(iX, {
                                    repoNameWithOwner: C,
                                    initialSelectedPrs: x,
                                    initialSelectedBranches: R,
                                    onSelectionChange: _,
                                    anchorElement: a,
                                    title: j,
                                    subtitle: t,
                                    shortcutsEnabled: !1,
                                    triggerOpen: I,
                                    onOpen: () => v(!0),
                                    onClose: () => v(!1),
                                    preventClose: r,
                                    loading: c,
                                }),
                            }),
                        ],
                    });
                };
            try {
                tp.displayName ||
                    (tp.displayName = "LazyDevelopmentPickerOnClick");
            } catch {}
            try {
                tk.displayName || (tk.displayName = "LazyDevelopmentPicker");
            } catch {}
            try {
                tF.displayName ||
                    (tF.displayName = "LazyDevelopmentPickerInternal");
            } catch {}
            try {
                (o = NavigateRepoPickerHeading).displayName ||
                    (o.displayName = "NavigateRepoPickerHeading");
            } catch {}
            let tb = {
                    developmentSectionContainer:
                        "DevelopmentSection-module__developmentSectionContainer--bRXJq",
                    developmentHelpText:
                        "DevelopmentSection-module__developmentHelpText--IfUod",
                    developmentActionList:
                        "DevelopmentSection-module__developmentActionList--LPUYb",
                },
                th = {
                    ActionList_LinkItem:
                        "LinkedBranches-module__ActionList_LinkItem--wbhvK",
                    ActionList_LeadingVisual:
                        "LinkedBranches-module__ActionList_LeadingVisual--SZUjq",
                };
            function tf({ linkedBranches: e }) {
                return (0, F.jsx)(F.Fragment, {
                    children: e.map((e) =>
                        (0, F.jsxs)(
                            H.l.LinkItem,
                            {
                                href: i8.t.branchUrl(
                                    e.name,
                                    e.repository.nameWithOwner
                                ),
                                target: "_blank",
                                className: th.ActionList_LinkItem,
                                children: [
                                    (0, F.jsx)(H.l.LeadingVisual, {
                                        className: th.ActionList_LeadingVisual,
                                        children: (0, F.jsx)(
                                            V.GitBranchIcon,
                                            {}
                                        ),
                                    }),
                                    e.name,
                                    (0, F.jsx)(H.l.Description, {
                                        variant: "block",
                                        children: e.repository.nameWithOwner,
                                    }),
                                ],
                            },
                            e.id
                        )
                    ),
                });
            }
            try {
                tf.displayName || (tf.displayName = "LinkedBranches");
            } catch {}
            let tK = {
                ActionList_LinkItem:
                    "LinkedPullRequests-module__ActionList_LinkItem--QmAhr",
            };
            function tS({ linkedPullRequests: e }) {
                return (0, F.jsx)(F.Fragment, {
                    children: e.map((e) =>
                        (0, F.jsxs)(
                            H.l.LinkItem,
                            {
                                href: e.url,
                                target: "_blank",
                                className: tK.ActionList_LinkItem,
                                children: [
                                    (0, F.jsx)(H.l.LeadingVisual, {
                                        children: (function (e) {
                                            let l =
                                                nB[
                                                    i7(
                                                        e.isDraft &&
                                                            "OPEN" === e.state,
                                                        e.isInMergeQueue,
                                                        e.state
                                                    )
                                                ];
                                            return (0, F.jsx)(l, {});
                                        })(e),
                                    }),
                                    e.title,
                                    (0, F.jsx)(H.l.Description, {
                                        variant: "block",
                                        children: e.repository.nameWithOwner,
                                    }),
                                ],
                            },
                            e.id
                        )
                    ),
                });
            }
            try {
                tS.displayName || (tS.displayName = "LinkedPullRequests");
            } catch {}
            var tI = n(89015),
                tv = n(97956);
            let tL = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        concreteType: "Ref",
                        kind: "LinkedField",
                        name: "ref",
                        plural: !1,
                        selections: [
                            n,
                            a,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "prefix",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    i = { kind: "Literal", name: "first", value: 25 },
                    t = [i],
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "target",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "oid",
                                storageKey: null,
                            },
                            n,
                            r,
                        ],
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "associatedPullRequests",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    d = [
                        a,
                        n,
                        r,
                        u,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                n,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Ref",
                                    kind: "LinkedField",
                                    name: "defaultBranchRef",
                                    plural: !1,
                                    selections: [
                                        a,
                                        n,
                                        u,
                                        o,
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Repository",
                                            kind: "LinkedField",
                                            name: "repository",
                                            plural: !1,
                                            selections: [n],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        o,
                    ],
                    c = [
                        {
                            kind: "InlineDataFragmentSpread",
                            name: "BranchPickerRef",
                            selections: d,
                            args: null,
                            argumentDefinitions: [],
                        },
                    ],
                    m = [
                        i,
                        {
                            kind: "Literal",
                            name: "refPrefix",
                            value: "refs/heads/",
                        },
                    ],
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "clientMutationId",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "message",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "createLinkedBranchMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "CreateLinkedBranchPayload",
                                kind: "LinkedField",
                                name: "createLinkedBranch",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "LinkedBranch",
                                        kind: "LinkedField",
                                        name: "linkedBranch",
                                        plural: !1,
                                        selections: [s],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: t,
                                                concreteType:
                                                    "LinkedBranchConnection",
                                                kind: "LinkedField",
                                                name: "linkedBranches",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "LinkedBranch",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            n,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Ref",
                                                                kind: "LinkedField",
                                                                name: "ref",
                                                                plural: !1,
                                                                selections: c,
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "linkedBranches(first:25)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: m,
                                                        concreteType:
                                                            "RefConnection",
                                                        kind: "LinkedField",
                                                        name: "refs",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Ref",
                                                                kind: "LinkedField",
                                                                name: "nodes",
                                                                plural: !0,
                                                                selections: c,
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey:
                                                            'refs(first:25,refPrefix:"refs/heads/")',
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    g,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [y],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "createLinkedBranchMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "CreateLinkedBranchPayload",
                                kind: "LinkedField",
                                name: "createLinkedBranch",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "LinkedBranch",
                                        kind: "LinkedField",
                                        name: "linkedBranch",
                                        plural: !1,
                                        selections: [s, n],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: t,
                                                concreteType:
                                                    "LinkedBranchConnection",
                                                kind: "LinkedField",
                                                name: "linkedBranches",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "LinkedBranch",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            n,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Ref",
                                                                kind: "LinkedField",
                                                                name: "ref",
                                                                plural: !1,
                                                                selections: d,
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "linkedBranches(first:25)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: m,
                                                        concreteType:
                                                            "RefConnection",
                                                        kind: "LinkedField",
                                                        name: "refs",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Ref",
                                                                kind: "LinkedField",
                                                                name: "nodes",
                                                                plural: !0,
                                                                selections: d,
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey:
                                                            'refs(first:25,refPrefix:"refs/heads/")',
                                                    },
                                                    n,
                                                ],
                                                storageKey: null,
                                            },
                                            n,
                                        ],
                                        storageKey: null,
                                    },
                                    g,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [r, y],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "513b2f77661376414882f1d4333d2c33",
                        metadata: {},
                        name: "createLinkedBranchMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            tL.hash = "8508860a2381afaf82f018063bdcc512";
            let tT = {
                    RadioGroup_Label:
                        "CreateBranchDialog-module__RadioGroup_Label--gFZM6",
                    Dialog_Footer:
                        "CreateBranchDialog-module__Dialog_Footer--e5c4q",
                    branchNameContainer:
                        "CreateBranchDialog-module__branchNameContainer--SGPeX",
                    fieldLabel: "CreateBranchDialog-module__fieldLabel--R9lnl",
                    TextInput: "CreateBranchDialog-module__TextInput--_h6C6",
                    repositoryBranchRow:
                        "CreateBranchDialog-module__repositoryBranchRow--FAb3K",
                    repositoryPickerContainer:
                        "CreateBranchDialog-module__repositoryPickerContainer--aViMx",
                    repositoryPickerHeader:
                        "CreateBranchDialog-module__repositoryPickerHeader--H1drO",
                    branchSourceContainer:
                        "CreateBranchDialog-module__branchSourceContainer--zIALE",
                    loadingRepositoryBranchRow:
                        "CreateBranchDialog-module__loadingRepositoryBranchRow--D4hIa",
                    loadingBranchSourceContainer:
                        "CreateBranchDialog-module__loadingBranchSourceContainer--Q79tG",
                },
                tC = ({
                    title: e,
                    number: l,
                    owner: n,
                    repo: a,
                    onClose: s,
                    ...i
                }) => {
                    let [t, r] = (0, Q.useState)(!1),
                        [u, o] = (0, Q.useState)(null),
                        { addToast: d } = (0, M.Y6)(),
                        c = (0, N.useRelayEnvironment)(),
                        [m, g] = (0, Q.useState)(null),
                        y = (0, Q.useMemo)(
                            () =>
                                (function (e, l, n) {
                                    l = (l = (l = (l = l.replace(
                                        /[^\p{L}\p{Nd} _-]/gu,
                                        ""
                                    )).replace(/\s+/g, "-")).replace(
                                        /(^-+|-+$)/g,
                                        ""
                                    )).toLocaleLowerCase();
                                    let a = `${e}-${l}`;
                                    return a;
                                })(l, e),
                            [l, e]
                        ),
                        [p, k] = (0, Q.useState)(y),
                        [b, h] = (0, Q.useState)("local"),
                        f = (0, Q.useCallback)((e) => {
                            switch (e) {
                                case "codespace":
                                    h("codespace");
                                    break;
                                case "desktop":
                                    h("desktop");
                                    break;
                                case "local":
                                    h("local");
                                    break;
                                default:
                                    h("none");
                            }
                        }, []),
                        K = (0, Q.useCallback)(() => {
                            u &&
                                (r(!0),
                                (function ({
                                    environment: e,
                                    input: l,
                                    onError: n,
                                    onCompleted: a,
                                }) {
                                    (0, N.commitMutation)(e, {
                                        mutation: tL,
                                        variables: { input: l },
                                        onError: (e) => n?.(e),
                                        onCompleted: (e) => {
                                            e.createLinkedBranch?.linkedBranch
                                                ? a?.(e)
                                                : e.createLinkedBranch?.errors
                                                  ? e.createLinkedBranch.errors.map(
                                                        (e) => {
                                                            let a =
                                                                iS.S.branchAlreadyExists(
                                                                    l?.name ??
                                                                        ""
                                                                );
                                                            e.message === a &&
                                                                n?.({
                                                                    name: "LinkedBranchExists",
                                                                    message: a,
                                                                });
                                                        }
                                                    )
                                                  : n?.({
                                                        name: "LinkedBranchNotFound",
                                                        message:
                                                            "Linked branch not found",
                                                    });
                                        },
                                    });
                                })({
                                    environment: c,
                                    input: u,
                                    onError: (e) => {
                                        (r(!1),
                                            d({
                                                type: "error",
                                                message:
                                                    e?.name ===
                                                    "LinkedBranchExists"
                                                        ? e.message
                                                        : iS.S
                                                              .couldNotCreateBranch,
                                            }));
                                    },
                                    onCompleted: (e) => {
                                        (r(!1),
                                            d({
                                                type: "success",
                                                message: "Branch created",
                                            }),
                                            s(
                                                b,
                                                e.createLinkedBranch
                                                    ?.linkedBranch?.ref?.name ??
                                                    null
                                            ));
                                    },
                                }));
                        }, [d, b, u, c, s]);
                    return (0, F.jsx)(lR.l, {
                        width: "large",
                        height: "auto",
                        onClose: () => s("none", null),
                        title: "Create a branch for this issue",
                        renderFooter: () =>
                            (0, F.jsxs)(F.Fragment, {
                                children: [
                                    (0, F.jsx)(lR.l.Footer, {
                                        className: tT.Dialog_Footer,
                                        children: (0, F.jsxs)(tI.A, {
                                            name: "create-branch-next-action-group",
                                            onChange: f,
                                            children: [
                                                (0, F.jsx)(tI.A.Label, {
                                                    className:
                                                        tT.RadioGroup_Label,
                                                    children: "What's next?",
                                                }),
                                                (0, F.jsxs)(aA.A, {
                                                    children: [
                                                        (0, F.jsx)(tv.A, {
                                                            name: "create-branch-next-action",
                                                            value: "local",
                                                            checked:
                                                                "local" === b,
                                                        }),
                                                        (0, F.jsx)(aA.A.Label, {
                                                            children:
                                                                "Checkout locally",
                                                        }),
                                                    ],
                                                }),
                                                (0, F.jsxs)(aA.A, {
                                                    children: [
                                                        (0, F.jsx)(tv.A, {
                                                            name: "create-branch-next-action",
                                                            value: "desktop",
                                                        }),
                                                        (0, F.jsx)(aA.A.Label, {
                                                            children:
                                                                "Open branch with GitHub Desktop",
                                                        }),
                                                    ],
                                                }),
                                            ],
                                        }),
                                    }),
                                    (0, F.jsx)(lR.l.Footer, {
                                        children: (0, F.jsx)($.Q, {
                                            variant: "primary",
                                            onClick: K,
                                            leadingVisual: t
                                                ? V.SyncIcon
                                                : null,
                                            disabled: t || !u,
                                            children: "Create branch",
                                        }),
                                    }),
                                ],
                            }),
                        children: (0, F.jsx)(Q.Suspense, {
                            fallback: (0, F.jsx)(tN, {
                                selectedBranchName: p,
                                branchSourceName: m,
                            }),
                            children: (0, F.jsx)(tx, {
                                ...i,
                                owner: n,
                                repo: a,
                                onClose: s,
                                selectedBranchName: p,
                                setCreateBranchInput: o,
                                setBranchSourceName: g,
                                setSelectedBranchName: k,
                            }),
                        }),
                    });
                },
                tx = ({
                    repo: e,
                    owner: l,
                    issueId: n,
                    setCreateBranchInput: a,
                    setBranchSourceName: s,
                    selectedBranchName: i,
                    setSelectedBranchName: t,
                }) => {
                    let r = (0, N.useLazyLoadQuery)(tw, { repo: e, owner: l }),
                        u = (0, tr.Er)(r.viewer),
                        o = r.repository ? (0, tr.Jo)(r.repository) : null,
                        [d, c] = (0, Q.useState)(o),
                        m = (0, Q.useCallback)((e) => {
                            c(e);
                        }, []),
                        g = (0, Q.useCallback)(
                            (e) => {
                                e && e !== d && m(e);
                            },
                            [m, d]
                        );
                    return d
                        ? (0, F.jsx)(tR, {
                              selectedRepository: d,
                              onSelectRepository: g,
                              topRepositories: u,
                              setCreateBranchInput: a,
                              issueId: n,
                              selectedBranchName: i,
                              setSelectedBranchName: t,
                              setBranchSourceName: s,
                          })
                        : null;
                },
                tR = ({
                    selectedRepository: e,
                    topRepositories: l,
                    onSelectRepository: n,
                    setCreateBranchInput: a,
                    issueId: s,
                    selectedBranchName: i,
                    setSelectedBranchName: t,
                    setBranchSourceName: r,
                }) => {
                    let u = (0, N.useLazyLoadQuery)(tE, {
                            repo: e.name,
                            owner: e.owner.login,
                        }),
                        o =
                            void 0 !== u.repository
                                ? (function (e) {
                                      return e
                                          ? (0, eh.readInlineData)(ik, e)
                                          : null;
                                  })(u.repository)
                                : null,
                        d = iD(o?.defaultBranchRef ?? null),
                        [c, m] = (0, Q.useState)(d);
                    (0, Q.useEffect)(() => {
                        (m(d), r(d?.name ?? null));
                    }, [d, r]);
                    let g = (0, Q.useCallback)(
                        (e) => {
                            (m((l) => e ?? l), r(d?.name ?? null));
                        },
                        [d?.name, r]
                    );
                    a(
                        (0, Q.useMemo)(
                            () =>
                                e && c && c.target?.oid
                                    ? {
                                          repositoryId: e.id,
                                          name: `refs/heads/${i}`,
                                          oid: c.target.oid,
                                          issueId: s,
                                      }
                                    : null,
                            [s, i, e, c]
                        )
                    );
                    let y = (function (e) {
                            return e ? (0, eh.readInlineData)(iF, e) : null;
                        })(o?.refs ?? null),
                        p = (0, Q.useMemo)(
                            () =>
                                y?.edges
                                    ?.flatMap((e) =>
                                        e?.node ? [iD(e.node)] : []
                                    )
                                    .filter((e) => !!e) || [],
                            [y]
                        );
                    return (0, F.jsxs)("div", {
                        "data-testid": "cb-container",
                        children: [
                            (0, F.jsxs)("div", {
                                "data-testid": "branch-name",
                                className: tT.branchNameContainer,
                                children: [
                                    (0, F.jsx)("span", {
                                        className: tT.fieldLabel,
                                        children: "Branch name",
                                    }),
                                    (0, F.jsx)(aP.A, {
                                        trailingAction: (0, F.jsx)(a0.T, {
                                            textToCopy: i,
                                            ariaLabel:
                                                "Copy branch name to clipboard",
                                            icon: V.CopyIcon,
                                            tooltipProps: { direction: "w" },
                                        }),
                                        value: i,
                                        onChange: (e) => t(e.target.value),
                                        className: tT.TextInput,
                                    }),
                                ],
                            }),
                            (0, F.jsxs)("div", {
                                className: tT.repositoryBranchRow,
                                children: [
                                    (0, F.jsxs)("div", {
                                        "data-testid": "repository",
                                        className: tT.repositoryPickerContainer,
                                        children: [
                                            (0, F.jsx)("div", {
                                                "data-testid":
                                                    "repository-picker",
                                                className:
                                                    tT.repositoryPickerHeader,
                                                children: (0, F.jsx)("span", {
                                                    className: tT.fieldLabel,
                                                    children:
                                                        "Repository destination",
                                                }),
                                            }),
                                            (0, F.jsx)(Q.Suspense, {
                                                fallback: (0, F.jsx)(tr.i_, {}),
                                                children: (0, F.jsx)(tr.f0, {
                                                    initialRepository: e,
                                                    topRepositories: l,
                                                    onSelect: n,
                                                    options: {
                                                        includeForks: !0,
                                                    },
                                                }),
                                            }),
                                        ],
                                    }),
                                    (0, F.jsxs)("div", {
                                        "data-testid": "source-branch-picker",
                                        className: tT.branchSourceContainer,
                                        children: [
                                            (0, F.jsx)("span", {
                                                className: tT.fieldLabel,
                                                children: "Branch source",
                                            }),
                                            (0, F.jsx)(Q.Suspense, {
                                                fallback: (0, F.jsx)(iU, {}),
                                                children: (0, F.jsx)(iM, {
                                                    initialBranch: c,
                                                    defaultBranchId: d?.id,
                                                    branches: p,
                                                    owner: e.owner.login,
                                                    repo: e.name,
                                                    onSelect: g,
                                                    title: "Choose a source branch",
                                                }),
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    });
                },
                tN = ({ selectedBranchName: e, branchSourceName: l }) =>
                    (0, F.jsxs)("div", {
                        "data-testid": "cb-container",
                        children: [
                            (0, F.jsxs)("div", {
                                "data-testid": "branch-name",
                                className: tT.branchNameContainer,
                                children: [
                                    (0, F.jsx)("span", {
                                        className: tT.fieldLabel,
                                        children: "Branch name",
                                    }),
                                    (0, F.jsx)(aP.A, {
                                        trailingAction: (0, F.jsx)(a0.T, {
                                            textToCopy: e,
                                            ariaLabel:
                                                "Copy branch name to clipboard",
                                            icon: V.CopyIcon,
                                            tooltipProps: { direction: "w" },
                                        }),
                                        value: e,
                                        className: tT.TextInput,
                                    }),
                                ],
                            }),
                            (0, F.jsxs)("div", {
                                className: tT.loadingRepositoryBranchRow,
                                children: [
                                    (0, F.jsxs)("div", {
                                        "data-testid": "repository",
                                        className: tT.branchNameContainer,
                                        children: [
                                            (0, F.jsx)("div", {
                                                "data-testid":
                                                    "repository-picker",
                                                className:
                                                    tT.repositoryPickerHeader,
                                                children: (0, F.jsx)("span", {
                                                    className: tT.fieldLabel,
                                                    children:
                                                        "Repository destination",
                                                }),
                                            }),
                                            (0, F.jsx)(tr.i_, {}),
                                        ],
                                    }),
                                    (0, F.jsxs)("div", {
                                        "data-testid": "source-branch-picker",
                                        className:
                                            tT.loadingBranchSourceContainer,
                                        children: [
                                            (0, F.jsx)("span", {
                                                className: tT.fieldLabel,
                                                children: "Branch source",
                                            }),
                                            (0, F.jsx)(iU, {
                                                currentBranch: l,
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    });
            try {
                tC.displayName || (tC.displayName = "CreateBranchDialog");
            } catch {}
            try {
                tx.displayName ||
                    (tx.displayName = "CreateBranchDialogInternal");
            } catch {}
            try {
                tR.displayName ||
                    (tR.displayName = "CreateBranchDialogInternalInputs");
            } catch {}
            try {
                tN.displayName ||
                    (tN.displayName =
                        "CreateBranchDialogInternalInputsLoading");
            } catch {}
            let tj = {
                createBranchLink:
                    "NoBranchesOrLinkedPullRequests-module__createBranchLink--e7VM0",
            };
            function t_({
                issueId: e,
                title: l,
                number: n,
                owner: a,
                repo: s,
                before: i,
                after: t,
                linkText: r,
                reportCreateBranchDialogOpen: u,
                setBranchNextStep: o,
                setNewBranchName: d,
            }) {
                let [c, m] = (0, Q.useState)(!1),
                    g = (0, Q.useCallback)(
                        (e, l) => {
                            (d(l), o(e), m(!1), u(!1));
                        },
                        [u, o, d]
                    );
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        i,
                        i && " ",
                        (0, F.jsx)(ek.A, {
                            tabIndex: 0,
                            onClick: () => {
                                (u(!0), m(!0));
                            },
                            inline: !0,
                            className: tj.createBranchLink,
                            children: r,
                        }),
                        t && " ",
                        t,
                        c &&
                            (0, F.jsx)(Q.Suspense, {
                                children: (0, F.jsx)(tC, {
                                    issueId: e,
                                    title: l,
                                    number: n,
                                    owner: a,
                                    repo: s,
                                    onClose: g,
                                }),
                            }),
                    ],
                });
            }
            try {
                t_.displayName ||
                    (t_.displayName = "NoBranchesOrLinkedPullRequests");
            } catch {}
            let tw = ic,
                tE = im;
            function tA() {
                return (0, F.jsx)(iy.w, {
                    sectionHeader: (0, F.jsx)(ig.h, {
                        title: aK.k.sectionTitles.development,
                    }),
                    emptyText: aK.k.emptySections.development,
                });
            }
            function tP({ issue: e }) {
                let [l, n] = (0, Q.useState)(!1),
                    a = (0, N.useFragment)(id, e),
                    {
                        id: s,
                        title: i,
                        number: t,
                        databaseId: r,
                        repository: u,
                    } = a,
                    o = !a.viewerCanLinkBranches,
                    [d, c] = (0, Q.useMemo)(() => {
                        var e, l;
                        return [
                            ((e = a),
                            e.linkedBranches?.nodes
                                ?.flatMap((e) =>
                                    e && e.ref ? iD(e.ref) || [] : []
                                )
                                .slice(0, i8.t.maxLinkedBranches) || []),
                            ((l = a),
                            l.closedByPullRequestsReferences?.nodes
                                ?.flatMap((e) =>
                                    e ? (0, N.readInlineData)(iH, e) : []
                                )
                                .slice(0, i8.t.maxLinkedPullRequests) || []),
                        ];
                    }, [a]),
                    m = d.length > 0 || c.length > 0,
                    [g, y] = (0, Q.useState)("none"),
                    [p, k] = (0, Q.useState)(null),
                    b = (0, Q.useCallback)(
                        (e, l, a) =>
                            (0, F.jsx)(t_, {
                                issueId: s,
                                title: i,
                                number: t,
                                owner: u.owner.login,
                                repo: u.name,
                                before: l,
                                after: a,
                                linkText: e,
                                reportCreateBranchDialogOpen: n,
                                setBranchNextStep: y,
                                setNewBranchName: k,
                            }),
                        [s, t, u.name, u.owner.login, i]
                    ),
                    h = (0, Q.useMemo)(
                        () =>
                            o
                                ? (0, F.jsx)(ig.h, {
                                      title: aK.k.sectionTitles.development,
                                  })
                                : (0, F.jsx)(tp, {
                                      issueId: s,
                                      anchorElement: (e) =>
                                          (0, F.jsx)(ip.X, {
                                              title: aK.k.sectionTitles
                                                  .development,
                                              buttonProps: e,
                                          }),
                                      repoPickerSubtitle: b(
                                          aK.k.development.createBranch.toLowerCase(),
                                          aK.k.development.repoPickerSubtitle
                                      ),
                                      prAndBranchPickerSubtitle: b(
                                          aK.k.development.createBranch.toLowerCase(),
                                          aK.k.development
                                              .prsBranchesPickerSubtitle
                                      ),
                                      isCreateBranchDialogOpen: l,
                                      linkedBranches: d,
                                      linkedPullRequests: c,
                                  }),
                        [o, s, b, l, d, c]
                    ),
                    f = (0, nM.u)("copilot_agent_mode"),
                    {
                        codespaceCreationError: K,
                        setCodespaceCreationError: S,
                    } = tn({ repoId: u.id, issueDatabaseId: r || 0 });
                return (0, F.jsxs)(iy.w, {
                    sectionHeader: h,
                    children: [
                        f &&
                            (0, F.jsxs)("div", {
                                className: tb.developmentSectionContainer,
                                children: [
                                    (0, F.jsx)(td, {
                                        repo: u,
                                        issueId: r ?? 0,
                                        onError: S,
                                    }),
                                    K &&
                                        (0, F.jsx)(i3.l, {
                                            title: "Codespace creation failed",
                                            hideTitle: !0,
                                            description:
                                                aK.k.development.copilot.error(
                                                    K
                                                ),
                                            variant: "critical",
                                            className: "mt-2",
                                        }),
                                ],
                            }),
                        !m &&
                            (0, F.jsxs)("span", {
                                className: tb.developmentHelpText,
                                children: [
                                    !o &&
                                        b(
                                            aK.k.development.createBranch,
                                            void 0,
                                            aK.k.development.createBranchSuffix
                                        ),
                                    (0, F.jsx)("span", {
                                        children:
                                            o && aK.k.emptySections.development,
                                    }),
                                ],
                            }),
                        "local" === g &&
                            (0, F.jsx)(tt, {
                                branch: p,
                                onClose: () => y("none"),
                            }),
                        "desktop" === g &&
                            (0, F.jsx)(ts, {
                                owner: u.owner.login,
                                repository: u.name,
                                branch: p,
                                onClose: () => y("none"),
                            }),
                        (0, F.jsxs)(H.l, {
                            variant: "full",
                            "data-testid": ab.Y.linkedPullRequestContainer,
                            className: tb.developmentActionList,
                            children: [
                                (0, F.jsx)(tf, { linkedBranches: d }),
                                (0, F.jsx)(tS, { linkedPullRequests: c }),
                            ],
                        }),
                    ],
                });
            }
            try {
                tA.displayName ||
                    (tA.displayName = "DevelopmentSectionFallback");
            } catch {}
            try {
                tP.displayName || (tP.displayName = "DevelopmentSection");
            } catch {}
            let tB = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ParticipantsSectionFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "login",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "viewerCanPinIssues",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: [{ kind: "Literal", name: "first", value: 10 }],
                        concreteType: "UserConnection",
                        kind: "LinkedField",
                        name: "participants",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "ParticipantFragment",
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: "participants(first:10)",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanConvertToDiscussion",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanDelete",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanTransfer",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanType",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanLock",
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            tB.hash = "8b167d1b7995165bc1a49a7fb28d38bb";
            let tD = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ParticipantFragment",
                selections: [
                    {
                        kind: "InlineDataFragmentSpread",
                        name: "AssigneePickerSharedAssignee",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "login",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "name",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "profileResourcePath",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "size",
                                                value: 64,
                                            },
                                        ],
                                        kind: "ScalarField",
                                        name: "avatarUrl",
                                        storageKey: "avatarUrl(size:64)",
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isCopilot",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Bot",
                                        abstractKey: null,
                                    },
                                ],
                                type: "Actor",
                                abstractKey: "__isActor",
                            },
                        ],
                        args: null,
                        argumentDefinitions: [],
                    },
                ],
                type: "User",
                abstractKey: null,
            };
            tD.hash = "5824349769b00ec8f9119447874bd2fe";
            let tM = {
                GitHubAvatar: "Participant-module__GitHubAvatar--mQldG",
            };
            function tV({ participant: e }) {
                let l = (0, N.useFragment)(tD, e),
                    { login: n, avatarUrl: a } = (0, sF.uX)(l);
                return (0, F.jsx)(ek.A, {
                    href: `/${n}`,
                    children: (0, F.jsx)(w.r, {
                        src: a,
                        size: 20,
                        alt: `@${n}`,
                        "data-hovercard-url": (0, eg.dCN)({ owner: n }),
                        className: tM.GitHubAvatar,
                    }),
                });
            }
            try {
                tV.displayName || (tV.displayName = "Participant");
            } catch {}
            let tU = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "repo",
                    },
                    a = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "repo",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    s = [
                        {
                            kind: "Variable",
                            name: "number",
                            variableName: "number",
                        },
                    ],
                    i = [{ kind: "Literal", name: "first", value: 100 }],
                    t = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "ParticipantsListQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: s,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: i,
                                                concreteType: "UserConnection",
                                                kind: "LinkedField",
                                                name: "participants",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "User",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [t, r, u],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "participants(first:100)",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [n, l, e],
                        kind: "Operation",
                        name: "ParticipantsListQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: s,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: i,
                                                concreteType: "UserConnection",
                                                kind: "LinkedField",
                                                name: "participants",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "User",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            t,
                                                            r,
                                                            u,
                                                            o,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "participants(first:100)",
                                            },
                                            o,
                                        ],
                                        storageKey: null,
                                    },
                                    o,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "210b13c5e8f3e0494ec05c008d0e0e0f",
                        metadata: {},
                        name: "ParticipantsListQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            tU.hash = "8010e539d87c30432d481854383e2493";
            var tO = n(73454);
            let tq = {
                    couldNotLoad: "Couldn't load",
                    issueNotFound: "Issue not found",
                    issueNotFoundDescription:
                        "This issue does not exist or has been deleted.",
                    deleteIssueConfirmationTitle: "Delete issue?",
                    deleteIssueConfirmationActionPoints: [
                        "This cannot be undone",
                        "Only adminstrators can delete issues",
                        "Deletion will remove the issue from search and previous references will point to a placeholder",
                    ],
                    deleteIssueConfirmationButton: "Delete",
                    issueTimelineInTransfer:
                        "Issue timeline is being transferred.",
                    notSubscribedDescription:
                        "Only receive notifications from this issue when you have participated or have been @mentioned.",
                    subscribedDescription:
                        "Receive all notifications from this issue.",
                    customDescription:
                        "You will only be notified for events selected from the list below. If you participate or are @mentioned you will be subscribed.",
                    subscribedToClosedDescription:
                        "You will be notified when this issue is closed.",
                    subscribedToReopenedDescription:
                        "You will be notified when this issue is reopened.",
                    customSelectionMissing:
                        "Please select at least one custom event to subscribe to.",
                },
                tH = {
                    ErrorWithRetry:
                        "IssueViewerError-module__ErrorWithRetry--_NZVY",
                    notFoundContainer:
                        "IssueViewerError-module__notFoundContainer--e__mQ",
                    errorIcon: "IssueViewerError-module__errorIcon--iOC6Z",
                    errorMessageContainer:
                        "IssueViewerError-module__errorMessageContainer--oM5U1",
                    descriptionText:
                        "IssueViewerError-module__descriptionText--RLauU",
                },
                t$ = ({ retry: e }) =>
                    (0, F.jsx)(tO.h, {
                        message: tq.couldNotLoad,
                        retry: e,
                        className: tH.ErrorWithRetry,
                    }),
                tz = () =>
                    (0, F.jsxs)("div", {
                        className: tH.notFoundContainer,
                        children: [
                            (0, F.jsx)(W.A, {
                                size: "medium",
                                icon: V.StopIcon,
                                className: tH.errorIcon,
                            }),
                            (0, F.jsxs)("div", {
                                className: tH.errorMessageContainer,
                                children: [
                                    (0, F.jsx)("h2", {
                                        children: tq.issueNotFound,
                                    }),
                                    (0, F.jsx)("span", {
                                        className: tH.descriptionText,
                                        children: tq.issueNotFoundDescription,
                                    }),
                                ],
                            }),
                        ],
                    }),
                tW = (e) => (0, F.jsx)(t$, { retry: e }),
                tQ = (e, l) =>
                    l.message.includes("NOT_FOUND")
                        ? (0, F.jsx)(tz, {})
                        : tW(e);
            try {
                t$.displayName || (t$.displayName = "GenericError");
            } catch {}
            try {
                tz.displayName || (tz.displayName = "NotFoundError");
            } catch {}
            let tG = {
                participantAvatar:
                    "ParticipantsList-module__participantAvatar--poMuO",
                participantLimitNotice:
                    "ParticipantsList-module__participantLimitNotice--uz4xv",
            };
            function tY({ repo: e, owner: l, number: n, totalCount: a }) {
                let [s, i] = (0, N.useQueryLoader)(tU);
                return ((0, Q.useEffect)(() => {
                    i({ repo: e, owner: l, number: n });
                }, [i, n, l, e]),
                s)
                    ? (0, F.jsx)(l5.A, {
                          onRetry: () =>
                              i(
                                  { owner: l, repo: e, number: n },
                                  { fetchPolicy: "network-only" }
                              ),
                          fallback: tW,
                          children: (0, F.jsx)(tX, {
                              queryRef: s,
                              totalCount: a,
                          }),
                      })
                    : null;
            }
            function tX({ queryRef: e, totalCount: l }) {
                let { repository: n } = (0, N.usePreloadedQuery)(tU, e),
                    a = (n?.issue?.participants.nodes || []).flatMap(
                        (e) => e || []
                    );
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsx)(H.l, {
                            children: a.map(
                                ({ login: e, avatarUrl: l, name: n }) =>
                                    (0, F.jsxs)(
                                        H.l.LinkItem,
                                        {
                                            href: `/${e}`,
                                            children: [
                                                (0, F.jsx)(H.l.LeadingVisual, {
                                                    children: (0, F.jsx)(w.r, {
                                                        src: l,
                                                        size: 20,
                                                        alt: `@${e}`,
                                                        "data-hovercard-url":
                                                            (0, eg.dCN)({
                                                                owner: e,
                                                            }),
                                                        className:
                                                            tG.participantAvatar,
                                                    }),
                                                }),
                                                n,
                                                (0, F.jsx)(H.l.Description, {
                                                    truncate: !0,
                                                    children: e,
                                                }),
                                            ],
                                        },
                                        e
                                    )
                            ),
                        }),
                        l > 100 &&
                            (0, F.jsxs)("div", {
                                className: tG.participantLimitNotice,
                                children: [
                                    (0, F.jsx)(V.InfoIcon, { size: 16 }),
                                    "Only the first 100 participants are shown in this list.",
                                ],
                            }),
                    ],
                });
            }
            try {
                tY.displayName || (tY.displayName = "ParticipantsList");
            } catch {}
            try {
                tX.displayName || (tX.displayName = "ParticipantsListInternal");
            } catch {}
            var tJ = n(41057);
            let tZ = {
                participantsLoadingContainer:
                    "ParticipantsListLoading-module__participantsLoadingContainer--sGp0C",
            };
            function t0() {
                return (0, F.jsxs)("div", {
                    className: tZ.participantsLoadingContainer,
                    children: [
                        (0, F.jsx)(tJ.Q, { height: "md", width: "60%" }),
                        (0, F.jsx)(tJ.Q, { height: "md", width: "80%" }),
                        (0, F.jsx)(tJ.Q, { height: "md", width: "40%" }),
                        (0, F.jsx)(tJ.Q, { height: "md", width: "60%" }),
                        (0, F.jsx)(tJ.Q, { height: "md", width: "70%" }),
                    ],
                });
            }
            try {
                t0.displayName || (t0.displayName = "ParticipantsListLoading");
            } catch {}
            let t1 = {
                participantsContainer:
                    "ParticipantsSection-module__participantsContainer--GG2PJ",
                participantsListContainer:
                    "ParticipantsSection-module__participantsListContainer--blMv1",
                showMoreButton:
                    "ParticipantsSection-module__showMoreButton--bFh78",
                participantsDialogContent:
                    "ParticipantsSection-module__participantsDialogContent--Xikfx",
            };
            function t2({ issue: e }) {
                let {
                        repository: {
                            owner: { login: l },
                            name: n,
                            viewerCanPinIssues: a,
                        },
                        number: s,
                        participants: i,
                        viewerCanConvertToDiscussion: t,
                        viewerCanDelete: r,
                        viewerCanTransfer: u,
                        viewerCanType: o,
                        viewerCanLock: d,
                    } = (0, N.useFragment)(tB, e),
                    c = !d && !u && !r && !a && !t && !o,
                    m = (i.nodes || []).flatMap((e) => e || []).slice(0, 5),
                    [g, y] = (0, Q.useState)(!1),
                    p = m.length > 0,
                    k = i.totalCount - 5,
                    b = k
                        ? `and ${k} other participants, click to see the full list`
                        : void 0;
                return (0, F.jsx)(iy.w, {
                    sectionHeader: (0, F.jsx)(ig.h, {
                        title: aK.k.sectionTitles.participants,
                    }),
                    emptyText: p ? void 0 : aK.k.emptySections.participants,
                    hideDivider: c,
                    children: (0, F.jsxs)("div", {
                        "data-testid": "sidebar-participants-section",
                        className: t1.participantsContainer,
                        children: [
                            (0, F.jsx)("div", {
                                className: t1.participantsListContainer,
                                children: m.map((e) =>
                                    (0, F.jsx)(tV, { participant: e }, e.id)
                                ),
                            }),
                            k > 0 &&
                                (0, F.jsxs)($.Q, {
                                    "aria-label": b,
                                    variant: "invisible",
                                    onClick: () => y(!0),
                                    className: t1.showMoreButton,
                                    children: ["+", k],
                                }),
                            g &&
                                (0, F.jsx)(lR.l, {
                                    title: "Participants",
                                    onClose: () => y(!1),
                                    children: (0, F.jsx)("div", {
                                        className: t1.participantsDialogContent,
                                        children: (0, F.jsx)(Q.Suspense, {
                                            fallback: (0, F.jsx)(t0, {}),
                                            children: (0, F.jsx)(tY, {
                                                owner: l,
                                                repo: n,
                                                number: s,
                                                totalCount: i.totalCount,
                                            }),
                                        }),
                                    }),
                                }),
                        ],
                    }),
                });
            }
            try {
                t2.displayName || (t2.displayName = "ParticipantsSection");
            } catch {}
            let t4 = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "owner",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "repo",
                    },
                    a = [
                        {
                            kind: "Variable",
                            name: "name",
                            variableName: "repo",
                        },
                        {
                            kind: "Variable",
                            name: "owner",
                            variableName: "owner",
                        },
                    ],
                    s = [
                        {
                            kind: "Variable",
                            name: "number",
                            variableName: "number",
                        },
                    ],
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [t, i],
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    y = [
                        { kind: "Literal", name: "first", value: 3 },
                        { kind: "Literal", name: "ranked", value: !0 },
                    ],
                    p = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "nodes",
                            plural: !0,
                            selections: [i, r, u, o, d, c, m, g],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "PageInfo",
                            kind: "LinkedField",
                            name: "pageInfo",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "hasNextPage",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "RelationshipsSectionQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: s,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "RelationshipsSectionFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, n, e],
                        kind: "Operation",
                        name: "RelationshipsSectionQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: s,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            i,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    t,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "__typename",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "login",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            i,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    i,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "isArchived",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "parent",
                                                plural: !1,
                                                selections: [
                                                    i,
                                                    r,
                                                    u,
                                                    o,
                                                    d,
                                                    c,
                                                    m,
                                                    g,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SubIssuesSummary",
                                                        kind: "LinkedField",
                                                        name: "subIssuesSummary",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "total",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "completed",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: "topBlockedBy",
                                                args: y,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "blockedBy",
                                                plural: !1,
                                                selections: p,
                                                storageKey:
                                                    "blockedBy(first:3,ranked:true)",
                                            },
                                            {
                                                alias: "topBlocking",
                                                args: y,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "blocking",
                                                plural: !1,
                                                selections: p,
                                                storageKey:
                                                    "blocking(first:3,ranked:true)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "IssueDependenciesSummary",
                                                kind: "LinkedField",
                                                name: "issueDependenciesSummary",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "blockedBy",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "blocking",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanUpdateMetadata",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    i,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "fb49273cd00ce3bddd1c867fab1d6908",
                        metadata: {},
                        name: "RelationshipsSectionQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            t4.hash = "2dcfedc7ee21cc66645697ef5b0d3cb1";
            let t6 = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = [
                        { kind: "Literal", name: "first", value: 3 },
                        { kind: "Literal", name: "ranked", value: !0 },
                    ],
                    n = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "nodes",
                            plural: !0,
                            selections: [
                                e,
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "DependencyIssueFragment",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "PageInfo",
                            kind: "LinkedField",
                            name: "pageInfo",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "hasNextPage",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "RelationshipsSectionFragment",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "parent",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "ParentIssueFragment",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: "topBlockedBy",
                            args: l,
                            concreteType: "IssueConnection",
                            kind: "LinkedField",
                            name: "blockedBy",
                            plural: !1,
                            selections: n,
                            storageKey: "blockedBy(first:3,ranked:true)",
                        },
                        {
                            alias: "topBlocking",
                            args: l,
                            concreteType: "IssueConnection",
                            kind: "LinkedField",
                            name: "blocking",
                            plural: !1,
                            selections: n,
                            storageKey: "blocking(first:3,ranked:true)",
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "IssueDependenciesSummary",
                            kind: "LinkedField",
                            name: "issueDependenciesSummary",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "blockedBy",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "blocking",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "useCanEditSubIssues",
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            t6.hash = "f90dad947a48313e268c8bb0d3e824f5";
            var t5 = n(53419),
                t7 = n(90352);
            let t3 = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [a, n],
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    c = [
                        { kind: "Literal", name: "first", value: 3 },
                        { kind: "Literal", name: "ranked", value: !0 },
                    ],
                    m = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "nodes",
                            plural: !0,
                            selections: [n, s, i, t, r, u, o, d],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "PageInfo",
                            kind: "LinkedField",
                            name: "pageInfo",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "hasNextPage",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "setParentMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "AddSubIssuePayload",
                                kind: "LinkedField",
                                name: "addSubIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "subIssue",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "RelationshipsSectionFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "setParentMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "AddSubIssuePayload",
                                kind: "LinkedField",
                                name: "addSubIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "subIssue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    a,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "__typename",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "login",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            n,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    n,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "isArchived",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "parent",
                                                plural: !1,
                                                selections: [
                                                    n,
                                                    s,
                                                    i,
                                                    t,
                                                    r,
                                                    u,
                                                    o,
                                                    d,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "SubIssuesSummary",
                                                        kind: "LinkedField",
                                                        name: "subIssuesSummary",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "total",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "completed",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: "topBlockedBy",
                                                args: c,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "blockedBy",
                                                plural: !1,
                                                selections: m,
                                                storageKey:
                                                    "blockedBy(first:3,ranked:true)",
                                            },
                                            {
                                                alias: "topBlocking",
                                                args: c,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "blocking",
                                                plural: !1,
                                                selections: m,
                                                storageKey:
                                                    "blocking(first:3,ranked:true)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "IssueDependenciesSummary",
                                                kind: "LinkedField",
                                                name: "issueDependenciesSummary",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "blockedBy",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "blocking",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanUpdateMetadata",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "177d7fd1c2cc0c8bf052fcd047fe9b3a",
                        metadata: {},
                        name: "setParentMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            t3.hash = "d7ae6b6f869509e0cb75ae50298a2db5";
            let t8 = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [{ kind: "Variable", name: "id", variableName: "id" }],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = [{ kind: "Literal", name: "first", value: 100 }],
                    s = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "nodes",
                            plural: !0,
                            selections: [n],
                            storageKey: null,
                        },
                    ],
                    i = {
                        alias: null,
                        args: a,
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "blockedBy",
                        plural: !1,
                        selections: s,
                        storageKey: "blockedBy(first:100)",
                    },
                    t = {
                        alias: null,
                        args: a,
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "blocking",
                        plural: !1,
                        selections: s,
                        storageKey: "blocking(first:100)",
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "DependenciesPickerBlockingBlockedByIssuesQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [n, i, t],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "DependenciesPickerBlockingBlockedByIssuesQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    n,
                                    {
                                        kind: "InlineFragment",
                                        selections: [i, t],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "e217341def0be54888c037d5b64f6889",
                        metadata: {},
                        name: "DependenciesPickerBlockingBlockedByIssuesQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            t8.hash = "5256acc8a89667f2e629c973029c8f67";
            var t9 = n(30721);
            let re = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        args: null,
                        kind: "FragmentSpread",
                        name: "RelationshipsSectionFragment",
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__typename",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "login",
                                storageKey: null,
                            },
                            a,
                        ],
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isArchived",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [t, a],
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        concreteType: "Issue",
                        kind: "LinkedField",
                        name: "parent",
                        plural: !1,
                        selections: [
                            a,
                            i,
                            o,
                            d,
                            s,
                            c,
                            m,
                            g,
                            {
                                alias: null,
                                args: null,
                                concreteType: "SubIssuesSummary",
                                kind: "LinkedField",
                                name: "subIssuesSummary",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "total",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "completed",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    p = [
                        { kind: "Literal", name: "first", value: 3 },
                        { kind: "Literal", name: "ranked", value: !0 },
                    ],
                    k = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "nodes",
                            plural: !0,
                            selections: [a, i, o, d, s, c, m, g],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "PageInfo",
                            kind: "LinkedField",
                            name: "pageInfo",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "hasNextPage",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    F = {
                        alias: "topBlockedBy",
                        args: p,
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "blockedBy",
                        plural: !1,
                        selections: k,
                        storageKey: "blockedBy(first:3,ranked:true)",
                    },
                    b = {
                        alias: "topBlocking",
                        args: p,
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "blocking",
                        plural: !1,
                        selections: k,
                        storageKey: "blocking(first:3,ranked:true)",
                    },
                    h = {
                        alias: null,
                        args: null,
                        concreteType: "IssueDependenciesSummary",
                        kind: "LinkedField",
                        name: "issueDependenciesSummary",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "blockedBy",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "blocking",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanUpdateMetadata",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "addBlockedByMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "AddBlockedByPayload",
                                kind: "LinkedField",
                                name: "addBlockedBy",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [n],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "blockingIssue",
                                        plural: !1,
                                        selections: [
                                            a,
                                            s,
                                            i,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [t],
                                                storageKey: null,
                                            },
                                            n,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "addBlockedByMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "AddBlockedByPayload",
                                kind: "LinkedField",
                                name: "addBlockedBy",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [t, r, a, u],
                                                storageKey: null,
                                            },
                                            y,
                                            F,
                                            b,
                                            h,
                                            f,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "blockingIssue",
                                        plural: !1,
                                        selections: [
                                            a,
                                            s,
                                            i,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [t, a, r, u],
                                                storageKey: null,
                                            },
                                            y,
                                            F,
                                            b,
                                            h,
                                            f,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "0488aef45208067d57bdbfc4ee347f83",
                        metadata: {},
                        name: "addBlockedByMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            re.hash = "8500c41903f52b72cdb6ca44ecb913ec";
            let rl = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "cursor",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "pageSize",
                    },
                    a = [{ kind: "Variable", name: "id", variableName: "id" }],
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    r = [
                        {
                            kind: "Variable",
                            name: "after",
                            variableName: "cursor",
                        },
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "pageSize",
                        },
                    ],
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "LazyRelationshipsBlockedByListViewPaginatedQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "pageSize",
                                                variableName: "pageSize",
                                            },
                                        ],
                                        kind: "FragmentSpread",
                                        name: "LazyRelationshipsBlockedByListViewFragment",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, n, l],
                        kind: "Operation",
                        name: "LazyRelationshipsBlockedByListViewPaginatedQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    s,
                                    i,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [t, i],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: r,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "blockedBy",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Issue",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    i,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "url",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "number",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "title",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "titleHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "state",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "stateReason",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "name",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                t,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "owner",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            s,
                                                                                            u,
                                                                                            i,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                i,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: [
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "first",
                                                                                value: 10,
                                                                            },
                                                                        ],
                                                                        concreteType:
                                                                            "UserConnection",
                                                                        kind: "LinkedField",
                                                                        name: "assignees",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "UserEdge",
                                                                                    kind: "LinkedField",
                                                                                    name: "edges",
                                                                                    plural: !0,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "User",
                                                                                                kind: "LinkedField",
                                                                                                name: "node",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        i,
                                                                                                        u,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "avatarUrl",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            "assignees(first:10)",
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: [
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "first",
                                                                                value: 0,
                                                                            },
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "includeClosedPrs",
                                                                                value: !0,
                                                                            },
                                                                        ],
                                                                        concreteType:
                                                                            "PullRequestConnection",
                                                                        kind: "LinkedField",
                                                                        name: "closedByPullRequestsReferences",
                                                                        plural: !1,
                                                                        selections:
                                                                            [o],
                                                                        storageKey:
                                                                            "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                                                                    },
                                                                    s,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasNextPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "endCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: r,
                                                filters: null,
                                                handle: "connection",
                                                key: "LazyRelationshipsBlockedByListViewFragment__blockedBy",
                                                kind: "LinkedHandle",
                                                name: "blockedBy",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "d627459376b3eb0e98562a3f337a34df",
                        metadata: {},
                        name: "LazyRelationshipsBlockedByListViewPaginatedQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            rl.hash = "7213d1e34ddacd390d75418f447a0d76";
            let rn = (function () {
                var e = ["blockedBy"],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "pageSize",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "pageSize",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: {
                                    count: "pageSize",
                                    cursor: "cursor",
                                },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: rl,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "LazyRelationshipsBlockedByListViewFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: "blockedBy",
                            args: null,
                            concreteType: "IssueConnection",
                            kind: "LinkedField",
                            name: "__LazyRelationshipsBlockedByListViewFragment__blockedBy_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "IssueEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                l,
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "PaginatedRelationshipsListAllViewItemFragment",
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        l,
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            rn.hash = "7213d1e34ddacd390d75418f447a0d76";
            let ra = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "cursor",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "pageSize",
                    },
                    a = [{ kind: "Variable", name: "id", variableName: "id" }],
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    r = [
                        {
                            kind: "Variable",
                            name: "after",
                            variableName: "cursor",
                        },
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "pageSize",
                        },
                    ],
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "LazyRelationshipsBlockedByListViewQuery",
                        selections: [
                            {
                                alias: "issue",
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "pageSize",
                                                variableName: "pageSize",
                                            },
                                        ],
                                        kind: "FragmentSpread",
                                        name: "LazyRelationshipsBlockedByListViewFragment",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, e, n],
                        kind: "Operation",
                        name: "LazyRelationshipsBlockedByListViewQuery",
                        selections: [
                            {
                                alias: "issue",
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    s,
                                    i,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [t, i],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: r,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "blockedBy",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Issue",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    i,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "url",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "number",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "title",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "titleHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "state",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "stateReason",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "name",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                t,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "owner",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            s,
                                                                                            u,
                                                                                            i,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                i,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: [
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "first",
                                                                                value: 10,
                                                                            },
                                                                        ],
                                                                        concreteType:
                                                                            "UserConnection",
                                                                        kind: "LinkedField",
                                                                        name: "assignees",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "UserEdge",
                                                                                    kind: "LinkedField",
                                                                                    name: "edges",
                                                                                    plural: !0,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "User",
                                                                                                kind: "LinkedField",
                                                                                                name: "node",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        i,
                                                                                                        u,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "avatarUrl",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            "assignees(first:10)",
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: [
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "first",
                                                                                value: 0,
                                                                            },
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "includeClosedPrs",
                                                                                value: !0,
                                                                            },
                                                                        ],
                                                                        concreteType:
                                                                            "PullRequestConnection",
                                                                        kind: "LinkedField",
                                                                        name: "closedByPullRequestsReferences",
                                                                        plural: !1,
                                                                        selections:
                                                                            [o],
                                                                        storageKey:
                                                                            "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                                                                    },
                                                                    s,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasNextPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "endCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: r,
                                                filters: null,
                                                handle: "connection",
                                                key: "LazyRelationshipsBlockedByListViewFragment__blockedBy",
                                                kind: "LinkedHandle",
                                                name: "blockedBy",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "699027a6973d50fc7d95de8ec9b543ee",
                        metadata: {},
                        name: "LazyRelationshipsBlockedByListViewQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            ra.hash = "b33b34b1259e53059598888f0e50a978";
            let rs = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "PaginatedRelationshipsListAllViewItemFragment",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "titleHTML",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "stateReason",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "name",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [l],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: [
                                { kind: "Literal", name: "first", value: 10 },
                            ],
                            concreteType: "UserConnection",
                            kind: "LinkedField",
                            name: "assignees",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "totalCount",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "UserEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "User",
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                e,
                                                l,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "avatarUrl",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: "assignees(first:10)",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "ClosedByPullRequestsReferences",
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            rs.hash = "e7b61df876bd71053686b197a57ceca3";
            var ri = n(97174),
                rt = n(2970),
                rr = n(98994),
                ru = n(51880),
                ro = n(65964),
                rd = n(43617),
                rc = n(4929),
                rm = n(95378);
            let rg = {
                PaginatedRelationshipsListAllView_AvatarArea:
                    "PaginatedRelationshipsListAllView-module__PaginatedRelationshipsListAllView_AvatarArea--R_CQm",
                PaginatedRelationshipsListAllView_AvatarLink:
                    "PaginatedRelationshipsListAllView-module__PaginatedRelationshipsListAllView_AvatarLink--Rabg5",
                PaginatedRelationshipsListAllView_EmptyAvatar:
                    "PaginatedRelationshipsListAllView-module__PaginatedRelationshipsListAllView_EmptyAvatar--iXqQu",
                PaginatedRelationshipsListAllView_ControlWrapper:
                    "PaginatedRelationshipsListAllView-module__PaginatedRelationshipsListAllView_ControlWrapper--ytK3g",
            };
            function ry({
                accessibleTitle: e,
                isLoadingNext: l,
                hasNextPage: n,
                onLoadMore: a,
                children: s,
            }) {
                let i = [];
                if (l)
                    for (let e = 0; e < 3; e += 1)
                        i.push((0, F.jsx)(rK, {}, e));
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsxs)(ri.u, {
                            title: e,
                            variant: "compact",
                            children: [s, l && i],
                        }),
                        n &&
                            (0, F.jsx)("div", {
                                className:
                                    rg.PaginatedRelationshipsListAllView_ControlWrapper,
                                children: (0, F.jsx)($.Q, {
                                    onClick: a,
                                    disabled: l,
                                    children: aK.k.loadMoreItems,
                                }),
                            }),
                    ],
                });
            }
            function rp({
                issueFragment: e,
                sourceIssueRepositoryNameWithOwner: l,
            }) {
                let n = (0, N.useFragment)(rs, e),
                    { sourceIcon: a } = nD({
                        state: n.state,
                        stateReason: n.stateReason,
                    }),
                    s = a("Issue"),
                    i = rS(l, n.repository.nameWithOwner, n.number);
                return (0, F.jsxs)(rt.c, {
                    title: (0, F.jsx)(rF, { issue: n }),
                    metadata: (0, F.jsx)(rb, { issue: n }),
                    children: [
                        (0, F.jsx)(ru.B, {
                            children: (0, F.jsx)(ro.e, { icon: s }),
                        }),
                        (0, F.jsx)(rd.Q, {
                            children: (0, F.jsx)(rr.U, { children: i }),
                        }),
                    ],
                });
            }
            function rk() {
                let e = [];
                for (let l = 0; l < 3; l += 1) e.push((0, F.jsx)(rK, {}, l));
                return (0, F.jsx)(F.Fragment, {
                    children: (0, F.jsx)(ri.u, {
                        title: aK.k.relationLoadingList,
                        variant: "compact",
                        children: e,
                    }),
                });
            }
            function rF({ issue: e }) {
                let l = (0, ae.us)(e.title, e.titleHTML);
                return (0, F.jsx)(rm.ao, {
                    value: l,
                    href: e.url,
                    anchorClassName: "markdown-title",
                });
            }
            function rb({ issue: e }) {
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsx)(rc.V, {
                            ...(0, ep.G)(
                                "__test-relationships-list-all-view-pull-request-metadata"
                            ),
                            children: (0, F.jsx)(nS.d, {
                                issueId: e.id,
                                closedByPullRequestsReferencesKey: e,
                            }),
                        }),
                        (0, F.jsx)(rc.V, {
                            children: (0, F.jsx)(rh, {
                                owner: e.repository.owner.login,
                                repo: e.repository.name,
                                assignees: e.assignees,
                            }),
                        }),
                    ],
                });
            }
            function rh({ owner: e, repo: l, assignees: n }) {
                let a = n.edges;
                if (0 === n.totalCount || !a) return (0, F.jsx)(rf, {});
                let s = a.map((e) => e?.node).filter((e) => !!e);
                return (0, F.jsx)(nf.A, {
                    alignRight: !0,
                    className: rg.PaginatedRelationshipsListAllView_AvatarArea,
                    children: s.map((n) =>
                        (0, F.jsx)(
                            ek.A,
                            {
                                href: (0, ae.Fj)(
                                    { owner: e, repo: l },
                                    "assignee",
                                    n.login
                                ),
                                "data-hovercard-url": (0, eg.dCN)({
                                    owner: n.login,
                                }),
                                "data-hovercard-fixed-positioning": !0,
                                className:
                                    rg.PaginatedRelationshipsListAllView_AvatarLink,
                                children: (0, F.jsx)(w.r, {
                                    alt: n.login,
                                    src: n.avatarUrl,
                                }),
                            },
                            n.id
                        )
                    ),
                });
            }
            function rf() {
                return (0, F.jsxs)("div", {
                    className: rg.PaginatedRelationshipsListAllView_EmptyAvatar,
                    children: [
                        (0, F.jsx)(V.PersonIcon, { size: 16 }),
                        (0, F.jsx)(V.CircleIcon, { size: 24 }),
                    ],
                });
            }
            function rK() {
                return (0, F.jsx)(rt.c, {
                    ...(0, ep.G)(
                        "__test-paginated-relationships-list-item-skeleton"
                    ),
                    title: (0, F.jsx)(rm.ao, {
                        value: "",
                        children: (0, F.jsx)(ai.O, {
                            height: "20px",
                            width: "30ch",
                        }),
                    }),
                    metadata: (0, F.jsxs)(F.Fragment, {
                        children: [
                            (0, F.jsx)(rc.V, {
                                children: (0, F.jsx)(ai.O, {
                                    variant: "rounded",
                                    width: "4ch",
                                }),
                            }),
                            (0, F.jsx)(rc.V, {
                                children: (0, F.jsx)(ai.O, {
                                    variant: "elliptical",
                                    width: "20px",
                                    height: "20px",
                                }),
                            }),
                        ],
                    }),
                });
            }
            let rS = (e = "", l, n) => `${!e || e === l ? "" : l}#${n}`;
            try {
                ry.displayName ||
                    (ry.displayName = "RelationshipsListAllViewPaginated");
            } catch {}
            try {
                rp.displayName || (rp.displayName = "RelationshipsListItem");
            } catch {}
            try {
                (d = IconComponent).displayName ||
                    (d.displayName = "IconComponent");
            } catch {}
            try {
                rk.displayName ||
                    (rk.displayName = "RelationshipsListViewLoadingSkeleton");
            } catch {}
            try {
                rF.displayName ||
                    (rF.displayName = "RelationshipsListItemTitle");
            } catch {}
            try {
                rb.displayName ||
                    (rb.displayName = "RelationshipsListItemMetadata");
            } catch {}
            try {
                rh.displayName ||
                    (rh.displayName = "RelationshipsListItemAvatarMetadata");
            } catch {}
            try {
                rf.displayName || (rf.displayName = "EmptyAvatar");
            } catch {}
            try {
                rK.displayName ||
                    (rK.displayName = "RelationshipListItemSkeleton");
            } catch {}
            let rI = "LazyRelationshipsBlockedByListViewFragment__blockedBy";
            function rv({ itemId: e, pageSize: l = 25, blockedByCount: n }) {
                let a = (0, F.jsx)(rk, {});
                return (0, F.jsx)(Q.Suspense, {
                    fallback: a,
                    children: (0, F.jsx)(rL, {
                        itemId: e,
                        pageSize: l,
                        blockedByCount: n,
                    }),
                });
            }
            function rL({ itemId: e, pageSize: l, blockedByCount: n }) {
                let a = (0, N.useLazyLoadQuery)(ra, {
                        id: e,
                        pageSize: l,
                    }).issue,
                    {
                        data: s,
                        loadNext: i,
                        isLoadingNext: t,
                    } = (0, N.usePaginationFragment)(rn, a),
                    r = (0, Q.useCallback)(() => i(25), [i]),
                    u = (0, F.jsx)(i3.l, {
                        variant: "info",
                        children: (0, F.jsx)(i3.l.Title, {
                            children: aK.k.emptyBlockedByList,
                        }),
                    });
                if (!a || !s) return u;
                let o = s.repository;
                if (!o) return u;
                let d = s.blockedBy?.edges
                    ?.map((e) => e?.node)
                    .filter((e) => !!e);
                if (!d || 0 === d.length) return u;
                let c = !s.blockedBy?.pageInfo?.hasNextPage,
                    m = d.length < n && c;
                return (0, F.jsxs)(ry, {
                    accessibleTitle: aK.k.relationNames.blockedByIssues,
                    isLoadingNext: t,
                    hasNextPage: s.blockedBy?.pageInfo?.hasNextPage,
                    onLoadMore: r,
                    children: [
                        d.map((e) =>
                            (0, F.jsx)(
                                rp,
                                {
                                    issueFragment: e,
                                    sourceIssueRepositoryNameWithOwner:
                                        o.nameWithOwner,
                                },
                                e.id
                            )
                        ),
                        m &&
                            (0, F.jsxs)(H.l.Item, {
                                disabled: !0,
                                "aria-disabled": "true",
                                className: "pl-3",
                                children: [
                                    (0, F.jsx)(H.l.LeadingVisual, {
                                        children: (0, F.jsx)(V.LockIcon, {
                                            size: 16,
                                        }),
                                    }),
                                    (0, F.jsx)("span", {
                                        className: "text-small color-fg-muted",
                                        "data-testid":
                                            "private-blocked-by-notice-modal",
                                        children: "Private issues are hidden.",
                                    }),
                                ],
                            }),
                    ],
                });
            }
            try {
                rv.displayName ||
                    (rv.displayName = "LazyRelationshipsBlockedByListView");
            } catch {}
            try {
                rL.displayName ||
                    (rL.displayName = "RelationshipsBlockedByListViewInternal");
            } catch {}
            let rT = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "cursor",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "pageSize",
                    },
                    a = [{ kind: "Variable", name: "id", variableName: "id" }],
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    r = [
                        {
                            kind: "Variable",
                            name: "after",
                            variableName: "cursor",
                        },
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "pageSize",
                        },
                    ],
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "LazyRelationshipsBlockingListViewPaginatedQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "pageSize",
                                                variableName: "pageSize",
                                            },
                                        ],
                                        kind: "FragmentSpread",
                                        name: "LazyRelationshipsBlockingListViewFragment",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, n, l],
                        kind: "Operation",
                        name: "LazyRelationshipsBlockingListViewPaginatedQuery",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    s,
                                    i,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [t, i],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: r,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "blocking",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Issue",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    i,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "url",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "number",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "title",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "titleHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "state",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "stateReason",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "name",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                t,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "owner",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            s,
                                                                                            u,
                                                                                            i,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                i,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: [
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "first",
                                                                                value: 10,
                                                                            },
                                                                        ],
                                                                        concreteType:
                                                                            "UserConnection",
                                                                        kind: "LinkedField",
                                                                        name: "assignees",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "UserEdge",
                                                                                    kind: "LinkedField",
                                                                                    name: "edges",
                                                                                    plural: !0,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "User",
                                                                                                kind: "LinkedField",
                                                                                                name: "node",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        i,
                                                                                                        u,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "avatarUrl",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            "assignees(first:10)",
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: [
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "first",
                                                                                value: 0,
                                                                            },
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "includeClosedPrs",
                                                                                value: !0,
                                                                            },
                                                                        ],
                                                                        concreteType:
                                                                            "PullRequestConnection",
                                                                        kind: "LinkedField",
                                                                        name: "closedByPullRequestsReferences",
                                                                        plural: !1,
                                                                        selections:
                                                                            [o],
                                                                        storageKey:
                                                                            "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                                                                    },
                                                                    s,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasNextPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "endCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: r,
                                                filters: null,
                                                handle: "connection",
                                                key: "LazyRelationshipsBlockingListViewFragment__blocking",
                                                kind: "LinkedHandle",
                                                name: "blocking",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "590fdeea74f3f56850f776e647c17b3e",
                        metadata: {},
                        name: "LazyRelationshipsBlockingListViewPaginatedQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            rT.hash = "fcb1bdd403819f755a2d0bf0b34ee3f5";
            let rC = (function () {
                var e = ["blocking"],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "pageSize",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "pageSize",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: {
                                    count: "pageSize",
                                    cursor: "cursor",
                                },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: rT,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "LazyRelationshipsBlockingListViewFragment",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: "blocking",
                            args: null,
                            concreteType: "IssueConnection",
                            kind: "LinkedField",
                            name: "__LazyRelationshipsBlockingListViewFragment__blocking_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "IssueEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: "Issue",
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                l,
                                                {
                                                    args: null,
                                                    kind: "FragmentSpread",
                                                    name: "PaginatedRelationshipsListAllViewItemFragment",
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        l,
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            rC.hash = "fcb1bdd403819f755a2d0bf0b34ee3f5";
            let rx = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "cursor",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "pageSize",
                    },
                    a = [{ kind: "Variable", name: "id", variableName: "id" }],
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    r = [
                        {
                            kind: "Variable",
                            name: "after",
                            variableName: "cursor",
                        },
                        {
                            kind: "Variable",
                            name: "first",
                            variableName: "pageSize",
                        },
                    ],
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "LazyRelationshipsBlockingListViewQuery",
                        selections: [
                            {
                                alias: "issue",
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "pageSize",
                                                variableName: "pageSize",
                                            },
                                        ],
                                        kind: "FragmentSpread",
                                        name: "LazyRelationshipsBlockingListViewFragment",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, e, n],
                        kind: "Operation",
                        name: "LazyRelationshipsBlockingListViewQuery",
                        selections: [
                            {
                                alias: "issue",
                                args: a,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    s,
                                    i,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [t, i],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: r,
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "blocking",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Issue",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    i,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "url",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "number",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "title",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "titleHTML",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "state",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "stateReason",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "name",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                t,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "owner",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            s,
                                                                                            u,
                                                                                            i,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                i,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: [
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "first",
                                                                                value: 10,
                                                                            },
                                                                        ],
                                                                        concreteType:
                                                                            "UserConnection",
                                                                        kind: "LinkedField",
                                                                        name: "assignees",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "UserEdge",
                                                                                    kind: "LinkedField",
                                                                                    name: "edges",
                                                                                    plural: !0,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "User",
                                                                                                kind: "LinkedField",
                                                                                                name: "node",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        i,
                                                                                                        u,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "avatarUrl",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            "assignees(first:10)",
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: [
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "first",
                                                                                value: 0,
                                                                            },
                                                                            {
                                                                                kind: "Literal",
                                                                                name: "includeClosedPrs",
                                                                                value: !0,
                                                                            },
                                                                        ],
                                                                        concreteType:
                                                                            "PullRequestConnection",
                                                                        kind: "LinkedField",
                                                                        name: "closedByPullRequestsReferences",
                                                                        plural: !1,
                                                                        selections:
                                                                            [o],
                                                                        storageKey:
                                                                            "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                                                                    },
                                                                    s,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasNextPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "endCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: r,
                                                filters: null,
                                                handle: "connection",
                                                key: "LazyRelationshipsBlockingListViewFragment__blocking",
                                                kind: "LinkedHandle",
                                                name: "blocking",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "01febe9295f70ccff8bcace907321043",
                        metadata: {},
                        name: "LazyRelationshipsBlockingListViewQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            rx.hash = "0fec157cf9aecb3dc4e520f9209f5dcd";
            let rR = "LazyRelationshipsBlockingListViewFragment__blocking";
            function rN({ itemId: e, pageSize: l = 25, blockingCount: n }) {
                let a = (0, F.jsx)(rk, {});
                return (0, F.jsx)(Q.Suspense, {
                    fallback: a,
                    children: (0, F.jsx)(rj, {
                        itemId: e,
                        pageSize: l,
                        blockingCount: n,
                    }),
                });
            }
            function rj({ itemId: e, pageSize: l, blockingCount: n }) {
                let a = (0, N.useLazyLoadQuery)(rx, {
                        id: e,
                        pageSize: l,
                    }).issue,
                    {
                        data: s,
                        loadNext: i,
                        isLoadingNext: t,
                    } = (0, N.usePaginationFragment)(rC, a),
                    r = (0, Q.useCallback)(() => i(25), [i]),
                    u = (0, F.jsx)(i3.l, {
                        variant: "info",
                        children: (0, F.jsx)(i3.l.Title, {
                            children: aK.k.emptyBlockingList,
                        }),
                    });
                if (!a || !s) return u;
                let o = s.repository;
                if (!o) return u;
                let d = s.blocking?.edges
                    ?.map((e) => e?.node)
                    .filter((e) => !!e);
                if (!d || 0 === d.length) return u;
                let c = !s.blocking?.pageInfo?.hasNextPage,
                    m = d.length < n && c;
                return (0, F.jsxs)(ry, {
                    accessibleTitle: aK.k.relationNames.blockingIssues,
                    isLoadingNext: t,
                    hasNextPage: s.blocking?.pageInfo?.hasNextPage,
                    onLoadMore: r,
                    children: [
                        d.map((e) =>
                            (0, F.jsx)(
                                rp,
                                {
                                    issueFragment: e,
                                    sourceIssueRepositoryNameWithOwner:
                                        o.nameWithOwner,
                                },
                                e.id
                            )
                        ),
                        m &&
                            (0, F.jsxs)(H.l.Item, {
                                disabled: !0,
                                "aria-disabled": "true",
                                className: "pl-3",
                                children: [
                                    (0, F.jsx)(H.l.LeadingVisual, {
                                        children: (0, F.jsx)(V.LockIcon, {
                                            size: 16,
                                        }),
                                    }),
                                    (0, F.jsx)("span", {
                                        className: "text-small color-fg-muted",
                                        "data-testid":
                                            "private-blocking-notice-modal",
                                        children: "Private issues are hidden.",
                                    }),
                                ],
                            }),
                    ],
                });
            }
            try {
                rN.displayName ||
                    (rN.displayName = "LazyRelationshipsBlockingListView");
            } catch {}
            try {
                rj.displayName ||
                    (rj.displayName = "RelationshipsBlockingListViewInternal");
            } catch {}
            function r_({
                environment: e,
                input: l,
                onError: n,
                onCompleted: a,
            }) {
                return (0, N.commitMutation)(e, {
                    mutation: re,
                    variables: { input: l },
                    onError: (e) => n && n(e),
                    onCompleted: (e) => a && a(e),
                    updater: (e) => {
                        (e
                            .get(l.issueId)
                            ?.getLinkedRecord("blockedBy", { first: 100 })
                            ?.invalidateRecord(),
                            e
                                .get(l.blockingIssueId)
                                ?.getLinkedRecord("blocking", { first: 100 })
                                ?.invalidateRecord());
                        let n = N.ConnectionHandler.getConnectionID(
                            l.issueId,
                            rI
                        );
                        e.get(n)?.invalidateRecord();
                        let a = N.ConnectionHandler.getConnectionID(
                            l.blockingIssueId,
                            rR
                        );
                        e.get(a)?.invalidateRecord();
                    },
                });
            }
            let rw = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        args: null,
                        kind: "FragmentSpread",
                        name: "RelationshipsSectionFragment",
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__typename",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "login",
                                storageKey: null,
                            },
                            a,
                        ],
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isArchived",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [t, a],
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        concreteType: "Issue",
                        kind: "LinkedField",
                        name: "parent",
                        plural: !1,
                        selections: [
                            a,
                            i,
                            o,
                            d,
                            s,
                            c,
                            m,
                            g,
                            {
                                alias: null,
                                args: null,
                                concreteType: "SubIssuesSummary",
                                kind: "LinkedField",
                                name: "subIssuesSummary",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "total",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "completed",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    p = [
                        { kind: "Literal", name: "first", value: 3 },
                        { kind: "Literal", name: "ranked", value: !0 },
                    ],
                    k = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "nodes",
                            plural: !0,
                            selections: [a, i, o, d, s, c, m, g],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "PageInfo",
                            kind: "LinkedField",
                            name: "pageInfo",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "hasNextPage",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    F = {
                        alias: "topBlockedBy",
                        args: p,
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "blockedBy",
                        plural: !1,
                        selections: k,
                        storageKey: "blockedBy(first:3,ranked:true)",
                    },
                    b = {
                        alias: "topBlocking",
                        args: p,
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "blocking",
                        plural: !1,
                        selections: k,
                        storageKey: "blocking(first:3,ranked:true)",
                    },
                    h = {
                        alias: null,
                        args: null,
                        concreteType: "IssueDependenciesSummary",
                        kind: "LinkedField",
                        name: "issueDependenciesSummary",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "blockedBy",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "blocking",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanUpdateMetadata",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "removeBlockedByMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "RemoveBlockedByPayload",
                                kind: "LinkedField",
                                name: "removeBlockedBy",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [n],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "blockingIssue",
                                        plural: !1,
                                        selections: [
                                            a,
                                            s,
                                            i,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [t],
                                                storageKey: null,
                                            },
                                            n,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "removeBlockedByMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "RemoveBlockedByPayload",
                                kind: "LinkedField",
                                name: "removeBlockedBy",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [t, r, a, u],
                                                storageKey: null,
                                            },
                                            y,
                                            F,
                                            b,
                                            h,
                                            f,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "blockingIssue",
                                        plural: !1,
                                        selections: [
                                            a,
                                            s,
                                            i,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [t, a, r, u],
                                                storageKey: null,
                                            },
                                            y,
                                            F,
                                            b,
                                            h,
                                            f,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "ec7045bfa9faa37fa82137dc087231a9",
                        metadata: {},
                        name: "removeBlockedByMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function rE({
                environment: e,
                input: l,
                onError: n,
                onCompleted: a,
            }) {
                return (0, N.commitMutation)(e, {
                    mutation: rw,
                    variables: { input: l },
                    onError: (e) => n && n(e),
                    onCompleted: (e) => a && a(e),
                    updater: (e) => {
                        (e
                            .get(l.issueId)
                            ?.getLinkedRecord("blockedBy", { first: 100 })
                            ?.invalidateRecord(),
                            e
                                .get(l.blockingIssueId)
                                ?.getLinkedRecord("blocking", { first: 100 })
                                ?.invalidateRecord());
                        let n = N.ConnectionHandler.getConnectionID(
                            l.issueId,
                            rI
                        );
                        e.get(n)?.invalidateRecord();
                        let a = N.ConnectionHandler.getConnectionID(
                            l.blockingIssueId,
                            rR
                        );
                        e.get(a)?.invalidateRecord();
                    },
                });
            }
            rw.hash = "fb9c648571be9539ea2d490c926f1f2c";
            let rA = {
                DependenciesPicker:
                    "DependenciesPicker-module__DependenciesPicker--WryxL",
            };
            function rP({
                type: e,
                onClose: l,
                issueId: n,
                organization: a,
                defaultRepositoryNameWithOwner: s,
                anchorRef: i,
                onError: t = lB.l,
            }) {
                let r = (0, N.useRelayEnvironment)(),
                    [u, o] = (0, Q.useState)("idle"),
                    [d, c] = (0, Q.useState)(null),
                    { sendAnalyticsEvent: m } = (0, lS.s)(),
                    g = (0, Q.useCallback)(async () => {
                        (o("loading"),
                            (0, t9.SD)({
                                environment: r,
                                query: t8,
                                variables: { id: n },
                            }).subscribe({
                                next: (e) => {
                                    (c(e), o("success"));
                                },
                                error: () => {
                                    o("error");
                                },
                            }));
                    }, [r, n]);
                (0, Q.useEffect)(() => {
                    "idle" === u &&
                        ("blockedBy" === e || "blocking" === e) &&
                        g();
                }, [r, g, n, u, e]);
                let [y, p] = (0, Q.useState)("Issue"),
                    k = (0, Q.useMemo)(
                        () =>
                            d?.node?.blockedBy?.nodes
                                ? d.node.blockedBy.nodes
                                      .filter((e) => !!e)
                                      .map((e) => e.id)
                                : [],
                        [d?.node?.blockedBy?.nodes]
                    ),
                    b = (0, Q.useMemo)(
                        () =>
                            d?.node?.blocking?.nodes
                                ? d.node.blocking.nodes
                                      .filter((e) => !!e)
                                      .map((e) => e.id)
                                : [],
                        [d?.node?.blocking?.nodes]
                    ),
                    h = (0, Q.useCallback)(
                        (e) => {
                            (p(e), null === e && l && (l(), o("idle")));
                        },
                        [l]
                    ),
                    f = (0, Q.useCallback)(
                        async (l) => {
                            if ("blockedBy" === e) {
                                let e = new Set(l.map((e) => e.id)),
                                    a = new Set(k),
                                    s = Array.from(e).filter((e) => !a.has(e)),
                                    i = Array.from(a).filter((l) => !e.has(l));
                                m(
                                    "issue_viewer.dependencies_picker.blocked_by",
                                    "ISSUE_DEPENDENCIES_PICKER",
                                    {
                                        issuesToAdd: s.length,
                                        issuesToRemove: i.length,
                                    }
                                );
                                let u = [];
                                for (let e of s)
                                    u.push(
                                        new Promise((l) => {
                                            r_({
                                                environment: r,
                                                input: {
                                                    issueId: n,
                                                    blockingIssueId: e,
                                                },
                                                onCompleted: () => l(null),
                                                onError: (e) => {
                                                    l(e);
                                                },
                                            });
                                        })
                                    );
                                for (let e of i)
                                    u.push(
                                        new Promise((l) => {
                                            rE({
                                                environment: r,
                                                input: {
                                                    issueId: n,
                                                    blockingIssueId: e,
                                                },
                                                onCompleted: () => l(null),
                                                onError: (e) => {
                                                    l(e);
                                                },
                                            });
                                        })
                                    );
                                t(
                                    (await Promise.all(u)).flatMap(
                                        (e) => e ?? []
                                    )
                                );
                            } else if ("blocking" === e) {
                                let e = new Set(l.map((e) => e.id)),
                                    a = new Set(b),
                                    s = Array.from(e).filter((e) => !a.has(e)),
                                    i = Array.from(a).filter((l) => !e.has(l));
                                m(
                                    "issue_viewer.dependencies_picker.blocking",
                                    "ISSUE_DEPENDENCIES_PICKER",
                                    {
                                        issuesToAdd: s.length,
                                        issuesToRemove: i.length,
                                    }
                                );
                                let u = [];
                                for (let e of s)
                                    u.push(
                                        new Promise((l) => {
                                            r_({
                                                environment: r,
                                                input: {
                                                    issueId: e,
                                                    blockingIssueId: n,
                                                },
                                                onCompleted: () => l(null),
                                                onError: (e) => {
                                                    l(e);
                                                },
                                            });
                                        })
                                    );
                                for (let e of i)
                                    u.push(
                                        new Promise((l) => {
                                            rE({
                                                environment: r,
                                                input: {
                                                    issueId: e,
                                                    blockingIssueId: n,
                                                },
                                                onCompleted: () => l(null),
                                                onError: (e) => {
                                                    l(e);
                                                },
                                            });
                                        })
                                    );
                                t(
                                    (await Promise.all(u)).flatMap(
                                        (e) => e ?? []
                                    )
                                );
                            }
                        },
                        [e, k, m, t, r, n, b]
                    ),
                    K = (0, Q.useMemo)(() => {
                        let l = [n];
                        return (
                            "blockedBy" === e
                                ? l.push(...b)
                                : "blocking" === e && l.push(...k),
                            l
                        );
                    }, [e, n, b, k]);
                return (0, F.jsx)(D.D, {
                    anchorElement: (e) => {
                        let { ref: l } = e;
                        return (
                            l && (l.current = i.current),
                            (0, F.jsx)(F.Fragment, {})
                        );
                    },
                    onIssueSelection: f,
                    organization: a,
                    defaultRepositoryNameWithOwner: s,
                    pickerType: y,
                    onPickerTypeChange: h,
                    selectedIssueIds: "blockedBy" === e ? k : b,
                    hiddenIssueIds: K,
                    issuePickerProps: {
                        selectionVariant: "multiple",
                        isLoading: "loading" === u,
                        subtitle:
                            "blockedBy" === e
                                ? "Mark current issue as blocked by\u2026"
                                : "Mark current issue as blocking\u2026",
                        className: rA.DependenciesPicker,
                        notice:
                            "error" === u
                                ? {
                                      variant: "error",
                                      text: "We couldn't load the issues. Try reloading the page, or if the problem persists, contact support.",
                                  }
                                : void 0,
                    },
                });
            }
            try {
                rP.displayName || (rP.displayName = "DependenciesPicker");
            } catch {}
            let rB = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "DependencyIssueFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "nameWithOwner",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            function rD({ issueKey: e, onLinkClick: l }) {
                let n = (0, N.useFragment)(rB, e),
                    { sourceIcon: a } = nD({
                        state: n.state,
                        stateReason: n.stateReason,
                    }),
                    s = a("Issue"),
                    i = n.titleHTML || n.title;
                return (0, F.jsxs)(H.l.LinkItem, {
                    href: n.url,
                    target: "_blank",
                    onClick: l
                        ? (e) => {
                              l(e.nativeEvent);
                          }
                        : void 0,
                    children: [
                        (0, F.jsx)(H.l.LeadingVisual, {
                            children: (0, F.jsx)(s, {}),
                        }),
                        (0, F.jsx)(aq.JR, {
                            html: i,
                            className: "markdown-title",
                        }),
                        (0, F.jsxs)(H.l.Description, {
                            variant: "block",
                            children: [
                                n.repository.nameWithOwner,
                                "#",
                                n.number,
                            ],
                        }),
                    ],
                });
            }
            rB.hash = "f6da064623ce9670654a0201831939bd";
            try {
                rD.displayName || (rD.displayName = "DependencyIssue");
            } catch {}
            try {
                (c = IconComponent).displayName ||
                    (c.displayName = "IconComponent");
            } catch {}
            let rM = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ParentIssueFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "nameWithOwner",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SubIssuesSummary",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            rM.hash = "f20ffbfddfade48dfc0bd7caef420126";
            let rV = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "issueId",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "id",
                            variableName: "issueId",
                        },
                    ],
                    n = [
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "ParentIssueFragment",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "HeaderParentTitle",
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        concreteType: "SubIssuesSummary",
                        kind: "LinkedField",
                        name: "subIssuesSummary",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "total",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "completed",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    c = [
                        a,
                        s,
                        i,
                        t,
                        r,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                                a,
                            ],
                            storageKey: null,
                        },
                        u,
                        o,
                        d,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "parent",
                            plural: !1,
                            selections: [
                                a,
                                r,
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Repository",
                                    kind: "LinkedField",
                                    name: "repository",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "name",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "owner",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "login",
                                                    storageKey: null,
                                                },
                                                a,
                                            ],
                                            storageKey: null,
                                        },
                                        a,
                                    ],
                                    storageKey: null,
                                },
                                u,
                                o,
                                s,
                                i,
                                t,
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ParentIssueSubscription",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "IssueUpdatedPayload",
                                kind: "LinkedField",
                                name: "issueUpdated",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueStateUpdated",
                                        plural: !1,
                                        selections: n,
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueTitleUpdated",
                                        plural: !1,
                                        selections: n,
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "subIssuesSummaryUpdated",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "fetchSubIssues",
                                                        value: !1,
                                                    },
                                                ],
                                                kind: "FragmentSpread",
                                                name: "useSubIssuesSummary",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ParentIssueSubscription",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "IssueUpdatedPayload",
                                kind: "LinkedField",
                                name: "issueUpdated",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueStateUpdated",
                                        plural: !1,
                                        selections: c,
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueTitleUpdated",
                                        plural: !1,
                                        selections: c,
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "subIssuesSummaryUpdated",
                                        plural: !1,
                                        selections: [d, a],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "e2367f9b765b0aceb0e2198acc7a964f",
                        metadata: {},
                        name: "ParentIssueSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            rV.hash = "39934fa58f424655af608f38463aa711";
            let rU = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SubIssuesSummary",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    {
                        args: [
                            {
                                kind: "Literal",
                                name: "fetchSubIssues",
                                value: !1,
                            },
                        ],
                        kind: "FragmentSpread",
                        name: "useSubIssuesSummary",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            rU.hash = "5a7187edce3938a43fece98cebbed5eb";
            let rO = {
                    summaryContainer:
                        "SubIssuesSummary-module__summaryContainer--_jmHd",
                },
                rq = {
                    expandTriangleIcon:
                        "SubIssuesSummaryToken-module__expandTriangleIcon--xSUo8",
                    SubIssuesSummaryToken:
                        "SubIssuesSummaryToken-module__SubIssuesSummaryToken--JkzLS",
                };
            function rH({
                progress: { total: e, completed: l, percentCompleted: n },
                ...a
            }) {
                let s = ("button" === a.as && !a.disabled) || "a" === a.as;
                return (0, F.jsx)(nr.A, {
                    leadingVisual: () =>
                        (0, F.jsx)(nt.a, { percentCompleted: n, size: 14 }),
                    text: (0, F.jsxs)(F.Fragment, {
                        children: [
                            (0, F.jsx)("span", { children: `${l} / ${e}` }),
                            s &&
                                (0, F.jsx)(W.A, {
                                    icon: V.TriangleRightIcon,
                                    className: (0, eb.$)(
                                        "triangle",
                                        rq.expandTriangleIcon
                                    ),
                                }),
                        ],
                    }),
                    ...a,
                    sx: {
                        "&:hover, &:focus": s ? { ".triangle": {} } : {},
                        ...a.sx,
                    },
                    className: rq.SubIssuesSummaryToken,
                });
            }
            try {
                rH.displayName || (rH.displayName = "SubIssuesSummaryToken");
            } catch {}
            function r$({ issue: e, onSummaryClick: l }) {
                let n = (0, N.useFragment)(rU, e),
                    a = n7(n),
                    s = l && { as: "a", href: n.url, onClick: (e) => l(e, n) };
                return a.total > 0
                    ? (0, F.jsx)("div", {
                          className: rO.summaryContainer,
                          children: (0, F.jsx)(z.A, {
                              "aria-label": `${a.percentCompleted}% completed`,
                              children: (0, F.jsx)(rH, { ...s, progress: a }),
                          }),
                      })
                    : null;
            }
            try {
                r$.displayName || (r$.displayName = "SubIssuesSummary");
            } catch {}
            function rz({ issueKey: e, onLinkClick: l }) {
                let n = (0, N.useFragment)(rM, e);
                var a = n.id;
                let s = (0, Q.useMemo)(
                    () => ({ variables: { issueId: a }, subscription: rV }),
                    [a]
                );
                (0, N.useSubscription)(s);
                let { sourceIcon: i } = nD({
                        state: n.state,
                        stateReason: n.stateReason,
                    }),
                    t = i("Issue"),
                    r = (0, ae.us)(n.title, n.titleHTML);
                return (0, F.jsxs)(H.l.LinkItem, {
                    href: n.url,
                    target: "_blank",
                    onClick: l
                        ? (e) => {
                              l(e.nativeEvent);
                          }
                        : void 0,
                    children: [
                        (0, F.jsx)(H.l.LeadingVisual, {
                            children: (0, F.jsx)(t, {}),
                        }),
                        (0, F.jsx)(H.l.TrailingVisual, {
                            children: (0, F.jsx)(r$, { issue: n }),
                        }),
                        (0, F.jsx)(aq.JR, {
                            html: r,
                            className: "markdown-title",
                        }),
                        (0, F.jsxs)(H.l.Description, {
                            variant: "block",
                            children: [
                                n.repository.nameWithOwner,
                                "#",
                                n.number,
                            ],
                        }),
                    ],
                });
            }
            try {
                rz.displayName || (rz.displayName = "ParentIssue");
            } catch {}
            try {
                (m = IconComponent).displayName ||
                    (m.displayName = "IconComponent");
            } catch {}
            let rW = {
                ActionList_Relationship_Overrides:
                    "RelationshipsSection-module__ActionList_Relationship_Overrides--P_Q2y",
                ActionList_GroupHeading:
                    "RelationshipsSection-module__ActionList_GroupHeading--WjmKu",
                ActionList_Divider:
                    "RelationshipsSection-module__ActionList_Divider--sMKMZ",
                RelationshipCountLabel:
                    "RelationshipsSection-module__RelationshipCountLabel--_8UK6",
                DependencyErrorBanner:
                    "RelationshipsSection-module__DependencyErrorBanner--AzOUr",
            };
            var rQ = n(34392);
            let rG = {
                RelationshipsListAllModal_TitleCounter:
                    "RelationshipsListAllModal-module__RelationshipsListAllModal_TitleCounter--mHg2F",
                RelationshipsListAllModal_HovercardWrapper:
                    "RelationshipsListAllModal-module__RelationshipsListAllModal_HovercardWrapper--ILfOX",
            };
            function rY({
                dialogTitle: e,
                countOpenItems: l = -1,
                onClose: n,
                returnFocusRef: a,
                children: s,
            }) {
                let i = (0, F.jsx)(rX, { title: e, count: l }),
                    t = (0, F.jsx)(i3.l, {
                        variant: "critical",
                        children: (0, F.jsx)(i3.l.Title, {
                            children: aK.k.relationListAllError,
                        }),
                    });
                return (0, F.jsx)(lR.l, {
                    title: i,
                    onClose: n,
                    returnFocusRef: a,
                    width: "xlarge",
                    height: "large",
                    children: (0, F.jsxs)(l4.t, {
                        fallback: t,
                        children: [
                            (0, F.jsx)("div", {
                                className: `${rG.RelationshipsListAllModal_HovercardWrapper}`,
                                children: (0, F.jsx)(rQ.s, {}),
                            }),
                            s,
                        ],
                    }),
                });
            }
            function rX({ title: e, count: l }) {
                return (0, F.jsxs)("span", {
                    children: [
                        e,
                        l >= 0 &&
                            (0, F.jsx)(t7.A, {
                                className:
                                    rG.RelationshipsListAllModal_TitleCounter,
                                ...(0, ep.G)(
                                    "__test-relationships-list-all-modal-counter"
                                ),
                                children: l,
                            }),
                    ],
                });
            }
            try {
                rY.displayName ||
                    (rY.displayName = "RelationshipsListAllModal");
            } catch {}
            try {
                rX.displayName ||
                    (rX.displayName = "RelationshipListAllModalTitle");
            } catch {}
            let rJ = {
                RelationshipsViewAllButton_LeadingSpacer:
                    "RelationshipsViewAllButton-module__RelationshipsViewAllButton_LeadingSpacer--c1ZnA",
                RelationshipsViewAllButton_Label:
                    "RelationshipsViewAllButton-module__RelationshipsViewAllButton_Label--RLzv2",
            };
            function rZ({ dialogTitle: e, countOpenItems: l, children: n }) {
                let [a, s] = (0, Q.useState)(!1),
                    i = (0, Q.useRef)(null),
                    t = (0, Q.useCallback)(() => s(!1), []);
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsxs)(H.l.Item, {
                            onSelect: () => s(!a),
                            ref: i,
                            children: [
                                (0, F.jsx)(H.l.LeadingVisual, {
                                    children: (0, F.jsx)("div", {
                                        className:
                                            rJ.RelationshipsViewAllButton_LeadingSpacer,
                                    }),
                                }),
                                (0, F.jsxs)("span", {
                                    className:
                                        rJ.RelationshipsViewAllButton_Label,
                                    children: [
                                        aK.k.relationViewAll,
                                        " ",
                                        (0, F.jsx)(V.ArrowRightIcon, {}),
                                    ],
                                }),
                            ],
                        }),
                        a &&
                            (0, F.jsx)(rY, {
                                dialogTitle: e,
                                countOpenItems: l,
                                onClose: t,
                                children: n,
                            }),
                    ],
                });
            }
            try {
                rZ.displayName ||
                    (rZ.displayName = "RelationshipsViewAllButton");
            } catch {}
            function r0(e, l, n) {
                return e > l && (l < 3 || (3 === l && n));
            }
            function r1() {
                return (0, F.jsx)(iy.w, {
                    sectionHeader: (0, F.jsx)(ig.h, {
                        title: aK.k.sectionTitles.relationships,
                    }),
                    emptyText: aK.k.emptySections.relationships,
                });
            }
            function r2({ issue: e, onLinkClick: l, insideSidePanel: n }) {
                let a = (0, N.useFragment)(t6, e),
                    {
                        parent: s,
                        topBlockedBy: i,
                        topBlocking: t,
                        repository: r,
                        id: u,
                        issueDependenciesSummary: o,
                    } = a,
                    { issue_dependencies: d } = (0, nM.h)(),
                    c = (0, N.useRelayEnvironment)(),
                    { alert: m, resetAlert: g, showServerAlert: y } = lD(),
                    {
                        alerts: p,
                        resetAlerts: k,
                        setAlertsFromErrors: b,
                    } = (function () {
                        let [e, l] = (0, Q.useState)([]),
                            n = (0, Q.useCallback)(() => l([]), []),
                            a = (0, Q.useCallback)((e, n) => {
                                let a = "";
                                switch (n) {
                                    case "blocked-by":
                                        a = '"blocked by" ';
                                        break;
                                    case "blocking":
                                        a = '"blocking" ';
                                }
                                l((l) => [
                                    ...l,
                                    {
                                        title: "Dependency limit reached",
                                        body: `Issues have a limit of ${e} ${a}relationships. To add more, an existing one must be removed.`,
                                    },
                                ]);
                            }, []),
                            s = (0, Q.useCallback)(
                                () =>
                                    l((e) => [
                                        ...e,
                                        {
                                            title: "Circular dependency",
                                            body: "An issue may not be blocked by an issue that it is already blocking. Please remove the existing relationship before adding this one.",
                                        },
                                    ]),
                                []
                            ),
                            i = (0, Q.useCallback)(
                                () =>
                                    l((e) => [
                                        ...e,
                                        {
                                            title: "Access denied",
                                            body: "You do not have permission to take this action for the selected issue. A repository role of 'triage' or higher is required on the blocked issue.",
                                        },
                                    ]),
                                []
                            ),
                            t = (0, Q.useCallback)(
                                (e) => {
                                    for (let n of e) {
                                        let e = n.message.match(
                                                /cannot have more than (?<limit>\d+) (?<relationship>blocked-by|blocking) relations/
                                            ),
                                            t = parseInt(
                                                e?.groups?.limit || "NaN",
                                                10
                                            );
                                        if (!isNaN(t)) {
                                            a(
                                                t,
                                                e?.groups?.relationship ??
                                                    "blocked-by"
                                            );
                                            continue;
                                        }
                                        if (
                                            n.message.includes(
                                                "does not have the correct permissions to execute"
                                            )
                                        ) {
                                            i();
                                            continue;
                                        }
                                        if (
                                            n.message.includes(
                                                "this dependency would create a cycle where the target is already blocked by the source"
                                            )
                                        ) {
                                            s();
                                            continue;
                                        }
                                        l((e) => [
                                            ...e,
                                            {
                                                title: "Unexpected error",
                                                body: `An unexpected error occurred. ${n.message}`,
                                            },
                                        ]);
                                    }
                                },
                                [a, s, i]
                            );
                        return {
                            alerts: e,
                            setAlerts: l,
                            resetAlerts: n,
                            setAlertsFromErrors: t,
                        };
                    })(),
                    [h, f] = (0, Q.useState)(!1),
                    [K, S] = (0, Q.useState)(null),
                    [I, v] = (0, Q.useState)(null),
                    L = lO(a);
                (0, Q.useEffect)(() => {
                    h && (S(null), v(null));
                }, [h]);
                let T = (0, Q.useCallback)(() => {
                        v(null);
                    }, []),
                    C = (0, Q.useCallback)(
                        (e) => {
                            e[0]
                                ? (function ({
                                      environment: e,
                                      input: l,
                                      onError: n,
                                      onCompleted: a,
                                  }) {
                                      (0, N.commitMutation)(e, {
                                          mutation: t3,
                                          variables: { input: l },
                                          onError: (e) => n && n(e),
                                          onCompleted: (e) => a && a(e),
                                      });
                                  })({
                                      environment: c,
                                      input: {
                                          subIssueId: u,
                                          issueId: e[0].id,
                                          replaceParent: !0,
                                      },
                                      onError: (e) => {
                                          y(e);
                                      },
                                  })
                                : s &&
                                  nv({
                                      environment: c,
                                      input: { issueId: s.id, subIssueId: u },
                                  });
                        },
                        [c, u, s, y]
                    ),
                    x = (0, Q.useCallback)((e) => S(e), [S]),
                    R = i?.nodes && i.nodes.length > 0,
                    j = t?.nodes && t.nodes.length > 0,
                    _ = i?.pageInfo?.hasNextPage,
                    w = t?.pageInfo?.hasNextPage,
                    E = (0, Q.useMemo)(() => {
                        let e = o.blockedBy || 0;
                        return r0(
                            e,
                            i?.nodes?.length || 0,
                            !i?.pageInfo?.hasNextPage
                        );
                    }, [o, i]),
                    A = (0, Q.useMemo)(() => {
                        let e = o.blocking || 0;
                        return r0(
                            e,
                            t?.nodes?.length || 0,
                            !t?.pageInfo?.hasNextPage
                        );
                    }, [o, t]),
                    P = R || j || E || A,
                    B = (0, Q.useMemo)(() => (d ? s || P : s), [d, s, P]);
                (0, Q.useEffect)(() => {
                    d && P && (0, t5.BI)("issue_viewer.dependencies.shown");
                }, []);
                let M = (0, Q.useRef)(null);
                return (0, F.jsxs)(iy.w, {
                    id: "sidebar-relationships-section",
                    emptyText: B ? void 0 : aK.k.emptySections.relationships,
                    sectionHeader: (0, F.jsxs)(F.Fragment, {
                        children: [
                            (n || void 0 === n) &&
                                (0, F.jsx)(lK.ak, {
                                    commands: {
                                        "issue-viewer:edit-parent": () => {
                                            (f(!1), S("Issue"));
                                        },
                                        "issue-viewer:mark-blocked-by": () => {
                                            d && (f(!1), v("blockedBy"));
                                        },
                                        "issue-viewer:mark-blocking": () => {
                                            d && (f(!1), v("blocking"));
                                        },
                                    },
                                }),
                            (0, F.jsx)(ip.X, {
                                ref: M,
                                buttonProps: { onClick: () => f((e) => !e) },
                                readonly: !L,
                                title: aK.k.sectionTitles.relationships,
                            }),
                            (0, F.jsx)(D.D, {
                                onPickerTypeChange: x,
                                selectedIssueIds: s ? [s.id] : [],
                                hiddenIssueIds: [u],
                                onIssueSelection: C,
                                organization: r.owner.login,
                                defaultRepositoryNameWithOwner: r.nameWithOwner,
                                pickerType: K,
                                anchorElement: (e) => {
                                    let { ref: l } = e;
                                    return (
                                        l && (l.current = M.current),
                                        (0, F.jsx)(F.Fragment, {})
                                    );
                                },
                            }),
                            d &&
                                I &&
                                (0, F.jsx)(rP, {
                                    type: I,
                                    onClose: T,
                                    issueId: u,
                                    organization: r.owner.login,
                                    defaultRepositoryNameWithOwner:
                                        r.nameWithOwner,
                                    anchorRef: M,
                                    onError: b,
                                }),
                            d &&
                                p.length > 0 &&
                                (0, F.jsx)(lE, {
                                    title: `Failed to save ${p.length} ${p.length > 1 ? "issues" : "issue"}`,
                                    onClose: k,
                                    width: "large",
                                    "data-testid": "dependency-alert-dialog",
                                    children: p.map((e, l) =>
                                        (0, F.jsxs)(
                                            i3.l,
                                            {
                                                variant: "critical",
                                                className:
                                                    rW.DependencyErrorBanner,
                                                "aria-label": e.title,
                                                children: [
                                                    (0, F.jsx)(i3.l.Title, {
                                                        children: e.title,
                                                    }),
                                                    (0, F.jsx)(
                                                        i3.l.Description,
                                                        { children: e.body }
                                                    ),
                                                ],
                                            },
                                            l
                                        )
                                    ),
                                }),
                            (0, F.jsx)(O.W, {
                                open: h,
                                onOpenChange: (e) => f(e),
                                anchorRef: M,
                                children: (0, F.jsx)(O.W.Overlay, {
                                    width: "medium",
                                    children: (0, F.jsx)(H.l, {
                                        children: (0, F.jsxs)(H.l.Group, {
                                            children: [
                                                (0, F.jsx)(lK.Vr, {
                                                    commandId:
                                                        "issue-viewer:edit-parent",
                                                    children: s
                                                        ? "Change or remove parent"
                                                        : "Add parent",
                                                }),
                                                d &&
                                                    (0, F.jsx)(lK.Vr, {
                                                        commandId:
                                                            "issue-viewer:mark-blocked-by",
                                                        children: R
                                                            ? "Add or change blocked by"
                                                            : "Mark as blocked by",
                                                    }),
                                                d &&
                                                    (0, F.jsx)(lK.Vr, {
                                                        commandId:
                                                            "issue-viewer:mark-blocking",
                                                        children: j
                                                            ? "Add or change blocking"
                                                            : "Mark as blocking",
                                                    }),
                                            ],
                                        }),
                                    }),
                                }),
                            }),
                        ],
                    }),
                    children: [
                        m &&
                            (0, F.jsx)(lE, {
                                title: m.title,
                                onClose: g,
                                children: m.body,
                            }),
                        (0, F.jsxs)(H.l, {
                            variant: "full",
                            className: rW.ActionList_Relationship_Overrides,
                            children: [
                                s &&
                                    (0, F.jsxs)(H.l.Group, {
                                        children: [
                                            (0, F.jsx)(H.l.GroupHeading, {
                                                as: "h4",
                                                className:
                                                    rW.ActionList_GroupHeading,
                                                children:
                                                    aK.k.relationNames
                                                        .parentIssue,
                                            }),
                                            (0, F.jsx)(rz, {
                                                onLinkClick: l,
                                                issueKey: s,
                                            }),
                                        ],
                                    }),
                                d &&
                                    (R || E) &&
                                    (0, F.jsxs)(F.Fragment, {
                                        children: [
                                            s &&
                                                (0, F.jsx)(H.l.Divider, {
                                                    className:
                                                        rW.ActionList_Divider,
                                                }),
                                            (0, F.jsxs)(H.l.Group, {
                                                children: [
                                                    (0, F.jsxs)(
                                                        H.l.GroupHeading,
                                                        {
                                                            as: "h4",
                                                            className:
                                                                rW.ActionList_GroupHeading,
                                                            children: [
                                                                aK.k
                                                                    .relationNames
                                                                    .blockedByIssues,
                                                                o.blockedBy >
                                                                    0 &&
                                                                    (0, F.jsx)(
                                                                        t7.A,
                                                                        {
                                                                            className:
                                                                                rW.RelationshipCountLabel,
                                                                            scheme: "secondary",
                                                                            children:
                                                                                o.blockedBy,
                                                                        }
                                                                    ),
                                                            ],
                                                        }
                                                    ),
                                                    R &&
                                                        i.nodes
                                                            .filter((e) => !!e)
                                                            .map((e) =>
                                                                (0, F.jsx)(
                                                                    rD,
                                                                    {
                                                                        onLinkClick:
                                                                            l,
                                                                        issueKey:
                                                                            e,
                                                                    },
                                                                    e.id
                                                                )
                                                            ),
                                                    E &&
                                                        (0, F.jsxs)(H.l.Item, {
                                                            disabled: !0,
                                                            "aria-disabled":
                                                                "true",
                                                            children: [
                                                                (0, F.jsx)(
                                                                    H.l
                                                                        .LeadingVisual,
                                                                    {
                                                                        children:
                                                                            (0,
                                                                            F.jsx)(
                                                                                V.LockIcon,
                                                                                {
                                                                                    size: 16,
                                                                                }
                                                                            ),
                                                                    }
                                                                ),
                                                                (0, F.jsx)(
                                                                    "span",
                                                                    {
                                                                        className:
                                                                            "text-small fgColor-muted",
                                                                        "data-testid":
                                                                            "private-blocked-by-notice",
                                                                        children:
                                                                            "Private issues are hidden.",
                                                                    }
                                                                ),
                                                            ],
                                                        }),
                                                    _ &&
                                                        (0, F.jsx)(rZ, {
                                                            dialogTitle:
                                                                aK.k
                                                                    .relationNames
                                                                    .blockedByIssues,
                                                            countOpenItems:
                                                                o.blockedBy,
                                                            children: (0,
                                                            F.jsx)(rv, {
                                                                itemId: u,
                                                                blockedByCount:
                                                                    o.blockedBy,
                                                            }),
                                                        }),
                                                ],
                                            }),
                                        ],
                                    }),
                                d &&
                                    (j || A) &&
                                    (0, F.jsxs)(F.Fragment, {
                                        children: [
                                            (s || R || E) &&
                                                (0, F.jsx)(H.l.Divider, {
                                                    className:
                                                        rW.ActionList_Divider,
                                                }),
                                            (0, F.jsxs)(H.l.Group, {
                                                children: [
                                                    (0, F.jsxs)(
                                                        H.l.GroupHeading,
                                                        {
                                                            as: "h4",
                                                            className:
                                                                rW.ActionList_GroupHeading,
                                                            children: [
                                                                aK.k
                                                                    .relationNames
                                                                    .blockingIssues,
                                                                o.blocking >
                                                                    0 &&
                                                                    (0, F.jsx)(
                                                                        t7.A,
                                                                        {
                                                                            className:
                                                                                rW.RelationshipCountLabel,
                                                                            scheme: "secondary",
                                                                            children:
                                                                                o.blocking,
                                                                        }
                                                                    ),
                                                            ],
                                                        }
                                                    ),
                                                    j &&
                                                        t.nodes
                                                            .filter((e) => !!e)
                                                            .map((e) =>
                                                                (0, F.jsx)(
                                                                    rD,
                                                                    {
                                                                        onLinkClick:
                                                                            l,
                                                                        issueKey:
                                                                            e,
                                                                    },
                                                                    e.id
                                                                )
                                                            ),
                                                    A &&
                                                        (0, F.jsxs)(H.l.Item, {
                                                            disabled: !0,
                                                            "aria-disabled":
                                                                "true",
                                                            children: [
                                                                (0, F.jsx)(
                                                                    H.l
                                                                        .LeadingVisual,
                                                                    {
                                                                        children:
                                                                            (0,
                                                                            F.jsx)(
                                                                                V.LockIcon,
                                                                                {
                                                                                    size: 16,
                                                                                }
                                                                            ),
                                                                    }
                                                                ),
                                                                (0, F.jsx)(
                                                                    "span",
                                                                    {
                                                                        className:
                                                                            "text-small fgColor-muted",
                                                                        "data-testid":
                                                                            "private-blocking-notice",
                                                                        children:
                                                                            "Private issues are hidden.",
                                                                    }
                                                                ),
                                                            ],
                                                        }),
                                                    w &&
                                                        (0, F.jsx)(rZ, {
                                                            dialogTitle:
                                                                aK.k
                                                                    .relationNames
                                                                    .blockingIssues,
                                                            countOpenItems:
                                                                o.blocking,
                                                            children: (0,
                                                            F.jsx)(rN, {
                                                                itemId: u,
                                                                blockingCount:
                                                                    o.blocking,
                                                            }),
                                                        }),
                                                ],
                                            }),
                                        ],
                                    }),
                            ],
                        }),
                    ],
                });
            }
            try {
                r1.displayName ||
                    (r1.displayName = "RelationshipsSectionFallback");
            } catch {}
            try {
                (g = function ({ queryRef: e, ...l }) {
                    let n = (0, N.usePreloadedQuery)(t4, e);
                    return n.repository && n.repository.issue
                        ? (0, F.jsx)(r2, { issue: n.repository.issue, ...l })
                        : null;
                }).displayName || (g.displayName = "RelationshipsSection");
            } catch {}
            try {
                r2.displayName ||
                    (r2.displayName = "RelationshipsSectionInternal");
            } catch {}
            let r4 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SubscriptionSectionFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "threadSubscriptionChannel",
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            r4.hash = "960bdbc3185068222a1e993ec20af0e7";
            let r6 = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [{ kind: "Variable", name: "id", variableName: "id" }];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "SubscriptionSectionRefetchableFragmentQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: null,
                                        kind: "FragmentSpread",
                                        name: "SubscriptionSectionRefetchableFragment",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "SubscriptionSectionRefetchableFragmentQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerThreadSubscriptionFormAction",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCustomSubscriptionEvents",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "53a64700264c88ba5196e54f5a3e2ffd",
                        metadata: {},
                        name: "SubscriptionSectionRefetchableFragmentQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            r6.hash = "a8282d39d09432e901a117d06a51d732";
            let r5 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: {
                    refetch: {
                        connection: null,
                        fragmentPathInResult: ["node"],
                        operation: r6,
                        identifierInfo: {
                            identifierField: "id",
                            identifierQueryVariableName: "id",
                        },
                    },
                },
                name: "SubscriptionSectionRefetchableFragment",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerThreadSubscriptionFormAction",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCustomSubscriptionEvents",
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            r5.hash = "a8282d39d09432e901a117d06a51d732";
            var r7 = n(40235);
            let r3 = {
                    SUBSCRIBED:
                        "thread subscription status changed to subscribed",
                    UNSUBSCRIBED:
                        "thread subscription status changed to unsubscribed",
                },
                r8 = (function () {
                    var e = [
                            {
                                defaultValue: null,
                                kind: "LocalArgument",
                                name: "input",
                            },
                        ],
                        l = [
                            {
                                kind: "Variable",
                                name: "input",
                                variableName: "input",
                            },
                        ],
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        a = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerThreadSubscriptionFormAction",
                            storageKey: null,
                        },
                        s = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCustomSubscriptionEvents",
                            storageKey: null,
                        };
                    return {
                        fragment: {
                            argumentDefinitions: e,
                            kind: "Fragment",
                            metadata: null,
                            name: "updateIssueSubscriptionMutation",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType: "UpdateSubscriptionPayload",
                                    kind: "LinkedField",
                                    name: "updateSubscription",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "subscribable",
                                            plural: !1,
                                            selections: [
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [n, a, s],
                                                    type: "Issue",
                                                    abstractKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "Mutation",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: e,
                            kind: "Operation",
                            name: "updateIssueSubscriptionMutation",
                            selections: [
                                {
                                    alias: null,
                                    args: l,
                                    concreteType: "UpdateSubscriptionPayload",
                                    kind: "LinkedField",
                                    name: "updateSubscription",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "subscribable",
                                            plural: !1,
                                            selections: [
                                                {
                                                    alias: null,
                                                    args: null,
                                                    kind: "ScalarField",
                                                    name: "__typename",
                                                    storageKey: null,
                                                },
                                                n,
                                                {
                                                    kind: "InlineFragment",
                                                    selections: [a, s],
                                                    type: "Issue",
                                                    abstractKey: null,
                                                },
                                            ],
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "d0752b2e49295017f67c84f21bfe41a3",
                            metadata: {},
                            name: "updateIssueSubscriptionMutation",
                            operationKind: "mutation",
                            text: null,
                        },
                    };
                })();
            function r9({
                environment: e,
                input: l,
                onCompleted: n,
                onError: a,
            }) {
                return (0, N.commitMutation)(e, {
                    mutation: r8,
                    variables: { input: l },
                    optimisticResponse: {
                        updateSubscription: {
                            subscribable: {
                                id: l.subscribableId,
                                viewerThreadSubscriptionFormAction:
                                    "SUBSCRIBED" === l.state ||
                                    "CUSTOM" === l.state
                                        ? "UNSUBSCRIBE"
                                        : "SUBSCRIBE",
                                viewerCustomSubscriptionEvents: l.events,
                                __typename: "Issue",
                            },
                        },
                    },
                    onCompleted: () => n && n(),
                    onError: (e) => a && a(e),
                });
            }
            r8.hash = "27627c886a77b2b26e6d72dcc5d7bf40";
            var ue = n(87826),
                ul = n(19797);
            let un = {
                    radioGroup:
                        "NotificationSettingsDialog-module__radioGroup--PySak",
                    checkboxGroup:
                        "NotificationSettingsDialog-module__checkboxGroup--J3Kdr",
                },
                ua = ({
                    onClose: e,
                    title: l,
                    returnFocusRef: n,
                    preselectedViewerSubscriptionEvents: a,
                    subscribed: s,
                    threadId: i,
                }) => {
                    let t = s
                            ? aK.k.notifications.subscribedOptionLabel
                            : aK.k.notifications.unubscribedOptionLabel,
                        [r, u] = (0, Q.useState)(
                            s && a.length > 0
                                ? aK.k.notifications.customOptionLabel
                                : t
                        ),
                        [o, d] = (0, Q.useState)(a),
                        [c, m] = (0, Q.useState)(!1),
                        [g, y] = (0, Q.useState)(!1),
                        [p, k] = (0, Q.useState)(!1),
                        b = (0, N.useRelayEnvironment)(),
                        h =
                            aK.k.notifications.customOptionLabel === r &&
                            0 === o.length;
                    return (0, F.jsxs)(lR.l, {
                        "aria-label": aK.k.notifications.notificationsSettings,
                        title: l,
                        onClose: e,
                        width: "large",
                        returnFocusRef: n,
                        footerButtons: [
                            {
                                content: aK.k.notifications.cancel,
                                onClick: e,
                                buttonType: "normal",
                            },
                            {
                                content: c
                                    ? aK.k.notifications.saving
                                    : aK.k.notifications.save,
                                onClick: () => {
                                    if (h) return void k(!0);
                                    (y(!1),
                                        m(!0),
                                        r9({
                                            environment: b,
                                            input: {
                                                subscribableId: i,
                                                state: r,
                                                events: o,
                                            },
                                            onCompleted: () => {
                                                (m(!1), e());
                                            },
                                            onError: () => {
                                                (y(!0),
                                                    m(!1),
                                                    (0, P.i)(
                                                        aK.k.notifications
                                                            .errorMessage
                                                    ));
                                            },
                                        }));
                                },
                                buttonType: "primary",
                            },
                        ],
                        children: [
                            g &&
                                (0, F.jsx)(i3.l, {
                                    variant: "critical",
                                    title: "Error",
                                    children: aK.k.notifications.errorMessage,
                                }),
                            (0, F.jsx)("div", {
                                className: g ? (0, eb.$)(un.radioGroup) : "",
                                children: (0, F.jsxs)(tI.A, {
                                    name: "notificationSettingsGroup",
                                    children: [
                                        (0, F.jsx)(tI.A.Label, {
                                            visuallyHidden: !0,
                                            children:
                                                aK.k.notifications
                                                    .notificationsSettings,
                                        }),
                                        [
                                            {
                                                label: aK.k.notifications
                                                    .notSubscribedOption,
                                                description:
                                                    tq.notSubscribedDescription,
                                                option: aK.k.notifications
                                                    .unubscribedOptionLabel,
                                            },
                                            {
                                                label: aK.k.notifications
                                                    .subscribedOption,
                                                description:
                                                    tq.subscribedDescription,
                                                option: aK.k.notifications
                                                    .subscribedOptionLabel,
                                            },
                                            {
                                                label: aK.k.notifications
                                                    .customOption,
                                                description:
                                                    tq.customDescription,
                                                option: aK.k.notifications
                                                    .customOptionLabel,
                                                last: !0,
                                            },
                                        ].map(
                                            ({
                                                label: e,
                                                option: n,
                                                description: a,
                                                last: s,
                                            }) =>
                                                (0, F.jsxs)(
                                                    "div",
                                                    {
                                                        children: [
                                                            (0, F.jsxs)(aA.A, {
                                                                children: [
                                                                    (0, F.jsx)(
                                                                        tv.A,
                                                                        {
                                                                            value: l,
                                                                            name: "subscriptionOption",
                                                                            checked:
                                                                                n ===
                                                                                r,
                                                                            onChange:
                                                                                () => {
                                                                                    (u(
                                                                                        n
                                                                                    ),
                                                                                        d(
                                                                                            []
                                                                                        ),
                                                                                        k(
                                                                                            !1
                                                                                        ));
                                                                                },
                                                                        }
                                                                    ),
                                                                    (0, F.jsx)(
                                                                        aA.A
                                                                            .Label,
                                                                        {
                                                                            children:
                                                                                e,
                                                                        }
                                                                    ),
                                                                    (0, F.jsx)(
                                                                        aA.A
                                                                            .Caption,
                                                                        {
                                                                            children:
                                                                                a,
                                                                        }
                                                                    ),
                                                                ],
                                                            }),
                                                            !s &&
                                                                (0, F.jsx)(
                                                                    H.l.Divider,
                                                                    {}
                                                                ),
                                                        ],
                                                    },
                                                    `${e}-${n}`
                                                )
                                        ),
                                        r ===
                                            aK.k.notifications
                                                .customOptionLabel &&
                                            (0, F.jsx)("div", {
                                                className: (0, eb.$)(
                                                    un.checkboxGroup
                                                ),
                                                children: (0, F.jsxs)(ul.A, {
                                                    children: [
                                                        (0, F.jsx)(ul.A.Label, {
                                                            visuallyHidden: !0,
                                                            children:
                                                                aK.k
                                                                    .notifications
                                                                    .customOptions,
                                                        }),
                                                        [
                                                            {
                                                                option: aK.k
                                                                    .notifications
                                                                    .closedLabel,
                                                                label: aK.k
                                                                    .notifications
                                                                    .closed,
                                                                description:
                                                                    tq.subscribedToClosedDescription,
                                                            },
                                                            {
                                                                option: aK.k
                                                                    .notifications
                                                                    .reopenedLabel,
                                                                label: aK.k
                                                                    .notifications
                                                                    .reopened,
                                                                description:
                                                                    tq.subscribedToReopenedDescription,
                                                            },
                                                        ].map(
                                                            ({
                                                                option: e,
                                                                label: l,
                                                                description: n,
                                                            }) =>
                                                                (0, F.jsxs)(
                                                                    aA.A,
                                                                    {
                                                                        children:
                                                                            [
                                                                                (0,
                                                                                F.jsx)(
                                                                                    ue.A,
                                                                                    {
                                                                                        value: e,
                                                                                        checked:
                                                                                            o.includes(
                                                                                                e
                                                                                            ),
                                                                                        onChange:
                                                                                            () =>
                                                                                                ((
                                                                                                    e
                                                                                                ) => {
                                                                                                    (k(
                                                                                                        !1
                                                                                                    ),
                                                                                                        d(
                                                                                                            (
                                                                                                                l
                                                                                                            ) =>
                                                                                                                l.includes(
                                                                                                                    e
                                                                                                                )
                                                                                                                    ? l.filter(
                                                                                                                          (
                                                                                                                              l
                                                                                                                          ) =>
                                                                                                                              l !==
                                                                                                                              e
                                                                                                                      )
                                                                                                                    : [
                                                                                                                          ...l,
                                                                                                                          e,
                                                                                                                      ]
                                                                                                        ));
                                                                                                })(
                                                                                                    e
                                                                                                ),
                                                                                    }
                                                                                ),
                                                                                (0,
                                                                                F.jsx)(
                                                                                    aA
                                                                                        .A
                                                                                        .Label,
                                                                                    {
                                                                                        children:
                                                                                            l,
                                                                                    }
                                                                                ),
                                                                                (0,
                                                                                F.jsx)(
                                                                                    aA
                                                                                        .A
                                                                                        .Caption,
                                                                                    {
                                                                                        children:
                                                                                            n,
                                                                                    }
                                                                                ),
                                                                            ],
                                                                    },
                                                                    `${l}-${e}`
                                                                )
                                                        ),
                                                    ],
                                                }),
                                            }),
                                        p &&
                                            (0, F.jsx)(tI.A.Validation, {
                                                variant: "error",
                                                children:
                                                    tq.customSelectionMissing,
                                            }),
                                    ],
                                }),
                            }),
                        ],
                    });
                };
            try {
                ua.displayName ||
                    (ua.displayName = "NotificationSettingsDialog");
            } catch {}
            let us = {
                container: "SubscriptionSection-module__container--uhQPW",
                button: "SubscriptionSection-module__button--pP4tz",
                header: "SubscriptionSection-module__header--Q93Cn",
            };
            function ui({ issue: e, viewer: l }) {
                let { threadSubscriptionChannel: n, id: a } = (0,
                N.useFragment)(r4, e);
                return n
                    ? (0, F.jsx)(ut, {
                          issue: e,
                          id: a,
                          threadSubscriptionChannel: n,
                          viewer: l,
                      })
                    : null;
            }
            function ut({
                id: e,
                issue: l,
                threadSubscriptionChannel: n,
                viewer: a,
            }) {
                let s = (0, Q.useRef)(!1),
                    i = (0, N.useRelayEnvironment)(),
                    [, t] = (0, Q.useTransition)(),
                    [r, u] = (0, Q.useState)(!1),
                    o = (0, Q.useCallback)((e, l = !0) => {
                        if (l) {
                            let l = e
                                ? aK.k.notifications.subscribedAnnouncement
                                : aK.k.notifications.unsubscribedAnnouncement;
                            (0, P.i)(l);
                        } else (0, P.i)(aK.k.somethingWentWrong);
                    }, []),
                    [d, c] = (0, N.useRefetchableFragment)(r5, l),
                    {
                        viewerThreadSubscriptionFormAction: m,
                        viewerCustomSubscriptionEvents: g,
                        id: y,
                    } = d,
                    p = "UNSUBSCRIBE" === m,
                    k = g ? [...g] : [],
                    b = (0, Q.useCallback)(() => {
                        t(
                            () =>
                                void c(
                                    {},
                                    {
                                        fetchPolicy: "network-only",
                                        onComplete: () => {
                                            s.current = !0;
                                        },
                                    }
                                )
                        );
                    }, [c, t]);
                (0, Q.useEffect)(() => {
                    s.current && (o(p), (s.current = !1));
                }, [p, o]);
                let h = (0, Q.useCallback)(() => {
                    let l = !p;
                    r9({
                        environment: i,
                        input: {
                            subscribableId: e,
                            state: l ? "SUBSCRIBED" : "UNSUBSCRIBED",
                        },
                        onCompleted: () => {
                            o(l);
                        },
                        onError: () => o(p, !1),
                    });
                }, [i, e, p, o]);
                (0, r7.x)(n, (e) => {
                    e?.reason &&
                        (e.reason !== r3.SUBSCRIBED || p
                            ? e.reason === r3.UNSUBSCRIBED && p && b()
                            : b());
                });
                let f = (0, Q.useRef)(null),
                    K = (0, F.jsxs)("div", {
                        className: (0, eb.$)(us.container),
                        children: [
                            (0, F.jsx)(eF.A, {
                                id: e,
                                as: "h3",
                                className: (0, eb.$)(us.header),
                                children: "Notifications",
                            }),
                            (0, F.jsx)("button", {
                                onClick: () => u(!0),
                                className: (0, eb.$)(us.button),
                                ref: f,
                                children:
                                    aK.k.notifications
                                        .customizeNotificationsSettings,
                            }),
                            r &&
                                (0, F.jsx)(ua, {
                                    title: aK.k.notifications
                                        .notificationsSettings,
                                    onClose: () => u(!1),
                                    returnFocusRef: f,
                                    threadId: y,
                                    preselectedViewerSubscriptionEvents: k,
                                    subscribed: p,
                                }),
                        ],
                    }),
                    S = (0, _.G7)("notifyd_issue_watch_activity_notify"),
                    I = (0, _.G7)("notifyd_enable_issue_thread_subscriptions"),
                    v = a?.isEnterpriseManagedUser || I || S;
                return (0, F.jsx)(iy.w, {
                    sectionHeader: v
                        ? (0, F.jsx)(ig.h, {
                              title: aK.k.notifications.notificationsTitle,
                          })
                        : K,
                    children: (0, F.jsxs)("div", {
                        className:
                            "width-full d-flex flex-column flex-items-stretch pt-2 px-2",
                        children: [
                            (0, F.jsx)($.Q, {
                                "aria-describedby":
                                    "issue-viewer-subscription-description",
                                leadingVisual: p ? V.BellSlashIcon : V.BellIcon,
                                onClick: h,
                                size: "small",
                                children: p
                                    ? aK.k.notifications.subscribedButton
                                    : aK.k.notifications.unsubscribedButton,
                            }),
                            (0, F.jsx)("p", {
                                id: "issue-viewer-subscription-description",
                                className: "my-2 f6 fgColor-muted",
                                children: p
                                    ? aK.k.notifications.subscribedDescription
                                    : aK.k.notifications
                                          .unsubscribedDescription,
                            }),
                        ],
                    }),
                });
            }
            function ur() {
                return (0, F.jsx)(iy.w, {
                    sectionHeader: (0, F.jsx)(ig.h, { title: "Notifications" }),
                    children: (0, F.jsxs)("div", {
                        className:
                            "width-full d-flex flex-column flex-items-stretch pt-2 px-2",
                        children: [
                            (0, F.jsx)($.Q, {
                                "aria-describedby":
                                    "issue-viewer-subscription-description",
                                leadingVisual: V.BellIcon,
                                children: aK.k.notifications.unsubscribedButton,
                            }),
                            (0, F.jsx)("p", {
                                id: "issue-viewer-subscription-description",
                                className: "my-2 f6 fgColor-muted",
                                children:
                                    aK.k.notifications.unsubscribedDescription,
                            }),
                        ],
                    }),
                });
            }
            try {
                ui.displayName || (ui.displayName = "SubscriptionSection");
            } catch {}
            try {
                ut.displayName ||
                    (ut.displayName = "SubscriptionSectionInternal");
            } catch {}
            try {
                ur.displayName ||
                    (ur.displayName = "SubscriptionSectionFallback");
            } catch {}
            function uu({
                issueSidebarSecondaryKey: e,
                onIssueUpdate: l,
                onLinkClick: n,
                insideSidePanel: a,
                viewer: s,
            }) {
                let i = (0, N.useFragment)(io, e);
                return i
                    ? (0, F.jsxs)(F.Fragment, {
                          children: [
                              (0, F.jsx)(r2, {
                                  issue: i,
                                  onLinkClick: n,
                                  insideSidePanel: a,
                              }),
                              (0, F.jsx)(tP, { issue: i, onIssueUpdate: l }),
                              (0, le.M3)() &&
                                  (0, F.jsx)(ui, { issue: i, viewer: s }),
                              (0, F.jsx)(t2, { issue: i }),
                          ],
                      })
                    : (0, F.jsx)(uo, {});
            }
            function uo() {
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsx)(r1, {}),
                        (0, F.jsx)(tA, {}),
                        (0, le.M3)() && (0, F.jsx)(ur, {}),
                    ],
                });
            }
            try {
                uu.displayName || (uu.displayName = "IssueSidebarLazySections");
            } catch {}
            try {
                uo.displayName ||
                    (uo.displayName = "IssueSidebarLazySectionsFallback");
            } catch {}
            let ud = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "OptionsSectionFragment",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "body",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isPinned",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "locked",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanDelete",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanTransfer",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanConvertToDiscussion",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanLock",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "name",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "visibility",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Literal",
                                            name: "first",
                                            value: 3,
                                        },
                                    ],
                                    concreteType: "PinnedIssueConnection",
                                    kind: "LinkedField",
                                    name: "pinnedIssues",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "totalCount",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: "pinnedIssues(first:3)",
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "viewerCanPinIssues",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isArchived",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "IssueCreationPermissions",
                                    kind: "LinkedField",
                                    name: "viewerIssueCreationPermissions",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "triageable",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            ud.hash = "3ff5a9b107a5095aec37b5f21f208950";
            let uc = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "OptionsSectionSecondary",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isTransferInProgress",
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            uc.hash = "37235901f5bd1b8bca0d6f9f465df52e";
            let um = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isPinned",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: [{ kind: "Literal", name: "first", value: 3 }],
                        concreteType: "PinnedIssueConnection",
                        kind: "LinkedField",
                        name: "pinnedIssues",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: "pinnedIssues(first:3)",
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "pinIssueMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "PinIssuePayload",
                                kind: "LinkedField",
                                name: "pinIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [a],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "pinIssueMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "PinIssuePayload",
                                kind: "LinkedField",
                                name: "pinIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [a, s],
                                                storageKey: null,
                                            },
                                            s,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "f47cefa32c7a668269c7ef6b49373801",
                        metadata: {},
                        name: "pinIssueMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            um.hash = "2fa017a8b26ffc47e692978b43841a97";
            var ug = n(82899);
            let uy = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "issueId",
                    },
                    n = [
                        {
                            kind: "Variable",
                            name: "id",
                            variableName: "issueId",
                        },
                    ],
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    s = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                    ],
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: [e, l],
                        kind: "Fragment",
                        metadata: null,
                        name: "ConvertToDiscussionDialogQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ConvertToDiscussionDialogIssueProperties",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        args: null,
                                                        kind: "FragmentSpread",
                                                        name: "ConvertToDiscussionDialogCategoryPicker",
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, e],
                        kind: "Operation",
                        name: "ConvertToDiscussionDialogQuery",
                        selections: [
                            {
                                alias: null,
                                args: n,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    a,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "IssueCommentConnection",
                                                kind: "LinkedField",
                                                name: "comments",
                                                plural: !1,
                                                selections: s,
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "ReactionConnection",
                                                kind: "LinkedField",
                                                name: "reactions",
                                                plural: !1,
                                                selections: s,
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "TasklistBlockConnection",
                                                kind: "LinkedField",
                                                name: "tasklistBlocks",
                                                plural: !1,
                                                selections: s,
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "UserConnection",
                                                kind: "LinkedField",
                                                name: "assignees",
                                                plural: !1,
                                                selections: s,
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "ProjectV2Connection",
                                                kind: "LinkedField",
                                                name: "projectsV2",
                                                plural: !1,
                                                selections: s,
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Milestone",
                                                kind: "LinkedField",
                                                name: "milestone",
                                                plural: !1,
                                                selections: [a, i],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: [
                                                            {
                                                                kind: "Literal",
                                                                name: "filterByAssignable",
                                                                value: !0,
                                                            },
                                                            {
                                                                kind: "Variable",
                                                                name: "first",
                                                                variableName:
                                                                    "first",
                                                            },
                                                        ],
                                                        concreteType:
                                                            "DiscussionCategoryConnection",
                                                        kind: "LinkedField",
                                                        name: "discussionCategories",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "DiscussionCategoryEdge",
                                                                kind: "LinkedField",
                                                                name: "edges",
                                                                plural: !0,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "DiscussionCategory",
                                                                        kind: "LinkedField",
                                                                        name: "node",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                i,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "name",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    i,
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                    i,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "ec5c8966ab4c6000a0fd101e8a09dd4f",
                        metadata: {},
                        name: "ConvertToDiscussionDialogQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            uy.hash = "f53a18efff4ab454ecab28c74f1b54c3";
            let up = {
                argumentDefinitions: [{ kind: "RootArgument", name: "first" }],
                kind: "Fragment",
                metadata: null,
                name: "ConvertToDiscussionDialogCategoryPicker",
                selections: [
                    {
                        alias: null,
                        args: [
                            {
                                kind: "Literal",
                                name: "filterByAssignable",
                                value: !0,
                            },
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                        ],
                        concreteType: "DiscussionCategoryConnection",
                        kind: "LinkedField",
                        name: "discussionCategories",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "DiscussionCategoryEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "DiscussionCategory",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "id",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "name",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            up.hash = "4e191b529e77eaa0c9a9b373313d5e67";
            let uk = (function () {
                var e = [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    },
                ];
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "ConvertToDiscussionDialogIssueProperties",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: "IssueCommentConnection",
                            kind: "LinkedField",
                            name: "comments",
                            plural: !1,
                            selections: e,
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "ReactionConnection",
                            kind: "LinkedField",
                            name: "reactions",
                            plural: !1,
                            selections: e,
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "TasklistBlockConnection",
                            kind: "LinkedField",
                            name: "tasklistBlocks",
                            plural: !1,
                            selections: e,
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "UserConnection",
                            kind: "LinkedField",
                            name: "assignees",
                            plural: !1,
                            selections: e,
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "ProjectV2Connection",
                            kind: "LinkedField",
                            name: "projectsV2",
                            plural: !1,
                            selections: e,
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "__typename",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            uk.hash = "353cc6edd6233ed44d3a6fc8019e346d";
            var uF = n(38102),
                ub = n(16567);
            function uh({
                discussionCategories: e,
                onSelect: l,
                categoryId: n,
            }) {
                (0, Q.useEffect)(() => {
                    let n = e?.[0]?.id;
                    n && l(n);
                }, [e, l]);
                let a = (0, Q.useCallback)(
                    () =>
                        e.map((e, l) =>
                            e
                                ? (0, F.jsx)(
                                      ub.A.Option,
                                      { value: e.id, children: e.name },
                                      l
                                  )
                                : null
                        ),
                    [e]
                );
                return (0, F.jsx)(ub.A, {
                    id: n,
                    block: !0,
                    onChange: (e) => {
                        l(e.currentTarget.value);
                    },
                    ...(0, ep.G)("select"),
                    children: a(),
                });
            }
            try {
                uh.displayName || (uh.displayName = "DiscussionCategoryPicker");
            } catch {}
            let uf = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "message",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "convertIssueToDiscussionMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "ConvertIssueToDiscussionPayload",
                                kind: "LinkedField",
                                name: "convertIssueToDiscussion",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Discussion",
                                        kind: "LinkedField",
                                        name: "discussion",
                                        plural: !1,
                                        selections: [n],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [a],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "convertIssueToDiscussionMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "ConvertIssueToDiscussionPayload",
                                kind: "LinkedField",
                                name: "convertIssueToDiscussion",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Discussion",
                                        kind: "LinkedField",
                                        name: "discussion",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "id",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                            a,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "9f280c396ededc4627ecab42d4a37ca8",
                        metadata: {},
                        name: "convertIssueToDiscussionMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            uf.hash = "9c0881a204d862d4b0167b6ded699944";
            let uK = {
                    firstLoader:
                        "ConvertToDiscussionDialog-module__firstLoader--czbUo",
                    container:
                        "ConvertToDiscussionDialog-module__container--IIC2N",
                    commonLoader:
                        "ConvertToDiscussionDialog-module__commonLoader--GFRDR",
                },
                uS = (e) => {
                    let l = (0, N.useLazyLoadQuery)(uy, {
                        first: i8.t.convertToDiscussionCategoriesFirst,
                        issueId: e.issueId,
                    });
                    return (0, F.jsx)(uI, { ...e, data: l });
                },
                uI = ({ data: e, issueId: l, onClose: n }) => {
                    let [a, s] = (0, Q.useState)(),
                        [i, t] = (0, Q.useState)(!1),
                        [r, u] = (0, Q.useState)(!1),
                        o = (0, N.useRelayEnvironment)(),
                        d = e?.node,
                        c = d?.repository,
                        m = (0, Q.useCallback)(() => {
                            a &&
                                !i &&
                                (t(!0),
                                !(function ({
                                    environment: e,
                                    input: { issueId: l, categoryId: n },
                                    onError: a,
                                    onCompleted: s,
                                }) {
                                    (0, N.commitMutation)(e, {
                                        mutation: uf,
                                        variables: {
                                            input: {
                                                issueId: l,
                                                categoryId: n,
                                            },
                                        },
                                        onError: (e) => a && a(e),
                                        onCompleted: (e) => s && s(e),
                                    });
                                })({
                                    environment: o,
                                    input: { categoryId: a, issueId: l },
                                    onError: (e) => {
                                        ((0, uF.N7)(uL(e.message)),
                                            u(!0),
                                            t(!1));
                                    },
                                    onCompleted: (e) => {
                                        if (
                                            e.convertIssueToDiscussion
                                                ?.discussion
                                        ) {
                                            let l =
                                                e.convertIssueToDiscussion
                                                    ?.discussion;
                                            window.location.href = l.url;
                                            return;
                                        }
                                        for (let l of e.convertIssueToDiscussion
                                            ?.errors || [])
                                            (0, uF.N7)(uL(l.message));
                                        (u(!0), t(!1));
                                    },
                                }));
                        }, [o, i, l, a]),
                        g = (0, Q.useId)();
                    return (0, F.jsx)(lR.l, {
                        title: aK.k.convertToDiscussion.title,
                        onClose: n,
                        footerButtons: [
                            { content: a2.l.cancel, onClick: n, disabled: i },
                            {
                                content: a2.l.acknowledgeAndConvertToDiscussion,
                                buttonType: "danger",
                                onClick: m,
                                disabled: !a || i,
                                loading: i,
                                ...(0, ep.G)("convertButton"),
                            },
                        ],
                        width: "large",
                        renderBody: ({ children: e }) =>
                            (0, F.jsxs)("div", {
                                className: "p-3",
                                children: [
                                    r &&
                                        (0, F.jsx)(i3.l, {
                                            title: "Convert issue failed",
                                            hideTitle: !0,
                                            description:
                                                aK.k.somethingWentWrong,
                                            variant: "critical",
                                            className: "mb-2",
                                        }),
                                    e,
                                ],
                            }),
                        children: (0, F.jsxs)(Q.Suspense, {
                            fallback: (0, F.jsx)(uT, {}),
                            children: [
                                d && (0, F.jsx)(uC, { issueProperties: d }),
                                (0, F.jsxs)(aA.A, {
                                    children: [
                                        (0, F.jsx)(aA.A.Label, {
                                            htmlFor: g,
                                            children:
                                                aK.k.convertToDiscussion
                                                    .selectCategoryTitle,
                                        }),
                                        c &&
                                            (0, F.jsx)(uv, {
                                                categoryId: g,
                                                onSelect: s,
                                                repository: c,
                                            }),
                                    ],
                                }),
                            ],
                        }),
                    });
                },
                uv = ({ repository: e, categoryId: l, onSelect: n }) => {
                    let a = (0, N.useFragment)(up, e),
                        s = (0, Q.useMemo)(
                            () =>
                                a?.discussionCategories?.edges?.map((e) => ({
                                    id: e?.node?.id || "",
                                    name: e?.node?.name || "",
                                })) || [],
                            [a]
                        );
                    return (0, F.jsx)(uh, {
                        categoryId: l,
                        discussionCategories: s,
                        onSelect: n,
                    });
                };
            function uL(e) {
                return Error(aK.k.convertToDiscussion.error(e));
            }
            let uT = () =>
                    (0, F.jsxs)(F.Fragment, {
                        children: [
                            (0, F.jsx)("div", {
                                className: uK.firstLoader,
                                children: (0, F.jsx)(tJ.Q, {
                                    height: "sm",
                                    width: "80%",
                                }),
                            }),
                            (0, F.jsxs)("div", {
                                className: uK.container,
                                children: [
                                    (0, F.jsx)("div", {
                                        className: uK.commonLoader,
                                        children: (0, F.jsx)(tJ.Q, {
                                            height: "sm",
                                            width: "50%",
                                        }),
                                    }),
                                    (0, F.jsx)("div", {
                                        className: uK.commonLoader,
                                        children: (0, F.jsx)(tJ.Q, {
                                            height: "sm",
                                            width: "90%",
                                        }),
                                    }),
                                    (0, F.jsx)("div", {
                                        className: uK.commonLoader,
                                        children: (0, F.jsx)(tJ.Q, {
                                            height: "sm",
                                            width: "87%",
                                        }),
                                    }),
                                ],
                            }),
                            (0, F.jsx)("div", {
                                className: uK.commonLoader,
                                children: (0, F.jsx)(tJ.Q, {
                                    height: "dm",
                                    width: "50%",
                                }),
                            }),
                            (0, F.jsx)("div", {
                                className: uK.commonLoader,
                                children: (0, F.jsx)(tJ.Q, {
                                    height: "dm",
                                    width: "100%",
                                }),
                            }),
                        ],
                    }),
                uC = ({ issueProperties: e }) => {
                    let {
                            comments: l,
                            reactions: n,
                            tasklistBlocks: a,
                            assignees: s,
                            projectsV2: i,
                            milestone: t,
                        } = (0, N.useFragment)(uk, e),
                        r = (0, Q.useMemo)(() => {
                            let e = [
                                aK.k.convertToDiscussion.affirmations
                                    .closedAndLocked,
                                aK.k.convertToDiscussion.affirmations.same,
                            ];
                            return (
                                (l.totalCount > 0 || n.totalCount > 0) &&
                                    e.push(
                                        aK.k.convertToDiscussion.affirmations
                                            .commentsAndReactions
                                    ),
                                e
                            );
                        }, [l, n]),
                        u = (0, Q.useMemo)(() => {
                            let e = [];
                            return (
                                (a?.totalCount || 0) > 0 &&
                                    e.push(
                                        aK.k.convertToDiscussion.warnings
                                            .taskListBlocks
                                    ),
                                s.totalCount > 0 &&
                                    e.push(
                                        aK.k.convertToDiscussion.warnings
                                            .assignees
                                    ),
                                i.totalCount > 0 &&
                                    e.push(
                                        aK.k.convertToDiscussion.warnings
                                            .projects
                                    ),
                                t &&
                                    e.push(
                                        aK.k.convertToDiscussion.warnings
                                            .milestone
                                    ),
                                e
                            );
                        }, [a, s, i, t]);
                    return (0, F.jsxs)(F.Fragment, {
                        children: [
                            (0, F.jsx)("p", {
                                className: "mb-3",
                                children: aK.k.convertToDiscussion.whatHappens,
                            }),
                            (0, F.jsxs)("ul", {
                                className: "list-style-none ml-3 mb-3",
                                children: [
                                    r.map((e, l) =>
                                        (0, F.jsx)(
                                            ux,
                                            { success: !0, text: e },
                                            l
                                        )
                                    ),
                                    u.map((e, l) =>
                                        (0, F.jsx)(
                                            ux,
                                            { success: !1, text: e },
                                            l
                                        )
                                    ),
                                ],
                            }),
                        ],
                    });
                },
                ux = ({ success: e, text: l }) =>
                    (0, F.jsxs)("li", {
                        className: "mb-1",
                        children: [
                            e
                                ? (0, F.jsx)(V.CheckIcon, {
                                      className: "fgColor-success mr-1",
                                  })
                                : (0, F.jsx)(V.XIcon, {
                                      className: "fgColor-danger mr-1",
                                  }),
                            l,
                        ],
                    });
            try {
                uS.displayName ||
                    (uS.displayName = "ConvertToDiscussionDialog");
            } catch {}
            try {
                uI.displayName ||
                    (uI.displayName = "ConvertToDiscussionDialogInternal");
            } catch {}
            try {
                uv.displayName || (uv.displayName = "CategoryPicker");
            } catch {}
            try {
                uT.displayName || (uT.displayName = "DialogLoadingSkeleton");
            } catch {}
            try {
                uC.displayName || (uC.displayName = "WhatHappens");
            } catch {}
            try {
                ux.displayName || (ux.displayName = "Result");
            } catch {}
            var uR = n(31094);
            let uN = ({
                title: e,
                body: l,
                showDuplicateIssueDialog: n,
                setShowDuplicateIssueDialog: a,
                optionConfig: s,
                repositoryOwner: i,
                repositoryName: t,
                issue: r,
            }) => {
                let u = (0, lI.Z)(),
                    o = (0, N.useFragment)(sg.Qq, r),
                    d = (0, N.useFragment)(sg.sC, o),
                    c = (0, N.useFragment)(is.PT, r),
                    m = (0, N.useFragment)(is.Dd, c),
                    g = (0, N.useFragment)(sy.Pv, r),
                    y = (0, N.useFragment)(sy.Wj, g),
                    p = (0, N.useFragment)(sp.Bk, r),
                    k = (0, N.useFragment)(sp.zD, p),
                    b = (0, N.useFragment)(ia.nf, r),
                    h = (0, Q.useMemo)(
                        () =>
                            (d.assignedActors?.nodes || []).flatMap((e) =>
                                e ? [(0, sF.uX)(e)] : []
                            ),
                        [d]
                    ),
                    f = (0, Q.useMemo)(
                        () => (m.issueType ? (0, uR.iO)(m.issueType) : void 0),
                        [m]
                    ),
                    K = (0, Q.useMemo)(
                        () =>
                            (y.labels?.edges || []).flatMap((e) =>
                                e?.node ? [(0, sk.P5)(e?.node)] : []
                            ),
                        [y]
                    ),
                    S = (0, Q.useMemo)(
                        () => (k.milestone ? (0, l9.Hf)(k.milestone) : void 0),
                        [k]
                    ),
                    I = (0, Q.useMemo)(
                        () =>
                            (b.projectItemsNext?.edges ?? [])
                                .flatMap((e) => (e?.node ? e?.node : []))
                                .filter((e) => !0 !== e.project.closed)
                                .map((e) => (0, l8.Kx)(e.project)),
                        [b]
                    );
                return (0, F.jsx)(Q.Suspense, {
                    children: (0, F.jsx)(l3.vN, {
                        navigate: (e) => u(e, { reloadDocument: !0 }),
                        isCreateDialogOpen: n,
                        setIsCreateDialogOpen: a,
                        optionConfig: {
                            ...s,
                            showRepositoryPicker: !0,
                            defaultDisplayMode: "IssueDuplication",
                            issueCreateArguments: {
                                repository: { owner: i, name: t },
                                initialValues: {
                                    title: e,
                                    body: l,
                                    assignees: h,
                                    type: f,
                                    labels: K,
                                    milestone: S,
                                    projects: I,
                                },
                            },
                        },
                    }),
                });
            };
            try {
                uN.displayName || (uN.displayName = "DuplicateIssueDialog");
            } catch {}
            let uj = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "locked",
                                storageKey: null,
                            },
                        ],
                        type: "Issue",
                        abstractKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "lockLockableMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "LockLockablePayload",
                                kind: "LinkedField",
                                name: "lockLockable",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "lockedRecord",
                                        plural: !1,
                                        selections: [n],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "lockLockableMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "LockLockablePayload",
                                kind: "LinkedField",
                                name: "lockLockable",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "lockedRecord",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                            n,
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "id",
                                                        storageKey: null,
                                                    },
                                                ],
                                                type: "Node",
                                                abstractKey: "__isNode",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "51d52d48ef78c496e8b2f1ca9c16fa4c",
                        metadata: {},
                        name: "lockLockableMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            uj.hash = "e04343a36495fed9a45144b2d8c84a3e";
            let u_ = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "locked",
                                storageKey: null,
                            },
                        ],
                        type: "Issue",
                        abstractKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "unlockLockableMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "UnlockLockablePayload",
                                kind: "LinkedField",
                                name: "unlockLockable",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "unlockedRecord",
                                        plural: !1,
                                        selections: [n],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "unlockLockableMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "UnlockLockablePayload",
                                kind: "LinkedField",
                                name: "unlockLockable",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "unlockedRecord",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                            n,
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "id",
                                                        storageKey: null,
                                                    },
                                                ],
                                                type: "Node",
                                                abstractKey: "__isNode",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "6f0faa96940cf1b4018ce92434b218eb",
                        metadata: {},
                        name: "unlockLockableMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            u_.hash = "34e21dfc29143cca408e732be35ca356";
            let uw = {
                    RadioGroup:
                        "IssueConversationLock-module__RadioGroup--ECuD5",
                    dialogContent:
                        "IssueConversationLock-module__dialogContent--foWXK",
                },
                uE = (e) => {
                    let l = (0, N.useRelayEnvironment)(),
                        { isUnlocked: n = !0, onClose: a, issueId: s } = e,
                        { addToast: i } = (0, M.Y6)(),
                        [t, r] = (0, Q.useState)(null),
                        u = (0, Q.useCallback)(() => {
                            (a(), r(null));
                        }, [a]),
                        o = (0, Q.useCallback)(() => {
                            n &&
                                (function ({
                                    environment: e,
                                    input: { lockableId: l, lockReason: n },
                                    onError: a,
                                    onCompleted: s,
                                }) {
                                    (0, N.commitMutation)(e, {
                                        mutation: uj,
                                        variables: {
                                            input: {
                                                lockableId: l,
                                                lockReason: n,
                                            },
                                        },
                                        onError: (e) => a && a(e),
                                        onCompleted: (e) => s && s(e),
                                    });
                                })({
                                    environment: l,
                                    input: {
                                        lockableId: s,
                                        lockReason: t || null,
                                    },
                                    onError: (e) => {
                                        (u(),
                                            reportError(uB(e.message)),
                                            i({
                                                type: "error",
                                                message: e.message,
                                            }));
                                    },
                                    onCompleted: () => {
                                        u();
                                    },
                                });
                        }, [i, l, n, s, t, u]),
                        d = (0, Q.useCallback)(() => {
                            n ||
                                (function ({
                                    environment: e,
                                    input: { lockableId: l },
                                    onError: n,
                                    onCompleted: a,
                                }) {
                                    (0, N.commitMutation)(e, {
                                        mutation: u_,
                                        variables: { input: { lockableId: l } },
                                        onError: (e) => n && n(e),
                                        onCompleted: (e) => a && a(e),
                                    });
                                })({
                                    environment: l,
                                    input: { lockableId: s },
                                    onError: (e) => {
                                        (u(),
                                            reportError(uB(e.message)),
                                            i({
                                                type: "error",
                                                message: e.message,
                                            }));
                                    },
                                    onCompleted: () => {
                                        u();
                                    },
                                });
                        }, [i, l, n, s, u]),
                        c = (0, Q.useCallback)((e, l) => {
                            if (l) return void r(l.target.value);
                        }, []);
                    return (0, F.jsx)(lR.l, {
                        title: n ? aK.k.lock.title : aK.k.lock.titleUnlock,
                        renderBody: n
                            ? () => uA({ handleReasonChange: c })
                            : uP,
                        onClose: u,
                        footerButtons: [
                            { content: a2.l.cancel, onClick: u },
                            {
                                content: n
                                    ? aK.k.lock.buttonConfirmLock
                                    : aK.k.lock.buttonConfirmUnlock,
                                buttonType: "primary",
                                onClick: n ? o : d,
                            },
                        ],
                    });
                },
                uA = ({ handleReasonChange: e }) =>
                    (0, F.jsxs)("div", {
                        className: uw.dialogContent,
                        children: [
                            (0, F.jsxs)("span", {
                                children: [
                                    "Other users can't add new comments to this issue. You and other members of teams with\xa0",
                                    (0, F.jsx)(ek.A, {
                                        inline: !0,
                                        href: "https://docs.github.com/articles/what-are-the-different-access-permissions",
                                        target: "_blank",
                                        rel: "noreferrer",
                                        children: "write access",
                                    }),
                                    "\xa0to this repository can still leave comments that others can see. You can always unlock this issue again in the future.",
                                ],
                            }),
                            (0, F.jsxs)(tI.A, {
                                name: "choiceReason",
                                onChange: (l, n) => e(l, n),
                                className: uw.RadioGroup,
                                children: [
                                    (0, F.jsx)(tI.A.Label, {
                                        children: "Reason",
                                    }),
                                    (0, F.jsxs)(aA.A, {
                                        children: [
                                            (0, F.jsx)(tv.A, { value: "" }),
                                            (0, F.jsx)(aA.A.Label, {
                                                children: " No reason",
                                            }),
                                        ],
                                    }),
                                    (0, F.jsxs)(aA.A, {
                                        children: [
                                            (0, F.jsx)(tv.A, { value: "SPAM" }),
                                            (0, F.jsx)(aA.A.Label, {
                                                children: "Spam",
                                            }),
                                        ],
                                    }),
                                    (0, F.jsxs)(aA.A, {
                                        children: [
                                            (0, F.jsx)(tv.A, {
                                                value: "OFF_TOPIC",
                                            }),
                                            (0, F.jsx)(aA.A.Label, {
                                                children: "Off-topic",
                                            }),
                                        ],
                                    }),
                                    (0, F.jsxs)(aA.A, {
                                        children: [
                                            (0, F.jsx)(tv.A, {
                                                value: "TOO_HEATED",
                                            }),
                                            (0, F.jsx)(aA.A.Label, {
                                                children: "Too heated",
                                            }),
                                        ],
                                    }),
                                    (0, F.jsxs)(aA.A, {
                                        children: [
                                            (0, F.jsx)(tv.A, {
                                                value: "RESOLVED",
                                            }),
                                            (0, F.jsx)(aA.A.Label, {
                                                children: "Resolved",
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    }),
                uP = () =>
                    (0, F.jsx)("div", {
                        className: uw.dialogContent,
                        children:
                            "Everyone will be able to comment on this issue once more. You can always lock this issue again in the future.",
                    });
            function uB(e) {
                return Error(
                    `Issue lock conversation mutation failed with error:${e}`
                );
            }
            try {
                uE.displayName || (uE.displayName = "IssueConversationLock");
            } catch {}
            try {
                uA.displayName || (uA.displayName = "LockConversationContent");
            } catch {}
            try {
                uP.displayName ||
                    (uP.displayName = "UnlockConversationContent");
            } catch {}
            let uD = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    kind: "Variable",
                                    name: "input",
                                    variableName: "input",
                                },
                            ],
                            concreteType: "DeleteIssuePayload",
                            kind: "LinkedField",
                            name: "deleteIssue",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Issue",
                                    kind: "LinkedField",
                                    name: "issue",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "id",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "deleteIssueMutation",
                        selections: l,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "deleteIssueMutation",
                        selections: l,
                    },
                    params: {
                        id: "a1404ba230fd4248febc2adc9eea7281",
                        metadata: {},
                        name: "deleteIssueMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            uD.hash = "03043bd9975becdb0e86cee81f237bb7";
            let uM = {
                    confirmationContent:
                        "IssueDeletionConfirmationDialog-module__confirmationContent--iOcR3",
                },
                uV = ({
                    issueId: e,
                    onSuccessfulDeletion: l,
                    afterDelete: n,
                    onClose: a,
                }) => {
                    let s = (0, N.useRelayEnvironment)(),
                        i = (0, Q.useCallback)(
                            (i) => {
                                ("confirm" === i &&
                                    (!(function ({
                                        environment: e,
                                        input: l,
                                        onCompleted: n,
                                        onError: a,
                                    }) {
                                        (0, N.commitMutation)(e, {
                                            mutation: uD,
                                            variables: { input: l },
                                            onCompleted: () => {
                                                (n?.(), (0, ee.T)());
                                            },
                                            onError: (e) => a?.(e),
                                        });
                                    })({
                                        environment: s,
                                        input: { issueId: e },
                                        onCompleted: () => l?.(e),
                                    }),
                                    n?.()),
                                    a());
                            },
                            [a, s, e, l, n]
                        );
                    return (0, F.jsx)(lf.K, {
                        title: tq.deleteIssueConfirmationTitle,
                        confirmButtonContent: tq.deleteIssueConfirmationButton,
                        confirmButtonType: "danger",
                        onClose: i,
                        children: (0, F.jsx)("div", {
                            className: uM.confirmationContent,
                            children: (0, F.jsx)("ul", {
                                style: { listStyleType: "disc" },
                                children:
                                    tq.deleteIssueConfirmationActionPoints.map(
                                        (e) =>
                                            (0, F.jsx)(
                                                "li",
                                                {
                                                    children: (0, F.jsx)(
                                                        "span",
                                                        { children: e }
                                                    ),
                                                },
                                                e
                                            )
                                    ),
                            }),
                        }),
                    });
                };
            try {
                uV.displayName ||
                    (uV.displayName = "IssueDeletionConfirmationDialog");
            } catch {}
            let uU = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "message",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "transferIssueMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "TransferIssuePayload",
                                kind: "LinkedField",
                                name: "transferIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [n],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [a],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "transferIssueMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "TransferIssuePayload",
                                kind: "LinkedField",
                                name: "transferIssue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issue",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "id",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "errors",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                            a,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "8949b6eb7dd35047449be8ed93ca88e7",
                        metadata: {},
                        name: "transferIssueMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            uU.hash = "a43fa3afdf97ee18c302ed5a02198d56";
            let uO = {
                    transferWarningFlash:
                        "IssueTransferDialog-module__transferWarningFlash--z3tha",
                    noResultsContainer:
                        "IssueTransferDialog-module__noResultsContainer--_HI9A",
                },
                uq = ({ owner: e, ...l }) => {
                    let n = (0, N.useRelayEnvironment)(),
                        [a, s] = (0, Q.useState)(null);
                    return ((0, Q.useEffect)(() => {
                        (async () => {
                            s(
                                await (0, tr.St)(n, {
                                    first: i8.t
                                        .issueTransferRepositoriesPreloadCount,
                                    hasIssuesEnabled: !0,
                                    owner: e,
                                })
                            );
                        })();
                    }, []),
                    null === a)
                        ? null
                        : (0, F.jsx)(uH, {
                              ...l,
                              owner: e,
                              topRepositories: a,
                          });
                },
                uH = ({
                    topRepositories: e,
                    owner: l,
                    repository: n,
                    currentRepoVisibility: a,
                    issueId: s,
                    onClose: i,
                    ...t
                }) => {
                    let [r, u] = (0, Q.useState)(),
                        [o, d] = (0, Q.useState)(t.isTransferInProgress),
                        [c, m] = (0, Q.useState)(!1),
                        g = (0, N.useRelayEnvironment)(),
                        { addToast: y } = (0, M.Y6)(),
                        p = !a || "PUBLIC" !== a,
                        k = (0, Q.useCallback)(() => {
                            r &&
                                !o &&
                                (d(!0),
                                (function ({
                                    environment: e,
                                    input: {
                                        issueId: l,
                                        repositoryId: n,
                                        createLabelsIfMissing: a,
                                    },
                                    onError: s,
                                    onCompleted: i,
                                }) {
                                    (0, N.commitMutation)(e, {
                                        mutation: uU,
                                        variables: {
                                            input: {
                                                issueId: l,
                                                repositoryId: n,
                                                createLabelsIfMissing: a,
                                            },
                                        },
                                        onError: (e) => s && s(e),
                                        onCompleted: (e) => i && i(e),
                                    });
                                })({
                                    environment: g,
                                    input: { repositoryId: r.id, issueId: s },
                                    onError: (e) => {
                                        (i(),
                                            (0, uF.N7)(u$(e.message)),
                                            y({
                                                type: "error",
                                                message: e.message,
                                            }));
                                    },
                                    onCompleted: (e) => {
                                        if ((i(), e.transferIssue?.issue)) {
                                            y({
                                                type: "info",
                                                message: aK.k.transfer.started,
                                            });
                                            let l = e.transferIssue?.issue;
                                            ey.cg &&
                                                (ey.cg.location.href = l.url);
                                            return;
                                        }
                                        for (let l of e.transferIssue?.errors ||
                                            [])
                                            (0, uF.N7)(u$(l.message));
                                        y({
                                            type: "error",
                                            message: a_.couldNotStartTransfer,
                                        });
                                    },
                                }));
                        }, [y, g, o, s, i, r]),
                        b = (0, Q.useCallback)(
                            (e) => {
                                (m(!1),
                                    u(e),
                                    e &&
                                        (!e.hasIssuesEnabled ||
                                            e.isArchived ||
                                            (p && !e.isPrivate)) &&
                                        m(!0));
                            },
                            [p]
                        ),
                        h = (0, Q.useCallback)(() => {
                            (m(!1), i());
                        }, [i]),
                        f = (0, Q.useCallback)((e) => e.isPrivate, []),
                        K = p ? f : void 0;
                    return (0, F.jsxs)(lR.l, {
                        title: aK.k.transfer.title,
                        subtitle: aK.k.transfer.subtitle,
                        onClose: h,
                        footerButtons: [
                            { content: a2.l.cancel, onClick: h, disabled: o },
                            {
                                content: a2.l.transferIssue,
                                buttonType: "primary",
                                onClick: k,
                                disabled: !r || o,
                            },
                        ],
                        children: [
                            (0, F.jsx)(Q.Suspense, {
                                fallback: (0, F.jsx)(tr.i_, {}),
                                children: (0, F.jsx)(tr.f0, {
                                    initialRepository: r,
                                    topRepositories: e,
                                    onSelect: b,
                                    organization: l,
                                    options: { readonly: o, includeForks: !0 },
                                    exclude: `${l}/${n}`,
                                    repositoryFilter: K,
                                    customNoResultsTitle:
                                        "No repositories match",
                                    customNoResultsItem: uz,
                                    repoNameOnly: !0,
                                    currentRepoVisibility: a,
                                    issueId: s,
                                    responsiveOnNarrow: !0,
                                }),
                            }),
                            c &&
                                (0, F.jsxs)(e$.A, {
                                    "aria-live": "polite",
                                    className: uO.transferWarningFlash,
                                    children: [
                                        aK.k.transfer.repoUnavailable,
                                        "\xa0",
                                        (0, F.jsx)(ek.A, {
                                            as: "a",
                                            target: "_blank",
                                            rel: "noopener noreferrer",
                                            href: "https://docs.github.com/issues/tracking-your-work-with-issues/transferring-an-issue-to-another-repository",
                                            children: "Learn more",
                                        }),
                                    ],
                                }),
                        ],
                    });
                };
            function u$(e) {
                return Error(`Issue transfer mutation failed with error:${e}`);
            }
            let uz = (0, F.jsx)("div", {
                className: uO.noResultsContainer,
                children: (0, F.jsx)(ek.A, {
                    href: "https://docs.github.com/en/issues/tracking-your-work-with-issues/transferring-an-issue-to-another-repository",
                    children: "Some repositories may be excluded.",
                }),
            });
            try {
                uq.displayName || (uq.displayName = "IssueTransferDialog");
            } catch {}
            try {
                uH.displayName ||
                    (uH.displayName = "IssueTransferDialogInternal");
            } catch {}
            let uW = {
                DisablePin: "OptionsSection-module__DisablePin--I7DX3",
                ActionListOverrides:
                    "OptionsSection-module__ActionListOverrides--DkWge",
                fullWidthTooltip:
                    "OptionsSection-module__fullWidthTooltip--ppBaf",
            };
            function uQ({
                issue: e,
                optionsSectionSecondary: l,
                optionConfig: n,
            }) {
                let [a, s] = (0, Q.useState)(!1),
                    [i, t] = (0, Q.useState)(!1),
                    [r, u] = (0, Q.useState)(!1),
                    [o, d] = (0, Q.useState)(!1),
                    [c, m] = (0, Q.useState)(!1),
                    {
                        id: g,
                        title: y,
                        body: p,
                        viewerCanLock: k,
                        viewerCanTransfer: b,
                        viewerCanDelete: h,
                        viewerCanConvertToDiscussion: f,
                        isPinned: K,
                        locked: S,
                        repository: I,
                    } = (0, N.useFragment)(ud, e),
                    v = (0, N.useFragment)(uc, l),
                    L = v?.isTransferInProgress ?? !1,
                    T = I.viewerCanPinIssues,
                    C = I?.pinnedIssues?.totalCount || 0,
                    x = C < 3,
                    R = (0, N.useRelayEnvironment)(),
                    { addToast: j } = (0, M.Y6)(),
                    _ = (0, Q.useCallback)(() => {
                        T &&
                            (K
                                ? (0, ug.e)({
                                      environment: R,
                                      input: { issueId: g },
                                      onCompleted: () => {},
                                      onError: () => {},
                                  })
                                : x &&
                                  (function ({
                                      environment: e,
                                      input: l,
                                      onCompleted: n,
                                      onError: a,
                                  }) {
                                      (0, N.commitMutation)(e, {
                                          mutation: um,
                                          variables: { input: l },
                                          onCompleted: () => n?.(),
                                          onError: (e) => a?.(e),
                                      });
                                  })({
                                      environment: R,
                                      input: { issueId: g },
                                      onCompleted: () => {},
                                      onError: () => {
                                          j({
                                              type: "error",
                                              message: a_.couldNotUnpinIssue,
                                          });
                                      },
                                  }));
                    }, [j, x, R, g, K, T]),
                    w = !x && !K,
                    E =
                        !I.isArchived &&
                        I.viewerIssueCreationPermissions.triageable;
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsx)(eF.A, {
                            as: "h2",
                            className: "sr-only",
                            children: aK.k.optionsTitle,
                        }),
                        (0, F.jsxs)(H.l, {
                            variant: "full",
                            className: uW.ActionListOverrides,
                            children: [
                                b &&
                                    (0, F.jsxs)(H.l.Item, {
                                        onSelect: () => s(!0),
                                        children: [
                                            (0, F.jsx)(H.l.LeadingVisual, {
                                                children: (0, F.jsx)(
                                                    V.ArrowRightIcon,
                                                    {}
                                                ),
                                            }),
                                            a2.l.transferIssue,
                                        ],
                                    }),
                                E &&
                                    (0, F.jsxs)(H.l.Item, {
                                        onSelect: () => m(!0),
                                        children: [
                                            (0, F.jsx)(H.l.LeadingVisual, {
                                                children: (0, F.jsx)(
                                                    V.CopyIcon,
                                                    {}
                                                ),
                                            }),
                                            a2.l.duplicateIssue,
                                        ],
                                    }),
                                k &&
                                    (0, F.jsxs)(H.l.Item, {
                                        onSelect: () => d(!0),
                                        children: [
                                            (0, F.jsx)(H.l.LeadingVisual, {
                                                children: (0, F.jsx)(
                                                    V.LockIcon,
                                                    {}
                                                ),
                                            }),
                                            (0, F.jsx)("span", {
                                                children: S
                                                    ? aK.k.lock
                                                          .buttonConfirmUnlock
                                                    : aK.k.lock
                                                          .buttonConfirmLock,
                                            }),
                                        ],
                                    }),
                                T &&
                                    (0, F.jsxs)(H.l.Item, {
                                        "aria-disabled": w || void 0,
                                        onSelect: _,
                                        className: (0, eb.$)(
                                            w && uW.DisablePin
                                        ),
                                        children: [
                                            (0, F.jsx)(H.l.LeadingVisual, {
                                                children: K
                                                    ? (0, F.jsx)(
                                                          V.PinSlashIcon,
                                                          {
                                                              className: (0,
                                                              eb.$)(
                                                                  w &&
                                                                      uW.DisablePin
                                                              ),
                                                          }
                                                      )
                                                    : (0, F.jsx)(V.PinIcon, {
                                                          className: (0, eb.$)(
                                                              w && uW.DisablePin
                                                          ),
                                                      }),
                                            }),
                                            (0, F.jsx)(z.A, {
                                                direction: "s",
                                                text: w
                                                    ? "3/3 issues already pinned. Unpin an issue to pin this one."
                                                    : K
                                                      ? aK.k.unpinIssueTooltip
                                                      : aK.k.pinIssueTooltip,
                                                className: uW.fullWidthTooltip,
                                                children: K
                                                    ? a2.l.unpinIssue
                                                    : a2.l.pinIssue,
                                            }),
                                            C > 0 &&
                                                (0, F.jsx)(H.l.TrailingVisual, {
                                                    children: (0, F.jsxs)(
                                                        t7.A,
                                                        {
                                                            children: [
                                                                C,
                                                                "/",
                                                                3,
                                                            ],
                                                        }
                                                    ),
                                                }),
                                        ],
                                    }),
                                f &&
                                    (0, F.jsxs)(H.l.Item, {
                                        onSelect: () => t(!0),
                                        children: [
                                            (0, F.jsx)(H.l.LeadingVisual, {
                                                children: (0, F.jsx)(
                                                    V.CommentDiscussionIcon,
                                                    {}
                                                ),
                                            }),
                                            a2.l.convertToDiscussion,
                                        ],
                                    }),
                                h &&
                                    (0, F.jsxs)(H.l.Item, {
                                        variant: "danger",
                                        onSelect: () => u(!0),
                                        children: [
                                            (0, F.jsx)(H.l.LeadingVisual, {
                                                children: (0, F.jsx)(
                                                    V.TrashIcon,
                                                    {}
                                                ),
                                            }),
                                            a2.l.deleteIssue,
                                        ],
                                    }),
                            ],
                        }),
                        a &&
                            (0, F.jsx)(uq, {
                                owner: I.owner.login,
                                repository: I.name,
                                currentRepoVisibility: I.visibility,
                                issueId: g,
                                isTransferInProgress: L,
                                onClose: () => s(!1),
                            }),
                        i &&
                            (0, F.jsx)(uS, {
                                owner: I.owner.login,
                                repository: I.name,
                                issueId: g,
                                onClose: () => t(!1),
                            }),
                        o &&
                            (0, F.jsx)(uE, {
                                issueId: g,
                                isUnlocked: !S,
                                onClose: () => d(!1),
                            }),
                        r &&
                            (0, F.jsx)(uV, {
                                issueId: g,
                                onSuccessfulDeletion: n.onIssueDelete,
                                afterDelete: n.navigateBack,
                                onClose: () => u(!1),
                            }),
                        c &&
                            (0, F.jsx)(uN, {
                                issue: e,
                                showDuplicateIssueDialog: c,
                                setShowDuplicateIssueDialog: m,
                                optionConfig: n,
                                repositoryOwner: I.owner.login,
                                repositoryName: I.name,
                                title: y,
                                body: p,
                            }),
                    ],
                });
            }
            try {
                uQ.displayName || (uQ.displayName = "OptionsSection");
            } catch {}
            function uG({
                sidebarKey: e,
                sidebarSecondaryKey: l,
                optionConfig: n,
                viewer: a,
            }) {
                let s = (0, N.useFragment)(ie, e),
                    i = (0, N.useFragment)(s9, l),
                    t = (0, _.G7)("issues_sticky_sidebar"),
                    r = (0, Q.useMemo)(
                        () =>
                            (0, F.jsxs)("div", {
                                className: iu.sidebarContent,
                                children: [
                                    (0, F.jsx)(sg.rC, {
                                        issue: s,
                                        viewer: a,
                                        lazyKey: i,
                                        onIssueUpdate: n.onIssueUpdate,
                                        singleKeyShortcutsEnabled:
                                            n.singleKeyShortcutsEnabled || !1,
                                        insideSidePanel: n.insideSidePanel,
                                    }),
                                    (0, F.jsx)(sy.ku, {
                                        issue: s,
                                        onIssueUpdate: n.onIssueUpdate,
                                        singleKeyShortcutsEnabled:
                                            n.singleKeyShortcutsEnabled || !1,
                                        insideSidePanel: n.insideSidePanel,
                                    }),
                                    (0, F.jsx)(is.S7, {
                                        issue: s,
                                        singleKeyShortcutsEnabled:
                                            n.singleKeyShortcutsEnabled || !1,
                                        onIssueUpdate: n.onIssueUpdate,
                                        insideSidePanel: n.insideSidePanel,
                                    }),
                                    (0, F.jsx)(il.E, {
                                        issue: s,
                                        singleKeyShortcutsEnabled:
                                            n.singleKeyShortcutsEnabled || !1,
                                        onIssueUpdate: n.onIssueUpdate,
                                        insideSidePanel: n.insideSidePanel,
                                        inProjectsPage: !!n.selectedProjectId,
                                    }),
                                    (0, F.jsx)(Q.Suspense, {
                                        fallback: (0, F.jsx)(ia.ym, {}),
                                        children: (0, F.jsx)(l4.t, {
                                            fallback: (0, F.jsx)(ia.ym, {}),
                                            children: (0, F.jsx)(ia.le, {
                                                selectedProjectId:
                                                    n.selectedProjectId,
                                                allowedProjectOwner:
                                                    n.allowedProjectOwner,
                                                issueOrPullRequest: s,
                                                onIssueUpdate: n.onIssueUpdate,
                                                insideSidePanel:
                                                    n.insideSidePanel,
                                            }),
                                        }),
                                    }),
                                    (0, F.jsx)(sp.eJ, {
                                        issue: s,
                                        onIssueUpdate: n.onIssueUpdate,
                                        singleKeyShortcutsEnabled:
                                            n.singleKeyShortcutsEnabled || !1,
                                        insideSidePanel: n.insideSidePanel,
                                    }),
                                    (0, F.jsx)(Q.Suspense, {
                                        fallback: (0, F.jsx)(uo, {}),
                                        children: (0, F.jsx)(uu, {
                                            onLinkClick: n.onLinkClick,
                                            onIssueUpdate: n.onIssueUpdate,
                                            insideSidePanel: n.insideSidePanel,
                                            issueSidebarSecondaryKey: l,
                                            viewer: a,
                                        }),
                                    }),
                                    (0, F.jsx)(uQ, {
                                        issue: s,
                                        optionsSectionSecondary: i,
                                        optionConfig: n,
                                    }),
                                ],
                            }),
                        [s, i, n, l, a]
                    );
                return t ? (0, F.jsx)(ir, { topOffset: 56, children: r }) : r;
            }
            try {
                uG.displayName || (uG.displayName = "IssueSidebar");
            } catch {}
            var uY = n(88657);
            function uX() {
                return (0, F.jsxs)(uY.E, {
                    children: [
                        (0, F.jsx)(uY.E.Visual, {
                            children: (0, F.jsx)(V.AlertIcon, {
                                size: "medium",
                            }),
                        }),
                        (0, F.jsx)(uY.E.Heading, {
                            children: "Timeline cannot be loaded",
                        }),
                        (0, F.jsxs)(uY.E.Description, {
                            children: [
                                "The timeline is currently unavailable due to a system error. Try reloading the page.",
                                " ",
                                (0, F.jsx)(ek.A, {
                                    inline: !0,
                                    href: "https://support.github.com/contact",
                                    children: "Contact support",
                                }),
                                " ",
                                "if the problem persists.",
                            ],
                        }),
                        (0, F.jsx)(uY.E.SecondaryAction, {
                            href: "https://www.githubstatus.com/",
                            children: "GitHub Status",
                        }),
                    ],
                });
            }
            try {
                uX.displayName ||
                    (uX.displayName = "IssueTimelineErrorFallback");
            } catch {}
            var uJ = n(2593);
            let uZ = {
                issueViewerContainer:
                    "IssueViewer-module__issueViewerContainer--C18gM",
                issueViewerMetadataPane:
                    "IssueViewer-module__issueViewerMetadataPane--i01ta",
                metadataHeader: "IssueViewer-module__metadataHeader--OGi4i",
                largeScreenMetadataHeader:
                    "IssueViewer-module__largeScreenMetadataHeader--xPLHt",
                crawlerPagination:
                    "IssueViewer-module__crawlerPagination--sBqD_",
                mainContainer: "IssueViewer-module__mainContainer--PhquW",
                contentAndSidebarWrapper:
                    "IssueViewer-module__contentAndSidebarWrapper--KA1nM",
                contentArea: "IssueViewer-module__contentArea--IpMnd",
                subIssuesContainer:
                    "IssueViewer-module__subIssuesContainer--IiVhy",
                commentsContainer:
                    "IssueViewer-module__commentsContainer--H8wxg",
                metadataSidebar: "IssueViewer-module__metadataSidebar--QdJ2b",
            };
            var u0 = n(66827),
                u1 = n(6403);
            let u2 = {
                argumentDefinitions: [
                    {
                        defaultValue: !0,
                        kind: "LocalArgument",
                        name: "markAsRead",
                    },
                    {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "number",
                    },
                ],
                kind: "Fragment",
                metadata: null,
                name: "IssueViewerSecondaryViewQueryData",
                selections: [
                    {
                        alias: null,
                        args: [
                            {
                                kind: "Variable",
                                name: "markAsRead",
                                variableName: "markAsRead",
                            },
                            {
                                kind: "Variable",
                                name: "number",
                                variableName: "number",
                            },
                        ],
                        concreteType: "Issue",
                        kind: "LinkedField",
                        name: "issue",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "IssueViewerSecondaryIssueData",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueViewerSecondaryViewQueryRepoData",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            u2.hash = "7742c3247121039dc8f0e5218d4a97f7";
            let u4 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueViewerSecondaryViewQueryRepoData",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "LazyContributorFooter",
                    },
                ],
                type: "Repository",
                abstractKey: null,
            };
            u4.hash = "221066fe0c64c313f75897f3e96bb136";
            let u6 = u1.A;
            var u5 = n(96747),
                u7 = n(10871),
                u3 = n(8521);
            let u8 = {
                    signedOutBanner:
                        "SignedOutBanner-module__signedOutBanner--ltCMn",
                },
                u9 = () =>
                    (0, F.jsxs)(e$.A, {
                        variant: "warning",
                        className: u8.signedOutBanner,
                        children: [
                            (0, F.jsx)(u7.z, {
                                variant: "primary",
                                href: (0, u3.H7)(ey.fV.href),
                                "data-jump-to-bottom-target": !0,
                                id: "signed-out-banner-sign-up",
                                children: a2.l.signUp,
                            }),
                            (0, F.jsxs)("span", {
                                children: [
                                    (0, F.jsxs)("strong", {
                                        children: [
                                            " ",
                                            aK.k.signedOutBanner.signUp,
                                        ],
                                    }),
                                    " ",
                                    aK.k.signedOutBanner.signIn,
                                    " ",
                                ],
                            }),
                            (0, F.jsx)(ek.A, {
                                href: (0, u3.Q_)(ey.fV.href),
                                children: a2.l.signIn,
                            }),
                        ],
                    });
            try {
                u9.displayName || (u9.displayName = "SignedOutBanner");
            } catch {}
            let oe = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: 15,
                            kind: "LocalArgument",
                            name: "count",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "skip",
                        },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueTimelineIssueFragment",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameWithOwner",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            args: [
                                {
                                    kind: "Variable",
                                    name: "count",
                                    variableName: "count",
                                },
                                {
                                    kind: "Variable",
                                    name: "skip",
                                    variableName: "skip",
                                },
                            ],
                            kind: "FragmentSpread",
                            name: "useTimelineItemsFrontFragment",
                        },
                        {
                            args: [
                                { kind: "Literal", name: "count", value: 0 },
                            ],
                            kind: "FragmentSpread",
                            name: "useTimelineItemsBackFragment",
                        },
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            oe.hash = "69e3b722cb70fcda50cde002214547ca";
            let ol = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueTimelineSecondary",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isTransferInProgress",
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            ol.hash = "4fde3787162ec8f1fd60c73d217127c7";
            let on = {
                copilot: { displayName: "Copilot" },
                ghost: {
                    login: "ghost",
                    avatarUrl: "/ghost.png",
                    profileUrl: "/ghost",
                },
                lockedReasonStrings: {
                    OFF_TOPIC: "off topic",
                    RESOLVED: "resolved",
                    SPAM: "spam",
                    TOO_HEATED: "too heated",
                },
                labelQuery: (e) => `state:open label:"${e}"`,
                timeline: {
                    majorEventTypes: [
                        "IssueComment",
                        "ClosedEvent",
                        "ReopenedEvent",
                        "CrossReferencedEvent",
                        "ReferencedEvent",
                        "PullRequestReview",
                    ],
                    borderedMajorEventTypes: ["IssueComment"],
                    badgeSize: 18,
                    pageSize: 150,
                    virtualPageSize: 100,
                    maxPreloadCount: 150,
                    dataTimelineEventId: "data-timeline-event-id",
                    dataWrapperTimelineEventId: "data-wrapper-timeline-id",
                },
                commitBadgeHelpUrl:
                    "https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits",
                closingViaCommitMessageUrl:
                    "https://docs.github.com/articles/closing-issues-via-commit-messages",
            };
            var oa = n(98130);
            async function os() {
                return Promise.all(
                    Array.from(
                        document.querySelectorAll(i8.t.commentVideo)
                    ).map(
                        (e) =>
                            new Promise((l) => {
                                if (e.readyState >= e.HAVE_METADATA) l(e);
                                else {
                                    let n = setTimeout(
                                            () => l(e),
                                            i8.t.scrollWaitMediaTimeout
                                        ),
                                        a = () => {
                                            (clearTimeout(n), l(e));
                                        };
                                    (e.addEventListener("loadeddata", () => {
                                        e.readyState >= e.HAVE_METADATA && a();
                                    }),
                                        e.addEventListener("error", () => a()));
                                }
                            })
                    )
                );
            }
            async function oi() {
                return Promise.all(
                    Array.from(
                        document.querySelectorAll(i8.t.commentImage)
                    ).map((e) => {
                        new Promise((l) => {
                            if (e.complete) l(e);
                            else {
                                let n = setTimeout(
                                        () => l(e),
                                        i8.t.scrollWaitMediaTimeout
                                    ),
                                    a = () => {
                                        (clearTimeout(n), l(e));
                                    };
                                (e.addEventListener("load", () => a()),
                                    e.addEventListener("error", () => a()));
                            }
                        });
                    })
                );
            }
            async function ot() {
                return Promise.all([os(), oi()]);
            }
            let or = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "issueId",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "id",
                            variableName: "issueId",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "deletedCommentId",
                        storageKey: null,
                    },
                    a = [
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "ReactionViewerRelayGroups",
                        },
                    ],
                    s = {
                        args: null,
                        kind: "FragmentSpread",
                        name: "SubIssuesList",
                    },
                    i = {
                        args: null,
                        kind: "FragmentSpread",
                        name: "useHasSubIssues",
                    },
                    t = {
                        args: null,
                        kind: "FragmentSpread",
                        name: "RelationshipsSectionFragment",
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isCopilot",
                        storageKey: null,
                    },
                    m = [u],
                    g = {
                        kind: "InlineFragment",
                        selections: m,
                        type: "Node",
                        abstractKey: "__isNode",
                    },
                    y = {
                        alias: null,
                        args: [{ kind: "Literal", name: "first", value: 20 }],
                        concreteType: "AssigneeConnection",
                        kind: "LinkedField",
                        name: "assignedActors",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    r,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            u,
                                            o,
                                            d,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "profileResourcePath",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "size",
                                                        value: 64,
                                                    },
                                                ],
                                                kind: "ScalarField",
                                                name: "avatarUrl",
                                                storageKey:
                                                    "avatarUrl(size:64)",
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: [c],
                                                type: "Bot",
                                                abstractKey: null,
                                            },
                                        ],
                                        type: "Actor",
                                        abstractKey: "__isActor",
                                    },
                                    g,
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: "assignedActors(first:20)",
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "closed",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        concreteType: "Milestone",
                        kind: "LinkedField",
                        name: "milestone",
                        plural: !1,
                        selections: [
                            u,
                            p,
                            k,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "dueOn",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "progressPercentage",
                                storageKey: null,
                            },
                            F,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "closedAt",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    f = [r, o, u],
                    K = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: f,
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    v = [{ kind: "Literal", name: "first", value: 25 }],
                    L = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "target",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "oid",
                                storageKey: null,
                            },
                            u,
                            r,
                        ],
                        storageKey: null,
                    },
                    T = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    },
                    C = [T],
                    x = {
                        alias: null,
                        args: null,
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "associatedPullRequests",
                        plural: !1,
                        selections: C,
                        storageKey: null,
                    },
                    R = { kind: "Literal", name: "first", value: 10 },
                    N = {
                        kind: "Literal",
                        name: "includeClosedPrs",
                        value: !0,
                    },
                    j = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    w = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    E = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [S, u, d, K],
                        storageKey: null,
                    },
                    A = {
                        alias: "linkedPullRequests",
                        args: [
                            R,
                            {
                                kind: "Literal",
                                name: "includeClosedPrs",
                                value: !1,
                            },
                            {
                                kind: "Literal",
                                name: "orderByState",
                                value: !0,
                            },
                        ],
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "closedByPullRequestsReferences",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "PullRequest",
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [E, j, _, F, I, u],
                                storageKey: null,
                            },
                        ],
                        storageKey:
                            "closedByPullRequestsReferences(first:10,includeClosedPrs:false,orderByState:true)",
                    },
                    P = { kind: "Literal", name: "first", value: 100 },
                    B = [
                        P,
                        {
                            kind: "Literal",
                            name: "orderBy",
                            value: { direction: "ASC", field: "NAME" },
                        },
                    ],
                    D = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    M = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameHTML",
                        storageKey: null,
                    },
                    V = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                    U = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "cursor",
                        storageKey: null,
                    },
                    O = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "hasNextPage",
                        storageKey: null,
                    },
                    q = {
                        alias: null,
                        args: null,
                        concreteType: "PageInfo",
                        kind: "LinkedField",
                        name: "pageInfo",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "endCursor",
                                storageKey: null,
                            },
                            O,
                        ],
                        storageKey: null,
                    },
                    H = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: B,
                                concreteType: "LabelConnection",
                                kind: "LinkedField",
                                name: "labels",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "LabelEdge",
                                        kind: "LinkedField",
                                        name: "edges",
                                        plural: !0,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Label",
                                                kind: "LinkedField",
                                                name: "node",
                                                plural: !1,
                                                selections: [
                                                    u,
                                                    D,
                                                    d,
                                                    M,
                                                    V,
                                                    F,
                                                    r,
                                                ],
                                                storageKey: null,
                                            },
                                            U,
                                        ],
                                        storageKey: null,
                                    },
                                    q,
                                ],
                                storageKey:
                                    'labels(first:100,orderBy:{"direction":"ASC","field":"NAME"})',
                            },
                            {
                                alias: null,
                                args: B,
                                filters: ["orderBy"],
                                handle: "connection",
                                key: "MetadataSectionAssignedLabels_labels",
                                kind: "LinkedHandle",
                                name: "labels",
                            },
                            {
                                kind: "TypeDiscriminator",
                                abstractKey: "__isNode",
                            },
                        ],
                        type: "Labelable",
                        abstractKey: "__isLabelable",
                    },
                    $ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isArchived",
                        storageKey: null,
                    },
                    z = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [$],
                        storageKey: null,
                    },
                    W = [
                        {
                            kind: "Literal",
                            name: "allowSameEnterprise",
                            value: !0,
                        },
                        R,
                    ],
                    Q = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanUpdate",
                        storageKey: null,
                    },
                    G = [{ kind: "Literal", name: "name", value: "Status" }],
                    Y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "optionId",
                        storageKey: null,
                    },
                    X = {
                        alias: null,
                        args: W,
                        concreteType: "ProjectV2ItemConnection",
                        kind: "LinkedField",
                        name: "projectItemsNext",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "ProjectV2ItemEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "ProjectV2Item",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            u,
                                            $,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "ProjectV2",
                                                kind: "LinkedField",
                                                name: "project",
                                                plural: !1,
                                                selections: [
                                                    u,
                                                    p,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "template",
                                                        storageKey: null,
                                                    },
                                                    Q,
                                                    F,
                                                    {
                                                        alias: null,
                                                        args: G,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "field",
                                                        plural: !1,
                                                        selections: [
                                                            r,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    u,
                                                                    d,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "ProjectV2SingleSelectFieldOption",
                                                                        kind: "LinkedField",
                                                                        name: "options",
                                                                        plural: !0,
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                Y,
                                                                                d,
                                                                                M,
                                                                                D,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "descriptionHTML",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                V,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "ProjectV2SingleSelectField",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            g,
                                                        ],
                                                        storageKey:
                                                            'field(name:"Status")',
                                                    },
                                                    k,
                                                    I,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "hasReachedItemsLimit",
                                                        storageKey: null,
                                                    },
                                                    r,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: G,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "fieldValueByName",
                                                plural: !1,
                                                selections: [
                                                    r,
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            u,
                                                            Y,
                                                            d,
                                                            M,
                                                            D,
                                                        ],
                                                        type: "ProjectV2ItemFieldSingleSelectValue",
                                                        abstractKey: null,
                                                    },
                                                    g,
                                                ],
                                                storageKey:
                                                    'fieldValueByName(name:"Status")',
                                            },
                                            r,
                                        ],
                                        storageKey: null,
                                    },
                                    U,
                                ],
                                storageKey: null,
                            },
                            q,
                        ],
                        storageKey:
                            "projectItemsNext(allowSameEnterprise:true,first:10)",
                    },
                    J = {
                        alias: null,
                        args: W,
                        filters: ["allowedOwner", "allowSameEnterprise"],
                        handle: "connection",
                        key: "ProjectSection_projectItemsNext",
                        kind: "LinkedHandle",
                        name: "projectItemsNext",
                    },
                    Z = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanUpdateMetadata",
                        storageKey: null,
                    },
                    ee = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "body",
                        storageKey: null,
                    },
                    el = {
                        kind: "Literal",
                        name: "unfurlReferences",
                        value: !0,
                    },
                    en = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "bodyVersion",
                        storageKey: null,
                    },
                    ea = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isPrivate",
                        storageKey: null,
                    },
                    es = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    ei = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    et = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [d, K, u],
                        storageKey: null,
                    },
                    er = {
                        alias: null,
                        args: null,
                        concreteType: "Issue",
                        kind: "LinkedField",
                        name: "duplicateOf",
                        plural: !1,
                        selections: [I, F, et, u],
                        storageKey: null,
                    },
                    eu = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "total",
                        storageKey: null,
                    },
                    eo = {
                        alias: null,
                        args: null,
                        concreteType: "SubIssuesSummary",
                        kind: "LinkedField",
                        name: "subIssuesSummary",
                        plural: !1,
                        selections: [
                            eu,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "completed",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    ed = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [S, u],
                        storageKey: null,
                    },
                    ec = [o],
                    em = [
                        {
                            kind: "InlineFragment",
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "ReactionGroup",
                                    kind: "LinkedField",
                                    name: "reactionGroups",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "content",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "viewerHasReacted",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: [
                                                {
                                                    kind: "Literal",
                                                    name: "first",
                                                    value: 5,
                                                },
                                            ],
                                            concreteType: "ReactorConnection",
                                            kind: "LinkedField",
                                            name: "reactors",
                                            plural: !1,
                                            selections: [
                                                T,
                                                {
                                                    alias: null,
                                                    args: null,
                                                    concreteType: null,
                                                    kind: "LinkedField",
                                                    name: "nodes",
                                                    plural: !0,
                                                    selections: [
                                                        r,
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: ec,
                                                            type: "User",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [o, c],
                                                            type: "Bot",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: ec,
                                                            type: "Organization",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: ec,
                                                            type: "Mannequin",
                                                            abstractKey: null,
                                                        },
                                                        g,
                                                    ],
                                                    storageKey: null,
                                                },
                                            ],
                                            storageKey: "reactors(first:5)",
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "Reactable",
                            abstractKey: "__isReactable",
                        },
                        u,
                    ],
                    eg = [
                        u,
                        d,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "dataType",
                            storageKey: null,
                        },
                    ],
                    ey = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "value",
                        storageKey: null,
                    },
                    ep = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: null,
                    },
                    ek = {
                        alias: null,
                        args: null,
                        concreteType: "IssueForm",
                        kind: "LinkedField",
                        name: "issueForms",
                        plural: !0,
                        selections: [r],
                        storageKey: null,
                    },
                    eF = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "visibility",
                        storageKey: null,
                    },
                    eb = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanPush",
                        storageKey: null,
                    },
                    eh = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "blockedBy",
                        storageKey: null,
                    },
                    ef = {
                        alias: null,
                        args: [P],
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "subIssues",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "Issue",
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    u,
                                    j,
                                    ei,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType:
                                            "IssueDependenciesSummary",
                                        kind: "LinkedField",
                                        name: "issueDependenciesSummary",
                                        plural: !1,
                                        selections: [eh],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: [R],
                                        concreteType: "UserConnection",
                                        kind: "LinkedField",
                                        name: "assignees",
                                        plural: !1,
                                        selections: [
                                            T,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "UserEdge",
                                                kind: "LinkedField",
                                                name: "edges",
                                                plural: !0,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "User",
                                                        kind: "LinkedField",
                                                        name: "node",
                                                        plural: !1,
                                                        selections: [u, o, ep],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: "assignees(first:10)",
                                    },
                                    F,
                                    et,
                                    h,
                                    I,
                                    p,
                                    es,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueType",
                                        kind: "LinkedField",
                                        name: "issueType",
                                        plural: !1,
                                        selections: [u, d, D],
                                        storageKey: null,
                                    },
                                    eo,
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "first",
                                                value: 0,
                                            },
                                            N,
                                        ],
                                        concreteType: "PullRequestConnection",
                                        kind: "LinkedField",
                                        name: "closedByPullRequestsReferences",
                                        plural: !1,
                                        selections: C,
                                        storageKey:
                                            "closedByPullRequestsReferences(first:0,includeClosedPrs:true)",
                                    },
                                    k,
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: "subIssues(first:100)",
                    },
                    eK = {
                        alias: "subIssuesConnection",
                        args: null,
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "subIssues",
                        plural: !1,
                        selections: C,
                        storageKey: null,
                    },
                    eS = {
                        alias: null,
                        args: null,
                        concreteType: "Issue",
                        kind: "LinkedField",
                        name: "parent",
                        plural: !1,
                        selections: m,
                        storageKey: null,
                    },
                    eI = {
                        alias: null,
                        args: null,
                        concreteType: "SubIssuesSummary",
                        kind: "LinkedField",
                        name: "subIssuesSummary",
                        plural: !1,
                        selections: [eu],
                        storageKey: null,
                    },
                    ev = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [S, K, u, $],
                        storageKey: null,
                    },
                    eL = { kind: "Literal", name: "ranked", value: !0 },
                    eT = [{ kind: "Literal", name: "first", value: 3 }, eL],
                    eC = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "nodes",
                            plural: !0,
                            selections: [u, p, es, F, I, ed, j, ei],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "PageInfo",
                            kind: "LinkedField",
                            name: "pageInfo",
                            plural: !1,
                            selections: [O],
                            storageKey: null,
                        },
                    ],
                    ex = {
                        alias: "topBlockedBy",
                        args: eT,
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "blockedBy",
                        plural: !1,
                        selections: eC,
                        storageKey: "blockedBy(first:3,ranked:true)",
                    },
                    eR = {
                        alias: "topBlocking",
                        args: eT,
                        concreteType: "IssueConnection",
                        kind: "LinkedField",
                        name: "blocking",
                        plural: !1,
                        selections: eC,
                        storageKey: "blocking(first:3,ranked:true)",
                    },
                    eN = {
                        alias: null,
                        args: null,
                        concreteType: "IssueDependenciesSummary",
                        kind: "LinkedField",
                        name: "issueDependenciesSummary",
                        plural: !1,
                        selections: [
                            eh,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "blocking",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueViewerSubscriptionMetadataSubscription",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "IssueUpdatedPayload",
                                kind: "LinkedField",
                                name: "issueUpdated",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueMetadataUpdated",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "LabelsSectionAssignedLabels",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "AssigneesSectionAssignees",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "MilestonesSectionMilestone",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ProjectsSectionFragment",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "DevelopmentSectionFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueBodyUpdated",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueBodyContent",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueTitleUpdated",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "Header",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueStateUpdated",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "HeaderState",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueActions",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueTypeUpdated",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "HeaderIssueType",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "TypesSectionTypeFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueReactionUpdated",
                                        plural: !1,
                                        selections: a,
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueFieldsUpdated",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "FieldsSectionFieldValues",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueComment",
                                        kind: "LinkedField",
                                        name: "commentReactionUpdated",
                                        plural: !1,
                                        selections: a,
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueComment",
                                        kind: "LinkedField",
                                        name: "commentUpdated",
                                        plural: !1,
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueCommentViewerMarkdownViewer",
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueCommentEditorBodyFragment",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "subIssuesUpdated",
                                        plural: !1,
                                        selections: [s, i],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueTransferStateUpdated",
                                        plural: !1,
                                        selections: [
                                            s,
                                            i,
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueBodyViewerSubIssues",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "parentIssueUpdated",
                                        plural: !1,
                                        selections: [
                                            t,
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "HeaderParentTitle",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueDependenciesSummaryUpdated",
                                        plural: !1,
                                        selections: [
                                            t,
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "HeaderBlockedBySummary",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "IssueViewerSubscriptionMetadataSubscription",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "IssueUpdatedPayload",
                                kind: "LinkedField",
                                name: "issueUpdated",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        filters: null,
                                        handle: "deleteRecord",
                                        key: "",
                                        kind: "ScalarHandle",
                                        name: "deletedCommentId",
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueMetadataUpdated",
                                        plural: !1,
                                        selections: [
                                            y,
                                            b,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [u, h, d, K, S],
                                                storageKey: null,
                                            },
                                            u,
                                            p,
                                            I,
                                            h,
                                            {
                                                alias: null,
                                                args: v,
                                                concreteType:
                                                    "LinkedBranchConnection",
                                                kind: "LinkedField",
                                                name: "linkedBranches",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "LinkedBranch",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            u,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Ref",
                                                                kind: "LinkedField",
                                                                name: "ref",
                                                                plural: !1,
                                                                selections: [
                                                                    d,
                                                                    u,
                                                                    r,
                                                                    L,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                S,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Ref",
                                                                                    kind: "LinkedField",
                                                                                    name: "defaultBranchRef",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            d,
                                                                                            u,
                                                                                            L,
                                                                                            x,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "Repository",
                                                                                                kind: "LinkedField",
                                                                                                name: "repository",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    m,
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    x,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "linkedBranches(first:25)",
                                            },
                                            {
                                                alias: null,
                                                args: [R, N],
                                                concreteType:
                                                    "PullRequestConnection",
                                                kind: "LinkedField",
                                                name: "closedByPullRequestsReferences",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PullRequest",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            u,
                                                            F,
                                                            I,
                                                            p,
                                                            j,
                                                            _,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "isInMergeQueue",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            w,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "Repository",
                                                                kind: "LinkedField",
                                                                name: "repository",
                                                                plural: !1,
                                                                selections: [
                                                                    u,
                                                                    d,
                                                                    S,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "owner",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                r,
                                                                                u,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            r,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "closedByPullRequestsReferences(first:10,includeClosedPrs:true)",
                                            },
                                            A,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanLinkBranches",
                                                storageKey: null,
                                            },
                                            H,
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            z,
                                                            X,
                                                            J,
                                                            Z,
                                                        ],
                                                        type: "Issue",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [
                                                            z,
                                                            X,
                                                            J,
                                                            Q,
                                                        ],
                                                        type: "PullRequest",
                                                        abstractKey: null,
                                                    },
                                                ],
                                                type: "IssueOrPullRequest",
                                                abstractKey:
                                                    "__isIssueOrPullRequest",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueBodyUpdated",
                                        plural: !1,
                                        selections: [
                                            ee,
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "renderTasklistBlocks",
                                                        value: !0,
                                                    },
                                                    el,
                                                ],
                                                kind: "ScalarField",
                                                name: "bodyHTML",
                                                storageKey:
                                                    "bodyHTML(renderTasklistBlocks:true,unfurlReferences:true)",
                                            },
                                            en,
                                            u,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueTitleUpdated",
                                        plural: !1,
                                        selections: [
                                            p,
                                            I,
                                            u,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [S, u, d, K, $, ea],
                                                storageKey: null,
                                            },
                                            es,
                                            F,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanUpdateNext",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: [d, D, u],
                                                storageKey: null,
                                            },
                                            j,
                                            ei,
                                            er,
                                            A,
                                            eo,
                                            y,
                                            b,
                                            H,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueStateUpdated",
                                        plural: !1,
                                        selections: [
                                            j,
                                            ei,
                                            er,
                                            u,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [u, S, K],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueTypeUpdated",
                                        plural: !1,
                                        selections: [
                                            ed,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "IssueType",
                                                kind: "LinkedField",
                                                name: "issueType",
                                                plural: !1,
                                                selections: [
                                                    d,
                                                    D,
                                                    u,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "isEnabled",
                                                        storageKey: null,
                                                    },
                                                    V,
                                                ],
                                                storageKey: null,
                                            },
                                            u,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueReactionUpdated",
                                        plural: !1,
                                        selections: em,
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueFieldsUpdated",
                                        plural: !1,
                                        selections: [
                                            u,
                                            {
                                                alias: null,
                                                args: v,
                                                concreteType:
                                                    "IssueFieldValueConnection",
                                                kind: "LinkedField",
                                                name: "issueFieldValues",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            r,
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "field",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                r,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        eg,
                                                                                    type: "IssueFieldText",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                g,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    ey,
                                                                ],
                                                                type: "IssueFieldTextValue",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "field",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                r,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        eg,
                                                                                    type: "IssueFieldSingleSelect",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                g,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    d,
                                                                    D,
                                                                    V,
                                                                ],
                                                                type: "IssueFieldSingleSelectValue",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "field",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                r,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        eg,
                                                                                    type: "IssueFieldDate",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                g,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    ey,
                                                                ],
                                                                type: "IssueFieldDateValue",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            null,
                                                                        kind: "LinkedField",
                                                                        name: "field",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                r,
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        eg,
                                                                                    type: "IssueFieldNumber",
                                                                                    abstractKey:
                                                                                        null,
                                                                                },
                                                                                g,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: "numberValue",
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "value",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "IssueFieldNumberValue",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            g,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "issueFieldValues(first:25)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanSetFields",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueComment",
                                        kind: "LinkedField",
                                        name: "commentReactionUpdated",
                                        plural: !1,
                                        selections: em,
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueComment",
                                        kind: "LinkedField",
                                        name: "commentUpdated",
                                        plural: !1,
                                        selections: [
                                            u,
                                            ee,
                                            {
                                                alias: null,
                                                args: [el],
                                                kind: "ScalarField",
                                                name: "bodyHTML",
                                                storageKey:
                                                    "bodyHTML(unfurlReferences:true)",
                                            },
                                            en,
                                            Q,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "author",
                                                plural: !1,
                                                selections: [r, o, ep, u],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "issue",
                                                plural: !1,
                                                selections: [
                                                    u,
                                                    h,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "author",
                                                        plural: !1,
                                                        selections: f,
                                                        storageKey: null,
                                                    },
                                                    I,
                                                ],
                                                storageKey: null,
                                            },
                                            h,
                                            F,
                                            w,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "authorAssociation",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanDelete",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanMinimize",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanReport",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanReportToMaintainer",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanBlockFromOrg",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanUnblockFromOrg",
                                                storageKey: null,
                                            },
                                            {
                                                alias: "isHidden",
                                                args: null,
                                                kind: "ScalarField",
                                                name: "isMinimized",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "minimizedReason",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "showSpammyBadge",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "createdViaEmail",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerDidAuthor",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Sponsorship",
                                                kind: "LinkedField",
                                                name: "authorToRepoOwnerSponsorship",
                                                plural: !1,
                                                selections: [
                                                    w,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "isActive",
                                                        storageKey: null,
                                                    },
                                                    u,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    u,
                                                    d,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "owner",
                                                        plural: !1,
                                                        selections: [
                                                            r,
                                                            u,
                                                            o,
                                                            F,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    ea,
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "viewerCanReadUserContentEdits",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "lastEditedAt",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "UserContentEdit",
                                                        kind: "LinkedField",
                                                        name: "lastUserContentEdit",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "editor",
                                                                plural: !1,
                                                                selections: [
                                                                    r,
                                                                    F,
                                                                    o,
                                                                    u,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            u,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                type: "Comment",
                                                abstractKey: "__isComment",
                                            },
                                            {
                                                kind: "ClientExtension",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "pendingMinimizeReason",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "pendingBlock",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "pendingUnblock",
                                                        storageKey: null,
                                                    },
                                                ],
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "subIssuesUpdated",
                                        plural: !1,
                                        selections: [
                                            u,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    d,
                                                    K,
                                                    u,
                                                    ek,
                                                    S,
                                                    eF,
                                                    eb,
                                                ],
                                                storageKey: null,
                                            },
                                            ef,
                                            eK,
                                            h,
                                            I,
                                            eS,
                                            eI,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueTransferStateUpdated",
                                        plural: !1,
                                        selections: [
                                            u,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Repository",
                                                kind: "LinkedField",
                                                name: "repository",
                                                plural: !1,
                                                selections: [
                                                    d,
                                                    K,
                                                    u,
                                                    ek,
                                                    S,
                                                    eF,
                                                    eb,
                                                    $,
                                                ],
                                                storageKey: null,
                                            },
                                            ef,
                                            eK,
                                            h,
                                            I,
                                            eS,
                                            eI,
                                            Z,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "parentIssueUpdated",
                                        plural: !1,
                                        selections: [
                                            u,
                                            ev,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "parent",
                                                plural: !1,
                                                selections: [
                                                    u,
                                                    p,
                                                    es,
                                                    F,
                                                    I,
                                                    E,
                                                    j,
                                                    ei,
                                                    eo,
                                                ],
                                                storageKey: null,
                                            },
                                            ex,
                                            eR,
                                            eN,
                                            Z,
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueDependenciesSummaryUpdated",
                                        plural: !1,
                                        selections: [
                                            u,
                                            ev,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Issue",
                                                kind: "LinkedField",
                                                name: "parent",
                                                plural: !1,
                                                selections: [
                                                    u,
                                                    p,
                                                    es,
                                                    F,
                                                    I,
                                                    ed,
                                                    j,
                                                    ei,
                                                    eo,
                                                ],
                                                storageKey: null,
                                            },
                                            ex,
                                            eR,
                                            eN,
                                            Z,
                                            j,
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "first",
                                                        value: 1,
                                                    },
                                                    eL,
                                                ],
                                                concreteType: "IssueConnection",
                                                kind: "LinkedField",
                                                name: "blockedBy",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: "Issue",
                                                        kind: "LinkedField",
                                                        name: "nodes",
                                                        plural: !0,
                                                        selections: [
                                                            es,
                                                            I,
                                                            F,
                                                            et,
                                                            u,
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "blockedBy(first:1,ranked:true)",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "933ee45cec690393aae04ee95e74147b",
                        metadata: {},
                        name: "IssueViewerSubscriptionMetadataSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            or.hash = "e789e973774870b1425738048bf55196";
            let ou = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "connections",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "issueId",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "skip",
                    },
                    a = [
                        {
                            kind: "Variable",
                            name: "id",
                            variableName: "issueId",
                        },
                    ],
                    s = [
                        { kind: "Literal", name: "first", value: 10 },
                        {
                            kind: "Variable",
                            name: "skip",
                            variableName: "skip",
                        },
                        {
                            kind: "Literal",
                            name: "visibleEventsOnly",
                            value: !0,
                        },
                    ],
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    r = {
                        kind: "ClientExtension",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__id",
                                storageKey: null,
                            },
                        ],
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    d = { kind: "TypeDiscriminator", abstractKey: "__isActor" },
                    c = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isCopilot",
                        storageKey: null,
                    },
                    p = {
                        kind: "InlineFragment",
                        selections: [y],
                        type: "Bot",
                        abstractKey: null,
                    },
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    F = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [t, d, c, m, g, p, k],
                        storageKey: null,
                    },
                    b = [u, o, F],
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    f = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isPrivate",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    v = [t, m, k],
                    L = [m],
                    T = {
                        kind: "InlineFragment",
                        selections: [k],
                        type: "Node",
                        abstractKey: "__isNode",
                    },
                    C = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "ReactionGroup",
                                kind: "LinkedField",
                                name: "reactionGroups",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "content",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "viewerHasReacted",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: [
                                            {
                                                kind: "Literal",
                                                name: "first",
                                                value: 5,
                                            },
                                        ],
                                        concreteType: "ReactorConnection",
                                        kind: "LinkedField",
                                        name: "reactors",
                                        plural: !1,
                                        selections: [
                                            i,
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "nodes",
                                                plural: !0,
                                                selections: [
                                                    t,
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: L,
                                                        type: "User",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: [m, y],
                                                        type: "Bot",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: L,
                                                        type: "Organization",
                                                        abstractKey: null,
                                                    },
                                                    {
                                                        kind: "InlineFragment",
                                                        selections: L,
                                                        type: "Mannequin",
                                                        abstractKey: null,
                                                    },
                                                    T,
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: "reactors(first:5)",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Reactable",
                        abstractKey: "__isReactable",
                    },
                    x = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    R = {
                        alias: "issueTitleHTML",
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    N = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: v,
                        storageKey: null,
                    },
                    j = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [k, f, K, N],
                        storageKey: null,
                    },
                    _ = {
                        kind: "InlineFragment",
                        selections: [k, R, h, I, x, j],
                        type: "Issue",
                        abstractKey: null,
                    },
                    w = {
                        alias: "pullTitleHTML",
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    E = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    A = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    P = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInMergeQueue",
                        storageKey: null,
                    },
                    B = {
                        kind: "InlineFragment",
                        selections: [k, w, h, I, E, A, P, j],
                        type: "PullRequest",
                        abstractKey: null,
                    },
                    D = {
                        kind: "InlineFragment",
                        selections: [_, B],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    M = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    V = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [f, N, k],
                        storageKey: null,
                    },
                    U = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "abbreviatedOid",
                        storageKey: null,
                    },
                    O = [o, u, F],
                    q = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    H = [
                        o,
                        u,
                        F,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Label",
                            kind: "LinkedField",
                            name: "label",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameHTML",
                                    storageKey: null,
                                },
                                f,
                                q,
                                k,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "description",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    $ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "resourcePath",
                        storageKey: null,
                    },
                    z = [$],
                    W = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "assignee",
                        plural: !1,
                        selections: [
                            t,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    m,
                                    {
                                        kind: "InlineFragment",
                                        selections: z,
                                        type: "User",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: z,
                                        type: "Mannequin",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: z,
                                        type: "Organization",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [$, y],
                                        type: "Bot",
                                        abstractKey: null,
                                    },
                                ],
                                type: "Actor",
                                abstractKey: "__isActor",
                            },
                            T,
                        ],
                        storageKey: null,
                    },
                    Q = [
                        o,
                        u,
                        F,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "milestoneTitle",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [h, k],
                            storageKey: null,
                        },
                    ],
                    G = [
                        o,
                        F,
                        u,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "subject",
                            plural: !1,
                            selections: [
                                t,
                                {
                                    kind: "InlineFragment",
                                    selections: [M, h, I, E, A, P, V],
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                                T,
                            ],
                            storageKey: null,
                        },
                    ],
                    Y = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [R, h, x, j],
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [w, h, E, A, P, j],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    X = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isCanonicalOfClosedDuplicate",
                        storageKey: null,
                    },
                    J = [D],
                    Z = {
                        alias: null,
                        args: null,
                        concreteType: "ProjectV2",
                        kind: "LinkedField",
                        name: "project",
                        plural: !1,
                        selections: [M, h, k],
                        storageKey: null,
                    },
                    ee = {
                        kind: "InlineFragment",
                        selections: [
                            t,
                            {
                                kind: "InlineFragment",
                                selections: [R, h, I, x, j],
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [w, h, I, E, A, P, j],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    el = [o, k, ee],
                    en = [
                        o,
                        F,
                        u,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "subIssue",
                            plural: !1,
                            selections: el,
                            storageKey: null,
                        },
                    ],
                    ea = [
                        o,
                        F,
                        u,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "parent",
                            plural: !1,
                            selections: el,
                            storageKey: null,
                        },
                    ],
                    es = [k, ee],
                    ei = [
                        o,
                        F,
                        u,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "blockingIssue",
                            plural: !1,
                            selections: es,
                            storageKey: null,
                        },
                    ],
                    et = [
                        o,
                        F,
                        u,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "blockedIssue",
                            plural: !1,
                            selections: es,
                            storageKey: null,
                        },
                    ],
                    er = [f, q, k],
                    eu = {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "issueType",
                        plural: !1,
                        selections: er,
                        storageKey: null,
                    },
                    eo = [o, F, u, eu];
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueViewerSubscriptionTimelineSubscription",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "IssueUpdatedPayload",
                                kind: "LinkedField",
                                name: "issueUpdated",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueTimelineUpdated",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: s,
                                                concreteType:
                                                    "IssueTimelineItemsConnection",
                                                kind: "LinkedField",
                                                name: "timelineItems",
                                                plural: !1,
                                                selections: [
                                                    i,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueTimelineItemsEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    t,
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "SubscribedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "UnsubscribedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "MentionedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "IssueComment_issueComment",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "ReactionViewerRelayGroups",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "ClosedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "ReopenedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "LockedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "UnlockedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "PinnedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "UnpinnedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "LabeledEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "RenamedTitleEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "UnlabeledEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "UnassignedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "AssignedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "CommentDeletedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "UserBlockedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "MilestonedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "DemilestonedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "CrossReferencedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "ReferencedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "ConnectedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "TransferredEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "DisconnectedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "MarkedAsDuplicateEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "UnmarkedAsDuplicateEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "ConvertedToDiscussionEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "AddedToProjectV2Event",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "RemovedFromProjectV2Event",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "ProjectV2ItemStatusChangedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "ConvertedFromDraftEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "SubIssueAddedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "SubIssueRemovedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "ParentIssueAddedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "ParentIssueRemovedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "BlockedByAddedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "BlockedByRemovedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "BlockingAddedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "BlockingRemovedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "IssueTypeAddedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "IssueTypeRemovedEvent",
                                                                    },
                                                                    {
                                                                        args: null,
                                                                        kind: "FragmentSpread",
                                                                        name: "IssueTypeChangedEvent",
                                                                    },
                                                                    r,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "EventSubscription",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [l, e, n],
                        kind: "Operation",
                        name: "IssueViewerSubscriptionTimelineSubscription",
                        selections: [
                            {
                                alias: null,
                                args: a,
                                concreteType: "IssueUpdatedPayload",
                                kind: "LinkedField",
                                name: "issueUpdated",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Issue",
                                        kind: "LinkedField",
                                        name: "issueTimelineUpdated",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: s,
                                                concreteType:
                                                    "IssueTimelineItemsConnection",
                                                kind: "LinkedField",
                                                name: "timelineItems",
                                                plural: !1,
                                                selections: [
                                                    i,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueTimelineItemsEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    t,
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            b,
                                                                        type: "SubscribedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            b,
                                                                        type: "UnsubscribedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            b,
                                                                        type: "MentionedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                k,
                                                                                o,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "body",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: [
                                                                                        {
                                                                                            kind: "Literal",
                                                                                            name: "unfurlReferences",
                                                                                            value: !0,
                                                                                        },
                                                                                    ],
                                                                                    kind: "ScalarField",
                                                                                    name: "bodyHTML",
                                                                                    storageKey:
                                                                                        "bodyHTML(unfurlReferences:true)",
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "bodyVersion",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUpdate",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                h,
                                                                                u,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "authorAssociation",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanDelete",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanMinimize",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanReport",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanReportToMaintainer",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanBlockFromOrg",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUnblockFromOrg",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: "isHidden",
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "isMinimized",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "minimizedReason",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "showSpammyBadge",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "createdViaEmail",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerDidAuthor",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Sponsorship",
                                                                                    kind: "LinkedField",
                                                                                    name: "authorToRepoOwnerSponsorship",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            u,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isActive",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            k,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "author",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            t,
                                                                                            k,
                                                                                            m,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "avatarUrl",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            k,
                                                                                            f,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    null,
                                                                                                kind: "LinkedField",
                                                                                                name: "owner",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        t,
                                                                                                        k,
                                                                                                        m,
                                                                                                        h,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            K,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "slashCommandsEnabled",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            S,
                                                                                            o,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Issue",
                                                                                    kind: "LinkedField",
                                                                                    name: "issue",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            I,
                                                                                            k,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "locked",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            o,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    null,
                                                                                                kind: "LinkedField",
                                                                                                name: "author",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    v,
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "viewerCanReadUserContentEdits",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "lastEditedAt",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "UserContentEdit",
                                                                                                kind: "LinkedField",
                                                                                                name: "lastUserContentEdit",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                null,
                                                                                                            kind: "LinkedField",
                                                                                                            name: "editor",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    t,
                                                                                                                    h,
                                                                                                                    m,
                                                                                                                    k,
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        k,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "Comment",
                                                                                    abstractKey:
                                                                                        "__isComment",
                                                                                },
                                                                                {
                                                                                    kind: "ClientExtension",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingMinimizeReason",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingBlock",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingUnblock",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                },
                                                                                C,
                                                                            ],
                                                                        type: "IssueComment",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    C,
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                u,
                                                                                x,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "duplicateOf",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            t,
                                                                                            D,
                                                                                            T,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "closingProjectItemStatus",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "closer",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            t,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        h,
                                                                                                        M,
                                                                                                    ],
                                                                                                type: "ProjectV2",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        h,
                                                                                                        I,
                                                                                                        V,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        h,
                                                                                                        U,
                                                                                                        V,
                                                                                                    ],
                                                                                                type: "Commit",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            T,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                F,
                                                                            ],
                                                                        type: "ClosedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            O,
                                                                        type: "ReopenedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                u,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "lockReason",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                F,
                                                                            ],
                                                                        type: "LockedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            O,
                                                                        type: "UnlockedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            O,
                                                                        type: "PinnedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            O,
                                                                        type: "UnpinnedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            H,
                                                                        type: "LabeledEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                u,
                                                                                F,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "currentTitle",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "previousTitle",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "RenamedTitleEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            H,
                                                                        type: "UnlabeledEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                u,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "actor",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            t,
                                                                                            m,
                                                                                            d,
                                                                                            c,
                                                                                            g,
                                                                                            p,
                                                                                            k,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                W,
                                                                            ],
                                                                        type: "UnassignedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                u,
                                                                                F,
                                                                                W,
                                                                            ],
                                                                        type: "AssignedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                u,
                                                                                F,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "deletedCommentAuthor",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        v,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "CommentDeletedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                u,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "blockDuration",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                F,
                                                                                {
                                                                                    alias: "blockedUser",
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "User",
                                                                                    kind: "LinkedField",
                                                                                    name: "subject",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            m,
                                                                                            k,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "UserBlockedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            Q,
                                                                        type: "MilestonedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            Q,
                                                                        type: "DemilestonedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "referencedAt",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "willCloseTarget",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                o,
                                                                                {
                                                                                    alias: "innerSource",
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "source",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            t,
                                                                                            {
                                                                                                kind: "TypeDiscriminator",
                                                                                                abstractKey:
                                                                                                    "__isReferencedSubject",
                                                                                            },
                                                                                            _,
                                                                                            B,
                                                                                            T,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                F,
                                                                            ],
                                                                        type: "CrossReferencedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                k,
                                                                                o,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "willCloseSubject",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "subject",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            t,
                                                                                            T,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                F,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Commit",
                                                                                    kind: "LinkedField",
                                                                                    name: "commit",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "message",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "messageHeadlineHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "messageBodyHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            h,
                                                                                            U,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "Repository",
                                                                                                kind: "LinkedField",
                                                                                                name: "repository",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        f,
                                                                                                        N,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "defaultBranch",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        k,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            k,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                u,
                                                                            ],
                                                                        type: "ReferencedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            G,
                                                                        type: "ConnectedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                F,
                                                                                u,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "fromRepository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            S,
                                                                                            h,
                                                                                            k,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "TransferredEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            G,
                                                                        type: "DisconnectedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                u,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "canonical",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            t,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        k,
                                                                                                        I,
                                                                                                        Y,
                                                                                                    ],
                                                                                                type: "Issue",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        I,
                                                                                                        k,
                                                                                                        Y,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            T,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                X,
                                                                                o,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUndo",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                k,
                                                                                {
                                                                                    kind: "ClientExtension",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingUndo",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                },
                                                                            ],
                                                                        type: "MarkedAsDuplicateEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                u,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "canonical",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            t,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    J,
                                                                                                type: "Issue",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    J,
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            T,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                X,
                                                                                o,
                                                                            ],
                                                                        type: "UnmarkedAsDuplicateEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                F,
                                                                                u,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Discussion",
                                                                                    kind: "LinkedField",
                                                                                    name: "discussion",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            h,
                                                                                            I,
                                                                                            k,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "ConvertedToDiscussionEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                u,
                                                                                F,
                                                                                Z,
                                                                            ],
                                                                        type: "AddedToProjectV2Event",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                F,
                                                                                Z,
                                                                            ],
                                                                        type: "RemovedFromProjectV2Event",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                F,
                                                                                Z,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "previousStatus",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "status",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "ProjectV2ItemStatusChangedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                u,
                                                                                F,
                                                                                o,
                                                                            ],
                                                                        type: "ConvertedFromDraftEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            en,
                                                                        type: "SubIssueAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            en,
                                                                        type: "SubIssueRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ea,
                                                                        type: "ParentIssueAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ea,
                                                                        type: "ParentIssueRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ei,
                                                                        type: "BlockedByAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ei,
                                                                        type: "BlockedByRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            et,
                                                                        type: "BlockingAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            et,
                                                                        type: "BlockingRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            eo,
                                                                        type: "IssueTypeAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            eo,
                                                                        type: "IssueTypeRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                o,
                                                                                F,
                                                                                u,
                                                                                eu,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "IssueType",
                                                                                    kind: "LinkedField",
                                                                                    name: "prevIssueType",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        er,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "IssueTypeChangedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    T,
                                                                    r,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        filters: null,
                                                        handle: "appendEdge",
                                                        key: "",
                                                        kind: "LinkedHandle",
                                                        name: "edges",
                                                        handleArgs: [
                                                            {
                                                                kind: "Variable",
                                                                name: "connections",
                                                                variableName:
                                                                    "connections",
                                                            },
                                                        ],
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            k,
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "0b1665d8ca4dab83f06452a681fab3e0",
                        metadata: {},
                        name: "IssueViewerSubscriptionTimelineSubscription",
                        operationKind: "subscription",
                        text: null,
                    },
                };
            })();
            ou.hash = "2b937991c8f4388729640bfca74f33ef";
            let oo = ({ nextPage: e, canonicalUrl: l }) =>
                (0, F.jsx)("div", {
                    className: uZ.crawlerPagination,
                    "data-testid": ab.Y.crawlerPagination,
                    "aria-hidden": !0,
                    children: (0, F.jsx)("a", {
                        rel: "next noreferrer",
                        href: `${l}?timeline_page=${e}`,
                        target: "_blank",
                        children: "Next",
                    }),
                });
            try {
                oo.displayName || (oo.displayName = "CrawlerPagination");
            } catch {}
            let od = {
                    Flash: "TimelineTransferringFlash-module__Flash--W75Lj",
                },
                oc = () =>
                    (0, F.jsx)(e$.A, {
                        "aria-live": "polite",
                        variant: "warning",
                        className: od.Flash,
                        children: tq.issueTimelineInTransfer,
                    });
            try {
                oc.displayName ||
                    (oc.displayName = "TimelineTransferringFlash");
            } catch {}
            let om = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "after",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "before",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "focusNeighborCount",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "focusText",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    t = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "last",
                    },
                    r = [{ kind: "Variable", name: "id", variableName: "id" }],
                    u = {
                        kind: "Variable",
                        name: "after",
                        variableName: "after",
                    },
                    o = {
                        kind: "Variable",
                        name: "before",
                        variableName: "before",
                    },
                    d = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    c = {
                        kind: "Variable",
                        name: "focusNeighborCount",
                        variableName: "focusNeighborCount",
                    },
                    m = {
                        kind: "Variable",
                        name: "focusText",
                        variableName: "focusText",
                    },
                    g = {
                        kind: "Variable",
                        name: "last",
                        variableName: "last",
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    k = [
                        u,
                        o,
                        d,
                        c,
                        m,
                        g,
                        {
                            kind: "Literal",
                            name: "visibleEventsOnly",
                            value: !0,
                        },
                    ],
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    f = [y, h, p],
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isPrivate",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    T = [h],
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isCopilot",
                        storageKey: null,
                    },
                    x = [p],
                    R = {
                        kind: "InlineFragment",
                        selections: x,
                        type: "Node",
                        abstractKey: "__isNode",
                    },
                    N = [y, R],
                    j = {
                        alias: "issueTitleHTML",
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    w = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: f,
                        storageKey: null,
                    },
                    E = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [p, I, v, w],
                        storageKey: null,
                    },
                    A = {
                        kind: "InlineFragment",
                        selections: [p, j, S, K, _, E],
                        type: "Issue",
                        abstractKey: null,
                    },
                    P = {
                        alias: "pullTitleHTML",
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    B = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    D = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    M = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInMergeQueue",
                        storageKey: null,
                    },
                    V = {
                        kind: "InlineFragment",
                        selections: [p, P, S, K, B, D, M, E],
                        type: "PullRequest",
                        abstractKey: null,
                    },
                    U = { kind: "TypeDiscriminator", abstractKey: "__isActor" },
                    O = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    q = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    H = {
                        kind: "InlineFragment",
                        selections: [C],
                        type: "Bot",
                        abstractKey: null,
                    },
                    $ = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [y, U, O, h, q, H, p],
                        storageKey: null,
                    },
                    z = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    W = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Label",
                            kind: "LinkedField",
                            name: "label",
                            plural: !1,
                            selections: [
                                p,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameHTML",
                                    storageKey: null,
                                },
                                I,
                                z,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "description",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        F,
                        b,
                        $,
                    ],
                    Q = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "resourcePath",
                        storageKey: null,
                    },
                    G = [h, Q],
                    Y = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "assignee",
                        plural: !1,
                        selections: [
                            y,
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "User",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "Bot",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "Mannequin",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "Organization",
                                abstractKey: null,
                            },
                            R,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    h,
                                    {
                                        kind: "InlineFragment",
                                        selections: G,
                                        type: "User",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: G,
                                        type: "Mannequin",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: G,
                                        type: "Organization",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [h, Q, C],
                                        type: "Bot",
                                        abstractKey: null,
                                    },
                                ],
                                type: "Actor",
                                abstractKey: "__isActor",
                            },
                        ],
                        storageKey: null,
                    },
                    X = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [p, S],
                            storageKey: null,
                        },
                        F,
                        b,
                        $,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "milestoneTitle",
                            storageKey: null,
                        },
                    ],
                    J = [b, F, $],
                    Z = {
                        kind: "InlineFragment",
                        selections: [A, V],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    ee = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    el = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [I, w, p],
                        storageKey: null,
                    },
                    en = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "abbreviatedOid",
                        storageKey: null,
                    },
                    ea = [F, b, $],
                    es = {
                        kind: "InlineFragment",
                        selections: [
                            y,
                            {
                                kind: "InlineFragment",
                                selections: [j, S, K, _, E],
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [P, S, K, B, D, M, E],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    ei = [p, es],
                    et = [
                        F,
                        $,
                        b,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "blockingIssue",
                            plural: !1,
                            selections: ei,
                            storageKey: null,
                        },
                    ],
                    er = [
                        F,
                        $,
                        b,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "blockedIssue",
                            plural: !1,
                            selections: ei,
                            storageKey: null,
                        },
                    ],
                    eu = [F, p, es],
                    eo = [
                        F,
                        $,
                        b,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "subIssue",
                            plural: !1,
                            selections: eu,
                            storageKey: null,
                        },
                    ],
                    ed = [
                        F,
                        $,
                        b,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "parent",
                            plural: !1,
                            selections: eu,
                            storageKey: null,
                        },
                    ],
                    ec = [
                        F,
                        $,
                        b,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "subject",
                            plural: !1,
                            selections: [
                                y,
                                {
                                    kind: "InlineFragment",
                                    selections: [ee, S, K, B, D, M, el],
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                                R,
                            ],
                            storageKey: null,
                        },
                    ],
                    em = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [j, S, _, E],
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [P, S, B, D, M, E],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    eg = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isCanonicalOfClosedDuplicate",
                        storageKey: null,
                    },
                    ey = [Z],
                    ep = {
                        alias: null,
                        args: null,
                        concreteType: "ProjectV2",
                        kind: "LinkedField",
                        name: "project",
                        plural: !1,
                        selections: [ee, S, p],
                        storageKey: null,
                    },
                    ek = [I, z, p],
                    eF = {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "issueType",
                        plural: !1,
                        selections: ek,
                        storageKey: null,
                    },
                    eb = [F, $, b, eF];
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n, a, s, i, t],
                        kind: "Fragment",
                        metadata: null,
                        name: "useTimelineHighlightQuery",
                        selections: [
                            {
                                alias: null,
                                args: r,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                args: [u, o, d, c, m, g],
                                                kind: "FragmentSpread",
                                                name: "useTimelineHighlightItems",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [i, s, e, l, n, t, a],
                        kind: "Operation",
                        name: "useTimelineHighlightQuery",
                        selections: [
                            {
                                alias: null,
                                args: r,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    y,
                                    p,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: k,
                                                concreteType:
                                                    "IssueTimelineItemsConnection",
                                                kind: "LinkedField",
                                                name: "timelineItems",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "beforeFocusCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "afterFocusCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueTimelineItemsEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    y,
                                                                    {
                                                                        kind: "TypeDiscriminator",
                                                                        abstractKey:
                                                                            "__isIssueTimelineItems",
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "actor",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        f,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "TimelineEvent",
                                                                        abstractKey:
                                                                            "__isTimelineEvent",
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerDidAuthor",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Issue",
                                                                                    kind: "LinkedField",
                                                                                    name: "issue",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    null,
                                                                                                kind: "LinkedField",
                                                                                                name: "author",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    f,
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            p,
                                                                                            K,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "locked",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            F,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "author",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            h,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "avatarUrl",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "profileUrl",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                p,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "body",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: [
                                                                                        {
                                                                                            kind: "Literal",
                                                                                            name: "unfurlReferences",
                                                                                            value: !0,
                                                                                        },
                                                                                    ],
                                                                                    kind: "ScalarField",
                                                                                    name: "bodyHTML",
                                                                                    storageKey:
                                                                                        "bodyHTML(unfurlReferences:true)",
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "bodyVersion",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUpdate",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                S,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "authorAssociation",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanDelete",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanMinimize",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanReport",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanReportToMaintainer",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanBlockFromOrg",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUnblockFromOrg",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: "isHidden",
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "isMinimized",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "minimizedReason",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "showSpammyBadge",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "createdViaEmail",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Sponsorship",
                                                                                    kind: "LinkedField",
                                                                                    name: "authorToRepoOwnerSponsorship",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            b,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isActive",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            p,
                                                                                            I,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    null,
                                                                                                kind: "LinkedField",
                                                                                                name: "owner",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        y,
                                                                                                        p,
                                                                                                        h,
                                                                                                        S,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            v,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "slashCommandsEnabled",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            L,
                                                                                            F,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "viewerCanReadUserContentEdits",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "lastEditedAt",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "UserContentEdit",
                                                                                                kind: "LinkedField",
                                                                                                name: "lastUserContentEdit",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                null,
                                                                                                            kind: "LinkedField",
                                                                                                            name: "editor",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    y,
                                                                                                                    S,
                                                                                                                    h,
                                                                                                                    p,
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        p,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "Comment",
                                                                                    abstractKey:
                                                                                        "__isComment",
                                                                                },
                                                                                {
                                                                                    kind: "ClientExtension",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingMinimizeReason",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingBlock",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingUnblock",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "ReactionGroup",
                                                                                                kind: "LinkedField",
                                                                                                name: "reactionGroups",
                                                                                                plural: !0,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "content",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "viewerHasReacted",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: [
                                                                                                                {
                                                                                                                    kind: "Literal",
                                                                                                                    name: "first",
                                                                                                                    value: 5,
                                                                                                                },
                                                                                                            ],
                                                                                                            concreteType:
                                                                                                                "ReactorConnection",
                                                                                                            kind: "LinkedField",
                                                                                                            name: "reactors",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        kind: "ScalarField",
                                                                                                                        name: "totalCount",
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        concreteType:
                                                                                                                            null,
                                                                                                                        kind: "LinkedField",
                                                                                                                        name: "nodes",
                                                                                                                        plural: !0,
                                                                                                                        selections:
                                                                                                                            [
                                                                                                                                y,
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        T,
                                                                                                                                    type: "User",
                                                                                                                                    abstractKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        [
                                                                                                                                            h,
                                                                                                                                            C,
                                                                                                                                        ],
                                                                                                                                    type: "Bot",
                                                                                                                                    abstractKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        T,
                                                                                                                                    type: "Organization",
                                                                                                                                    abstractKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        T,
                                                                                                                                    type: "Mannequin",
                                                                                                                                    abstractKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                R,
                                                                                                                            ],
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                "reactors(first:5)",
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "Reactable",
                                                                                    abstractKey:
                                                                                        "__isReactable",
                                                                                },
                                                                            ],
                                                                        type: "IssueComment",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "source",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        N,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "willCloseTarget",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "referencedAt",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                F,
                                                                                {
                                                                                    alias: "innerSource",
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "source",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            {
                                                                                                kind: "TypeDiscriminator",
                                                                                                abstractKey:
                                                                                                    "__isReferencedSubject",
                                                                                            },
                                                                                            A,
                                                                                            V,
                                                                                            R,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                $,
                                                                            ],
                                                                        type: "CrossReferencedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            W,
                                                                        type: "LabeledEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            W,
                                                                        type: "UnlabeledEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                Y,
                                                                                F,
                                                                                b,
                                                                                $,
                                                                            ],
                                                                        type: "AssignedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                Y,
                                                                                F,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "actor",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            h,
                                                                                            U,
                                                                                            O,
                                                                                            q,
                                                                                            H,
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "UnassignedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            X,
                                                                        type: "MilestonedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            X,
                                                                        type: "DemilestonedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            J,
                                                                        type: "SubscribedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            J,
                                                                        type: "UnsubscribedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            J,
                                                                        type: "MentionedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                _,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "duplicateOf",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            Z,
                                                                                            R,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "closingProjectItemStatus",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "closer",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        S,
                                                                                                        ee,
                                                                                                    ],
                                                                                                type: "ProjectV2",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        S,
                                                                                                        K,
                                                                                                        el,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        S,
                                                                                                        en,
                                                                                                        el,
                                                                                                    ],
                                                                                                type: "Commit",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            R,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                $,
                                                                            ],
                                                                        type: "ClosedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ea,
                                                                        type: "ReopenedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "lockReason",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                $,
                                                                            ],
                                                                        type: "LockedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ea,
                                                                        type: "UnlockedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ea,
                                                                        type: "PinnedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ea,
                                                                        type: "UnpinnedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                $,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "currentTitle",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "previousTitle",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "RenamedTitleEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            et,
                                                                        type: "BlockedByAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            et,
                                                                        type: "BlockedByRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            er,
                                                                        type: "BlockingAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            er,
                                                                        type: "BlockingRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                $,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "deletedCommentAuthor",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        f,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "CommentDeletedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "blockDuration",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                $,
                                                                                {
                                                                                    alias: "blockedUser",
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "User",
                                                                                    kind: "LinkedField",
                                                                                    name: "subject",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            h,
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "UserBlockedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            eo,
                                                                        type: "SubIssueAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            eo,
                                                                        type: "SubIssueRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ed,
                                                                        type: "ParentIssueAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ed,
                                                                        type: "ParentIssueRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                p,
                                                                                F,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "willCloseSubject",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "subject",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        N,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                $,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Commit",
                                                                                    kind: "LinkedField",
                                                                                    name: "commit",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "message",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "messageHeadlineHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "messageBodyHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            S,
                                                                                            en,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "Repository",
                                                                                                kind: "LinkedField",
                                                                                                name: "repository",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        I,
                                                                                                        w,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "defaultBranch",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        p,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                b,
                                                                            ],
                                                                        type: "ReferencedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ec,
                                                                        type: "ConnectedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                $,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "fromRepository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            L,
                                                                                            S,
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "TransferredEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ec,
                                                                        type: "DisconnectedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                $,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "canonical",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        p,
                                                                                                        K,
                                                                                                        em,
                                                                                                    ],
                                                                                                type: "Issue",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        K,
                                                                                                        p,
                                                                                                        em,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            R,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                eg,
                                                                                F,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUndo",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                p,
                                                                                {
                                                                                    kind: "ClientExtension",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingUndo",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                },
                                                                            ],
                                                                        type: "MarkedAsDuplicateEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                $,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "canonical",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    ey,
                                                                                                type: "Issue",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    ey,
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            R,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                eg,
                                                                                F,
                                                                            ],
                                                                        type: "UnmarkedAsDuplicateEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                $,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Discussion",
                                                                                    kind: "LinkedField",
                                                                                    name: "discussion",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            S,
                                                                                            K,
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "ConvertedToDiscussionEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                $,
                                                                                ep,
                                                                            ],
                                                                        type: "AddedToProjectV2Event",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                b,
                                                                                $,
                                                                                ep,
                                                                            ],
                                                                        type: "RemovedFromProjectV2Event",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                b,
                                                                                $,
                                                                                ep,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "previousStatus",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "status",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "ProjectV2ItemStatusChangedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                b,
                                                                                $,
                                                                                F,
                                                                            ],
                                                                        type: "ConvertedFromDraftEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            eb,
                                                                        type: "IssueTypeAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            eb,
                                                                        type: "IssueTypeRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                $,
                                                                                b,
                                                                                eF,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "IssueType",
                                                                                    kind: "LinkedField",
                                                                                    name: "prevIssueType",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        ek,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "IssueTypeChangedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "ClientExtension",
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "__id",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                    },
                                                                    R,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "endCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasNextPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasPreviousPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "startCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: k,
                                                filters: [],
                                                handle: "connection",
                                                key: "timelineBackwards_timelineItems",
                                                kind: "LinkedHandle",
                                                name: "timelineItems",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "beb3d78e57752ea85849459b21a828ec",
                        metadata: {},
                        name: "useTimelineHighlightQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            om.hash = "f635f3b8b9112b3d9f45c26b1e6aeca7";
            let og = (function () {
                var e = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "after",
                    },
                    l = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "before",
                    },
                    n = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "first",
                    },
                    a = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "focusNeighborCount",
                    },
                    s = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "focusText",
                    },
                    i = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "id",
                    },
                    t = {
                        defaultValue: null,
                        kind: "LocalArgument",
                        name: "last",
                    },
                    r = [{ kind: "Variable", name: "id", variableName: "id" }],
                    u = {
                        kind: "Variable",
                        name: "after",
                        variableName: "after",
                    },
                    o = {
                        kind: "Variable",
                        name: "before",
                        variableName: "before",
                    },
                    d = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    c = {
                        kind: "Variable",
                        name: "focusNeighborCount",
                        variableName: "focusNeighborCount",
                    },
                    m = {
                        kind: "Variable",
                        name: "focusText",
                        variableName: "focusText",
                    },
                    g = {
                        kind: "Variable",
                        name: "last",
                        variableName: "last",
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    p = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    k = [
                        u,
                        o,
                        d,
                        c,
                        m,
                        g,
                        {
                            kind: "Literal",
                            name: "visibleEventsOnly",
                            value: !0,
                        },
                    ],
                    F = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    b = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    h = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    f = [y, h, p],
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    v = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isPrivate",
                        storageKey: null,
                    },
                    L = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    T = [h],
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isCopilot",
                        storageKey: null,
                    },
                    x = [p],
                    R = {
                        kind: "InlineFragment",
                        selections: x,
                        type: "Node",
                        abstractKey: "__isNode",
                    },
                    N = [y, R],
                    j = {
                        alias: "issueTitleHTML",
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    w = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: f,
                        storageKey: null,
                    },
                    E = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [p, I, v, w],
                        storageKey: null,
                    },
                    A = {
                        kind: "InlineFragment",
                        selections: [p, j, S, K, _, E],
                        type: "Issue",
                        abstractKey: null,
                    },
                    P = {
                        alias: "pullTitleHTML",
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    B = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    D = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    M = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInMergeQueue",
                        storageKey: null,
                    },
                    V = {
                        kind: "InlineFragment",
                        selections: [p, P, S, K, B, D, M, E],
                        type: "PullRequest",
                        abstractKey: null,
                    },
                    U = { kind: "TypeDiscriminator", abstractKey: "__isActor" },
                    O = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    q = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    H = {
                        kind: "InlineFragment",
                        selections: [C],
                        type: "Bot",
                        abstractKey: null,
                    },
                    $ = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [y, U, O, h, q, H, p],
                        storageKey: null,
                    },
                    z = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    W = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Label",
                            kind: "LinkedField",
                            name: "label",
                            plural: !1,
                            selections: [
                                p,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameHTML",
                                    storageKey: null,
                                },
                                I,
                                z,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "description",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        F,
                        b,
                        $,
                    ],
                    Q = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "resourcePath",
                        storageKey: null,
                    },
                    G = [h, Q],
                    Y = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "assignee",
                        plural: !1,
                        selections: [
                            y,
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "User",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "Bot",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "Mannequin",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: x,
                                type: "Organization",
                                abstractKey: null,
                            },
                            R,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    h,
                                    {
                                        kind: "InlineFragment",
                                        selections: G,
                                        type: "User",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: G,
                                        type: "Mannequin",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: G,
                                        type: "Organization",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [h, Q, C],
                                        type: "Bot",
                                        abstractKey: null,
                                    },
                                ],
                                type: "Actor",
                                abstractKey: "__isActor",
                            },
                        ],
                        storageKey: null,
                    },
                    X = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [p, S],
                            storageKey: null,
                        },
                        F,
                        b,
                        $,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "milestoneTitle",
                            storageKey: null,
                        },
                    ],
                    J = [b, F, $],
                    Z = {
                        kind: "InlineFragment",
                        selections: [A, V],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    ee = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    el = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [I, w, p],
                        storageKey: null,
                    },
                    en = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "abbreviatedOid",
                        storageKey: null,
                    },
                    ea = [F, b, $],
                    es = {
                        kind: "InlineFragment",
                        selections: [
                            y,
                            {
                                kind: "InlineFragment",
                                selections: [j, S, K, _, E],
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [P, S, K, B, D, M, E],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    ei = [p, es],
                    et = [
                        F,
                        $,
                        b,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "blockingIssue",
                            plural: !1,
                            selections: ei,
                            storageKey: null,
                        },
                    ],
                    er = [
                        F,
                        $,
                        b,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "blockedIssue",
                            plural: !1,
                            selections: ei,
                            storageKey: null,
                        },
                    ],
                    eu = [F, p, es],
                    eo = [
                        F,
                        $,
                        b,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "subIssue",
                            plural: !1,
                            selections: eu,
                            storageKey: null,
                        },
                    ],
                    ed = [
                        F,
                        $,
                        b,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "parent",
                            plural: !1,
                            selections: eu,
                            storageKey: null,
                        },
                    ],
                    ec = [
                        F,
                        $,
                        b,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "subject",
                            plural: !1,
                            selections: [
                                y,
                                {
                                    kind: "InlineFragment",
                                    selections: [ee, S, K, B, D, M, el],
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                                R,
                            ],
                            storageKey: null,
                        },
                    ],
                    em = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [j, S, _, E],
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [P, S, B, D, M, E],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    eg = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isCanonicalOfClosedDuplicate",
                        storageKey: null,
                    },
                    ey = [Z],
                    ep = {
                        alias: null,
                        args: null,
                        concreteType: "ProjectV2",
                        kind: "LinkedField",
                        name: "project",
                        plural: !1,
                        selections: [ee, S, p],
                        storageKey: null,
                    },
                    ek = [I, z, p],
                    eF = {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "issueType",
                        plural: !1,
                        selections: ek,
                        storageKey: null,
                    },
                    eb = [F, $, b, eF];
                return {
                    fragment: {
                        argumentDefinitions: [e, l, n, a, s, i, t],
                        kind: "Fragment",
                        metadata: null,
                        name: "NewTimelinePaginationHighlightQuery",
                        selections: [
                            {
                                alias: null,
                                args: r,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [u, o, d, c, m, g],
                                        kind: "FragmentSpread",
                                        name: "useTimelineHighlightItems",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: [e, l, n, a, s, t, i],
                        kind: "Operation",
                        name: "NewTimelinePaginationHighlightQuery",
                        selections: [
                            {
                                alias: null,
                                args: r,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    y,
                                    p,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: k,
                                                concreteType:
                                                    "IssueTimelineItemsConnection",
                                                kind: "LinkedField",
                                                name: "timelineItems",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "beforeFocusCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "afterFocusCount",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueTimelineItemsEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    y,
                                                                    {
                                                                        kind: "TypeDiscriminator",
                                                                        abstractKey:
                                                                            "__isIssueTimelineItems",
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "actor",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        f,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "TimelineEvent",
                                                                        abstractKey:
                                                                            "__isTimelineEvent",
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerDidAuthor",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Issue",
                                                                                    kind: "LinkedField",
                                                                                    name: "issue",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    null,
                                                                                                kind: "LinkedField",
                                                                                                name: "author",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    f,
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            p,
                                                                                            K,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "locked",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            F,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "author",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            h,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "avatarUrl",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "profileUrl",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                p,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "body",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: [
                                                                                        {
                                                                                            kind: "Literal",
                                                                                            name: "unfurlReferences",
                                                                                            value: !0,
                                                                                        },
                                                                                    ],
                                                                                    kind: "ScalarField",
                                                                                    name: "bodyHTML",
                                                                                    storageKey:
                                                                                        "bodyHTML(unfurlReferences:true)",
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "bodyVersion",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUpdate",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                S,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "authorAssociation",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanDelete",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanMinimize",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanReport",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanReportToMaintainer",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanBlockFromOrg",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUnblockFromOrg",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: "isHidden",
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "isMinimized",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "minimizedReason",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "showSpammyBadge",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "createdViaEmail",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Sponsorship",
                                                                                    kind: "LinkedField",
                                                                                    name: "authorToRepoOwnerSponsorship",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            b,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isActive",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            p,
                                                                                            I,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    null,
                                                                                                kind: "LinkedField",
                                                                                                name: "owner",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        y,
                                                                                                        p,
                                                                                                        h,
                                                                                                        S,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            v,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "slashCommandsEnabled",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            L,
                                                                                            F,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "viewerCanReadUserContentEdits",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "lastEditedAt",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "UserContentEdit",
                                                                                                kind: "LinkedField",
                                                                                                name: "lastUserContentEdit",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                null,
                                                                                                            kind: "LinkedField",
                                                                                                            name: "editor",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    y,
                                                                                                                    S,
                                                                                                                    h,
                                                                                                                    p,
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        p,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "Comment",
                                                                                    abstractKey:
                                                                                        "__isComment",
                                                                                },
                                                                                {
                                                                                    kind: "ClientExtension",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingMinimizeReason",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingBlock",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingUnblock",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "ReactionGroup",
                                                                                                kind: "LinkedField",
                                                                                                name: "reactionGroups",
                                                                                                plural: !0,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "content",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "viewerHasReacted",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: [
                                                                                                                {
                                                                                                                    kind: "Literal",
                                                                                                                    name: "first",
                                                                                                                    value: 5,
                                                                                                                },
                                                                                                            ],
                                                                                                            concreteType:
                                                                                                                "ReactorConnection",
                                                                                                            kind: "LinkedField",
                                                                                                            name: "reactors",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        kind: "ScalarField",
                                                                                                                        name: "totalCount",
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        concreteType:
                                                                                                                            null,
                                                                                                                        kind: "LinkedField",
                                                                                                                        name: "nodes",
                                                                                                                        plural: !0,
                                                                                                                        selections:
                                                                                                                            [
                                                                                                                                y,
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        T,
                                                                                                                                    type: "User",
                                                                                                                                    abstractKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        [
                                                                                                                                            h,
                                                                                                                                            C,
                                                                                                                                        ],
                                                                                                                                    type: "Bot",
                                                                                                                                    abstractKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        T,
                                                                                                                                    type: "Organization",
                                                                                                                                    abstractKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        T,
                                                                                                                                    type: "Mannequin",
                                                                                                                                    abstractKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                R,
                                                                                                                            ],
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                "reactors(first:5)",
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "Reactable",
                                                                                    abstractKey:
                                                                                        "__isReactable",
                                                                                },
                                                                            ],
                                                                        type: "IssueComment",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "source",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        N,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "willCloseTarget",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "referencedAt",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                F,
                                                                                {
                                                                                    alias: "innerSource",
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "source",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            {
                                                                                                kind: "TypeDiscriminator",
                                                                                                abstractKey:
                                                                                                    "__isReferencedSubject",
                                                                                            },
                                                                                            A,
                                                                                            V,
                                                                                            R,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                $,
                                                                            ],
                                                                        type: "CrossReferencedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            W,
                                                                        type: "LabeledEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            W,
                                                                        type: "UnlabeledEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                Y,
                                                                                F,
                                                                                b,
                                                                                $,
                                                                            ],
                                                                        type: "AssignedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                Y,
                                                                                F,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "actor",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            h,
                                                                                            U,
                                                                                            O,
                                                                                            q,
                                                                                            H,
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "UnassignedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            X,
                                                                        type: "MilestonedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            X,
                                                                        type: "DemilestonedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            J,
                                                                        type: "SubscribedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            J,
                                                                        type: "UnsubscribedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            J,
                                                                        type: "MentionedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                _,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "duplicateOf",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            Z,
                                                                                            R,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "closingProjectItemStatus",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "closer",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        S,
                                                                                                        ee,
                                                                                                    ],
                                                                                                type: "ProjectV2",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        S,
                                                                                                        K,
                                                                                                        el,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        S,
                                                                                                        en,
                                                                                                        el,
                                                                                                    ],
                                                                                                type: "Commit",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            R,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                $,
                                                                            ],
                                                                        type: "ClosedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ea,
                                                                        type: "ReopenedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "lockReason",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                $,
                                                                            ],
                                                                        type: "LockedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ea,
                                                                        type: "UnlockedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ea,
                                                                        type: "PinnedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ea,
                                                                        type: "UnpinnedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                $,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "currentTitle",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "previousTitle",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "RenamedTitleEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            et,
                                                                        type: "BlockedByAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            et,
                                                                        type: "BlockedByRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            er,
                                                                        type: "BlockingAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            er,
                                                                        type: "BlockingRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                $,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "deletedCommentAuthor",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        f,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "CommentDeletedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "blockDuration",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                $,
                                                                                {
                                                                                    alias: "blockedUser",
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "User",
                                                                                    kind: "LinkedField",
                                                                                    name: "subject",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            h,
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "UserBlockedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            eo,
                                                                        type: "SubIssueAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            eo,
                                                                        type: "SubIssueRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ed,
                                                                        type: "ParentIssueAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ed,
                                                                        type: "ParentIssueRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                p,
                                                                                F,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "willCloseSubject",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "subject",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        N,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                $,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Commit",
                                                                                    kind: "LinkedField",
                                                                                    name: "commit",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "message",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "messageHeadlineHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "messageBodyHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            S,
                                                                                            en,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "Repository",
                                                                                                kind: "LinkedField",
                                                                                                name: "repository",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        I,
                                                                                                        w,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "defaultBranch",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        p,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                b,
                                                                            ],
                                                                        type: "ReferencedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ec,
                                                                        type: "ConnectedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                $,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "fromRepository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            L,
                                                                                            S,
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "TransferredEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ec,
                                                                        type: "DisconnectedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                $,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "canonical",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        p,
                                                                                                        K,
                                                                                                        em,
                                                                                                    ],
                                                                                                type: "Issue",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        K,
                                                                                                        p,
                                                                                                        em,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            R,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                eg,
                                                                                F,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUndo",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                p,
                                                                                {
                                                                                    kind: "ClientExtension",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingUndo",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                },
                                                                            ],
                                                                        type: "MarkedAsDuplicateEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                $,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "canonical",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    ey,
                                                                                                type: "Issue",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    ey,
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            R,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                eg,
                                                                                F,
                                                                            ],
                                                                        type: "UnmarkedAsDuplicateEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                $,
                                                                                b,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Discussion",
                                                                                    kind: "LinkedField",
                                                                                    name: "discussion",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            S,
                                                                                            K,
                                                                                            p,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "ConvertedToDiscussionEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                b,
                                                                                $,
                                                                                ep,
                                                                            ],
                                                                        type: "AddedToProjectV2Event",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                b,
                                                                                $,
                                                                                ep,
                                                                            ],
                                                                        type: "RemovedFromProjectV2Event",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                b,
                                                                                $,
                                                                                ep,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "previousStatus",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "status",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "ProjectV2ItemStatusChangedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                b,
                                                                                $,
                                                                                F,
                                                                            ],
                                                                        type: "ConvertedFromDraftEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            eb,
                                                                        type: "IssueTypeAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            eb,
                                                                        type: "IssueTypeRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                F,
                                                                                $,
                                                                                b,
                                                                                eF,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "IssueType",
                                                                                    kind: "LinkedField",
                                                                                    name: "prevIssueType",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        ek,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "IssueTypeChangedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "ClientExtension",
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "__id",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                    },
                                                                    R,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "endCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasNextPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasPreviousPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "startCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: k,
                                                filters: [],
                                                handle: "connection",
                                                key: "timelineBackwards_timelineItems",
                                                kind: "LinkedHandle",
                                                name: "timelineItems",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "b647698c2e1fac59c5d3bb9b7f2d9453",
                        metadata: {},
                        name: "NewTimelinePaginationHighlightQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            og.hash = "70031daa5215ed68dfa4a035788dbe34";
            let oy = (function () {
                var e = ["timelineItems"],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    s = [a],
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = [i],
                    r = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Label",
                            kind: "LinkedField",
                            name: "label",
                            plural: !1,
                            selections: t,
                            storageKey: null,
                        },
                    ],
                    u = {
                        kind: "InlineFragment",
                        selections: t,
                        type: "User",
                        abstractKey: null,
                    },
                    o = {
                        kind: "InlineFragment",
                        selections: t,
                        type: "Bot",
                        abstractKey: null,
                    },
                    d = {
                        kind: "InlineFragment",
                        selections: t,
                        type: "Mannequin",
                        abstractKey: null,
                    },
                    c = {
                        kind: "InlineFragment",
                        selections: t,
                        type: "Organization",
                        abstractKey: null,
                    },
                    m = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: t,
                            storageKey: null,
                        },
                    ],
                    g = {
                        kind: "ClientExtension",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__id",
                                storageKey: null,
                            },
                        ],
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "after",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "before",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "first",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "focusNeighborCount",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "focusText",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "last",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: null,
                                cursor: null,
                                direction: "bidirectional",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: { count: "first", cursor: "after" },
                                backward: { count: "last", cursor: "before" },
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: og,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "useTimelineHighlightItems",
                    selections: [
                        {
                            alias: "timelineItems",
                            args: null,
                            concreteType: "IssueTimelineItemsConnection",
                            kind: "LinkedField",
                            name: "__timelineBackwards_timelineItems_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "beforeFocusCount",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "afterFocusCount",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "IssueTimelineItemsEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                {
                                                    kind: "InlineDataFragmentSpread",
                                                    name: "IssueTimelineItem",
                                                    selections: [
                                                        l,
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                n,
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "createdAt",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "actor",
                                                                    plural: !1,
                                                                    selections:
                                                                        s,
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "TimelineEvent",
                                                            abstractKey:
                                                                "__isTimelineEvent",
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                n,
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "viewerDidAuthor",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "Issue",
                                                                    kind: "LinkedField",
                                                                    name: "issue",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    null,
                                                                                kind: "LinkedField",
                                                                                name: "author",
                                                                                plural: !1,
                                                                                selections:
                                                                                    s,
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "author",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            a,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "avatarUrl",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "profileUrl",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "IssueComment",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "source",
                                                                    plural: !1,
                                                                    selections:
                                                                        [l],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "willCloseTarget",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "CrossReferencedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: r,
                                                            type: "LabeledEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: r,
                                                            type: "UnlabeledEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "assignee",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            u,
                                                                            o,
                                                                            d,
                                                                            c,
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "AssignedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "assignee",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            l,
                                                                            u,
                                                                            o,
                                                                            d,
                                                                            c,
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "UnassignedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: m,
                                                            type: "MilestonedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: m,
                                                            type: "DemilestonedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "IssueComment_issueComment",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "SubscribedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnsubscribedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "MentionedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ClosedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ReopenedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "LockedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnlockedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "PinnedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnpinnedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "LabeledEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "RenamedTitleEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnlabeledEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnassignedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "AssignedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "BlockedByAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "BlockedByRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "BlockingAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "BlockingRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "CommentDeletedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UserBlockedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "SubIssueAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "SubIssueRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ParentIssueAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ParentIssueRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "MilestonedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "DemilestonedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "CrossReferencedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ReferencedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ConnectedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "TransferredEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "DisconnectedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "MarkedAsDuplicateEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnmarkedAsDuplicateEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ConvertedToDiscussionEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "AddedToProjectV2Event",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "RemovedFromProjectV2Event",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ProjectV2ItemStatusChangedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ConvertedFromDraftEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "IssueTypeAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "IssueTypeRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "IssueTypeChangedEvent",
                                                        },
                                                        g,
                                                    ],
                                                    args: null,
                                                    argumentDefinitions: [],
                                                },
                                                g,
                                                l,
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasPreviousPage",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "startCursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        i,
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            oy.hash = "70031daa5215ed68dfa4a035788dbe34";
            let op = (e, l) =>
                    String(e.databaseId) === l.id &&
                    ("issuecomment" !== l.prefix ||
                        "IssueComment" === e.__typename),
                ok = (function () {
                    var e = {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "count",
                        },
                        l = {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        n = {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                        a = {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "skip",
                        },
                        s = [
                            {
                                kind: "Variable",
                                name: "id",
                                variableName: "id",
                            },
                        ],
                        i = {
                            kind: "Variable",
                            name: "skip",
                            variableName: "skip",
                        },
                        t = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        r = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        u = [
                            {
                                kind: "Variable",
                                name: "after",
                                variableName: "cursor",
                            },
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "count",
                            },
                            i,
                            {
                                kind: "Literal",
                                name: "visibleEventsOnly",
                                value: !0,
                            },
                        ],
                        o = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "totalCount",
                            storageKey: null,
                        },
                        d = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "databaseId",
                            storageKey: null,
                        },
                        c = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        m = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "login",
                            storageKey: null,
                        },
                        g = [t, m, r],
                        y = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        p = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        k = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "name",
                            storageKey: null,
                        },
                        F = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isPrivate",
                            storageKey: null,
                        },
                        b = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "nameWithOwner",
                            storageKey: null,
                        },
                        h = [m],
                        f = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isCopilot",
                            storageKey: null,
                        },
                        K = [r],
                        S = {
                            kind: "InlineFragment",
                            selections: K,
                            type: "Node",
                            abstractKey: "__isNode",
                        },
                        I = [t, S],
                        v = {
                            alias: "issueTitleHTML",
                            args: null,
                            kind: "ScalarField",
                            name: "titleHTML",
                            storageKey: null,
                        },
                        L = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "stateReason",
                            storageKey: null,
                        },
                        T = {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "owner",
                            plural: !1,
                            selections: g,
                            storageKey: null,
                        },
                        C = {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [r, k, F, T],
                            storageKey: null,
                        },
                        x = {
                            kind: "InlineFragment",
                            selections: [r, v, p, y, L, C],
                            type: "Issue",
                            abstractKey: null,
                        },
                        R = {
                            alias: "pullTitleHTML",
                            args: null,
                            kind: "ScalarField",
                            name: "titleHTML",
                            storageKey: null,
                        },
                        N = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "state",
                            storageKey: null,
                        },
                        j = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isDraft",
                            storageKey: null,
                        },
                        _ = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isInMergeQueue",
                            storageKey: null,
                        },
                        w = {
                            kind: "InlineFragment",
                            selections: [r, R, p, y, N, j, _, C],
                            type: "PullRequest",
                            abstractKey: null,
                        },
                        E = {
                            kind: "TypeDiscriminator",
                            abstractKey: "__isActor",
                        },
                        A = {
                            alias: null,
                            args: [
                                { kind: "Literal", name: "size", value: 64 },
                            ],
                            kind: "ScalarField",
                            name: "avatarUrl",
                            storageKey: "avatarUrl(size:64)",
                        },
                        P = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "profileResourcePath",
                            storageKey: null,
                        },
                        B = {
                            kind: "InlineFragment",
                            selections: [f],
                            type: "Bot",
                            abstractKey: null,
                        },
                        D = {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "actor",
                            plural: !1,
                            selections: [t, E, A, m, P, B, r],
                            storageKey: null,
                        },
                        M = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "color",
                            storageKey: null,
                        },
                        V = [
                            {
                                alias: null,
                                args: null,
                                concreteType: "Label",
                                kind: "LinkedField",
                                name: "label",
                                plural: !1,
                                selections: [
                                    r,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameHTML",
                                        storageKey: null,
                                    },
                                    k,
                                    M,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "description",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            d,
                            c,
                            D,
                        ],
                        U = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "resourcePath",
                            storageKey: null,
                        },
                        O = [m, U],
                        q = {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "assignee",
                            plural: !1,
                            selections: [
                                t,
                                {
                                    kind: "InlineFragment",
                                    selections: K,
                                    type: "User",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: K,
                                    type: "Bot",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: K,
                                    type: "Mannequin",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: K,
                                    type: "Organization",
                                    abstractKey: null,
                                },
                                S,
                                {
                                    kind: "InlineFragment",
                                    selections: [
                                        m,
                                        {
                                            kind: "InlineFragment",
                                            selections: O,
                                            type: "User",
                                            abstractKey: null,
                                        },
                                        {
                                            kind: "InlineFragment",
                                            selections: O,
                                            type: "Mannequin",
                                            abstractKey: null,
                                        },
                                        {
                                            kind: "InlineFragment",
                                            selections: O,
                                            type: "Organization",
                                            abstractKey: null,
                                        },
                                        {
                                            kind: "InlineFragment",
                                            selections: [m, U, f],
                                            type: "Bot",
                                            abstractKey: null,
                                        },
                                    ],
                                    type: "Actor",
                                    abstractKey: "__isActor",
                                },
                            ],
                            storageKey: null,
                        },
                        H = [
                            {
                                alias: null,
                                args: null,
                                concreteType: "Milestone",
                                kind: "LinkedField",
                                name: "milestone",
                                plural: !1,
                                selections: [r, p],
                                storageKey: null,
                            },
                            d,
                            c,
                            D,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "milestoneTitle",
                                storageKey: null,
                            },
                        ],
                        $ = [c, d, D],
                        z = {
                            kind: "InlineFragment",
                            selections: [x, w],
                            type: "ReferencedSubject",
                            abstractKey: "__isReferencedSubject",
                        },
                        W = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        Q = {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [k, T, r],
                            storageKey: null,
                        },
                        G = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "abbreviatedOid",
                            storageKey: null,
                        },
                        Y = [d, c, D],
                        X = {
                            kind: "InlineFragment",
                            selections: [
                                t,
                                {
                                    kind: "InlineFragment",
                                    selections: [v, p, y, L, C],
                                    type: "Issue",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: [R, p, y, N, j, _, C],
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                            ],
                            type: "ReferencedSubject",
                            abstractKey: "__isReferencedSubject",
                        },
                        J = [r, X],
                        Z = [
                            d,
                            D,
                            c,
                            {
                                alias: null,
                                args: null,
                                concreteType: "Issue",
                                kind: "LinkedField",
                                name: "blockingIssue",
                                plural: !1,
                                selections: J,
                                storageKey: null,
                            },
                        ],
                        ee = [
                            d,
                            D,
                            c,
                            {
                                alias: null,
                                args: null,
                                concreteType: "Issue",
                                kind: "LinkedField",
                                name: "blockedIssue",
                                plural: !1,
                                selections: J,
                                storageKey: null,
                            },
                        ],
                        el = [d, r, X],
                        en = [
                            d,
                            D,
                            c,
                            {
                                alias: null,
                                args: null,
                                concreteType: "Issue",
                                kind: "LinkedField",
                                name: "subIssue",
                                plural: !1,
                                selections: el,
                                storageKey: null,
                            },
                        ],
                        ea = [
                            d,
                            D,
                            c,
                            {
                                alias: null,
                                args: null,
                                concreteType: "Issue",
                                kind: "LinkedField",
                                name: "parent",
                                plural: !1,
                                selections: el,
                                storageKey: null,
                            },
                        ],
                        es = [
                            d,
                            D,
                            c,
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "subject",
                                plural: !1,
                                selections: [
                                    t,
                                    {
                                        kind: "InlineFragment",
                                        selections: [W, p, y, N, j, _, Q],
                                        type: "PullRequest",
                                        abstractKey: null,
                                    },
                                    S,
                                ],
                                storageKey: null,
                            },
                        ],
                        ei = {
                            kind: "InlineFragment",
                            selections: [
                                {
                                    kind: "InlineFragment",
                                    selections: [v, p, L, C],
                                    type: "Issue",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: [R, p, N, j, _, C],
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                            ],
                            type: "ReferencedSubject",
                            abstractKey: "__isReferencedSubject",
                        },
                        et = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isCanonicalOfClosedDuplicate",
                            storageKey: null,
                        },
                        er = [z],
                        eu = {
                            alias: null,
                            args: null,
                            concreteType: "ProjectV2",
                            kind: "LinkedField",
                            name: "project",
                            plural: !1,
                            selections: [W, p, r],
                            storageKey: null,
                        },
                        eo = [k, M, r],
                        ed = {
                            alias: null,
                            args: null,
                            concreteType: "IssueType",
                            kind: "LinkedField",
                            name: "issueType",
                            plural: !1,
                            selections: eo,
                            storageKey: null,
                        },
                        ec = [d, D, c, ed];
                    return {
                        fragment: {
                            argumentDefinitions: [e, l, n, a],
                            kind: "Fragment",
                            metadata: null,
                            name: "NewTimelinePaginationFrontQuery",
                            selections: [
                                {
                                    alias: null,
                                    args: s,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "node",
                                    plural: !1,
                                    selections: [
                                        {
                                            args: [
                                                {
                                                    kind: "Variable",
                                                    name: "count",
                                                    variableName: "count",
                                                },
                                                {
                                                    kind: "Variable",
                                                    name: "cursor",
                                                    variableName: "cursor",
                                                },
                                                i,
                                            ],
                                            kind: "FragmentSpread",
                                            name: "useTimelineItemsFrontFragment",
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            type: "Query",
                            abstractKey: null,
                        },
                        kind: "Request",
                        operation: {
                            argumentDefinitions: [e, l, a, n],
                            kind: "Operation",
                            name: "NewTimelinePaginationFrontQuery",
                            selections: [
                                {
                                    alias: null,
                                    args: s,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "node",
                                    plural: !1,
                                    selections: [
                                        t,
                                        r,
                                        {
                                            kind: "InlineFragment",
                                            selections: [
                                                {
                                                    alias: "frontTimelineItems",
                                                    args: u,
                                                    concreteType:
                                                        "IssueTimelineItemsConnection",
                                                    kind: "LinkedField",
                                                    name: "timelineItems",
                                                    plural: !1,
                                                    selections: [
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "PageInfo",
                                                            kind: "LinkedField",
                                                            name: "pageInfo",
                                                            plural: !1,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "hasNextPage",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "endCursor",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                        o,
                                                        {
                                                            alias: null,
                                                            args: null,
                                                            concreteType:
                                                                "IssueTimelineItemsEdge",
                                                            kind: "LinkedField",
                                                            name: "edges",
                                                            plural: !0,
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "node",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            t,
                                                                            {
                                                                                kind: "TypeDiscriminator",
                                                                                abstractKey:
                                                                                    "__isIssueTimelineItems",
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        d,
                                                                                        c,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                null,
                                                                                            kind: "LinkedField",
                                                                                            name: "actor",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                g,
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                type: "TimelineEvent",
                                                                                abstractKey:
                                                                                    "__isTimelineEvent",
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        d,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "viewerDidAuthor",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                "Issue",
                                                                                            kind: "LinkedField",
                                                                                            name: "issue",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        concreteType:
                                                                                                            null,
                                                                                                        kind: "LinkedField",
                                                                                                        name: "author",
                                                                                                        plural: !1,
                                                                                                        selections:
                                                                                                            g,
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    r,
                                                                                                    y,
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "locked",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    d,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                null,
                                                                                            kind: "LinkedField",
                                                                                            name: "author",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    t,
                                                                                                    m,
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "avatarUrl",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "profileUrl",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    r,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        r,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "body",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: [
                                                                                                {
                                                                                                    kind: "Literal",
                                                                                                    name: "unfurlReferences",
                                                                                                    value: !0,
                                                                                                },
                                                                                            ],
                                                                                            kind: "ScalarField",
                                                                                            name: "bodyHTML",
                                                                                            storageKey:
                                                                                                "bodyHTML(unfurlReferences:true)",
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "bodyVersion",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "viewerCanUpdate",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        p,
                                                                                        c,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "authorAssociation",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "viewerCanDelete",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "viewerCanMinimize",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "viewerCanReport",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "viewerCanReportToMaintainer",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "viewerCanBlockFromOrg",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "viewerCanUnblockFromOrg",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: "isHidden",
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "isMinimized",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "minimizedReason",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "showSpammyBadge",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "createdViaEmail",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                "Sponsorship",
                                                                                            kind: "LinkedField",
                                                                                            name: "authorToRepoOwnerSponsorship",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    c,
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "isActive",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    r,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                "Repository",
                                                                                            kind: "LinkedField",
                                                                                            name: "repository",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    r,
                                                                                                    k,
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        concreteType:
                                                                                                            null,
                                                                                                        kind: "LinkedField",
                                                                                                        name: "owner",
                                                                                                        plural: !1,
                                                                                                        selections:
                                                                                                            [
                                                                                                                t,
                                                                                                                r,
                                                                                                                m,
                                                                                                                p,
                                                                                                            ],
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    F,
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "slashCommandsEnabled",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    b,
                                                                                                    d,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                [
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "viewerCanReadUserContentEdits",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "lastEditedAt",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        concreteType:
                                                                                                            "UserContentEdit",
                                                                                                        kind: "LinkedField",
                                                                                                        name: "lastUserContentEdit",
                                                                                                        plural: !1,
                                                                                                        selections:
                                                                                                            [
                                                                                                                {
                                                                                                                    alias: null,
                                                                                                                    args: null,
                                                                                                                    concreteType:
                                                                                                                        null,
                                                                                                                    kind: "LinkedField",
                                                                                                                    name: "editor",
                                                                                                                    plural: !1,
                                                                                                                    selections:
                                                                                                                        [
                                                                                                                            t,
                                                                                                                            p,
                                                                                                                            m,
                                                                                                                            r,
                                                                                                                        ],
                                                                                                                    storageKey:
                                                                                                                        null,
                                                                                                                },
                                                                                                                r,
                                                                                                            ],
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                ],
                                                                                            type: "Comment",
                                                                                            abstractKey:
                                                                                                "__isComment",
                                                                                        },
                                                                                        {
                                                                                            kind: "ClientExtension",
                                                                                            selections:
                                                                                                [
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "pendingMinimizeReason",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "pendingBlock",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "pendingUnblock",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                ],
                                                                                        },
                                                                                        {
                                                                                            kind: "InlineFragment",
                                                                                            selections:
                                                                                                [
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        concreteType:
                                                                                                            "ReactionGroup",
                                                                                                        kind: "LinkedField",
                                                                                                        name: "reactionGroups",
                                                                                                        plural: !0,
                                                                                                        selections:
                                                                                                            [
                                                                                                                {
                                                                                                                    alias: null,
                                                                                                                    args: null,
                                                                                                                    kind: "ScalarField",
                                                                                                                    name: "content",
                                                                                                                    storageKey:
                                                                                                                        null,
                                                                                                                },
                                                                                                                {
                                                                                                                    alias: null,
                                                                                                                    args: null,
                                                                                                                    kind: "ScalarField",
                                                                                                                    name: "viewerHasReacted",
                                                                                                                    storageKey:
                                                                                                                        null,
                                                                                                                },
                                                                                                                {
                                                                                                                    alias: null,
                                                                                                                    args: [
                                                                                                                        {
                                                                                                                            kind: "Literal",
                                                                                                                            name: "first",
                                                                                                                            value: 5,
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    concreteType:
                                                                                                                        "ReactorConnection",
                                                                                                                    kind: "LinkedField",
                                                                                                                    name: "reactors",
                                                                                                                    plural: !1,
                                                                                                                    selections:
                                                                                                                        [
                                                                                                                            o,
                                                                                                                            {
                                                                                                                                alias: null,
                                                                                                                                args: null,
                                                                                                                                concreteType:
                                                                                                                                    null,
                                                                                                                                kind: "LinkedField",
                                                                                                                                name: "nodes",
                                                                                                                                plural: !0,
                                                                                                                                selections:
                                                                                                                                    [
                                                                                                                                        t,
                                                                                                                                        {
                                                                                                                                            kind: "InlineFragment",
                                                                                                                                            selections:
                                                                                                                                                h,
                                                                                                                                            type: "User",
                                                                                                                                            abstractKey:
                                                                                                                                                null,
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            kind: "InlineFragment",
                                                                                                                                            selections:
                                                                                                                                                [
                                                                                                                                                    m,
                                                                                                                                                    f,
                                                                                                                                                ],
                                                                                                                                            type: "Bot",
                                                                                                                                            abstractKey:
                                                                                                                                                null,
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            kind: "InlineFragment",
                                                                                                                                            selections:
                                                                                                                                                h,
                                                                                                                                            type: "Organization",
                                                                                                                                            abstractKey:
                                                                                                                                                null,
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            kind: "InlineFragment",
                                                                                                                                            selections:
                                                                                                                                                h,
                                                                                                                                            type: "Mannequin",
                                                                                                                                            abstractKey:
                                                                                                                                                null,
                                                                                                                                        },
                                                                                                                                        S,
                                                                                                                                    ],
                                                                                                                                storageKey:
                                                                                                                                    null,
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    storageKey:
                                                                                                                        "reactors(first:5)",
                                                                                                                },
                                                                                                            ],
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                ],
                                                                                            type: "Reactable",
                                                                                            abstractKey:
                                                                                                "__isReactable",
                                                                                        },
                                                                                    ],
                                                                                type: "IssueComment",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                null,
                                                                                            kind: "LinkedField",
                                                                                            name: "source",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                I,
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "willCloseTarget",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "referencedAt",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        d,
                                                                                        {
                                                                                            alias: "innerSource",
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                null,
                                                                                            kind: "LinkedField",
                                                                                            name: "source",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    t,
                                                                                                    {
                                                                                                        kind: "TypeDiscriminator",
                                                                                                        abstractKey:
                                                                                                            "__isReferencedSubject",
                                                                                                    },
                                                                                                    x,
                                                                                                    w,
                                                                                                    S,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        D,
                                                                                    ],
                                                                                type: "CrossReferencedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    V,
                                                                                type: "LabeledEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    V,
                                                                                type: "UnlabeledEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        q,
                                                                                        d,
                                                                                        c,
                                                                                        D,
                                                                                    ],
                                                                                type: "AssignedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        q,
                                                                                        d,
                                                                                        c,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                null,
                                                                                            kind: "LinkedField",
                                                                                            name: "actor",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    t,
                                                                                                    m,
                                                                                                    E,
                                                                                                    A,
                                                                                                    P,
                                                                                                    B,
                                                                                                    r,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                type: "UnassignedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    H,
                                                                                type: "MilestonedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    H,
                                                                                type: "DemilestonedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    $,
                                                                                type: "SubscribedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    $,
                                                                                type: "UnsubscribedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    $,
                                                                                type: "MentionedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        d,
                                                                                        c,
                                                                                        L,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                null,
                                                                                            kind: "LinkedField",
                                                                                            name: "duplicateOf",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    t,
                                                                                                    z,
                                                                                                    S,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "closingProjectItemStatus",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                null,
                                                                                            kind: "LinkedField",
                                                                                            name: "closer",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    t,
                                                                                                    {
                                                                                                        kind: "InlineFragment",
                                                                                                        selections:
                                                                                                            [
                                                                                                                p,
                                                                                                                W,
                                                                                                            ],
                                                                                                        type: "ProjectV2",
                                                                                                        abstractKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        kind: "InlineFragment",
                                                                                                        selections:
                                                                                                            [
                                                                                                                p,
                                                                                                                y,
                                                                                                                Q,
                                                                                                            ],
                                                                                                        type: "PullRequest",
                                                                                                        abstractKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        kind: "InlineFragment",
                                                                                                        selections:
                                                                                                            [
                                                                                                                p,
                                                                                                                G,
                                                                                                                Q,
                                                                                                            ],
                                                                                                        type: "Commit",
                                                                                                        abstractKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    S,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        D,
                                                                                    ],
                                                                                type: "ClosedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    Y,
                                                                                type: "ReopenedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        d,
                                                                                        c,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "lockReason",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        D,
                                                                                    ],
                                                                                type: "LockedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    Y,
                                                                                type: "UnlockedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    Y,
                                                                                type: "PinnedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    Y,
                                                                                type: "UnpinnedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        d,
                                                                                        c,
                                                                                        D,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "currentTitle",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "previousTitle",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                type: "RenamedTitleEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    Z,
                                                                                type: "BlockedByAddedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    Z,
                                                                                type: "BlockedByRemovedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    ee,
                                                                                type: "BlockingAddedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    ee,
                                                                                type: "BlockingRemovedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        d,
                                                                                        c,
                                                                                        D,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                null,
                                                                                            kind: "LinkedField",
                                                                                            name: "deletedCommentAuthor",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                g,
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                type: "CommentDeletedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        d,
                                                                                        c,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "blockDuration",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        D,
                                                                                        {
                                                                                            alias: "blockedUser",
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                "User",
                                                                                            kind: "LinkedField",
                                                                                            name: "subject",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    m,
                                                                                                    r,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                type: "UserBlockedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    en,
                                                                                type: "SubIssueAddedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    en,
                                                                                type: "SubIssueRemovedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    ea,
                                                                                type: "ParentIssueAddedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    ea,
                                                                                type: "ParentIssueRemovedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        r,
                                                                                        d,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "willCloseSubject",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                null,
                                                                                            kind: "LinkedField",
                                                                                            name: "subject",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                I,
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        D,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                "Commit",
                                                                                            kind: "LinkedField",
                                                                                            name: "commit",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "message",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "messageHeadlineHTML",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "messageBodyHTML",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    p,
                                                                                                    G,
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        concreteType:
                                                                                                            "Repository",
                                                                                                        kind: "LinkedField",
                                                                                                        name: "repository",
                                                                                                        plural: !1,
                                                                                                        selections:
                                                                                                            [
                                                                                                                k,
                                                                                                                T,
                                                                                                                {
                                                                                                                    alias: null,
                                                                                                                    args: null,
                                                                                                                    kind: "ScalarField",
                                                                                                                    name: "defaultBranch",
                                                                                                                    storageKey:
                                                                                                                        null,
                                                                                                                },
                                                                                                                r,
                                                                                                            ],
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    r,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        c,
                                                                                    ],
                                                                                type: "ReferencedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    es,
                                                                                type: "ConnectedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        d,
                                                                                        D,
                                                                                        c,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                "Repository",
                                                                                            kind: "LinkedField",
                                                                                            name: "fromRepository",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    b,
                                                                                                    p,
                                                                                                    r,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                type: "TransferredEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    es,
                                                                                type: "DisconnectedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        D,
                                                                                        c,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                null,
                                                                                            kind: "LinkedField",
                                                                                            name: "canonical",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    t,
                                                                                                    {
                                                                                                        kind: "InlineFragment",
                                                                                                        selections:
                                                                                                            [
                                                                                                                r,
                                                                                                                y,
                                                                                                                ei,
                                                                                                            ],
                                                                                                        type: "Issue",
                                                                                                        abstractKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        kind: "InlineFragment",
                                                                                                        selections:
                                                                                                            [
                                                                                                                y,
                                                                                                                r,
                                                                                                                ei,
                                                                                                            ],
                                                                                                        type: "PullRequest",
                                                                                                        abstractKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    S,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        et,
                                                                                        d,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "viewerCanUndo",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        r,
                                                                                        {
                                                                                            kind: "ClientExtension",
                                                                                            selections:
                                                                                                [
                                                                                                    {
                                                                                                        alias: null,
                                                                                                        args: null,
                                                                                                        kind: "ScalarField",
                                                                                                        name: "pendingUndo",
                                                                                                        storageKey:
                                                                                                            null,
                                                                                                    },
                                                                                                ],
                                                                                        },
                                                                                    ],
                                                                                type: "MarkedAsDuplicateEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        D,
                                                                                        c,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                null,
                                                                                            kind: "LinkedField",
                                                                                            name: "canonical",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    t,
                                                                                                    {
                                                                                                        kind: "InlineFragment",
                                                                                                        selections:
                                                                                                            er,
                                                                                                        type: "Issue",
                                                                                                        abstractKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    {
                                                                                                        kind: "InlineFragment",
                                                                                                        selections:
                                                                                                            er,
                                                                                                        type: "PullRequest",
                                                                                                        abstractKey:
                                                                                                            null,
                                                                                                    },
                                                                                                    S,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        et,
                                                                                        d,
                                                                                    ],
                                                                                type: "UnmarkedAsDuplicateEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        d,
                                                                                        D,
                                                                                        c,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                "Discussion",
                                                                                            kind: "LinkedField",
                                                                                            name: "discussion",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                [
                                                                                                    p,
                                                                                                    y,
                                                                                                    r,
                                                                                                ],
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                type: "ConvertedToDiscussionEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        d,
                                                                                        c,
                                                                                        D,
                                                                                        eu,
                                                                                    ],
                                                                                type: "AddedToProjectV2Event",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        c,
                                                                                        D,
                                                                                        eu,
                                                                                    ],
                                                                                type: "RemovedFromProjectV2Event",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        c,
                                                                                        D,
                                                                                        eu,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "previousStatus",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "status",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                type: "ProjectV2ItemStatusChangedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        c,
                                                                                        D,
                                                                                        d,
                                                                                    ],
                                                                                type: "ConvertedFromDraftEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    ec,
                                                                                type: "IssueTypeAddedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    ec,
                                                                                type: "IssueTypeRemovedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "InlineFragment",
                                                                                selections:
                                                                                    [
                                                                                        d,
                                                                                        D,
                                                                                        c,
                                                                                        ed,
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            concreteType:
                                                                                                "IssueType",
                                                                                            kind: "LinkedField",
                                                                                            name: "prevIssueType",
                                                                                            plural: !1,
                                                                                            selections:
                                                                                                eo,
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                                type: "IssueTypeChangedEvent",
                                                                                abstractKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                kind: "ClientExtension",
                                                                                selections:
                                                                                    [
                                                                                        {
                                                                                            alias: null,
                                                                                            args: null,
                                                                                            kind: "ScalarField",
                                                                                            name: "__id",
                                                                                            storageKey:
                                                                                                null,
                                                                                        },
                                                                                    ],
                                                                            },
                                                                            S,
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "cursor",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            storageKey: null,
                                                        },
                                                    ],
                                                    storageKey: null,
                                                },
                                                {
                                                    alias: "frontTimelineItems",
                                                    args: u,
                                                    filters: [
                                                        "visibleEventsOnly",
                                                        "skip",
                                                    ],
                                                    handle: "connection",
                                                    key: "Issue__frontTimelineItems",
                                                    kind: "LinkedHandle",
                                                    name: "timelineItems",
                                                },
                                            ],
                                            type: "Issue",
                                            abstractKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                        },
                        params: {
                            id: "874614d459263ff4f26f99f9d1c34fc6",
                            metadata: {},
                            name: "NewTimelinePaginationFrontQuery",
                            operationKind: "query",
                            text: null,
                        },
                    };
                })();
            ok.hash = "e08e6ca235cebb5e595654053adbad03";
            let oF = (function () {
                var e = ["frontTimelineItems"],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    s = [a],
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = [i],
                    r = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Label",
                            kind: "LinkedField",
                            name: "label",
                            plural: !1,
                            selections: t,
                            storageKey: null,
                        },
                    ],
                    u = {
                        kind: "InlineFragment",
                        selections: t,
                        type: "User",
                        abstractKey: null,
                    },
                    o = {
                        kind: "InlineFragment",
                        selections: t,
                        type: "Bot",
                        abstractKey: null,
                    },
                    d = {
                        kind: "InlineFragment",
                        selections: t,
                        type: "Mannequin",
                        abstractKey: null,
                    },
                    c = {
                        kind: "InlineFragment",
                        selections: t,
                        type: "Organization",
                        abstractKey: null,
                    },
                    m = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: t,
                            storageKey: null,
                        },
                    ],
                    g = {
                        kind: "ClientExtension",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__id",
                                storageKey: null,
                            },
                        ],
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "count",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "skip",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "count",
                                cursor: "cursor",
                                direction: "forward",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: { count: "count", cursor: "cursor" },
                                backward: null,
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: ok,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "useTimelineItemsFrontFragment",
                    selections: [
                        {
                            alias: "frontTimelineItems",
                            args: [
                                {
                                    kind: "Variable",
                                    name: "skip",
                                    variableName: "skip",
                                },
                                {
                                    kind: "Literal",
                                    name: "visibleEventsOnly",
                                    value: !0,
                                },
                            ],
                            concreteType: "IssueTimelineItemsConnection",
                            kind: "LinkedField",
                            name: "__Issue__frontTimelineItems_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasNextPage",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "endCursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "totalCount",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "IssueTimelineItemsEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                {
                                                    kind: "InlineDataFragmentSpread",
                                                    name: "IssueTimelineItem",
                                                    selections: [
                                                        l,
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                n,
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "createdAt",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "actor",
                                                                    plural: !1,
                                                                    selections:
                                                                        s,
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "TimelineEvent",
                                                            abstractKey:
                                                                "__isTimelineEvent",
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                n,
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "viewerDidAuthor",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "Issue",
                                                                    kind: "LinkedField",
                                                                    name: "issue",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    null,
                                                                                kind: "LinkedField",
                                                                                name: "author",
                                                                                plural: !1,
                                                                                selections:
                                                                                    s,
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "author",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            a,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "avatarUrl",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "profileUrl",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "IssueComment",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "source",
                                                                    plural: !1,
                                                                    selections:
                                                                        [l],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "willCloseTarget",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "CrossReferencedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: r,
                                                            type: "LabeledEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: r,
                                                            type: "UnlabeledEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "assignee",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            u,
                                                                            o,
                                                                            d,
                                                                            c,
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "AssignedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "assignee",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            l,
                                                                            u,
                                                                            o,
                                                                            d,
                                                                            c,
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "UnassignedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: m,
                                                            type: "MilestonedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: m,
                                                            type: "DemilestonedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "IssueComment_issueComment",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "SubscribedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnsubscribedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "MentionedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ClosedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ReopenedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "LockedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnlockedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "PinnedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnpinnedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "LabeledEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "RenamedTitleEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnlabeledEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnassignedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "AssignedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "BlockedByAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "BlockedByRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "BlockingAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "BlockingRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "CommentDeletedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UserBlockedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "SubIssueAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "SubIssueRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ParentIssueAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ParentIssueRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "MilestonedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "DemilestonedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "CrossReferencedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ReferencedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ConnectedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "TransferredEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "DisconnectedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "MarkedAsDuplicateEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnmarkedAsDuplicateEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ConvertedToDiscussionEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "AddedToProjectV2Event",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "RemovedFromProjectV2Event",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ProjectV2ItemStatusChangedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ConvertedFromDraftEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "IssueTypeAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "IssueTypeRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "IssueTypeChangedEvent",
                                                        },
                                                        g,
                                                    ],
                                                    args: null,
                                                    argumentDefinitions: [],
                                                },
                                                g,
                                                l,
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        i,
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            oF.hash = "e08e6ca235cebb5e595654053adbad03";
            let ob = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "count",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [{ kind: "Variable", name: "id", variableName: "id" }],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    s = [
                        {
                            kind: "Variable",
                            name: "before",
                            variableName: "cursor",
                        },
                        {
                            kind: "Variable",
                            name: "last",
                            variableName: "count",
                        },
                        {
                            kind: "Literal",
                            name: "visibleEventsOnly",
                            value: !0,
                        },
                    ],
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "totalCount",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    o = [n, u, a],
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    c = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    m = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    g = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isPrivate",
                        storageKey: null,
                    },
                    y = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameWithOwner",
                        storageKey: null,
                    },
                    p = [u],
                    k = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isCopilot",
                        storageKey: null,
                    },
                    F = [a],
                    b = {
                        kind: "InlineFragment",
                        selections: F,
                        type: "Node",
                        abstractKey: "__isNode",
                    },
                    h = [n, b],
                    f = {
                        alias: "issueTitleHTML",
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    K = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    S = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "owner",
                        plural: !1,
                        selections: o,
                        storageKey: null,
                    },
                    I = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [a, m, g, S],
                        storageKey: null,
                    },
                    v = {
                        kind: "InlineFragment",
                        selections: [a, f, c, d, K, I],
                        type: "Issue",
                        abstractKey: null,
                    },
                    L = {
                        alias: "pullTitleHTML",
                        args: null,
                        kind: "ScalarField",
                        name: "titleHTML",
                        storageKey: null,
                    },
                    T = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    C = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isDraft",
                        storageKey: null,
                    },
                    x = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isInMergeQueue",
                        storageKey: null,
                    },
                    R = {
                        kind: "InlineFragment",
                        selections: [a, L, c, d, T, C, x, I],
                        type: "PullRequest",
                        abstractKey: null,
                    },
                    N = { kind: "TypeDiscriminator", abstractKey: "__isActor" },
                    j = {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    _ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    w = {
                        kind: "InlineFragment",
                        selections: [k],
                        type: "Bot",
                        abstractKey: null,
                    },
                    E = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [n, N, j, u, _, w, a],
                        storageKey: null,
                    },
                    A = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    P = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Label",
                            kind: "LinkedField",
                            name: "label",
                            plural: !1,
                            selections: [
                                a,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "nameHTML",
                                    storageKey: null,
                                },
                                m,
                                A,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "description",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        t,
                        r,
                        E,
                    ],
                    B = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "resourcePath",
                        storageKey: null,
                    },
                    D = [u, B],
                    M = {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "assignee",
                        plural: !1,
                        selections: [
                            n,
                            {
                                kind: "InlineFragment",
                                selections: F,
                                type: "User",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: F,
                                type: "Bot",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: F,
                                type: "Mannequin",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: F,
                                type: "Organization",
                                abstractKey: null,
                            },
                            b,
                            {
                                kind: "InlineFragment",
                                selections: [
                                    u,
                                    {
                                        kind: "InlineFragment",
                                        selections: D,
                                        type: "User",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: D,
                                        type: "Mannequin",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: D,
                                        type: "Organization",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [u, B, k],
                                        type: "Bot",
                                        abstractKey: null,
                                    },
                                ],
                                type: "Actor",
                                abstractKey: "__isActor",
                            },
                        ],
                        storageKey: null,
                    },
                    V = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [a, c],
                            storageKey: null,
                        },
                        t,
                        r,
                        E,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "milestoneTitle",
                            storageKey: null,
                        },
                    ],
                    U = [r, t, E],
                    O = {
                        kind: "InlineFragment",
                        selections: [v, R],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    q = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    H = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [m, S, a],
                        storageKey: null,
                    },
                    $ = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "abbreviatedOid",
                        storageKey: null,
                    },
                    z = [t, r, E],
                    W = {
                        kind: "InlineFragment",
                        selections: [
                            n,
                            {
                                kind: "InlineFragment",
                                selections: [f, c, d, K, I],
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [L, c, d, T, C, x, I],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    Q = [a, W],
                    G = [
                        t,
                        E,
                        r,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "blockingIssue",
                            plural: !1,
                            selections: Q,
                            storageKey: null,
                        },
                    ],
                    Y = [
                        t,
                        E,
                        r,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "blockedIssue",
                            plural: !1,
                            selections: Q,
                            storageKey: null,
                        },
                    ],
                    X = [t, a, W],
                    J = [
                        t,
                        E,
                        r,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "subIssue",
                            plural: !1,
                            selections: X,
                            storageKey: null,
                        },
                    ],
                    Z = [
                        t,
                        E,
                        r,
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "parent",
                            plural: !1,
                            selections: X,
                            storageKey: null,
                        },
                    ],
                    ee = [
                        t,
                        E,
                        r,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "subject",
                            plural: !1,
                            selections: [
                                n,
                                {
                                    kind: "InlineFragment",
                                    selections: [q, c, d, T, C, x, H],
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                                b,
                            ],
                            storageKey: null,
                        },
                    ],
                    el = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [f, c, K, I],
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [L, c, T, C, x, I],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    },
                    en = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isCanonicalOfClosedDuplicate",
                        storageKey: null,
                    },
                    ea = [O],
                    es = {
                        alias: null,
                        args: null,
                        concreteType: "ProjectV2",
                        kind: "LinkedField",
                        name: "project",
                        plural: !1,
                        selections: [q, c, a],
                        storageKey: null,
                    },
                    ei = [m, A, a],
                    et = {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "issueType",
                        plural: !1,
                        selections: ei,
                        storageKey: null,
                    },
                    er = [t, E, r, et];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "NewTimelinePaginationBackQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        args: [
                                            {
                                                kind: "Variable",
                                                name: "count",
                                                variableName: "count",
                                            },
                                            {
                                                kind: "Variable",
                                                name: "cursor",
                                                variableName: "cursor",
                                            },
                                        ],
                                        kind: "FragmentSpread",
                                        name: "useTimelineItemsBackFragment",
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "NewTimelinePaginationBackQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    n,
                                    a,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: "backTimelineItems",
                                                args: s,
                                                concreteType:
                                                    "IssueTimelineItemsConnection",
                                                kind: "LinkedField",
                                                name: "timelineItems",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasPreviousPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "startCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    i,
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "IssueTimelineItemsEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    null,
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    n,
                                                                    {
                                                                        kind: "TypeDiscriminator",
                                                                        abstractKey:
                                                                            "__isIssueTimelineItems",
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                r,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "actor",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        o,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "TimelineEvent",
                                                                        abstractKey:
                                                                            "__isTimelineEvent",
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerDidAuthor",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Issue",
                                                                                    kind: "LinkedField",
                                                                                    name: "issue",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    null,
                                                                                                kind: "LinkedField",
                                                                                                name: "author",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    o,
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            a,
                                                                                            d,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "locked",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            t,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "author",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            n,
                                                                                            u,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "avatarUrl",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "profileUrl",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            a,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                a,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "body",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: [
                                                                                        {
                                                                                            kind: "Literal",
                                                                                            name: "unfurlReferences",
                                                                                            value: !0,
                                                                                        },
                                                                                    ],
                                                                                    kind: "ScalarField",
                                                                                    name: "bodyHTML",
                                                                                    storageKey:
                                                                                        "bodyHTML(unfurlReferences:true)",
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "bodyVersion",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUpdate",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                c,
                                                                                r,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "authorAssociation",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanDelete",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanMinimize",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanReport",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanReportToMaintainer",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanBlockFromOrg",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUnblockFromOrg",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: "isHidden",
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "isMinimized",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "minimizedReason",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "showSpammyBadge",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "createdViaEmail",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Sponsorship",
                                                                                    kind: "LinkedField",
                                                                                    name: "authorToRepoOwnerSponsorship",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            r,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "isActive",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            a,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "repository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            a,
                                                                                            m,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    null,
                                                                                                kind: "LinkedField",
                                                                                                name: "owner",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        n,
                                                                                                        a,
                                                                                                        u,
                                                                                                        c,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            g,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "slashCommandsEnabled",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            y,
                                                                                            t,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "viewerCanReadUserContentEdits",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "lastEditedAt",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "UserContentEdit",
                                                                                                kind: "LinkedField",
                                                                                                name: "lastUserContentEdit",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            concreteType:
                                                                                                                null,
                                                                                                            kind: "LinkedField",
                                                                                                            name: "editor",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    n,
                                                                                                                    c,
                                                                                                                    u,
                                                                                                                    a,
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        a,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "Comment",
                                                                                    abstractKey:
                                                                                        "__isComment",
                                                                                },
                                                                                {
                                                                                    kind: "ClientExtension",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingMinimizeReason",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingBlock",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingUnblock",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                },
                                                                                {
                                                                                    kind: "InlineFragment",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "ReactionGroup",
                                                                                                kind: "LinkedField",
                                                                                                name: "reactionGroups",
                                                                                                plural: !0,
                                                                                                selections:
                                                                                                    [
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "content",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "viewerHasReacted",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: [
                                                                                                                {
                                                                                                                    kind: "Literal",
                                                                                                                    name: "first",
                                                                                                                    value: 5,
                                                                                                                },
                                                                                                            ],
                                                                                                            concreteType:
                                                                                                                "ReactorConnection",
                                                                                                            kind: "LinkedField",
                                                                                                            name: "reactors",
                                                                                                            plural: !1,
                                                                                                            selections:
                                                                                                                [
                                                                                                                    i,
                                                                                                                    {
                                                                                                                        alias: null,
                                                                                                                        args: null,
                                                                                                                        concreteType:
                                                                                                                            null,
                                                                                                                        kind: "LinkedField",
                                                                                                                        name: "nodes",
                                                                                                                        plural: !0,
                                                                                                                        selections:
                                                                                                                            [
                                                                                                                                n,
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        p,
                                                                                                                                    type: "User",
                                                                                                                                    abstractKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        [
                                                                                                                                            u,
                                                                                                                                            k,
                                                                                                                                        ],
                                                                                                                                    type: "Bot",
                                                                                                                                    abstractKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        p,
                                                                                                                                    type: "Organization",
                                                                                                                                    abstractKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    kind: "InlineFragment",
                                                                                                                                    selections:
                                                                                                                                        p,
                                                                                                                                    type: "Mannequin",
                                                                                                                                    abstractKey:
                                                                                                                                        null,
                                                                                                                                },
                                                                                                                                b,
                                                                                                                            ],
                                                                                                                        storageKey:
                                                                                                                            null,
                                                                                                                    },
                                                                                                                ],
                                                                                                            storageKey:
                                                                                                                "reactors(first:5)",
                                                                                                        },
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                    type: "Reactable",
                                                                                    abstractKey:
                                                                                        "__isReactable",
                                                                                },
                                                                            ],
                                                                        type: "IssueComment",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "source",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        h,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "willCloseTarget",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "referencedAt",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                t,
                                                                                {
                                                                                    alias: "innerSource",
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "source",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            n,
                                                                                            {
                                                                                                kind: "TypeDiscriminator",
                                                                                                abstractKey:
                                                                                                    "__isReferencedSubject",
                                                                                            },
                                                                                            v,
                                                                                            R,
                                                                                            b,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                E,
                                                                            ],
                                                                        type: "CrossReferencedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            P,
                                                                        type: "LabeledEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            P,
                                                                        type: "UnlabeledEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                M,
                                                                                t,
                                                                                r,
                                                                                E,
                                                                            ],
                                                                        type: "AssignedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                M,
                                                                                t,
                                                                                r,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "actor",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            n,
                                                                                            u,
                                                                                            N,
                                                                                            j,
                                                                                            _,
                                                                                            w,
                                                                                            a,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "UnassignedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            V,
                                                                        type: "MilestonedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            V,
                                                                        type: "DemilestonedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            U,
                                                                        type: "SubscribedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            U,
                                                                        type: "UnsubscribedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            U,
                                                                        type: "MentionedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                r,
                                                                                K,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "duplicateOf",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            n,
                                                                                            O,
                                                                                            b,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "closingProjectItemStatus",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "closer",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            n,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        c,
                                                                                                        q,
                                                                                                    ],
                                                                                                type: "ProjectV2",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        c,
                                                                                                        d,
                                                                                                        H,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        c,
                                                                                                        $,
                                                                                                        H,
                                                                                                    ],
                                                                                                type: "Commit",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            b,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                E,
                                                                            ],
                                                                        type: "ClosedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            z,
                                                                        type: "ReopenedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                r,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "lockReason",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                E,
                                                                            ],
                                                                        type: "LockedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            z,
                                                                        type: "UnlockedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            z,
                                                                        type: "PinnedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            z,
                                                                        type: "UnpinnedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                r,
                                                                                E,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "currentTitle",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "previousTitle",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "RenamedTitleEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            G,
                                                                        type: "BlockedByAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            G,
                                                                        type: "BlockedByRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            Y,
                                                                        type: "BlockingAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            Y,
                                                                        type: "BlockingRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                r,
                                                                                E,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "deletedCommentAuthor",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        o,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "CommentDeletedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                r,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "blockDuration",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                E,
                                                                                {
                                                                                    alias: "blockedUser",
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "User",
                                                                                    kind: "LinkedField",
                                                                                    name: "subject",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            u,
                                                                                            a,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "UserBlockedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            J,
                                                                        type: "SubIssueAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            J,
                                                                        type: "SubIssueRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            Z,
                                                                        type: "ParentIssueAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            Z,
                                                                        type: "ParentIssueRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                a,
                                                                                t,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "willCloseSubject",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "subject",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        h,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                E,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Commit",
                                                                                    kind: "LinkedField",
                                                                                    name: "commit",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "message",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "messageHeadlineHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "messageBodyHTML",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            c,
                                                                                            $,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                concreteType:
                                                                                                    "Repository",
                                                                                                kind: "LinkedField",
                                                                                                name: "repository",
                                                                                                plural: !1,
                                                                                                selections:
                                                                                                    [
                                                                                                        m,
                                                                                                        S,
                                                                                                        {
                                                                                                            alias: null,
                                                                                                            args: null,
                                                                                                            kind: "ScalarField",
                                                                                                            name: "defaultBranch",
                                                                                                            storageKey:
                                                                                                                null,
                                                                                                        },
                                                                                                        a,
                                                                                                    ],
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            a,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                r,
                                                                            ],
                                                                        type: "ReferencedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ee,
                                                                        type: "ConnectedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                E,
                                                                                r,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Repository",
                                                                                    kind: "LinkedField",
                                                                                    name: "fromRepository",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            y,
                                                                                            c,
                                                                                            a,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "TransferredEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            ee,
                                                                        type: "DisconnectedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                E,
                                                                                r,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "canonical",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            n,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        a,
                                                                                                        d,
                                                                                                        el,
                                                                                                    ],
                                                                                                type: "Issue",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    [
                                                                                                        d,
                                                                                                        a,
                                                                                                        el,
                                                                                                    ],
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            b,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                en,
                                                                                t,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "viewerCanUndo",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                a,
                                                                                {
                                                                                    kind: "ClientExtension",
                                                                                    selections:
                                                                                        [
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "pendingUndo",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                        ],
                                                                                },
                                                                            ],
                                                                        type: "MarkedAsDuplicateEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                E,
                                                                                r,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "canonical",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            n,
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    ea,
                                                                                                type: "Issue",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            {
                                                                                                kind: "InlineFragment",
                                                                                                selections:
                                                                                                    ea,
                                                                                                type: "PullRequest",
                                                                                                abstractKey:
                                                                                                    null,
                                                                                            },
                                                                                            b,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                en,
                                                                                t,
                                                                            ],
                                                                        type: "UnmarkedAsDuplicateEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                E,
                                                                                r,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "Discussion",
                                                                                    kind: "LinkedField",
                                                                                    name: "discussion",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            c,
                                                                                            d,
                                                                                            a,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "ConvertedToDiscussionEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                r,
                                                                                E,
                                                                                es,
                                                                            ],
                                                                        type: "AddedToProjectV2Event",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                r,
                                                                                E,
                                                                                es,
                                                                            ],
                                                                        type: "RemovedFromProjectV2Event",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                r,
                                                                                E,
                                                                                es,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "previousStatus",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "status",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "ProjectV2ItemStatusChangedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                r,
                                                                                E,
                                                                                t,
                                                                            ],
                                                                        type: "ConvertedFromDraftEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            er,
                                                                        type: "IssueTypeAddedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            er,
                                                                        type: "IssueTypeRemovedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "InlineFragment",
                                                                        selections:
                                                                            [
                                                                                t,
                                                                                E,
                                                                                r,
                                                                                et,
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        "IssueType",
                                                                                    kind: "LinkedField",
                                                                                    name: "prevIssueType",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        ei,
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                        type: "IssueTypeChangedEvent",
                                                                        abstractKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        kind: "ClientExtension",
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "__id",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                            ],
                                                                    },
                                                                    b,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            {
                                                alias: "backTimelineItems",
                                                args: s,
                                                filters: ["visibleEventsOnly"],
                                                handle: "connection",
                                                key: "Issue__backTimelineItems",
                                                kind: "LinkedHandle",
                                                name: "timelineItems",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "28d101105c844754fc3593a3e390ae60",
                        metadata: {},
                        name: "NewTimelinePaginationBackQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            ob.hash = "e6e5cdceec67c97db7247ef4886cb73a";
            let oh = (function () {
                var e = ["backTimelineItems"],
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    s = [a],
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    t = [i],
                    r = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Label",
                            kind: "LinkedField",
                            name: "label",
                            plural: !1,
                            selections: t,
                            storageKey: null,
                        },
                    ],
                    u = {
                        kind: "InlineFragment",
                        selections: t,
                        type: "User",
                        abstractKey: null,
                    },
                    o = {
                        kind: "InlineFragment",
                        selections: t,
                        type: "Bot",
                        abstractKey: null,
                    },
                    d = {
                        kind: "InlineFragment",
                        selections: t,
                        type: "Mannequin",
                        abstractKey: null,
                    },
                    c = {
                        kind: "InlineFragment",
                        selections: t,
                        type: "Organization",
                        abstractKey: null,
                    },
                    m = [
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: t,
                            storageKey: null,
                        },
                    ],
                    g = {
                        kind: "ClientExtension",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__id",
                                storageKey: null,
                            },
                        ],
                    };
                return {
                    argumentDefinitions: [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "count",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cursor",
                        },
                    ],
                    kind: "Fragment",
                    metadata: {
                        connection: [
                            {
                                count: "count",
                                cursor: "cursor",
                                direction: "backward",
                                path: e,
                            },
                        ],
                        refetch: {
                            connection: {
                                forward: null,
                                backward: { count: "count", cursor: "cursor" },
                                path: e,
                            },
                            fragmentPathInResult: ["node"],
                            operation: ob,
                            identifierInfo: {
                                identifierField: "id",
                                identifierQueryVariableName: "id",
                            },
                        },
                    },
                    name: "useTimelineItemsBackFragment",
                    selections: [
                        {
                            alias: "backTimelineItems",
                            args: [
                                {
                                    kind: "Literal",
                                    name: "visibleEventsOnly",
                                    value: !0,
                                },
                            ],
                            concreteType: "IssueTimelineItemsConnection",
                            kind: "LinkedField",
                            name: "__Issue__backTimelineItems_connection",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "PageInfo",
                                    kind: "LinkedField",
                                    name: "pageInfo",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "hasPreviousPage",
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "startCursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "totalCount",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "IssueTimelineItemsEdge",
                                    kind: "LinkedField",
                                    name: "edges",
                                    plural: !0,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            concreteType: null,
                                            kind: "LinkedField",
                                            name: "node",
                                            plural: !1,
                                            selections: [
                                                {
                                                    kind: "InlineDataFragmentSpread",
                                                    name: "IssueTimelineItem",
                                                    selections: [
                                                        l,
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                n,
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "createdAt",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "actor",
                                                                    plural: !1,
                                                                    selections:
                                                                        s,
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "TimelineEvent",
                                                            abstractKey:
                                                                "__isTimelineEvent",
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                n,
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "viewerDidAuthor",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        "Issue",
                                                                    kind: "LinkedField",
                                                                    name: "issue",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                concreteType:
                                                                                    null,
                                                                                kind: "LinkedField",
                                                                                name: "author",
                                                                                plural: !1,
                                                                                selections:
                                                                                    s,
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "author",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            a,
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "avatarUrl",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                            {
                                                                                alias: null,
                                                                                args: null,
                                                                                kind: "ScalarField",
                                                                                name: "profileUrl",
                                                                                storageKey:
                                                                                    null,
                                                                            },
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "IssueComment",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "source",
                                                                    plural: !1,
                                                                    selections:
                                                                        [l],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    kind: "ScalarField",
                                                                    name: "willCloseTarget",
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "CrossReferencedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: r,
                                                            type: "LabeledEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: r,
                                                            type: "UnlabeledEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "assignee",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            u,
                                                                            o,
                                                                            d,
                                                                            c,
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "AssignedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: [
                                                                {
                                                                    alias: null,
                                                                    args: null,
                                                                    concreteType:
                                                                        null,
                                                                    kind: "LinkedField",
                                                                    name: "assignee",
                                                                    plural: !1,
                                                                    selections:
                                                                        [
                                                                            l,
                                                                            u,
                                                                            o,
                                                                            d,
                                                                            c,
                                                                        ],
                                                                    storageKey:
                                                                        null,
                                                                },
                                                            ],
                                                            type: "UnassignedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: m,
                                                            type: "MilestonedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            kind: "InlineFragment",
                                                            selections: m,
                                                            type: "DemilestonedEvent",
                                                            abstractKey: null,
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "IssueComment_issueComment",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "SubscribedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnsubscribedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "MentionedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ClosedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ReopenedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "LockedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnlockedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "PinnedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnpinnedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "LabeledEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "RenamedTitleEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnlabeledEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnassignedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "AssignedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "BlockedByAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "BlockedByRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "BlockingAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "BlockingRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "CommentDeletedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UserBlockedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "SubIssueAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "SubIssueRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ParentIssueAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ParentIssueRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "MilestonedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "DemilestonedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "CrossReferencedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ReferencedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ConnectedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "TransferredEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "DisconnectedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "MarkedAsDuplicateEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "UnmarkedAsDuplicateEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ConvertedToDiscussionEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "AddedToProjectV2Event",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "RemovedFromProjectV2Event",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ProjectV2ItemStatusChangedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "ConvertedFromDraftEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "IssueTypeAddedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "IssueTypeRemovedEvent",
                                                        },
                                                        {
                                                            args: null,
                                                            kind: "FragmentSpread",
                                                            name: "IssueTypeChangedEvent",
                                                        },
                                                        g,
                                                    ],
                                                    args: null,
                                                    argumentDefinitions: [],
                                                },
                                                g,
                                                l,
                                            ],
                                            storageKey: null,
                                        },
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "cursor",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey:
                                "__Issue__backTimelineItems_connection(visibleEventsOnly:true)",
                        },
                        i,
                    ],
                    type: "Issue",
                    abstractKey: null,
                };
            })();
            oh.hash = "e6e5cdceec67c97db7247ef4886cb73a";
            let of = {
                    LabeledEvent: new Set(["LabeledEvent", "UnlabeledEvent"]),
                    UnlabeledEvent: new Set(["LabeledEvent", "UnlabeledEvent"]),
                    CrossReferencedEvent: new Set(["CrossReferencedEvent"]),
                    ReferencedEvent: new Set(["ReferencedEvent"]),
                    AssignedEvent: new Set([
                        "AssignedEvent",
                        "UnassignedEvent",
                    ]),
                    UnassignedEvent: new Set([
                        "AssignedEvent",
                        "UnassignedEvent",
                    ]),
                    AddedToProjectV2Event: new Set([
                        "AddedToProjectV2Event",
                        "RemovedFromProjectV2Event",
                    ]),
                    RemovedFromProjectV2Event: new Set([
                        "AddedToProjectV2Event",
                        "RemovedFromProjectV2Event",
                    ]),
                    MilestonedEvent: new Set([
                        "MilestonedEvent",
                        "DemilestonedEvent",
                    ]),
                    DemilestonedEvent: new Set([
                        "MilestonedEvent",
                        "DemilestonedEvent",
                    ]),
                    SubIssueAddedEvent: new Set(["SubIssueAddedEvent"]),
                    SubIssueRemovedEvent: new Set(["SubIssueRemovedEvent"]),
                    BlockedByAddedEvent: new Set(["BlockedByAddedEvent"]),
                    BlockedByRemovedEvent: new Set(["BlockedByRemovedEvent"]),
                    BlockingAddedEvent: new Set(["BlockingAddedEvent"]),
                    BlockingRemovedEvent: new Set(["BlockingRemovedEvent"]),
                },
                oK = (e) => {
                    if (e?.__typename && of[e.__typename])
                        return (e.createdAt && new Date(e.createdAt)) || void 0;
                },
                oS = (e) =>
                    "CrossReferencedEvent" !== e.__typename ||
                    !e.willCloseTarget,
                oI = (e, l) => {
                    if (
                        !e ||
                        !l ||
                        !e.actor ||
                        !of[e.__typename]?.has(l.__typename) ||
                        e.actor?.login !== l.actor?.login ||
                        !oS(e) ||
                        !oS(l)
                    )
                        return !1;
                    let n = oK(e),
                        a = oK(l);
                    return !(
                        void 0 === n ||
                        void 0 === a ||
                        Math.abs(n.getTime() - a.getTime()) > 6048e5
                    );
                },
                ov = (e) => {
                    let l = 0;
                    for (let n in e) l += e[n].length;
                    return l;
                },
                oL = (e) => {
                    let l = [],
                        n = 0;
                    for (; n < e.length; ) {
                        let a = oT(e, n),
                            s = ov(a),
                            i = e[n];
                        (a && ox(a),
                            l.push({
                                item: i ?? null,
                                rollupGroup: s > 1 ? a : void 0,
                            }),
                            (n += Math.max(s, 1)));
                    }
                    return l;
                },
                oT = (e, l) => {
                    let n = e[l],
                        a = [n];
                    for (; l + 1 < e.length; ) {
                        let s = e[l + 1];
                        if (!oI(n, s) || a.length >= 20) break;
                        ((n = s), a.push(n), l++);
                    }
                    return oC(a);
                },
                oC = (e) => {
                    let l = {},
                        n = 0;
                    for (let a of e) {
                        if (!a) continue;
                        let e = a.__typename;
                        (l[e] || (l[e] = []),
                            l[e].push({ __index: n, ...a }),
                            n++);
                    }
                    return l;
                },
                ox = (e) => {
                    for (let l of Object.values(e)) {
                        let e = new Set();
                        for (let n = 0; n < l.length; n++) {
                            let a = l[n];
                            if (!a) continue;
                            let { __typename: s } = a || {},
                                i = oR(a);
                            if (i) {
                                let a = `${i}-${s}`;
                                e.has(a) ? l.splice(n--, 1) : e.add(a);
                            }
                        }
                    }
                },
                oR = (e) => {
                    switch (e?.__typename) {
                        case "LabeledEvent":
                        case "UnlabeledEvent":
                            return e?.label?.id;
                        case "AssignedEvent":
                        case "UnassignedEvent":
                            return e?.assignee?.__typename !== "%other"
                                ? e?.assignee?.id
                                : void 0;
                        default:
                            return;
                    }
                },
                oN = { kind: "InlineDataFragment", name: "IssueTimelineItem" };
            oN.hash = "b5d6fad862b80c12117b2efb0ab611b3";
            let oj = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueComment_issueComment",
                    selections: [
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueCommentViewerCommentRow",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueCommentViewerReactable",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueCommentEditor_repository",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueCommentEditorBodyFragment",
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "issue",
                            plural: !1,
                            selections: [e],
                            storageKey: null,
                        },
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdViaEmail",
                            storageKey: null,
                        },
                    ],
                    type: "IssueComment",
                    abstractKey: null,
                };
            })();
            oj.hash = "cdcaaff97700069cfbbc28c2956b07f0";
            let o_ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueCommentEditor_repository",
                selections: [
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "slashCommandsEnabled",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "nameWithOwner",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "databaseId",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "IssueComment",
                abstractKey: null,
            };
            o_.hash = "ed1c5fd22a973ac313b7b49b9ffa3105";
            let ow = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueCommentEditorBodyFragment",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "body",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "bodyVersion",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "author",
                            plural: !1,
                            selections: [
                                l,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "avatarUrl",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "issue",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "databaseId",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "author",
                                    plural: !1,
                                    selections: [l],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueCommentHeader",
                        },
                    ],
                    type: "IssueComment",
                    abstractKey: null,
                };
            })();
            ow.hash = "ccd3b10437b5d35f704f99ca1d9a6735";
            let oE = {
                    CommentBox: "IssueCommentEditor-module__CommentBox--fbuga",
                    EditorMarginContainer:
                        "IssueCommentEditor-module__EditorMarginContainer--vSuW7",
                },
                oA = (function () {
                    var e = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        l = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        a = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "login",
                            storageKey: null,
                        };
                    return {
                        argumentDefinitions: [],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueCommentHeader",
                        selections: [
                            e,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "databaseId",
                                storageKey: null,
                            },
                            l,
                            n,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "body",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "authorAssociation",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "viewerCanUpdate",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "viewerCanDelete",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "viewerCanMinimize",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "viewerCanReport",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "viewerCanReportToMaintainer",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "viewerCanBlockFromOrg",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "viewerCanUnblockFromOrg",
                                storageKey: null,
                            },
                            {
                                alias: "isHidden",
                                args: null,
                                kind: "ScalarField",
                                name: "isMinimized",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "minimizedReason",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "showSpammyBadge",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "createdViaEmail",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "viewerDidAuthor",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "Sponsorship",
                                kind: "LinkedField",
                                name: "authorToRepoOwnerSponsorship",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isActive",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "author",
                                plural: !1,
                                selections: [e, a],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    e,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "name",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "owner",
                                        plural: !1,
                                        selections: [e, a, l],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isPrivate",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "Issue",
                                kind: "LinkedField",
                                name: "issue",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "number",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "MarkdownEditHistoryViewer_comment",
                            },
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "MarkdownLastEditedBy",
                            },
                            {
                                kind: "ClientExtension",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "pendingMinimizeReason",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "pendingBlock",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "pendingUnblock",
                                        storageKey: null,
                                    },
                                ],
                            },
                        ],
                        type: "IssueComment",
                        abstractKey: null,
                    };
                })();
            oA.hash = "7ae2bcca5bfae7b670d91754387ae67b";
            let oP = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "connections",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "clientMutationId",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "deleteIssueCommentMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "DeleteIssueCommentPayload",
                                kind: "LinkedField",
                                name: "deleteIssueComment",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueComment",
                                        kind: "LinkedField",
                                        name: "issueComment",
                                        plural: !1,
                                        selections: [a],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "deleteIssueCommentMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "DeleteIssueCommentPayload",
                                kind: "LinkedField",
                                name: "deleteIssueComment",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueComment",
                                        kind: "LinkedField",
                                        name: "issueComment",
                                        plural: !1,
                                        selections: [
                                            a,
                                            {
                                                alias: null,
                                                args: null,
                                                filters: null,
                                                handle: "deleteEdge",
                                                key: "",
                                                kind: "ScalarHandle",
                                                name: "id",
                                                handleArgs: [
                                                    {
                                                        kind: "Variable",
                                                        name: "connections",
                                                        variableName:
                                                            "connections",
                                                    },
                                                ],
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "b0f125991160e607a64d9407db9c01b3",
                        metadata: {},
                        name: "deleteIssueCommentMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function oB(e, l) {
                for (let n of l) {
                    let l = e.get(n);
                    if (l) {
                        let e = Number(l.getValue("totalCount"));
                        isNaN(e) || l.setValue(e - 1, "totalCount");
                    }
                }
            }
            oP.hash = "df574a3555b46c55b652c9621c8d3581";
            let oD = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "clientMutationId",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isMinimized",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "minimizedReason",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "minimizeCommentMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "MinimizeCommentPayload",
                                kind: "LinkedField",
                                name: "minimizeComment",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "minimizedComment",
                                        plural: !1,
                                        selections: [a, s],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "minimizeCommentMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "MinimizeCommentPayload",
                                kind: "LinkedField",
                                name: "minimizeComment",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "minimizedComment",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                            a,
                                            s,
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "id",
                                                        storageKey: null,
                                                    },
                                                ],
                                                type: "Node",
                                                abstractKey: "__isNode",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "04ba37f7e52d10064ab666f7ddeec8cf",
                        metadata: {},
                        name: "minimizeCommentMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            oD.hash = "32b76c06b9ed656b474cba5d4a6b96e4";
            let oM = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "clientMutationId",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "isMinimized",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "minimizedReason",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "unminimizeCommentMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "UnminimizeCommentPayload",
                                kind: "LinkedField",
                                name: "unminimizeComment",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "unminimizedComment",
                                        plural: !1,
                                        selections: [a, s],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "unminimizeCommentMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "UnminimizeCommentPayload",
                                kind: "LinkedField",
                                name: "unminimizeComment",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: null,
                                        kind: "LinkedField",
                                        name: "unminimizedComment",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                            a,
                                            s,
                                            {
                                                kind: "InlineFragment",
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "id",
                                                        storageKey: null,
                                                    },
                                                ],
                                                type: "Node",
                                                abstractKey: "__isNode",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "988dd6bb9180a9aaf6aa1e5b469f0443",
                        metadata: {},
                        name: "unminimizeCommentMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            oM.hash = "03ac2faeeddfe3c11f404095d6800e93";
            var oV = n(38829),
                oU = n(26156),
                oO = n(71073);
            function oq({ id: e }) {
                let l = (0, oV.f)({ id: e });
                return l
                    ? (0, F.jsx)(e4._, {
                          editInformation: l,
                          includeSeparator: !0,
                      })
                    : null;
            }
            try {
                oq.displayName ||
                    (oq.displayName = "CommentHeaderLastEditedBy");
            } catch {}
            function oH({
                hideActions: e,
                lazyFetchEditHistory: l = !1,
                ...n
            }) {
                let a = (0, F.jsx)(oq, { id: n.comment.id }),
                    s = l
                        ? (0, F.jsx)(Q.Suspense, {
                              fallback: null,
                              children: (0, F.jsx)(o$, { id: n.comment.id }),
                          })
                        : (0, F.jsx)(e2.W, { editHistory: n.comment });
                return (0, F.jsx)(oU.v, {
                    lastEditedByMessage: a,
                    editHistoryComponent: s,
                    ...n,
                    actions: e ? void 0 : (0, F.jsx)(oO.p, { ...n }),
                });
            }
            function o$({ id: e }) {
                let l = (0, oV.f)({ id: e });
                return l ? (0, F.jsx)(e2.W, { editHistory: l }) : null;
            }
            try {
                oH.displayName || (oH.displayName = "CommentHeader");
            } catch {}
            try {
                o$.displayName || (o$.displayName = "CommentHeaderEditHistory");
            } catch {}
            function oz({
                anchorBaseUrl: e,
                comment: l,
                commentAuthorLogin: n,
                editComment: a,
                onReplySelect: s,
                isMinimized: i = !1,
                onMinimize: t,
                navigate: r,
                avatarUrl: u,
                commentRef: o,
                relayConnectionIds: d,
                commentSubjectAuthorLogin: c,
                hideActions: m = !1,
                commentAuthorType: g,
                hasDisabledActions: y = !1,
            }) {
                let p = (0, N.useFragment)(oA, l),
                    k = (0, N.useRelayEnvironment)(),
                    b = (0, lf.S)(),
                    { addToast: h } = (0, M.Y6)(),
                    f = (0, Q.useCallback)(
                        async (e) => {
                            !(function ({
                                environment: e,
                                input: { id: l, reason: n },
                                onCompleted: a,
                                onError: s,
                            }) {
                                (0, N.commitMutation)(e, {
                                    mutation: oD,
                                    variables: {
                                        input: { subjectId: l, classifier: n },
                                    },
                                    optimisticResponse: {
                                        minimizeComment: {
                                            clientMutationId: "",
                                            minimizedComment: {
                                                id: l,
                                                __typename: "IssueComment",
                                                __isNode: "IssueComment",
                                                isMinimized: !0,
                                                minimizedReason: n,
                                            },
                                        },
                                    },
                                    onCompleted: (e) => {
                                        null === e.minimizeComment
                                            ? s?.()
                                            : a?.();
                                    },
                                    onError: (e) => s?.(e),
                                });
                            })({
                                environment: k,
                                input: { id: p.id, reason: e },
                                onError: () => {
                                    h({
                                        type: "error",
                                        message: "Failed to hide comment",
                                    });
                                },
                            });
                        },
                        [h, k, p.id]
                    ),
                    K = (0, Q.useCallback)(async () => {
                        !(function ({
                            environment: e,
                            input: { id: l },
                            onCompleted: n,
                            onError: a,
                        }) {
                            (0, N.commitMutation)(e, {
                                mutation: oM,
                                variables: { input: { subjectId: l } },
                                optimisticResponse: {
                                    unminimizeComment: {
                                        clientMutationId: "",
                                        unminimizedComment: {
                                            id: l,
                                            __typename: "IssueComment",
                                            __isNode: "IssueComment",
                                            isMinimized: !1,
                                            minimizedReason: null,
                                        },
                                    },
                                },
                                onCompleted: (s) => {
                                    null === s.unminimizeComment
                                        ? a?.()
                                        : ((0, N.commitLocalUpdate)(e, (e) => {
                                              let n = e.get(l);
                                              n?.setValue(
                                                  null,
                                                  "pendingMinimizeReason"
                                              );
                                          }),
                                          n?.());
                                },
                                onError: (e) => a?.(e),
                            });
                        })({
                            environment: k,
                            input: { id: p.id },
                            onError: () => {
                                h({
                                    type: "error",
                                    message: "Failed to unhide comment",
                                });
                            },
                        });
                    }, [h, k, p.id]),
                    S = (0, Q.useCallback)(async () => {
                        (await b({
                            title: eI.k.confirmations.deleteCommentTitle,
                            content: eI.k.confirmations.deleteCommentContent,
                            confirmButtonContent:
                                eI.k.confirmations
                                    .deleteCommentConfirmButtonContent,
                            confirmButtonType: "danger",
                        })) &&
                            !(function ({
                                environment: e,
                                connectionIds: l,
                                input: { id: n },
                                onCompleted: a,
                                onError: s,
                            }) {
                                (0, N.commitMutation)(e, {
                                    mutation: oP,
                                    variables: {
                                        input: { id: n },
                                        connections: l,
                                    },
                                    optimisticResponse: {
                                        deleteIssueComment: {
                                            clientMutationId: "",
                                            issueComment: { id: n },
                                        },
                                    },
                                    optimisticUpdater: (e) => oB(e, l),
                                    updater: (e) => oB(e, l),
                                    onCompleted: (e) => {
                                        null === e.deleteIssueComment
                                            ? s?.()
                                            : a?.();
                                    },
                                    onError: (e) => s?.(e),
                                });
                            })({
                                environment: k,
                                connectionIds: d ?? [],
                                input: { id: p.id },
                                onError: () => {
                                    h({
                                        type: "error",
                                        message: eS.couldNotDeleteComment,
                                    });
                                },
                            });
                    }, [b, p.id, d, k, h]),
                    I = e ? `${e}#issuecomment-${p.databaseId}` : p.url;
                return (0, F.jsx)(oH, {
                    comment: {
                        ...p,
                        referenceText: `#${p.issue.number}`,
                        url: I,
                        viewerCanSeeMinimizeButton: !0,
                        viewerCanSeeUnminimizeButton: !0,
                    },
                    editComment: a,
                    onReplySelect: s,
                    isMinimized: i,
                    onMinimize: t,
                    commentAuthorLogin: n,
                    navigate: r,
                    avatarUrl: u,
                    hideComment: f,
                    unhideComment: K,
                    deleteComment: S,
                    commentRef: o,
                    viewerDidAuthor: p.viewerDidAuthor,
                    commentSubjectAuthorLogin: c,
                    commentSubjectType: "issue",
                    hideActions: m,
                    isDisabled: y,
                    commentAuthorType: g,
                    id: `issuecomment-${p.databaseId}`,
                });
            }
            try {
                oz.displayName || (oz.displayName = "IssueCommentHeader");
            } catch {}
            let oW = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "input",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "input",
                            variableName: "input",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "bodyVersion",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "updateIssueCommentBodyMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "UpdateIssueCommentPayload",
                                kind: "LinkedField",
                                name: "updateIssueComment",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueComment",
                                        kind: "LinkedField",
                                        name: "issueComment",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "IssueCommentViewerMarkdownViewer",
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "updateIssueCommentBodyMutation",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "UpdateIssueCommentPayload",
                                kind: "LinkedField",
                                name: "updateIssueComment",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "IssueComment",
                                        kind: "LinkedField",
                                        name: "issueComment",
                                        plural: !1,
                                        selections: [
                                            n,
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "id",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "body",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: [
                                                    {
                                                        kind: "Literal",
                                                        name: "unfurlReferences",
                                                        value: !0,
                                                    },
                                                ],
                                                kind: "ScalarField",
                                                name: "bodyHTML",
                                                storageKey:
                                                    "bodyHTML(unfurlReferences:true)",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "viewerCanUpdate",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "93dc3b03583ff1e7ca5a159bb4220086",
                        metadata: {},
                        name: "updateIssueCommentBodyMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function oQ({
                environment: e,
                input: { id: l, body: n, bodyVersion: a },
                onCompleted: s,
                onError: i,
                withOptimisticResponse: t = !1,
            }) {
                if (n)
                    return (0, N.commitMutation)(e, {
                        mutation: oW,
                        variables: {
                            input: { id: l, body: n, bodyVersion: a },
                        },
                        optimisticResponse: t
                            ? {
                                  updateIssueComment: {
                                      issueComment: {
                                          id: l,
                                          body: n,
                                          bodyHTML: em(n),
                                          bodyVersion: a,
                                          viewerCanUpdate: !1,
                                      },
                                  },
                              }
                            : void 0,
                        onCompleted: (e) => s && s(e),
                        onError: (e) => i && i(e),
                    });
            }
            function oG({
                initialValue: e = "",
                comment: l,
                repo: n,
                cancelEdit: a,
                onSave: s,
                onChange: i,
                setIsEditing: t,
                setHasDisabledActions: r,
                isSubmitting: u,
                setIsSubmitting: o,
                initialValidationResult: d,
                setManualValidationResult: c,
            }) {
                let m = (0, Q.useRef)(null),
                    g = (0, eq.useFragment)(ow, l),
                    { body: y, bodyVersion: p } = g,
                    { repository: k } = (0, eq.useFragment)(o_, n),
                    b = k.databaseId,
                    h = (0, N.useRelayEnvironment)(),
                    { addToast: f } = (0, M.Y6)(),
                    [K, S] = (0, Q.useState)(e || y),
                    [I] = (0, Q.useState)(p),
                    v = (0, Q.useMemo)(() => (0, eH.KG)(K), [K]),
                    L = (0, Q.useCallback)(
                        (e) => {
                            let l = ec(K);
                            (l ? (t(!1), r(!0)) : o(!0),
                                oQ({
                                    environment: h,
                                    input: { id: e, body: K, bodyVersion: I },
                                    onError: (e) => {
                                        (o(!1),
                                            r(!1),
                                            f({
                                                type: "error",
                                                message: e.message.startsWith(
                                                    eI.k.staleCommentErrorPrefix
                                                )
                                                    ? eS.couldNotEditCommentStale
                                                    : eS.couldNotEditComment,
                                            }),
                                            e.message.startsWith(
                                                eI.k.staleCommentErrorPrefix
                                            )
                                                ? c?.({
                                                      isValid: !1,
                                                      errorMessage:
                                                          eS.couldNotEditCommentStale,
                                                  })
                                                : s());
                                    },
                                    onCompleted: (e) => {
                                        (o(!1),
                                            r(!1),
                                            e?.updateIssueComment
                                                ? s()
                                                : f({
                                                      type: "error",
                                                      message:
                                                          eS.couldNotEditComment,
                                                  }));
                                    },
                                    withOptimisticResponse: l,
                                }));
                        },
                        [K, h, I, t, r, o, f, s, c]
                    );
                (0, Q.useEffect)(() => {
                    m && m.current && m.current.focus();
                }, [m]);
                let C = (0, Q.useMemo)(
                        () => ({
                            type: "issue_comment",
                            id: {
                                id: g.issue.id,
                                databaseId: g.issue.databaseId,
                            },
                            repository: {
                                databaseId: b,
                                nwo: k.nameWithOwner,
                                slashCommandsEnabled: k.slashCommandsEnabled,
                            },
                        }),
                        [
                            g.issue.databaseId,
                            g.issue.id,
                            k.nameWithOwner,
                            k.slashCommandsEnabled,
                            b,
                        ]
                    ),
                    x = (0, _.G7)("issues_lazy_load_comment_box_suggestions");
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsx)(oz, {
                            comment: g,
                            commentAuthorLogin: g.author.login,
                            avatarUrl: g.author.avatarUrl,
                            commentSubjectAuthorLogin: g.issue.author?.login,
                            editComment: lB.l,
                            onReplySelect: lB.l,
                            navigate: lB.l,
                            hideActions: !0,
                        }),
                        (0, F.jsx)("div", {
                            className: oE.EditorMarginContainer,
                            children: (0, F.jsx)(T.hF, {
                                disabled: u,
                                subject: C,
                                ref: m,
                                value: e || K,
                                placeholder: "",
                                onSave: () => L(g.id),
                                onCancel: () => {
                                    a();
                                },
                                validationResult: d || v,
                                onChange: (e) => {
                                    (S(e), i(e));
                                },
                                saveButtonText: ef.updateComment,
                                saveButtonTrailingIcon: !u,
                                buttonSize: "medium",
                                teamHovercardsEnabled: !0,
                                markdownSuggestionsFetchMethod: x
                                    ? "lazy"
                                    : "eager",
                                className: oE.CommentBox,
                                ...(0, ep.G)(ev.Y.commentBox("comment-editor")),
                            }),
                        }),
                    ],
                });
            }
            oW.hash = "f4cdbbb6d54b34b2c63e5485bb3c7366";
            try {
                oG.displayName || (oG.displayName = "IssueCommentEditor");
            } catch {}
            let oY = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "id",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueCommentViewerCommentRow",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "databaseId",
                            storageKey: null,
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueCommentViewerMarkdownViewer",
                        },
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "IssueCommentHeader",
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "author",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "avatarUrl",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "login",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "__typename",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "issue",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "locked",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "body",
                            storageKey: null,
                        },
                        {
                            alias: "isHidden",
                            args: null,
                            kind: "ScalarField",
                            name: "isMinimized",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanUpdate",
                            storageKey: null,
                        },
                        {
                            kind: "ClientExtension",
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "pendingMinimizeReason",
                                    storageKey: null,
                                },
                            ],
                        },
                    ],
                    type: "IssueComment",
                    abstractKey: null,
                };
            })();
            oY.hash = "4115af1dd0ae4ebb85035229b2bc2eca";
            let oX = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [{ kind: "Variable", name: "id", variableName: "id" }],
                    n = {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: [
                                    {
                                        kind: "Literal",
                                        name: "unfurlReferences",
                                        value: !0,
                                    },
                                ],
                                kind: "ScalarField",
                                name: "bodyHTML",
                                storageKey: "bodyHTML(unfurlReferences:true)",
                            },
                        ],
                        type: "IssueComment",
                        abstractKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueCommentViewerRefetchQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [n],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "IssueCommentViewerRefetchQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "63c701267cbc19097f81dc1696236cd8",
                        metadata: {},
                        name: "IssueCommentViewerRefetchQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            oX.hash = "f3c45e1d906dff3d9ed86f63f50ec578";
            let oJ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueCommentViewerMarkdownViewer",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "body",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: [
                            {
                                kind: "Literal",
                                name: "unfurlReferences",
                                value: !0,
                            },
                        ],
                        kind: "ScalarField",
                        name: "bodyHTML",
                        storageKey: "bodyHTML(unfurlReferences:true)",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "bodyVersion",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "viewerCanUpdate",
                        storageKey: null,
                    },
                ],
                type: "IssueComment",
                abstractKey: null,
            };
            oJ.hash = "cf59657a98906079d9b4beddaa916b19";
            let oZ = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ghostLogin",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "login",
                            variableName: "ghostLogin",
                        },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueCommentViewerGhostUserQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "user",
                                plural: !1,
                                selections: [n, a, s],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "IssueCommentViewerGhostUserQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: "User",
                                kind: "LinkedField",
                                name: "user",
                                plural: !1,
                                selections: [
                                    n,
                                    a,
                                    s,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "id",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "ec6252bcd5af2a4fab688b0e24e99458",
                        metadata: {},
                        name: "IssueCommentViewerGhostUserQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            oZ.hash = "f66f505e607780f5a3932be532fa9c15";
            let o0 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueCommentViewerReactable",
                selections: [
                    {
                        args: null,
                        kind: "FragmentSpread",
                        name: "ReactionViewerRelayGroups",
                    },
                ],
                type: "Reactable",
                abstractKey: "__isReactable",
            };
            o0.hash = "1f31ee0a210f3cb1c233957b963326e0";
            var o1 = n(19805),
                o2 = n(80293),
                o4 = n(12137);
            let o6 = {
                IssueCommentLayout:
                    "IssueCommentViewer-module__IssueCommentLayout--dw0jX",
                IssueCommentContent:
                    "IssueCommentViewer-module__IssueCommentContent--NdGAG",
                IssueCommentBody:
                    "IssueCommentViewer-module__IssueCommentBody--xvkt3",
            };
            function o5({ comment: e, ...l }) {
                let n = (0, eq.useFragment)(oY, e);
                return null != n.author
                    ? (0, F.jsx)(o3, {
                          comment: e,
                          ...l,
                          commentAuthorLogin: n.author.login,
                          commentSubjectAuthorLogin:
                              l.commentSubjectAuthorLogin,
                          avatarUrl: n.author.avatarUrl,
                          commentAuthorType: n.author.__typename,
                      })
                    : (0, F.jsx)(Q.Suspense, {
                          fallback: (0, F.jsx)(o4.i, {}),
                          children: (0, F.jsx)(o7, { comment: e, ...l }),
                      });
            }
            function o7(e) {
                let l = (0, N.useLazyLoadQuery)(
                    oZ,
                    { ghostLogin: ew.t.ghostUser.login },
                    { fetchPolicy: "store-or-network" }
                );
                if (null == l.user) throw Error("Ghost user not found");
                return (0, F.jsx)(o3, {
                    ...e,
                    commentAuthorLogin: l.user.login,
                    avatarUrl: l.user.avatarUrl,
                    commentAuthorType: l.user.__typename,
                    createdViaEmail: e.createdViaEmail,
                });
            }
            function o3({
                anchorBaseUrl: e,
                comment: l,
                setIsEditing: n,
                onLinkClick: a,
                onReply: s,
                refAttribute: i,
                commentAuthorLogin: t,
                avatarUrl: r,
                highlightedCommentId: u,
                navigate: o,
                relayConnectionIds: d,
                commentSubjectAuthorLogin: c,
                reactable: m,
                commentAuthorType: g,
                createdViaEmail: y = !1,
                hasDisabledActions: p = !1,
            }) {
                let k = (0, eq.useFragment)(oY, l),
                    b = (0, eq.useFragment)(o0, m),
                    h = String(k.databaseId) === u,
                    f = !!k.pendingMinimizeReason || k.isHidden,
                    [K, S] = (0, o2.N)(f),
                    I = (0, Q.useRef)(null),
                    v = (0, le.M3)() && !k.issue.locked;
                return (0, F.jsx)("div", {
                    className: (0, eb.$)(
                        eK.mU.issueComment,
                        o6.IssueCommentLayout
                    ),
                    ref: I,
                    children: (0, F.jsxs)("div", {
                        "data-testid": ev.Y.commentViewerOuterBox(k.id),
                        ref: h ? i : null,
                        className: o6.IssueCommentContent,
                        children: [
                            (0, F.jsx)(oz, {
                                anchorBaseUrl: e,
                                comment: k,
                                commentAuthorLogin: t,
                                navigate: o,
                                editComment: n,
                                onReplySelect: (e) => {
                                    s(e || (0, eM.s)(k.body));
                                },
                                isMinimized: K,
                                onMinimize: S,
                                avatarUrl: r,
                                commentRef: I,
                                relayConnectionIds: d,
                                commentSubjectAuthorLogin: c,
                                commentAuthorType: g,
                                hasDisabledActions: p,
                            }),
                            (!f || !K) &&
                                (0, F.jsxs)("div", {
                                    className: o6.IssueCommentBody,
                                    children: [
                                        (0, F.jsx)(o8, {
                                            comment: k,
                                            onLinkClick: a,
                                            createdViaEmail: y,
                                        }),
                                        (0, F.jsx)(o1.ReactionViewerRelay, {
                                            subjectId: k.id,
                                            reactionGroups: b,
                                            canReact: v,
                                        }),
                                    ],
                                }),
                        ],
                    }),
                });
            }
            function o8({ comment: e, onLinkClick: l, createdViaEmail: n }) {
                let {
                        id: a,
                        bodyVersion: s,
                        bodyHTML: i,
                        viewerCanUpdate: t,
                        body: r,
                    } = (0, eq.useFragment)(oJ, e),
                    u = (0, eq.useRelayEnvironment)(),
                    o = i ?? "",
                    d = (0, Q.useRef)(null),
                    c = (0, Q.useCallback)(
                        (e, l, n) => {
                            oQ({
                                environment: u,
                                input: { id: a, body: e, bodyVersion: s },
                                onCompleted: l,
                                onError: n,
                            });
                        },
                        [s, u, a]
                    ),
                    m = (0, Q.useCallback)((e) => e?.node?.bodyHTML, []);
                return (0, F.jsx)(eV, {
                    bodyHTML: o,
                    bodyRef: d,
                    id: a,
                    query: oX,
                    getHTML: m,
                    children: (0, F.jsx)(lk, {
                        html: o,
                        markdown: r,
                        viewerCanUpdate: t,
                        onSave: c,
                        onLinkClick: n ? void 0 : l,
                        createdViaEmail: n,
                        issueCommentBodyRef: d,
                    }),
                });
            }
            try {
                o5.displayName || (o5.displayName = "IssueCommentViewer");
            } catch {}
            try {
                o7.displayName ||
                    (o7.displayName =
                        "IssueCommentViewerInternalWithoutAuthor");
            } catch {}
            try {
                o3.displayName ||
                    (o3.displayName = "IssueCommentViewerInternal");
            } catch {}
            try {
                o8.displayName || (o8.displayName = "CommentMarkdownViewer");
            } catch {}
            function o9({
                anchorBaseUrl: e,
                comment: l,
                navigate: n,
                onLinkClick: a,
                onChange: s = lB.l,
                onEditCancel: i = lB.l,
                onReply: t = lB.l,
                onSave: r = lB.l,
                refAttribute: u,
                highlightedCommentId: o,
                relayConnectionIds: d,
                commentSubjectAuthorLogin: c,
            }) {
                let [m, g] = (0, Q.useState)(!1),
                    [y, p] = (0, Q.useState)(!1),
                    [k, b] = (0, Q.useState)(!1),
                    [h, f] = (0, Q.useState)(void 0),
                    K = (0, N.useFragment)(oj, l),
                    [S, I] = (0, eU.Fo)(
                        ew.t.localStorageKeys.issueComment(
                            "issuecomment",
                            K.issue.id,
                            K.id
                        ),
                        ""
                    ),
                    v = (0, Q.useCallback)(() => {
                        (g(!1), r(), I(void 0));
                    }, [r, I]),
                    L = (0, Q.useCallback)(
                        (e) => {
                            (I(e), s());
                        },
                        [s, I]
                    );
                return (0, F.jsx)(F.Fragment, {
                    children:
                        m || y || h
                            ? (0, F.jsx)(oG, {
                                  initialValidationResult: h,
                                  setManualValidationResult: f,
                                  setIsEditing: g,
                                  setIsSubmitting: p,
                                  setHasDisabledActions: b,
                                  isSubmitting: y,
                                  cancelEdit: () => {
                                      (g(!1), I(void 0), i());
                                  },
                                  onSave: v,
                                  comment: K,
                                  repo: K,
                                  initialValue: S,
                                  onChange: L,
                              })
                            : (0, F.jsx)(o5, {
                                  anchorBaseUrl: e,
                                  comment: K,
                                  reactable: K,
                                  setIsEditing: () => g(!0),
                                  onReply: t,
                                  onLinkClick: a,
                                  refAttribute: u,
                                  navigate: n,
                                  highlightedCommentId: o,
                                  relayConnectionIds: d,
                                  commentSubjectAuthorLogin: c,
                                  createdViaEmail: K.createdViaEmail,
                                  hasDisabledActions: k,
                              }),
                });
            }
            try {
                o9.displayName || (o9.displayName = "IssueComment");
            } catch {}
            let de = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "AddedToProjectV2Event",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "ProjectV2",
                        kind: "LinkedField",
                        name: "project",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "title",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "url",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "AddedToProjectV2Event",
                abstractKey: null,
            };
            de.hash = "dda7d1ba9e316cc1ddc44c45e28d7f66";
            let dl = (e, l) => `${e}#event-${l}`,
                dn = {
                    projectNameWrapper:
                        "AddedToProjectV2Event-module__projectNameWrapper--nTvru",
                    commaSeparator:
                        "AddedToProjectV2Event-module__commaSeparator--HH4BL",
                    andSeparator:
                        "AddedToProjectV2Event-module__andSeparator--zRcP3",
                },
                da = { projectLink: "ProjectV2-module__projectLink--jNx3U" };
            function ds({ url: e, title: l }) {
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsx)(W.A, { icon: V.TableIcon }),
                        " ",
                        (0, F.jsx)(ek.A, {
                            href: e,
                            inline: !0,
                            className: da.projectLink,
                            children: l,
                        }),
                    ],
                });
            }
            try {
                ds.displayName || (ds.displayName = "ProjectV2");
            } catch {}
            let di = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "RemovedFromProjectV2Event",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "ProjectV2",
                        kind: "LinkedField",
                        name: "project",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "title",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "url",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "RemovedFromProjectV2Event",
                abstractKey: null,
            };
            di.hash = "93b212ec62b6f7cb3f7acfc9102277db";
            let dt = {
                    Text: "RemovedFromProjectV2Event-module__Text--iKzZo",
                    Text_1: "RemovedFromProjectV2Event-module__Text_1--v82mO",
                    Text_2: "RemovedFromProjectV2Event-module__Text_2--ISVRT",
                },
                dr = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "TimelineRowEventActor",
                    selections: [
                        {
                            args: null,
                            kind: "FragmentSpread",
                            name: "EventActor",
                        },
                    ],
                    type: "Actor",
                    abstractKey: "__isActor",
                };
            dr.hash = "2dc15c7f313b6ec0395f08c1257a4d96";
            var du = n(42931),
                dd = n(24021);
            let dc = {
                timelineBodyRowContainer:
                    "row-module__timelineBodyRowContainer--O67ft",
                timelineBodyContent: "row-module__timelineBodyContent--eiX2y",
                timelineBodyTrailingContent:
                    "row-module__timelineBodyTrailingContent--ma8On",
                timelineAgoLink: "row-module__timelineAgoLink--qFdse",
                eventActorContainer: "row-module__eventActorContainer--_Dhnk",
                eventActorLink: "row-module__eventActorLink--tltLA",
                alignSelfCenter: "row-module__alignSelfCenter--KezXO",
                body: "row-module__body--T5IWm",
                fillRow: "row-module__fillRow--AP4Pe",
            };
            function dm({ timestamp: e, linkUrl: l }) {
                return (0, F.jsx)(ek.A, {
                    href: l,
                    className: dc.timelineAgoLink,
                    children: (0, F.jsxs)(e6.A, {
                        date: e,
                        children: [
                            "on ",
                            e.toLocaleDateString("en-US", {
                                month: "short",
                                day: "numeric",
                                year: "numeric",
                            }),
                        ],
                    }),
                });
            }
            try {
                dm.displayName || (dm.displayName = "Ago");
            } catch {}
            let dg = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "EventActor",
                selections: [
                    {
                        alias: null,
                        args: [{ kind: "Literal", name: "size", value: 64 }],
                        kind: "ScalarField",
                        name: "avatarUrl",
                        storageKey: "avatarUrl(size:64)",
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "login",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "profileResourcePath",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    {
                        kind: "InlineFragment",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "isCopilot",
                                storageKey: null,
                            },
                        ],
                        type: "Bot",
                        abstractKey: null,
                    },
                ],
                type: "Actor",
                abstractKey: "__isActor",
            };
            dg.hash = "de12bf60d1c717928803f50b1bf9c2a5";
            var dy = n(12360),
                dp = n(20403);
            function dk() {
                return (0, F.jsxs)("span", { children: [on.ghost.login, " "] });
            }
            try {
                dk.displayName || (dk.displayName = "GhostActor");
            } catch {}
            function dF({ actor: e, ...l }) {
                return e
                    ? (0, F.jsx)(db, { actor: e, ...l })
                    : (0, F.jsx)(dk, {});
            }
            function db({ actor: e, ...l }) {
                let {
                        login: n,
                        avatarUrl: a,
                        isCopilot: s,
                        profileResourcePath: i,
                        __typename: t,
                    } = (0, N.useFragment)(dg, e),
                    r = ["User", "Organization"].includes(t);
                return (0, F.jsx)(dh, {
                    login: n,
                    avatarUrl: a,
                    profileResourcePath: i ?? void 0,
                    isCopilot: s,
                    isUser: r,
                    ...l,
                });
            }
            function dh({
                login: e,
                avatarUrl: l,
                profileResourcePath: n,
                showAvatarOnly: a,
                isCopilot: s = !1,
                isUser: i = !0,
            }) {
                if (e === on.ghost.login)
                    return (0, F.jsxs)("span", {
                        children: [ay.repositoryOwner, " "],
                    });
                if (!e)
                    return (0, F.jsxs)("span", {
                        children: [on.ghost.login, " "],
                    });
                let t = i || s,
                    r = s ? on.copilot.displayName : e;
                return (0, F.jsx)("div", {
                    className: dc.eventActorContainer,
                    children: (0, F.jsxs)(ek.A, {
                        "data-testid": "actor-link",
                        role: "link",
                        href: n,
                        ...(t ? (0, dp.S)(e, { isCopilot: s }) : {}),
                        className: dc.eventActorLink,
                        muted: !0,
                        children: [
                            s
                                ? (0, F.jsx)(dy.C, {
                                      size: "small",
                                      className: dc.alignSelfCenter,
                                  })
                                : (0, F.jsx)(w.r, {
                                      src: l,
                                      size: 16,
                                      className: dc.alignSelfCenter,
                                  }),
                            !a && (0, F.jsx)("span", { children: r }),
                        ],
                    }),
                });
            }
            try {
                dF.displayName || (dF.displayName = "EventActor");
            } catch {}
            try {
                db.displayName || (db.displayName = "EventActorInternal");
            } catch {}
            try {
                dh.displayName || (dh.displayName = "EventActorBase");
            } catch {}
            let df = {
                    Timeline_Item: "TimelineRow-module__Timeline_Item--JB78Z",
                    Octicon: "TimelineRow-module__Octicon--nrVo5",
                },
                dK = ({ actor: e, children: l, ...n }) => {
                    let a = (0, dd.H)(l, {
                        trailing: dv,
                        secondary: dL,
                        main: dT,
                    });
                    return e
                        ? (0, F.jsx)(dS, { actor: e, slots: a, ...n })
                        : (0, F.jsx)(dI, { actorData: null, slots: a, ...n });
                },
                dS = ({ actor: e, ...l }) => {
                    let n = (0, N.useFragment)(dr, e);
                    return (0, F.jsx)(dI, { ...l, actorData: n });
                },
                dI = ({
                    showActorName: e = !0,
                    showAgoTimestamp: l = !0,
                    highlighted: n,
                    createdAt: a,
                    deepLinkUrl: s,
                    onLinkClick: i,
                    refAttribute: t,
                    leadingIcon: r,
                    iconColoring: u,
                    slots: o,
                    actorData: d,
                    fillRow: c,
                }) => {
                    let m = (0, Q.useRef)(null);
                    return (
                        (0, du.O)({
                            htmlContainerRef: m,
                            onLinkClick: i,
                            openLinksInNewTab: !1,
                        }),
                        (0, F.jsxs)(oa.A.Item, {
                            ref: n ? t : null,
                            className: df.Timeline_Item,
                            children: [
                                (0, F.jsx)(oa.A.Badge, {
                                    sx: {
                                        backgroundColor: u?.backgroundColor,
                                        ...(n
                                            ? {
                                                  borderRadius: "50%",
                                                  boxShadow:
                                                      "0px 0px 0px 2px var(--fgColor-accent, var(--color-accent-fg)), 0px 0px 0px 4px var(--bgColor-accent-muted, var(--color-accent-subtle))",
                                              }
                                            : {}),
                                    },
                                    children:
                                        r &&
                                        (0, F.jsx)(W.A, {
                                            icon: r,
                                            sx: { color: u?.color },
                                            className: df.Octicon,
                                        }),
                                }),
                                (0, F.jsxs)(oa.A.Body, {
                                    ref: m,
                                    className: (0, eb.$)(
                                        "TimelineBody",
                                        dc.body,
                                        c && dc.fillRow
                                    ),
                                    children: [
                                        (0, F.jsxs)("div", {
                                            className:
                                                dc.timelineBodyRowContainer,
                                            children: [
                                                (0, F.jsxs)("div", {
                                                    className:
                                                        dc.timelineBodyContent,
                                                    children: [
                                                        (0, F.jsx)(dF, {
                                                            actor: d || null,
                                                            showAvatarOnly: !e,
                                                        }),
                                                        o[0].main,
                                                        l &&
                                                            (0, F.jsx)(dm, {
                                                                timestamp:
                                                                    new Date(a),
                                                                linkUrl: s,
                                                            }),
                                                    ],
                                                }),
                                                (0, F.jsx)("div", {
                                                    className:
                                                        dc.timelineBodyTrailingContent,
                                                    children: o[0].trailing,
                                                }),
                                            ],
                                        }),
                                        (0, F.jsx)("div", {
                                            children: o[0].secondary,
                                        }),
                                    ],
                                }),
                            ],
                        })
                    );
                };
            function dv(e) {
                return (0, F.jsx)("div", {
                    "data-trailing": !0,
                    children: e.children,
                });
            }
            function dL(e) {
                return (0, F.jsx)("div", {
                    "data-secondary": !0,
                    children: e.children,
                });
            }
            function dT(e) {
                return (0, F.jsx)(F.Fragment, { children: e.children });
            }
            let dC = Object.assign(dK, {
                Trailing: dv,
                Secondary: dL,
                Main: dT,
            });
            try {
                dK.displayName || (dK.displayName = "Row");
            } catch {}
            try {
                dS.displayName || (dS.displayName = "RowInternal");
            } catch {}
            try {
                dI.displayName || (dI.displayName = "RowBase");
            } catch {}
            try {
                dv.displayName || (dv.displayName = "Trailing");
            } catch {}
            try {
                dL.displayName || (dL.displayName = "Secondary");
            } catch {}
            try {
                dT.displayName || (dT.displayName = "Main");
            } catch {}
            try {
                dC.displayName || (dC.displayName = "TimelineRow");
            } catch {}
            function dx({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                rollupGroup: a,
            }) {
                let {
                    actor: s,
                    createdAt: i,
                    project: t,
                } = (0, eq.useFragment)(di, e);
                return t
                    ? (0, F.jsx)(dC, {
                          highlighted: !1,
                          actor: s,
                          onLinkClick: n,
                          createdAt: i,
                          deepLinkUrl: l,
                          leadingIcon: V.TableIcon,
                          children: (0, F.jsx)(dC.Main, {
                              children: a
                                  ? (0, F.jsx)(dj, { rollupGroup: a })
                                  : (0, F.jsx)(dR, { queryRefs: [e] }),
                          }),
                      })
                    : (0, F.jsx)(F.Fragment, {});
            }
            let dR = ({ queryRefs: e }) =>
                    0 === e.length
                        ? null
                        : (0, F.jsxs)(F.Fragment, {
                              children: [
                                  `${ay.timeline.removedThisFrom} `,
                                  e.map((l, n) =>
                                      (0, F.jsx)(
                                          Q.Fragment,
                                          {
                                              children: (0, F.jsx)(dN, {
                                                  queryRef: l,
                                                  first: 0 === n,
                                                  last: n === e.length - 1,
                                              }),
                                          },
                                          n
                                      )
                                  ),
                              ],
                          }),
                dN = ({ queryRef: e, first: l, last: n }) => {
                    let { project: a } = (0, eq.useFragment)(di, e);
                    return a?.title && a?.url
                        ? (0, F.jsx)("span", {
                              className: dt.Text,
                              children: (0, F.jsxs)(F.Fragment, {
                                  children: [
                                      !l &&
                                          !n &&
                                          (0, F.jsx)("span", {
                                              className: dt.Text_1,
                                              children: ",",
                                          }),
                                      !l &&
                                          n &&
                                          (0, F.jsx)("span", {
                                              className: dt.Text_2,
                                              children: ay.timeline.and,
                                          }),
                                      (0, F.jsx)(ds, {
                                          title: a?.title,
                                          url: a?.url,
                                      }),
                                  ],
                              }),
                          })
                        : null;
                };
            try {
                dx.displayName ||
                    (dx.displayName = "RemovedFromProjectV2Event");
            } catch {}
            try {
                dR.displayName ||
                    (dR.displayName = "RemovedFromProjectV2sRendering");
            } catch {}
            try {
                dN.displayName ||
                    (dN.displayName = "InternalRemovedFromProjectV2sRendering");
            } catch {}
            function dj({ rollupGroup: e }) {
                let l = e.AddedToProjectV2Event || [],
                    n = e.RemovedFromProjectV2Event || [];
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsx)(dw, { queryRefs: l }),
                        l.length > 0 && n.length > 0 && ` ${ay.timeline.and} `,
                        (0, F.jsx)(dR, { queryRefs: n }),
                    ],
                });
            }
            try {
                dj.displayName || (dj.displayName = "RolledupProjectV2Event");
            } catch {}
            function d_({
                queryRef: e,
                issueUrl: l,
                rollupGroup: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                    actor: i,
                    createdAt: t,
                    project: r,
                    databaseId: u,
                } = (0, eq.useFragment)(de, e);
                if (!r) return (0, F.jsx)(F.Fragment, {});
                let o = String(u) === a;
                return (0, F.jsx)(dC, {
                    highlighted: o,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, u),
                    leadingIcon: V.TableIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: n
                            ? (0, F.jsx)(dj, { rollupGroup: n })
                            : (0, F.jsx)(dw, { queryRefs: [e] }),
                    }),
                });
            }
            let dw = ({ queryRefs: e }) =>
                    0 === e.length
                        ? null
                        : (0, F.jsxs)(F.Fragment, {
                              children: [
                                  `${ay.timeline.addedThisTo} `,
                                  e.map((l, n) =>
                                      (0, F.jsx)(
                                          Q.Fragment,
                                          {
                                              children: (0, F.jsx)(dE, {
                                                  queryRef: l,
                                                  first: 0 === n,
                                                  last: n === e.length - 1,
                                              }),
                                          },
                                          n
                                      )
                                  ),
                              ],
                          }),
                dE = ({ queryRef: e, first: l, last: n }) => {
                    let { project: a } = (0, eq.useFragment)(de, e);
                    return a?.title && a?.url
                        ? (0, F.jsx)("span", {
                              className: dn.projectNameWrapper,
                              children: (0, F.jsxs)(F.Fragment, {
                                  children: [
                                      !l &&
                                          !n &&
                                          (0, F.jsx)("span", {
                                              className: dn.commaSeparator,
                                              children: ",",
                                          }),
                                      !l &&
                                          n &&
                                          (0, F.jsx)("span", {
                                              className: dn.andSeparator,
                                              children: ay.timeline.and,
                                          }),
                                      (0, F.jsx)(ds, {
                                          title: a?.title,
                                          url: a?.url,
                                      }),
                                  ],
                              }),
                          })
                        : null;
                };
            try {
                d_.displayName || (d_.displayName = "AddedToProjectV2Event");
            } catch {}
            try {
                dw.displayName ||
                    (dw.displayName = "AddedToProjectV2sRendering");
            } catch {}
            try {
                dE.displayName ||
                    (dE.displayName = "InternalAddedToProjectV2sRendering");
            } catch {}
            let dA = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "login",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "AssignedEvent",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "databaseId",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "actor",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "TimelineRowEventActor",
                                },
                                e,
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "assignee",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "AssignmentEventAssignee",
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: [e],
                                    type: "Actor",
                                    abstractKey: "__isActor",
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "AssignedEvent",
                    abstractKey: null,
                };
            })();
            dA.hash = "a8f2fa7634a679969efc39b7b8f2d616";
            let dP = {
                    assigneeEventContainer:
                        "assignees-module__assigneeEventContainer--v2Y7W",
                    assigneeMarginRight:
                        "assignees-module__assigneeMarginRight--OlmkA",
                    assigneeMarginHorizontal:
                        "assignees-module__assigneeMarginHorizontal--TqdMb",
                    assigneeLink: "assignees-module__assigneeLink--wLhcw",
                },
                dB = (function () {
                    var e = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "__typename",
                            storageKey: null,
                        },
                        l = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "login",
                            storageKey: null,
                        },
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "resourcePath",
                            storageKey: null,
                        },
                        a = [e, l, n];
                    return {
                        argumentDefinitions: [],
                        kind: "Fragment",
                        metadata: null,
                        name: "AssignmentEventAssignee",
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: a,
                                type: "User",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: a,
                                type: "Mannequin",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: a,
                                type: "Organization",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [
                                    e,
                                    l,
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isCopilot",
                                        storageKey: null,
                                    },
                                ],
                                type: "Bot",
                                abstractKey: null,
                            },
                        ],
                        type: "Actor",
                        abstractKey: "__isActor",
                    };
                })();
            function dD({ assigneeRef: e }) {
                let l = (0, eq.useFragment)(dB, e);
                if (l?.__typename === "%other")
                    return (0, F.jsx)(F.Fragment, {});
                let n = l?.login || on.ghost.login,
                    a = l?.__typename === "Bot" && l.isCopilot,
                    s =
                        l?.__typename === "User" ||
                        l?.__typename === "Organization" ||
                        a
                            ? (0, dp.S)(n, { isCopilot: a })
                            : {},
                    i = a ? on.copilot.displayName : n || on.ghost.login;
                return (0, F.jsx)(ek.A, {
                    ...s,
                    href: l?.resourcePath,
                    className: dP.assigneeLink,
                    inline: !0,
                    children: i,
                });
            }
            dB.hash = "3e03590069f58500057cf7a3e3fd2df9";
            try {
                dD.displayName || (dD.displayName = "AssignmentEventAssignee");
            } catch {}
            let dM = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "login",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "UnassignedEvent",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "databaseId",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "actor",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "TimelineRowEventActor",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "assignee",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "AssignmentEventAssignee",
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: [e],
                                    type: "Actor",
                                    abstractKey: "__isActor",
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "UnassignedEvent",
                    abstractKey: null,
                };
            })();
            function dV({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
            }) {
                let {
                        actor: t,
                        createdAt: r,
                        assignee: u,
                        databaseId: o,
                    } = (0, eq.useFragment)(dM, e),
                    d = String(o) === a;
                return (0, F.jsx)(dC, {
                    highlighted: d,
                    refAttribute: s,
                    actor: t,
                    createdAt: r,
                    deepLinkUrl: dl(l, o),
                    onLinkClick: n,
                    leadingIcon: V.PersonIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: i
                            ? (0, F.jsx)(dq, { rollupGroup: i })
                            : (0, F.jsx)(dU, {
                                  queryRefs: [e],
                                  selfAssigned: t?.login === u?.login,
                                  rollup: !1,
                              }),
                    }),
                });
            }
            dM.hash = "ba2c5c9b4cc41d8585bad101a6f58f30";
            let dU = ({ queryRefs: e, selfAssigned: l, rollup: n }) =>
                    0 === e.length
                        ? null
                        : (0, F.jsxs)(F.Fragment, {
                              children: [
                                  !l && `${ay.timeline.unassigned} `,
                                  e.map((l, a) =>
                                      (0, F.jsx)(
                                          Q.Fragment,
                                          {
                                              children: (0, F.jsx)(dO, {
                                                  queryRef: l,
                                                  rollup: n,
                                                  first: 0 === a,
                                                  last: a === e.length - 1,
                                              }),
                                          },
                                          a
                                      )
                                  ),
                              ],
                          }),
                dO = ({ queryRef: e, rollup: l, first: n, last: a }) => {
                    let { assignee: s, actor: i } = (0, eq.useFragment)(dM, e);
                    return s?.login
                        ? (0, F.jsx)("div", {
                              className: dP.assigneeEventContainer,
                              children:
                                  i?.login !== s?.login || l
                                      ? (0, F.jsxs)(F.Fragment, {
                                            children: [
                                                !n &&
                                                    !a &&
                                                    (0, F.jsx)("div", {
                                                        className:
                                                            dP.assigneeMarginRight,
                                                        children: ",",
                                                    }),
                                                !n &&
                                                    a &&
                                                    (0, F.jsx)("div", {
                                                        className:
                                                            dP.assigneeMarginHorizontal,
                                                        children:
                                                            ay.timeline.and,
                                                    }),
                                                (0, F.jsx)(dD, {
                                                    assigneeRef: s,
                                                }),
                                            ],
                                        })
                                      : ay.timeline.removedTheirAssignment,
                          })
                        : null;
                };
            try {
                dV.displayName || (dV.displayName = "UnassignedEvent");
            } catch {}
            try {
                dU.displayName ||
                    (dU.displayName = "RemovedAssigneesRendering");
            } catch {}
            try {
                dO.displayName ||
                    (dO.displayName = "InternalRemovedAssigneesRendering");
            } catch {}
            function dq({ rollupGroup: e }) {
                let l = e.AssignedEvent || [],
                    n = e.UnassignedEvent || [];
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsx)(d$, {
                            queryRefs: l,
                            selfAssigned: !1,
                            rollup: !0,
                        }),
                        l.length > 0 && n.length > 0 && ` ${ay.timeline.and} `,
                        (0, F.jsx)(dU, {
                            queryRefs: n,
                            selfAssigned: !1,
                            rollup: !0,
                        }),
                    ],
                });
            }
            try {
                dq.displayName || (dq.displayName = "RolledupAssignedEvent");
            } catch {}
            function dH({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
            }) {
                let {
                        actor: t,
                        createdAt: r,
                        assignee: u,
                        databaseId: o,
                    } = (0, eq.useFragment)(dA, e),
                    d = String(o) === a;
                return (0, F.jsx)(dC, {
                    highlighted: d,
                    refAttribute: s,
                    actor: t,
                    createdAt: r,
                    deepLinkUrl: dl(l, o),
                    onLinkClick: n,
                    leadingIcon: V.PersonIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: i
                            ? (0, F.jsx)(dq, { rollupGroup: i })
                            : (0, F.jsx)(d$, {
                                  queryRefs: [e],
                                  selfAssigned: t?.login === u?.login,
                                  rollup: !1,
                              }),
                    }),
                });
            }
            let d$ = ({ queryRefs: e, selfAssigned: l, rollup: n }) =>
                    0 === e.length
                        ? null
                        : (0, F.jsxs)(F.Fragment, {
                              children: [
                                  !l && `${ay.timeline.assigned} `,
                                  e.map((l, a) =>
                                      (0, F.jsx)(
                                          Q.Fragment,
                                          {
                                              children: (0, F.jsx)(dz, {
                                                  queryRef: l,
                                                  rollup: n,
                                                  first: 0 === a,
                                                  last: a === e.length - 1,
                                              }),
                                          },
                                          a
                                      )
                                  ),
                              ],
                          }),
                dz = ({ queryRef: e, rollup: l, first: n, last: a }) => {
                    let { assignee: s, actor: i } = (0, eq.useFragment)(dA, e);
                    return (0, F.jsx)("div", {
                        className: dP.assigneeEventContainer,
                        children:
                            i?.login !== s?.login || l
                                ? (0, F.jsxs)(F.Fragment, {
                                      children: [
                                          !n &&
                                              !a &&
                                              (0, F.jsx)("div", {
                                                  className:
                                                      dP.assigneeMarginRight,
                                                  children: ",",
                                              }),
                                          !n &&
                                              a &&
                                              (0, F.jsx)("div", {
                                                  className:
                                                      dP.assigneeMarginHorizontal,
                                                  children: ay.timeline.and,
                                              }),
                                          (0, F.jsx)(dD, { assigneeRef: s }),
                                      ],
                                  })
                                : ay.timeline.selfAssignedThis,
                    });
                };
            try {
                dH.displayName || (dH.displayName = "AssignedEvent");
            } catch {}
            try {
                d$.displayName || (d$.displayName = "AddedAssigneesRendering");
            } catch {}
            try {
                dz.displayName ||
                    (dz.displayName = "InternalAddedAssigneesRendering");
            } catch {}
            let dW = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "BlockedByAddedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Issue",
                        kind: "LinkedField",
                        name: "blockingIssue",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "IssueLink",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "BlockedByAddedEvent",
                abstractKey: null,
            };
            function dQ(e, l) {
                let n;
                if (0 === l.length) return e;
                for (let a of (e && (n = new Date(e).valueOf()), l))
                    if (a.createdAt) {
                        let e = new Date(a.createdAt).valueOf();
                        (!n || e > n) && (n = e);
                    }
                return n;
            }
            dW.hash = "9b71c7c5f106935993845ab688a12ef9";
            let dG = {
                    issueDependenciesList:
                        "DependencyEvent-module__issueDependenciesList--jkHQC",
                    issueDependencyItem:
                        "DependencyEvent-module__issueDependencyItem--YsJF8",
                },
                dY = (function () {
                    var e = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        l = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        n = {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        a = {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                e,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "name",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "isPrivate",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        };
                    return {
                        argumentDefinitions: [],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssueLink",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__typename",
                                storageKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [
                                    e,
                                    {
                                        alias: "issueTitleHTML",
                                        args: null,
                                        kind: "ScalarField",
                                        name: "titleHTML",
                                        storageKey: null,
                                    },
                                    l,
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "stateReason",
                                        storageKey: null,
                                    },
                                    a,
                                ],
                                type: "Issue",
                                abstractKey: null,
                            },
                            {
                                kind: "InlineFragment",
                                selections: [
                                    e,
                                    {
                                        alias: "pullTitleHTML",
                                        args: null,
                                        kind: "ScalarField",
                                        name: "titleHTML",
                                        storageKey: null,
                                    },
                                    l,
                                    n,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "state",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isDraft",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInMergeQueue",
                                        storageKey: null,
                                    },
                                    a,
                                ],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        type: "ReferencedSubject",
                        abstractKey: "__isReferencedSubject",
                    };
                })();
            dY.hash = "863d75bbc29beaf8626fd20f4653cc17";
            let dX = {
                issueLinkAnchor: "IssueLink-module__issueLinkAnchor--fsPzL",
                issueTitleContainer:
                    "IssueLink-module__issueTitleContainer--jwBZJ",
                repoIssueNumber: "IssueLink-module__repoIssueNumber--c52hS",
                issueContainer: "IssueLink-module__issueContainer--cuJCD",
            };
            function dJ({
                data: e,
                targetRepositoryId: l,
                targetOwnerLogin: n,
                inline: a = !1,
            }) {
                var s;
                let i = (0, N.useFragment)(dY, e),
                    t = "Issue" === i.__typename,
                    r = "PullRequest" === i.__typename,
                    { sourceIcon: u } = nD({
                        state: r ? i.state : void 0,
                        stateReason: t ? i.stateReason : void 0,
                    }),
                    o = r ? i.isDraft : void 0,
                    d = r ? i.isInMergeQueue : void 0,
                    c = u(i.__typename, o, d);
                if (!t && !r) return (0, F.jsx)(F.Fragment, {});
                let m =
                        i.repository && i.number
                            ? t
                                ? (0, eg.Nbg)({
                                      repo: i.repository.name,
                                      owner: i.repository.owner.login,
                                      issueNumber: i.number,
                                  })
                                : (0, eg.i9S)({
                                      owner: i.repository.owner.login,
                                      repo: i.repository.name,
                                      pullRequestNumber: i.number,
                                  })
                            : null,
                    g =
                        ((s = {
                            number: i.number,
                            ownerLogin: i.repository.owner.login,
                            repoId: i.repository.id,
                            repoName: i.repository.name,
                        }),
                        s.repoId === l
                            ? `#${s.number}`
                            : s.ownerLogin === n
                              ? `${s.repoName}#${s.number}`
                              : `${s.ownerLogin}/${s.repoName}#${s.number}`),
                    y = `${i.id}-private-description`,
                    p = t ? i.issueTitleHTML : i.pullTitleHTML,
                    k = (0, F.jsxs)(F.Fragment, {
                        children: [
                            (0, F.jsx)(W.A, {
                                icon: c,
                                size: 16,
                                sx: {
                                    mr: a ? "4px" : "initial",
                                    mt: a ? "initial" : "2px",
                                },
                            }),
                            (0, F.jsxs)(ek.A, {
                                href: i.url,
                                "data-hovercard-url": m,
                                "aria-describedby": i.repository.isPrivate
                                    ? y
                                    : void 0,
                                inline: !0,
                                className: dX.issueLinkAnchor,
                                children: [
                                    (0, F.jsx)(aq.vb, {
                                        as: "bdi",
                                        className: (0, eb.$)(
                                            "markdown-title",
                                            dX.issueTitleContainer
                                        ),
                                        html: p,
                                    }),
                                    (0, F.jsxs)("span", {
                                        className: dX.repoIssueNumber,
                                        children: [" ", g],
                                    }),
                                ],
                            }),
                            i.repository.isPrivate &&
                                i.repository.id !== l &&
                                (0, F.jsxs)(F.Fragment, {
                                    children: [
                                        (0, F.jsx)(z.A, {
                                            "aria-label":
                                                ay.crossReferencedEventLockTooltip(
                                                    `${i.repository.owner.login}/${i.repository.name}`
                                                ),
                                            children: (0, F.jsx)(W.A, {
                                                icon: V.LockIcon,
                                            }),
                                        }),
                                        (0, F.jsx)("span", {
                                            id: y,
                                            className: "sr-only",
                                            children:
                                                ay.crossReferencedEvent
                                                    .privateEventDescription,
                                        }),
                                    ],
                                }),
                        ],
                    });
                return a
                    ? (0, F.jsx)(F.Fragment, { children: k })
                    : (0, F.jsx)("div", {
                          className: dX.issueContainer,
                          children: k,
                      });
            }
            try {
                dJ.displayName || (dJ.displayName = "IssueLink");
            } catch {}
            try {
                (y = InlineLink).displayName || (y.displayName = "InlineLink");
            } catch {}
            function dZ({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
                repositoryId: t,
                ownerLogin: r,
            }) {
                let {
                    actor: u,
                    createdAt: o,
                    blockingIssue: d,
                    databaseId: c,
                } = (0, eq.useFragment)(dW, e);
                if (!d) return null;
                let m = String(c) === a,
                    g = i?.BlockedByAddedEvent || [],
                    y = 0 === g.length ? [e] : g,
                    p = dQ(e.createdAt, g);
                return (0, F.jsxs)(dC, {
                    highlighted: m,
                    refAttribute: s,
                    actor: u,
                    createdAt: o,
                    showAgoTimestamp: !1,
                    deepLinkUrl: dl(l, c),
                    onLinkClick: n,
                    leadingIcon: V.BlockedIcon,
                    children: [
                        (0, F.jsxs)(dC.Main, {
                            children: [
                                (0, F.jsx)("span", {
                                    children:
                                        1 === y.length
                                            ? ay.timeline.blockedByAdded.single
                                            : ay.timeline.blockedByAdded.multiple(
                                                  y.length
                                              ),
                                }),
                                " ",
                                p
                                    ? (0, F.jsx)(dm, {
                                          timestamp: new Date(p),
                                          linkUrl: dl(l, c),
                                      })
                                    : null,
                            ],
                        }),
                        (0, F.jsx)(dC.Secondary, {
                            children: (0, F.jsx)("ul", {
                                className: dG.issueDependenciesList,
                                children: y.map((e, l) =>
                                    (0, F.jsx)(
                                        d0,
                                        {
                                            event: e,
                                            targetRepositoryId: t,
                                            targetOwnerLogin: r,
                                        },
                                        `${c}_${l}`
                                    )
                                ),
                            }),
                        }),
                    ],
                });
            }
            function d0({
                event: e,
                targetRepositoryId: l,
                targetOwnerLogin: n,
            }) {
                let { blockingIssue: a } = (0, eq.useFragment)(dW, e);
                return a
                    ? (0, F.jsx)("li", {
                          className: dG.issueDependencyItem,
                          children: (0, F.jsx)(dJ, {
                              data: a,
                              targetRepositoryId: l,
                              targetOwnerLogin: n,
                          }),
                      })
                    : null;
            }
            try {
                dZ.displayName || (dZ.displayName = "BlockedByAddedEvent");
            } catch {}
            try {
                d0.displayName || (d0.displayName = "BlockedByAddedEventItem");
            } catch {}
            let d1 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "BlockedByRemovedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Issue",
                        kind: "LinkedField",
                        name: "blockingIssue",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "IssueLink",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "BlockedByRemovedEvent",
                abstractKey: null,
            };
            function d2({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
                repositoryId: t,
                ownerLogin: r,
            }) {
                let {
                    actor: u,
                    createdAt: o,
                    blockingIssue: d,
                    databaseId: c,
                } = (0, eq.useFragment)(d1, e);
                if (!d) return null;
                let m = String(c) === a,
                    g = i?.BlockedByRemovedEvent || [],
                    y = 0 === g.length ? [e] : g,
                    p = dQ(e.createdAt, g);
                return (0, F.jsxs)(dC, {
                    highlighted: m,
                    refAttribute: s,
                    actor: u,
                    createdAt: o,
                    showAgoTimestamp: !1,
                    deepLinkUrl: dl(l, c),
                    onLinkClick: n,
                    leadingIcon: V.BlockedIcon,
                    children: [
                        (0, F.jsxs)(dC.Main, {
                            children: [
                                (0, F.jsx)("span", {
                                    children:
                                        1 === y.length
                                            ? ay.timeline.blockedByRemoved
                                                  .single
                                            : ay.timeline.blockedByRemoved.multiple(
                                                  y.length
                                              ),
                                }),
                                " ",
                                p
                                    ? (0, F.jsx)(dm, {
                                          timestamp: new Date(p),
                                          linkUrl: dl(l, c),
                                      })
                                    : null,
                            ],
                        }),
                        (0, F.jsx)(dC.Secondary, {
                            children: (0, F.jsx)("ul", {
                                className: dG.issueDependenciesList,
                                children: y.map((e, l) =>
                                    (0, F.jsx)(
                                        d4,
                                        {
                                            event: e,
                                            targetRepositoryId: t,
                                            targetOwnerLogin: r,
                                        },
                                        `${c}_${l}`
                                    )
                                ),
                            }),
                        }),
                    ],
                });
            }
            function d4({
                event: e,
                targetRepositoryId: l,
                targetOwnerLogin: n,
            }) {
                let { blockingIssue: a } = (0, eq.useFragment)(d1, e);
                return a
                    ? (0, F.jsx)("li", {
                          className: dG.issueDependencyItem,
                          children: (0, F.jsx)(dJ, {
                              data: a,
                              targetRepositoryId: l,
                              targetOwnerLogin: n,
                          }),
                      })
                    : null;
            }
            d1.hash = "258e5a5ef42c29ff6c0983962ba379c7";
            try {
                d2.displayName || (d2.displayName = "BlockedByRemovedEvent");
            } catch {}
            try {
                d4.displayName ||
                    (d4.displayName = "BlockedByRemovedEventItem");
            } catch {}
            let d6 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "BlockingAddedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Issue",
                        kind: "LinkedField",
                        name: "blockedIssue",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "IssueLink",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "BlockingAddedEvent",
                abstractKey: null,
            };
            function d5({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
                repositoryId: t,
                ownerLogin: r,
            }) {
                let {
                    actor: u,
                    createdAt: o,
                    blockedIssue: d,
                    databaseId: c,
                } = (0, eq.useFragment)(d6, e);
                if (!d) return null;
                let m = String(c) === a,
                    g = i?.BlockingAddedEvent || [],
                    y = 0 === g.length ? [e] : g,
                    p = dQ(e.createdAt, g);
                return (0, F.jsxs)(dC, {
                    highlighted: m,
                    refAttribute: s,
                    actor: u,
                    createdAt: o,
                    showAgoTimestamp: !1,
                    deepLinkUrl: dl(l, c),
                    onLinkClick: n,
                    leadingIcon: V.BlockedIcon,
                    children: [
                        (0, F.jsxs)(dC.Main, {
                            children: [
                                (0, F.jsx)("span", {
                                    children:
                                        1 === y.length
                                            ? ay.timeline.blockingAdded.single
                                            : ay.timeline.blockingAdded.multiple(
                                                  y.length
                                              ),
                                }),
                                " ",
                                p
                                    ? (0, F.jsx)(dm, {
                                          timestamp: new Date(p),
                                          linkUrl: dl(l, c),
                                      })
                                    : null,
                            ],
                        }),
                        (0, F.jsx)(dC.Secondary, {
                            children: (0, F.jsx)("ul", {
                                className: dG.issueDependenciesList,
                                children: y.map((e, l) =>
                                    (0, F.jsx)(
                                        d7,
                                        {
                                            event: e,
                                            targetRepositoryId: t,
                                            targetOwnerLogin: r,
                                        },
                                        `${c}_${l}`
                                    )
                                ),
                            }),
                        }),
                    ],
                });
            }
            function d7({
                event: e,
                targetRepositoryId: l,
                targetOwnerLogin: n,
            }) {
                let { blockedIssue: a } = (0, eq.useFragment)(d6, e);
                return a
                    ? (0, F.jsx)("li", {
                          className: dG.issueDependencyItem,
                          children: (0, F.jsx)(dJ, {
                              data: a,
                              targetRepositoryId: l,
                              targetOwnerLogin: n,
                          }),
                      })
                    : null;
            }
            d6.hash = "c786519e55ce29bd725c36d300448d25";
            try {
                d5.displayName || (d5.displayName = "BlockingAddedEvent");
            } catch {}
            try {
                d7.displayName || (d7.displayName = "BlockingAddedEventItem");
            } catch {}
            let d3 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "BlockingRemovedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Issue",
                        kind: "LinkedField",
                        name: "blockedIssue",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "IssueLink",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "BlockingRemovedEvent",
                abstractKey: null,
            };
            function d8({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
                repositoryId: t,
                ownerLogin: r,
            }) {
                let {
                    actor: u,
                    createdAt: o,
                    blockedIssue: d,
                    databaseId: c,
                } = (0, eq.useFragment)(d3, e);
                if (!d) return null;
                let m = String(c) === a,
                    g = i?.BlockingRemovedEvent || [],
                    y = 0 === g.length ? [e] : g,
                    p = dQ(e.createdAt, g);
                return (0, F.jsxs)(dC, {
                    highlighted: m,
                    refAttribute: s,
                    actor: u,
                    createdAt: o,
                    showAgoTimestamp: !1,
                    deepLinkUrl: dl(l, c),
                    onLinkClick: n,
                    leadingIcon: V.BlockedIcon,
                    children: [
                        (0, F.jsxs)(dC.Main, {
                            children: [
                                (0, F.jsx)("span", {
                                    children:
                                        1 === y.length
                                            ? ay.timeline.blockingRemoved.single
                                            : ay.timeline.blockingRemoved.multiple(
                                                  y.length
                                              ),
                                }),
                                " ",
                                p
                                    ? (0, F.jsx)(dm, {
                                          timestamp: new Date(p),
                                          linkUrl: dl(l, c),
                                      })
                                    : null,
                            ],
                        }),
                        (0, F.jsx)(dC.Secondary, {
                            children: (0, F.jsx)("ul", {
                                className: dG.issueDependenciesList,
                                children: y.map((e, l) =>
                                    (0, F.jsx)(
                                        d9,
                                        {
                                            event: e,
                                            targetRepositoryId: t,
                                            targetOwnerLogin: r,
                                        },
                                        `${c}_${l}`
                                    )
                                ),
                            }),
                        }),
                    ],
                });
            }
            function d9({
                event: e,
                targetRepositoryId: l,
                targetOwnerLogin: n,
            }) {
                let { blockedIssue: a } = (0, eq.useFragment)(d3, e);
                return a
                    ? (0, F.jsx)("li", {
                          className: dG.issueDependencyItem,
                          children: (0, F.jsx)(dJ, {
                              data: a,
                              targetRepositoryId: l,
                              targetOwnerLogin: n,
                          }),
                      })
                    : null;
            }
            d3.hash = "8fc66f0b4dcd2b845d5859474da4ab49";
            try {
                d8.displayName || (d8.displayName = "BlockingRemovedEvent");
            } catch {}
            try {
                d9.displayName || (d9.displayName = "BlockingRemovedEventItem");
            } catch {}
            let ce = (function () {
                var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    l = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "owner",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "login",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "ClosedEvent",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "databaseId",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "stateReason",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "duplicateOf",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "IssueLink",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closingProjectItemStatus",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "closer",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "__typename",
                                    storageKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: [
                                        e,
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "title",
                                            storageKey: null,
                                        },
                                    ],
                                    type: "ProjectV2",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: [
                                        e,
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "number",
                                            storageKey: null,
                                        },
                                        l,
                                    ],
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: [
                                        e,
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "abbreviatedOid",
                                            storageKey: null,
                                        },
                                        l,
                                    ],
                                    type: "Commit",
                                    abstractKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "actor",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "TimelineRowEventActor",
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "ClosedEvent",
                    abstractKey: null,
                };
            })();
            ce.hash = "c6e77b32911689a07a3fe151bbccf48d";
            let cl = {
                stateReasonLink: "ClosedEvent-module__stateReasonLink--YEqx6",
                closerLink: "ClosedEvent-module__closerLink--GQXSl",
            };
            function cn({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                timelineEventBaseUrl: a,
                highlightedEventId: s,
                refAttribute: i,
                showStateReason: t = !0,
                repositoryId: r,
                ownerLogin: u,
            }) {
                var o, d, c, m, g, y;
                let {
                        actor: p,
                        createdAt: k,
                        stateReason: b,
                        databaseId: h,
                        closer: f,
                        closingProjectItemStatus: K,
                        duplicateOf: S,
                    } = (0, eq.useFragment)(ce, e),
                    I = String(h) === s,
                    {
                        getStateQuery: v,
                        issueStateTimelineIcon: L,
                        issueStateColor: T,
                    } = nD({ state: "CLOSED", stateReason: b }),
                    { stateChangeQuery: C, stateReasonString: x } = v(),
                    R = (0, Q.useMemo)(
                        () => `${a}?q=${b && encodeURIComponent(C)}`,
                        [C, b, a]
                    ),
                    N = f?.__typename === "Commit",
                    j = f?.__typename === "ProjectV2",
                    _ = f && "PullRequest" === f.__typename ? f.number : void 0,
                    w = f && "PullRequest" === f.__typename ? f.url : void 0,
                    E = N ? f.url : void 0,
                    A = j ? f.url : void 0,
                    P = f
                        ? "Commit" === f.__typename
                            ? ((o = f.repository.owner.login),
                              (d = f.repository.name),
                              (c = f.abbreviatedOid),
                              (0, eg.fQd)({ owner: o, repo: d, commitish: c }))
                            : "PullRequest" === f.__typename
                              ? ((m = f.repository.owner.login),
                                (g = f.repository.name),
                                (y = f.number),
                                (0, eg.i9S)({
                                    owner: m,
                                    repo: g,
                                    pullRequestNumber: y,
                                }))
                              : null
                        : null,
                    B = j
                        ? (0, F.jsxs)(F.Fragment, {
                              children: [
                                  (0, F.jsx)(W.A, { icon: V.TableIcon }),
                                  " ",
                                  (0, F.jsx)(ek.A, {
                                      href: A,
                                      "data-testid": "closer-link",
                                      inline: !0,
                                      className: cl.stateReasonLink,
                                      children: f.title,
                                  }),
                              ],
                          })
                        : (0, F.jsx)(ek.A, {
                              href: N ? E : w,
                              target: "_blank",
                              "data-hovercard-url": P,
                              "data-testid": "closer-link",
                              className: cl.closerLink,
                              children: N ? `${f.abbreviatedOid}` : `#${_}`,
                          });
                return (0, F.jsx)(dC, {
                    highlighted: I,
                    refAttribute: i,
                    actor: p,
                    createdAt: k,
                    deepLinkUrl: dl(l, h),
                    onLinkClick: n,
                    leadingIcon: L,
                    iconColoring: { backgroundColor: T, color: "white" },
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            `${ay.timeline.closedThis} `,
                            b &&
                                t &&
                                (0, F.jsxs)(F.Fragment, {
                                    children: [
                                        `${ay.timeline.as} ${S ? " a " : ""}`,
                                        (0, F.jsx)(ek.A, {
                                            "data-testid": "state-reason-link",
                                            href: R,
                                            inline: !0,
                                            className: cl.stateReasonLink,
                                            children: x,
                                        }),
                                    ],
                                }),
                            f &&
                                (0, F.jsxs)(F.Fragment, {
                                    children: [
                                        j ? `by moving to ${K} ` : "",
                                        `${ay.timeline.in} `,
                                        B,
                                    ],
                                }),
                            S &&
                                (0, F.jsxs)(F.Fragment, {
                                    children: [
                                        `${ay.timeline.of} `,
                                        (0, F.jsx)(dJ, {
                                            inline: !0,
                                            data: S,
                                            targetRepositoryId: r,
                                            targetOwnerLogin: u,
                                        }),
                                        " ",
                                    ],
                                }),
                        ],
                    }),
                });
            }
            try {
                cn.displayName || (cn.displayName = "ClosedEvent");
            } catch {}
            let ca = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "CommentDeletedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "deletedCommentAuthor",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "login",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "CommentDeletedEvent",
                abstractKey: null,
            };
            ca.hash = "60765ec10a7e0eb7ec5c8d4eca344b84";
            let cs = {
                deletedCommentAuthorLink:
                    "CommentDeletedEvent-module__deletedCommentAuthorLink--AXfHQ",
            };
            function ci({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        deletedCommentAuthor: r,
                        databaseId: u,
                    } = (0, eq.useFragment)(ca, e),
                    o = String(u) === a;
                return (0, F.jsx)(dC, {
                    highlighted: o,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, u),
                    onLinkClick: n,
                    leadingIcon: V.TrashIcon,
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            `${ay.timeline.deletedACommentFrom} `,
                            (0, F.jsx)(ek.A, {
                                href: `/${r?.login}`,
                                inline: !0,
                                className: cs.deletedCommentAuthorLink,
                                children: r?.login,
                            }),
                            " ",
                        ],
                    }),
                });
            }
            try {
                ci.displayName || (ci.displayName = "CommentDeletedEvent");
            } catch {}
            let ct = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ConnectedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "subject",
                        plural: !1,
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "title",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "url",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "number",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "state",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isDraft",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInMergeQueue",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Repository",
                                        kind: "LinkedField",
                                        name: "repository",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "name",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "owner",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "login",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "ConnectedEvent",
                abstractKey: null,
            };
            ct.hash = "6dbcebd6baa492ec1cc25caab2e70a45";
            let cr = {
                linkedPullRequestLink:
                    "ConnectedEvent-module__linkedPullRequestLink--Ir1pv",
            };
            function cu({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        subject: r,
                        databaseId: u,
                    } = (0, eq.useFragment)(ct, e),
                    {
                        title: o,
                        number: d,
                        url: c,
                        isDraft: m,
                        isInMergeQueue: g,
                        state: y,
                        repository: p,
                    } = r || {},
                    { sourceIcon: k } = nD({ state: y }),
                    b = k("PullRequest", m, g),
                    h = String(u) === a,
                    f =
                        p && d
                            ? (0, eg.i9S)({
                                  owner: p?.owner.login,
                                  repo: p?.name,
                                  pullRequestNumber: d,
                              })
                            : null;
                return (0, F.jsx)(dC, {
                    highlighted: h,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, u),
                    onLinkClick: n,
                    leadingIcon: V.CrossReferenceIcon,
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            ay.timeline.linkedAClosingPR,
                            (0, F.jsx)(b, { className: "ml-1 mr-1" }),
                            (0, F.jsx)(ek.A, {
                                href: c,
                                target: "_blank",
                                "data-hovercard-url": f,
                                inline: !0,
                                className: cr.linkedPullRequestLink,
                                children: `${o} #${d}`,
                            }),
                        ],
                    }),
                });
            }
            try {
                cu.displayName || (cu.displayName = "ConnectedEvent");
            } catch {}
            try {
                (p = PullStateIcon).displayName ||
                    (p.displayName = "PullStateIcon");
            } catch {}
            let co = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ConvertedFromDraftEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                ],
                type: "ConvertedFromDraftEvent",
                abstractKey: null,
            };
            function cd({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        databaseId: r,
                    } = (0, eq.useFragment)(co, e),
                    u = String(r) === a;
                return (0, F.jsx)(dC, {
                    highlighted: u,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, r),
                    onLinkClick: n,
                    leadingIcon: V.IssueDraftIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: `${ay.timeline.convertedFromDraftIssue} `,
                    }),
                });
            }
            co.hash = "3719925429eadd15091ec256d7d9c8fd";
            try {
                cd.displayName || (cd.displayName = "ConvertedFromDraftEvent");
            } catch {}
            let cc = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ConvertedToDiscussionEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Discussion",
                        kind: "LinkedField",
                        name: "discussion",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "url",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "number",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "ConvertedToDiscussionEvent",
                abstractKey: null,
            };
            cc.hash = "57a32d9c56f6a2acde82f09bc62414cb";
            let cm = {
                discussionLink:
                    "ConvertedToDiscussionEvent-module__discussionLink--wYj_L",
            };
            function cg({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        discussion: r,
                        databaseId: u,
                    } = (0, eq.useFragment)(cc, e),
                    o = String(u) === a;
                return (0, F.jsx)(dC, {
                    highlighted: o,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, u),
                    onLinkClick: n,
                    leadingIcon: V.CommentDiscussionIcon,
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            ay.timeline.convertedToDiscussion,
                            r &&
                                (0, F.jsx)(ek.A, {
                                    href: `${r.url}`,
                                    "aria-label": `Discussion #${r.number}`,
                                    inline: !0,
                                    className: cm.discussionLink,
                                    children: ` #${r.number} `,
                                }),
                        ],
                    }),
                });
            }
            try {
                cg.displayName ||
                    (cg.displayName = "ConvertedToDiscussionEvent");
            } catch {}
            let cy = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "CrossReferencedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "referencedAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "willCloseTarget",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: "innerSource",
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "source",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__typename",
                                storageKey: null,
                            },
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "IssueLink",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "CrossReferencedEvent",
                abstractKey: null,
            };
            cy.hash = "bf18172c8121dbfd81a919c9ada72a5c";
            let cp = {
                crossReferencesList:
                    "CrossReferencedEvent-module__crossReferencesList--bL1RG",
            };
            function ck({
                queryRef: e,
                issueUrl: l,
                highlightedEventId: n,
                onLinkClick: a,
                refAttribute: s,
                rollupGroup: i,
                repositoryId: t,
                ownerLogin: r,
            }) {
                var u, o, d, c;
                let {
                        actor: m,
                        referencedAt: g,
                        willCloseTarget: y,
                        innerSource: p,
                        databaseId: k,
                    } = (0, eq.useFragment)(cy, e),
                    b = "Issue" === p.__typename,
                    h = "PullRequest" === p.__typename;
                if (!b && !h) return (0, F.jsx)(F.Fragment, {});
                let f =
                        i && i.CrossReferencedEvent
                            ? i.CrossReferencedEvent
                            : [],
                    K = f.some((e) => e.source?.__typename !== p.__typename),
                    S =
                        ((u = p.__typename),
                        (o = y),
                        (d = f?.length),
                        (c = K),
                        o
                            ? ay.timeline.linkedAClosingPR
                            : 0 === d || c
                              ? ay.timeline.mentionedThisIn
                              : "Issue" === u
                                ? `${ay.timeline.mentionedThisIn} in ${d} issues`
                                : `${ay.timeline.mentionedThisIn} in ${d} pull requests`),
                    I = String(k) === n,
                    v = 0 === f.length ? [e] : f,
                    L = dQ(e.createdAt, f);
                return (0, F.jsxs)(dC, {
                    highlighted: I,
                    refAttribute: s,
                    actor: m,
                    createdAt: g,
                    showAgoTimestamp: !1,
                    deepLinkUrl: l,
                    onLinkClick: a,
                    leadingIcon: V.LinkExternalIcon,
                    children: [
                        (0, F.jsxs)(dC.Main, {
                            children: [
                                S,
                                " ",
                                L
                                    ? (0, F.jsx)(dm, {
                                          timestamp: new Date(L),
                                          linkUrl: dl(l, k),
                                      })
                                    : null,
                            ],
                        }),
                        (0, F.jsx)(dC.Secondary, {
                            children: (0, F.jsx)("section", {
                                "aria-label":
                                    ay.crossReferencedEvent.sectionLabel,
                                children: (0, F.jsx)("ul", {
                                    className: cp.crossReferencesList,
                                    children: v.map((e, l) =>
                                        (0, F.jsx)(
                                            cF,
                                            {
                                                event: e,
                                                targetRepositoryId: t,
                                                targetOwnerLogin: r,
                                            },
                                            `${k}_${l}`
                                        )
                                    ),
                                }),
                            }),
                        }),
                    ],
                });
            }
            function cF({
                event: e,
                targetRepositoryId: l,
                targetOwnerLogin: n,
            }) {
                let { innerSource: a } = (0, eq.useFragment)(cy, e);
                return (0, F.jsx)("li", {
                    style: { listStyle: "none" },
                    children: (0, F.jsx)(dJ, {
                        data: a,
                        targetRepositoryId: l,
                        targetOwnerLogin: n,
                    }),
                });
            }
            try {
                ck.displayName || (ck.displayName = "CrossReferencedEvent");
            } catch {}
            try {
                cF.displayName || (cF.displayName = "CrossReferenceItem");
            } catch {}
            let cb = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "DemilestonedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "milestoneTitle",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Milestone",
                        kind: "LinkedField",
                        name: "milestone",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "url",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "DemilestonedEvent",
                abstractKey: null,
            };
            cb.hash = "6ddaa1761b9fc007b083bf94d27ea749";
            let ch = {
                    milestoneLink:
                        "DemilestonedEvent-module__milestoneLink--JUC3Q",
                },
                cf = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "MilestonedEvent",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "databaseId",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "actor",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "TimelineRowEventActor",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "milestoneTitle",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Milestone",
                            kind: "LinkedField",
                            name: "milestone",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "MilestonedEvent",
                    abstractKey: null,
                };
            function cK({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
            }) {
                let {
                        actor: t,
                        createdAt: r,
                        milestoneTitle: u,
                        milestone: o,
                        databaseId: d,
                    } = (0, eq.useFragment)(cf, e),
                    c = String(d) === a;
                return (0, F.jsx)(dC, {
                    highlighted: c,
                    refAttribute: s,
                    actor: t,
                    createdAt: r,
                    deepLinkUrl: dl(l, d),
                    onLinkClick: n,
                    leadingIcon: V.MilestoneIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: i
                            ? (0, F.jsx)(cS, { rollupGroup: i })
                            : (0, F.jsxs)(F.Fragment, {
                                  children: [
                                      ay.timeline.addedToMilestone,
                                      " ",
                                      cL(o?.url, u),
                                      ay.timeline.milestone,
                                      " ",
                                  ],
                              }),
                    }),
                });
            }
            cf.hash = "81a3a898b155f065ca3d228b91ed14a3";
            try {
                cK.displayName || (cK.displayName = "MilestonedEvent");
            } catch {}
            function cS({ rollupGroup: e }) {
                let l = (function (e, l) {
                        let n = {},
                            a = {};
                        for (let s of [...e, ...l]) {
                            let e = s.milestone?.id || s.milestoneTitle,
                                l = n[e];
                            (void 0 === l || s.__index < l) &&
                                ((n[e] = s.__index), (a[e] = s));
                        }
                        return Object.entries(n)
                            .sort((e, l) => e[1] - l[1])
                            .map(([e]) => a[e])
                            .filter((e) => void 0 !== e);
                    })(e.MilestonedEvent || [], e.DemilestonedEvent || []),
                    n =
                        l.length > 1
                            ? ay.timeline.modifiedMilestones
                            : ay.timeline.modifiedMilestone;
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        `${n} `,
                        l.map((e, n) =>
                            (0, F.jsx)(
                                cI,
                                {
                                    milestoneEventKey: e,
                                    addDelimiter: n < l.length - 1,
                                },
                                e.__id
                            )
                        ),
                    ],
                });
            }
            function cI({ milestoneEventKey: e, addDelimiter: l }) {
                let n = (0, N.useFragment)(cf, e);
                return cL(n.milestone?.url, n.milestoneTitle, l);
            }
            try {
                cS.displayName || (cS.displayName = "RolledupMilestonedEvent");
            } catch {}
            try {
                cI.displayName || (cI.displayName = "MilestoneLink");
            } catch {}
            function cv({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
            }) {
                let {
                        actor: t,
                        createdAt: r,
                        milestoneTitle: u,
                        milestone: o,
                        databaseId: d,
                    } = (0, eq.useFragment)(cb, e),
                    c = String(d) === a;
                return (0, F.jsx)(dC, {
                    highlighted: c,
                    refAttribute: s,
                    actor: t,
                    createdAt: r,
                    deepLinkUrl: dl(l, d),
                    onLinkClick: n,
                    leadingIcon: V.MilestoneIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: i
                            ? (0, F.jsx)(cS, { rollupGroup: i })
                            : (0, F.jsxs)(F.Fragment, {
                                  children: [
                                      ay.timeline.removedFromMilestone,
                                      cL(o?.url, u),
                                      ay.timeline.milestone,
                                      " ",
                                  ],
                              }),
                    }),
                });
            }
            function cL(e, l, n) {
                return void 0 !== e
                    ? cT(e, l, n)
                    : (0, F.jsx)(sR.m, {
                          text: ay.timeline.milestoneDeleted,
                          children: cT(e, l, n),
                      });
            }
            function cT(e, l, n) {
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        " ",
                        (0, F.jsx)(ek.A, {
                            href: e,
                            inline: !0,
                            className: ch.milestoneLink,
                            children: l,
                        }),
                        n && ",",
                        " ",
                    ],
                });
            }
            try {
                cv.displayName || (cv.displayName = "DemilestonedEvent");
            } catch {}
            let cC = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "DisconnectedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "subject",
                        plural: !1,
                        selections: [
                            {
                                kind: "InlineFragment",
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "title",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "url",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "number",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "state",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isDraft",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "isInMergeQueue",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "Repository",
                                        kind: "LinkedField",
                                        name: "repository",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "name",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: null,
                                                kind: "LinkedField",
                                                name: "owner",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "login",
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                ],
                                type: "PullRequest",
                                abstractKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "DisconnectedEvent",
                abstractKey: null,
            };
            cC.hash = "aea0d6e09caea75d847e9bd6ecfc11ce";
            let cx = {
                disconnectedPullRequestLink:
                    "DisconnectedEvent-module__disconnectedPullRequestLink--yJ0aO",
            };
            function cR({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        subject: r,
                        databaseId: u,
                    } = (0, eq.useFragment)(cC, e),
                    {
                        title: o,
                        number: d,
                        url: c,
                        isDraft: m,
                        isInMergeQueue: g,
                        state: y,
                        repository: p,
                    } = r || {},
                    { sourceIcon: k } = nD({ state: y }),
                    b = k("PullRequest", m, g),
                    h = String(u) === a,
                    f =
                        p && d
                            ? (0, eg.i9S)({
                                  owner: p?.owner.login,
                                  repo: p?.name,
                                  pullRequestNumber: d,
                              })
                            : null;
                return (0, F.jsx)(dC, {
                    highlighted: h,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, u),
                    onLinkClick: n,
                    leadingIcon: b,
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            ay.timeline.removedLinkedPR,
                            (0, F.jsx)(b, { className: "ml-1 mr-1" }),
                            (0, F.jsx)(ek.A, {
                                href: c,
                                target: "_blank",
                                "data-hovercard-url": f,
                                inline: !0,
                                className: cx.disconnectedPullRequestLink,
                                children: `${o} #${d}`,
                            }),
                        ],
                    }),
                });
            }
            try {
                cR.displayName || (cR.displayName = "DisconnectedEvent");
            } catch {}
            try {
                (k = PullStateIcon).displayName ||
                    (k.displayName = "PullStateIcon");
            } catch {}
            let cN = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueTypeAddedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "issueType",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "color",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "IssueTypeAddedEvent",
                abstractKey: null,
            };
            cN.hash = "c883158dedd491fa3112db2b1a21dc2c";
            let cj = {
                issueTypeTokenWrapper:
                    "IssueTypeEvent-module__issueTypeTokenWrapper--qTWB6",
            };
            function c_({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                repositoryNameWithOwner: i,
            }) {
                let {
                    actor: t,
                    createdAt: r,
                    issueType: u,
                    databaseId: o,
                } = (0, eq.useFragment)(cN, e);
                if (!u) return null;
                let d = String(o) === a;
                return (0, F.jsx)(dC, {
                    highlighted: d,
                    refAttribute: s,
                    actor: t,
                    createdAt: r,
                    deepLinkUrl: dl(l, o),
                    onLinkClick: n,
                    leadingIcon: V.IssueOpenedIcon,
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            `${ay.timeline.issueTypeAdded.leading}`,
                            (0, F.jsx)("div", {
                                className: cj.issueTypeTokenWrapper,
                                children: (0, F.jsx)(aG.n, {
                                    name: u.name,
                                    color: u.color,
                                    href: `/${i}/issues?q=type:"${u.name}"`,
                                    getTooltipText: (e) =>
                                        e ? u.name : void 0,
                                    size: "small",
                                }),
                            }),
                            `${ay.timeline.issueTypeAdded.trailing} `,
                        ],
                    }),
                });
            }
            try {
                c_.displayName || (c_.displayName = "IssueTypeAddedEvent");
            } catch {}
            let cw = (function () {
                var e = [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                ];
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "IssueTypeChangedEvent",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "databaseId",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "actor",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "TimelineRowEventActor",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "IssueType",
                            kind: "LinkedField",
                            name: "issueType",
                            plural: !1,
                            selections: e,
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "IssueType",
                            kind: "LinkedField",
                            name: "prevIssueType",
                            plural: !1,
                            selections: e,
                            storageKey: null,
                        },
                    ],
                    type: "IssueTypeChangedEvent",
                    abstractKey: null,
                };
            })();
            function cE({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                repositoryNameWithOwner: i,
            }) {
                let {
                    actor: t,
                    createdAt: r,
                    issueType: u,
                    prevIssueType: o,
                    databaseId: d,
                } = (0, eq.useFragment)(cw, e);
                if (!u) return null;
                let c = String(d) === a,
                    m = (e) => (e ? u.name : void 0);
                return o
                    ? (0, F.jsx)(dC, {
                          highlighted: c,
                          refAttribute: s,
                          actor: t,
                          createdAt: r,
                          deepLinkUrl: dl(l, d),
                          onLinkClick: n,
                          leadingIcon: V.IssueOpenedIcon,
                          children: (0, F.jsxs)(dC.Main, {
                              children: [
                                  `${ay.timeline.issueTypeChanged.leading}`,
                                  (0, F.jsx)("div", {
                                      className: cj.issueTypeTokenWrapper,
                                      children: (0, F.jsx)(aG.n, {
                                          name: o.name,
                                          color: o.color,
                                          href: `/${i}/issues?q=type:"${o.name}"`,
                                          getTooltipText: m,
                                          size: "small",
                                      }),
                                  }),
                                  `${ay.timeline.issueTypeChanged.trailing}`,
                                  (0, F.jsx)("div", {
                                      className: cj.issueTypeTokenWrapper,
                                      children: (0, F.jsx)(aG.n, {
                                          name: u.name,
                                          color: u.color,
                                          href: `/${i}/issues?q=type:"${u.name}"`,
                                          getTooltipText: m,
                                          size: "small",
                                      }),
                                  }),
                              ],
                          }),
                      })
                    : null;
            }
            cw.hash = "ff78cef208baee819e716cf0308f130a";
            try {
                cE.displayName || (cE.displayName = "IssueTypeChangedEvent");
            } catch {}
            let cA = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "IssueTypeRemovedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "IssueType",
                        kind: "LinkedField",
                        name: "issueType",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "name",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "color",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "IssueTypeRemovedEvent",
                abstractKey: null,
            };
            function cP({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                repositoryNameWithOwner: i,
            }) {
                let {
                    actor: t,
                    createdAt: r,
                    issueType: u,
                    databaseId: o,
                } = (0, eq.useFragment)(cA, e);
                if (!u) return null;
                let d = String(o) === a;
                return (0, F.jsx)(dC, {
                    highlighted: d,
                    refAttribute: s,
                    actor: t,
                    createdAt: r,
                    deepLinkUrl: dl(l, o),
                    onLinkClick: n,
                    leadingIcon: V.IssueOpenedIcon,
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            `${ay.timeline.issueTypeRemoved.leading}`,
                            (0, F.jsx)("div", {
                                className: cj.issueTypeTokenWrapper,
                                children: (0, F.jsx)(aG.n, {
                                    name: u.name,
                                    color: u.color,
                                    href: `/${i}/issues?q=type:"${u.name}"`,
                                    getTooltipText: (e) =>
                                        e ? u.name : void 0,
                                    size: "small",
                                }),
                            }),
                            `${ay.timeline.issueTypeRemoved.trailing} `,
                        ],
                    }),
                });
            }
            cA.hash = "9fd0747bbf54ad19f163ff39412ad164";
            try {
                cP.displayName || (cP.displayName = "IssueTypeRemovedEvent");
            } catch {}
            let cB = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "LabeledEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Label",
                        kind: "LinkedField",
                        name: "label",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "LabelData",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "LabeledEvent",
                abstractKey: null,
            };
            cB.hash = "b7e2ce506173e4d9028a5365bafcd8bd";
            let cD = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "LabelData",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "nameHTML",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "name",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "color",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "description",
                        storageKey: null,
                    },
                ],
                type: "Label",
                abstractKey: null,
            };
            cD.hash = "a842ed2c9f0767be6cd6e10b360be097";
            var cM = n(2892);
            let cV = {
                    labelDescriptionTooltip:
                        "Label-module__labelDescriptionTooltip--DmL8l",
                },
                cU = {
                    labelContainer: "labels-module__labelContainer--gEfYq",
                    labelLink: "labels-module__labelLink--rVvrD",
                };
            function cO({ queryRef: e, timelineEventBaseUrl: l }) {
                let {
                        nameHTML: n,
                        name: a,
                        color: s,
                        id: i,
                        description: t,
                    } = (0, eq.useFragment)(cD, e),
                    r = (0, Q.useMemo)(
                        () => `${l}?q=${encodeURIComponent(on.labelQuery(a))}`,
                        [l, a]
                    );
                return (0, F.jsx)(sR.m, {
                    text: t ?? "",
                    sx: { visibility: t ? "visible" : "hidden" },
                    className: cV.labelDescriptionTooltip,
                    children: (0, F.jsxs)(ek.A, {
                        href: r,
                        className: cU.labelLink,
                        "aria-describedby": `${i}-tooltip`,
                        muted: !0,
                        children: [
                            (0, F.jsx)(
                                cM.a,
                                {
                                    text: (0, F.jsx)(aq.JR, { html: n }),
                                    fillColor: `#${s}`,
                                    style: {
                                        overflow: "hidden",
                                        textOverflow: "ellipsis",
                                        maxWidth: "20ch",
                                        cursor: "pointer",
                                    },
                                },
                                i
                            ),
                            (0, F.jsx)("span", {
                                className: "sr-only",
                                id: `${i}-tooltip`,
                                children: t ?? "",
                            }),
                        ],
                    }),
                });
            }
            try {
                cO.displayName || (cO.displayName = "Label");
            } catch {}
            let cq = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "UnlabeledEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Label",
                        kind: "LinkedField",
                        name: "label",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "LabelData",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "UnlabeledEvent",
                abstractKey: null,
            };
            function cH({
                queryRef: e,
                rollupGroup: l,
                issueUrl: n,
                onLinkClick: a,
                timelineEventBaseUrl: s,
                highlightedEventId: i,
                refAttribute: t,
            }) {
                let {
                        actor: r,
                        createdAt: u,
                        databaseId: o,
                    } = (0, eq.useFragment)(cq, e),
                    d = String(o) === i;
                return (0, F.jsx)(dC, {
                    highlighted: d,
                    refAttribute: t,
                    actor: r,
                    createdAt: u,
                    deepLinkUrl: dl(n, o),
                    onLinkClick: a,
                    leadingIcon: V.TagIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: l
                            ? (0, F.jsx)(cW, {
                                  rollupGroup: l,
                                  timelineEventBaseUrl: s,
                              })
                            : (0, F.jsx)(c$, {
                                  queryRefs: [e],
                                  timelineEventBaseUrl: s,
                              }),
                    }),
                });
            }
            cq.hash = "40e1e1df8c52602ee31a250f328424a0";
            let c$ = ({ queryRefs: e, timelineEventBaseUrl: l }) =>
                    0 === e.length
                        ? null
                        : (0, F.jsxs)(F.Fragment, {
                              children: [
                                  `${ay.timeline.removed} `,
                                  e.map((e, n) =>
                                      (0, F.jsxs)(
                                          Q.Fragment,
                                          {
                                              children: [
                                                  (0, F.jsx)(cz, {
                                                      queryRef: e,
                                                      timelineEventBaseUrl: l,
                                                  }),
                                                  " ",
                                              ],
                                          },
                                          n
                                      )
                                  ),
                              ],
                          }),
                cz = ({ queryRef: e, timelineEventBaseUrl: l }) => {
                    let { label: n } = (0, eq.useFragment)(cq, e);
                    return (0, F.jsx)("div", {
                        className: cU.labelContainer,
                        children: (0, F.jsx)(cO, {
                            queryRef: n,
                            timelineEventBaseUrl: l,
                        }),
                    });
                };
            try {
                cH.displayName || (cH.displayName = "UnlabeledEvent");
            } catch {}
            try {
                c$.displayName || (c$.displayName = "UnlabeledRendering");
            } catch {}
            try {
                cz.displayName ||
                    (cz.displayName = "InternalAddedUnlabelRendering");
            } catch {}
            function cW({ rollupGroup: e, timelineEventBaseUrl: l }) {
                let n = e.LabeledEvent || [],
                    a = e.UnlabeledEvent || [];
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        (0, F.jsx)(cG, {
                            queryRefs: n,
                            timelineEventBaseUrl: l,
                        }),
                        n.length > 0 && a.length > 0 && `${ay.timeline.and} `,
                        (0, F.jsx)(c$, {
                            queryRefs: a,
                            timelineEventBaseUrl: l,
                        }),
                    ],
                });
            }
            try {
                cW.displayName || (cW.displayName = "RolledupLabeledEvent");
            } catch {}
            function cQ({
                queryRef: e,
                rollupGroup: l,
                issueUrl: n,
                onLinkClick: a,
                timelineEventBaseUrl: s,
                highlightedEventId: i,
                refAttribute: t,
            }) {
                let {
                        actor: r,
                        createdAt: u,
                        databaseId: o,
                    } = (0, eq.useFragment)(cB, e),
                    d = String(o) === i;
                return (0, F.jsx)(dC, {
                    highlighted: d,
                    refAttribute: t,
                    actor: r,
                    createdAt: u,
                    deepLinkUrl: dl(n, o),
                    onLinkClick: a,
                    leadingIcon: V.TagIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: l
                            ? (0, F.jsx)(cW, {
                                  rollupGroup: l,
                                  timelineEventBaseUrl: s,
                              })
                            : (0, F.jsx)(cG, {
                                  queryRefs: [e],
                                  timelineEventBaseUrl: s,
                              }),
                    }),
                });
            }
            let cG = ({ queryRefs: e, timelineEventBaseUrl: l }) =>
                    0 === e.length
                        ? null
                        : (0, F.jsxs)(F.Fragment, {
                              children: [
                                  `${ay.timeline.added} `,
                                  e.map((e, n) =>
                                      (0, F.jsxs)(
                                          Q.Fragment,
                                          {
                                              children: [
                                                  (0, F.jsx)(cY, {
                                                      queryRef: e,
                                                      timelineEventBaseUrl: l,
                                                  }),
                                                  " ",
                                              ],
                                          },
                                          n
                                      )
                                  ),
                              ],
                          }),
                cY = ({ queryRef: e, timelineEventBaseUrl: l }) => {
                    let { label: n } = (0, eq.useFragment)(cB, e);
                    return (0, F.jsx)("div", {
                        className: cU.labelContainer,
                        children: (0, F.jsx)(cO, {
                            queryRef: n,
                            timelineEventBaseUrl: l,
                        }),
                    });
                };
            try {
                cQ.displayName || (cQ.displayName = "LabeledEvent");
            } catch {}
            try {
                cG.displayName || (cG.displayName = "AddedLabelsRendering");
            } catch {}
            try {
                cY.displayName ||
                    (cY.displayName = "InternalAddedLabelRendering");
            } catch {}
            let cX = {
                timelineElement: "LayoutHelpers-module__timelineElement--IsjVR",
                nonLeadingElement:
                    "LayoutHelpers-module__nonLeadingElement--XSKiQ",
            };
            function cJ(e, l, n) {
                return (0, F.jsxs)(
                    "div",
                    {
                        className: `${cX.timelineElement} ${l ? "" : cX.nonLeadingElement}`,
                        "data-wrapper-timeline-id": n,
                        children: [l, e],
                    },
                    n
                );
            }
            let cZ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "LockedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "lockReason",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "LockedEvent",
                abstractKey: null,
            };
            function c0({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        lockReason: r,
                        databaseId: u,
                    } = (0, eq.useFragment)(cZ, e),
                    o = (function (e) {
                        let l = "";
                        if (e) {
                            let n = `${e}`;
                            if (n in on.lockedReasonStrings)
                                l = on.lockedReasonStrings[n];
                            else throw Error("Invalid lock reason");
                        }
                        return l;
                    })(r),
                    d = String(u) === a;
                return (0, F.jsx)(dC, {
                    highlighted: d,
                    refAttribute: s,
                    actor: i,
                    onLinkClick: n,
                    createdAt: t,
                    deepLinkUrl: dl(l, u),
                    leadingIcon: V.LockIcon,
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            `${ay.timeline.locked} `,
                            r &&
                                (0, F.jsx)(F.Fragment, {
                                    children: `${ay.timeline.as} ${o} `,
                                }),
                            `${ay.timeline.limitedToCollaborators} `,
                        ],
                    }),
                });
            }
            cZ.hash = "5cd622162b89b270c4ae9e3b77be0625";
            try {
                c0.displayName || (c0.displayName = "LockedEvent");
            } catch {}
            let c1 = (function () {
                var e = {
                        args: null,
                        kind: "FragmentSpread",
                        name: "IssueLink",
                    },
                    l = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "MarkedAsDuplicateEvent",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "actor",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "TimelineRowEventActor",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "canonical",
                            plural: !1,
                            selections: [
                                {
                                    kind: "InlineFragment",
                                    selections: [e, l, n],
                                    type: "Issue",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: [e, n, l],
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isCanonicalOfClosedDuplicate",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "databaseId",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "viewerCanUndo",
                            storageKey: null,
                        },
                        l,
                        {
                            kind: "ClientExtension",
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "pendingUndo",
                                    storageKey: null,
                                },
                            ],
                        },
                    ],
                    type: "MarkedAsDuplicateEvent",
                    abstractKey: null,
                };
            })();
            c1.hash = "13ed53472d0988db4292247abe79ac24";
            let c2 = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "cannonicalId",
                        },
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "duplicateId",
                        },
                    ],
                    l = [
                        {
                            alias: null,
                            args: [
                                {
                                    fields: [
                                        {
                                            kind: "Variable",
                                            name: "canonicalId",
                                            variableName: "cannonicalId",
                                        },
                                        {
                                            kind: "Variable",
                                            name: "duplicateId",
                                            variableName: "duplicateId",
                                        },
                                    ],
                                    kind: "ObjectValue",
                                    name: "input",
                                },
                            ],
                            concreteType: "UnmarkIssueAsDuplicatePayload",
                            kind: "LinkedField",
                            name: "unmarkIssueAsDuplicate",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "clientMutationId",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "unmarkIssueAsDuplicateMutation",
                        selections: l,
                        type: "Mutation",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "unmarkIssueAsDuplicateMutation",
                        selections: l,
                    },
                    params: {
                        id: "08d7312cd1d6f4f1696df8aa4f43f531",
                        metadata: {},
                        name: "unmarkIssueAsDuplicateMutation",
                        operationKind: "mutation",
                        text: null,
                    },
                };
            })();
            function c4({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                currentIssueId: i,
                repositoryId: t,
                ownerLogin: r,
            }) {
                let u = (0, N.useRelayEnvironment)(),
                    {
                        actor: o,
                        createdAt: d,
                        canonical: c,
                        isCanonicalOfClosedDuplicate: m,
                        databaseId: g,
                        viewerCanUndo: y,
                        pendingUndo: p,
                        id: k,
                    } = (0, eq.useFragment)(c1, e),
                    b = (0, Q.useCallback)(() => {
                        c?.id &&
                            !(function ({
                                environment: e,
                                input: { cannonicalId: l, duplicateId: n },
                                eventId: a,
                                onError: s,
                                onCompleted: i,
                            }) {
                                (0, N.commitMutation)(e, {
                                    mutation: c2,
                                    variables: {
                                        cannonicalId: l,
                                        duplicateId: n,
                                    },
                                    onError: (e) => s && s(e),
                                    onCompleted: (l) => {
                                        ((0, N.commitLocalUpdate)(e, (e) => {
                                            let l = e.get(a);
                                            l?.setValue(!0, "pendingUndo");
                                        }),
                                            i?.(l));
                                    },
                                });
                            })({
                                environment: u,
                                input: { duplicateId: i, cannonicalId: c.id },
                                eventId: k,
                            });
                    }, [c?.id, u, i, k]),
                    h = String(g) === a;
                return c
                    ? (0, F.jsxs)(dC, {
                          highlighted: h,
                          refAttribute: s,
                          actor: o,
                          createdAt: d,
                          deepLinkUrl: dl(l, g),
                          onLinkClick: n,
                          leadingIcon: V.DuplicateIcon,
                          fillRow: y,
                          children: [
                              (0, F.jsx)(dC.Main, {
                                  children: m
                                      ? (0, F.jsxs)(F.Fragment, {
                                            children: [
                                                "marked ",
                                                (0, F.jsx)(dJ, {
                                                    inline: !0,
                                                    data: c,
                                                    targetRepositoryId: t,
                                                    targetOwnerLogin: r,
                                                }),
                                                " ",
                                                "as a duplicate of this issue",
                                                " ",
                                            ],
                                        })
                                      : (0, F.jsxs)(F.Fragment, {
                                            children: [
                                                ay.timeline.markedAsDuplicate,
                                                (0, F.jsxs)(F.Fragment, {
                                                    children: [
                                                        "\xa0",
                                                        (0, F.jsx)(dJ, {
                                                            inline: !0,
                                                            data: c,
                                                            targetRepositoryId:
                                                                t,
                                                            targetOwnerLogin: r,
                                                        }),
                                                        " ",
                                                    ],
                                                }),
                                            ],
                                        }),
                              }),
                              y && !p && c?.number && !m
                                  ? (0, F.jsx)(dC.Trailing, {
                                        children: (0, F.jsx)($.Q, {
                                            onClick: b,
                                            "aria-label":
                                                ay.undoMarkIssueAsDuplicate(
                                                    c.number
                                                ),
                                            children: "Undo",
                                        }),
                                    })
                                  : null,
                          ],
                      })
                    : (0, F.jsx)(F.Fragment, {});
            }
            c2.hash = "5fc4fde2e881b6e6aac8dbcb074018f1";
            try {
                c4.displayName || (c4.displayName = "MarkedAsDuplicateEvent");
            } catch {}
            let c6 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "MentionedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "MentionedEvent",
                abstractKey: null,
            };
            function c5({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        databaseId: r,
                    } = (0, eq.useFragment)(c6, e),
                    u = String(r) === a;
                return (0, F.jsx)(dC, {
                    highlighted: u,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, r),
                    onLinkClick: n,
                    leadingIcon: V.LinkExternalIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: `${ay.timeline.mentioned} `,
                    }),
                });
            }
            c6.hash = "2c24d4c180d9855e7f633b2541aa9d07";
            try {
                c5.displayName || (c5.displayName = "MentionedEvent");
            } catch {}
            let c7 = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "databaseId",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "ParentIssueAddedEvent",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "actor",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "TimelineRowEventActor",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "parent",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "IssueLink",
                                },
                                e,
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "ParentIssueAddedEvent",
                    abstractKey: null,
                };
            })();
            c7.hash = "bcc1b42911a4460e86fdb02dfbf08a31";
            let c3 = {
                parentIssuesList:
                    "ParentIssueAddedEvent-module__parentIssuesList--mKImF",
                parentIssueItem:
                    "ParentIssueAddedEvent-module__parentIssueItem--geDWe",
            };
            function c8({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
                repositoryId: t,
                ownerLogin: r,
            }) {
                let {
                    actor: u,
                    createdAt: o,
                    parent: d,
                    databaseId: c,
                } = (0, eq.useFragment)(c7, e);
                if (!d) return null;
                let m = String(d.databaseId) === a,
                    g =
                        i && i.ParentIssueAddedEvent
                            ? i.ParentIssueAddedEvent
                            : [],
                    y = 0 === g.length ? [e] : g,
                    p = dQ(e.createdAt, g);
                return (0, F.jsxs)(dC, {
                    highlighted: m,
                    refAttribute: s,
                    actor: u,
                    createdAt: o,
                    showAgoTimestamp: !1,
                    deepLinkUrl: dl(l, c),
                    onLinkClick: n,
                    leadingIcon: V.IssueTrackedByIcon,
                    children: [
                        (0, F.jsxs)(dC.Main, {
                            children: [
                                `${ay.timeline.parentIssueAdded[1 === y.length ? "single" : "multiple"]} `,
                                p
                                    ? (0, F.jsx)(dm, {
                                          timestamp: new Date(p),
                                          linkUrl: dl(l, c),
                                      })
                                    : null,
                            ],
                        }),
                        (0, F.jsx)(dC.Secondary, {
                            children: (0, F.jsx)("ul", {
                                className: c3.parentIssuesList,
                                children: y.map((e, l) =>
                                    (0, F.jsx)(
                                        c9,
                                        {
                                            event: e,
                                            targetRepositoryId: t,
                                            targetOwnerLogin: r,
                                        },
                                        `${d.databaseId}_${l}`
                                    )
                                ),
                            }),
                        }),
                    ],
                });
            }
            function c9({
                event: e,
                targetRepositoryId: l,
                targetOwnerLogin: n,
            }) {
                let { parent: a } = (0, eq.useFragment)(c7, e);
                return a
                    ? (0, F.jsx)("li", {
                          className: c3.parentIssueItem,
                          children: (0, F.jsx)(dJ, {
                              data: a,
                              targetRepositoryId: l,
                              targetOwnerLogin: n,
                          }),
                      })
                    : null;
            }
            try {
                c8.displayName || (c8.displayName = "ParentIssueAddedEvent");
            } catch {}
            try {
                c9.displayName || (c9.displayName = "SubIssueEventItem");
            } catch {}
            let me = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "databaseId",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "ParentIssueRemovedEvent",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "actor",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "TimelineRowEventActor",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "parent",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "IssueLink",
                                },
                                e,
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "ParentIssueRemovedEvent",
                    abstractKey: null,
                };
            })();
            me.hash = "dbb05f97bf8c1aea71d8af4625e9418c";
            let ml = {
                removedParentIssuesList:
                    "ParentIssueRemovedEvent-module__removedParentIssuesList--r23Sc",
                removedParentIssueItem:
                    "ParentIssueRemovedEvent-module__removedParentIssueItem--dORNe",
            };
            function mn({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
                repositoryId: t,
                ownerLogin: r,
            }) {
                let {
                    actor: u,
                    createdAt: o,
                    parent: d,
                    databaseId: c,
                } = (0, eq.useFragment)(me, e);
                if (!d) return null;
                let m = String(d.databaseId) === a,
                    g =
                        i && i.ParentIssueRemovedEvent
                            ? i.ParentIssueRemovedEvent
                            : [],
                    y = 0 === g.length ? [e] : g,
                    p = dQ(e.createdAt, g);
                return (0, F.jsxs)(dC, {
                    highlighted: m,
                    refAttribute: s,
                    actor: u,
                    createdAt: o,
                    showAgoTimestamp: !1,
                    deepLinkUrl: dl(l, c),
                    onLinkClick: n,
                    leadingIcon: V.IssueTrackedByIcon,
                    children: [
                        (0, F.jsxs)(dC.Main, {
                            children: [
                                `${ay.timeline.parentIssueRemoved[1 === y.length ? "single" : "multiple"]} `,
                                p
                                    ? (0, F.jsx)(dm, {
                                          timestamp: new Date(p),
                                          linkUrl: dl(l, c),
                                      })
                                    : null,
                            ],
                        }),
                        (0, F.jsx)(dC.Secondary, {
                            children: (0, F.jsx)("ul", {
                                className: ml.removedParentIssuesList,
                                children: y.map((e, l) =>
                                    (0, F.jsx)(
                                        ma,
                                        {
                                            event: e,
                                            targetRepositoryId: t,
                                            targetOwnerLogin: r,
                                        },
                                        `${d.databaseId}_${l}`
                                    )
                                ),
                            }),
                        }),
                    ],
                });
            }
            function ma({
                event: e,
                targetRepositoryId: l,
                targetOwnerLogin: n,
            }) {
                let { parent: a } = (0, eq.useFragment)(me, e);
                return a
                    ? (0, F.jsx)("li", {
                          className: ml.removedParentIssueItem,
                          children: (0, F.jsx)(dJ, {
                              data: a,
                              targetRepositoryId: l,
                              targetOwnerLogin: n,
                          }),
                      })
                    : null;
            }
            try {
                mn.displayName || (mn.displayName = "ParentIssueRemovedEvent");
            } catch {}
            try {
                ma.displayName || (ma.displayName = "SubIssueEventItem");
            } catch {}
            let ms = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "PinnedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "PinnedEvent",
                abstractKey: null,
            };
            function mi({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        databaseId: r,
                    } = (0, eq.useFragment)(ms, e),
                    u = String(r) === a;
                return (0, F.jsx)(dC, {
                    highlighted: u,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, r),
                    onLinkClick: n,
                    leadingIcon: V.PinIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: `${ay.timeline.pinned} `,
                    }),
                });
            }
            ms.hash = "6ae9da2153e87abdf88e292cf32021c4";
            try {
                mi.displayName || (mi.displayName = "PinnedEvent");
            } catch {}
            let mt = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ProjectV2ItemStatusChangedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "ProjectV2",
                        kind: "LinkedField",
                        name: "project",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "title",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "url",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "previousStatus",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "status",
                        storageKey: null,
                    },
                ],
                type: "ProjectV2ItemStatusChangedEvent",
                abstractKey: null,
            };
            mt.hash = "74055539c00657f2a6fdc0662376e744";
            let mr = {
                projectWrapper:
                    "ProjectV2ItemStatusChangedEvent-module__projectWrapper--uTer2",
            };
            function mu({ queryRef: e, issueUrl: l, onLinkClick: n }) {
                let {
                    actor: a,
                    createdAt: s,
                    project: i,
                    previousStatus: t,
                    status: r,
                } = (0, eq.useFragment)(mt, e);
                if (!i) return (0, F.jsx)(F.Fragment, {});
                let u = r.length > 0 ? r : "No status";
                return (0, F.jsx)(dC, {
                    highlighted: !1,
                    actor: a,
                    onLinkClick: n,
                    createdAt: s,
                    deepLinkUrl: l,
                    leadingIcon: V.TableIcon,
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            t && t.length > 0
                                ? (0, F.jsx)(F.Fragment, {
                                      children: `${ay.timeline.movedThisFrom} ${t} ${ay.timeline.to} `,
                                  })
                                : (0, F.jsx)(F.Fragment, {
                                      children: `${ay.timeline.movedThisTo} `,
                                  }),
                            `${u} ${ay.timeline.in} `,
                            (0, F.jsx)("span", {
                                className: mr.projectWrapper,
                                children: (0, F.jsx)(ds, {
                                    title: i?.title,
                                    url: i?.url,
                                }),
                            }),
                        ],
                    }),
                });
            }
            try {
                mu.displayName ||
                    (mu.displayName = "ProjectV2ItemStatusChangedEvent");
            } catch {}
            let mo = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ReferencedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "willCloseSubject",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "subject",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__typename",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Commit",
                        kind: "LinkedField",
                        name: "commit",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "ReferencedEventInner",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                ],
                type: "ReferencedEvent",
                abstractKey: null,
            };
            mo.hash = "0ea02b53f9b2e3cf07a02b3869b9fe85";
            let md = { Box: "ReferencedEvent-module__Box--leWmo" },
                mc = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "ReferencedEventInner",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "message",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "messageHeadlineHTML",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "messageBodyHTML",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "abbreviatedOid",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "name",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "defaultBranch",
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "Commit",
                    abstractKey: null,
                };
            mc.hash = "89d6ea56d087536089c85b4dc325ea33";
            var mm = n(26076);
            let mg = {
                    referencedCommitContainer:
                        "ReferencedEventInner-module__referencedCommitContainer--Qobk1",
                    commitHeaderRow:
                        "ReferencedEventInner-module__commitHeaderRow--xYQIS",
                    commitMetadata:
                        "ReferencedEventInner-module__commitMetadata--otxxW",
                    commitMessageText:
                        "ReferencedEventInner-module__commitMessageText--sfkN9",
                    commitHashLink:
                        "ReferencedEventInner-module__commitHashLink--AOTAA",
                    toggleButton:
                        "ReferencedEventInner-module__toggleButton--c9J8l",
                    commitActions:
                        "ReferencedEventInner-module__commitActions--eupA_",
                    repoNameLink:
                        "ReferencedEventInner-module__repoNameLink--WIPRx",
                    referencedEventVerificationStatusFailure:
                        "ReferencedEventInner-module__referencedEventVerificationStatusFailure--kwO0x",
                },
                my = (function () {
                    var e = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "commonName",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "emailAddress",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "organization",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "organizationUnit",
                            storageKey: null,
                        },
                    ];
                    return {
                        argumentDefinitions: [],
                        kind: "Fragment",
                        metadata: null,
                        name: "ReferencedEventVerificationStatusInner",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "abbreviatedOid",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "hasSignature",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "verificationStatus",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "signature",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "__typename",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "User",
                                        kind: "LinkedField",
                                        name: "signer",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "login",
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "avatarUrl",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "state",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "wasSignedByGitHub",
                                        storageKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "CertificateAttributes",
                                                kind: "LinkedField",
                                                name: "issuer",
                                                plural: !1,
                                                selections: e,
                                                storageKey: null,
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType:
                                                    "CertificateAttributes",
                                                kind: "LinkedField",
                                                name: "subject",
                                                plural: !1,
                                                selections: e,
                                                storageKey: null,
                                            },
                                        ],
                                        type: "SmimeSignature",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "keyId",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "GpgSignature",
                                        abstractKey: null,
                                    },
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "keyFingerprint",
                                                storageKey: null,
                                            },
                                        ],
                                        type: "SshSignature",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Commit",
                        abstractKey: null,
                    };
                })();
            my.hash = "7b9e63906504488a948fdb5b1e76d1d7";
            var mp = n(44185);
            function mk() {
                return (0, F.jsxs)("span", {
                    className: mg.referencedEventVerificationStatusFailure,
                    "data-testid":
                        "referenced-event-verification-status-failure",
                    children: [(0, F.jsx)(V.AlertIcon, { size: 16 }), " Error"],
                });
            }
            try {
                mk.displayName ||
                    (mk.displayName =
                        "ReferencedEventVerificationStatusFailure");
            } catch {}
            function mF() {
                return (0, F.jsx)(ai.O, {
                    variant: "pill",
                    height: "md",
                    width: "60px",
                });
            }
            try {
                mF.displayName ||
                    (mF.displayName =
                        "ReferencedEventVerificationStatusSkeleton");
            } catch {}
            let mb = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "nodes",
                        },
                    ],
                    l = [
                        {
                            kind: "Variable",
                            name: "ids",
                            variableName: "nodes",
                        },
                    ],
                    n = {
                        kind: "ClientExtension",
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__id",
                                storageKey: null,
                            },
                        ],
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    i = [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "commonName",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "emailAddress",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "organization",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "organizationUnit",
                            storageKey: null,
                        },
                    ];
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "secondaryTimelineQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Commit",
                                                kind: "LinkedField",
                                                name: "commit",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        args: null,
                                                        kind: "FragmentSpread",
                                                        name: "ReferencedEventVerificationStatusInner",
                                                    },
                                                ],
                                                storageKey: null,
                                            },
                                            n,
                                        ],
                                        type: "ReferencedEvent",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "secondaryTimelineQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    a,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                concreteType: "Commit",
                                                kind: "LinkedField",
                                                name: "commit",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "abbreviatedOid",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "hasSignature",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        kind: "ScalarField",
                                                        name: "verificationStatus",
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType: null,
                                                        kind: "LinkedField",
                                                        name: "signature",
                                                        plural: !1,
                                                        selections: [
                                                            a,
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "User",
                                                                kind: "LinkedField",
                                                                name: "signer",
                                                                plural: !1,
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "login",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "avatarUrl",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    s,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "state",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "wasSignedByGitHub",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "CertificateAttributes",
                                                                        kind: "LinkedField",
                                                                        name: "issuer",
                                                                        plural: !1,
                                                                        selections:
                                                                            i,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "CertificateAttributes",
                                                                        kind: "LinkedField",
                                                                        name: "subject",
                                                                        plural: !1,
                                                                        selections:
                                                                            i,
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "SmimeSignature",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "keyId",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "GpgSignature",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                            {
                                                                kind: "InlineFragment",
                                                                selections: [
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "keyFingerprint",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                ],
                                                                type: "SshSignature",
                                                                abstractKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    s,
                                                ],
                                                storageKey: null,
                                            },
                                            n,
                                        ],
                                        type: "ReferencedEvent",
                                        abstractKey: null,
                                    },
                                    s,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "202bc6ed7ea8927c1a0ba9560f42bb32",
                        metadata: {},
                        name: "secondaryTimelineQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            function mh({
                secondaryTimelineQueryRef: e,
                eventId: l,
                viewerLogin: n,
            }) {
                return e
                    ? (0, F.jsx)(l4.t, {
                          fallback: (0, F.jsx)(mk, {}),
                          children: (0, F.jsx)(Q.Suspense, {
                              fallback: (0, F.jsx)(mF, {}),
                              children: (0, F.jsx)(mf, {
                                  secondaryTimelineQueryRef: e,
                                  eventId: l,
                                  viewerLogin: n,
                              }),
                          }),
                      })
                    : null;
            }
            function mf({
                secondaryTimelineQueryRef: e,
                eventId: l,
                viewerLogin: n,
            }) {
                let { nodes: a } = (0, N.usePreloadedQuery)(mb, e),
                    s = a?.find((e) => e?.__id === l);
                return s && s.commit
                    ? (0, F.jsx)(mK, { commitRef: s.commit, viewerLogin: n })
                    : null;
            }
            function mK({ commitRef: e, viewerLogin: l }) {
                var n, a;
                let s = (0, N.useFragment)(my, e);
                return s &&
                    s.signature &&
                    s.verificationStatus &&
                    "UNSIGNED" !== s.verificationStatus &&
                    s.abbreviatedOid &&
                    void 0 !== s.hasSignature
                    ? (0, F.jsx)(mp.h, {
                          commitOid: s.abbreviatedOid,
                          hasSignature: s.hasSignature,
                          verificationStatus: (function (e) {
                              switch (e) {
                                  case "VERIFIED":
                                      return "verified";
                                  case "UNVERIFIED":
                                      return "unverified";
                                  case "PARTIALLY_VERIFIED":
                                      return "partially_verified";
                                  default:
                                      return "unsigned";
                              }
                          })(s.verificationStatus),
                          signature:
                              ((n = s.signature),
                              (a = l),
                              {
                                  hasSignature: !0,
                                  helpUrl: on.commitBadgeHelpUrl,
                                  isViewer: !!n.signer && a === n.signer.login,
                                  keyExpired: "EXPIRED_KEY" === n.state,
                                  keyId:
                                      ("GpgSignature" === n.__typename
                                          ? n.keyId
                                          : n.keyFingerprint) ?? "",
                                  keyRevoked: "OCSP_REVOKED" === n.state,
                                  signedByGitHub: n.wasSignedByGitHub,
                                  signerLogin: n.signer?.login ?? "",
                                  signerAvatarUrl: n.signer?.avatarUrl ?? "",
                                  signatureType: n.__typename,
                                  signatureCertificateSubject: mS(n.subject),
                                  signatureCertificateIssuer: mS(n.issuer),
                                  signatureVerificationReason: n.state,
                              }),
                      })
                    : null;
            }
            function mS(e) {
                return e
                    ? {
                          common_name: e.commonName ?? void 0,
                          email_address: e.emailAddress ?? void 0,
                          organization: e.organization ?? void 0,
                          organization_unit: e.organizationUnit ?? void 0,
                      }
                    : {};
            }
            mb.hash = "7640b37eab10f676f86e5647ea88c014";
            try {
                mh.displayName ||
                    (mh.displayName = "ReferencedEventVerificationStatus");
            } catch {}
            try {
                mf.displayName ||
                    (mf.displayName = "ReferencedEventVerificationStatusQuery");
            } catch {}
            try {
                mK.displayName ||
                    (mK.displayName = "ReferencedEventVerificationStatusInner");
            } catch {}
            function mI({
                commitKey: e,
                willCloseSubject: l,
                viewerLogin: n,
                eventId: a,
                subjectType: s,
                secondaryTimelineQueryRef: i,
            }) {
                let t = (0, N.useFragment)(mc, e),
                    [r, u] = (0, Q.useState)(!1);
                if (null === t) return (0, F.jsx)(F.Fragment, {});
                let o = t.repository.defaultBranch,
                    d = ay.commitWillCloseMessage(s, t.abbreviatedOid, o),
                    c = (0, eg.fQd)({
                        owner: t.repository.owner.login,
                        repo: t.repository.name,
                        commitish: t.abbreviatedOid,
                    });
                return (0, F.jsxs)("div", {
                    className: mg.referencedCommitContainer,
                    children: [
                        (0, F.jsxs)("div", {
                            className: mg.commitHeaderRow,
                            children: [
                                (0, F.jsxs)("div", {
                                    className: mg.commitMetadata,
                                    children: [
                                        (0, F.jsx)(sS.A, {
                                            title: t.message,
                                            className: mg.commitMessageText,
                                            children: (0, F.jsx)(ek.A, {
                                                href: t.url,
                                                target: "_blank",
                                                "data-hovercard-url": c,
                                                muted: !0,
                                                "aria-label": t.message,
                                                className: mg.commitHashLink,
                                                children: (0, F.jsx)(mm.G, {
                                                    verifiedHTML: `<p style="font-family:monospace;font-size:12px">${t.messageHeadlineHTML}</p>`,
                                                }),
                                            }),
                                        }),
                                        t.messageBodyHTML &&
                                            (0, F.jsx)($.Q, {
                                                size: "small",
                                                onClick: () => u(!r),
                                                "aria-label": r
                                                    ? "Hide commit message body"
                                                    : "Show commit message body",
                                                "aria-expanded": r,
                                                className: mg.toggleButton,
                                                children: "...",
                                            }),
                                    ],
                                }),
                                (0, F.jsxs)("div", {
                                    className: mg.commitActions,
                                    children: [
                                        l &&
                                            (0, F.jsx)(sR.m, {
                                                text: d,
                                                type: "label",
                                                children: (0, F.jsx)(ek.A, {
                                                    href: on.closingViaCommitMessageUrl,
                                                    muted: !0,
                                                    children: (0, F.jsx)(
                                                        V.InfoIcon,
                                                        {}
                                                    ),
                                                }),
                                            }),
                                        (0, F.jsx)(mh, {
                                            secondaryTimelineQueryRef: i,
                                            eventId: a,
                                            viewerLogin: n,
                                        }),
                                        (0, F.jsx)(ek.A, {
                                            href: t.url,
                                            muted: !0,
                                            className: mg.repoNameLink,
                                            children: t.abbreviatedOid,
                                        }),
                                    ],
                                }),
                            ],
                        }),
                        r &&
                            (0, F.jsx)(mm.G, {
                                verifiedHTML: `<p style="font-family:monospace;font-size:12px;white-space:pre-wrap">${t.messageBodyHTML}</p>`,
                            }),
                    ],
                });
            }
            try {
                mI.displayName || (mI.displayName = "ReferencedEventInner");
            } catch {}
            function mv({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
                viewer: t,
                secondaryTimelineQueryRef: r,
            }) {
                let {
                    actor: u,
                    createdAt: o,
                    commit: d,
                    databaseId: c,
                    subject: m,
                    willCloseSubject: g,
                    id: y,
                } = (0, eq.useFragment)(mo, e);
                if (null === d) return (0, F.jsx)(F.Fragment, {});
                let p = String(c) === a,
                    k = i && i.ReferencedEvent ? i.ReferencedEvent : [e],
                    b = k.length;
                return (0, F.jsx)(dC, {
                    highlighted: p,
                    refAttribute: s,
                    actor: u,
                    createdAt: o,
                    deepLinkUrl: l,
                    onLinkClick: n,
                    showAgoTimestamp: !1,
                    leadingIcon: V.GitCommitIcon,
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            `${ay.timeline.addedCommitsThatReferences(b)} `,
                            (0, F.jsx)(dm, {
                                timestamp: new Date(o),
                                linkUrl: dl(l, c),
                            }),
                            (0, F.jsx)("div", {
                                className: md.Box,
                                children: k.map((e, l) =>
                                    (0, F.jsx)(
                                        mL,
                                        {
                                            itemQueryRef: e,
                                            subjectType: m.__typename,
                                            viewerLogin: t,
                                            eventId: y,
                                            willCloseSubject: g,
                                            secondaryTimelineQueryRef: r,
                                        },
                                        `${c}_${l}`
                                    )
                                ),
                            }),
                        ],
                    }),
                });
            }
            function mL({ itemQueryRef: e, ...l }) {
                let { commit: n } = (0, eq.useFragment)(mo, e);
                return n ? (0, F.jsx)(mI, { commitKey: n, ...l }) : null;
            }
            try {
                mv.displayName || (mv.displayName = "ReferencedEvent");
            } catch {}
            try {
                mL.displayName || (mL.displayName = "ReferencedItem");
            } catch {}
            let mT = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "RenamedTitleEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "currentTitle",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "previousTitle",
                        storageKey: null,
                    },
                ],
                type: "RenamedTitleEvent",
                abstractKey: null,
            };
            mT.hash = "51c475b1e987f59acbc80c0754983081";
            let mC = {
                defaultColor: "RenamedTitleEvent-module__defaultColor--yf7kG",
                noUnderline: "RenamedTitleEvent-module__noUnderline--em5Gm",
                strikeThrough: "RenamedTitleEvent-module__strikeThrough--Gjm9V",
            };
            function mx({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        currentTitle: r,
                        previousTitle: u,
                        databaseId: o,
                    } = (0, eq.useFragment)(mT, e),
                    d = String(o) === a;
                return (0, F.jsx)(dC, {
                    highlighted: d,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, o),
                    onLinkClick: n,
                    leadingIcon: V.PencilIcon,
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            ay.timeline.renamedTitle,
                            " ",
                            (0, F.jsx)("span", {
                                className: mC.defaultColor,
                                children: (0, F.jsxs)("del", {
                                    className: mC.strikeThrough,
                                    children: [
                                        (0, F.jsx)("span", {
                                            className: "sr-only",
                                            children: "[-]",
                                        }),
                                        u,
                                        (0, F.jsx)("span", {
                                            className: "sr-only",
                                            children: "[/-]",
                                        }),
                                    ],
                                }),
                            }),
                            " ",
                            (0, F.jsx)("span", {
                                className: mC.defaultColor,
                                children: (0, F.jsxs)("ins", {
                                    className: mC.noUnderline,
                                    children: [
                                        (0, F.jsx)("span", {
                                            className: "sr-only",
                                            children: "[+]",
                                        }),
                                        r,
                                        (0, F.jsx)("span", {
                                            className: "sr-only",
                                            children: "[/+]",
                                        }),
                                    ],
                                }),
                            }),
                            " ",
                        ],
                    }),
                });
            }
            try {
                mx.displayName || (mx.displayName = "RenamedTitleEvent");
            } catch {}
            let mR = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "ReopenedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "ReopenedEvent",
                abstractKey: null,
            };
            function mN({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        databaseId: r,
                    } = (0, eq.useFragment)(mR, e),
                    u = String(r) === a;
                return (0, F.jsx)(dC, {
                    highlighted: u,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, r),
                    onLinkClick: n,
                    iconColoring: {
                        backgroundColor: "open.fg",
                        color: "white",
                    },
                    leadingIcon: V.IssueReopenedIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: (0, F.jsxs)("span", {
                            children: [ay.timeline.reopenedThis, " "],
                        }),
                    }),
                });
            }
            mR.hash = "0ef236ccb5e3252ae1b2405be2bddad5";
            try {
                mN.displayName || (mN.displayName = "ReopenedEvent");
            } catch {}
            let mj = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "databaseId",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "SubIssueAddedEvent",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "actor",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "TimelineRowEventActor",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "subIssue",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "IssueLink",
                                },
                                e,
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "SubIssueAddedEvent",
                    abstractKey: null,
                };
            })();
            mj.hash = "6a27c73ef025222e54654739072c2d24";
            let m_ = {
                Box: "SubIssueAddedEvent-module__Box--N8W4N",
                Box_1: "SubIssueAddedEvent-module__Box_1--eiyEN",
            };
            function mw({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
                repositoryId: t,
                ownerLogin: r,
            }) {
                let {
                    actor: u,
                    createdAt: o,
                    subIssue: d,
                    databaseId: c,
                } = (0, eq.useFragment)(mj, e);
                if (!d) return null;
                let m = String(d.databaseId) === a,
                    g = i && i.SubIssueAddedEvent ? i.SubIssueAddedEvent : [],
                    y = 0 === g.length ? [e] : g,
                    p = dQ(e.createdAt, g);
                return (0, F.jsxs)(dC, {
                    highlighted: m,
                    refAttribute: s,
                    actor: u,
                    createdAt: o,
                    showAgoTimestamp: !1,
                    deepLinkUrl: dl(l, c),
                    onLinkClick: n,
                    leadingIcon: V.IssueTracksIcon,
                    children: [
                        (0, F.jsxs)(dC.Main, {
                            children: [
                                `${ay.timeline.subIssueAdded[1 === y.length ? "single" : "multiple"]} `,
                                p
                                    ? (0, F.jsx)(dm, {
                                          timestamp: new Date(p),
                                          linkUrl: dl(l, c),
                                      })
                                    : null,
                            ],
                        }),
                        (0, F.jsx)(dC.Secondary, {
                            children: (0, F.jsx)("ul", {
                                className: m_.Box,
                                children: y.map((e, l) =>
                                    (0, F.jsx)(
                                        mE,
                                        {
                                            event: e,
                                            targetRepositoryId: t,
                                            targetOwnerLogin: r,
                                        },
                                        `${d.databaseId}_${l}`
                                    )
                                ),
                            }),
                        }),
                    ],
                });
            }
            function mE({
                event: e,
                targetRepositoryId: l,
                targetOwnerLogin: n,
            }) {
                let { subIssue: a } = (0, eq.useFragment)(mj, e);
                return a
                    ? (0, F.jsx)("li", {
                          className: m_.Box_1,
                          children: (0, F.jsx)(dJ, {
                              data: a,
                              targetRepositoryId: l,
                              targetOwnerLogin: n,
                          }),
                      })
                    : null;
            }
            try {
                mw.displayName || (mw.displayName = "SubIssueAddedEvent");
            } catch {}
            try {
                mE.displayName || (mE.displayName = "SubIssueEventItem");
            } catch {}
            let mA = (function () {
                var e = {
                    alias: null,
                    args: null,
                    kind: "ScalarField",
                    name: "databaseId",
                    storageKey: null,
                };
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "SubIssueRemovedEvent",
                    selections: [
                        e,
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "actor",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "TimelineRowEventActor",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Issue",
                            kind: "LinkedField",
                            name: "subIssue",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "IssueLink",
                                },
                                e,
                            ],
                            storageKey: null,
                        },
                    ],
                    type: "SubIssueRemovedEvent",
                    abstractKey: null,
                };
            })();
            mA.hash = "0fe9d2b98241be788b327b4a8a55ad18";
            let mP = {
                Box: "SubIssueRemovedEvent-module__Box--jlh0k",
                Box_1: "SubIssueRemovedEvent-module__Box_1--pk1pA",
            };
            function mB({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                rollupGroup: i,
                repositoryId: t,
                ownerLogin: r,
            }) {
                let {
                    actor: u,
                    createdAt: o,
                    subIssue: d,
                    databaseId: c,
                } = (0, eq.useFragment)(mA, e);
                if (!d) return null;
                let m = String(d.databaseId) === a,
                    g =
                        i && i.SubIssueRemovedEvent
                            ? i.SubIssueRemovedEvent
                            : [],
                    y = 0 === g.length ? [e] : g,
                    p = dQ(e.createdAt, g);
                return (0, F.jsxs)(dC, {
                    highlighted: m,
                    refAttribute: s,
                    actor: u,
                    createdAt: o,
                    showAgoTimestamp: !1,
                    deepLinkUrl: dl(l, c),
                    onLinkClick: n,
                    leadingIcon: V.IssueTracksIcon,
                    children: [
                        (0, F.jsxs)(dC.Main, {
                            children: [
                                `${ay.timeline.subIssueRemoved[1 === y.length ? "single" : "multiple"]} `,
                                p
                                    ? (0, F.jsx)(dm, {
                                          timestamp: new Date(p),
                                          linkUrl: dl(l, c),
                                      })
                                    : null,
                            ],
                        }),
                        (0, F.jsx)(dC.Secondary, {
                            children: (0, F.jsx)("ul", {
                                className: mP.Box,
                                children: y.map((e, l) =>
                                    (0, F.jsx)(
                                        mD,
                                        {
                                            event: e,
                                            targetRepositoryId: t,
                                            targetOwnerLogin: r,
                                        },
                                        `${d.databaseId}_${l}`
                                    )
                                ),
                            }),
                        }),
                    ],
                });
            }
            function mD({
                event: e,
                targetRepositoryId: l,
                targetOwnerLogin: n,
            }) {
                let { subIssue: a } = (0, eq.useFragment)(mA, e);
                return a
                    ? (0, F.jsx)("li", {
                          className: mP.Box_1,
                          children: (0, F.jsx)(dJ, {
                              data: a,
                              targetRepositoryId: l,
                              targetOwnerLogin: n,
                          }),
                      })
                    : null;
            }
            try {
                mB.displayName || (mB.displayName = "SubIssueRemovedEvent");
            } catch {}
            try {
                mD.displayName || (mD.displayName = "SubIssueEventItem");
            } catch {}
            let mM = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "SubscribedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "SubscribedEvent",
                abstractKey: null,
            };
            function mV({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        databaseId: r,
                    } = (0, eq.useFragment)(mM, e),
                    u = String(r) === a;
                return (0, F.jsx)(dC, {
                    highlighted: u,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: l,
                    onLinkClick: n,
                    leadingIcon: V.PinIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: `${ay.timeline.subscribed} `,
                    }),
                });
            }
            mM.hash = "f7fb3dd16c23296108550c05bf326cda";
            try {
                mV.displayName || (mV.displayName = "SubscribedEvent");
            } catch {}
            var mU = n(12004);
            let mO = { timelineDivider: (e) => `timeline-divider-${e}` },
                mq = {
                    Box: "TimelineDivider-module__Box--rX5hB",
                    Box_1: "TimelineDivider-module__Box_1--nXo59",
                    Box_2: "TimelineDivider-module__Box_2--lsm39",
                },
                mH = ({ isLoading: e, isHovered: l, id: n }) =>
                    (0, F.jsx)(eO.az, {
                        sx: { justifyContent: e ? "center" : "space-between" },
                        "data-testid": n ? mO.timelineDivider(n) : void 0,
                        className: mq.Box,
                        children: e
                            ? (0, F.jsx)(mU.A, { size: "small" })
                            : (0, F.jsxs)(F.Fragment, {
                                  children: [
                                      (0, F.jsx)("div", {
                                          className: mq.Box_1,
                                      }),
                                      (0, F.jsx)(eO.az, {
                                          sx: { opacity: +!!l },
                                          className: mq.Box_2,
                                      }),
                                  ],
                              }),
                    });
            try {
                mH.displayName || (mH.displayName = "TimelineDivider");
            } catch {}
            let m$ = { Box: "TimelineRowBorder-module__Box--wRiZZ" },
                mz = {
                    display: "flex",
                    flexDirection: "column",
                    gap: 2,
                    borderRadius: 2,
                    backgroundColor: "canvas.default",
                    transition: "0.2s",
                },
                mW = (0, Q.forwardRef)((e, l) => {
                    let {
                            children: n,
                            addDivider: a,
                            item: s,
                            isMajor: i,
                            isHighlighted: t,
                            commentParams: r,
                            sx: u,
                        } = e,
                        o = (0, Q.useMemo)(
                            () =>
                                t
                                    ? {
                                          border: "1px solid",
                                          borderColor: "accent.fg",
                                          boxShadow:
                                              "0px 0px 0px 1px var(--fgColor-accent, var(--color-accent-fg))",
                                      }
                                    : {},
                            [t]
                        ),
                        d = (0, Q.useMemo)(
                            () => ({
                                ...mz,
                                border: "1px solid",
                                borderColor: r?.viewerDidAuthor
                                    ? "accent.muted"
                                    : "border.default",
                                py: 0,
                                ...o,
                                ...u,
                                paddingTop: "0px",
                            }),
                            [r?.viewerDidAuthor, o, u]
                        ),
                        c = (0, Q.useMemo)(
                            () => ({ pl: "12px", ...mz, ...o, ...u }),
                            [o, u]
                        ),
                        m = {
                            [on.timeline.dataTimelineEventId]: s.__id,
                            "data-highlighted-event": t,
                        };
                    return (0, F.jsxs)("div", {
                        className: m$.Box,
                        children: [
                            a && (0, F.jsx)(mH, { id: s.__id }),
                            (0, Q.createElement)(
                                eO.az,
                                {
                                    ...m,
                                    ref: l,
                                    key: s.__id,
                                    sx: i ? d : c,
                                    "data-testid": `timeline-row-border-${s.__id}`,
                                },
                                n
                            ),
                        ],
                    });
                });
            mW.displayName = "TimelineRowBorder";
            let mQ = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "TransferredEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "fromRepository",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "nameWithOwner",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "url",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "TransferredEvent",
                abstractKey: null,
            };
            mQ.hash = "509da787f2e80dcb7a04a4d0b0ce102e";
            let mG = { Link: "TransferredEvent-module__Link--czJbK" };
            function mY({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        fromRepository: r,
                        databaseId: u,
                    } = (0, eq.useFragment)(mQ, e),
                    o = String(u) === a;
                return (0, F.jsx)(dC, {
                    highlighted: o,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, u),
                    onLinkClick: n,
                    leadingIcon: V.LinkExternalIcon,
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            ay.timeline.transferredThis,
                            (0, F.jsx)(ek.A, {
                                href: `${r?.url}`,
                                inline: !0,
                                className: mG.Link,
                                children: r?.nameWithOwner,
                            }),
                        ],
                    }),
                });
            }
            try {
                mY.displayName || (mY.displayName = "TransferredEvent");
            } catch {}
            let mX = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "UnlockedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "UnlockedEvent",
                abstractKey: null,
            };
            function mJ({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        databaseId: r,
                    } = (0, eq.useFragment)(mX, e),
                    u = String(r) === a;
                return (0, F.jsx)(dC, {
                    highlighted: u,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, r),
                    onLinkClick: n,
                    leadingIcon: V.UnlockIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: `${ay.timeline.unlockedConversation} `,
                    }),
                });
            }
            mX.hash = "f3f5b5eea0ff51d2508abc2c64f62822";
            try {
                mJ.displayName || (mJ.displayName = "UnlockedEvent");
            } catch {}
            let mZ = (function () {
                var e = [
                    { args: null, kind: "FragmentSpread", name: "IssueLink" },
                ];
                return {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "UnmarkedAsDuplicateEvent",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "actor",
                            plural: !1,
                            selections: [
                                {
                                    args: null,
                                    kind: "FragmentSpread",
                                    name: "TimelineRowEventActor",
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "createdAt",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "canonical",
                            plural: !1,
                            selections: [
                                {
                                    kind: "InlineFragment",
                                    selections: e,
                                    type: "Issue",
                                    abstractKey: null,
                                },
                                {
                                    kind: "InlineFragment",
                                    selections: e,
                                    type: "PullRequest",
                                    abstractKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isCanonicalOfClosedDuplicate",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "databaseId",
                            storageKey: null,
                        },
                    ],
                    type: "UnmarkedAsDuplicateEvent",
                    abstractKey: null,
                };
            })();
            function m0({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
                repositoryId: i,
                ownerLogin: t,
            }) {
                let {
                        actor: r,
                        createdAt: u,
                        canonical: o,
                        databaseId: d,
                        isCanonicalOfClosedDuplicate: c,
                    } = (0, eq.useFragment)(mZ, e),
                    m = String(d) === a;
                return o
                    ? (0, F.jsx)(dC, {
                          highlighted: m,
                          refAttribute: s,
                          actor: r,
                          createdAt: u,
                          deepLinkUrl: dl(l, d),
                          onLinkClick: n,
                          leadingIcon: V.DuplicateIcon,
                          children: (0, F.jsx)(dC.Main, {
                              children: c
                                  ? (0, F.jsxs)(F.Fragment, {
                                        children: [
                                            "unmarked",
                                            " ",
                                            (0, F.jsx)(dJ, {
                                                inline: !0,
                                                data: o,
                                                targetRepositoryId: i,
                                                targetOwnerLogin: t,
                                            }),
                                            " as a duplicate of this issue",
                                            " ",
                                        ],
                                    })
                                  : (0, F.jsxs)(F.Fragment, {
                                        children: [
                                            ay.timeline.unmarkedAsDuplicate,
                                            (0, F.jsxs)(F.Fragment, {
                                                children: [
                                                    "\xa0",
                                                    (0, F.jsx)(dJ, {
                                                        data: o,
                                                        targetRepositoryId: i,
                                                        targetOwnerLogin: t,
                                                    }),
                                                    " ",
                                                ],
                                            }),
                                        ],
                                    }),
                          }),
                      })
                    : (0, F.jsx)(F.Fragment, {});
            }
            mZ.hash = "f36b743ab5e1a0dcdecb51d9eb11fab9";
            try {
                m0.displayName || (m0.displayName = "UnmarkedAsDuplicateEvent");
            } catch {}
            let m1 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "UnpinnedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "UnpinnedEvent",
                abstractKey: null,
            };
            function m2({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        databaseId: r,
                    } = (0, eq.useFragment)(m1, e),
                    u = String(r) === a;
                return (0, F.jsx)(dC, {
                    highlighted: u,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, r),
                    onLinkClick: n,
                    leadingIcon: V.PinIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: `${ay.timeline.unpinned} `,
                    }),
                });
            }
            m1.hash = "eef8cbf61d406f2f45179aa6e2012d23";
            try {
                m2.displayName || (m2.displayName = "UnpinnedEvent");
            } catch {}
            let m4 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "UnsubscribedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "UnsubscribedEvent",
                abstractKey: null,
            };
            function m6({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        databaseId: r,
                    } = (0, eq.useFragment)(m4, e),
                    u = String(r) === a;
                return (0, F.jsx)(dC, {
                    highlighted: u,
                    refAttribute: s,
                    actor: i,
                    onLinkClick: n,
                    createdAt: t,
                    deepLinkUrl: l,
                    leadingIcon: V.PinIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: `${ay.timeline.unsubscribed} `,
                    }),
                });
            }
            m4.hash = "3f8ad3418ba3ce6ed9970c773a6e3816";
            try {
                m6.displayName || (m6.displayName = "UnsubscribedEvent");
            } catch {}
            let m5 = {
                argumentDefinitions: [],
                kind: "Fragment",
                metadata: null,
                name: "UserBlockedEvent",
                selections: [
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "createdAt",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "blockDuration",
                        storageKey: null,
                    },
                    {
                        alias: null,
                        args: null,
                        concreteType: null,
                        kind: "LinkedField",
                        name: "actor",
                        plural: !1,
                        selections: [
                            {
                                args: null,
                                kind: "FragmentSpread",
                                name: "TimelineRowEventActor",
                            },
                        ],
                        storageKey: null,
                    },
                    {
                        alias: "blockedUser",
                        args: null,
                        concreteType: "User",
                        kind: "LinkedField",
                        name: "subject",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "login",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "UserBlockedEvent",
                abstractKey: null,
            };
            m5.hash = "6b9c2c6b2924af46270fda70b956f73d";
            let m7 = { Link: "UserBlockedEvent-module__Link--erhs1" };
            function m3({
                queryRef: e,
                issueUrl: l,
                onLinkClick: n,
                highlightedEventId: a,
                refAttribute: s,
            }) {
                let {
                        actor: i,
                        createdAt: t,
                        blockedUser: r,
                        blockDuration: u,
                        databaseId: o,
                    } = (0, eq.useFragment)(m5, e),
                    d = String(o) === a;
                return (0, F.jsx)(dC, {
                    highlighted: d,
                    refAttribute: s,
                    actor: i,
                    createdAt: t,
                    deepLinkUrl: dl(l, o),
                    onLinkClick: n,
                    leadingIcon: V.BlockedIcon,
                    children: (0, F.jsxs)(dC.Main, {
                        children: [
                            (0, F.jsx)("span", {
                                children: `${"PERMANENT" !== u ? `${ay.timeline.temporarily} ` : ""} ${ay.timeline.blocked} `,
                            }),
                            (0, F.jsx)(ek.A, {
                                href: `/${r?.login}`,
                                inline: !0,
                                className: m7.Link,
                                children: r?.login,
                            }),
                        ],
                    }),
                });
            }
            try {
                m3.displayName || (m3.displayName = "UserBlockedEvent");
            } catch {}
            let m8 = {
                    SubscribedEvent: mV,
                    UnsubscribedEvent: m6,
                    MentionedEvent: c5,
                    ClosedEvent: cn,
                    ReopenedEvent: mN,
                    RenamedTitleEvent: mx,
                    LockedEvent: c0,
                    UnlockedEvent: mJ,
                    PinnedEvent: mi,
                    UnpinnedEvent: m2,
                    LabeledEvent: cQ,
                    UnlabeledEvent: cH,
                    UnassignedEvent: dV,
                    AssignedEvent: dH,
                    BlockedByAddedEvent: dZ,
                    BlockedByRemovedEvent: d2,
                    BlockingAddedEvent: d5,
                    BlockingRemovedEvent: d8,
                    CommentDeletedEvent: ci,
                    UserBlockedEvent: m3,
                    MilestonedEvent: cK,
                    DemilestonedEvent: cv,
                    CrossReferencedEvent: ck,
                    ReferencedEvent: mv,
                    ConnectedEvent: cu,
                    TransferredEvent: mY,
                    DisconnectedEvent: cR,
                    MarkedAsDuplicateEvent: c4,
                    UnmarkedAsDuplicateEvent: m0,
                    ConvertedToDiscussionEvent: cg,
                    AddedToProjectV2Event: d_,
                    RemovedFromProjectV2Event: dx,
                    ProjectV2ItemStatusChangedEvent: mu,
                    ConvertedFromDraftEvent: cd,
                    SubIssueAddedEvent: mw,
                    SubIssueRemovedEvent: mB,
                    ParentIssueAddedEvent: c8,
                    ParentIssueRemovedEvent: mn,
                    IssueTypeAddedEvent: c_,
                    IssueTypeRemovedEvent: cP,
                    IssueTypeChangedEvent: cE,
                },
                m9 = ({
                    item: { item: e, rollupGroup: l },
                    issueId: n,
                    repositoryId: a,
                    repositoryNameWithOwner: s,
                    ownerLogin: i,
                    issueUrl: t,
                    isHighlighted: r,
                    viewer: u,
                    onCommentChange: o,
                    onCommentReply: d,
                    onCommentEditCancel: c,
                    addDivider: m = !1,
                    optionConfig: g,
                    refAttribute: y,
                    secondaryTimelineQueryRef: p,
                }) => {
                    let k;
                    if (!e) return null;
                    let b = on.timeline.majorEventTypes.includes(e.__typename),
                        h = null;
                    "IssueComment" === e.__typename &&
                        ((k = {
                            first: !1,
                            last: !1,
                            viewerDidAuthor: e.viewerDidAuthor,
                        }),
                        (h = (0, F.jsx)(o9, {
                            comment: e,
                            commentSubjectAuthorLogin:
                                e.issue?.author?.login ?? "",
                            onChange: () => o?.(e.__id),
                            onEditCancel: () => c?.(e.__id),
                            onReply: (e) => d?.(e),
                            onSave: () => c?.(e.__id),
                            highlightedCommentId: r
                                ? String(e.databaseId)
                                : void 0,
                            navigate: g.navigate,
                            refAttribute: y,
                            onLinkClick: g.onLinkClick,
                        })));
                    let f = m8[e.__typename];
                    return (
                        f &&
                            (h = (0, Q.createElement)(f, {
                                queryRef: e,
                                rollupGroup: l,
                                key: e.__id,
                                currentIssueId: n,
                                issueUrl: t,
                                repositoryId: a,
                                repositoryNameWithOwner: s,
                                ownerLogin: i,
                                highlightedEventId: r
                                    ? String(e.databaseId)
                                    : void 0,
                                timelineEventBaseUrl:
                                    g.timelineEventBaseUrl || "/issues",
                                refAttribute: y,
                                onLinkClick: g.onLinkClick,
                                viewer: u,
                                secondaryTimelineQueryRef: p,
                            })),
                        cJ(
                            (0, F.jsx)(
                                mW,
                                {
                                    ref: y,
                                    item: e,
                                    addDivider: m,
                                    isMajor:
                                        b &&
                                        on.timeline.borderedMajorEventTypes.includes(
                                            e.__typename
                                        ),
                                    isHighlighted:
                                        "IssueComment" === e.__typename && r,
                                    commentParams: k,
                                    children: h,
                                },
                                e.__id
                            ),
                            "IssueComment" === e.__typename
                                ? (0, F.jsx)(ge, { item: e, addDivider: m })
                                : void 0,
                            e.__id
                        )
                    );
                },
                ge = ({ item: e, addDivider: l }) => {
                    let {
                        avatarUrl: n,
                        login: a,
                        profileUrl: s,
                    } = e.author ?? on.ghost;
                    return (0, F.jsx)(ek.A, {
                        href: s ?? void 0,
                        "data-hovercard-url": s && (0, eg.dCN)({ owner: a }),
                        "aria-label": `@${a}'s profile`,
                        className: `${s ? eD.A.avatarLink : eD.A.avatarWithoutLink} ${eD.A.avatarOuter}`,
                        children: (0, F.jsx)(
                            w.r,
                            {
                                alt: a,
                                src: n,
                                size: 40,
                                className: `${eD.A.issueViewerAvatar} ${l ? eD.A.avatarWithDivider : eD.A.avatarWithoutDivider}`,
                            },
                            a
                        ),
                    });
                };
            try {
                m8.displayName || (m8.displayName = "TIMELINE_ITEMS");
            } catch {}
            try {
                m9.displayName || (m9.displayName = "IssueTimelineItem");
            } catch {}
            try {
                ge.displayName || (ge.displayName = "TimelineItemAvatar");
            } catch {}
            let gl = (e) =>
                e
                    ? {
                          items: (e.edges || [])
                              .reduce(
                                  (e, l) => (
                                      l?.node?.__id && e.push(l.node),
                                      e
                                  ),
                                  []
                              )
                              .map((e) => (0, N.readInlineData)(oN, e)),
                      }
                    : { items: [] };
            var gn = n(55966);
            function ga() {
                return (0, F.jsx)(dC, {
                    showActorName: !1,
                    showAgoTimestamp: !1,
                    highlighted: !1,
                    actor: null,
                    createdAt: "",
                    deepLinkUrl: "",
                    leadingIcon: V.AlertIcon,
                    children: (0, F.jsx)(dC.Main, {
                        children: (0, F.jsx)("span", {
                            children: "Could not load event",
                        }),
                    }),
                });
            }
            try {
                ga.displayName || (ga.displayName = "FallbackEvent");
            } catch {}
            let gs = () =>
                (0, F.jsx)(mW, {
                    addDivider: !0,
                    item: { __id: "failed-timeline-item" },
                    children: (0, F.jsx)(ga, {}),
                });
            try {
                gs.displayName || (gs.displayName = "FailedLoadTimelineItem");
            } catch {}
            let gi = {
                    loadMoreWrapper:
                        "IssueTimeline-module__loadMoreWrapper--RVb8K",
                },
                gt = {
                    directionPickerContainer:
                        "LoadDirectionPicker-module__directionPickerContainer--r5ppb",
                    ActionList: "LoadDirectionPicker-module__ActionList--KMe4j",
                },
                gr = ({
                    loadFromTopFn: e,
                    loadFromBottomFn: l,
                    isLoading: n,
                    setIsHovering: a,
                    type: s,
                }) =>
                    (0, F.jsx)("div", {
                        className: gt.directionPickerContainer,
                        children: (0, F.jsxs)(O.W, {
                            children: [
                                (0, F.jsx)(O.W.Anchor, {
                                    children: (0, F.jsx)(q.K, {
                                        inactive: n,
                                        "aria-disabled": n,
                                        size: "small",
                                        icon: V.KebabHorizontalIcon,
                                        "data-testid": `issue-timeline-load-more-options-${s}`,
                                        variant: "invisible",
                                        "aria-label": "Load more actions",
                                    }),
                                }),
                                (0, F.jsx)(O.W.Overlay, {
                                    children: (0, F.jsxs)(H.l, {
                                        className: gt.ActionList,
                                        children: [
                                            (0, F.jsx)(H.l.Item, {
                                                disabled: n,
                                                onSelect: e,
                                                onMouseEnter: () => a("top"),
                                                onMouseLeave: () => a(void 0),
                                                children: (0, F.jsx)("span", {
                                                    children:
                                                        ay.timeline.loadOlder,
                                                }),
                                            }),
                                            (0, F.jsx)(H.l.Item, {
                                                disabled: n,
                                                onSelect: l,
                                                onMouseEnter: () => a("bottom"),
                                                onMouseLeave: () => a(void 0),
                                                children: (0, F.jsx)("span", {
                                                    children:
                                                        ay.timeline.loadNewer,
                                                }),
                                            }),
                                        ],
                                    }),
                                }),
                            ],
                        }),
                    });
            try {
                gr.displayName || (gr.displayName = "LoadDirectionPicker");
            } catch {}
            let gu = {
                    buttonChildrenWrapper:
                        "LoadMore-module__buttonChildrenWrapper--m9hqd",
                    LoadMoreContainer:
                        "LoadMore-module__LoadMoreContainer--q12Fr",
                    loadMoreContentContainer:
                        "LoadMore-module__loadMoreContentContainer--itAxg",
                    innerContentWrapper:
                        "LoadMore-module__innerContentWrapper--Ykjgf",
                    centeredContent: "LoadMore-module__centeredContent--fSLdA",
                    headingWrapper: "LoadMore-module__headingWrapper--VOXFk",
                    remainingItemsHeading:
                        "LoadMore-module__remainingItemsHeading--s1c0Z",
                    buttonWrapper: "LoadMore-module__buttonWrapper--jObLK",
                },
                go = ({
                    numberOfRemainingItems: e,
                    loadFromTopFn: l,
                    loadFromBottomFn: n,
                    onLoadAllComplete: a,
                    onLoadFromTopComplete: s,
                    onLoadFromBottomComplete: i,
                    children: t,
                    type: r,
                    lastItemInTopTimelineIsComment: u,
                    firstItemInBottomTimelineIsComment: o,
                    isCurrentlyLoadingBackItems: d,
                }) => {
                    let [c, m] = (0, Q.useState)(!1),
                        g = e < on.timeline.maxPreloadCount,
                        [y, p] = (0, Q.useState)(void 0),
                        [k, b] = (0, te.M)(
                            "loadMoreFromTopPreference",
                            void 0 !== l
                        ),
                        h = 0 === e || o,
                        f = (0, Q.useId)(),
                        K = (0, Q.useCallback)(
                            (t = !1, u = !0) => {
                                if (c) return;
                                let o = t ? e : on.timeline.pageSize;
                                (m(!0), p(void 0), b(u));
                                let d = () => {
                                    if ((m(!1), t)) return void a?.();
                                    ({ "load-top": i, "load-bottom": s })[
                                        r
                                    ]?.();
                                };
                                u
                                    ? l && l(o, { onComplete: d })
                                    : n && n(o, { onComplete: d });
                            },
                            [c, n, l, e, a, b, i, s, r]
                        ),
                        S = (0, Q.useCallback)(
                            () =>
                                (0, F.jsx)($.Q, {
                                    onClick: () => {
                                        K(g, g || k);
                                    },
                                    inactive: c,
                                    "aria-disabled": c,
                                    "data-testid": `issue-timeline-load-more-${r}`,
                                    "aria-describedby": f,
                                    children: (0, F.jsx)("div", {
                                        className: gu.buttonChildrenWrapper,
                                        children: t,
                                    }),
                                }),
                            [t, f, c, g, K, k, r]
                        );
                    return (0, F.jsxs)("div", {
                        className: gu.LoadMoreContainer,
                        children: [
                            u &&
                                (0, F.jsx)(mH, {
                                    isLoading: c && k,
                                    isHovered: "top" === y,
                                }),
                            (0, F.jsx)("div", {
                                "data-testid": `issue-timeline-load-more-container-${r}`,
                                className: gu.loadMoreContentContainer,
                                children: (0, F.jsxs)("div", {
                                    className: gu.innerContentWrapper,
                                    children: [
                                        (0, F.jsxs)("div", {
                                            className: gu.centeredContent,
                                            children: [
                                                (0, F.jsx)("div", {
                                                    className:
                                                        gu.headingWrapper,
                                                    children: (0, F.jsxs)(
                                                        "h3",
                                                        {
                                                            id: f,
                                                            className:
                                                                gu.remainingItemsHeading,
                                                            children: [
                                                                (0, F.jsx)(
                                                                    "span",
                                                                    {
                                                                        "data-testid": `issue-timeline-load-more-count-${r}`,
                                                                        children:
                                                                            e,
                                                                    }
                                                                ),
                                                                (0, F.jsxs)(
                                                                    "span",
                                                                    {
                                                                        children:
                                                                            [
                                                                                " remaining ",
                                                                                1 ===
                                                                                e
                                                                                    ? (0,
                                                                                      F.jsx)(
                                                                                          "span",
                                                                                          {
                                                                                              children:
                                                                                                  "item",
                                                                                          }
                                                                                      )
                                                                                    : (0,
                                                                                      F.jsx)(
                                                                                          "span",
                                                                                          {
                                                                                              children:
                                                                                                  "items",
                                                                                          }
                                                                                      ),
                                                                            ],
                                                                    }
                                                                ),
                                                            ],
                                                        }
                                                    ),
                                                }),
                                                (0, F.jsx)("div", {
                                                    className: gu.buttonWrapper,
                                                    children: S(),
                                                }),
                                            ],
                                        }),
                                        !g &&
                                            (0, F.jsx)(gr, {
                                                loadFromTopFn: () => {
                                                    K(!1, !0);
                                                },
                                                loadFromBottomFn: () => {
                                                    K(!1, !1);
                                                },
                                                isLoading: c,
                                                setIsHovering: p,
                                                type: r,
                                            }),
                                    ],
                                }),
                            }),
                            h &&
                                (0, F.jsx)(mH, {
                                    isLoading: (c && !k) || d,
                                    isHovered: "bottom" === y,
                                }),
                        ],
                    });
                };
            try {
                go.displayName || (go.displayName = "LoadMore");
            } catch {}
            function gd({
                timelineItems: e,
                shouldHighlightElement: l,
                highlight: n,
                viewer: a,
                issueId: s,
                repositoryId: i,
                repositoryNameWithOwner: t,
                issueUrl: r,
                onCommentChange: u,
                onCommentReply: o,
                onCommentEditCancel: d,
                optionConfig: c,
                highlightedItemRef: m,
            }) {
                let g = (e, l) => {
                        setTimeout(() => {
                            let n = e[l - 1];
                            if (!n || "event" !== n.type || !n.item?.__id)
                                return;
                            let a = `[${on.timeline.dataWrapperTimelineEventId}="${n.item.__id}"] + *`,
                                s = document.querySelector(a),
                                i = null;
                            if (s) i = (0, gn.Z0)(s);
                            else {
                                let e = `[${on.timeline.dataWrapperTimelineEventId}="${n.item.__id}"]`,
                                    l = document.querySelector(e),
                                    a = l?.closest("section"),
                                    s = "IssueComment" !== n.item.__typename;
                                if (a && s) {
                                    let e = a.nextElementSibling;
                                    e && (i = (0, gn.Z0)(e));
                                }
                            }
                            i?.focus({ preventScroll: !0 });
                        });
                    },
                    {
                        secondaryTimelineQueryRef: y,
                        loadSecondaryTimelineQueryRef: p,
                        dispose: k,
                    } = (function () {
                        let [e, l, n] = (0, N.useQueryLoader)(mb);
                        return {
                            secondaryTimelineQueryRef: e,
                            loadSecondaryTimelineQueryRef: l,
                            dispose: n,
                        };
                    })(),
                    b = null !== y;
                (0, Q.useEffect)(() => {
                    if (!ey.X3) {
                        let l = e
                            .filter(
                                (e) =>
                                    "event" === e.type &&
                                    e.item?.__typename === "ReferencedEvent"
                            )
                            .map((e) =>
                                e.rollupGroup && e.rollupGroup.ReferencedEvent
                                    ? e.rollupGroup.ReferencedEvent.map(
                                          (e) => e.__id
                                      )
                                    : e && e.item
                                      ? [e.item.__id]
                                      : []
                            )
                            .flat()
                            .filter((e) => null !== e);
                        l.length > 0 && p({ nodes: l });
                    }
                    return () => {
                        k();
                    };
                }, [e, b, k, p]);
                let h = e
                    .map((p, k, h) => {
                        if ("load" === p.type) {
                            let e = `${p.type}-${p.position}`,
                                l = (0, F.jsx)("div", {
                                    className: gi.loadMoreWrapper,
                                    children: (0, F.jsx)(
                                        go,
                                        {
                                            type: e,
                                            loadFromTopFn: p.loadFromTop,
                                            loadFromBottomFn: p.loadFromBottom,
                                            numberOfRemainingItems:
                                                p.numberOfRemainingItems,
                                            lastItemInTopTimelineIsComment: !0,
                                            firstItemInBottomTimelineIsComment:
                                                !0,
                                            onLoadAllComplete: () => g(h, k),
                                            onLoadFromTopComplete: () =>
                                                g(h, k),
                                            onLoadFromBottomComplete: () =>
                                                g(h, k),
                                            isCurrentlyLoadingBackItems:
                                                p.isCurrentlyLoading,
                                            children: "Load more",
                                        },
                                        e
                                    ),
                                });
                            return {
                                isAddedToGroupedEvents: !1,
                                timelineItem: p,
                                render: cJ(l, void 0, e),
                            };
                        }
                        if (null == p.item)
                            return {
                                isAddedToGroupedEvents: !1,
                                timelineItem: p,
                                render: (0, F.jsx)(gs, {}, "failed-load-item"),
                            };
                        let f = (function (e, l) {
                                if (0 === l) return !0;
                                if (e[l - 1]?.type === "load") return !1;
                                let n = e[l],
                                    a = e[l - 1];
                                if (!n || !a) return !1;
                                if ("event" === n.type && "event" === a.type) {
                                    let e = n.item?.__typename,
                                        l = a.item?.__typename;
                                    if (
                                        e &&
                                        l &&
                                        on.timeline.majorEventTypes.includes(
                                            e
                                        ) ===
                                            on.timeline.majorEventTypes.includes(
                                                l
                                            ) &&
                                        "IssueComment" !== e &&
                                        "IssueComment" !== l
                                    )
                                        return !1;
                                }
                                return !0;
                            })(e || [], k),
                            K = l && n && op(p.item, n),
                            S = t.split("/")[0];
                        return {
                            isAddedToGroupedEvents: !1,
                            timelineItem: p,
                            render: (0, F.jsx)(
                                m9,
                                {
                                    item: p,
                                    issueId: s,
                                    repositoryId: i,
                                    repositoryNameWithOwner: t,
                                    ownerLogin: S,
                                    issueUrl: r,
                                    viewer: a,
                                    onCommentChange: u,
                                    onCommentReply: o,
                                    onCommentEditCancel: d,
                                    refAttribute: K ? m : void 0,
                                    optionConfig: c,
                                    isHighlighted: K,
                                    addDivider: f,
                                    secondaryTimelineQueryRef: b ? y : void 0,
                                },
                                p.item.__id
                            ),
                        };
                    })
                    .reduce((e, l, n, a) => {
                        if (l.isAddedToGroupedEvents) return e;
                        if (
                            "event" !== l.timelineItem.type ||
                            l.timelineItem.item?.__typename === "IssueComment"
                        )
                            return (
                                (l.isAddedToGroupedEvents = !0),
                                e.push(l.render),
                                e
                            );
                        let s = a.findIndex(
                                (e, l) =>
                                    l > n &&
                                    ("event" !== e.timelineItem.type ||
                                        e.timelineItem.item?.__typename ===
                                            "IssueComment")
                            ),
                            i = (0, F.jsx)(
                                "section",
                                {
                                    "aria-label": "Events",
                                    children: a
                                        .slice(n, s > -1 ? s : void 0)
                                        .map(
                                            (e) => (
                                                (e.isAddedToGroupedEvents = !0),
                                                e.render
                                            )
                                        ),
                                },
                                `events-${l.timelineItem.item?.__id}`
                            );
                        return (e.push(i), e);
                    }, []);
                return (0, F.jsx)(F.Fragment, { children: h });
            }
            try {
                gd.displayName || (gd.displayName = "VirtualIssueTimelinePage");
            } catch {}
            let gc = ({ issueId: e, itemCount: l }) => (
                    ((e, l, n) => {
                        let [a, s] = (0, Q.useState)(l || 0),
                            i = N.ConnectionHandler.getConnectionID(
                                e,
                                n ?? "IssueBacksideTimeline_timelineItems",
                                { visibleEventsOnly: !0 }
                            ),
                            t = (0, Q.useMemo)(
                                () => ({
                                    subscription: or,
                                    variables: { issueId: e },
                                }),
                                [e]
                            ),
                            r = (0, Q.useMemo)(
                                () => ({
                                    subscription: ou,
                                    onNext: (e) => {
                                        if (
                                            !e?.issueUpdated
                                                ?.issueTimelineUpdated
                                        )
                                            return;
                                        let l =
                                            e.issueUpdated?.issueTimelineUpdated
                                                ?.timelineItems?.totalCount;
                                        l && l > a && s(l);
                                    },
                                    variables: {
                                        issueId: e,
                                        connections: [i],
                                        skip: a,
                                    },
                                }),
                                [e, a, i]
                            );
                        ((0, N.useSubscription)(t), (0, N.useSubscription)(r));
                    })(e, l, "Issue__backTimelineItems"),
                    null
                ),
                gm = ({
                    issue: e,
                    issueSecondary: l,
                    viewer: n,
                    highlightedEvent: a,
                    page: s,
                    onCommentChange: i,
                    onCommentReply: t,
                    onCommentEditCancel: r,
                    optionConfig: u,
                }) => {
                    var o, d;
                    let c = (0, N.useFragment)(oe, e),
                        m = (0, N.useFragment)(ol, l),
                        g = (0, Q.useMemo)(() => ag(a), [a]),
                        [y, p] = (0, Q.useState)(void 0 !== g);
                    ((0, Q.useEffect)(() => {
                        let e = () => {
                            p(!1);
                        };
                        return (
                            document.addEventListener("click", e),
                            () => {
                                document.removeEventListener("click", e);
                            }
                        );
                    }, [g]),
                        (0, Q.useEffect)(() => {
                            g?.id && p(!0);
                        }, [g?.id]));
                    let k = (0, _.G7)("issues_react_bots_timeline_pagination"),
                        {
                            timelineItems: b,
                            totalItemCount: h,
                            highlightedReady: f,
                        } = (({
                            timelineData: e,
                            highlightedEvent: l,
                            page: n,
                        }) => {
                            let [a, s] = (0, Q.useState)({
                                    frontItems: 0,
                                    highlightItems: 0,
                                    highlightStartPosition: 0,
                                    backItems: 0,
                                }),
                                [i, t] = (0, Q.useState)(!1),
                                [r, u] = (0, Q.useState)(null),
                                [o, d] = (0, Q.useState)(null),
                                [c, m] = (0, Q.useState)(!1),
                                [g, y] = (0, Q.useState)(!1),
                                {
                                    data: { frontTimelineItems: p },
                                    loadNext: k,
                                } = (0, N.usePaginationFragment)(oF, e),
                                {
                                    data: { backTimelineItems: F },
                                    loadPrevious: b,
                                } = (0, N.usePaginationFragment)(oh, e),
                                h = p?.totalCount ?? 0,
                                { items: f } = gl(p),
                                { items: K } = gl(F),
                                S = (0, Q.useMemo)(() => ag(l), [l]),
                                I = (0, Q.useMemo)(
                                    () =>
                                        !!S &&
                                        [...f, ...K].some((e) => op(e, S)),
                                    [K, f, S]
                                ),
                                v = !!p;
                            (0, Q.useEffect)(() => {
                                if (!v)
                                    throw Error(
                                        `Missing front timeline items for issue ${e.id}.  After refetching, the frontTimelineItems should be defined.`
                                    );
                            }, [v, e.id]);
                            let L = !!F;
                            ((0, Q.useEffect)(() => {
                                if (!L)
                                    throw Error(
                                        `Missing back timeline items for issue ${e.id}.  After refetching, the backTimelineItems should be defined.`
                                    );
                            }, [L, e.id]),
                                (0, Q.useEffect)(() => {
                                    0 !== K.length || n || m(!0);
                                }, [K.length, n]),
                                (0, Q.useEffect)(() => {
                                    if (c) {
                                        let e = Math.min(15, h - f.length);
                                        e > 0 &&
                                            (y(!0),
                                            b(e, {
                                                onComplete: () => {
                                                    (m(!1), y(!1));
                                                },
                                            }));
                                    }
                                }, [f.length, b, c, h]));
                            let {
                                data: T,
                                loadPrevious: C,
                                totalBeforeFocus: x,
                                loadNext: R,
                            } = ((e, l, n = !1) => {
                                let a = l ? `${l.prefix}-${l.id}` : "",
                                    { node: s } = (0, N.useLazyLoadQuery)(
                                        om,
                                        {
                                            id: e,
                                            focusText: a,
                                            first: 1,
                                            focusNeighborCount: 3,
                                        },
                                        {
                                            fetchPolicy: n
                                                ? "network-only"
                                                : "store-only",
                                        }
                                    ),
                                    {
                                        data: i,
                                        hasNext: t,
                                        hasPrevious: r,
                                        loadNext: u,
                                        loadPrevious: o,
                                    } = (0, N.usePaginationFragment)(oy, s),
                                    d = i?.timelineItems?.beforeFocusCount || 0,
                                    c = i?.timelineItems?.afterFocusCount || 0;
                                return {
                                    data: i?.timelineItems,
                                    hasPrevious: r,
                                    totalBeforeFocus: d,
                                    loadPrevious: o,
                                    hasNext: t,
                                    totalAfterFocus: c,
                                    loadNext: u,
                                };
                            })(e.id, S, !i && S && !I);
                            (0, Q.useEffect)(() => {
                                d(x);
                            }, [x]);
                            let j = (0, Q.useMemo)(() => {
                                if (T) {
                                    let { items: e } = gl(T);
                                    return e;
                                }
                                return [];
                            }, [T]);
                            (0, Q.useEffect)(() => {
                                T && l && (t(!(r && l !== r)), u(l));
                            }, [S, T, l, r]);
                            let _ = j.length > 0,
                                w = Math.max(
                                    _
                                        ? a.highlightStartPosition -
                                              a.frontItems
                                        : h - f.length - K.length,
                                    0
                                ),
                                E = Math.max(
                                    _
                                        ? h -
                                              (a.highlightStartPosition +
                                                  a.highlightItems) -
                                              a.backItems
                                        : h - f.length - K.length,
                                    0
                                ),
                                A = (0, Q.useMemo)(() => {
                                    let e, l;
                                    return _
                                        ? ((e = j),
                                          (l = [...f, ...K]),
                                          e.filter(
                                              (e) =>
                                                  !l.some(
                                                      (l) => l.__id === e.__id
                                                  )
                                          ))
                                        : [];
                                }, [f, K, j, _]),
                                P = (0, Q.useMemo)(() => {
                                    if (0 === f.length && 0 !== h) return null;
                                    if (f.length + A.length + K.length >= h)
                                        return oL(
                                            [...f, ...A, ...K].reduce(
                                                ({ keys: e, values: l }, n) => (
                                                    e.has(n.__id) ||
                                                        (e.add(n.__id),
                                                        l.push(n)),
                                                    { keys: e, values: l }
                                                ),
                                                { keys: new Set(), values: [] }
                                            ).values
                                        ).map((e) => ({ type: "event", ...e }));
                                    let e = oL(f).map((e) => ({
                                            type: "event",
                                            ...e,
                                        })),
                                        l =
                                            0 === w || n
                                                ? []
                                                : [
                                                      {
                                                          type: "load",
                                                          position: "top",
                                                          loadFromTop: k,
                                                          loadFromBottom: (
                                                              e,
                                                              l
                                                          ) => {
                                                              _
                                                                  ? C(e, l)
                                                                  : b(e, l);
                                                          },
                                                          numberOfRemainingItems:
                                                              w,
                                                          isCurrentlyLoading:
                                                              g &&
                                                              0 === A.length,
                                                      },
                                                  ],
                                        a = _
                                            ? oL(A).map((e) => ({
                                                  type: "event",
                                                  ...e,
                                              }))
                                            : [];
                                    return [
                                        ...e,
                                        ...l,
                                        ...a,
                                        ...(!_ || 0 === E || n
                                            ? []
                                            : [
                                                  {
                                                      type: "load",
                                                      position: "bottom",
                                                      loadFromTop: R,
                                                      loadFromBottom: b,
                                                      numberOfRemainingItems: E,
                                                      isCurrentlyLoading:
                                                          g && A.length > 0,
                                                  },
                                              ]),
                                        ...oL(K).map((e) => ({
                                            type: "event",
                                            ...e,
                                        })),
                                    ];
                                }, [f, h, A, K, w, n, k, g, _, E, R, b, C]);
                            (0, Q.useEffect)(() => {
                                (a.frontItems !== f.length ||
                                    a.backItems !== K.length ||
                                    a.highlightItems !== A.length ||
                                    o !== x) &&
                                    s((e) => ({
                                        frontItems: f.length,
                                        backItems: K.length,
                                        highlightItems: A.length,
                                        highlightStartPosition:
                                            x > 0
                                                ? x
                                                : e.highlightStartPosition,
                                    }));
                            }, [
                                f,
                                K,
                                A,
                                x,
                                a.frontItems,
                                a.backItems,
                                a.highlightItems,
                                o,
                            ]);
                            let B = (function (e, l, n, a) {
                                return (
                                    (0 !== n.highlightItems || !!a) &&
                                    (!(
                                        n.highlightStartPosition +
                                            n.highlightItems >
                                        e - 15
                                    ) ||
                                        !(e > 15) ||
                                        0 !== l)
                                );
                            })(h, K.length, a, I);
                            return {
                                timelineItems: P,
                                totalItemCount: h,
                                highlightedReady: B,
                            };
                        })({
                            timelineData: c,
                            highlightedEvent: a,
                            page: k ? s : void 0,
                        }),
                        K = k && ((o = h), (d = s) ? o > 15 + 150 * d : o > 30),
                        S = (0, Q.useRef)(null);
                    if (
                        (((e, l, n, a) => {
                            let [s, i] = (0, Q.useState)(void 0),
                                [t, r] = (0, Q.useState)(!1),
                                [u, o] = (0, Q.useState)(0),
                                d =
                                    document.getElementById(
                                        "notification-shelf"
                                    ),
                                c = (0, Q.useCallback)(
                                    async (e) => {
                                        e.current &&
                                            a &&
                                            (await ot(),
                                            e.current?.scrollIntoView({
                                                behavior: "instant",
                                                block: "start",
                                                inline: "start",
                                            }),
                                            window.scrollBy({
                                                top: -(
                                                    i8.t.stickyHeaderHeight + u
                                                ),
                                                behavior: "instant",
                                            }),
                                            i(n),
                                            r(!0));
                                    },
                                    [n, a, u]
                                );
                            ((0, Q.useEffect)(() => {
                                t && e && s !== n && r(!1);
                            }, [t, n, e, s]),
                                (0, Q.useEffect)(() => {
                                    d &&
                                        !u &&
                                        (r(!1),
                                        o(
                                            d?.getBoundingClientRect().height ||
                                                0
                                        ));
                                }, [d, t, u]),
                                (0, Q.useEffect)(() => {
                                    e && l?.current && !t && c(l);
                                }, [t, l, e, c]));
                        })(
                            (0, Q.useMemo)(
                                () =>
                                    !!b &&
                                    !!y &&
                                    !!g &&
                                    b.some(
                                        (e) =>
                                            "event" === e.type &&
                                            !!e.item &&
                                            op(e.item, g)
                                    ),
                                [g, b, y]
                            ),
                            S,
                            a,
                            f
                        ),
                        !b)
                    )
                        throw Error(
                            `Missing timeline items for issue ${e.id}.  Total item count: ${h}.  Highlighted event: ${a}`
                        );
                    let I = (0, Q.useMemo)(() => {
                        let e = on.timeline.virtualPageSize,
                            l = [];
                        if (0 === b.length) return [];
                        let n = (e) =>
                                e && "event" === e.type
                                    ? e.rollupGroup
                                        ? Object.values(e.rollupGroup).reduce(
                                              (e, l) => e + l.length,
                                              0
                                          )
                                        : 1
                                    : 0,
                            a = [],
                            s = 0;
                        for (let i of b) {
                            let t = n(i);
                            s + t > e && a.length > 0
                                ? (l.push(a), (a = [i]), (s = t))
                                : (a.push(i), (s += t));
                        }
                        return (a.length > 0 && l.push(a), l);
                    }, [b]);
                    return (0, F.jsxs)(F.Fragment, {
                        children: [
                            u.withLiveUpdates &&
                                !!n &&
                                (0, F.jsx)(gc, { issueId: e.id, itemCount: h }),
                            m?.isTransferInProgress && (0, F.jsx)(oc, {}),
                            (0, F.jsx)("h2", {
                                className: "sr-only",
                                children: ay.timeline.header,
                            }),
                            K &&
                                (0, F.jsx)(oo, {
                                    nextPage: s ? s + 1 : 1,
                                    canonicalUrl: ey.fV.pathname,
                                }),
                            (0, F.jsx)(oa.A, {
                                "data-testid": ab.Y.issueTimelineContainer,
                                children: I.map((e) =>
                                    (0, F.jsx)(
                                        gd,
                                        {
                                            timelineItems: e,
                                            shouldHighlightElement: y,
                                            highlight: g,
                                            viewer: n,
                                            issueId: c.id,
                                            repositoryId: c.repository.id,
                                            repositoryNameWithOwner:
                                                c.repository.nameWithOwner,
                                            issueUrl: c.url,
                                            onCommentChange: i,
                                            onCommentReply: t,
                                            onCommentEditCancel: r,
                                            optionConfig: u,
                                            highlightedItemRef: S,
                                        },
                                        `page-${e.length}-${e[0]?.type === "event" ? `event-${e[0]?.item?.__id}` : "load"}`
                                    )
                                ),
                            }),
                        ],
                    });
                };
            try {
                gc.displayName ||
                    (gc.displayName = "IssueTimelineLiveUpdatesLoader");
            } catch {}
            try {
                gm.displayName || (gm.displayName = "IssueTimeline");
            } catch {}
            let gg = b,
                gy = h.A;
            function gp({ itemIdentifier: e, optionConfig: l = u5.C }) {
                let { repo: n, owner: a, number: s } = e,
                    i = new URLSearchParams(ey.fV.search).get("timeline_page"),
                    [t, r] = (0, N.useQueryLoader)(
                        gy,
                        l.preloadedQueries?.issueViewerViewQuery
                    ),
                    u = (0, Q.useRef)(null),
                    o = l.issueQueriesFetchingPolicy?.fetchPolicy;
                return ((0, Q.useEffect)(() => {
                    l.preloadedQueries?.issueViewerViewQuery ||
                        r(
                            {
                                owner: a,
                                repo: n,
                                number: s,
                                allowedOwner: l.allowedProjectOwner ?? null,
                                count: 15,
                                skip: null,
                            },
                            { fetchPolicy: o }
                        );
                }, [
                    r,
                    a,
                    n,
                    l.preloadedQueries?.issueViewerViewQuery,
                    l.allowedProjectOwner,
                    o,
                    s,
                ]),
                t)
                    ? (0, F.jsx)(
                          l5.A,
                          {
                              onRetry: () =>
                                  r(
                                      {
                                          owner: a,
                                          repo: n,
                                          number: s,
                                          allowedOwner:
                                              l.allowedProjectOwner ?? null,
                                      },
                                      { fetchPolicy: "network-only" }
                                  ),
                              fallback: tQ,
                              critical: !0,
                              children: (0, F.jsx)("div", {
                                  className: (0, eb.$)(
                                      uZ.issueViewerContainer,
                                      uZ.mainContainer
                                  ),
                                  ref: u,
                                  children: (0, F.jsx)(Q.Suspense, {
                                      fallback: (0, F.jsx)(u0.Q, {
                                          optionConfig: l,
                                      }),
                                      children: (0, F.jsx)(gb, {
                                          owner: a,
                                          repo: n,
                                          number: s,
                                          issueViewerViewRef: t,
                                          containerRef: u,
                                          optionConfig: l,
                                          timelinePage:
                                              (i && parseInt(i, 10)) || void 0,
                                      }),
                                  }),
                              }),
                          },
                          `${a}-${n}-${s}`
                      )
                    : (0, F.jsx)(u0.Q, { optionConfig: l });
            }
            function gk({
                issueViewerViewRef: e,
                containerRef: l,
                optionConfig: n,
                secondaryIssueData: a,
                secondaryRepoData: s,
                timelinePage: i,
            }) {
                let { repository: t, safeViewer: r } = (0, N.usePreloadedQuery)(
                    gy,
                    e
                );
                return t?.issue
                    ? (0, F.jsx)(gF, {
                          viewerFragment: r || null,
                          issueFragment: t.issue,
                          containerRef: l,
                          optionConfig: n,
                          isRepoOwnerEnterpriseManaged:
                              t.isOwnerEnterpriseManaged,
                          secondaryIssueData: a,
                          secondaryRepoData: s,
                          timelinePage: i,
                      })
                    : null;
            }
            function gF({
                viewerFragment: e,
                issueFragment: l,
                optionConfig: n,
                containerRef: a,
                isRepoOwnerEnterpriseManaged: s,
                secondaryIssueData: i,
                secondaryRepoData: t,
                timelinePage: r,
            }) {
                let u = (0, eq.useFragment)(f, l),
                    o = (0, eq.useFragment)(K, e) || null,
                    d = lH(u),
                    c = lO(u),
                    m = o && !!o.enterpriseManagedEnterpriseId && !s,
                    g = o && !m,
                    y = (0, Q.useRef)(null),
                    {
                        startCommentEdit: p,
                        cancelCommentEdit: k,
                        isCommentEditActive: b,
                    } = (0, S.N)(),
                    h = `issue-${u.id}-body`,
                    { setInputElementState: I, clearInputElementStates: v } =
                        (0, ah.B)(),
                    { anyItemPickerOpen: L } = (0, l2.t)(),
                    T = (0, ap.w)(a.current);
                ((0, Q.useEffect)(() => {
                    v();
                }, [u.id, v]),
                    (0, Q.useEffect)(() => {
                        I(aF.itemPicker, L());
                    }, [L, I]));
                let C = n.onIssueEditStateChange;
                (0, Q.useEffect)(() => {
                    C?.(b());
                }, [b, C]);
                let x = (0, Q.useCallback)((e) => {
                        (y.current?.setText(e),
                            setTimeout(() => y.current?.focus(), 0));
                    }, []),
                    R = (0, Q.useCallback)(
                        (e) => {
                            (p(ew.t.localStorageKeys.issueComment("", u.id, e)),
                                n.onCommentEditStart?.(e));
                        },
                        [u.id, n, p]
                    ),
                    N = (0, Q.useCallback)(
                        (e) => {
                            (k(ew.t.localStorageKeys.issueComment("", u.id, e)),
                                n.onCommentEditCancel?.(e));
                        },
                        [k, u.id, n]
                    ),
                    j = (0, Q.useCallback)(
                        (e) => {
                            if (b())
                                return (
                                    e.preventDefault(),
                                    (e.returnValue = "")
                                );
                        },
                        [b]
                    );
                (0, l6.K)(j);
                let _ = (0, Q.useMemo)(
                        () =>
                            (0, F.jsx)(uG, {
                                sidebarKey: u,
                                sidebarSecondaryKey: i,
                                viewer: o,
                                optionConfig: n,
                            }),
                        [u, n, i, o]
                    ),
                    w = (0, Q.useMemo)(
                        () =>
                            (0, F.jsxs)("div", {
                                className: uZ.issueViewerMetadataPane,
                                "data-testid": ab.Y.issueViewerMetadataPane,
                                children: [
                                    (0, F.jsx)(eF.A, {
                                        as: "h2",
                                        className: uZ.metadataHeader,
                                        children: ay.metadataHeader,
                                    }),
                                    (0, F.jsx)(eF.A, {
                                        as: "h2",
                                        className: `${uZ.largeScreenMetadataHeader} sr-only`,
                                        children: ay.metadataHeader,
                                    }),
                                    _,
                                ],
                            }),
                        [_]
                    ),
                    E = (0, Q.useCallback)(
                        (e) => {
                            (n?.onIssueEditStateChange?.(e), e ? p(h) : k(h));
                        },
                        [k, h, n, p]
                    ),
                    [A, P] = (0, Q.useState)(() => ey.fV.hash),
                    B = (0, Q.useCallback)(() => {
                        P(ey.fV.hash);
                    }, []);
                ((0, Q.useEffect)(
                    () => (
                        window.addEventListener("hashchange", B),
                        () => {
                            window.removeEventListener("hashchange", B);
                        }
                    ),
                    [B]
                ),
                    (0, Q.useCallback)(
                        (e) => {
                            e !== A && (ey.fV.hash = e);
                        },
                        [A]
                    ));
                let {
                    createDialogOpen: D,
                    activeIssueId: M,
                    closeCreateDialog: V,
                } = (0, lP.m1)();
                return (0, F.jsxs)(F.Fragment, {
                    children: [
                        i?.discussion &&
                            (0, F.jsx)(av, {
                                discussionUrl: i?.discussion?.url ?? "",
                            }),
                        (0, F.jsx)(s8, {
                            issue: u,
                            issueSecondary: i,
                            optionConfig: n,
                            containerRef: a,
                        }),
                        (0, F.jsx)(af.H, {
                            sx: n?.innerSx,
                            children: (0, F.jsxs)(eO.az, {
                                sx: {
                                    flexDirection: n.useViewportQueries
                                        ? ["column", "column", "row", "row"]
                                        : T(["column", "column", "row", "row"]),
                                },
                                className: uZ.contentAndSidebarWrapper,
                                children: [
                                    (0, F.jsxs)(eO.az, {
                                        sx: {
                                            width: n.useViewportQueries
                                                ? [
                                                      "100%",
                                                      "100%",
                                                      "auto",
                                                      "auto",
                                                  ]
                                                : T([
                                                      "100%",
                                                      "100%",
                                                      "auto",
                                                      "auto",
                                                  ]),
                                        },
                                        className: uZ.contentArea,
                                        children: [
                                            (0, F.jsx)("div", {
                                                "data-testid":
                                                    ab.Y
                                                        .issueViewerIssueContainer,
                                                children: (0, F.jsx)(l1, {
                                                    issue: u,
                                                    secondaryKey: i,
                                                    onLinkClick: n.onLinkClick,
                                                    onIssueEditStateChange: E,
                                                    onIssueUpdate:
                                                        n.onIssueUpdate,
                                                    onCommentReply: x,
                                                    isIssueEditActive: b,
                                                    highlightedEventText:
                                                        ey.fV.hash,
                                                    insideSidePanel:
                                                        n.insideSidePanel,
                                                }),
                                            }),
                                            d &&
                                                (0, F.jsx)(eO.az, {
                                                    sx: {
                                                        ml: T([
                                                            "0px",
                                                            "0px",
                                                            "56px",
                                                            "56px",
                                                        ]),
                                                    },
                                                    "data-testid":
                                                        ab.Y
                                                            .subIssuesIssueContainer,
                                                    className:
                                                        uZ.subIssuesContainer,
                                                    children: (0, F.jsx)(ad, {
                                                        issueKey: i,
                                                        onSubIssueClick:
                                                            n.onSubIssueClick,
                                                        insideSidePanel:
                                                            n.insideSidePanel,
                                                        readonly: !c,
                                                    }),
                                                }),
                                            (0, F.jsx)("div", {
                                                "data-testid":
                                                    ab.Y
                                                        .issueViewerCommentsContainer,
                                                className: ak.commentsContainer,
                                                children: (0, F.jsxs)("div", {
                                                    className:
                                                        uZ.commentsContainer,
                                                    children: [
                                                        (0, F.jsx)(l4.t, {
                                                            fallback: (0,
                                                            F.jsx)(uX, {}),
                                                            critical: !0,
                                                            children: (0,
                                                            F.jsxs)(
                                                                Q.Suspense,
                                                                {
                                                                    fallback:
                                                                        (0,
                                                                        F.jsx)(
                                                                            uJ.p,
                                                                            {
                                                                                delayedShow:
                                                                                    !0,
                                                                            }
                                                                        ),
                                                                    children: [
                                                                        (0,
                                                                        F.jsx)(
                                                                            gm,
                                                                            {
                                                                                issue: u,
                                                                                issueSecondary:
                                                                                    i,
                                                                                viewer:
                                                                                    o?.login ??
                                                                                    null,
                                                                                highlightedEvent:
                                                                                    (function (
                                                                                        e,
                                                                                        l
                                                                                    ) {
                                                                                        if (
                                                                                            e.length >
                                                                                            1
                                                                                        ) {
                                                                                            let n =
                                                                                                e.split(
                                                                                                    "-"
                                                                                                );
                                                                                            if (
                                                                                                2 ===
                                                                                                    n.length &&
                                                                                                n[0] &&
                                                                                                l.includes(
                                                                                                    n[0]
                                                                                                )
                                                                                            )
                                                                                                return e.substring(
                                                                                                    1
                                                                                                );
                                                                                        }
                                                                                    })(
                                                                                        ey
                                                                                            .fV
                                                                                            .hash,
                                                                                        am
                                                                                    ),
                                                                                onCommentReply:
                                                                                    x,
                                                                                onCommentChange:
                                                                                    R,
                                                                                onCommentEditCancel:
                                                                                    N,
                                                                                optionConfig:
                                                                                    n,
                                                                                page: r,
                                                                            }
                                                                        ),
                                                                        g &&
                                                                            (0,
                                                                            F.jsx)(
                                                                                ej,
                                                                                {
                                                                                    ref: y,
                                                                                    issue: u,
                                                                                    issueSecondary:
                                                                                        i,
                                                                                    repoSecondary:
                                                                                        t,
                                                                                    viewer: o,
                                                                                    onChange:
                                                                                        () => {
                                                                                            (p(
                                                                                                ew.t.localStorageKeys.issueNewComment(
                                                                                                    "viewer",
                                                                                                    u.id
                                                                                                )
                                                                                            ),
                                                                                                n.onCommentEditStart?.(
                                                                                                    aF.newComment
                                                                                                ));
                                                                                        },
                                                                                    onSave: () => {
                                                                                        (k(
                                                                                            ew.t.localStorageKeys.issueNewComment(
                                                                                                "viewer",
                                                                                                u.id
                                                                                            )
                                                                                        ),
                                                                                            n.onCommentEditCancel?.(
                                                                                                aF.newComment
                                                                                            ));
                                                                                    },
                                                                                    onCancel:
                                                                                        () => {
                                                                                            (k(
                                                                                                ew.t.localStorageKeys.issueNewComment(
                                                                                                    "viewer",
                                                                                                    u.id
                                                                                                )
                                                                                            ),
                                                                                                n.onCommentEditCancel?.(
                                                                                                    aF.newComment
                                                                                                ));
                                                                                        },
                                                                                    onNewIssueComment:
                                                                                        n.onNewIssueComment,
                                                                                    singleKeyShortcutEnabled:
                                                                                        n.singleKeyShortcutsEnabled ||
                                                                                        !1,
                                                                                    insideSidePanel:
                                                                                        n.insideSidePanel,
                                                                                }
                                                                            ),
                                                                        !o &&
                                                                            (0,
                                                                            F.jsx)(
                                                                                u9,
                                                                                {}
                                                                            ),
                                                                    ],
                                                                }
                                                            ),
                                                        }),
                                                        m && (0, F.jsx)(aT, {}),
                                                    ],
                                                }),
                                            }),
                                        ],
                                    }),
                                    (0, F.jsx)(eO.az, {
                                        sx: {
                                            width: n.useViewportQueries
                                                ? [
                                                      "auto",
                                                      "auto",
                                                      "256px",
                                                      "296px",
                                                  ]
                                                : T([
                                                      "auto",
                                                      "auto",
                                                      "256px",
                                                      "296px",
                                                  ]),
                                        },
                                        "data-testid":
                                            ab.Y.issueViewerMetadataContainer,
                                        className: uZ.metadataSidebar,
                                        children: w,
                                    }),
                                ],
                            }),
                        }),
                        i &&
                            D &&
                            M === u.id &&
                            (0, F.jsx)(ne, {
                                open: D,
                                setOpen: V,
                                issue: i,
                                onCreateSuccess: ({ createMore: e }) => {
                                    e || V();
                                },
                            }),
                    ],
                });
            }
            function gb({ owner: e, repo: l, number: n, ...a }) {
                let [s, i] = (function ({
                    owner: e,
                    repo: l,
                    number: n,
                    markAsRead: a = !0,
                }) {
                    let s = (0, N.useRelayEnvironment)(),
                        [i, t] = (0, Q.useState)(null);
                    (0, Q.useEffect)(() => {
                        ey.X3 ||
                            (0, t9.SD)({
                                environment: s,
                                query: u6,
                                variables: {
                                    owner: e,
                                    repo: l,
                                    number: n,
                                    markAsRead: a,
                                },
                            }).subscribe({
                                next: (e) => {
                                    t(e.repository ?? null);
                                },
                            });
                    }, [s, a, n, e, l]);
                    let r = (0, N.useFragment)(u2, i),
                        u = r?.issue,
                        o = (0, N.useFragment)(gg, u),
                        d = o && o.id;
                    return (
                        (0, Q.useEffect)(() => {
                            a &&
                                d &&
                                (0, eh.commitLocalUpdate)(s, (e) => {
                                    let l = e.get(d);
                                    l && l.setValue(!0, "isReadByViewer");
                                });
                        }, [s, a, d]),
                        [o, (0, N.useFragment)(u4, r)]
                    );
                })({ owner: e, repo: l, number: n });
                return (0, F.jsx)(gk, {
                    secondaryIssueData: s ?? void 0,
                    secondaryRepoData: i ?? void 0,
                    ...a,
                });
            }
            try {
                gp.displayName || (gp.displayName = "IssueViewer");
            } catch {}
            try {
                gk.displayName || (gk.displayName = "IssueViewerInternal");
            } catch {}
            try {
                gF.displayName ||
                    (gF.displayName = "IssueViewerInternalFragment");
            } catch {}
            try {
                gb.displayName ||
                    (gb.displayName = "IsssueViewerWithSecondary");
            } catch {}
        },
        66827: (e, l, n) => {
            n.d(l, { Q: () => h });
            var a = n(74848),
                s = n(41057),
                i = n(51802),
                t = n(72683);
            let r = {
                    IssueBodyLoadingContainer:
                        "IssueBodyLoading-module__IssueBodyLoadingContainer--beSXm",
                },
                u = () =>
                    (0, a.jsx)("div", {
                        "data-testid": i.Y.bodyLoading,
                        className: r.IssueBodyLoadingContainer,
                        children: [...Array(t.t.bodyLoadingSkeletonCount)].map(
                            (e, l) =>
                                (0, a.jsx)(
                                    s.Q,
                                    { height: "sm", width: "random" },
                                    l
                                )
                        ),
                    });
            try {
                u.displayName || (u.displayName = "IssueBodyLoading");
            } catch {}
            var o = n(4578),
                d = n(21998),
                c = n(96540),
                m = n(83855);
            let g = {
                    titleLoadingSkeleton:
                        "HeaderLoading-module__titleLoadingSkeleton--xejEX",
                    metadataLoadingSkeleton:
                        "HeaderLoading-module__metadataLoadingSkeleton--KVtbP",
                },
                y = () =>
                    (0, a.jsxs)(a.Fragment, {
                        children: [
                            (0, a.jsx)("div", {
                                className: g.titleLoadingSkeleton,
                                children: (0, a.jsx)(s.Q, {
                                    height: "xl",
                                    width: "400px",
                                }),
                            }),
                            (0, a.jsxs)("div", {
                                className: g.metadataLoadingSkeleton,
                                children: [
                                    (0, a.jsx)(s.Q, {
                                        borderRadius: "pill",
                                        height: "xl",
                                        width: "80px",
                                    }),
                                    (0, a.jsx)(s.Q, {
                                        height: "lg",
                                        width: "200px",
                                    }),
                                ],
                            }),
                        ],
                    });
            try {
                y.displayName || (y.displayName = "HeaderLoading");
            } catch {}
            var p = n(2593);
            let k = {
                    loadingContainer:
                        "IssueViewerLoading-module__loadingContainer--q3yBO",
                    headerLoadingWrapper:
                        "IssueViewerLoading-module__headerLoadingWrapper--RE8Ix",
                    contentAndSidebarWrapper:
                        "IssueViewerLoading-module__contentAndSidebarWrapper--kYEWH",
                    contentLoadingArea:
                        "IssueViewerLoading-module__contentLoadingArea--g7mjT",
                    timelineLoadingWrapper:
                        "IssueViewerLoading-module__timelineLoadingWrapper--qgGYZ",
                    sidebarLoadingArea:
                        "IssueViewerLoading-module__sidebarLoadingArea--YUTdW",
                },
                F = {
                    sidebarSectionsLoadingContainer:
                        "SidebarSectionsLoading-module__sidebarSectionsLoadingContainer--mQz1f",
                },
                b = () =>
                    (0, a.jsxs)("div", {
                        className: F.sidebarSectionsLoadingContainer,
                        children: [
                            (0, a.jsx)(s.Q, { height: "md", width: "60%" }),
                            (0, a.jsx)(s.Q, { height: "md", width: "80%" }),
                            (0, a.jsx)(s.Q, { height: "md", width: "40%" }),
                            (0, a.jsx)(s.Q, { height: "md", width: "60%" }),
                            (0, a.jsx)(s.Q, { height: "md", width: "70%" }),
                            (0, a.jsx)(s.Q, { height: "md", width: "50%" }),
                        ],
                    });
            try {
                b.displayName || (b.displayName = "SidebarSectionsLoading");
            } catch {}
            let h = ({ optionConfig: e }) => {
                let l = (0, c.useRef)(null),
                    n = (0, o.w)(l.current);
                return (0, a.jsx)(m.H, {
                    children: (0, a.jsxs)("div", {
                        ref: l,
                        "data-testid": "issue-viewer-loading",
                        className: k.loadingContainer,
                        children: [
                            (0, a.jsx)("div", {
                                className: k.headerLoadingWrapper,
                                children: (0, a.jsx)(y, {}),
                            }),
                            (0, a.jsxs)(d.az, {
                                sx: {
                                    flexDirection: e.useViewportQueries
                                        ? ["column", "column", "row", "row"]
                                        : n(["column", "column", "row", "row"]),
                                },
                                className: k.contentAndSidebarWrapper,
                                children: [
                                    (0, a.jsxs)(d.az, {
                                        sx: {
                                            width: e.useViewportQueries
                                                ? [
                                                      "100%",
                                                      "100%",
                                                      "auto",
                                                      "auto",
                                                  ]
                                                : n([
                                                      "100%",
                                                      "100%",
                                                      "auto",
                                                      "auto",
                                                  ]),
                                        },
                                        className: k.contentLoadingArea,
                                        children: [
                                            (0, a.jsx)("div", {
                                                children: (0, a.jsx)(u, {}),
                                            }),
                                            (0, a.jsx)("div", {
                                                children: (0, a.jsx)("div", {
                                                    className:
                                                        k.timelineLoadingWrapper,
                                                    children: (0, a.jsx)(
                                                        p.p,
                                                        {}
                                                    ),
                                                }),
                                            }),
                                        ],
                                    }),
                                    (0, a.jsx)(d.az, {
                                        sx: {
                                            width: e.useViewportQueries
                                                ? [
                                                      "auto",
                                                      "auto",
                                                      "256px",
                                                      "296px",
                                                  ]
                                                : n([
                                                      "auto",
                                                      "auto",
                                                      "256px",
                                                      "296px",
                                                  ]),
                                        },
                                        className: k.sidebarLoadingArea,
                                        children: (0, a.jsx)(b, {}),
                                    }),
                                ],
                            }),
                        ],
                    }),
                });
            };
            try {
                h.displayName || (h.displayName = "IssueViewerLoading");
            } catch {}
        },
        57611: (e, l, n) => {
            n.d(l, { B: () => u, T: () => r });
            var a = n(74848),
                s = n(96540);
            let i = (0, s.createContext)(null),
                t = {};
            function r({ children: e }) {
                let l = (0, s.useRef)(t),
                    n = (0, s.useCallback)((e, n) => {
                        let a = l.current;
                        return (
                            a[e] === n || (l.current = { ...a, [e]: n }),
                            l.current
                        );
                    }, []),
                    r = (0, s.useMemo)(
                        () => Object.values(l.current).some((e) => e),
                        [l]
                    ),
                    u = (0, s.useCallback)(() => {
                        l.current = t;
                    }, []),
                    o = (0, s.useMemo)(
                        () => ({
                            setInputElementState: n,
                            isAnyInputElementActive: r,
                            clearInputElementStates: u,
                        }),
                        [r, n, u]
                    );
                return (0, a.jsx)(i.Provider, { value: o, children: e });
            }
            let u = () => {
                let e = (0, s.useContext)(i);
                if (!e)
                    throw Error(
                        "useInputElementActiveContext must be used within a InputElementActiveContextProvider."
                    );
                return e;
            };
            try {
                i.displayName || (i.displayName = "InputElementActiveContext");
            } catch {}
            try {
                r.displayName ||
                    (r.displayName = "InputElementActiveContextProvider");
            } catch {}
        },
        76158: (e, l, n) => {
            n.d(l, { e: () => c });
            var a = n(74848),
                s = n(34267),
                i = n(87118),
                t = n(57611),
                r = n(36724),
                u = n(96540);
            let o = (0, u.createContext)(null),
                d = ({ children: e }) => {
                    let [l, n] = (0, u.useState)(""),
                        s = (0, u.useMemo)(
                            () => ({
                                issueCommentHighlightId: l,
                                setIssueCommentHighlightId: n,
                            }),
                            [l]
                        );
                    return (0, a.jsx)(r.b, {
                        children: (0, a.jsx)(o.Provider, {
                            value: s,
                            children: e,
                        }),
                    });
                };
            try {
                o.displayName || (o.displayName = "IssueViewerCommentsContext");
            } catch {}
            try {
                d.displayName ||
                    (d.displayName = "IssueViewerCommentsContextProvider");
            } catch {}
            function c({ children: e }) {
                return (0, a.jsx)(d, {
                    children: (0, a.jsx)(s.D, {
                        children: (0, a.jsx)(t.T, {
                            children: (0, a.jsx)(i.Q3, { children: e }),
                        }),
                    }),
                });
            }
            try {
                c.displayName || (c.displayName = "IssueViewerContextProvider");
            } catch {}
        },
        86645: (e, l, n) => {
            n.d(l, { R: () => r, V: () => u });
            var a = n(74848),
                s = n(73189),
                i = n(96540);
            let t = (0, i.createContext)(null);
            function r({ children: e }) {
                let [l, n] = (0, i.useState)(!1),
                    s = (0, i.useMemo)(
                        () => ({ disableFocusTrap: l, setDisableFocusTrap: n }),
                        [l, n]
                    );
                return (0, a.jsx)(t.Provider, { value: s, children: e });
            }
            let u = () => {
                let e = (0, i.useContext)(t);
                return e || { disableFocusTrap: !1, setDisableFocusTrap: s.l };
            };
            try {
                t.displayName || (t.displayName = "FocusTrapManagementContext");
            } catch {}
            try {
                r.displayName ||
                    (r.displayName = "FocusTrapManagementContextProvider");
            } catch {}
        },
        62568: (e, l, n) => {
            n.d(l, { D: () => w });
            var a = n(74848),
                s = n(34267),
                i = n(38621),
                t = n(87330),
                r = n(96540),
                u = n(18312);
            let o = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "ids",
                        },
                    ],
                    l = [
                        { kind: "Variable", name: "ids", variableName: "ids" },
                    ],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "title",
                        storageKey: null,
                    },
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "state",
                        storageKey: null,
                    },
                    i = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "stateReason",
                        storageKey: null,
                    },
                    t = {
                        alias: null,
                        args: null,
                        concreteType: "Repository",
                        kind: "LinkedField",
                        name: "repository",
                        plural: !1,
                        selections: [
                            n,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "nameWithOwner",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                    r = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "databaseId",
                        storageKey: null,
                    },
                    u = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "number",
                        storageKey: null,
                    },
                    o = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "url",
                        storageKey: null,
                    },
                    d = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "IssuePickerSelectedIssuesQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [n, a, s, i, t, r, u, o, d],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "IssuePickerSelectedIssuesQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "nodes",
                                plural: !0,
                                selections: [
                                    d,
                                    n,
                                    {
                                        kind: "InlineFragment",
                                        selections: [a, s, i, t, r, u, o],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "ab7e8eddc2f0411413899568c6f97ae4",
                        metadata: {},
                        name: "IssuePickerSelectedIssuesQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            ((o.hash = "c4d195f7754769a3937a686385b27e39"),
                ((function () {
                    var e = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                    return {
                        argumentDefinitions: [],
                        kind: "Fragment",
                        metadata: null,
                        name: "IssuePickerIssue",
                        selections: [
                            e,
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "title",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "state",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "stateReason",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "Repository",
                                kind: "LinkedField",
                                name: "repository",
                                plural: !1,
                                selections: [
                                    e,
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "nameWithOwner",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "databaseId",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "number",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "url",
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "__typename",
                                storageKey: null,
                            },
                        ],
                        type: "Issue",
                        abstractKey: null,
                    };
                })().hash = "196c5dfa10bac249c09a7e5a825a3eb9"));
            var d = n(19918),
                c = n(86391),
                m = n(81709),
                g = n(30721),
                y = n(30729),
                p = n(43491);
            let k = (function () {
                var e = {
                        kind: "Variable",
                        name: "first",
                        variableName: "first",
                    },
                    l = { kind: "Literal", name: "type", value: "ISSUE" },
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    },
                    a = [
                        {
                            kind: "InlineFragment",
                            selections: [
                                n,
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "title",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "state",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "stateReason",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: "Repository",
                                    kind: "LinkedField",
                                    name: "repository",
                                    plural: !1,
                                    selections: [
                                        n,
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "nameWithOwner",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "databaseId",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "number",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "url",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "__typename",
                                    storageKey: null,
                                },
                            ],
                            type: "Issue",
                            abstractKey: null,
                        },
                    ],
                    s = [
                        {
                            alias: null,
                            args: null,
                            concreteType: null,
                            kind: "LinkedField",
                            name: "nodes",
                            plural: !0,
                            selections: a,
                            storageKey: null,
                        },
                    ];
                return {
                    argumentDefinitions: [
                        { kind: "RootArgument", name: "assignee" },
                        { kind: "RootArgument", name: "author" },
                        { kind: "RootArgument", name: "commenters" },
                        { kind: "RootArgument", name: "first" },
                        { kind: "RootArgument", name: "mentions" },
                        { kind: "RootArgument", name: "other" },
                        { kind: "RootArgument", name: "queryIsUrl" },
                        { kind: "RootArgument", name: "resource" },
                    ],
                    kind: "Fragment",
                    metadata: null,
                    name: "useIssueFilteringFragment",
                    selections: [
                        {
                            alias: "commenters",
                            args: [
                                e,
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "commenters",
                                },
                                l,
                            ],
                            concreteType: "SearchResultItemConnection",
                            kind: "LinkedField",
                            name: "search",
                            plural: !1,
                            selections: s,
                            storageKey: null,
                        },
                        {
                            alias: "mentions",
                            args: [
                                e,
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "mentions",
                                },
                                l,
                            ],
                            concreteType: "SearchResultItemConnection",
                            kind: "LinkedField",
                            name: "search",
                            plural: !1,
                            selections: s,
                            storageKey: null,
                        },
                        {
                            alias: "assignee",
                            args: [
                                e,
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "assignee",
                                },
                                l,
                            ],
                            concreteType: "SearchResultItemConnection",
                            kind: "LinkedField",
                            name: "search",
                            plural: !1,
                            selections: s,
                            storageKey: null,
                        },
                        {
                            alias: "author",
                            args: [
                                e,
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "author",
                                },
                                l,
                            ],
                            concreteType: "SearchResultItemConnection",
                            kind: "LinkedField",
                            name: "search",
                            plural: !1,
                            selections: s,
                            storageKey: null,
                        },
                        {
                            alias: "other",
                            args: [
                                e,
                                {
                                    kind: "Variable",
                                    name: "query",
                                    variableName: "other",
                                },
                                l,
                            ],
                            concreteType: "SearchResultItemConnection",
                            kind: "LinkedField",
                            name: "search",
                            plural: !1,
                            selections: s,
                            storageKey: null,
                        },
                        {
                            condition: "queryIsUrl",
                            kind: "Condition",
                            passingValue: !0,
                            selections: [
                                {
                                    alias: null,
                                    args: [
                                        {
                                            kind: "Variable",
                                            name: "url",
                                            variableName: "resource",
                                        },
                                    ],
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "resource",
                                    plural: !1,
                                    selections: a,
                                    storageKey: null,
                                },
                            ],
                        },
                    ],
                    type: "Query",
                    abstractKey: null,
                };
            })();
            k.hash = "c49d3e50365f7955d0d96fe3eaaa3d66";
            var F = n(38143),
                b = n(89850),
                h = n(46747);
            let f = p.A,
                K = {
                    issueNumberText:
                        "IssuePicker-module__issueNumberText--eQZT6",
                },
                S = (e) => e.id,
                I = { groupId: "selected", header: { title: "Selected" } },
                v = {
                    groupId: "suggestions",
                    header: { title: "Suggestions", variant: "filled" },
                },
                L = [I, v],
                T = new Map();
            function C({
                onIssueSelection: e,
                selectedIssueIds: l,
                hiddenIssueIds: n,
                owner: s,
                repositoryNameWithOwner: i,
                pickerId: t,
                isLoading: o = !1,
                ...c
            }) {
                let [y, p] = (0, r.useState)(""),
                    {
                        isLoading: K,
                        isError: S,
                        items: I,
                    } = ((e, l = "", n, a) => {
                        let s = (0, u.useRelayEnvironment)(),
                            [i, t] = (0, r.useState)(!0),
                            [o, d] = (0, r.useState)(!1),
                            [c, m] = (0, r.useState)(null),
                            y = (0, r.useCallback)(
                                (e) => {
                                    (t(!0),
                                        (0, g.SD)({
                                            environment: s,
                                            query: f,
                                            variables: (0, b.A2)(l, e, n),
                                        }).subscribe({
                                            next: (e) => {
                                                (m(e ?? null), t(!1), d(!1));
                                            },
                                            error: () => {
                                                (d(!0), t(!1));
                                            },
                                        }));
                                },
                                [s, l, n]
                            ),
                            p = (0, h.d)((e) => y(e), F.t.pickerDebounceTime);
                        (0, r.useEffect)(() => {
                            p(e);
                        }, [p, e]);
                        let K = (0, u.useFragment)(k, c);
                        return {
                            isLoading: i,
                            isError: o,
                            items: (0, r.useMemo)(() => {
                                if (!K) return new Map();
                                {
                                    if (K.resource?.__typename === "Issue")
                                        return new Map([
                                            [K.resource?.id, K.resource],
                                        ]);
                                    let e = [
                                            ...(K.commenters?.nodes || []),
                                            ...(K.mentions?.nodes || []),
                                            ...(K.assignee?.nodes || []),
                                            ...(K.author?.nodes || []),
                                            ...(K.other?.nodes || []),
                                        ].filter(
                                            (e) => e?.__typename === "Issue"
                                        ),
                                        l = new Map();
                                    for (let n of e)
                                        a?.some((e) => e === n.id) ||
                                            l.set(n.id, n);
                                    return l;
                                }
                            }, [a, K]),
                        };
                    })(y, s, i, n),
                    { createFallbackComponent: v } = (0, m.j)({
                        errorMessage: d.k.cantEditItems("issues"),
                        anchorElement: c.anchorElement,
                        open: !0,
                    });
                return S
                    ? v(() => {})
                    : (0, a.jsx)(x, {
                          items: o ? T : I,
                          isLoading: K || o,
                          ...c,
                          selectedIssueIds: l,
                          hiddenIssueIds: n,
                          filter: y,
                          setFilter: p,
                          onIssueSelection: e,
                          repositoryNameWithOwner: i,
                          pickerId: t,
                      });
            }
            function x({
                items: e,
                onIssueSelection: l,
                anchorElement: n,
                setFilter: s,
                isLoading: t,
                title: m,
                onClose: p,
                triggerOpen: k,
                selectedIssueIds: F,
                filter: b,
                pickerId: h,
                selectionVariant: f = "single",
                subtitle: T,
                className: C,
                notice: x,
                insidePortal: R,
                responsiveOnNarrow: N,
            }) {
                let j = (0, u.useRelayEnvironment)(),
                    [_, w] = (0, r.useState)({}),
                    E = (0, r.useCallback)(
                        (e) =>
                            new Promise((l, n) => {
                                (0, g.SD)({
                                    environment: j,
                                    query: o,
                                    variables: { ids: e },
                                }).subscribe({
                                    next: (e) => {
                                        null !== e && l(e);
                                    },
                                    error: (e) => {
                                        n(e);
                                    },
                                });
                            }),
                        [j]
                    );
                for (let [l, n] of ((0, r.useEffect)(() => {
                    if (!t && F) {
                        let n = [];
                        for (let l of F) {
                            let a = e.get(l);
                            a
                                ? w((e) => ({ ...e, [l]: a }))
                                : _?.[l] || n.push(l);
                        }
                        n.length > 0 && l(n);
                    }
                    async function l(e) {
                        let { nodes: l = [] } = await E(e);
                        for (let e of l)
                            e &&
                                "Issue" === e.__typename &&
                                w((l) => ({ ...l, [e.id]: e }));
                    }
                }, [t, e]),
                Object.entries(_)))
                    e.set(l, n);
                let A = Array.from(e.values()),
                    P = A.findIndex((e) => e.number === Number(b));
                if (P > 0) {
                    let [e] = A.splice(P, 1);
                    e && A.unshift(e);
                }
                let B = (0, r.useCallback)(
                        (e) => {
                            var l, n;
                            let s,
                                t,
                                { icon: r, fill: u } =
                                    ((l = e.state),
                                    (n = e.stateReason),
                                    (s = i.IssueOpenedIcon),
                                    (t = "open.fg"),
                                    "CLOSED" === l &&
                                        ((s =
                                            "COMPLETED" === n
                                                ? i.IssueClosedIcon
                                                : i.SkipIcon),
                                        (t =
                                            "COMPLETED" === n
                                                ? "done.fg"
                                                : "muted.fg")),
                                    { icon: s, fill: t }),
                                o = F?.includes(e.id);
                            return {
                                id: e.id,
                                text: e.title,
                                sx: { wordBreak: "break-word" },
                                source: e,
                                groupId: o ? I.groupId : v.groupId,
                                leadingVisual: () =>
                                    (0, a.jsx)(y.A, {
                                        icon: r,
                                        sx: { path: { fill: u } },
                                    }),
                                trailingVisual: () =>
                                    (0, a.jsx)("span", {
                                        className: K.issueNumberText,
                                        children: `#${e.number}`,
                                    }),
                                description: o
                                    ? e.repository.nameWithOwner
                                    : void 0,
                                descriptionVariant: "block",
                            };
                        },
                        [F]
                    ),
                    D = (0, r.useRef)(null),
                    M = (0, r.useMemo)(
                        () =>
                            F?.length
                                ? L
                                : L.filter((e) => e.groupId !== I.groupId),
                        [F]
                    ),
                    V = (0, r.useMemo)(() => 0 === A.length, [A.length]);
                return (0, a.jsx)(c.O, {
                    loading: t,
                    items: A,
                    initialSelectedItems: F || [],
                    filterItems: s,
                    title: m || d.k.issueHeader,
                    getItemKey: S,
                    convertToItemProps: B,
                    placeholderText: "Search issues",
                    selectionVariant: f,
                    onSelectionChange: l,
                    renderAnchor: n,
                    height: "large",
                    width: "medium",
                    maxVisibleItems: -1,
                    resultListAriaLabel: "issue results",
                    selectPanelRef: D,
                    triggerOpen: k,
                    groups: M,
                    onClose: p,
                    pickerId: h,
                    subtitle: T,
                    className: C,
                    notice: x,
                    suppressNoMatchItem: !0,
                    improvedNoMatchAccessibility: V,
                    noMatchMessage: V
                        ? {
                              title: "No issues found",
                              body: "Try changing your search term or selecting a different repository.",
                              variant: "empty",
                          }
                        : void 0,
                    insidePortal: R,
                    responsiveOnNarrow: N,
                });
            }
            try {
                C.displayName || (C.displayName = "IssuePicker");
            } catch {}
            try {
                x.displayName || (x.displayName = "IssuePickerInternal");
            } catch {}
            let R = {
                BackToRepositorySelectionButton:
                    "RepositoryAndIssuePicker-module__BackToRepositorySelectionButton--bl2wm",
            };
            var N = n(16654);
            let j = "repository-picker",
                _ = "issue-picker";
            function w({
                pickerType: e = null,
                anchorElement: l,
                onPickerTypeChange: n,
                selectedIssueIds: s,
                hiddenIssueIds: i,
                ...t
            }) {
                let [u, o] = (0, r.useState)(e);
                return ((0, r.useEffect)(() => {
                    o(e);
                }, [e]),
                (0, r.useEffect)(() => {
                    e !== u && n?.(u);
                }, [n, u]),
                null === u)
                    ? l({ onClick: () => o("Issue") })
                    : (0, a.jsx)(E, {
                          anchorElement: l,
                          selectedIssueIds: s,
                          hiddenIssueIds: i,
                          ...t,
                          setPickerType: o,
                          pickerType: u,
                      });
            }
            function E({
                anchorElement: e,
                onIssueSelection: l,
                organization: n,
                defaultRepositoryNameWithOwner: o,
                pickerType: d,
                setPickerType: c,
                selectedIssueIds: m,
                hiddenIssueIds: g,
                issuePickerProps: y,
                repositoryPickerProps: p,
            }) {
                let [k, F] = (0, r.useState)(o),
                    [b, h] = (0, r.useState)(void 0),
                    [f, K] = (0, r.useState)(null),
                    { updateOpenState: S } = (0, s.t)(),
                    I = (0, u.useRelayEnvironment)(),
                    v = (0, r.useCallback)(() => {
                        c("Repository");
                    }, [c]),
                    L = (0, r.useCallback)(() => {
                        (c((e) => ("Issue" === e ? "Issue" : null)), S(j, !1));
                    }, [c, S]),
                    T = (0, r.useCallback)(() => {
                        (c((e) => ("Repository" === e ? "Repository" : null)),
                            S(_, !1));
                    }, [c, S]),
                    x = (0, r.useCallback)(
                        (e) => {
                            (e?.nameWithOwner && F(e?.nameWithOwner),
                                (k || e?.nameWithOwner) && c("Issue"));
                        },
                        [c, k]
                    );
                switch (
                    ((0, r.useEffect)(() => {
                        (async () => {
                            K(
                                await (0, N.St)(I, {
                                    first: 5,
                                    hasIssuesEnabled: !0,
                                })
                            );
                        })();
                    }, []),
                    (0, r.useEffect)(() => {
                        !(async function () {
                            let [e, l] = k.split("/");
                            if (e && l) {
                                let n = await (0, N.tZ)(I, e, l);
                                null != n && h(n);
                            }
                        })();
                    }, [k, I]),
                    d)
                ) {
                    case "Repository":
                        if (!f) return null;
                        return (0, a.jsx)(N.f0, {
                            initialRepository: b,
                            preventDefault: !0,
                            onSelect: x,
                            organization: n,
                            topRepositories: f,
                            anchorElement: e,
                            onClose: L,
                            triggerOpen: !0,
                            title: "Select a repository",
                            pickerId: j,
                            ...p,
                        });
                    case "Issue":
                        return (0, a.jsx)(C, {
                            selectedIssueIds: m,
                            hiddenIssueIds: g,
                            onIssueSelection: (e) => {
                                (l(e), c(null));
                            },
                            anchorElement: e,
                            repositoryNameWithOwner: k,
                            onClose: T,
                            title: (0, a.jsxs)("div", {
                                className: R.BackToRepositorySelectionButton,
                                children: [
                                    (0, a.jsx)(t.K, {
                                        icon: i.ArrowLeftIcon,
                                        variant: "invisible",
                                        "data-testid":
                                            "back-to-repo-selection-button",
                                        "aria-label":
                                            "Back to repository selection",
                                        tooltipDirection: "n",
                                        onClick: v,
                                    }),
                                    (0, a.jsx)("span", { children: k }),
                                ],
                            }),
                            triggerOpen: !0,
                            pickerId: _,
                            ...y,
                        });
                }
            }
            try {
                w.displayName || (w.displayName = "RepositoryAndIssuePicker");
            } catch {}
            try {
                E.displayName ||
                    (E.displayName = "RepositoryAndIssuePickerInternal");
            } catch {}
        },
        82082: (e, l, n) => {
            n.d(l, { d: () => v });
            var a = n(74848);
            let s = {
                argumentDefinitions: [
                    { defaultValue: 0, kind: "LocalArgument", name: "first" },
                ],
                kind: "Fragment",
                metadata: null,
                name: "ClosedByPullRequestsReferences",
                selections: [
                    {
                        alias: null,
                        args: [
                            {
                                kind: "Variable",
                                name: "first",
                                variableName: "first",
                            },
                            {
                                kind: "Literal",
                                name: "includeClosedPrs",
                                value: !0,
                            },
                        ],
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "closedByPullRequestsReferences",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                kind: "ScalarField",
                                name: "totalCount",
                                storageKey: null,
                            },
                        ],
                        storageKey: null,
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            s.hash = "d13c832969ca720e1f332e81bbc80289";
            let i = (function () {
                var e = [
                        {
                            defaultValue: null,
                            kind: "LocalArgument",
                            name: "id",
                        },
                    ],
                    l = [{ kind: "Variable", name: "id", variableName: "id" }],
                    n = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "__typename",
                        storageKey: null,
                    },
                    a = [
                        { kind: "Literal", name: "first", value: 10 },
                        {
                            kind: "Literal",
                            name: "includeClosedPrs",
                            value: !0,
                        },
                    ],
                    s = {
                        alias: null,
                        args: null,
                        kind: "ScalarField",
                        name: "id",
                        storageKey: null,
                    };
                return {
                    fragment: {
                        argumentDefinitions: e,
                        kind: "Fragment",
                        metadata: null,
                        name: "ClosedByPullRequestsReferencesQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "ClosedByPullRequestsReferencesList",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        type: "Query",
                        abstractKey: null,
                    },
                    kind: "Request",
                    operation: {
                        argumentDefinitions: e,
                        kind: "Operation",
                        name: "ClosedByPullRequestsReferencesQuery",
                        selections: [
                            {
                                alias: null,
                                args: l,
                                concreteType: null,
                                kind: "LinkedField",
                                name: "node",
                                plural: !1,
                                selections: [
                                    n,
                                    {
                                        kind: "InlineFragment",
                                        selections: [
                                            {
                                                alias: null,
                                                args: a,
                                                concreteType:
                                                    "PullRequestConnection",
                                                kind: "LinkedField",
                                                name: "closedByPullRequestsReferences",
                                                plural: !1,
                                                selections: [
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PullRequestEdge",
                                                        kind: "LinkedField",
                                                        name: "edges",
                                                        plural: !0,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                concreteType:
                                                                    "PullRequest",
                                                                kind: "LinkedField",
                                                                name: "node",
                                                                plural: !1,
                                                                selections: [
                                                                    s,
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "title",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "number",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "merged",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "closed",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "isDraft",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        concreteType:
                                                                            "Repository",
                                                                        kind: "LinkedField",
                                                                        name: "repository",
                                                                        plural: !1,
                                                                        selections:
                                                                            [
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    kind: "ScalarField",
                                                                                    name: "name",
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                {
                                                                                    alias: null,
                                                                                    args: null,
                                                                                    concreteType:
                                                                                        null,
                                                                                    kind: "LinkedField",
                                                                                    name: "owner",
                                                                                    plural: !1,
                                                                                    selections:
                                                                                        [
                                                                                            n,
                                                                                            {
                                                                                                alias: null,
                                                                                                args: null,
                                                                                                kind: "ScalarField",
                                                                                                name: "login",
                                                                                                storageKey:
                                                                                                    null,
                                                                                            },
                                                                                            s,
                                                                                        ],
                                                                                    storageKey:
                                                                                        null,
                                                                                },
                                                                                s,
                                                                            ],
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    {
                                                                        alias: null,
                                                                        args: null,
                                                                        kind: "ScalarField",
                                                                        name: "url",
                                                                        storageKey:
                                                                            null,
                                                                    },
                                                                    n,
                                                                ],
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "cursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                    {
                                                        alias: null,
                                                        args: null,
                                                        concreteType:
                                                            "PageInfo",
                                                        kind: "LinkedField",
                                                        name: "pageInfo",
                                                        plural: !1,
                                                        selections: [
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "endCursor",
                                                                storageKey:
                                                                    null,
                                                            },
                                                            {
                                                                alias: null,
                                                                args: null,
                                                                kind: "ScalarField",
                                                                name: "hasNextPage",
                                                                storageKey:
                                                                    null,
                                                            },
                                                        ],
                                                        storageKey: null,
                                                    },
                                                ],
                                                storageKey:
                                                    "closedByPullRequestsReferences(first:10,includeClosedPrs:true)",
                                            },
                                            {
                                                alias: null,
                                                args: a,
                                                filters: ["includeClosedPrs"],
                                                handle: "connection",
                                                key: "ClosedByPullRequestsReferences__closedByPullRequestsReferences",
                                                kind: "LinkedHandle",
                                                name: "closedByPullRequestsReferences",
                                            },
                                        ],
                                        type: "Issue",
                                        abstractKey: null,
                                    },
                                    s,
                                ],
                                storageKey: null,
                            },
                        ],
                    },
                    params: {
                        id: "74ac1485e4aba9457c658e9890e4c2a0",
                        metadata: {},
                        name: "ClosedByPullRequestsReferencesQuery",
                        operationKind: "query",
                        text: null,
                    },
                };
            })();
            i.hash = "a26154da51344169d8643d06240034ca";
            let t = {
                argumentDefinitions: [
                    { defaultValue: 10, kind: "LocalArgument", name: "first" },
                ],
                kind: "Fragment",
                metadata: {
                    connection: [
                        {
                            count: "first",
                            cursor: null,
                            direction: "forward",
                            path: ["closedByPullRequestsReferences"],
                        },
                    ],
                },
                name: "ClosedByPullRequestsReferencesList",
                selections: [
                    {
                        alias: "closedByPullRequestsReferences",
                        args: [
                            {
                                kind: "Literal",
                                name: "includeClosedPrs",
                                value: !0,
                            },
                        ],
                        concreteType: "PullRequestConnection",
                        kind: "LinkedField",
                        name: "__ClosedByPullRequestsReferences__closedByPullRequestsReferences_connection",
                        plural: !1,
                        selections: [
                            {
                                alias: null,
                                args: null,
                                concreteType: "PullRequestEdge",
                                kind: "LinkedField",
                                name: "edges",
                                plural: !0,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        concreteType: "PullRequest",
                                        kind: "LinkedField",
                                        name: "node",
                                        plural: !1,
                                        selections: [
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "id",
                                                storageKey: null,
                                            },
                                            {
                                                args: null,
                                                kind: "FragmentSpread",
                                                name: "PullRequest",
                                            },
                                            {
                                                alias: null,
                                                args: null,
                                                kind: "ScalarField",
                                                name: "__typename",
                                                storageKey: null,
                                            },
                                        ],
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "cursor",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                            {
                                alias: null,
                                args: null,
                                concreteType: "PageInfo",
                                kind: "LinkedField",
                                name: "pageInfo",
                                plural: !1,
                                selections: [
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "endCursor",
                                        storageKey: null,
                                    },
                                    {
                                        alias: null,
                                        args: null,
                                        kind: "ScalarField",
                                        name: "hasNextPage",
                                        storageKey: null,
                                    },
                                ],
                                storageKey: null,
                            },
                        ],
                        storageKey:
                            "__ClosedByPullRequestsReferences__closedByPullRequestsReferences_connection(includeClosedPrs:true)",
                    },
                ],
                type: "Issue",
                abstractKey: null,
            };
            t.hash = "c00ad6168f42bc8f268666e9ba0d54e6";
            var r = n(38621),
                u = n(55847),
                o = n(5945),
                d = n(3614),
                c = n(52446),
                m = n(12004),
                g = n(96540),
                y = n(18312);
            let p = {
                    pullRequestsDropdown:
                        "ClosedByPullRequestsReferences-module__pullRequestsDropdown--K__wO",
                    pullRequestCountText:
                        "ClosedByPullRequestsReferences-module__pullRequestCountText--FPNxe",
                    loadingSpinnerContainer:
                        "ClosedByPullRequestsReferences-module__loadingSpinnerContainer--YxWNt",
                    linkedPullRequestsBtn:
                        "ClosedByPullRequestsReferences-module__linkedPullRequestsBtn--wgCrX",
                },
                k = {
                    argumentDefinitions: [],
                    kind: "Fragment",
                    metadata: null,
                    name: "PullRequest",
                    selections: [
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "id",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "title",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "number",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "merged",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "closed",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "isDraft",
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            concreteType: "Repository",
                            kind: "LinkedField",
                            name: "repository",
                            plural: !1,
                            selections: [
                                {
                                    alias: null,
                                    args: null,
                                    kind: "ScalarField",
                                    name: "name",
                                    storageKey: null,
                                },
                                {
                                    alias: null,
                                    args: null,
                                    concreteType: null,
                                    kind: "LinkedField",
                                    name: "owner",
                                    plural: !1,
                                    selections: [
                                        {
                                            alias: null,
                                            args: null,
                                            kind: "ScalarField",
                                            name: "login",
                                            storageKey: null,
                                        },
                                    ],
                                    storageKey: null,
                                },
                            ],
                            storageKey: null,
                        },
                        {
                            alias: null,
                            args: null,
                            kind: "ScalarField",
                            name: "url",
                            storageKey: null,
                        },
                    ],
                    type: "PullRequest",
                    abstractKey: null,
                };
            k.hash = "070dcbf85630ee9d2e1fc4bb18f732ba";
            var F = n(25407),
                b = n(30391),
                h = n(81246),
                f = n(30729),
                K = n(34784);
            let S = {
                draftIcon: "PullRequest-module__draftIcon--gAo6q",
                hovercardLink: "PullRequest-module__hovercardLink--gbZff",
                countText: "PullRequest-module__countText--qThNN",
                pullRequestItemContent:
                    "PullRequest-module__pullRequestItemContent--csLjR",
                repositoryInfo: "PullRequest-module__repositoryInfo--VyAWT",
            };
            function I({ pullRequest: e, hovercard: l }) {
                let {
                        id: n,
                        number: s,
                        title: i,
                        repository: { owner: t, name: u },
                        url: o,
                        merged: d,
                        closed: m,
                        isDraft: g,
                    } = (0, K.useFragment)(k, e),
                    { login: y } = t,
                    { theme: p } = (0, b.DP)();
                return l
                    ? (0, a.jsxs)(h.A, {
                          href: o,
                          target: "_blank",
                          "data-hovercard-url": (0, F.i9S)({
                              owner: y,
                              repo: u,
                              pullRequestNumber: s,
                          }),
                          "aria-label": `link to the pull request #${i}`,
                          className: S.hovercardLink,
                          children: [
                              (0, a.jsx)(r.GitPullRequestIcon, { size: 16 }),
                              (0, a.jsx)("span", {
                                  className: S.countText,
                                  children: "1",
                              }),
                          ],
                      })
                    : (0, a.jsxs)(
                          c.l.Item,
                          {
                              children: [
                                  (0, a.jsx)(c.l.LeadingVisual, {
                                      children: d
                                          ? (0, a.jsx)(f.A, {
                                                icon: r.GitMergeIcon,
                                                size: 16,
                                                sx: {
                                                    color: p?.colors.done.fg,
                                                },
                                            })
                                          : m
                                            ? (0, a.jsx)(f.A, {
                                                  icon: r.GitPullRequestClosedIcon,
                                                  size: 16,
                                                  sx: {
                                                      color: p?.colors.closed
                                                          .fg,
                                                  },
                                              })
                                            : g
                                              ? (0, a.jsx)(f.A, {
                                                    icon: r.GitPullRequestDraftIcon,
                                                    size: 16,
                                                    className: S.draftIcon,
                                                })
                                              : (0, a.jsx)(f.A, {
                                                    icon: r.GitPullRequestIcon,
                                                    size: 16,
                                                    sx: {
                                                        color: p?.colors.open
                                                            .fg,
                                                    },
                                                }),
                                  }),
                                  (0, a.jsxs)("a", {
                                      href: o,
                                      "aria-label": `link to the issue #${i}`,
                                      className: S.pullRequestItemContent,
                                      children: [
                                          (0, a.jsx)("span", { children: i }),
                                          (0, a.jsx)("span", {
                                              className: S.repositoryInfo,
                                              children: `${y}#${s}`,
                                          }),
                                      ],
                                  }),
                              ],
                          },
                          n
                      );
            }
            try {
                I.displayName || (I.displayName = "PullRequest");
            } catch {}
            function v({ issueId: e, closedByPullRequestsReferencesKey: l }) {
                let n = (0, y.useFragment)(s, l),
                    i = n?.closedByPullRequestsReferences?.totalCount ?? 0,
                    [t, m] = (0, g.useState)(!1);
                return 0 === i
                    ? null
                    : 1 === i
                      ? (0, a.jsx)(g.Suspense, {
                            fallback: (0, a.jsxs)("div", {
                                children: [
                                    (0, a.jsx)(r.GitPullRequestIcon, {
                                        size: 16,
                                    }),
                                    (0, a.jsx)("span", {
                                        className: p.pullRequestCountText,
                                        children: i.toString(),
                                    }),
                                ],
                            }),
                            children: t
                                ? (0, a.jsx)(L, { issueId: e, totalCount: i })
                                : (0, a.jsx)(u.Q, {
                                      className: p.linkedPullRequestsBtn,
                                      variant: "link",
                                      leadingVisual: r.GitPullRequestIcon,
                                      onMouseEnter: () => {
                                          m(!0);
                                      },
                                      onFocus: () => {
                                          m(!0);
                                      },
                                      "aria-label": "1 linked PR",
                                      children: i.toString(),
                                  }),
                        })
                      : (0, a.jsxs)(o.W, {
                            children: [
                                (0, a.jsx)(o.W.Anchor, {
                                    children: (0, a.jsx)(d.m, {
                                        direction: "w",
                                        text: `${i} linked PRs`,
                                        type: "description",
                                        children: (0, a.jsx)(u.Q, {
                                            variant: "link",
                                            leadingVisual: r.GitPullRequestIcon,
                                            className: p.linkedPullRequestsBtn,
                                            "aria-label": `${i} linked PRs`,
                                            children: i.toString(),
                                        }),
                                    }),
                                }),
                                (0, a.jsx)(o.W.Overlay, {
                                    children: (0, a.jsx)(c.l, {
                                        className: p.pullRequestsDropdown,
                                        children: (0, a.jsx)(g.Suspense, {
                                            fallback: (0, a.jsx)(C, {}),
                                            children: (0, a.jsx)(L, {
                                                issueId: e,
                                                totalCount: i,
                                            }),
                                        }),
                                    }),
                                }),
                            ],
                        });
            }
            function L({ issueId: e, ...l }) {
                let n = (0, y.useLazyLoadQuery)(i, { id: e });
                return n.node
                    ? (0, a.jsx)(T, {
                          closedByPullRequestsReferencesKey: n.node,
                          ...l,
                      })
                    : (0, a.jsx)(a.Fragment, { children: "no data" });
            }
            function T({
                closedByPullRequestsReferencesKey: e,
                totalCount: l,
            }) {
                let n = (0, y.useFragment)(t, e),
                    s = (n.closedByPullRequestsReferences?.edges || []).flatMap(
                        (e) => (e && e.node ? e.node : [])
                    );
                return (0, a.jsxs)(a.Fragment, {
                    children: [
                        1 === l &&
                            (0, a.jsx)(
                                I,
                                { pullRequest: s[0], hovercard: !0 },
                                "pr0"
                            ),
                        l > 1 &&
                            (0, a.jsx)(a.Fragment, {
                                children: s.map((e) =>
                                    (0, a.jsx)(
                                        I,
                                        { pullRequest: e },
                                        `pr${e.id}`
                                    )
                                ),
                            }),
                    ],
                });
            }
            function C() {
                return (0, a.jsx)("div", {
                    "data-testid": "loading-pulls",
                    className: p.loadingSpinnerContainer,
                    children: (0, a.jsx)(m.A, {}),
                });
            }
            try {
                v.displayName ||
                    (v.displayName = "ClosedByPullRequestsReferences");
            } catch {}
            try {
                L.displayName ||
                    (L.displayName = "ClosedByPullRequestsReferencesInternal");
            } catch {}
            try {
                T.displayName ||
                    (T.displayName = "ClosedByPullRequestsReferencesList");
            } catch {}
            try {
                C.displayName || (C.displayName = "CenteredLoadingSpinner");
            } catch {}
        },
        94838: (e, l, n) => {
            n.d(l, { F: () => u });
            var a = n(74848),
                s = n(75202),
                i = n(38621),
                t = n(88657),
                r = n(96540);
            let u = ({ children: e, onError: l }) => {
                let [n, u] = (0, r.useState)(
                    "An error occured while loading items"
                );
                return (0, a.jsx)(s.t, {
                    fallback: (0, a.jsxs)(t.E, {
                        children: [
                            (0, a.jsx)(t.E.Visual, {
                                children: (0, a.jsx)(i.AlertIcon, {}),
                            }),
                            (0, a.jsx)(t.E.Heading, { children: n }),
                            (0, a.jsx)(t.E.Description, {
                                children:
                                    "There was an issue loading Sub issues",
                            }),
                            (0, a.jsx)(t.E.SecondaryAction, {
                                href: "https://www.githubstatus.com/",
                                children: "GitHub status",
                            }),
                        ],
                    }),
                    onError: (e) => {
                        (e instanceof Error && u(e.message), l?.());
                    },
                    children: e,
                });
            };
            try {
                u.displayName ||
                    (u.displayName = "NestedListViewErrorBoundary");
            } catch {}
        },
        58321: (e, l, n) => {
            n.d(l, { o: () => c });
            var a = n(74848),
                s = n(91230),
                i = n(29731),
                t = n(34164),
                r = n(96540),
                u = n(94273);
            let o = {
                container: "ActionBar-module__container--z3OVC",
                withoutActions: "ActionBar-module__withoutActions--RFXnQ",
            };
            var d = n(7151);
            function c({
                anchorIcon: e,
                label: l = "list item action bar",
                className: n,
                ...c
            }) {
                let m = (0, r.useRef)(null),
                    {
                        setAnyItemsWithActionBar: g,
                        setHasResizableActionsWithActionBar: y,
                    } = (0, u.G)();
                return (
                    (0, r.useEffect)(() => g(!0), [g]),
                    (0, r.useEffect)(() => {
                        c.actions && y(!0);
                    }, [c.actions, y]),
                    (0, d.G)(m),
                    (0, a.jsx)("div", {
                        ref: m,
                        "aria-hidden": "true",
                        className: (0, t.$)(
                            o.container,
                            !c.actions && o.withoutActions,
                            n
                        ),
                        ...(0, i.G)(
                            "nested-list-view-item-action-bar-container"
                        ),
                        children: (0, a.jsx)(s.E7, {
                            ...c,
                            label: l,
                            variant: "menu",
                            overflowMenuToggleProps: e ? { icon: e } : void 0,
                        }),
                    })
                );
            }
            try {
                c.displayName || (c.displayName = "NestedListItemActionBar");
            } catch {}
        },
        921: (e, l, n) => {
            n.d(l, { Q: () => r });
            var a = n(74848),
                s = n(29731),
                i = n(34164);
            let t = { container: "LeadingContent-module__container--NJeKw" };
            function r({ children: e, className: l }) {
                return (0, a.jsx)("div", {
                    className: (0, i.$)(t.container, l),
                    ...(0, s.G)("nested-list-view-item-leading-content"),
                    children: e,
                });
            }
            try {
                r.displayName ||
                    (r.displayName = "NestedListItemLeadingContent");
            } catch {}
        },
        85391: (e, l, n) => {
            n.d(l, { D: () => g });
            var a = n(74848),
                s = n(29731),
                i = n(30729),
                t = n(34164),
                r = n(96540),
                u = n(45379),
                o = n(55482);
            let d = {
                    container: "LeadingVisual-module__container--lXqCp",
                    hasNewActivity:
                        "LeadingVisual-module__hasNewActivity--cLEiZ",
                    visualContainer:
                        "LeadingVisual-module__visualContainer--xKxNe",
                },
                c = { container: "UnreadIndicator-module__container--E_dd7" },
                m = () =>
                    (0, a.jsx)("div", {
                        className: c.container,
                        children: (0, a.jsx)("span", {
                            className: "sr-only",
                            ...(0, s.G)("list-view-item-unread-indicator"),
                            children: "New activity.",
                        }),
                    });
            try {
                m.displayName ||
                    (m.displayName = "NestedListItemUnreadIndicator");
            } catch {}
            function g({
                icon: e,
                color: l,
                description: n,
                newActivity: c = !1,
                children: g,
                className: y,
                ...p
            }) {
                let { setStatus: k } = (0, o.i)(),
                    { setHasNewActivity: F } = (0, u.b)(),
                    b = n?.trim(),
                    h = b ? { "aria-label": void 0 } : {};
                return (
                    (0, r.useEffect)(() => {
                        F(c);
                    }, [c, F]),
                    (0, r.useEffect)(() => {
                        b && k(b);
                    }, [k, b]),
                    (0, a.jsxs)("div", {
                        className: (0, t.$)(
                            d.container,
                            c && d.hasNewActivity,
                            y
                        ),
                        ...p,
                        children: [
                            (0, a.jsxs)("div", {
                                className: d.visualContainer,
                                ...(0, s.G)("nested-list-view-leading-visual"),
                                children: [
                                    e &&
                                        (0, a.jsx)(i.A, {
                                            ...h,
                                            icon: e,
                                            color: l,
                                        }),
                                    g,
                                    b &&
                                        (0, a.jsx)("span", {
                                            className: "sr-only",
                                            ...(0, s.G)(
                                                "leading-visual-text-description"
                                            ),
                                            children: b,
                                        }),
                                ],
                            }),
                            c && (0, a.jsx)(m, {}),
                        ],
                    })
                );
            }
            try {
                g.displayName ||
                    (g.displayName = "NestedListItemLeadingVisual");
            } catch {}
        },
        66457: (e, l, n) => {
            n.d(l, { r: () => $ });
            var a = n(74848),
                s = n(87670),
                i = n(18651),
                t = n(73189),
                r = n(83494),
                u = n(20426),
                o = n(34164),
                d = n(96540),
                c = n(94273),
                m = n(62102),
                g = n(28755),
                y = n(94838),
                p = n(58321);
            let k = (0, d.createContext)({
                    actionsOpen: !1,
                    setActionsOpen: t.l,
                }),
                F = ({ children: e }) => {
                    let [l, n] = (0, d.useState)(!1),
                        s = (0, d.useMemo)(
                            () => ({ actionsOpen: l, setActionsOpen: n }),
                            [l]
                        );
                    return (0, a.jsx)(k.Provider, { value: s, children: e });
                };
            try {
                k.displayName ||
                    (k.displayName = "NestedListItemActionsContext");
            } catch {}
            try {
                F.displayName ||
                    (F.displayName = "NestedListItemActionsProvider");
            } catch {}
            var b = n(74142),
                h = n(16474);
            let f = (0, d.createContext)(void 0),
                K = ({ children: e }) => {
                    let [l, n] = (0, d.useState)(""),
                        s = (0, d.useMemo)(
                            () => ({ description: l, setDescription: n }),
                            [l]
                        );
                    return (0, a.jsx)(f.Provider, { value: s, children: e });
                };
            try {
                f.displayName ||
                    (f.displayName = "NestedListItemDescriptionContext");
            } catch {}
            try {
                K.displayName ||
                    (K.displayName = "NestedListItemDescriptionProvider");
            } catch {}
            var S = n(82961),
                I = n(45379),
                v = n(4559),
                L = n(34082);
            let T = (0, d.createContext)({ isSelected: !1, onSelect: t.l }),
                C = ({
                    children: e,
                    value: { isSelected: l, onSelect: n },
                }) => {
                    let { title: s } = (0, L.$)(),
                        i = (0, d.useMemo)(
                            () => ({
                                isSelected: l,
                                onSelect: (e) => {
                                    ((0, v.i)(
                                        e
                                            ? `Selected. ${s}.`
                                            : `Unselected. ${s}.`
                                    ),
                                        n(e));
                                },
                            }),
                            [l, n, s]
                        );
                    return (0, a.jsx)(T.Provider, { value: i, children: e });
                },
                x = () => (0, d.useContext)(T);
            try {
                T.displayName ||
                    (T.displayName = "NestedListItemSelectionContext");
            } catch {}
            try {
                C.displayName ||
                    (C.displayName = "NestedListItemSelectionProvider");
            } catch {}
            var R = n(55482),
                N = n(96665),
                j = n(1075);
            let _ = { Dialog: "ControlsDialog-module__Dialog--HWRIK" };
            var w = n(7151),
                E = n(29731);
            let A = {
                metadataContainer:
                    "MetadataContainer-module__metadataContainer--_O_j_",
            };
            function P({ children: e, className: l }) {
                let n = (0, d.useRef)(null),
                    { controlsDialogOpen: s } = (0, h.q)();
                return (
                    (0, w.G)(n),
                    (0, a.jsx)("div", {
                        ref: n,
                        "aria-hidden": !s,
                        ...(0, E.G)("nested-list-view-item-metadata"),
                        className: (0, o.$)(A.metadataContainer, l),
                        children: e,
                    })
                );
            }
            try {
                P.displayName ||
                    (P.displayName = "NestedListItemMetadataContainer");
            } catch {}
            let B = {
                    item: "NestedListItem-module__item--Tl61a",
                    selected: "NestedListItem-module__selected--dE3Sl",
                    itemGrid: "NestedListItem-module__itemGrid--CnhyY",
                    hasResizableActionsWithActionBar:
                        "NestedListItem-module__hasResizableActionsWithActionBar--qqDY9",
                    dragHandle: "NestedListItem-module__dragHandle--Esd2j",
                },
                D = ({
                    onClose: e,
                    title: l,
                    metadata: n,
                    secondaryActions: s,
                    children: i,
                }) =>
                    (0, a.jsx)(N.l, {
                        title: "Manage item",
                        onClose: e,
                        footerButtons: [{ content: "Ok", onClick: e }],
                        className: _.Dialog,
                        children: (0, a.jsx)(w.a, {
                            value: !1,
                            children: (0, a.jsx)("div", {
                                className: j.A.responsiveContainer,
                                children: (0, a.jsxs)("div", {
                                    className: B.itemGrid,
                                    children: [
                                        l,
                                        i,
                                        (0, a.jsx)(P, { children: n }),
                                        s,
                                    ],
                                }),
                            }),
                        }),
                    });
            try {
                D.displayName || (D.displayName = "ControlsDialog");
            } catch {}
            let M = { hint: "ControlsDialogHint-module__hint--B9wWI" };
            function V() {
                return (0, a.jsxs)("div", {
                    className: M.hint,
                    children: [
                        (0, a.jsx)("span", { children: "Manage this item" }),
                        " ",
                        (0, a.jsx)(r.hh, {
                            commandId: "list-views:open-manage-item-dialog",
                            format: "condensed",
                        }),
                    ],
                });
            }
            try {
                V.displayName || (V.displayName = "ControlsDialogHint");
            } catch {}
            var U = n(87826);
            let O = {
                    container: "Selection-module__container--GeDCA",
                    checkbox: "Selection-module__checkbox--KyrMU",
                },
                q = () => {
                    let { isSelectable: e } = (0, g.c)(),
                        { isSelected: l, onSelect: n } = x(),
                        { title: s } = (0, L.$)();
                    return e
                        ? (0, a.jsx)("div", {
                              className: O.container,
                              ...(0, E.G)("list-view-item-selection"),
                              children: (0, a.jsx)(U.A, {
                                  checked: l,
                                  onChange: () => n(!l),
                                  "aria-label": `Select: ${s}`,
                                  className: O.checkbox,
                                  ...(0, E.G)("list-view-item-selection-input"),
                              }),
                          })
                        : null;
                };
            try {
                q.displayName || (q.displayName = "NestedListItemSelection");
            } catch {}
            let H = ({
                    children: e,
                    isActive: l = !1,
                    title: n,
                    metadata: t,
                    secondaryActions: k,
                    subItemsCount: F,
                    subItems: K,
                    loadSubItems: v,
                    defaultExpanded: T = !1,
                    className: C,
                    metadataContainerClassName: N,
                    dragAndDropProps: j,
                    ..._
                }) => {
                    let { idPrefix: E, isReadOnly: A } = (0, m.J)(),
                        { isSelectable: M } = (0, g.c)(),
                        {
                            anyItemsWithActionBar: U,
                            hasResizableActionsWithActionBar: O,
                        } = (0, c.G)(),
                        H = (0, d.useId)(),
                        { isSelected: $, onSelect: z } = x(),
                        { status: W } = (0, R.i)(),
                        { title: Q, titleAction: G } = (0, L.$)(),
                        { description: Y } = (() => {
                            let e = (0, d.useContext)(f);
                            if (!e)
                                throw Error(
                                    "useNestedListItemDescription must be used with NestedListItemDescriptionProvider."
                                );
                            return e;
                        })(),
                        { leadingBadge: X } = (0, S.$)(),
                        J = (0, b.s)(),
                        { hasNewActivity: Z } = (0, I.b)(),
                        ee = (0, d.useRef)(null),
                        [el, en] = (0, d.useState)("initial"),
                        [ea, es] = (0, d.useState)(T),
                        { isInDragMode: ei } = (0, s.gY)(),
                        { controlsDialogOpen: et, setControlsDialogOpen: er } =
                            (0, h.q)(),
                        eu = (0, d.useRef)(null),
                        eo = F && F > 0;
                    (0, d.useEffect)(() => {
                        ee.current &&
                            l &&
                            document.activeElement?.tagName === "BODY" &&
                            ee.current.focus();
                    });
                    let ed = (0, d.useCallback)(
                            (e) => {
                                if (e.nativeEvent instanceof KeyboardEvent)
                                    switch (e.key) {
                                        case "Enter":
                                            ee?.current ===
                                                document.activeElement &&
                                                G &&
                                                G(e);
                                            break;
                                        case " ":
                                            if (
                                                ee?.current !==
                                                document.activeElement
                                            )
                                                break;
                                            if ((e.preventDefault(), !A)) {
                                                if (
                                                    eu.current &&
                                                    !e.nativeEvent.ctrlKey &&
                                                    !ei
                                                ) {
                                                    ((ep.current =
                                                        document.activeElement),
                                                        eu.current?.focus(),
                                                        eu.current?.click(),
                                                        e.preventDefault());
                                                    break;
                                                }
                                                if (M) {
                                                    z(!$);
                                                    break;
                                                }
                                            }
                                            if (G) {
                                                G(e);
                                                break;
                                            }
                                            (eo || K) && es(!ea);
                                            break;
                                        case "Escape":
                                            ee?.current?.focus();
                                    }
                            },
                            [G, A, eo, K, ei, M, z, $, ea]
                        ),
                        ec = (0, d.useCallback)(() => {
                            let e = $ ? "Selected" : "",
                                l = Z ? "New activity" : "",
                                n = `Press ${(0, i.U0)() ? "Command" : "Control"}, Shift, U for more actions`,
                                a = "";
                            J && (a = J.completion);
                            let s = [e, X, Q, W]
                                .filter((e) => e.trim())
                                .join(": ");
                            try {
                                s = s.endsWith("...")
                                    ? s
                                    : s.replace(/\.+$/, "");
                            } catch {
                                for (; s.endsWith("."); )
                                    s = s.substring(0, s.length - 1);
                            }
                            let t = [s, Y, l, a, n]
                                .filter((e) => e.trim())
                                .join(". ");
                            return t.endsWith(".") ? t : `${t}.`;
                        }, [Z, $, J, Y, X, W, Q]),
                        [em, eg] = (0, d.useTransition)(),
                        ey = (0, d.useCallback)(() => {
                            em ||
                                (en("loading"),
                                eg(() => {
                                    v?.();
                                }));
                        }, [v, em, en]);
                    (0, d.useEffect)(() => {
                        em ? en("loading") : en("done");
                    }, [em]);
                    let ep = (0, d.useRef)(null);
                    return (
                        (0, d.useEffect)(() => {
                            !ei &&
                                ep.current &&
                                (ep.current.focus(), (ep.current = null));
                        }, [ei]),
                        (0, a.jsx)(y.F, {
                            onError: () => {
                                en("error");
                            },
                            onDismiss: () => {
                                en("initial");
                            },
                            children: (0, a.jsx)(r.tL, {
                                commands: {
                                    "list-views:open-manage-item-dialog": () =>
                                        er(!0),
                                },
                                children: (0, a.jsxs)(u.G.Item, {
                                    onSelect: ed,
                                    defaultExpanded: T,
                                    expanded: ea && !ei,
                                    onExpandedChange: (e) => {
                                        (es(e), e && eo && !K && ey());
                                    },
                                    ref: ee,
                                    id: `${E}-list-view-node-${H}`,
                                    "aria-label": ec(),
                                    ..._,
                                    children: [
                                        j?.showTrigger &&
                                            !A &&
                                            (0, a.jsx)(u.G.LeadingAction, {
                                                children: (0, a.jsx)(
                                                    s.BS.DragTrigger,
                                                    {
                                                        className: (0, o.$)(
                                                            B.dragHandle
                                                        ),
                                                        ref: eu,
                                                    }
                                                ),
                                            }),
                                        (0, a.jsx)("div", {
                                            className: (0, o.$)(
                                                B.item,
                                                B.itemGrid,
                                                $ && B.selected,
                                                U &&
                                                    O &&
                                                    B.hasResizableActionsWithActionBar,
                                                C
                                            ),
                                            tabIndex: -1,
                                            children: (0, a.jsxs)(w.a, {
                                                value: !0,
                                                children: [
                                                    n,
                                                    (0, a.jsx)(q, {}),
                                                    e,
                                                    Array.isArray(t) &&
                                                    t.length > 0
                                                        ? (0, a.jsx)(P, {
                                                              className: N,
                                                              children: t.map(
                                                                  (e, l) =>
                                                                      (0,
                                                                      a.jsx)(
                                                                          d.Fragment,
                                                                          {
                                                                              children:
                                                                                  e,
                                                                          },
                                                                          l
                                                                      )
                                                              ),
                                                          })
                                                        : !!(
                                                              t &&
                                                              !Array.isArray(t)
                                                          ) &&
                                                          (0, a.jsx)(P, {
                                                              className: N,
                                                              children: t,
                                                          }),
                                                    k ??
                                                        (U &&
                                                            (0, a.jsx)(
                                                                p.o,
                                                                {}
                                                            )),
                                                ],
                                            }),
                                        }),
                                        (0, a.jsx)(V, {}),
                                        et &&
                                            (0, a.jsx)(D, {
                                                onClose: () => er(!1),
                                                title: n,
                                                metadata: t,
                                                secondaryActions: k,
                                                children: e,
                                            }),
                                        (eo || K) &&
                                            (0, a.jsx)(u.G.SubTree, {
                                                state: el,
                                                count: F,
                                                children: K,
                                            }),
                                    ],
                                }),
                            }),
                        })
                    );
                },
                $ = ({
                    children: e,
                    isSelected: l = !1,
                    onSelect: n = t.l,
                    ...i
                }) => {
                    let { setSelectedCount: r } = (0, g.c)(),
                        u = (0, d.useRef)(l);
                    ((u.current = l),
                        (0, d.useEffect)(() => {
                            r((e) => (l ? e + 1 : Math.max(0, e - 1)));
                        }, [l, r]),
                        (0, d.useEffect)(
                            () => () => {
                                u.current && r((e) => Math.max(0, e - 1));
                            },
                            [r]
                        ));
                    let o = (0, d.useMemo)(
                        () => ({ isSelected: l, onSelect: n }),
                        [l, n]
                    );
                    return (0, a.jsx)(h.m, {
                        children: (0, a.jsx)(b.g, {
                            children: (0, a.jsx)(F, {
                                children: (0, a.jsx)(S.X, {
                                    children: (0, a.jsx)(L.s, {
                                        children: (0, a.jsx)(C, {
                                            value: o,
                                            children: (0, a.jsx)(I.V, {
                                                children: (0, a.jsx)(K, {
                                                    children: (0, a.jsx)(R.s, {
                                                        children: (0, a.jsx)(
                                                            s.BS.Item,
                                                            {
                                                                id:
                                                                    i
                                                                        .dragAndDropProps
                                                                        ?.itemId ||
                                                                    "",
                                                                index: 0,
                                                                title:
                                                                    i
                                                                        .dragAndDropProps
                                                                        ?.itemId ||
                                                                    "",
                                                                as: "div",
                                                                hideTrigger: !0,
                                                                isDragOverlay:
                                                                    i
                                                                        .dragAndDropProps
                                                                        ?.isOverlay ??
                                                                    !1,
                                                                children: (0,
                                                                a.jsx)(H, {
                                                                    ...i,
                                                                    children: e,
                                                                }),
                                                            }
                                                        ),
                                                    }),
                                                }),
                                            }),
                                        }),
                                    }),
                                }),
                            }),
                        }),
                    });
                };
            try {
                H.displayName || (H.displayName = "NestedListItemInternal");
            } catch {}
            try {
                $.displayName || ($.displayName = "NestedListItem");
            } catch {}
        },
        97764: (e, l, n) => {
            n.d(l, { T: () => m });
            var a = n(74848),
                s = n(20263),
                i = n(29731),
                t = n(81246),
                r = n(34164),
                u = n(96540),
                o = n(16474),
                d = n(34082);
            let c = {
                container: "Title-module__container--iESYk",
                anchor: "Title-module__anchor--uebmc",
                truncate: "Title-module__truncate--BAKr7",
                trailingBadges: "Title-module__trailingBadges--rIk0t",
            };
            function m({
                additionalLinkProps: e = {},
                anchorRef: l,
                anchorClassName: n,
                children: m,
                containerClassName: g,
                href: y,
                leadingBadge: p,
                onClick: k,
                tooltip: F,
                trailingBadges: b,
                value: h,
            }) {
                let { setTitle: f, setTitleAction: K } = (0, d.$)(),
                    { controlsDialogOpen: S } = (0, o.q)(),
                    I = (0, u.useRef)(null),
                    v = l || I;
                return (
                    (0, u.useEffect)(() => {
                        f(
                            ("function" != typeof v &&
                                v?.current?.textContent) ||
                                h
                        );
                    }, [v, f, h]),
                    (0, u.useEffect)(() => {
                        (y || k) &&
                            "function" != typeof v &&
                            v?.current &&
                            K(() => (e) => {
                                y && (e.metaKey || e.ctrlKey)
                                    ? window.open(y, "_blank")
                                    : v?.current?.click();
                            });
                    }, [v, y, k, K]),
                    (0, a.jsxs)("div", {
                        ...(0, i.G)("nested-list-view-item-primary-container"),
                        className: (0, r.$)(c.container, g),
                        children: [
                            p,
                            (0, a.jsx)(t.A, {
                                ...(!S ? { role: "none" } : {}),
                                ref: v,
                                className: (0, r.$)(c.anchor, c.truncate, n),
                                href: y,
                                onClick: k,
                                ...e,
                                ...(0, i.G)("listitem-title-link"),
                                children: (0, a.jsx)(s.BC, {
                                    html: h,
                                    title: F,
                                }),
                            }),
                            b &&
                                (0, a.jsx)("span", {
                                    className: (0, r.$)(
                                        c.trailingBadges,
                                        c.truncate
                                    ),
                                    children: b,
                                }),
                            m,
                        ],
                    })
                );
            }
            try {
                m.displayName || (m.displayName = "NestedListItemTitle");
            } catch {}
        },
        74142: (e, l, n) => {
            n.d(l, { g: () => t, s: () => r });
            var a = n(74848),
                s = n(96540);
            let i = (0, s.createContext)(void 0),
                t = ({ children: e }) => {
                    let [l, n] = (0, s.useState)(""),
                        t = (0, s.useMemo)(
                            () => ({ completion: l, setCompletion: n }),
                            [l]
                        );
                    return (0, a.jsx)(i.Provider, { value: t, children: e });
                },
                r = () => (0, s.useContext)(i);
            try {
                i.displayName ||
                    (i.displayName = "NestedListItemCompletionContext");
            } catch {}
            try {
                t.displayName ||
                    (t.displayName = "NestedListItemCompletionProvider");
            } catch {}
        },
        16474: (e, l, n) => {
            n.d(l, { m: () => r, q: () => u });
            var a = n(74848),
                s = n(73189),
                i = n(96540);
            let t = (0, i.createContext)({
                    controlsDialogOpen: !1,
                    setControlsDialogOpen: s.l,
                }),
                r = ({ children: e }) => {
                    let [l, n] = (0, i.useState)(!1),
                        s = (0, i.useMemo)(
                            () => ({
                                controlsDialogOpen: l,
                                setControlsDialogOpen: n,
                            }),
                            [l]
                        );
                    return (0, a.jsx)(t.Provider, { value: s, children: e });
                },
                u = () => (0, i.useContext)(t);
            try {
                t.displayName ||
                    (t.displayName = "NestedListItemControlsDialogContext");
            } catch {}
            try {
                r.displayName ||
                    (r.displayName = "NestedListItemControlsDialogProvider");
            } catch {}
        },
        82961: (e, l, n) => {
            n.d(l, { $: () => r, X: () => t });
            var a = n(74848),
                s = n(96540);
            let i = (0, s.createContext)(void 0),
                t = ({ children: e }) => {
                    let [l, n] = (0, s.useState)(""),
                        t = (0, s.useMemo)(
                            () => ({ leadingBadge: l, setLeadingBadge: n }),
                            [l]
                        );
                    return (0, a.jsx)(i.Provider, { value: t, children: e });
                },
                r = () => {
                    let e = (0, s.useContext)(i);
                    if (!e)
                        throw Error(
                            "useNestedListItemLeadingBadge must be used with NestedListItemLeadingBadgeProvider."
                        );
                    return e;
                };
            try {
                i.displayName ||
                    (i.displayName = "NestedListItemLeadingBadgeContext");
            } catch {}
            try {
                t.displayName ||
                    (t.displayName = "NestedListItemLeadingBadgeProvider");
            } catch {}
        },
        45379: (e, l, n) => {
            n.d(l, { V: () => t, b: () => r });
            var a = n(74848),
                s = n(96540);
            let i = (0, s.createContext)(void 0),
                t = ({ children: e }) => {
                    let [l, n] = (0, s.useState)(!1),
                        t = (0, s.useMemo)(
                            () => ({ hasNewActivity: l, setHasNewActivity: n }),
                            [l]
                        );
                    return (0, a.jsx)(i.Provider, { value: t, children: e });
                },
                r = () => {
                    let e = (0, s.useContext)(i);
                    if (!e)
                        throw Error(
                            "useNestedListItemNewActivity must be used with NewActivityProvider."
                        );
                    return e;
                };
            try {
                i.displayName ||
                    (i.displayName = "NestedListItemNewActivityContext");
            } catch {}
            try {
                t.displayName ||
                    (t.displayName = "NestedListItemNewActivityProvider");
            } catch {}
        },
        55482: (e, l, n) => {
            n.d(l, { i: () => r, s: () => t });
            var a = n(74848),
                s = n(96540);
            let i = (0, s.createContext)(void 0),
                t = ({ children: e }) => {
                    let [l, n] = (0, s.useState)(""),
                        t = (0, s.useMemo)(
                            () => ({ status: l, setStatus: n }),
                            [l]
                        );
                    return (0, a.jsx)(i.Provider, { value: t, children: e });
                },
                r = () => {
                    let e = (0, s.useContext)(i);
                    if (!e)
                        throw Error(
                            "useNestedListItemStatus must be used with NestedListItemStatusProvider."
                        );
                    return e;
                };
            try {
                i.displayName ||
                    (i.displayName = "NestedListItemStatusContext");
            } catch {}
            try {
                t.displayName ||
                    (t.displayName = "NestedListItemStatusProvider");
            } catch {}
        },
        34082: (e, l, n) => {
            n.d(l, { $: () => r, s: () => t });
            var a = n(74848),
                s = n(96540);
            let i = (0, s.createContext)(void 0),
                t = ({ children: e }) => {
                    let [l, n] = (0, s.useState)(""),
                        [t, r] = (0, s.useState)(null),
                        u = (0, s.useMemo)(
                            () => ({
                                title: l,
                                setTitle: (e) => n(e.trim()),
                                titleAction: t,
                                setTitleAction: r,
                            }),
                            [l, t]
                        );
                    return (0, a.jsx)(i.Provider, { value: u, children: e });
                },
                r = () => {
                    let e = (0, s.useContext)(i);
                    if (!e)
                        throw Error(
                            "useNestedListItemTitle must be used with NestedListItemTitleProvider."
                        );
                    return e;
                };
            try {
                i.displayName || (i.displayName = "NestedListItemTitleContext");
            } catch {}
            try {
                t.displayName ||
                    (t.displayName = "NestedListItemTitleProvider");
            } catch {}
        },
        15106: (e, l, n) => {
            n.d(l, { v: () => b });
            var a = n(74848),
                s = n(87670),
                i = n(29731),
                t = n(63557),
                r = n(20426),
                u = n(34164),
                o = n(96540),
                d = n(94273),
                c = n(62102),
                m = n(28755),
                g = n(19983),
                y = n(94838),
                p = n(1075);
            let k = {
                    onDrop: () => {},
                    renderOverlay: () => (0, a.jsx)(a.Fragment, {}),
                    items: [],
                },
                F = {
                    start: [s.vL.Space],
                    cancel: [s.vL.Esc],
                    end: [s.vL.Space],
                },
                b = ({
                    title: e,
                    titleHeaderTag: l,
                    children: n,
                    totalCount: s,
                    selectedCount: i = 0,
                    singularUnits: t,
                    pluralUnits: r,
                    isSelectable: u,
                    isCollapsible: y = !1,
                    isReadOnly: p = !1,
                    ...k
                }) => {
                    let F = (0, o.useMemo)(
                        () => o.Children.toArray(n).length,
                        [n]
                    );
                    return (0, a.jsx)(c.N, {
                        isCollapsible: y,
                        isReadOnly: p,
                        children: (0, a.jsx)(g.y, {
                            title: e,
                            titleHeaderTag: l,
                            children: (0, a.jsx)(m.W, {
                                countOnPage: F,
                                selectedCount: i,
                                totalCount: s,
                                singularUnits: t,
                                pluralUnits: r,
                                isSelectable: u && !p,
                                children: (0, a.jsx)(d.w, {
                                    children: (0, a.jsx)(h, {
                                        ...k,
                                        children: n,
                                    }),
                                }),
                            }),
                        }),
                    });
                },
                h = ({
                    header: e,
                    children: l,
                    ariaLabelledBy: n,
                    className: o,
                    dragAndDropProps: d = k,
                    ...m
                }) => {
                    let {
                            idPrefix: b,
                            isExpanded: h,
                            isCollapsible: f,
                            isReadOnly: K,
                        } = (0, c.J)(),
                        { title: S, titleHeaderTag: I } = (0, g.M)(),
                        v = n ?? `${b}-nested-list-view-container-title`;
                    return (0, a.jsxs)("div", {
                        ...(0, i.G)(`${b}-nested-list-view-container`),
                        className: (0, u.$)(
                            p.A.container,
                            p.A.responsiveContainer,
                            f && K && p.A.collapsible,
                            o
                        ),
                        children: [
                            !n &&
                                (0, a.jsx)(t.A, {
                                    className: "sr-only",
                                    as: I,
                                    id: v,
                                    ...(0, i.G)("list-view-title"),
                                    children: S,
                                }),
                            e,
                            h &&
                                (0, a.jsx)(y.F, {
                                    children: (0, a.jsx)(s.BS, {
                                        as: "div",
                                        keyboardCodes: F,
                                        ...d,
                                        children: (0, a.jsx)(r.G, {
                                            "aria-labelledby": v,
                                            ...(0, i.G)("list-view-items"),
                                            ...m,
                                            children: l,
                                        }),
                                    }),
                                }),
                        ],
                    });
                };
            try {
                b.displayName || (b.displayName = "NestedListView");
            } catch {}
            try {
                h.displayName || (h.displayName = "NestedListViewInternal");
            } catch {}
        },
        46036: (e, l, n) => {
            n.d(l, { s: () => I });
            var a,
                s = n(74848),
                i = n(29731),
                t = n(34164),
                r = n(96540),
                u = n(62102),
                o = n(28755),
                d = n(19983),
                c = n(91230);
            let m = {
                    actionBar: "ActionBar-module__actionBar--XFS0S",
                    noneDensity: "ActionBar-module__noneDensity--GnLQO",
                    condensedDensity:
                        "ActionBar-module__condensedDensity--m4vXo",
                    normalDensity: "ActionBar-module__normalDensity--wiNpl",
                    spaciousDensity: "ActionBar-module__spaciousDensity--VGXpJ",
                },
                g = ({
                    actions: e,
                    children: l,
                    density: n = "normal",
                    actionsLabel: a,
                    className: r,
                }) =>
                    e && e.length > 0
                        ? (0, s.jsx)(c.E7, {
                              label: a?.trim(),
                              actions: e,
                              density: n,
                              className: r,
                              ...(0, i.G)("list-view-actions"),
                              children: l,
                          })
                        : (0, s.jsx)("div", {
                              ...(0, i.G)("list-view-actions"),
                              className: (0, t.$)(
                                  m.actionBar,
                                  m[`${n}Density`],
                                  r
                              ),
                              children: l,
                          });
            try {
                g.displayName ||
                    (g.displayName = "NestedListViewHeaderActionBar");
            } catch {}
            let y = {
                    container: "NestedListViewHeader-module__container--RY50I",
                },
                p = { list: "SectionFilters-module__list--bvh6G" },
                k = ({ links: e, className: l }) =>
                    e.length < 1
                        ? null
                        : (0, s.jsx)("div", {
                              ...(0, i.G)("nested-list-view-section-filters"),
                              children: (0, s.jsx)("ul", {
                                  className: (0, t.$)(p.list, l),
                                  children: e.map((e, l) =>
                                      (0, s.jsx)(
                                          "li",
                                          {
                                              ...(0, i.G)(
                                                  `nested-list-view-section-filter-${l}`
                                              ),
                                              children: e,
                                          },
                                          `section-filter-${l}`
                                      )
                                  ),
                              }),
                          });
            try {
                k.displayName ||
                    (k.displayName = "NestedListViewHeaderSectionFilters");
            } catch {}
            var F = n(4559),
                b = n(65029),
                h = n(87826);
            let f = {
                    container: "SelectAllCheckbox-module__container--SByDi",
                    checkboxContainer:
                        "SelectAllCheckbox-module__checkboxContainer--nKNGo",
                    count: "SelectAllCheckbox-module__count--mZWGM",
                },
                K = ({ onToggle: e, className: l }) => {
                    let { title: n } = (0, d.M)(),
                        {
                            isSelectable: a,
                            selectedCount: u,
                            totalCount: c,
                            countOnPage: m,
                            isSelectAllChecked: g,
                            anyItemsSelected: y,
                            singularUnits: p,
                            pluralUnits: k,
                        } = (0, o.c)(),
                        K = (0, r.useId)(),
                        S = (0, r.useRef)(null),
                        I = (0, r.useRef)(null),
                        v = (0, r.useMemo)(() => u < m, [m, u]),
                        L = y && v,
                        T = 1 === u ? p : k,
                        C =
                            "number" == typeof c
                                ? `of ${c} selected`
                                : "selected",
                        x = `${u} ${T} ${C}`,
                        R = (0, r.useCallback)(() => {
                            e && (L ? e(!1) : e(!g));
                        }, [L, g, e]);
                    if (
                        ((0, r.useEffect)(() => {
                            I.current && (0, F.C)(I.current);
                        }, [I, x]),
                        !a)
                    )
                        return null;
                    let N = `${K}-nested-list-view-select-all`;
                    return (0, s.jsxs)("div", {
                        className: (0, t.$)(f.container, l),
                        ...(0, i.G)("nested-list-view-select-all-container"),
                        id: `${K}-nested-list-view-select-all-container`,
                        children: [
                            (0, s.jsx)("div", {
                                className: f.checkboxContainer,
                                children: (0, s.jsxs)(b.A, {
                                    id: N,
                                    children: [
                                        (0, s.jsx)(h.A, {
                                            onChange: R,
                                            value: "default",
                                            checked: g,
                                            indeterminate: L,
                                            onKeyDown: (e) => {
                                                ("Enter" === e.key ||
                                                    " " === e.key) &&
                                                    (e.preventDefault(), R());
                                            },
                                            tabIndex: 0,
                                            ref: S,
                                            ...(0, i.G)("select-all-checkbox"),
                                        }),
                                        (0, s.jsxs)(b.A.Label, {
                                            visuallyHidden: !0,
                                            ...(0, i.G)("select-all-label"),
                                            children: [
                                                "Select all ",
                                                k,
                                                ": ",
                                                n,
                                            ],
                                        }),
                                    ],
                                }),
                            }),
                            (0, s.jsxs)("p", {
                                className: (0, t.$)(f.count, { "sr-only": !y }),
                                ...(0, i.G)("select-all-selected-count"),
                                children: [
                                    (0, s.jsxs)("span", {
                                        "aria-hidden": "true",
                                        className: (0, t.$)({ "sr-only": !y }),
                                        ...(0, i.G)(
                                            "select-all-selected-count-without-units"
                                        ),
                                        children: [u, " ", C],
                                    }),
                                    (0, s.jsx)("span", {
                                        className: "sr-only",
                                        ref: I,
                                        ...(0, i.G)("sr-content"),
                                        children: x,
                                    }),
                                ],
                            }),
                        ],
                    });
                };
            try {
                K.displayName ||
                    (K.displayName = "NestedListViewHeaderSelectAllCheckbox");
            } catch {}
            let S = ({ idPrefix: e, assistiveAnnouncement: l }) =>
                    (0, s.jsx)("div", {
                        id: `${e}-nested-list-view-announcements`,
                        role: "status",
                        "aria-live": "polite",
                        "aria-atomic": "true",
                        className: "sr-only",
                        ...(0, i.G)("nested-list-view-announcement-container"),
                        children: l,
                    }),
                I = ({
                    title: e,
                    completionPill: l,
                    assistiveAnnouncement: n,
                    sectionFilters: a,
                    children: c,
                    className: m,
                    actionBarClassName: p,
                    onToggleSelectAll: F,
                    actions: b,
                    actionsLabel: h,
                    ...f
                }) => {
                    let { idPrefix: I } = (0, u.J)(),
                        { setHasMetadataTitle: v } = (0, d.M)(),
                        { anyItemsSelected: L } = (0, o.c)();
                    (0, r.useEffect)(() => {
                        v(!!e);
                    });
                    let T = (0, r.useCallback)(
                        () =>
                            a
                                ? Array.isArray(a)
                                    ? (0, s.jsx)(k, { links: a })
                                    : (0, r.isValidElement)(a)
                                      ? (0, s.jsx)(s.Fragment, { children: a })
                                      : null
                                : null,
                        [a]
                    );
                    return (0, s.jsxs)("div", {
                        id: `${I}-nested-list-view-metadata`,
                        className: (0, t.$)(y.container, m),
                        ...(0, i.G)("nested-list-view-metadata"),
                        children: [
                            (0, s.jsx)(K, {
                                onToggle: (e) => {
                                    F && F(e);
                                },
                            }),
                            (0, s.jsx)(T, {}),
                            !L && e,
                            l,
                            (0, s.jsx)(g, {
                                className: p,
                                ...(b && h
                                    ? { actions: b, actionsLabel: h }
                                    : {}),
                                ...f,
                                children: c,
                            }),
                            n &&
                                (0, s.jsx)(S, {
                                    idPrefix: I,
                                    assistiveAnnouncement: n,
                                }),
                        ],
                    });
                };
            try {
                S.displayName ||
                    (S.displayName = "NestedListViewAnnouncements");
            } catch {}
            try {
                I.displayName || (I.displayName = "NestedListViewHeader");
            } catch {}
            try {
                (a = ListFilters).displayName ||
                    (a.displayName = "ListFilters");
            } catch {}
        },
        43063: (e, l, n) => {
            n.d(l, { c: () => y });
            var a = n(74848),
                s = n(29731),
                i = n(38621),
                t = n(63557),
                r = n(87330),
                u = n(34164),
                o = n(96540),
                d = n(62102),
                c = n(305),
                m = n(19983);
            let g = {
                    container: "Title-module__container--dQS4K",
                    header: "Title-module__header--PxCgZ",
                    expandButton: "Title-module__expandButton--zzl6c",
                },
                y = ({
                    title: e,
                    children: l,
                    className: n,
                    scrollToOnCollapseOffset: y,
                }) => {
                    let p = (function (e) {
                            let { titleHeaderTag: l, hasMetadataTitle: n } = (0,
                            m.M)();
                            return (0, o.useMemo)(() => {
                                let a = c.Dy.findIndex((l) => l === e),
                                    s = c.n1.indexOf(l) + (n ? a : a - 1);
                                return s > c.n1.length - 1
                                    ? "h6"
                                    : c.n1[s] || c.O1[e];
                            }, [l, n, e]);
                        })("nested-list-view-metadata"),
                        {
                            isCollapsible: k,
                            isExpanded: F,
                            setIsExpanded: b,
                        } = (0, d.J)(),
                        h = (0, o.useRef)(null);
                    return (
                        (0, o.useEffect)(() => {
                            let { current: e } = h;
                            if (void 0 !== y && null !== e && !F) {
                                let l =
                                    e.getBoundingClientRect().top +
                                    window.scrollY +
                                    y;
                                window.scrollTo({
                                    top: l,
                                    behavior: "instant",
                                });
                            }
                        }, [F, y]),
                        (0, a.jsxs)("div", {
                            ref: h,
                            className: (0, u.$)(g.container, n),
                            children: [
                                (0, a.jsxs)(t.A, {
                                    as: p,
                                    className: g.header,
                                    ...(0, s.G)(
                                        "nested-list-view-header-title"
                                    ),
                                    children: [
                                        k &&
                                            (0, a.jsx)(r.K, {
                                                icon: F
                                                    ? i.ChevronDownIcon
                                                    : i.ChevronRightIcon,
                                                onClick: () => {
                                                    b(!F);
                                                },
                                                "aria-label": F
                                                    ? `Collapse ${e}`
                                                    : `Expand ${e}`,
                                                size: "small",
                                                variant: "invisible",
                                                "aria-expanded": F,
                                                className: g.expandButton,
                                                tooltipDirection: "n",
                                            }),
                                        e,
                                    ],
                                }),
                                l,
                            ],
                        })
                    );
                };
            try {
                y.displayName || (y.displayName = "NestedListViewHeaderTitle");
            } catch {}
        },
        94273: (e, l, n) => {
            n.d(l, { G: () => u, w: () => r });
            var a = n(74848),
                s = n(73189),
                i = n(96540);
            let t = (0, i.createContext)({
                    anyItemsWithActionBar: !1,
                    setAnyItemsWithActionBar: s.l,
                    hasResizableActionsWithActionBar: !1,
                    setHasResizableActionsWithActionBar: s.l,
                }),
                r = ({ children: e }) => {
                    let [l, n] = (0, i.useState)(!1),
                        [s, r] = (0, i.useState)(!1),
                        u = (0, i.useMemo)(
                            () => ({
                                anyItemsWithActionBar: l,
                                setAnyItemsWithActionBar: n,
                                hasResizableActionsWithActionBar: s,
                                setHasResizableActionsWithActionBar: r,
                            }),
                            [l, s]
                        );
                    return (0, a.jsx)(t.Provider, { value: u, children: e });
                };
            r.displayName = "NestedListViewItemsProvider";
            let u = () => (0, i.useContext)(t);
            try {
                t.displayName || (t.displayName = "ItemsContext");
            } catch {}
        },
        62102: (e, l, n) => {
            n.d(l, { J: () => r, N: () => t });
            var a = n(74848),
                s = n(96540);
            let i = (0, s.createContext)(void 0),
                t = ({
                    children: e,
                    isCollapsible: l = !1,
                    isReadOnly: n = !1,
                }) => {
                    let t = (0, s.useId)(),
                        [r, u] = (0, s.useState)(!0),
                        o = (0, s.useMemo)(
                            () => ({
                                idPrefix: t,
                                isExpanded: r,
                                setIsExpanded: u,
                                isCollapsible: l,
                                isReadOnly: n,
                            }),
                            [t, r, l, n]
                        );
                    return (0, a.jsx)(i.Provider, { value: o, children: e });
                };
            t.displayName = "NestedListViewPropertiesProvider";
            let r = () => {
                let e = (0, s.useContext)(i);
                if (!e)
                    throw Error(
                        "useNestedListViewProperties must be used with PropertiesProvider."
                    );
                return e;
            };
            try {
                i.displayName || (i.displayName = "PropertiesContext");
            } catch {}
        },
        28755: (e, l, n) => {
            n.d(l, { W: () => c, c: () => m });
            var a = n(74848),
                s = n(73189),
                i = n(80293),
                t = n(96540),
                r = n(305);
            let u = "list item",
                o = "list items",
                d = (0, t.createContext)({
                    selectedCount: 0,
                    setSelectedCount: s.l,
                    countOnPage: 0,
                    isSelectAllChecked: !1,
                    anyItemsSelected: !1,
                    singularUnits: u,
                    pluralUnits: o,
                    isSelectable: r.eX,
                }),
                c = (
                    {
                        children: e,
                        countOnPage: l = 0,
                        singularUnits: n = u,
                        pluralUnits: s = o,
                        totalCount: c,
                        selectedCount: m = 0,
                        isSelectable: g = r.eX,
                    } = {
                        singularUnits: u,
                        pluralUnits: o,
                        selectedCount: 0,
                        countOnPage: 0,
                        isSelectable: r.eX,
                    }
                ) => {
                    let [y, p] = (0, i.N)(m),
                        k = y > 0 && y >= l,
                        F = y > 0,
                        b = (0, t.useMemo)(
                            () => ({
                                totalCount: c,
                                countOnPage: l,
                                selectedCount: y,
                                setSelectedCount: p,
                                isSelectAllChecked: k,
                                anyItemsSelected: F,
                                singularUnits: n,
                                pluralUnits: s,
                                isSelectable: g,
                            }),
                            [c, l, y, p, k, F, n, s, g]
                        );
                    return (0, a.jsx)(d.Provider, { value: b, children: e });
                };
            c.displayName = "NestedListViewSelectionProvider";
            let m = () => (0, t.useContext)(d);
            try {
                d.displayName || (d.displayName = "SelectionContext");
            } catch {}
        },
        19983: (e, l, n) => {
            n.d(l, { M: () => u, y: () => r });
            var a = n(74848),
                s = n(96540),
                i = n(305);
            let t = (0, s.createContext)(void 0),
                r = ({ children: e, title: l, titleHeaderTag: n = i.tD }) => {
                    let [r, u] = (0, s.useState)(!1),
                        o = (0, s.useMemo)(
                            () => ({
                                title: l.trim() || i.QL,
                                titleHeaderTag: n,
                                hasMetadataTitle: r,
                                setHasMetadataTitle: u,
                            }),
                            [r, l, n]
                        );
                    return (0, a.jsx)(t.Provider, { value: o, children: e });
                };
            r.displayName = "NestedListViewTitleProvider";
            let u = () => {
                let e = (0, s.useContext)(t);
                if (!e)
                    throw Error(
                        "useNestedListViewTitle must be used with TitleProvider."
                    );
                return e;
            };
            try {
                t.displayName || (t.displayName = "TitleContext");
            } catch {}
        },
        34392: (e, l, n) => {
            n.d(l, { s: () => i });
            var a = n(74848),
                s = n(21998);
            function i() {
                return (0, a.jsx)(s.az, {
                    className: "Popover js-hovercard-content",
                    sx: {
                        position: "absolute",
                        display: "none",
                        outline: "none",
                    },
                    tabIndex: 0,
                    children: (0, a.jsx)("div", {
                        className:
                            "Popover-message Popover-message--bottom-left Popover-message--large Box color-shadow-large",
                        style: { width: "360px" },
                    }),
                });
            }
            try {
                i.displayName || (i.displayName = "PreviewCardOutlet");
            } catch {}
        },
        56742: (e, l, n) => {
            n.d(l, { a: () => y });
            var a,
                s,
                i,
                t = n(74848),
                r = n(30391),
                u = n(96540);
            let o = {
                completedIcon: "ProgressCircle-module__completedIcon--Z3cDp",
                animatedCircle: "ProgressCircle-module__animatedCircle--nkBlV",
                circleProgressShade:
                    "ProgressCircle-module__circleProgressShade--pwRiA",
                ringSvg: "ProgressCircle-module__ringSvg--Ndmzq",
                circle: "ProgressCircle-module__circle--tw0F_",
                circleProgress: "ProgressCircle-module__circleProgress--_T6Fx",
            };
            var d = n(14307),
                c = n(34164);
            function m({ size: e, accent: l }) {
                return (0, t.jsxs)("svg", {
                    "aria-hidden": "true",
                    focusable: "false",
                    width: e,
                    height: e,
                    viewBox: "0 0 16 16",
                    className: o.completedIcon,
                    children: [
                        (0, t.jsx)("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M10.0206 11.1074C9.68518 11.3949 9.18014 11.3561 8.8926 11.0206L5.8926 7.52061C5.62055 7.20322 5.63873 6.72989 5.93432 6.4343L7.43432 4.9343C7.74674 4.62188 8.25327 4.62188 8.56569 4.9343C8.87811 5.24672 8.87811 5.75325 8.56569 6.06567L7.58953 7.04182L10.1074 9.97935C10.3949 10.3148 10.3561 10.8198 10.0206 11.1074Z",
                            fill: l,
                        }),
                        (0, t.jsx)("circle", {
                            className: o.animatedCircle,
                            stroke: l,
                            strokeWidth: "2",
                            fill: "transparent",
                            cx: "50%",
                            cy: "50%",
                            r: Math.floor(e / 2) - 1,
                        }),
                    ],
                });
            }
            let g = ({
                percentCompleted: e,
                size: l,
                accent: n,
                svgClassName: a,
            }) => {
                let { theme: s } = (0, r.DP)(),
                    i = Math.floor(85) / 2,
                    d = Math.ceil(7.5),
                    m = e >= 100 ? 100 : Math.max(e - d, 1),
                    g = (0, u.useMemo)(
                        () =>
                            (0, t.jsx)("circle", {
                                className: o.circle,
                                cx: "50",
                                cy: "50",
                                r: i,
                                fill: "none",
                                stroke: s?.colors.border.default,
                                strokeWidth: 15,
                            }),
                        [i, 15, s]
                    ),
                    y = (0, u.useMemo)(
                        () =>
                            (0, t.jsx)("circle", {
                                className: o.circleProgressShade,
                                cx: "50",
                                cy: "50",
                                r: "20",
                                fill: "none",
                                pathLength: "100",
                                stroke: n,
                                strokeDasharray: "100",
                                strokeDashoffset: 100 === m ? 0 : 100 - m - d,
                                strokeWidth: "40",
                                style: { transform: "rotate(-90deg)" },
                            }),
                        [n, -75, d, 15, m]
                    ),
                    p = (0, u.useMemo)(
                        () =>
                            (0, t.jsx)("circle", {
                                className: o.circleProgress,
                                cx: "50",
                                cy: "50",
                                r: i,
                                fill: "none",
                                pathLength: "100",
                                stroke: n,
                                strokeDasharray: "100",
                                strokeDashoffset: 100 - m,
                                strokeLinecap: "round",
                                strokeWidth: 15,
                                style: { transform: "rotate(-75deg)" },
                            }),
                        [n, -75, m, i, 15]
                    );
                return (0, t.jsxs)("svg", {
                    className: (0, c.$)(o.ringSvg, a),
                    height: l,
                    width: l,
                    role: "presentation",
                    viewBox: "0 0 100 100",
                    "aria-hidden": "true",
                    focusable: "false",
                    children: [e > 0 ? y : null, g, e > 0 ? p : null],
                });
            };
            function y({
                percentCompleted: e,
                size: l = 16,
                color: n = "PURPLE",
                svgClassName: a,
            }) {
                let { accent: s } = (0, d.Wk)(n);
                return s
                    ? 100 === e
                        ? (0, t.jsx)(m, { size: l, accent: s })
                        : (0, t.jsx)(g, {
                              percentCompleted: e,
                              size: l,
                              accent: s,
                              svgClassName: a,
                          })
                    : null;
            }
            try {
                m.displayName || (m.displayName = "CompletedIcon");
            } catch {}
            try {
                g.displayName || (g.displayName = "ProgressCircleInternal");
            } catch {}
            try {
                (a = Background).displayName || (a.displayName = "Background");
            } catch {}
            try {
                (s = Shade).displayName || (s.displayName = "Shade");
            } catch {}
            try {
                (i = Ring).displayName || (i.displayName = "Ring");
            } catch {}
            try {
                y.displayName || (y.displayName = "ProgressCircle");
            } catch {}
        },
        87118: (e, l, n) => {
            n.d(l, { Q3: () => t, m1: () => r });
            var a = n(74848),
                s = n(96540);
            let i = (0, s.createContext)(void 0);
            function t({ children: e }) {
                let [l, n] = (0, s.useState)(void 0),
                    t = void 0 !== l,
                    r = (0, s.useCallback)((e) => n(e), []),
                    u = (0, s.useCallback)(() => n(void 0), []);
                return (0, a.jsx)(i.Provider, {
                    value: (0, s.useMemo)(
                        () => ({
                            createDialogOpen: t,
                            activeIssueId: l,
                            closeCreateDialog: u,
                            openCreateDialog: r,
                        }),
                        [l, u, t, r]
                    ),
                    children: e,
                });
            }
            let r = () => {
                let e = (0, s.useContext)(i);
                if (!e)
                    throw Error(
                        "useSubIssueState must be used within a SubIssueStateContext"
                    );
                return e;
            };
            try {
                i.displayName || (i.displayName = "SubIssueStateContext");
            } catch {}
            try {
                t.displayName || (t.displayName = "SubIssueStateProvider");
            } catch {}
        },
        81070: (e, l, n) => {
            n.d(l, { X: () => t });
            var a = n(74848),
                s = n(75177),
                i = n(96540);
            function t({ children: e, onObserve: l, onUnobserve: n, ...t }) {
                let r = (0, i.useRef)(null);
                return (
                    (0, i.useEffect)(() => {
                        if (r.current) {
                            let e = r.current;
                            return (l?.(e), () => n?.(e));
                        }
                    }, [r, l, n]),
                    (0, a.jsx)(s.A, { ...t, ref: r, children: e })
                );
            }
            try {
                t.displayName || (t.displayName = "ObservableBox");
            } catch {}
        },
    },
]);
//# sourceMappingURL=packages_issue-viewer_components_IssueViewer_tsx-packages_issue-viewer_contexts_IssueViewerCo-0b31b4-6c8d694d01b9.js.map
